; ModuleID = 'evm'
source_filename = "evm"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
define i8 @univ2_pair(ptr nocapture noundef readonly align 8 dereferenceable(24) %arg.gas.addr, ptr noalias nocapture noundef align 8 dereferenceable(32768) %arg.stack.addr, ptr noalias nocapture noundef align 8 dereferenceable(8) %arg.stack_len.addr, ptr noalias nocapture noundef readonly align 16 dereferenceable(672) %arg.env.addr, ptr noalias nocapture noundef readonly align 8 dereferenceable(224) %arg.contract.addr, ptr noalias nocapture noundef align 8 dereferenceable(88) %arg.ecx.addr) #0 {
entry:
  %gas.remaining.addr = getelementptr inbounds i8, ptr %arg.gas.addr, i64 8
  %ecx.resume_at.addr = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 32
  %ecx.resume_at = load ptr, ptr %ecx.resume_at.addr, align 8
  %0 = icmp eq ptr %ecx.resume_at, null
  br i1 %0, label %no_resume, label %resume

resume:                                           ; preds = %entry
  %stack_len17730 = load i64, ptr %arg.stack_len.addr, align 8
  indirectbr ptr %ecx.resume_at, [label %OP1293.ISZERO, label %OP1359.ISZERO, label %OP1443.ISZERO, label %OP2127.ISZERO, label %OP2216.ISZERO, label %OP2631.ISZERO, label %OP2716.ISZERO, label %OP2929.ISZERO, label %OP3013.ISZERO, label %OP3277.ISZERO, label %OP3630.ISZERO, label %OP3840.ISZERO, label %OP3924.ISZERO, label %OP4123.SWAP2, label %OP4775.ISZERO]

no_resume:                                        ; preds = %entry
  store i256 128, ptr %arg.stack.addr, align 16
  %sp2 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 1
  store i256 64, ptr %sp2, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !2)
  %ecx.memory.addr.i = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i = load ptr, ptr %ecx.memory.addr.i, align 8, !alias.scope !2
  %ecx.memory.len.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 16
  %ecx.memory.len.i = load i64, ptr %ecx.memory.len.addr.i, align 8, !noalias !2
  %ecx.memory.last_checkpoint.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 48
  %ecx.memory.last_checkpoint.i = load i64, ptr %ecx.memory.last_checkpoint.addr.i, align 8, !noalias !2
  %1 = sub i64 %ecx.memory.len.i, %ecx.memory.last_checkpoint.i
  %2 = icmp ult i64 %1, 96
  br i1 %2, label %resize.i, label %OP3.CALLVALUE, !prof !5

resize.i:                                         ; preds = %no_resume
  %3 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i = icmp eq i8 %3, 0
  br i1 %.not.i, label %OP3.CALLVALUE, label %return, !prof !6

OP3.CALLVALUE:                                    ; preds = %no_resume, %resize.i
  %ecx.memory.buffer.ptr.shared.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 8
  %ecx.memory.buffer.ptr.shared.i = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i, align 8, !noalias !2
  %ecx.memory.buffer.ptr.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i, i64 %ecx.memory.last_checkpoint.i
  %slot.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i, i64 64
  store i256 -57896044618658097711785492504343953926634992332820282019728792003956564819968, ptr %slot.i, align 1, !noalias !2
  %contract.call_value.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value = load i256, ptr %contract.call_value.addr, align 16
  store i256 %contract.call_value, ptr %arg.stack.addr, align 16
  %4 = icmp eq i256 %contract.call_value, 0
  %5 = zext i1 %4 to i256
  store i256 %5, ptr %sp2, align 16
  br i1 %4, label %OP11.JUMPDEST, label %OP8.PUSH1

OP8.PUSH1:                                        ; preds = %OP3.CALLVALUE
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp2, i8 0, i64 64, i1 false)
  %6 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2, i8 16)
  %.not23402 = icmp eq i8 %6, 0
  %spec.select = select i1 %.not23402, i8 16, i8 %6, !prof !6
  br label %return

OP11.JUMPDEST:                                    ; preds = %dynamic_jump_table, %OP3.CALLVALUE
  %len.addr.0 = phi i64 [ 1, %OP3.CALLVALUE ], [ %len.addr.197, %dynamic_jump_table ]
  %7 = add i64 %len.addr.0, -1
  %contract.input.len.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len = load i64, ptr %contract.input.len.addr, align 8
  %8 = zext i64 %contract.input.len to i256
  %sp31 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.0
  store i256 %8, ptr %sp31, align 16
  %sp35 = getelementptr i256, ptr %sp31, i64 -1
  %9 = icmp ult i64 %contract.input.len, 4
  %10 = zext i1 %9 to i256
  store i256 %10, ptr %sp35, align 16
  br i1 %9, label %OP213.JUMPDEST, label %OP18.PUSH1

OP18.PUSH1:                                       ; preds = %OP11.JUMPDEST
  %sp29 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %7
  store i256 0, ptr %sp29, align 16
  %11 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24066 = load ptr, ptr %11, align 8
  %12 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 0, ptr %arg.contract.addr.val24066, i64 %contract.input.len)
  %13 = lshr i256 %12, 224
  store i256 %13, ptr %sp35, align 16
  %sp60 = getelementptr i256, ptr %sp31, i64 1
  store i256 1784838210, ptr %sp60, align 16
  %14 = icmp ult i256 %12, 48119142951092613731468242753959111846395615040638799039548226541748339343360
  %15 = zext i1 %14 to i256
  store i256 %15, ptr %sp31, align 16
  br i1 %14, label %OP123.JUMPDEST, label %OP27.DUP1

OP27.DUP1:                                        ; preds = %OP18.PUSH1
  store i256 3130686038, ptr %sp60, align 16
  %16 = icmp ult i256 %12, -31388960621243054175639774016620195071397641943803221284339492569298897993728
  %17 = zext i1 %16 to i256
  store i256 %17, ptr %sp31, align 16
  br i1 %16, label %OP77.JUMPDEST, label %OP32.DUP1

OP32.DUP1:                                        ; preds = %OP27.DUP1
  store i256 3524403367, ptr %sp60, align 16
  %18 = icmp ult i256 %12, -20774362429470052235042368392156123512006754726573299692948476169720550129664
  %19 = zext i1 %18 to i256
  store i256 %19, ptr %sp31, align 16
  br i1 %18, label %OP59.JUMPDEST, label %OP37.DUP1

OP37.DUP1:                                        ; preds = %OP32.DUP1
  store i256 3524403367, ptr %sp60, align 16
  %20 = icmp eq i256 %13, 3524403367
  %21 = zext i1 %20 to i256
  store i256 %21, ptr %sp31, align 16
  br i1 %20, label %OP827.JUMPDEST, label %OP42.DUP1

OP42.DUP1:                                        ; preds = %OP37.DUP1
  store i256 3573918927, ptr %sp60, align 16
  %22 = icmp eq i256 %13, 3573918927
  %23 = zext i1 %22 to i256
  store i256 %23, ptr %sp31, align 16
  br i1 %22, label %OP831.JUMPDEST, label %OP47.DUP1

OP47.DUP1:                                        ; preds = %OP42.DUP1
  store i256 3714247998, ptr %sp60, align 16
  %24 = icmp eq i256 %13, 3714247998
  %25 = zext i1 %24 to i256
  store i256 %25, ptr %sp31, align 16
  br i1 %24, label %OP889.JUMPDEST, label %OP52.DUP1

OP52.DUP1:                                        ; preds = %OP47.DUP1
  store i256 4294363881, ptr %sp60, align 16
  %26 = icmp eq i256 %13, 4294363881
  %27 = zext i1 %26 to i256
  store i256 %27, ptr %sp31, align 16
  br i1 %26, label %OP918.JUMPDEST, label %OP213.JUMPDEST

OP59.JUMPDEST.loopexit:                           ; preds = %dynamic_jump_table
  %.phi.trans.insert25833 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp163.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25833, i64 -1
  %dup1164.pre = load i256, ptr %sp163.phi.trans.insert, align 16
  br label %OP59.JUMPDEST

OP59.JUMPDEST:                                    ; preds = %OP59.JUMPDEST.loopexit, %OP32.DUP1
  %dup1194 = phi i256 [ %13, %OP32.DUP1 ], [ %dup1164.pre, %OP59.JUMPDEST.loopexit ]
  %len.addr.1 = phi i64 [ %len.addr.0, %OP32.DUP1 ], [ %len.addr.197, %OP59.JUMPDEST.loopexit ]
  %28 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.1
  %sp167 = getelementptr i256, ptr %28, i64 1
  store i256 3130686038, ptr %sp167, align 16
  %29 = icmp eq i256 %dup1194, 3130686038
  %30 = zext i1 %29 to i256
  store i256 %30, ptr %28, align 16
  br i1 %29, label %OP797.JUMPDEST, label %OP65.DUP1

OP65.DUP1:                                        ; preds = %OP59.JUMPDEST
  store i256 3156594551, ptr %sp167, align 16
  %31 = icmp eq i256 %dup1194, 3156594551
  %32 = zext i1 %31 to i256
  store i256 %32, ptr %28, align 16
  br i1 %31, label %OP801.JUMPDEST, label %OP70.DUP1

OP70.DUP1:                                        ; preds = %OP65.DUP1
  store i256 3294232917, ptr %sp167, align 16
  %33 = icmp eq i256 %dup1194, 3294232917
  %34 = zext i1 %33 to i256
  store i256 %34, ptr %28, align 16
  br i1 %33, label %OP823.JUMPDEST, label %OP213.JUMPDEST

OP77.JUMPDEST.loopexit:                           ; preds = %dynamic_jump_table
  %.phi.trans.insert25817 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp210.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25817, i64 -1
  %dup1211.pre = load i256, ptr %sp210.phi.trans.insert, align 16
  br label %OP77.JUMPDEST

OP77.JUMPDEST:                                    ; preds = %OP77.JUMPDEST.loopexit, %OP27.DUP1
  %dup1271 = phi i256 [ %13, %OP27.DUP1 ], [ %dup1211.pre, %OP77.JUMPDEST.loopexit ]
  %len.addr.2 = phi i64 [ %len.addr.0, %OP27.DUP1 ], [ %len.addr.197, %OP77.JUMPDEST.loopexit ]
  %35 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.2
  %sp214 = getelementptr i256, ptr %35, i64 1
  store i256 2127478272, ptr %sp214, align 16
  %36 = icmp ult i256 %dup1271, 2127478272
  %37 = zext i1 %36 to i256
  store i256 %37, ptr %35, align 16
  br i1 %36, label %OP105.JUMPDEST, label %OP83.DUP1

OP83.DUP1:                                        ; preds = %OP77.JUMPDEST
  store i256 2127478272, ptr %sp214, align 16
  %38 = icmp eq i256 %dup1271, 2127478272
  %39 = zext i1 %38 to i256
  store i256 %39, ptr %35, align 16
  br i1 %38, label %OP699.JUMPDEST, label %OP88.DUP1

OP88.DUP1:                                        ; preds = %OP83.DUP1
  store i256 2309999428, ptr %sp214, align 16
  %40 = icmp eq i256 %dup1271, 2309999428
  %41 = zext i1 %40 to i256
  store i256 %41, ptr %35, align 16
  br i1 %40, label %OP721.JUMPDEST, label %OP93.DUP1

OP93.DUP1:                                        ; preds = %OP88.DUP1
  store i256 2514000705, ptr %sp214, align 16
  %42 = icmp eq i256 %dup1271, 2514000705
  %43 = zext i1 %42 to i256
  store i256 %43, ptr %35, align 16
  br i1 %42, label %OP766.JUMPDEST, label %OP98.DUP1

OP98.DUP1:                                        ; preds = %OP93.DUP1
  store i256 2835717307, ptr %sp214, align 16
  %44 = icmp eq i256 %dup1271, 2835717307
  %45 = zext i1 %44 to i256
  store i256 %45, ptr %35, align 16
  br i1 %44, label %OP770.JUMPDEST, label %OP213.JUMPDEST

OP105.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25827 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp287.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25827, i64 -1
  %dup1288.pre = load i256, ptr %sp287.phi.trans.insert, align 16
  br label %OP105.JUMPDEST

OP105.JUMPDEST:                                   ; preds = %OP105.JUMPDEST.loopexit, %OP77.JUMPDEST
  %dup1318 = phi i256 [ %dup1271, %OP77.JUMPDEST ], [ %dup1288.pre, %OP105.JUMPDEST.loopexit ]
  %len.addr.3 = phi i64 [ %len.addr.2, %OP77.JUMPDEST ], [ %len.addr.197, %OP105.JUMPDEST.loopexit ]
  %46 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.3
  %sp291 = getelementptr i256, ptr %46, i64 1
  store i256 1784838210, ptr %sp291, align 16
  %47 = icmp eq i256 %dup1318, 1784838210
  %48 = zext i1 %47 to i256
  store i256 %48, ptr %46, align 16
  br i1 %47, label %OP651.JUMPDEST, label %OP111.DUP1

OP111.DUP1:                                       ; preds = %OP105.JUMPDEST
  store i256 1889567281, ptr %sp291, align 16
  %49 = icmp eq i256 %dup1318, 1889567281
  %50 = zext i1 %49 to i256
  store i256 %50, ptr %46, align 16
  br i1 %49, label %OP673.JUMPDEST, label %OP116.DUP1

OP116.DUP1:                                       ; preds = %OP111.DUP1
  store i256 1952775229, ptr %sp291, align 16
  %51 = icmp eq i256 %dup1318, 1952775229
  %52 = zext i1 %51 to i256
  store i256 %52, ptr %46, align 16
  br i1 %51, label %OP695.JUMPDEST, label %OP213.JUMPDEST

OP123.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp334.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert, i64 -1
  %dup1335.pre = load i256, ptr %sp334.phi.trans.insert, align 16
  br label %OP123.JUMPDEST

OP123.JUMPDEST:                                   ; preds = %OP123.JUMPDEST.loopexit, %OP18.PUSH1
  %dup1335 = phi i256 [ %13, %OP18.PUSH1 ], [ %dup1335.pre, %OP123.JUMPDEST.loopexit ]
  %len.addr.4 = phi i64 [ %len.addr.0, %OP18.PUSH1 ], [ %len.addr.197, %OP123.JUMPDEST.loopexit ]
  %53 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.4
  %sp338 = getelementptr i256, ptr %53, i64 1
  store i256 599290589, ptr %sp338, align 16
  %54 = icmp ult i256 %dup1335, 599290589
  %55 = zext i1 %54 to i256
  store i256 %55, ptr %53, align 16
  br i1 %54, label %OP174.JUMPDEST, label %OP129.DUP1

OP129.DUP1:                                       ; preds = %OP123.JUMPDEST
  store i256 910484757, ptr %sp338, align 16
  %56 = icmp ult i256 %dup1335, 910484757
  %57 = zext i1 %56 to i256
  store i256 %57, ptr %53, align 16
  br i1 %56, label %OP156.JUMPDEST, label %OP134.DUP1

OP134.DUP1:                                       ; preds = %OP129.DUP1
  store i256 910484757, ptr %sp338, align 16
  %58 = icmp eq i256 %dup1335, 910484757
  %59 = zext i1 %58 to i256
  store i256 %59, ptr %53, align 16
  br i1 %58, label %OP610.JUMPDEST, label %OP139.DUP1

OP139.DUP1:                                       ; preds = %OP134.DUP1
  store i256 1214040405, ptr %sp338, align 16
  %60 = icmp eq i256 %dup1335, 1214040405
  %61 = zext i1 %60 to i256
  store i256 %61, ptr %53, align 16
  br i1 %60, label %OP614.JUMPDEST, label %OP144.DUP1

OP144.DUP1:                                       ; preds = %OP139.DUP1
  store i256 1493811413, ptr %sp338, align 16
  %62 = icmp eq i256 %dup1335, 1493811413
  %63 = zext i1 %62 to i256
  store i256 %63, ptr %53, align 16
  br i1 %62, label %OP643.JUMPDEST, label %OP149.DUP1

OP149.DUP1:                                       ; preds = %OP144.DUP1
  store i256 1513968787, ptr %sp338, align 16
  %64 = icmp eq i256 %dup1335, 1513968787
  %65 = zext i1 %64 to i256
  store i256 %65, ptr %53, align 16
  br i1 %64, label %OP647.JUMPDEST, label %OP213.JUMPDEST

OP156.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25813 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp426.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25813, i64 -1
  %dup1427.pre = load i256, ptr %sp426.phi.trans.insert, align 16
  br label %OP156.JUMPDEST

OP156.JUMPDEST:                                   ; preds = %OP156.JUMPDEST.loopexit, %OP129.DUP1
  %dup1457 = phi i256 [ %dup1335, %OP129.DUP1 ], [ %dup1427.pre, %OP156.JUMPDEST.loopexit ]
  %len.addr.5 = phi i64 [ %len.addr.4, %OP129.DUP1 ], [ %len.addr.197, %OP156.JUMPDEST.loopexit ]
  %66 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.5
  %sp430 = getelementptr i256, ptr %66, i64 1
  store i256 599290589, ptr %sp430, align 16
  %67 = icmp eq i256 %dup1457, 599290589
  %68 = zext i1 %67 to i256
  store i256 %68, ptr %66, align 16
  br i1 %67, label %OP547.JUMPDEST, label %OP162.DUP1

OP162.DUP1:                                       ; preds = %OP156.JUMPDEST
  store i256 816707615, ptr %sp430, align 16
  %69 = icmp eq i256 %dup1457, 816707615
  %70 = zext i1 %69 to i256
  store i256 %70, ptr %66, align 16
  br i1 %69, label %OP583.JUMPDEST, label %OP167.DUP1

OP167.DUP1:                                       ; preds = %OP162.DUP1
  store i256 826074471, ptr %sp430, align 16
  %71 = icmp eq i256 %dup1457, 826074471
  %72 = zext i1 %71 to i256
  store i256 %72, ptr %66, align 16
  br i1 %71, label %OP587.JUMPDEST, label %OP213.JUMPDEST

OP174.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25760 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp473.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25760, i64 -1
  %dup1474.pre = load i256, ptr %sp473.phi.trans.insert, align 16
  br label %OP174.JUMPDEST

OP174.JUMPDEST:                                   ; preds = %OP174.JUMPDEST.loopexit, %OP123.JUMPDEST
  %dup1474 = phi i256 [ %dup1335, %OP123.JUMPDEST ], [ %dup1474.pre, %OP174.JUMPDEST.loopexit ]
  %len.addr.6 = phi i64 [ %len.addr.4, %OP123.JUMPDEST ], [ %len.addr.197, %OP174.JUMPDEST.loopexit ]
  %73 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.6
  %sp477 = getelementptr i256, ptr %73, i64 1
  store i256 157198259, ptr %sp477, align 16
  %74 = icmp ult i256 %dup1474, 157198259
  %75 = zext i1 %74 to i256
  store i256 %75, ptr %73, align 16
  br i1 %74, label %OP197.JUMPDEST, label %OP180.DUP1

OP180.DUP1:                                       ; preds = %OP174.JUMPDEST
  store i256 157198259, ptr %sp477, align 16
  %76 = icmp eq i256 %dup1474, 157198259
  %77 = zext i1 %76 to i256
  store i256 %77, ptr %73, align 16
  br i1 %76, label %OP459.JUMPDEST, label %OP185.DUP1

OP185.DUP1:                                       ; preds = %OP180.DUP1
  store i256 234755713, ptr %sp477, align 16
  %78 = icmp eq i256 %dup1474, 234755713
  %79 = zext i1 %78 to i256
  store i256 %79, ptr %73, align 16
  br i1 %78, label %OP504.JUMPDEST, label %OP190.DUP1

OP190.DUP1:                                       ; preds = %OP185.DUP1
  store i256 404098525, ptr %sp477, align 16
  %80 = icmp eq i256 %dup1474, 404098525
  %81 = zext i1 %80 to i256
  store i256 %81, ptr %73, align 16
  br i1 %80, label %OP527.JUMPDEST, label %OP213.JUMPDEST

OP197.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25762 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp535.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25762, i64 -1
  %dup1536.pre = load i256, ptr %sp535.phi.trans.insert, align 16
  br label %OP197.JUMPDEST

OP197.JUMPDEST:                                   ; preds = %OP197.JUMPDEST.loopexit, %OP174.JUMPDEST
  %dup1536 = phi i256 [ %dup1474, %OP174.JUMPDEST ], [ %dup1536.pre, %OP197.JUMPDEST.loopexit ]
  %len.addr.7 = phi i64 [ %len.addr.6, %OP174.JUMPDEST ], [ %len.addr.197, %OP197.JUMPDEST.loopexit ]
  %82 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.7
  %sp539 = getelementptr i256, ptr %82, i64 1
  store i256 36441503, ptr %sp539, align 16
  %83 = icmp eq i256 %dup1536, 36441503
  %84 = zext i1 %83 to i256
  store i256 %84, ptr %82, align 16
  br i1 %83, label %OP217.JUMPDEST, label %OP203.DUP1

OP203.DUP1:                                       ; preds = %OP197.JUMPDEST
  store i256 117300739, ptr %sp539, align 16
  %85 = icmp eq i256 %dup1536, 117300739
  %86 = zext i1 %85 to i256
  store i256 %86, ptr %82, align 16
  br i1 %85, label %OP317.JUMPDEST, label %OP208.DUP1

OP208.DUP1:                                       ; preds = %OP203.DUP1
  store i256 151187884, ptr %sp539, align 16
  %87 = icmp eq i256 %dup1536, 151187884
  %88 = zext i1 %87 to i256
  store i256 %88, ptr %82, align 16
  br i1 %87, label %OP421.JUMPDEST, label %OP213.JUMPDEST

OP213.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP190.DUP1, %OP167.DUP1, %OP149.DUP1, %OP116.DUP1, %OP98.DUP1, %OP70.DUP1, %OP52.DUP1, %OP208.DUP1, %OP11.JUMPDEST
  %len.addr.8 = phi i64 [ %7, %OP11.JUMPDEST ], [ %len.addr.7, %OP208.DUP1 ], [ %len.addr.0, %OP52.DUP1 ], [ %len.addr.1, %OP70.DUP1 ], [ %len.addr.2, %OP98.DUP1 ], [ %len.addr.3, %OP116.DUP1 ], [ %len.addr.4, %OP149.DUP1 ], [ %len.addr.5, %OP167.DUP1 ], [ %len.addr.6, %OP190.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp581 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp581, i8 0, i64 64, i1 false)
  %89 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp581, i8 16)
  %.not24010 = icmp eq i8 %89, 0
  %spec.select17733 = select i1 %.not24010, i8 16, i8 %89, !prof !6
  br label %return

OP217.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP197.JUMPDEST
  %len.addr.9 = phi i64 [ %len.addr.7, %OP197.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp590 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.9
  store i256 599, ptr %sp590, align 16
  %sp592 = getelementptr i256, ptr %sp590, i64 1
  store i256 4, ptr %sp592, align 16
  %90 = add i64 %len.addr.9, 3
  %sp596 = getelementptr i256, ptr %sp590, i64 2
  %contract.input.len.addr598 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len599 = load i64, ptr %contract.input.len.addr598, align 8
  %91 = zext i64 %contract.input.len599 to i256
  %sp600 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %90
  %92 = add nsw i256 %91, -4
  store i256 %92, ptr %sp596, align 16
  %sp611 = getelementptr i256, ptr %sp590, i64 4
  store i256 %92, ptr %sp611, align 16
  %93 = icmp ugt i256 %92, 127
  %94 = zext i1 %93 to i256
  store i256 %94, ptr %sp600, align 16
  br i1 %93, label %OP232.JUMPDEST, label %OP229.PUSH1

OP229.PUSH1:                                      ; preds = %OP217.JUMPDEST
  store i256 0, ptr %sp600, align 16
  store i256 0, ptr %sp611, align 16
  %95 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp600, i8 16)
  %.not23404 = icmp eq i8 %95, 0
  %spec.select17734 = select i1 %.not23404, i8 16, i8 %95, !prof !6
  br label %return

OP232.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25764 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24065.pre = load i64, ptr %.phi.trans.insert25764, align 8
  br label %OP232.JUMPDEST

OP232.JUMPDEST:                                   ; preds = %OP232.JUMPDEST.loopexit, %OP217.JUMPDEST
  %arg.contract.addr.val24065 = phi i64 [ %contract.input.len599, %OP217.JUMPDEST ], [ %arg.contract.addr.val24065.pre, %OP232.JUMPDEST.loopexit ]
  %len.addr.10 = phi i64 [ %90, %OP217.JUMPDEST ], [ %len.addr.197, %OP232.JUMPDEST.loopexit ]
  %96 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.10
  %sp635 = getelementptr i256, ptr %96, i64 -2
  %dup2636 = load i256, ptr %sp635, align 16
  store i256 %dup2636, ptr %96, align 16
  %97 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24064 = load ptr, ptr %97, align 8
  %98 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup2636, ptr %arg.contract.addr.val24064, i64 %arg.contract.addr.val24065)
  store i256 %98, ptr %sp635, align 16
  store i256 %dup2636, ptr %96, align 16
  %sp646 = getelementptr i256, ptr %96, i64 1
  %sp650 = getelementptr i256, ptr %96, i64 2
  store i256 %dup2636, ptr %sp650, align 16
  %99 = add i256 %dup2636, 32
  store i256 %99, ptr %sp646, align 16
  %100 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %99, ptr %arg.contract.addr.val24064, i64 %arg.contract.addr.val24065)
  %sp664 = getelementptr i256, ptr %96, i64 -1
  %swap.b665 = load i256, ptr %sp664, align 16
  store i256 %100, ptr %sp664, align 16
  store i256 %swap.b665, ptr %sp646, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp650, align 16
  %sp669 = getelementptr i256, ptr %96, i64 3
  %101 = add i64 %len.addr.10, 5
  %sp672 = getelementptr i256, ptr %96, i64 4
  store i256 %dup2636, ptr %sp672, align 16
  %102 = add i256 %dup2636, 64
  store i256 %102, ptr %sp669, align 16
  %103 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %102, ptr %arg.contract.addr.val24064, i64 %arg.contract.addr.val24065)
  %104 = and i256 %103, 1461501637330902918203684832716283019655932542975
  store i256 %104, ptr %96, align 16
  %105 = add i256 %swap.b665, %dup2636
  store i256 %105, ptr %sp646, align 16
  store i256 %dup2636, ptr %sp650, align 16
  %106 = add i256 %dup2636, 128
  store i256 %106, ptr %sp669, align 16
  %sp730 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %101
  store i256 %dup2636, ptr %sp730, align 16
  %107 = add i256 %dup2636, 96
  store i256 %107, ptr %sp672, align 16
  %108 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %107, ptr %arg.contract.addr.val24064, i64 %arg.contract.addr.val24065)
  store i256 %108, ptr %sp672, align 16
  %sp746 = getelementptr i256, ptr %96, i64 6
  store i256 %108, ptr %sp746, align 16
  %109 = icmp ult i256 %108, 4294967297
  %110 = zext i1 %109 to i256
  store i256 %110, ptr %sp730, align 16
  br i1 %109, label %OP268.JUMPDEST, label %OP265.PUSH1

OP265.PUSH1:                                      ; preds = %OP232.JUMPDEST
  store i256 0, ptr %sp730, align 16
  store i256 0, ptr %sp746, align 16
  %111 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp730, i8 16)
  %.not23405 = icmp eq i8 %111, 0
  %spec.select17735 = select i1 %.not23405, i8 16, i8 %111, !prof !6
  br label %return

OP268.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP232.JUMPDEST
  %len.addr.11 = phi i64 [ %101, %OP232.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %112 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.11
  %sp770 = getelementptr i256, ptr %112, i64 -3
  %dup3771 = load i256, ptr %sp770, align 16
  %sp776 = getelementptr i256, ptr %112, i64 -1
  %b777 = load i256, ptr %sp776, align 16
  %113 = add i256 %b777, %dup3771
  store i256 %113, ptr %sp776, align 16
  %sp780 = getelementptr i256, ptr %112, i64 -4
  %dup4781 = load i256, ptr %sp780, align 16
  %sp784 = getelementptr i256, ptr %112, i64 1
  %sp788 = getelementptr i256, ptr %112, i64 2
  store i256 %113, ptr %sp788, align 16
  %114 = add i256 %113, 32
  store i256 %114, ptr %sp784, align 16
  %115 = icmp ule i256 %114, %dup4781
  %116 = zext i1 %115 to i256
  store i256 %116, ptr %112, align 16
  br i1 %115, label %OP282.JUMPDEST, label %OP279.PUSH1

OP279.PUSH1:                                      ; preds = %OP268.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %112, i8 0, i64 64, i1 false)
  %117 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %112, i8 16)
  %.not23406 = icmp eq i8 %117, 0
  %spec.select17736 = select i1 %.not23406, i8 16, i8 %117, !prof !6
  br label %return

OP282.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25766 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp818.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25766, i64 -1
  %dup1819.pre = load i256, ptr %sp818.phi.trans.insert, align 16
  %sp844.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25766, i64 -4
  %dup5.pre = load i256, ptr %sp844.phi.trans.insert, align 16
  br label %OP282.JUMPDEST

OP282.JUMPDEST:                                   ; preds = %OP282.JUMPDEST.loopexit, %OP268.JUMPDEST
  %dup5 = phi i256 [ %dup4781, %OP268.JUMPDEST ], [ %dup5.pre, %OP282.JUMPDEST.loopexit ]
  %dup1819 = phi i256 [ %113, %OP268.JUMPDEST ], [ %dup1819.pre, %OP282.JUMPDEST.loopexit ]
  %len.addr.12 = phi i64 [ %len.addr.11, %OP268.JUMPDEST ], [ %len.addr.197, %OP282.JUMPDEST.loopexit ]
  %118 = add i64 %len.addr.12, 1
  %119 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.12
  %sp818 = getelementptr i256, ptr %119, i64 -1
  store i256 %dup1819, ptr %119, align 16
  %120 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24056 = load ptr, ptr %120, align 8
  %121 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24057 = load i64, ptr %121, align 8
  %122 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup1819, ptr %arg.contract.addr.val24056, i64 %arg.contract.addr.val24057)
  store i256 %122, ptr %sp818, align 16
  %sp831 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %118
  %123 = add i256 %dup1819, 32
  %sp841 = getelementptr i256, ptr %119, i64 -2
  %swap.b842 = load i256, ptr %sp841, align 16
  store i256 %123, ptr %sp841, align 16
  store i256 %swap.b842, ptr %119, align 16
  %sp847 = getelementptr i256, ptr %119, i64 2
  %sp851 = getelementptr i256, ptr %119, i64 3
  %124 = add i256 %122, %123
  %125 = icmp ugt i256 %124, %dup5
  store i256 %122, ptr %sp851, align 16
  %126 = icmp ugt i256 %122, 4294967296
  %127 = zext i1 %126 to i256
  store i256 %127, ptr %sp847, align 16
  %128 = or i1 %125, %126
  %129 = xor i1 %128, true
  %130 = zext i1 %129 to i256
  store i256 %130, ptr %sp831, align 16
  br i1 %128, label %OP303.PUSH1, label %OP306.JUMPDEST

OP303.PUSH1:                                      ; preds = %OP282.JUMPDEST
  store i256 0, ptr %sp831, align 16
  store i256 0, ptr %sp847, align 16
  %131 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp831, i8 16)
  %.not23407 = icmp eq i8 %131, 0
  %spec.select17737 = select i1 %.not23407, i8 16, i8 %131, !prof !6
  br label %return

OP306.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP282.JUMPDEST
  %len.addr.13 = phi i64 [ %118, %OP282.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %132 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.13
  %sp910 = getelementptr i256, ptr %132, i64 -2
  %swap.a911 = load i256, ptr %sp910, align 16
  %sp912 = getelementptr i256, ptr %132, i64 -3
  %swap.b913 = load i256, ptr %sp912, align 16
  %sp917 = getelementptr i256, ptr %132, i64 -5
  %swap.b918 = load i256, ptr %sp917, align 16
  store i256 %swap.b913, ptr %sp917, align 16
  store i256 %swap.b918, ptr %sp910, align 16
  %sp923 = getelementptr i256, ptr %132, i64 -4
  %swap.b924 = load i256, ptr %sp923, align 16
  store i256 %swap.a911, ptr %sp923, align 16
  store i256 %swap.b924, ptr %sp912, align 16
  %133 = add i64 %len.addr.13, -3
  br label %OP922.JUMPDEST

OP317.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP203.DUP1
  %len.addr.14 = phi i64 [ %len.addr.7, %OP203.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %134 = add i64 %len.addr.14, 1
  %sp931 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.14
  store i256 609, ptr %sp931, align 16
  br label %OP1750.JUMPDEST

OP321.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %sp935 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp935, align 16
  %135 = add i64 %len.addr.197, 2
  %sp939 = getelementptr i256, ptr %sp935, i64 1
  store i256 64, ptr %sp939, align 16
  %mload.out.slot = alloca i256, align 16
  %136 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot, ptr %arg.ecx.addr)
  %.not23918 = icmp eq i8 %136, 0
  br i1 %.not23918, label %OP324.MLOAD.contd, label %return, !prof !6

OP324.MLOAD.contd:                                ; preds = %OP321.JUMPDEST
  %mload.out = load i256, ptr %mload.out.slot, align 16
  store i256 %mload.out, ptr %sp939, align 16
  %137 = add i64 %len.addr.197, 3
  %sp945 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %135
  store i256 32, ptr %sp945, align 16
  %138 = add i64 %len.addr.197, 4
  %sp949 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %137
  store i256 32, ptr %sp949, align 16
  %sp953 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %138
  store i256 %mload.out, ptr %sp953, align 16
  %139 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out, i256 32, ptr %arg.ecx.addr)
  %.not23919 = icmp eq i8 %139, 0
  br i1 %.not23919, label %OP329.DUP4, label %return, !prof !6

OP329.DUP4:                                       ; preds = %OP324.MLOAD.contd
  %sp960 = getelementptr i256, ptr %sp935, i64 -1
  %dup4961 = load i256, ptr %sp960, align 16
  store i256 %dup4961, ptr %sp949, align 16
  %mload.out.slot966 = alloca i256, align 16
  %140 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup4961, ptr %mload.out.slot966, ptr %arg.ecx.addr)
  %.not23920 = icmp eq i8 %140, 0
  br i1 %.not23920, label %OP330.MLOAD.contd, label %return, !prof !6

OP330.MLOAD.contd:                                ; preds = %OP329.DUP4
  %mload.out967 = load i256, ptr %mload.out.slot966, align 16
  store i256 %mload.out967, ptr %sp949, align 16
  %dup2971 = load i256, ptr %sp945, align 16
  %dup4975 = load i256, ptr %sp939, align 16
  %sp976 = getelementptr i256, ptr %sp935, i64 5
  store i256 %dup4975, ptr %sp976, align 16
  %141 = add i256 %dup4975, %dup2971
  store i256 %141, ptr %sp953, align 16
  %142 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %141, i256 %mload.out967, ptr %arg.ecx.addr)
  %.not23921 = icmp eq i8 %142, 0
  br i1 %.not23921, label %OP335.DUP4, label %return, !prof !6

OP335.DUP4:                                       ; preds = %OP330.MLOAD.contd
  %dup4990 = load i256, ptr %sp960, align 16
  store i256 %dup4990, ptr %sp949, align 16
  %mload.out.slot995 = alloca i256, align 16
  %143 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup4990, ptr %mload.out.slot995, ptr %arg.ecx.addr)
  %.not23922 = icmp eq i8 %143, 0
  br i1 %.not23922, label %OP336.MLOAD.contd, label %return, !prof !6

OP336.MLOAD.contd:                                ; preds = %OP335.DUP4
  %mload.out996 = load i256, ptr %mload.out.slot995, align 16
  %swap.b1002 = load i256, ptr %sp939, align 16
  %swap.b1007 = load i256, ptr %sp935, align 16
  store i256 %swap.b1002, ptr %sp935, align 16
  %144 = add i256 %swap.b1007, %swap.b1002
  %swap.b1036 = load i256, ptr %sp945, align 16
  store i256 %144, ptr %sp945, align 16
  %dup6 = load i256, ptr %sp960, align 16
  %145 = add i256 %dup6, %swap.b1036
  store i256 %145, ptr %sp949, align 16
  store i256 %mload.out996, ptr %sp953, align 16
  store i256 %mload.out996, ptr %sp976, align 16
  %sp1058 = getelementptr i256, ptr %sp935, i64 6
  store i256 %144, ptr %sp1058, align 16
  %sp1062 = getelementptr i256, ptr %sp935, i64 7
  store i256 %145, ptr %sp1062, align 16
  %146 = add i64 %len.addr.197, 9
  %sp1064 = getelementptr i256, ptr %sp935, i64 8
  store i256 0, ptr %sp1064, align 16
  br label %OP352.JUMPDEST.preheader, !annotation !7

OP352.JUMPDEST.preheader:                         ; preds = %dynamic_jump_table, %OP336.MLOAD.contd
  %len.addr.15.ph = phi i64 [ %146, %OP336.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %147 = add i64 %len.addr.15.ph, 1
  %148 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.15.ph
  %sp1067 = getelementptr i256, ptr %148, i64 -4
  %sp1071 = getelementptr i256, ptr %148, i64 -1
  %sp1073 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %147
  %dup4106825532 = load i256, ptr %sp1067, align 16
  %dup2107225533 = load i256, ptr %sp1071, align 16
  store i256 %dup2107225533, ptr %sp1073, align 16
  %149 = icmp uge i256 %dup2107225533, %dup4106825532
  %150 = zext i1 %149 to i256
  store i256 %150, ptr %148, align 16
  br i1 %149, label %OP371.JUMPDEST, label %OP359.DUP2.lr.ph

OP359.DUP2.lr.ph:                                 ; preds = %OP352.JUMPDEST.preheader
  %sp1088 = getelementptr i256, ptr %148, i64 -2
  %sp1108 = getelementptr i256, ptr %148, i64 -3
  %sp1114 = getelementptr i256, ptr %148, i64 2
  br label %OP359.DUP2

OP359.DUP2:                                       ; preds = %OP359.DUP2.lr.ph, %OP367.PUSH1
  %dup2107225534 = phi i256 [ %dup2107225533, %OP359.DUP2.lr.ph ], [ %172, %OP367.PUSH1 ]
  %dup21089 = load i256, ptr %sp1088, align 16
  store i256 %dup2107225534, ptr %sp1073, align 16
  %151 = add i256 %dup21089, %dup2107225534
  store i256 %151, ptr %148, align 16
  %ecx.memory.i24069 = load ptr, ptr %ecx.memory.addr.i24415, align 8
  %ecx.memory.len.addr.i24070 = getelementptr inbounds i8, ptr %ecx.memory.i24069, i64 16
  %ecx.memory.len.i24071 = load i64, ptr %ecx.memory.len.addr.i24070, align 8, !noalias !8
  %ecx.memory.last_checkpoint.addr.i24072 = getelementptr inbounds i8, ptr %ecx.memory.i24069, i64 48
  %ecx.memory.last_checkpoint.i24073 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24072, align 8, !noalias !8
  %152 = sub i64 %ecx.memory.len.i24071, %ecx.memory.last_checkpoint.i24073
  %153 = icmp ugt i256 %151, 18446744073709551615
  %154 = trunc i256 %151 to i64
  %155 = add i64 %154, 32
  %156 = icmp ugt i64 %154, -33
  %157 = or i1 %153, %156
  %158 = select i1 %157, i64 -1, i64 %155
  %159 = icmp ugt i64 %158, %152
  br i1 %159, label %resize.i24080, label %OP362.MLOAD.contd, !prof !5

resize.i24080:                                    ; preds = %OP359.DUP2
  %160 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %158), !noalias !12
  %.not.i24081 = icmp eq i8 %160, 0
  br i1 %.not.i24081, label %resize.i24080.OP362.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24080.OP362.MLOAD.contd_crit_edge:        ; preds = %resize.i24080
  %dup31113.pre = load i256, ptr %sp1071, align 16
  %ecx.memory.i24083.pre = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !13
  br label %OP362.MLOAD.contd

OP362.MLOAD.contd:                                ; preds = %resize.i24080.OP362.MLOAD.contd_crit_edge, %OP359.DUP2
  %ecx.memory.i24083 = phi ptr [ %ecx.memory.i24083.pre, %resize.i24080.OP362.MLOAD.contd_crit_edge ], [ %ecx.memory.i24069, %OP359.DUP2 ]
  %dup31113 = phi i256 [ %dup31113.pre, %resize.i24080.OP362.MLOAD.contd_crit_edge ], [ %dup2107225534, %OP359.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i24075 = getelementptr inbounds i8, ptr %ecx.memory.i24069, i64 8
  %ecx.memory.buffer.ptr.shared.i24076 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24075, align 8, !noalias !8
  %ecx.memory.buffer.ptr.i24077 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24076, i64 %ecx.memory.last_checkpoint.i24073
  %slot.i24078 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24077, i64 %154
  %slot.value.i = load i256, ptr %slot.i24078, align 1, !noalias !8
  %161 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i)
  store i256 %161, ptr %148, align 16
  %dup41109 = load i256, ptr %sp1108, align 16
  store i256 %dup31113, ptr %sp1114, align 16
  %162 = add i256 %dup31113, %dup41109
  store i256 %162, ptr %sp1073, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !13)
  %ecx.memory.len.addr.i24084 = getelementptr inbounds i8, ptr %ecx.memory.i24083, i64 16
  %ecx.memory.len.i24085 = load i64, ptr %ecx.memory.len.addr.i24084, align 8, !noalias !13
  %ecx.memory.last_checkpoint.addr.i24086 = getelementptr inbounds i8, ptr %ecx.memory.i24083, i64 48
  %ecx.memory.last_checkpoint.i24087 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24086, align 8, !noalias !13
  %163 = sub i64 %ecx.memory.len.i24085, %ecx.memory.last_checkpoint.i24087
  %164 = icmp ugt i256 %162, 18446744073709551615
  %165 = trunc i256 %162 to i64
  %166 = add i64 %165, 32
  %167 = icmp ugt i64 %165, -33
  %168 = or i1 %164, %167
  %169 = select i1 %168, i64 -1, i64 %166
  %170 = icmp ugt i64 %169, %163
  br i1 %170, label %resize.i24094, label %OP367.PUSH1, !prof !5

resize.i24094:                                    ; preds = %OP362.MLOAD.contd
  %171 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %169)
  %.not.i24095 = icmp eq i8 %171, 0
  br i1 %.not.i24095, label %OP367.PUSH1, label %return, !prof !6

OP367.PUSH1:                                      ; preds = %OP362.MLOAD.contd, %resize.i24094
  %ecx.memory.buffer.ptr.shared.addr.i24089 = getelementptr inbounds i8, ptr %ecx.memory.i24083, i64 8
  %ecx.memory.buffer.ptr.shared.i24090 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24089, align 8, !noalias !13
  %ecx.memory.buffer.ptr.i24091 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24090, i64 %ecx.memory.last_checkpoint.i24087
  %slot.i24092 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24091, i64 %165
  store i256 %slot.value.i, ptr %slot.i24092, align 1, !noalias !13
  %b1132 = load i256, ptr %sp1071, align 16
  %172 = add i256 %b1132, 32
  store i256 %172, ptr %sp1071, align 16
  %dup41068 = load i256, ptr %sp1067, align 16
  store i256 %172, ptr %sp1073, align 16
  %173 = icmp uge i256 %172, %dup41068
  %174 = zext i1 %173 to i256
  store i256 %174, ptr %148, align 16
  br i1 %173, label %OP371.JUMPDEST, label %OP359.DUP2

OP371.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP367.PUSH1, %OP352.JUMPDEST.preheader
  %len.addr.16 = phi i64 [ %len.addr.15.ph, %OP352.JUMPDEST.preheader ], [ %len.addr.15.ph, %OP367.PUSH1 ], [ %len.addr.197, %dynamic_jump_table ]
  %175 = add i64 %len.addr.16, -1
  %176 = add i64 %len.addr.16, -3
  %177 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.16
  %sp1141 = getelementptr i256, ptr %177, i64 -5
  %swap.a1142 = load i256, ptr %sp1141, align 16
  %sp1143 = getelementptr i256, ptr %177, i64 -6
  %178 = add i64 %len.addr.16, -5
  %sp1149 = getelementptr i256, ptr %177, i64 -7
  %swap.b1150 = load i256, ptr %sp1149, align 16
  %sp1154 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %178
  %179 = add i256 %swap.b1150, %swap.a1142
  store i256 %179, ptr %sp1149, align 16
  %180 = and i256 %swap.a1142, 31
  store i256 %180, ptr %sp1143, align 16
  %181 = icmp eq i256 %180, 0
  %182 = zext i1 %181 to i256
  store i256 %182, ptr %sp1154, align 16
  br i1 %181, label %OP408.JUMPDEST, label %OP388.DUP1

OP388.DUP1:                                       ; preds = %OP371.JUMPDEST
  %sp1192 = getelementptr i256, ptr %177, i64 -4
  %183 = sub i256 %179, %180
  store i256 %183, ptr %sp1141, align 16
  store i256 %183, ptr %sp1192, align 16
  %mload.out.slot1206 = alloca i256, align 16
  %184 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %183, ptr %mload.out.slot1206, ptr %arg.ecx.addr)
  %.not23925 = icmp eq i8 %184, 0
  br i1 %.not23925, label %OP392.MLOAD.contd, label %return, !prof !6

OP392.MLOAD.contd:                                ; preds = %OP388.DUP1
  %mload.out1207 = load i256, ptr %mload.out.slot1206, align 16
  store i256 %mload.out1207, ptr %sp1192, align 16
  %sp1210 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %176
  store i256 1, ptr %sp1210, align 16
  %dup41213 = load i256, ptr %sp1143, align 16
  %sp1214 = getelementptr i256, ptr %177, i64 -2
  %sp1216 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %175
  %185 = sub i256 32, %dup41213
  store i256 %185, ptr %sp1214, align 16
  store i256 256, ptr %sp1216, align 16
  %186 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1214, i8 17)
  %.not23926 = icmp eq i8 %186, 0
  br i1 %.not23926, label %OP399.SUB, label %return, !prof !6

OP399.SUB:                                        ; preds = %OP392.MLOAD.contd
  %a1229 = load i256, ptr %sp1214, align 16
  %sp1230 = getelementptr i256, ptr %177, i64 -3
  %b1231 = load i256, ptr %sp1230, align 16
  %187 = xor i256 %a1229, -1
  %188 = add i256 %b1231, %187
  %189 = add i64 %len.addr.16, -4
  %sp1240 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %189
  %b1241 = load i256, ptr %sp1240, align 16
  %190 = and i256 %b1241, %188
  store i256 %190, ptr %sp1240, align 16
  %dup21245 = load i256, ptr %sp1141, align 16
  store i256 %dup21245, ptr %sp1210, align 16
  %191 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup21245, i256 %190, ptr %arg.ecx.addr)
  %.not23927 = icmp eq i8 %191, 0
  br i1 %.not23927, label %OP404.PUSH1, label %return, !prof !6

OP404.PUSH1:                                      ; preds = %OP399.SUB
  store i256 32, ptr %sp1240, align 16
  %b1258 = load i256, ptr %sp1141, align 16
  %192 = add i256 %b1258, 32
  %swap.b1264 = load i256, ptr %sp1149, align 16
  store i256 %192, ptr %sp1149, align 16
  store i256 %swap.b1264, ptr %sp1141, align 16
  br label %OP408.JUMPDEST, !annotation !7

OP408.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP404.PUSH1, %OP371.JUMPDEST
  %len.addr.17 = phi i64 [ %178, %OP371.JUMPDEST ], [ %178, %OP404.PUSH1 ], [ %len.addr.197, %dynamic_jump_table ]
  %193 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.17
  %sp1269 = getelementptr i256, ptr %193, i64 -2
  %swap.a1270 = load i256, ptr %sp1269, align 16
  %sp1271 = getelementptr i256, ptr %193, i64 -5
  %swap.b1272 = load i256, ptr %sp1271, align 16
  store i256 %swap.a1270, ptr %sp1271, align 16
  store i256 %swap.b1272, ptr %sp1269, align 16
  %194 = add i64 %len.addr.17, -3
  %sp1277 = getelementptr i256, ptr %193, i64 -4
  store i256 64, ptr %sp1277, align 16
  %mload.out.slot1281 = alloca i256, align 16
  %195 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1281, ptr %arg.ecx.addr)
  %.not23928 = icmp eq i8 %195, 0
  br i1 %.not23928, label %OP415.MLOAD.contd, label %return, !prof !6

OP415.MLOAD.contd:                                ; preds = %OP408.JUMPDEST
  %mload.out1282 = load i256, ptr %mload.out.slot1281, align 16
  %sp1289 = getelementptr i256, ptr %193, i64 -3
  %swap.b1292 = load i256, ptr %sp1271, align 16
  store i256 %swap.b1292, ptr %sp1289, align 16
  %196 = sub i256 %swap.b1292, %mload.out1282
  store i256 %196, ptr %sp1271, align 16
  store i256 %mload.out1282, ptr %sp1277, align 16
  %197 = add i64 %len.addr.17, -5
  %198 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1271, i8 2)
  %.not23929 = icmp eq i8 %198, 0
  %spec.select17738 = select i1 %.not23929, i8 2, i8 %198, !prof !6
  br label %return

OP421.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP208.DUP1
  %len.addr.18 = phi i64 [ %len.addr.7, %OP208.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %199 = add i64 %len.addr.18, 1
  %sp1308 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.18
  store i256 734, ptr %sp1308, align 16
  br label %OP1770.JUMPDEST

OP425.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %sp1312 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp1312, align 16
  %200 = add i64 %len.addr.197, 2
  %sp1316 = getelementptr i256, ptr %sp1312, i64 1
  store i256 64, ptr %sp1316, align 16
  %mload.out.slot1320 = alloca i256, align 16
  %201 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1320, ptr %arg.ecx.addr)
  %.not23912 = icmp eq i8 %201, 0
  br i1 %.not23912, label %OP428.MLOAD.contd, label %return, !prof !6

OP428.MLOAD.contd:                                ; preds = %OP425.JUMPDEST
  %mload.out1321 = load i256, ptr %mload.out.slot1320, align 16
  store i256 %mload.out1321, ptr %sp1316, align 16
  %sp1324 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %200
  %sp1328 = getelementptr i256, ptr %sp1312, i64 -3
  %swap.b1329 = load i256, ptr %sp1328, align 16
  store i256 5192296858534827628530496329220095, ptr %sp1328, align 16
  %sp1333 = getelementptr i256, ptr %sp1312, i64 3
  %202 = and i256 %swap.b1329, 5192296858534827628530496329220095
  store i256 %202, ptr %sp1324, align 16
  store i256 %mload.out1321, ptr %sp1333, align 16
  %203 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1321, i256 %202, ptr %arg.ecx.addr)
  %.not23913 = icmp eq i8 %203, 0
  br i1 %.not23913, label %OP435.SWAP3, label %return, !prof !6

OP435.SWAP3:                                      ; preds = %OP428.MLOAD.contd
  %swap.a1351 = load i256, ptr %sp1316, align 16
  %sp1352 = getelementptr i256, ptr %sp1312, i64 -2
  %swap.b1353 = load i256, ptr %sp1352, align 16
  store i256 %swap.a1351, ptr %sp1352, align 16
  %swap.b1358 = load i256, ptr %sp1312, align 16
  %swap.b1363 = load i256, ptr %sp1328, align 16
  store i256 %swap.b1358, ptr %sp1328, align 16
  %204 = and i256 %swap.b1363, %swap.b1353
  store i256 %204, ptr %sp1312, align 16
  store i256 %swap.a1351, ptr %sp1324, align 16
  %205 = add i256 %swap.a1351, 32
  store i256 %205, ptr %sp1316, align 16
  %206 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %205, i256 %204, ptr %arg.ecx.addr)
  %.not23914 = icmp eq i8 %206, 0
  br i1 %.not23914, label %OP443.PUSH4, label %return, !prof !6

OP443.PUSH4:                                      ; preds = %OP435.SWAP3
  %207 = add i64 %len.addr.197, -1
  %sp1392 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %207
  %b1393 = load i256, ptr %sp1392, align 16
  %208 = and i256 %b1393, 4294967295
  store i256 %208, ptr %sp1392, align 16
  %dup21397 = load i256, ptr %sp1352, align 16
  %dup41401 = load i256, ptr %sp1328, align 16
  store i256 %dup41401, ptr %sp1316, align 16
  %209 = add i256 %dup41401, %dup21397
  store i256 %209, ptr %sp1312, align 16
  %210 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %209, i256 %208, ptr %arg.ecx.addr)
  %.not23915 = icmp eq i8 %210, 0
  br i1 %.not23915, label %OP449.SWAP1, label %return, !prof !6

OP449.SWAP1:                                      ; preds = %OP443.PUSH4
  %swap.a1416 = load i256, ptr %sp1352, align 16
  %swap.b1418 = load i256, ptr %sp1328, align 16
  store i256 %swap.a1416, ptr %sp1328, align 16
  store i256 %swap.b1418, ptr %sp1352, align 16
  %mload.out.slot1422 = alloca i256, align 16
  %211 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b1418, ptr %mload.out.slot1422, ptr %arg.ecx.addr)
  %.not23916 = icmp eq i8 %211, 0
  br i1 %.not23916, label %OP450.MLOAD.contd, label %return, !prof !6

OP450.MLOAD.contd:                                ; preds = %OP449.SWAP1
  %mload.out1423 = load i256, ptr %mload.out.slot1422, align 16
  %swap.b1429 = load i256, ptr %sp1328, align 16
  %sp1435 = getelementptr i256, ptr %sp1312, i64 -1
  %212 = sub i256 %swap.b1429, %mload.out1423
  store i256 96, ptr %sp1435, align 16
  %213 = add i256 %212, 96
  store i256 %213, ptr %sp1328, align 16
  store i256 %mload.out1423, ptr %sp1352, align 16
  %214 = add i64 %len.addr.197, -3
  %215 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1328, i8 2)
  %.not23917 = icmp eq i8 %215, 0
  %spec.select17739 = select i1 %.not23917, i8 2, i8 %215, !prof !6
  br label %return

OP459.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP180.DUP1
  %len.addr.19 = phi i64 [ %len.addr.6, %OP180.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp1462 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.19
  store i256 846, ptr %sp1462, align 16
  %sp1464 = getelementptr i256, ptr %sp1462, i64 1
  store i256 4, ptr %sp1464, align 16
  %216 = add i64 %len.addr.19, 3
  %sp1468 = getelementptr i256, ptr %sp1462, i64 2
  %contract.input.len.addr1470 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len1471 = load i64, ptr %contract.input.len.addr1470, align 8
  %217 = zext i64 %contract.input.len1471 to i256
  %sp1472 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %216
  %218 = add nsw i256 %217, -4
  store i256 %218, ptr %sp1468, align 16
  %sp1484 = getelementptr i256, ptr %sp1462, i64 4
  store i256 %218, ptr %sp1484, align 16
  %219 = icmp ugt i256 %218, 63
  %220 = zext i1 %219 to i256
  store i256 %220, ptr %sp1472, align 16
  br i1 %219, label %OP474.JUMPDEST, label %OP471.PUSH1

OP471.PUSH1:                                      ; preds = %OP459.JUMPDEST
  store i256 0, ptr %sp1472, align 16
  store i256 0, ptr %sp1484, align 16
  %221 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1472, i8 16)
  %.not23900 = icmp eq i8 %221, 0
  %spec.select17740 = select i1 %.not23900, i8 16, i8 %221, !prof !6
  br label %return

OP474.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25804 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24055.pre = load i64, ptr %.phi.trans.insert25804, align 8
  br label %OP474.JUMPDEST

OP474.JUMPDEST:                                   ; preds = %OP474.JUMPDEST.loopexit, %OP459.JUMPDEST
  %arg.contract.addr.val24055 = phi i64 [ %contract.input.len1471, %OP459.JUMPDEST ], [ %arg.contract.addr.val24055.pre, %OP474.JUMPDEST.loopexit ]
  %len.addr.20 = phi i64 [ %216, %OP459.JUMPDEST ], [ %len.addr.197, %OP474.JUMPDEST.loopexit ]
  %222 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.20
  %sp1509 = getelementptr i256, ptr %222, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1509, align 16
  %sp1511 = getelementptr i256, ptr %222, i64 -2
  %dup21512 = load i256, ptr %sp1511, align 16
  store i256 %dup21512, ptr %222, align 16
  %223 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24054 = load ptr, ptr %223, align 8
  %224 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup21512, ptr %arg.contract.addr.val24054, i64 %arg.contract.addr.val24055)
  %225 = and i256 %224, 1461501637330902918203684832716283019655932542975
  store i256 %225, ptr %sp1511, align 16
  store i256 32, ptr %222, align 16
  %226 = add i256 %dup21512, 32
  store i256 %226, ptr %sp1509, align 16
  %227 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %226, ptr %arg.contract.addr.val24054, i64 %arg.contract.addr.val24055)
  store i256 %227, ptr %sp1509, align 16
  br label %OP1792.JUMPDEST

OP486.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %228 = add i64 %len.addr.197, 1
  %sp1544 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp1544, align 16
  %229 = add i64 %len.addr.197, 2
  %sp1548 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %228
  store i256 64, ptr %sp1548, align 16
  %mload.out.slot1552 = alloca i256, align 16
  %230 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1552, ptr %arg.ecx.addr)
  %.not23896 = icmp eq i8 %230, 0
  br i1 %.not23896, label %OP489.MLOAD.contd, label %return, !prof !6

OP489.MLOAD.contd:                                ; preds = %OP486.JUMPDEST
  %mload.out1553 = load i256, ptr %mload.out.slot1552, align 16
  %sp1558 = getelementptr i256, ptr %sp1544, i64 -1
  %swap.b1559 = load i256, ptr %sp1558, align 16
  store i256 %mload.out1553, ptr %sp1558, align 16
  %231 = icmp ne i256 %swap.b1559, 0
  %232 = zext i1 %231 to i256
  store i256 %232, ptr %sp1548, align 16
  %sp1571 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %229
  store i256 %mload.out1553, ptr %sp1571, align 16
  %233 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1553, i256 %232, ptr %arg.ecx.addr)
  %.not23897 = icmp eq i8 %233, 0
  br i1 %.not23897, label %OP495.MLOAD, label %return, !prof !6

OP495.MLOAD:                                      ; preds = %OP489.MLOAD.contd
  %a1579 = load i256, ptr %sp1544, align 16
  %mload.out.slot1580 = alloca i256, align 16
  %234 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a1579, ptr %mload.out.slot1580, ptr %arg.ecx.addr)
  %.not23898 = icmp eq i8 %234, 0
  br i1 %.not23898, label %OP495.MLOAD.contd, label %return, !prof !6

OP495.MLOAD.contd:                                ; preds = %OP495.MLOAD
  %mload.out1581 = load i256, ptr %mload.out.slot1580, align 16
  %swap.b1587 = load i256, ptr %sp1558, align 16
  %235 = sub i256 %swap.b1587, %mload.out1581
  store i256 32, ptr %sp1548, align 16
  %236 = add i256 %235, 32
  store i256 %236, ptr %sp1558, align 16
  store i256 %mload.out1581, ptr %sp1544, align 16
  %237 = add i64 %len.addr.197, -1
  %238 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1558, i8 2)
  %.not23899 = icmp eq i8 %238, 0
  %spec.select17741 = select i1 %.not23899, i8 2, i8 %238, !prof !6
  br label %return

OP504.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP185.DUP1
  %len.addr.21 = phi i64 [ %len.addr.6, %OP185.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %239 = add i64 %len.addr.21, 1
  %sp1620 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.21
  store i256 874, ptr %sp1620, align 16
  br label %OP1809.JUMPDEST

OP508.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %240 = add i64 %len.addr.197, 1
  %sp1624 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp1624, align 16
  %241 = add i64 %len.addr.197, 2
  %sp1628 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %240
  store i256 64, ptr %sp1628, align 16
  %mload.out.slot1632 = alloca i256, align 16
  %242 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1632, ptr %arg.ecx.addr)
  %.not23891 = icmp eq i8 %242, 0
  br i1 %.not23891, label %OP511.MLOAD.contd, label %return, !prof !6

OP511.MLOAD.contd:                                ; preds = %OP508.JUMPDEST
  %mload.out1633 = load i256, ptr %mload.out.slot1632, align 16
  %sp1636 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %241
  %sp1645 = getelementptr i256, ptr %sp1624, i64 -1
  %swap.b1646 = load i256, ptr %sp1645, align 16
  store i256 %mload.out1633, ptr %sp1645, align 16
  %243 = and i256 %swap.b1646, 1461501637330902918203684832716283019655932542975
  store i256 %243, ptr %sp1628, align 16
  store i256 %mload.out1633, ptr %sp1636, align 16
  %244 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1633, i256 %243, ptr %arg.ecx.addr)
  %.not23892 = icmp eq i8 %244, 0
  br i1 %.not23892, label %OP518.MLOAD, label %return, !prof !6

OP518.MLOAD:                                      ; preds = %OP511.MLOAD.contd
  %a1664 = load i256, ptr %sp1624, align 16
  %mload.out.slot1665 = alloca i256, align 16
  %245 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a1664, ptr %mload.out.slot1665, ptr %arg.ecx.addr)
  %.not23893 = icmp eq i8 %245, 0
  br i1 %.not23893, label %OP518.MLOAD.contd, label %return, !prof !6

OP518.MLOAD.contd:                                ; preds = %OP518.MLOAD
  %mload.out1666 = load i256, ptr %mload.out.slot1665, align 16
  %swap.b1672 = load i256, ptr %sp1645, align 16
  %246 = sub i256 %swap.b1672, %mload.out1666
  store i256 32, ptr %sp1628, align 16
  %247 = add i256 %246, 32
  store i256 %247, ptr %sp1645, align 16
  store i256 %mload.out1666, ptr %sp1624, align 16
  %248 = add i64 %len.addr.197, -1
  %249 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1645, i8 2)
  %.not23894 = icmp eq i8 %249, 0
  %spec.select17742 = select i1 %.not23894, i8 2, i8 %249, !prof !6
  br label %return

OP527.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP190.DUP1
  %len.addr.22 = phi i64 [ %len.addr.6, %OP190.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %250 = add i64 %len.addr.22, 1
  %sp1705 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.22
  store i256 923, ptr %sp1705, align 16
  br label %OP1816.JUMPDEST

OP531.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %251 = add i64 %len.addr.197, 1
  %sp1709 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp1709, align 16
  %252 = add i64 %len.addr.197, 2
  %sp1713 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %251
  store i256 64, ptr %sp1713, align 16
  %mload.out.slot1717 = alloca i256, align 16
  %253 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1717, ptr %arg.ecx.addr)
  %.not23886 = icmp eq i8 %253, 0
  br i1 %.not23886, label %OP534.MLOAD.contd, label %return, !prof !6

OP534.MLOAD.contd:                                ; preds = %OP531.JUMPDEST
  %mload.out1718 = load i256, ptr %mload.out.slot1717, align 16
  %sp1723 = getelementptr i256, ptr %sp1709, i64 -1
  %swap.b1724 = load i256, ptr %sp1723, align 16
  store i256 %mload.out1718, ptr %sp1723, align 16
  store i256 %swap.b1724, ptr %sp1713, align 16
  %sp1728 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %252
  store i256 %mload.out1718, ptr %sp1728, align 16
  %254 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1718, i256 %swap.b1724, ptr %arg.ecx.addr)
  %.not23887 = icmp eq i8 %254, 0
  br i1 %.not23887, label %OP538.MLOAD, label %return, !prof !6

OP538.MLOAD:                                      ; preds = %OP534.MLOAD.contd
  %a1736 = load i256, ptr %sp1709, align 16
  %mload.out.slot1737 = alloca i256, align 16
  %255 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a1736, ptr %mload.out.slot1737, ptr %arg.ecx.addr)
  %.not23888 = icmp eq i8 %255, 0
  br i1 %.not23888, label %OP538.MLOAD.contd, label %return, !prof !6

OP538.MLOAD.contd:                                ; preds = %OP538.MLOAD
  %mload.out1738 = load i256, ptr %mload.out.slot1737, align 16
  %swap.b1744 = load i256, ptr %sp1723, align 16
  %256 = sub i256 %swap.b1744, %mload.out1738
  store i256 32, ptr %sp1713, align 16
  %257 = add i256 %256, 32
  store i256 %257, ptr %sp1723, align 16
  store i256 %mload.out1738, ptr %sp1709, align 16
  %258 = add i64 %len.addr.197, -1
  %259 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1723, i8 2)
  %.not23889 = icmp eq i8 %259, 0
  %spec.select17743 = select i1 %.not23889, i8 2, i8 %259, !prof !6
  br label %return

OP547.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP156.JUMPDEST
  %len.addr.23 = phi i64 [ %len.addr.5, %OP156.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp1777 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.23
  store i256 846, ptr %sp1777, align 16
  %sp1779 = getelementptr i256, ptr %sp1777, i64 1
  store i256 4, ptr %sp1779, align 16
  %260 = add i64 %len.addr.23, 3
  %sp1783 = getelementptr i256, ptr %sp1777, i64 2
  %contract.input.len.addr1785 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len1786 = load i64, ptr %contract.input.len.addr1785, align 8
  %261 = zext i64 %contract.input.len1786 to i256
  %sp1787 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %260
  %262 = add nsw i256 %261, -4
  store i256 %262, ptr %sp1783, align 16
  %sp1799 = getelementptr i256, ptr %sp1777, i64 4
  store i256 %262, ptr %sp1799, align 16
  %263 = icmp ugt i256 %262, 95
  %264 = zext i1 %263 to i256
  store i256 %264, ptr %sp1787, align 16
  br i1 %263, label %OP562.JUMPDEST, label %OP559.PUSH1

OP559.PUSH1:                                      ; preds = %OP547.JUMPDEST
  store i256 0, ptr %sp1787, align 16
  store i256 0, ptr %sp1799, align 16
  %265 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1787, i8 16)
  %.not23934 = icmp eq i8 %265, 0
  %spec.select17744 = select i1 %.not23934, i8 16, i8 %265, !prof !6
  br label %return

OP562.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25815 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24051.pre = load i64, ptr %.phi.trans.insert25815, align 8
  br label %OP562.JUMPDEST

OP562.JUMPDEST:                                   ; preds = %OP562.JUMPDEST.loopexit, %OP547.JUMPDEST
  %arg.contract.addr.val24051 = phi i64 [ %contract.input.len1786, %OP547.JUMPDEST ], [ %arg.contract.addr.val24051.pre, %OP562.JUMPDEST.loopexit ]
  %len.addr.24 = phi i64 [ %260, %OP547.JUMPDEST ], [ %len.addr.197, %OP562.JUMPDEST.loopexit ]
  %266 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.24
  %sp1824 = getelementptr i256, ptr %266, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1824, align 16
  %267 = add i64 %len.addr.24, 1
  %sp1826 = getelementptr i256, ptr %266, i64 -2
  %dup21827 = load i256, ptr %sp1826, align 16
  store i256 %dup21827, ptr %266, align 16
  %268 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24050 = load ptr, ptr %268, align 8
  %269 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup21827, ptr %arg.contract.addr.val24050, i64 %arg.contract.addr.val24051)
  %sp1836 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %267
  %270 = and i256 %269, 1461501637330902918203684832716283019655932542975
  store i256 %270, ptr %sp1826, align 16
  store i256 %dup21827, ptr %266, align 16
  %sp1853 = getelementptr i256, ptr %266, i64 2
  store i256 %dup21827, ptr %sp1853, align 16
  %271 = add i256 %dup21827, 32
  store i256 %271, ptr %sp1836, align 16
  %272 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %271, ptr %arg.contract.addr.val24050, i64 %arg.contract.addr.val24051)
  %273 = and i256 %272, 1461501637330902918203684832716283019655932542975
  store i256 %273, ptr %sp1824, align 16
  store i256 64, ptr %sp1836, align 16
  %274 = add i256 %dup21827, 64
  store i256 %274, ptr %266, align 16
  %275 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %274, ptr %arg.contract.addr.val24050, i64 %arg.contract.addr.val24051)
  store i256 %275, ptr %266, align 16
  br label %OP1821.JUMPDEST

OP583.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP162.DUP1
  %len.addr.25 = phi i64 [ %len.addr.5, %OP162.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %276 = add i64 %len.addr.25, 1
  %sp1900 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.25
  store i256 923, ptr %sp1900, align 16
  br label %OP1925.JUMPDEST

OP587.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP167.DUP1
  %len.addr.26 = phi i64 [ %len.addr.5, %OP167.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %277 = add i64 %len.addr.26, 1
  %sp1904 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.26
  store i256 1024, ptr %sp1904, align 16
  br label %OP1929.JUMPDEST

OP591.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %278 = add i64 %len.addr.197, 1
  %sp1908 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp1908, align 16
  %279 = add i64 %len.addr.197, 2
  %sp1912 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %278
  store i256 64, ptr %sp1912, align 16
  %mload.out.slot1916 = alloca i256, align 16
  %280 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1916, ptr %arg.ecx.addr)
  %.not23882 = icmp eq i8 %280, 0
  br i1 %.not23882, label %OP594.MLOAD.contd, label %return, !prof !6

OP594.MLOAD.contd:                                ; preds = %OP591.JUMPDEST
  %mload.out1917 = load i256, ptr %mload.out.slot1916, align 16
  %sp1920 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %279
  %sp1929 = getelementptr i256, ptr %sp1908, i64 -1
  %swap.b1930 = load i256, ptr %sp1929, align 16
  store i256 %mload.out1917, ptr %sp1929, align 16
  %281 = and i256 %swap.b1930, 255
  store i256 %281, ptr %sp1912, align 16
  store i256 %mload.out1917, ptr %sp1920, align 16
  %282 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1917, i256 %281, ptr %arg.ecx.addr)
  %.not23883 = icmp eq i8 %282, 0
  br i1 %.not23883, label %OP601.MLOAD, label %return, !prof !6

OP601.MLOAD:                                      ; preds = %OP594.MLOAD.contd
  %a1948 = load i256, ptr %sp1908, align 16
  %mload.out.slot1949 = alloca i256, align 16
  %283 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a1948, ptr %mload.out.slot1949, ptr %arg.ecx.addr)
  %.not23884 = icmp eq i8 %283, 0
  br i1 %.not23884, label %OP601.MLOAD.contd, label %return, !prof !6

OP601.MLOAD.contd:                                ; preds = %OP601.MLOAD
  %mload.out1950 = load i256, ptr %mload.out.slot1949, align 16
  %swap.b1956 = load i256, ptr %sp1929, align 16
  %284 = sub i256 %swap.b1956, %mload.out1950
  store i256 32, ptr %sp1912, align 16
  %285 = add i256 %284, 32
  store i256 %285, ptr %sp1929, align 16
  store i256 %mload.out1950, ptr %sp1908, align 16
  %286 = add i64 %len.addr.197, -1
  %287 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1929, i8 2)
  %.not23885 = icmp eq i8 %287, 0
  %spec.select17745 = select i1 %.not23885, i8 2, i8 %287, !prof !6
  br label %return

OP610.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP134.DUP1
  %len.addr.27 = phi i64 [ %len.addr.4, %OP134.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %288 = add i64 %len.addr.27, 1
  %sp1989 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.27
  store i256 923, ptr %sp1989, align 16
  br label %OP1933.JUMPDEST

OP614.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP139.DUP1
  %len.addr.28 = phi i64 [ %len.addr.4, %OP139.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp1993 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.28
  store i256 599, ptr %sp1993, align 16
  %sp1995 = getelementptr i256, ptr %sp1993, i64 1
  store i256 4, ptr %sp1995, align 16
  %289 = add i64 %len.addr.28, 3
  %sp1999 = getelementptr i256, ptr %sp1993, i64 2
  %contract.input.len.addr2001 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2002 = load i64, ptr %contract.input.len.addr2001, align 8
  %290 = zext i64 %contract.input.len2002 to i256
  %sp2003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %289
  %291 = add nsw i256 %290, -4
  store i256 %291, ptr %sp1999, align 16
  %sp2015 = getelementptr i256, ptr %sp1993, i64 4
  store i256 %291, ptr %sp2015, align 16
  %292 = icmp ugt i256 %291, 63
  %293 = zext i1 %292 to i256
  store i256 %293, ptr %sp2003, align 16
  br i1 %292, label %OP629.JUMPDEST, label %OP626.PUSH1

OP626.PUSH1:                                      ; preds = %OP614.JUMPDEST
  store i256 0, ptr %sp2003, align 16
  store i256 0, ptr %sp2015, align 16
  %294 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2003, i8 16)
  %.not23868 = icmp eq i8 %294, 0
  %spec.select17746 = select i1 %.not23868, i8 16, i8 %294, !prof !6
  br label %return

OP629.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25798 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24045.pre = load i64, ptr %.phi.trans.insert25798, align 8
  br label %OP629.JUMPDEST

OP629.JUMPDEST:                                   ; preds = %OP629.JUMPDEST.loopexit, %OP614.JUMPDEST
  %arg.contract.addr.val24045 = phi i64 [ %contract.input.len2002, %OP614.JUMPDEST ], [ %arg.contract.addr.val24045.pre, %OP629.JUMPDEST.loopexit ]
  %len.addr.29 = phi i64 [ %289, %OP614.JUMPDEST ], [ %len.addr.197, %OP629.JUMPDEST.loopexit ]
  %295 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.29
  %sp2040 = getelementptr i256, ptr %295, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2040, align 16
  %sp2042 = getelementptr i256, ptr %295, i64 -2
  %dup22043 = load i256, ptr %sp2042, align 16
  store i256 %dup22043, ptr %295, align 16
  %296 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24044 = load ptr, ptr %296, align 8
  %297 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup22043, ptr %arg.contract.addr.val24044, i64 %arg.contract.addr.val24045)
  %sp2052 = getelementptr i256, ptr %295, i64 1
  %298 = and i256 %297, 1461501637330902918203684832716283019655932542975
  store i256 %298, ptr %sp2042, align 16
  store i256 32, ptr %sp2052, align 16
  %299 = add i256 %dup22043, 32
  store i256 %299, ptr %295, align 16
  %300 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %299, ptr %arg.contract.addr.val24044, i64 %arg.contract.addr.val24045)
  store i256 %300, ptr %295, align 16
  %301 = and i256 %300, 1461501637330902918203684832716283019655932542975
  store i256 %301, ptr %sp2040, align 16
  br label %OP1938.JUMPDEST

OP643.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP144.DUP1
  %len.addr.30 = phi i64 [ %len.addr.4, %OP144.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %302 = add i64 %len.addr.30, 1
  %sp2085 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.30
  store i256 923, ptr %sp2085, align 16
  br label %OP2007.JUMPDEST

OP647.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP149.DUP1
  %len.addr.31 = phi i64 [ %len.addr.4, %OP149.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %303 = add i64 %len.addr.31, 1
  %sp2089 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.31
  store i256 923, ptr %sp2089, align 16
  br label %OP2012.JUMPDEST

OP651.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP105.JUMPDEST
  %len.addr.32 = phi i64 [ %len.addr.3, %OP105.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp2093 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.32
  store i256 923, ptr %sp2093, align 16
  %sp2095 = getelementptr i256, ptr %sp2093, i64 1
  store i256 4, ptr %sp2095, align 16
  %304 = add i64 %len.addr.32, 3
  %sp2099 = getelementptr i256, ptr %sp2093, i64 2
  %contract.input.len.addr2101 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2102 = load i64, ptr %contract.input.len.addr2101, align 8
  %305 = zext i64 %contract.input.len2102 to i256
  %sp2103 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %304
  %306 = add nsw i256 %305, -4
  store i256 %306, ptr %sp2099, align 16
  %sp2115 = getelementptr i256, ptr %sp2093, i64 4
  store i256 %306, ptr %sp2115, align 16
  %307 = icmp ugt i256 %306, 31
  %308 = zext i1 %307 to i256
  store i256 %308, ptr %sp2103, align 16
  br i1 %307, label %OP666.JUMPDEST, label %OP663.PUSH1

OP663.PUSH1:                                      ; preds = %OP651.JUMPDEST
  store i256 0, ptr %sp2103, align 16
  store i256 0, ptr %sp2115, align 16
  %309 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2103, i8 16)
  %.not23979 = icmp eq i8 %309, 0
  %spec.select17747 = select i1 %.not23979, i8 16, i8 %309, !prof !6
  br label %return

OP666.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25831 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24041.pre = load i64, ptr %.phi.trans.insert25831, align 8
  br label %OP666.JUMPDEST

OP666.JUMPDEST:                                   ; preds = %OP666.JUMPDEST.loopexit, %OP651.JUMPDEST
  %arg.contract.addr.val24041 = phi i64 [ %contract.input.len2102, %OP651.JUMPDEST ], [ %arg.contract.addr.val24041.pre, %OP666.JUMPDEST.loopexit ]
  %len.addr.33 = phi i64 [ %304, %OP651.JUMPDEST ], [ %len.addr.197, %OP666.JUMPDEST.loopexit ]
  %310 = add i64 %len.addr.33, -1
  %311 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.33
  %sp2140 = getelementptr i256, ptr %311, i64 -2
  %a2141 = load i256, ptr %sp2140, align 16
  %312 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24040 = load ptr, ptr %312, align 8
  %313 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a2141, ptr %arg.contract.addr.val24040, i64 %arg.contract.addr.val24041)
  %sp2144 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %310
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2144, align 16
  %314 = and i256 %313, 1461501637330902918203684832716283019655932542975
  store i256 %314, ptr %sp2140, align 16
  br label %OP2017.JUMPDEST

OP673.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP111.DUP1
  %len.addr.34 = phi i64 [ %len.addr.3, %OP111.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp2154 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.34
  store i256 923, ptr %sp2154, align 16
  %sp2156 = getelementptr i256, ptr %sp2154, i64 1
  store i256 4, ptr %sp2156, align 16
  %315 = add i64 %len.addr.34, 3
  %sp2160 = getelementptr i256, ptr %sp2154, i64 2
  %contract.input.len.addr2162 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2163 = load i64, ptr %contract.input.len.addr2162, align 8
  %316 = zext i64 %contract.input.len2163 to i256
  %sp2164 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %315
  %317 = add nsw i256 %316, -4
  store i256 %317, ptr %sp2160, align 16
  %sp2176 = getelementptr i256, ptr %sp2154, i64 4
  store i256 %317, ptr %sp2176, align 16
  %318 = icmp ugt i256 %317, 31
  %319 = zext i1 %318 to i256
  store i256 %319, ptr %sp2164, align 16
  br i1 %318, label %OP688.JUMPDEST, label %OP685.PUSH1

OP685.PUSH1:                                      ; preds = %OP673.JUMPDEST
  store i256 0, ptr %sp2164, align 16
  store i256 0, ptr %sp2176, align 16
  %320 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2164, i8 16)
  %.not23974 = icmp eq i8 %320, 0
  %spec.select17748 = select i1 %.not23974, i8 16, i8 %320, !prof !6
  br label %return

OP688.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25829 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24039.pre = load i64, ptr %.phi.trans.insert25829, align 8
  br label %OP688.JUMPDEST

OP688.JUMPDEST:                                   ; preds = %OP688.JUMPDEST.loopexit, %OP673.JUMPDEST
  %arg.contract.addr.val24039 = phi i64 [ %contract.input.len2163, %OP673.JUMPDEST ], [ %arg.contract.addr.val24039.pre, %OP688.JUMPDEST.loopexit ]
  %len.addr.35 = phi i64 [ %315, %OP673.JUMPDEST ], [ %len.addr.197, %OP688.JUMPDEST.loopexit ]
  %321 = add i64 %len.addr.35, -1
  %322 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.35
  %sp2201 = getelementptr i256, ptr %322, i64 -2
  %a2202 = load i256, ptr %sp2201, align 16
  %323 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24038 = load ptr, ptr %323, align 8
  %324 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a2202, ptr %arg.contract.addr.val24038, i64 %arg.contract.addr.val24039)
  %sp2205 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %321
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2205, align 16
  %325 = and i256 %324, 1461501637330902918203684832716283019655932542975
  store i256 %325, ptr %sp2201, align 16
  br label %OP2480.JUMPDEST

OP695.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP116.DUP1
  %len.addr.36 = phi i64 [ %len.addr.3, %OP116.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %326 = add i64 %len.addr.36, 1
  %sp2215 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.36
  store i256 923, ptr %sp2215, align 16
  br label %OP2494.JUMPDEST

OP699.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP83.DUP1
  %len.addr.37 = phi i64 [ %len.addr.2, %OP83.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp2219 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  store i256 923, ptr %sp2219, align 16
  %sp2221 = getelementptr i256, ptr %sp2219, i64 1
  store i256 4, ptr %sp2221, align 16
  %327 = add i64 %len.addr.37, 3
  %sp2225 = getelementptr i256, ptr %sp2219, i64 2
  %contract.input.len.addr2227 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2228 = load i64, ptr %contract.input.len.addr2227, align 8
  %328 = zext i64 %contract.input.len2228 to i256
  %sp2229 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %327
  %329 = add nsw i256 %328, -4
  store i256 %329, ptr %sp2225, align 16
  %sp2241 = getelementptr i256, ptr %sp2219, i64 4
  store i256 %329, ptr %sp2241, align 16
  %330 = icmp ugt i256 %329, 31
  %331 = zext i1 %330 to i256
  store i256 %331, ptr %sp2229, align 16
  br i1 %330, label %OP714.JUMPDEST, label %OP711.PUSH1

OP711.PUSH1:                                      ; preds = %OP699.JUMPDEST
  store i256 0, ptr %sp2229, align 16
  store i256 0, ptr %sp2241, align 16
  %332 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2229, i8 16)
  %.not23968 = icmp eq i8 %332, 0
  %spec.select17749 = select i1 %.not23968, i8 16, i8 %332, !prof !6
  br label %return

OP714.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25825 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24037.pre = load i64, ptr %.phi.trans.insert25825, align 8
  br label %OP714.JUMPDEST

OP714.JUMPDEST:                                   ; preds = %OP714.JUMPDEST.loopexit, %OP699.JUMPDEST
  %arg.contract.addr.val24037 = phi i64 [ %contract.input.len2228, %OP699.JUMPDEST ], [ %arg.contract.addr.val24037.pre, %OP714.JUMPDEST.loopexit ]
  %len.addr.38 = phi i64 [ %327, %OP699.JUMPDEST ], [ %len.addr.197, %OP714.JUMPDEST.loopexit ]
  %333 = add i64 %len.addr.38, -1
  %334 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.38
  %sp2266 = getelementptr i256, ptr %334, i64 -2
  %a2267 = load i256, ptr %sp2266, align 16
  %335 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24036 = load ptr, ptr %335, align 8
  %336 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a2267, ptr %arg.contract.addr.val24036, i64 %arg.contract.addr.val24037)
  %sp2270 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %333
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2270, align 16
  %337 = and i256 %336, 1461501637330902918203684832716283019655932542975
  store i256 %337, ptr %sp2266, align 16
  br label %OP2499.JUMPDEST

OP721.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP88.DUP1
  %len.addr.39 = phi i64 [ %len.addr.2, %OP88.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp2280 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.39
  store i256 1341, ptr %sp2280, align 16
  %sp2282 = getelementptr i256, ptr %sp2280, i64 1
  store i256 4, ptr %sp2282, align 16
  %338 = add i64 %len.addr.39, 3
  %sp2286 = getelementptr i256, ptr %sp2280, i64 2
  %contract.input.len.addr2288 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2289 = load i64, ptr %contract.input.len.addr2288, align 8
  %339 = zext i64 %contract.input.len2289 to i256
  %sp2290 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %338
  %340 = add nsw i256 %339, -4
  store i256 %340, ptr %sp2286, align 16
  %sp2302 = getelementptr i256, ptr %sp2280, i64 4
  store i256 %340, ptr %sp2302, align 16
  %341 = icmp ugt i256 %340, 31
  %342 = zext i1 %341 to i256
  store i256 %342, ptr %sp2290, align 16
  br i1 %341, label %OP736.JUMPDEST, label %OP733.PUSH1

OP733.PUSH1:                                      ; preds = %OP721.JUMPDEST
  store i256 0, ptr %sp2290, align 16
  store i256 0, ptr %sp2302, align 16
  %343 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2290, i8 16)
  %.not23958 = icmp eq i8 %343, 0
  %spec.select17750 = select i1 %.not23958, i8 16, i8 %343, !prof !6
  br label %return

OP736.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25823 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24035.pre = load i64, ptr %.phi.trans.insert25823, align 8
  br label %OP736.JUMPDEST

OP736.JUMPDEST:                                   ; preds = %OP736.JUMPDEST.loopexit, %OP721.JUMPDEST
  %arg.contract.addr.val24035 = phi i64 [ %contract.input.len2289, %OP721.JUMPDEST ], [ %arg.contract.addr.val24035.pre, %OP736.JUMPDEST.loopexit ]
  %len.addr.40 = phi i64 [ %338, %OP721.JUMPDEST ], [ %len.addr.197, %OP736.JUMPDEST.loopexit ]
  %344 = add i64 %len.addr.40, -1
  %345 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.40
  %sp2327 = getelementptr i256, ptr %345, i64 -2
  %a2328 = load i256, ptr %sp2327, align 16
  %346 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24034 = load ptr, ptr %346, align 8
  %347 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a2328, ptr %arg.contract.addr.val24034, i64 %arg.contract.addr.val24035)
  %sp2331 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %344
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2331, align 16
  %348 = and i256 %347, 1461501637330902918203684832716283019655932542975
  store i256 %348, ptr %sp2327, align 16
  br label %OP2513.JUMPDEST

OP743.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %349 = add i64 %len.addr.197, 1
  %sp2341 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp2341, align 16
  %350 = add i64 %len.addr.197, 2
  %sp2345 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %349
  store i256 64, ptr %sp2345, align 16
  %mload.out.slot2349 = alloca i256, align 16
  %351 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2349, ptr %arg.ecx.addr)
  %.not23861 = icmp eq i8 %351, 0
  br i1 %.not23861, label %OP746.MLOAD.contd, label %return, !prof !6

OP746.MLOAD.contd:                                ; preds = %OP743.JUMPDEST
  %mload.out2350 = load i256, ptr %mload.out.slot2349, align 16
  %sp2355 = getelementptr i256, ptr %sp2341, i64 -2
  %swap.b2356 = load i256, ptr %sp2355, align 16
  store i256 %mload.out2350, ptr %sp2355, align 16
  store i256 %swap.b2356, ptr %sp2345, align 16
  %sp2360 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %350
  store i256 %mload.out2350, ptr %sp2360, align 16
  %352 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out2350, i256 %swap.b2356, ptr %arg.ecx.addr)
  %.not23862 = icmp eq i8 %352, 0
  br i1 %.not23862, label %OP750.PUSH1, label %return, !prof !6

OP750.PUSH1:                                      ; preds = %OP746.MLOAD.contd
  %dup42370 = load i256, ptr %sp2355, align 16
  store i256 %dup42370, ptr %sp2360, align 16
  %353 = add i256 %dup42370, 32
  %sp2381 = getelementptr i256, ptr %sp2341, i64 -1
  %swap.b2382 = load i256, ptr %sp2381, align 16
  %swap.b2387 = load i256, ptr %sp2341, align 16
  store i256 %swap.b2382, ptr %sp2341, align 16
  store i256 %swap.b2387, ptr %sp2381, align 16
  store i256 %353, ptr %sp2345, align 16
  %354 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %353, i256 %swap.b2382, ptr %arg.ecx.addr)
  %.not23863 = icmp eq i8 %354, 0
  br i1 %.not23863, label %OP757.DUP1, label %return, !prof !6

OP757.DUP1:                                       ; preds = %OP750.PUSH1
  %dup12400 = load i256, ptr %sp2381, align 16
  store i256 %dup12400, ptr %sp2341, align 16
  %mload.out.slot2405 = alloca i256, align 16
  %355 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup12400, ptr %mload.out.slot2405, ptr %arg.ecx.addr)
  %.not23864 = icmp eq i8 %355, 0
  br i1 %.not23864, label %OP758.MLOAD.contd, label %return, !prof !6

OP758.MLOAD.contd:                                ; preds = %OP757.DUP1
  %mload.out2406 = load i256, ptr %mload.out.slot2405, align 16
  %swap.b2412 = load i256, ptr %sp2355, align 16
  store i256 %swap.b2412, ptr %sp2345, align 16
  %356 = sub i256 %swap.b2412, %mload.out2406
  store i256 %356, ptr %sp2341, align 16
  %b2432 = load i256, ptr %sp2381, align 16
  %357 = add i256 %b2432, %356
  store i256 %357, ptr %sp2355, align 16
  store i256 %mload.out2406, ptr %sp2381, align 16
  %358 = add i64 %len.addr.197, -2
  %359 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2355, i8 2)
  %.not23865 = icmp eq i8 %359, 0
  %spec.select17751 = select i1 %.not23865, i8 2, i8 %359, !prof !6
  br label %return

OP766.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP93.DUP1
  %len.addr.41 = phi i64 [ %len.addr.2, %OP93.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %360 = add i64 %len.addr.41, 1
  %sp2443 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.41
  store i256 609, ptr %sp2443, align 16
  br label %OP3130.JUMPDEST

OP770.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP98.DUP1
  %len.addr.42 = phi i64 [ %len.addr.2, %OP98.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp2447 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.42
  store i256 846, ptr %sp2447, align 16
  %sp2449 = getelementptr i256, ptr %sp2447, i64 1
  store i256 4, ptr %sp2449, align 16
  %361 = add i64 %len.addr.42, 3
  %sp2453 = getelementptr i256, ptr %sp2447, i64 2
  %contract.input.len.addr2455 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2456 = load i64, ptr %contract.input.len.addr2455, align 8
  %362 = zext i64 %contract.input.len2456 to i256
  %sp2457 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %361
  %363 = add nsw i256 %362, -4
  store i256 %363, ptr %sp2453, align 16
  %sp2469 = getelementptr i256, ptr %sp2447, i64 4
  store i256 %363, ptr %sp2469, align 16
  %364 = icmp ugt i256 %363, 63
  %365 = zext i1 %364 to i256
  store i256 %365, ptr %sp2457, align 16
  br i1 %364, label %OP785.JUMPDEST, label %OP782.PUSH1

OP782.PUSH1:                                      ; preds = %OP770.JUMPDEST
  store i256 0, ptr %sp2457, align 16
  store i256 0, ptr %sp2469, align 16
  %366 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2457, i8 16)
  %.not23949 = icmp eq i8 %366, 0
  %spec.select17752 = select i1 %.not23949, i8 16, i8 %366, !prof !6
  br label %return

OP785.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25819 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24033.pre = load i64, ptr %.phi.trans.insert25819, align 8
  br label %OP785.JUMPDEST

OP785.JUMPDEST:                                   ; preds = %OP785.JUMPDEST.loopexit, %OP770.JUMPDEST
  %arg.contract.addr.val24033 = phi i64 [ %contract.input.len2456, %OP770.JUMPDEST ], [ %arg.contract.addr.val24033.pre, %OP785.JUMPDEST.loopexit ]
  %len.addr.43 = phi i64 [ %361, %OP770.JUMPDEST ], [ %len.addr.197, %OP785.JUMPDEST.loopexit ]
  %367 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.43
  %sp2494 = getelementptr i256, ptr %367, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2494, align 16
  %sp2496 = getelementptr i256, ptr %367, i64 -2
  %dup22497 = load i256, ptr %sp2496, align 16
  store i256 %dup22497, ptr %367, align 16
  %368 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24032 = load ptr, ptr %368, align 8
  %369 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup22497, ptr %arg.contract.addr.val24032, i64 %arg.contract.addr.val24033)
  %370 = and i256 %369, 1461501637330902918203684832716283019655932542975
  store i256 %370, ptr %sp2496, align 16
  store i256 32, ptr %367, align 16
  %371 = add i256 %dup22497, 32
  store i256 %371, ptr %sp2494, align 16
  %372 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %371, ptr %arg.contract.addr.val24032, i64 %arg.contract.addr.val24033)
  store i256 %372, ptr %sp2494, align 16
  br label %OP3150.JUMPDEST

OP797.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP59.JUMPDEST
  %len.addr.44 = phi i64 [ %len.addr.1, %OP59.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %373 = add i64 %len.addr.44, 1
  %sp2529 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.44
  store i256 923, ptr %sp2529, align 16
  br label %OP3158.JUMPDEST

OP801.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP65.DUP1
  %len.addr.45 = phi i64 [ %len.addr.1, %OP65.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp2533 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.45
  store i256 599, ptr %sp2533, align 16
  %sp2535 = getelementptr i256, ptr %sp2533, i64 1
  store i256 4, ptr %sp2535, align 16
  %374 = add i64 %len.addr.45, 3
  %sp2539 = getelementptr i256, ptr %sp2533, i64 2
  %contract.input.len.addr2541 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2542 = load i64, ptr %contract.input.len.addr2541, align 8
  %375 = zext i64 %contract.input.len2542 to i256
  %sp2543 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %374
  %376 = add nsw i256 %375, -4
  store i256 %376, ptr %sp2539, align 16
  %sp2555 = getelementptr i256, ptr %sp2533, i64 4
  store i256 %376, ptr %sp2555, align 16
  %377 = icmp ugt i256 %376, 31
  %378 = zext i1 %377 to i256
  store i256 %378, ptr %sp2543, align 16
  br i1 %377, label %OP816.JUMPDEST, label %OP813.PUSH1

OP813.PUSH1:                                      ; preds = %OP801.JUMPDEST
  store i256 0, ptr %sp2543, align 16
  store i256 0, ptr %sp2555, align 16
  %379 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2543, i8 16)
  %.not23990 = icmp eq i8 %379, 0
  %spec.select17753 = select i1 %.not23990, i8 16, i8 %379, !prof !6
  br label %return

OP816.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25835 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24029.pre = load i64, ptr %.phi.trans.insert25835, align 8
  br label %OP816.JUMPDEST

OP816.JUMPDEST:                                   ; preds = %OP816.JUMPDEST.loopexit, %OP801.JUMPDEST
  %arg.contract.addr.val24029 = phi i64 [ %contract.input.len2542, %OP801.JUMPDEST ], [ %arg.contract.addr.val24029.pre, %OP816.JUMPDEST.loopexit ]
  %len.addr.46 = phi i64 [ %374, %OP801.JUMPDEST ], [ %len.addr.197, %OP816.JUMPDEST.loopexit ]
  %380 = add i64 %len.addr.46, -1
  %381 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.46
  %sp2580 = getelementptr i256, ptr %381, i64 -2
  %a2581 = load i256, ptr %sp2580, align 16
  %382 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24028 = load ptr, ptr %382, align 8
  %383 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a2581, ptr %arg.contract.addr.val24028, i64 %arg.contract.addr.val24029)
  %sp2584 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %380
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2584, align 16
  %384 = and i256 %383, 1461501637330902918203684832716283019655932542975
  store i256 %384, ptr %sp2580, align 16
  br label %OP3162.JUMPDEST

OP823.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP70.DUP1
  %len.addr.47 = phi i64 [ %len.addr.1, %OP70.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %385 = add i64 %len.addr.47, 1
  %sp2594 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.47
  store i256 874, ptr %sp2594, align 16
  br label %OP3387.JUMPDEST

OP827.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP37.DUP1
  %len.addr.48 = phi i64 [ %len.addr.0, %OP37.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %386 = add i64 %len.addr.48, 1
  %sp2598 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.48
  store i256 874, ptr %sp2598, align 16
  br label %OP3394.JUMPDEST

OP831.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %contract.input.len.addr2610.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2611.pre = load i64, ptr %contract.input.len.addr2610.phi.trans.insert, align 8
  %.pre25841 = zext i64 %contract.input.len2611.pre to i256
  br label %OP831.JUMPDEST

OP831.JUMPDEST:                                   ; preds = %OP831.JUMPDEST.loopexit, %OP42.DUP1
  %.pre-phi25842 = phi i256 [ %.pre25841, %OP831.JUMPDEST.loopexit ], [ %8, %OP42.DUP1 ]
  %contract.input.len2611 = phi i64 [ %contract.input.len2611.pre, %OP831.JUMPDEST.loopexit ], [ %contract.input.len, %OP42.DUP1 ]
  %len.addr.49 = phi i64 [ %len.addr.197, %OP831.JUMPDEST.loopexit ], [ %len.addr.0, %OP42.DUP1 ]
  %sp2602 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.49
  store i256 599, ptr %sp2602, align 16
  %sp2604 = getelementptr i256, ptr %sp2602, i64 1
  store i256 4, ptr %sp2604, align 16
  %387 = add i64 %len.addr.49, 3
  %sp2608 = getelementptr i256, ptr %sp2602, i64 2
  %sp2612 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %387
  %388 = add nsw i256 %.pre-phi25842, -4
  store i256 %388, ptr %sp2608, align 16
  %sp2624 = getelementptr i256, ptr %sp2602, i64 4
  store i256 %388, ptr %sp2624, align 16
  %389 = icmp ugt i256 %388, 223
  %390 = zext i1 %389 to i256
  store i256 %390, ptr %sp2612, align 16
  br i1 %389, label %OP846.JUMPDEST, label %OP843.PUSH1

OP843.PUSH1:                                      ; preds = %OP831.JUMPDEST
  store i256 0, ptr %sp2612, align 16
  store i256 0, ptr %sp2624, align 16
  %391 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2612, i8 16)
  %.not23818 = icmp eq i8 %391, 0
  %spec.select17754 = select i1 %.not23818, i8 16, i8 %391, !prof !6
  br label %return

OP846.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25796 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24027.pre = load i64, ptr %.phi.trans.insert25796, align 8
  br label %OP846.JUMPDEST

OP846.JUMPDEST:                                   ; preds = %OP846.JUMPDEST.loopexit, %OP831.JUMPDEST
  %arg.contract.addr.val24027 = phi i64 [ %contract.input.len2611, %OP831.JUMPDEST ], [ %arg.contract.addr.val24027.pre, %OP846.JUMPDEST.loopexit ]
  %len.addr.50 = phi i64 [ %387, %OP831.JUMPDEST ], [ %len.addr.197, %OP846.JUMPDEST.loopexit ]
  %392 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.50
  %sp2649 = getelementptr i256, ptr %392, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2649, align 16
  %sp2651 = getelementptr i256, ptr %392, i64 -2
  %dup22652 = load i256, ptr %sp2651, align 16
  store i256 %dup22652, ptr %392, align 16
  %393 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24026 = load ptr, ptr %393, align 8
  %394 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup22652, ptr %arg.contract.addr.val24026, i64 %arg.contract.addr.val24027)
  %sp2661 = getelementptr i256, ptr %392, i64 1
  %395 = and i256 %394, 1461501637330902918203684832716283019655932542975
  store i256 %395, ptr %sp2651, align 16
  store i256 %dup22652, ptr %392, align 16
  %sp2678 = getelementptr i256, ptr %392, i64 2
  store i256 %dup22652, ptr %sp2678, align 16
  %396 = add i256 %dup22652, 32
  store i256 %396, ptr %sp2661, align 16
  %397 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %396, ptr %arg.contract.addr.val24026, i64 %arg.contract.addr.val24027)
  %398 = and i256 %397, 1461501637330902918203684832716283019655932542975
  store i256 %398, ptr %sp2649, align 16
  store i256 %dup22652, ptr %392, align 16
  store i256 %dup22652, ptr %sp2678, align 16
  %399 = add i256 %dup22652, 64
  store i256 %399, ptr %sp2661, align 16
  %400 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %399, ptr %arg.contract.addr.val24026, i64 %arg.contract.addr.val24027)
  store i256 %400, ptr %392, align 16
  store i256 %dup22652, ptr %sp2661, align 16
  %sp2736 = getelementptr i256, ptr %392, i64 3
  store i256 %dup22652, ptr %sp2736, align 16
  %401 = add i256 %dup22652, 96
  store i256 %401, ptr %sp2678, align 16
  %402 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %401, ptr %arg.contract.addr.val24026, i64 %arg.contract.addr.val24027)
  store i256 %402, ptr %sp2661, align 16
  store i256 %dup22652, ptr %sp2678, align 16
  store i256 255, ptr %sp2736, align 16
  %403 = add i64 %len.addr.50, 5
  %sp2755 = getelementptr i256, ptr %392, i64 4
  %sp2759 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %403
  store i256 %dup22652, ptr %sp2759, align 16
  %404 = add i256 %dup22652, 128
  store i256 %404, ptr %sp2755, align 16
  %405 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %404, ptr %arg.contract.addr.val24026, i64 %arg.contract.addr.val24027)
  %406 = and i256 %405, 255
  store i256 %406, ptr %sp2678, align 16
  store i256 %dup22652, ptr %sp2736, align 16
  store i256 %dup22652, ptr %sp2759, align 16
  %407 = add i256 %dup22652, 160
  store i256 %407, ptr %sp2755, align 16
  %408 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %407, ptr %arg.contract.addr.val24026, i64 %arg.contract.addr.val24027)
  store i256 %408, ptr %sp2736, align 16
  store i256 192, ptr %sp2759, align 16
  %409 = add i256 %dup22652, 192
  store i256 %409, ptr %sp2755, align 16
  %410 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %409, ptr %arg.contract.addr.val24026, i64 %arg.contract.addr.val24027)
  store i256 %410, ptr %sp2755, align 16
  br label %OP3401.JUMPDEST

OP889.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %contract.input.len.addr2825.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2826.pre = load i64, ptr %contract.input.len.addr2825.phi.trans.insert, align 8
  %.pre25843 = zext i64 %contract.input.len2826.pre to i256
  br label %OP889.JUMPDEST

OP889.JUMPDEST:                                   ; preds = %OP889.JUMPDEST.loopexit, %OP47.DUP1
  %.pre-phi25844 = phi i256 [ %.pre25843, %OP889.JUMPDEST.loopexit ], [ %8, %OP47.DUP1 ]
  %contract.input.len2826 = phi i64 [ %contract.input.len2826.pre, %OP889.JUMPDEST.loopexit ], [ %contract.input.len, %OP47.DUP1 ]
  %len.addr.51 = phi i64 [ %len.addr.197, %OP889.JUMPDEST.loopexit ], [ %len.addr.0, %OP47.DUP1 ]
  %sp2817 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 923, ptr %sp2817, align 16
  %sp2819 = getelementptr i256, ptr %sp2817, i64 1
  store i256 4, ptr %sp2819, align 16
  %411 = add i64 %len.addr.51, 3
  %sp2823 = getelementptr i256, ptr %sp2817, i64 2
  %sp2827 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %411
  %412 = add nsw i256 %.pre-phi25844, -4
  store i256 %412, ptr %sp2823, align 16
  %sp2839 = getelementptr i256, ptr %sp2817, i64 4
  store i256 %412, ptr %sp2839, align 16
  %413 = icmp ugt i256 %412, 63
  %414 = zext i1 %413 to i256
  store i256 %414, ptr %sp2827, align 16
  br i1 %413, label %OP904.JUMPDEST, label %OP901.PUSH1

OP901.PUSH1:                                      ; preds = %OP889.JUMPDEST
  store i256 0, ptr %sp2827, align 16
  store i256 0, ptr %sp2839, align 16
  %415 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2827, i8 16)
  %.not23810 = icmp eq i8 %415, 0
  %spec.select17755 = select i1 %.not23810, i8 16, i8 %415, !prof !6
  br label %return

OP904.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert25793 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val24013.pre = load i64, ptr %.phi.trans.insert25793, align 8
  br label %OP904.JUMPDEST

OP904.JUMPDEST:                                   ; preds = %OP904.JUMPDEST.loopexit, %OP889.JUMPDEST
  %arg.contract.addr.val24013 = phi i64 [ %contract.input.len2826, %OP889.JUMPDEST ], [ %arg.contract.addr.val24013.pre, %OP904.JUMPDEST.loopexit ]
  %len.addr.52 = phi i64 [ %411, %OP889.JUMPDEST ], [ %len.addr.197, %OP904.JUMPDEST.loopexit ]
  %416 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.52
  %sp2864 = getelementptr i256, ptr %416, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2864, align 16
  %sp2866 = getelementptr i256, ptr %416, i64 -2
  %dup22867 = load i256, ptr %sp2866, align 16
  store i256 %dup22867, ptr %416, align 16
  %417 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val24012 = load ptr, ptr %417, align 8
  %418 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup22867, ptr %arg.contract.addr.val24012, i64 %arg.contract.addr.val24013)
  %sp2876 = getelementptr i256, ptr %416, i64 1
  %419 = and i256 %418, 1461501637330902918203684832716283019655932542975
  store i256 %419, ptr %sp2866, align 16
  store i256 32, ptr %sp2876, align 16
  %420 = add i256 %dup22867, 32
  store i256 %420, ptr %416, align 16
  %421 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %420, ptr %arg.contract.addr.val24012, i64 %arg.contract.addr.val24013)
  store i256 %421, ptr %416, align 16
  %422 = and i256 %421, 1461501637330902918203684832716283019655932542975
  store i256 %422, ptr %sp2864, align 16
  br label %OP3722.JUMPDEST

OP918.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP52.DUP1
  %len.addr.53 = phi i64 [ %len.addr.0, %OP52.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %423 = add i64 %len.addr.53, 1
  %sp2909 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.53
  store i256 599, ptr %sp2909, align 16
  br label %OP3747.JUMPDEST

OP922.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP306.JUMPDEST
  %len.addr.54 = phi i64 [ %133, %OP306.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %424 = add i64 %len.addr.54, 1
  %sp2913 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.54
  store i256 12, ptr %sp2913, align 16
  %425 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2913, i8 17)
  %.not23408 = icmp eq i8 %425, 0
  br i1 %.not23408, label %OP925.PUSH1, label %return, !prof !6

OP925.PUSH1:                                      ; preds = %OP922.JUMPDEST
  %426 = add i64 %len.addr.54, 2
  %sp2917 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %424
  store i256 1, ptr %sp2917, align 16
  %b2922 = load i256, ptr %sp2913, align 16
  %427 = icmp eq i256 %b2922, 1
  %428 = zext i1 %427 to i256
  store i256 %428, ptr %sp2913, align 16
  br i1 %427, label %OP960.JUMPDEST, label %OP929.PUSH1

OP929.PUSH1:                                      ; preds = %OP925.PUSH1
  store i256 64, ptr %sp2913, align 16
  store i256 64, ptr %sp2917, align 16
  %mload.out.slot2936 = alloca i256, align 16
  %429 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2936, ptr %arg.ecx.addr)
  %.not23409 = icmp eq i8 %429, 0
  br i1 %.not23409, label %OP931.MLOAD.contd, label %return, !prof !6

OP931.MLOAD.contd:                                ; preds = %OP929.PUSH1
  %mload.out2937 = load i256, ptr %mload.out.slot2936, align 16
  store i256 %mload.out2937, ptr %sp2917, align 16
  %sp2940 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %426
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp2940, align 16
  %sp2944 = getelementptr i256, ptr %sp2913, i64 3
  store i256 %mload.out2937, ptr %sp2944, align 16
  %430 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out2937, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23410 = icmp eq i8 %430, 0
  br i1 %.not23410, label %OP935.PUSH1, label %return, !prof !6

OP935.PUSH1:                                      ; preds = %OP931.MLOAD.contd
  store i256 32, ptr %sp2940, align 16
  %dup32956 = load i256, ptr %sp2917, align 16
  %sp2957 = getelementptr i256, ptr %sp2913, i64 4
  store i256 %dup32956, ptr %sp2957, align 16
  %431 = add i256 %dup32956, 4
  store i256 %431, ptr %sp2944, align 16
  %432 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %431, i256 32, ptr %arg.ecx.addr)
  %.not23411 = icmp eq i8 %432, 0
  br i1 %.not23411, label %OP940.PUSH1, label %return, !prof !6

OP940.PUSH1:                                      ; preds = %OP935.PUSH1
  store i256 17, ptr %sp2940, align 16
  %dup32975 = load i256, ptr %sp2917, align 16
  store i256 %dup32975, ptr %sp2957, align 16
  %433 = add i256 %dup32975, 36
  store i256 %433, ptr %sp2944, align 16
  %434 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %433, i256 17, ptr %arg.ecx.addr)
  %.not23412 = icmp eq i8 %434, 0
  br i1 %.not23412, label %OP945.PUSH32, label %return, !prof !6

OP945.PUSH32:                                     ; preds = %OP940.PUSH1
  store i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %sp2940, align 16
  %dup32994 = load i256, ptr %sp2917, align 16
  store i256 %dup32994, ptr %sp2957, align 16
  %435 = add i256 %dup32994, 68
  store i256 %435, ptr %sp2944, align 16
  %436 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %435, i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %arg.ecx.addr)
  %.not23413 = icmp eq i8 %436, 0
  br i1 %.not23413, label %OP950.SWAP1, label %return, !prof !6

OP950.SWAP1:                                      ; preds = %OP945.PUSH32
  %swap.a3009 = load i256, ptr %sp2917, align 16
  %swap.b3011 = load i256, ptr %sp2913, align 16
  store i256 %swap.a3009, ptr %sp2913, align 16
  store i256 %swap.b3011, ptr %sp2917, align 16
  %mload.out.slot3015 = alloca i256, align 16
  %437 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b3011, ptr %mload.out.slot3015, ptr %arg.ecx.addr)
  %.not23414 = icmp eq i8 %437, 0
  br i1 %.not23414, label %OP951.MLOAD.contd, label %return, !prof !6

OP951.MLOAD.contd:                                ; preds = %OP950.SWAP1
  %mload.out3016 = load i256, ptr %mload.out.slot3015, align 16
  %swap.b3022 = load i256, ptr %sp2913, align 16
  %438 = sub i256 %swap.b3022, %mload.out3016
  store i256 100, ptr %sp2940, align 16
  %439 = add i256 %438, 100
  store i256 %439, ptr %sp2913, align 16
  store i256 %mload.out3016, ptr %sp2917, align 16
  %440 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2913, i8 16)
  %.not23415 = icmp eq i8 %440, 0
  %spec.select17756 = select i1 %.not23415, i8 16, i8 %440, !prof !6
  br label %return

OP960.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP925.PUSH1
  %len.addr.55 = phi i64 [ %len.addr.54, %OP925.PUSH1 ], [ %len.addr.197, %dynamic_jump_table ]
  %441 = add i64 %len.addr.55, 1
  %sp3055 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.55
  store i256 0, ptr %sp3055, align 16
  %sp3057 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %441
  store i256 12, ptr %sp3057, align 16
  %442 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3055, i8 17)
  %.not23416 = icmp eq i8 %442, 0
  br i1 %.not23416, label %OP964.DUP5, label %return, !prof !6

OP964.DUP5:                                       ; preds = %OP960.JUMPDEST
  %sp3061 = getelementptr i256, ptr %sp3055, i64 -5
  %dup53062 = load i256, ptr %sp3061, align 16
  %443 = icmp ne i256 %dup53062, 0
  %444 = zext i1 %443 to i256
  store i256 %444, ptr %sp3055, align 16
  store i256 %444, ptr %sp3057, align 16
  br i1 %443, label %OP974.JUMPDEST, label %OP970.POP

OP970.POP:                                        ; preds = %OP964.DUP5
  %sp3083 = getelementptr i256, ptr %sp3055, i64 -4
  %dup53084 = load i256, ptr %sp3083, align 16
  store i256 %dup53084, ptr %sp3057, align 16
  %445 = icmp ne i256 %dup53084, 0
  %446 = zext i1 %445 to i256
  store i256 %446, ptr %sp3055, align 16
  br label %OP974.JUMPDEST, !annotation !7

OP974.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP970.POP, %OP964.DUP5
  %len.addr.56 = phi i64 [ %441, %OP964.DUP5 ], [ %441, %OP970.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %447 = add i64 %len.addr.56, -1
  %sp3094 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %447
  %a3095 = load i256, ptr %sp3094, align 16
  %.not23417 = icmp eq i256 %a3095, 0
  br i1 %.not23417, label %OP977.PUSH1, label %OP1015.JUMPDEST

OP977.PUSH1:                                      ; preds = %OP974.JUMPDEST
  store i256 64, ptr %sp3094, align 16
  %mload.out.slot3101 = alloca i256, align 16
  %448 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot3101, ptr %arg.ecx.addr)
  %.not23418 = icmp eq i8 %448, 0
  br i1 %.not23418, label %OP978.MLOAD.contd, label %return, !prof !6

OP978.MLOAD.contd:                                ; preds = %OP977.PUSH1
  %mload.out3102 = load i256, ptr %mload.out.slot3101, align 16
  store i256 %mload.out3102, ptr %sp3094, align 16
  %449 = add i64 %len.addr.56, 1
  %sp3105 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.56
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp3105, align 16
  %450 = add i64 %len.addr.56, 2
  %sp3107 = getelementptr i256, ptr %sp3105, i64 -1
  %sp3109 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %449
  store i256 %mload.out3102, ptr %sp3109, align 16
  %451 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out3102, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23419 = icmp eq i8 %451, 0
  br i1 %.not23419, label %OP982.PUSH1, label %return, !prof !6

OP982.PUSH1:                                      ; preds = %OP978.MLOAD.contd
  %b3121 = load i256, ptr %sp3094, align 16
  %452 = add i256 %b3121, 4
  store i256 %452, ptr %sp3094, align 16
  store i256 %452, ptr %sp3105, align 16
  %sp3132 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %450
  %453 = add i256 %b3121, 36
  store i256 %453, ptr %sp3109, align 16
  %sp3146 = getelementptr i256, ptr %sp3105, i64 3
  store i256 32, ptr %sp3132, align 16
  store i256 %452, ptr %sp3146, align 16
  %454 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %452, i256 32, ptr %arg.ecx.addr)
  %.not23420 = icmp eq i8 %454, 0
  br i1 %.not23420, label %OP993.PUSH1, label %return, !prof !6

OP993.PUSH1:                                      ; preds = %OP982.PUSH1
  store i256 37, ptr %sp3132, align 16
  %dup23166 = load i256, ptr %sp3109, align 16
  store i256 %dup23166, ptr %sp3146, align 16
  %455 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup23166, i256 37, ptr %arg.ecx.addr)
  %.not23421 = icmp eq i8 %455, 0
  br i1 %.not23421, label %OP996.PUSH1, label %return, !prof !6

OP996.PUSH1:                                      ; preds = %OP993.PUSH1
  %b3179 = load i256, ptr %sp3109, align 16
  %456 = add i256 %b3179, 32
  store i256 %456, ptr %sp3109, align 16
  store i256 11055, ptr %sp3146, align 16
  %sp3188 = getelementptr i256, ptr %sp3105, i64 4
  store i256 37, ptr %sp3132, align 16
  store i256 %456, ptr %sp3188, align 16
  %457 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3132)
  %.not23422 = icmp eq i8 %457, 0
  br i1 %.not23422, label %OP1003.PUSH1, label %return, !prof !6

OP1003.PUSH1:                                     ; preds = %OP996.PUSH1
  store i256 64, ptr %sp3132, align 16
  %b3202 = load i256, ptr %sp3109, align 16
  %458 = add i256 %b3202, 64
  %swap.b3208 = load i256, ptr %sp3107, align 16
  store i256 %458, ptr %sp3107, align 16
  store i256 %swap.b3208, ptr %sp3109, align 16
  store i256 64, ptr %sp3105, align 16
  %mload.out.slot3216 = alloca i256, align 16
  %459 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot3216, ptr %arg.ecx.addr)
  %.not23423 = icmp eq i8 %459, 0
  br i1 %.not23423, label %OP1009.MLOAD.contd, label %return, !prof !6

OP1009.MLOAD.contd:                               ; preds = %OP1003.PUSH1
  %mload.out3217 = load i256, ptr %mload.out.slot3216, align 16
  %swap.b3227 = load i256, ptr %sp3107, align 16
  store i256 %swap.b3227, ptr %sp3109, align 16
  %460 = sub i256 %swap.b3227, %mload.out3217
  store i256 %460, ptr %sp3107, align 16
  store i256 %mload.out3217, ptr %sp3105, align 16
  %461 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3107, i8 16)
  %.not23424 = icmp eq i8 %461, 0
  %spec.select17757 = select i1 %.not23424, i8 16, i8 %461, !prof !6
  br label %return

OP1015.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP974.JUMPDEST
  %len.addr.57 = phi i64 [ %447, %OP974.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp3243 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.57
  %462 = add i64 %len.addr.57, 3
  %sp3249 = getelementptr i256, ptr %sp3243, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp3243, i8 0, i64 64, i1 false)
  store i256 1895, ptr %sp3249, align 16
  br label %OP1770.JUMPDEST

OP1021.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %463 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp3254 = getelementptr i256, ptr %463, i64 -2
  %swap.a3255 = load i256, ptr %sp3254, align 16
  %sp3256 = getelementptr i256, ptr %463, i64 -4
  store i256 %swap.a3255, ptr %sp3256, align 16
  %464 = add i64 %len.addr.197, -2
  %sp3260 = getelementptr i256, ptr %463, i64 -3
  %swap.a3261 = load i256, ptr %sp3260, align 16
  %sp3262 = getelementptr i256, ptr %463, i64 -5
  store i256 %swap.a3261, ptr %sp3262, align 16
  %sp3270 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %464
  %465 = and i256 %swap.a3261, 5192296858534827628530496329220095
  %sp3278 = getelementptr i256, ptr %463, i64 -10
  %dup8 = load i256, ptr %sp3278, align 16
  %466 = icmp ult i256 %dup8, %465
  %467 = zext i1 %466 to i256
  store i256 %467, ptr %sp3260, align 16
  %468 = xor i1 %466, true
  %469 = zext i1 %468 to i256
  store i256 %469, ptr %sp3270, align 16
  br i1 %466, label %OP1036.POP, label %OP1042.JUMPDEST

OP1036.POP:                                       ; preds = %OP1021.JUMPDEST
  %470 = and i256 %swap.a3255, 5192296858534827628530496329220095
  %sp3311 = getelementptr i256, ptr %463, i64 -9
  %dup7 = load i256, ptr %sp3311, align 16
  store i256 %dup7, ptr %sp3270, align 16
  %471 = icmp ult i256 %dup7, %470
  %472 = zext i1 %471 to i256
  store i256 %472, ptr %sp3260, align 16
  br label %OP1042.JUMPDEST, !annotation !7

OP1042.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1036.POP, %OP1021.JUMPDEST
  %len.addr.58 = phi i64 [ %464, %OP1021.JUMPDEST ], [ %464, %OP1036.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %473 = add i64 %len.addr.58, -1
  %sp3321 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %473
  %a3322 = load i256, ptr %sp3321, align 16
  %.not23733 = icmp eq i256 %a3322, 0
  br i1 %.not23733, label %OP1045.PUSH1, label %OP1083.JUMPDEST

OP1045.PUSH1:                                     ; preds = %OP1042.JUMPDEST
  store i256 64, ptr %sp3321, align 16
  %mload.out.slot3328 = alloca i256, align 16
  %474 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot3328, ptr %arg.ecx.addr)
  %.not23734 = icmp eq i8 %474, 0
  br i1 %.not23734, label %OP1046.MLOAD.contd, label %return, !prof !6

OP1046.MLOAD.contd:                               ; preds = %OP1045.PUSH1
  %mload.out3329 = load i256, ptr %mload.out.slot3328, align 16
  store i256 %mload.out3329, ptr %sp3321, align 16
  %475 = add i64 %len.addr.58, 1
  %sp3332 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.58
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp3332, align 16
  %476 = add i64 %len.addr.58, 2
  %sp3334 = getelementptr i256, ptr %sp3332, i64 -1
  %sp3336 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %475
  store i256 %mload.out3329, ptr %sp3336, align 16
  %477 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out3329, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23735 = icmp eq i8 %477, 0
  br i1 %.not23735, label %OP1050.PUSH1, label %return, !prof !6

OP1050.PUSH1:                                     ; preds = %OP1046.MLOAD.contd
  %b3348 = load i256, ptr %sp3321, align 16
  %478 = add i256 %b3348, 4
  store i256 %478, ptr %sp3321, align 16
  store i256 %478, ptr %sp3332, align 16
  %sp3359 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %476
  %479 = add i256 %b3348, 36
  store i256 %479, ptr %sp3336, align 16
  %sp3373 = getelementptr i256, ptr %sp3332, i64 3
  store i256 32, ptr %sp3359, align 16
  store i256 %478, ptr %sp3373, align 16
  %480 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %478, i256 32, ptr %arg.ecx.addr)
  %.not23736 = icmp eq i8 %480, 0
  br i1 %.not23736, label %OP1061.PUSH1, label %return, !prof !6

OP1061.PUSH1:                                     ; preds = %OP1050.PUSH1
  store i256 33, ptr %sp3359, align 16
  %dup23393 = load i256, ptr %sp3336, align 16
  store i256 %dup23393, ptr %sp3373, align 16
  %481 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup23393, i256 33, ptr %arg.ecx.addr)
  %.not23737 = icmp eq i8 %481, 0
  br i1 %.not23737, label %OP1064.PUSH1, label %return, !prof !6

OP1064.PUSH1:                                     ; preds = %OP1061.PUSH1
  %b3406 = load i256, ptr %sp3336, align 16
  %482 = add i256 %b3406, 32
  store i256 %482, ptr %sp3336, align 16
  store i256 11128, ptr %sp3373, align 16
  %sp3415 = getelementptr i256, ptr %sp3332, i64 4
  store i256 33, ptr %sp3359, align 16
  store i256 %482, ptr %sp3415, align 16
  %483 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3359)
  %.not23738 = icmp eq i8 %483, 0
  br i1 %.not23738, label %OP1071.PUSH1, label %return, !prof !6

OP1071.PUSH1:                                     ; preds = %OP1064.PUSH1
  store i256 64, ptr %sp3359, align 16
  %b3429 = load i256, ptr %sp3336, align 16
  %484 = add i256 %b3429, 64
  %swap.b3435 = load i256, ptr %sp3334, align 16
  store i256 %484, ptr %sp3334, align 16
  store i256 %swap.b3435, ptr %sp3336, align 16
  store i256 64, ptr %sp3332, align 16
  %mload.out.slot3443 = alloca i256, align 16
  %485 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot3443, ptr %arg.ecx.addr)
  %.not23739 = icmp eq i8 %485, 0
  br i1 %.not23739, label %OP1077.MLOAD.contd, label %return, !prof !6

OP1077.MLOAD.contd:                               ; preds = %OP1071.PUSH1
  %mload.out3444 = load i256, ptr %mload.out.slot3443, align 16
  %swap.b3454 = load i256, ptr %sp3334, align 16
  store i256 %swap.b3454, ptr %sp3336, align 16
  %486 = sub i256 %swap.b3454, %mload.out3444
  store i256 %486, ptr %sp3334, align 16
  store i256 %mload.out3444, ptr %sp3332, align 16
  %487 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3334, i8 16)
  %.not23740 = icmp eq i8 %487, 0
  %spec.select17758 = select i1 %.not23740, i8 16, i8 %487, !prof !6
  br label %return

OP1083.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1042.JUMPDEST
  %len.addr.59 = phi i64 [ %473, %OP1042.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %488 = add i64 %len.addr.59, 1
  %sp3470 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.59
  store i256 6, ptr %sp3470, align 16
  %489 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3470, i8 17)
  %.not23741 = icmp eq i8 %489, 0
  br i1 %.not23741, label %OP1086.PUSH1, label %return, !prof !6

OP1086.PUSH1:                                     ; preds = %OP1083.JUMPDEST
  %490 = add i64 %len.addr.59, 2
  %sp3474 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %488
  store i256 7, ptr %sp3474, align 16
  %491 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3474, i8 17)
  %.not23742 = icmp eq i8 %491, 0
  br i1 %.not23742, label %OP1088.PUSH1, label %return, !prof !6

OP1088.PUSH1:                                     ; preds = %OP1086.PUSH1
  %sp3478 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %490
  %swap.b3483 = load i256, ptr %sp3470, align 16
  store i256 0, ptr %sp3470, align 16
  %sp3487 = getelementptr i256, ptr %sp3470, i64 3
  %swap.b3492 = load i256, ptr %sp3474, align 16
  store i256 0, ptr %sp3474, align 16
  %492 = add i64 %len.addr.59, 5
  %sp3494 = getelementptr i256, ptr %sp3470, i64 4
  %sp3503 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %492
  %493 = and i256 %swap.b3483, 1461501637330902918203684832716283019655932542975
  store i256 %493, ptr %sp3478, align 16
  %494 = and i256 %swap.b3492, 1461501637330902918203684832716283019655932542975
  store i256 %494, ptr %sp3487, align 16
  %sp3536 = getelementptr i256, ptr %sp3470, i64 -5
  %dup10 = load i256, ptr %sp3536, align 16
  %495 = and i256 %dup10, 1461501637330902918203684832716283019655932542975
  %496 = icmp eq i256 %493, %495
  %497 = zext i1 %496 to i256
  %498 = xor i1 %496, true
  %499 = zext i1 %498 to i256
  store i256 %499, ptr %sp3494, align 16
  store i256 %497, ptr %sp3503, align 16
  br i1 %496, label %OP1119.JUMPDEST, label %OP1110.POP

OP1110.POP:                                       ; preds = %OP1088.PUSH1
  %sp3588 = getelementptr i256, ptr %sp3470, i64 6
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp3588, align 16
  store i256 %495, ptr %sp3503, align 16
  %500 = icmp ne i256 %495, %494
  %501 = zext i1 %500 to i256
  store i256 %501, ptr %sp3494, align 16
  br label %OP1119.JUMPDEST, !annotation !7

OP1119.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1110.POP, %OP1088.PUSH1
  %len.addr.60 = phi i64 [ %492, %OP1088.PUSH1 ], [ %492, %OP1110.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %502 = add i64 %len.addr.60, -1
  %sp3607 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %502
  %a3608 = load i256, ptr %sp3607, align 16
  %.not23743 = icmp eq i256 %a3608, 0
  br i1 %.not23743, label %OP1122.PUSH1, label %OP1153.JUMPDEST

OP1122.PUSH1:                                     ; preds = %OP1119.JUMPDEST
  store i256 64, ptr %sp3607, align 16
  %503 = add i64 %len.addr.60, 1
  %504 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.60
  %sp3612 = getelementptr i256, ptr %504, i64 -1
  store i256 64, ptr %504, align 16
  %mload.out.slot3618 = alloca i256, align 16
  %505 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot3618, ptr %arg.ecx.addr)
  %.not23744 = icmp eq i8 %505, 0
  br i1 %.not23744, label %OP1124.MLOAD.contd, label %return, !prof !6

OP1124.MLOAD.contd:                               ; preds = %OP1122.PUSH1
  %mload.out3619 = load i256, ptr %mload.out.slot3618, align 16
  store i256 %mload.out3619, ptr %504, align 16
  %sp3622 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %503
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp3622, align 16
  %sp3626 = getelementptr i256, ptr %504, i64 2
  store i256 %mload.out3619, ptr %sp3626, align 16
  %506 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out3619, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23745 = icmp eq i8 %506, 0
  br i1 %.not23745, label %OP1128.PUSH1, label %return, !prof !6

OP1128.PUSH1:                                     ; preds = %OP1124.MLOAD.contd
  store i256 32, ptr %sp3622, align 16
  %dup33638 = load i256, ptr %504, align 16
  %sp3639 = getelementptr i256, ptr %504, i64 3
  store i256 %dup33638, ptr %sp3639, align 16
  %507 = add i256 %dup33638, 4
  store i256 %507, ptr %sp3626, align 16
  %508 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %507, i256 32, ptr %arg.ecx.addr)
  %.not23746 = icmp eq i8 %508, 0
  br i1 %.not23746, label %OP1133.PUSH1, label %return, !prof !6

OP1133.PUSH1:                                     ; preds = %OP1128.PUSH1
  store i256 21, ptr %sp3622, align 16
  %dup33657 = load i256, ptr %504, align 16
  store i256 %dup33657, ptr %sp3639, align 16
  %509 = add i256 %dup33657, 36
  store i256 %509, ptr %sp3626, align 16
  %510 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %509, i256 21, ptr %arg.ecx.addr)
  %.not23747 = icmp eq i8 %510, 0
  br i1 %.not23747, label %OP1138.PUSH32, label %return, !prof !6

OP1138.PUSH32:                                    ; preds = %OP1133.PUSH1
  store i256 38641673103035791731704587899846419028922750264572343772476379098734296825856, ptr %sp3622, align 16
  %dup33676 = load i256, ptr %504, align 16
  store i256 %dup33676, ptr %sp3639, align 16
  %511 = add i256 %dup33676, 68
  store i256 %511, ptr %sp3626, align 16
  %512 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %511, i256 38641673103035791731704587899846419028922750264572343772476379098734296825856, ptr %arg.ecx.addr)
  %.not23748 = icmp eq i8 %512, 0
  br i1 %.not23748, label %OP1143.SWAP1, label %return, !prof !6

OP1143.SWAP1:                                     ; preds = %OP1138.PUSH32
  %swap.a3691 = load i256, ptr %504, align 16
  %swap.b3693 = load i256, ptr %sp3612, align 16
  store i256 %swap.a3691, ptr %sp3612, align 16
  store i256 %swap.b3693, ptr %504, align 16
  %mload.out.slot3697 = alloca i256, align 16
  %513 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b3693, ptr %mload.out.slot3697, ptr %arg.ecx.addr)
  %.not23749 = icmp eq i8 %513, 0
  br i1 %.not23749, label %OP1144.MLOAD.contd, label %return, !prof !6

OP1144.MLOAD.contd:                               ; preds = %OP1143.SWAP1
  %mload.out3698 = load i256, ptr %mload.out.slot3697, align 16
  %swap.b3704 = load i256, ptr %sp3612, align 16
  %514 = sub i256 %swap.b3704, %mload.out3698
  store i256 100, ptr %sp3622, align 16
  %515 = add i256 %514, 100
  store i256 %515, ptr %sp3612, align 16
  store i256 %mload.out3698, ptr %504, align 16
  %516 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3612, i8 16)
  %.not23750 = icmp eq i8 %516, 0
  %spec.select17759 = select i1 %.not23750, i8 16, i8 %516, !prof !6
  br label %return

OP1153.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1119.JUMPDEST
  %len.addr.61 = phi i64 [ %502, %OP1119.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %517 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.61
  %sp3737 = getelementptr i256, ptr %517, i64 -11
  %dup11 = load i256, ptr %sp3737, align 16
  %518 = icmp eq i256 %dup11, 0
  %519 = zext i1 %518 to i256
  store i256 %519, ptr %517, align 16
  br i1 %518, label %OP1164.JUMPDEST, label %OP1158.PUSH2

OP1158.PUSH2:                                     ; preds = %OP1153.JUMPDEST
  store i256 2256, ptr %517, align 16
  %sp3749 = getelementptr i256, ptr %517, i64 -2
  %dup33750 = load i256, ptr %sp3749, align 16
  %sp3751 = getelementptr i256, ptr %517, i64 1
  store i256 %dup33750, ptr %sp3751, align 16
  %sp3753 = getelementptr i256, ptr %517, i64 -9
  %dup113754 = load i256, ptr %sp3753, align 16
  %sp3755 = getelementptr i256, ptr %517, i64 2
  store i256 %dup113754, ptr %sp3755, align 16
  br label %OP3974.JUMPDEST.sink.split

OP1164.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1153.JUMPDEST
  %len.addr.62 = phi i64 [ %len.addr.61, %OP1153.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %520 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.62
  %sp3762 = getelementptr i256, ptr %520, i64 -10
  %dup103763 = load i256, ptr %sp3762, align 16
  %521 = icmp eq i256 %dup103763, 0
  %522 = zext i1 %521 to i256
  store i256 %522, ptr %520, align 16
  br i1 %521, label %OP1175.JUMPDEST, label %OP1169.PUSH2

OP1169.PUSH2:                                     ; preds = %OP1164.JUMPDEST
  store i256 2273, ptr %520, align 16
  %sp3775 = getelementptr i256, ptr %520, i64 -1
  %dup23776 = load i256, ptr %sp3775, align 16
  %sp3777 = getelementptr i256, ptr %520, i64 1
  store i256 %dup23776, ptr %sp3777, align 16
  %sp3779 = getelementptr i256, ptr %520, i64 -9
  %dup113780 = load i256, ptr %sp3779, align 16
  %sp3781 = getelementptr i256, ptr %520, i64 2
  store i256 %dup113780, ptr %sp3781, align 16
  br label %OP3974.JUMPDEST.sink.split

OP1175.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1164.JUMPDEST
  %len.addr.63 = phi i64 [ %len.addr.62, %OP1164.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %523 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.63
  %sp3788 = getelementptr i256, ptr %523, i64 -7
  %dup73789 = load i256, ptr %sp3788, align 16
  %524 = icmp eq i256 %dup73789, 0
  %525 = zext i1 %524 to i256
  store i256 %525, ptr %523, align 16
  br i1 %524, label %OP1310.JUMPDEST, label %OP1180.DUP9

OP1180.DUP9:                                      ; preds = %OP1175.JUMPDEST
  %sp3799 = getelementptr i256, ptr %523, i64 -9
  %dup9 = load i256, ptr %sp3799, align 16
  %sp3802 = getelementptr i256, ptr %523, i64 1
  %526 = and i256 %dup9, 1461501637330902918203684832716283019655932542975
  store i256 %526, ptr %523, align 16
  store i256 282191964, ptr %sp3802, align 16
  %contract.caller = load i160, ptr %contract.caller.addr10133, align 16
  %527 = tail call i160 @llvm.bswap.i160(i160 %contract.caller)
  %528 = zext i160 %527 to i256
  %sp3812 = getelementptr i256, ptr %523, i64 2
  store i256 %528, ptr %sp3812, align 16
  %sp3814 = getelementptr i256, ptr %523, i64 -11
  %dup143815 = load i256, ptr %sp3814, align 16
  %sp3816 = getelementptr i256, ptr %523, i64 3
  store i256 %dup143815, ptr %sp3816, align 16
  %529 = add i64 %len.addr.63, 5
  %sp3818 = getelementptr i256, ptr %523, i64 -10
  %dup143819 = load i256, ptr %sp3818, align 16
  %sp3820 = getelementptr i256, ptr %523, i64 4
  store i256 %dup143819, ptr %sp3820, align 16
  %sp3822 = getelementptr i256, ptr %523, i64 -8
  %dup133823 = load i256, ptr %sp3822, align 16
  %sp3824 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %529
  store i256 %dup133823, ptr %sp3824, align 16
  %sp3828 = getelementptr i256, ptr %523, i64 6
  store i256 %dup73789, ptr %sp3828, align 16
  %530 = add i64 %len.addr.63, 8
  %sp3830 = getelementptr i256, ptr %523, i64 7
  store i256 64, ptr %sp3830, align 16
  %mload.out.slot3834 = alloca i256, align 16
  %531 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot3834, ptr %arg.ecx.addr)
  %.not23773 = icmp eq i8 %531, 0
  br i1 %.not23773, label %OP1190.MLOAD.contd, label %return, !prof !6

OP1190.MLOAD.contd:                               ; preds = %OP1180.DUP9
  %mload.out3835 = load i256, ptr %mload.out.slot3834, align 16
  store i256 %mload.out3835, ptr %sp3830, align 16
  %532 = add i64 %len.addr.63, 9
  %dup73839 = load i256, ptr %sp3802, align 16
  %sp3840 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %530
  %533 = add i64 %len.addr.63, 10
  %sp3842 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %532
  %534 = shl i256 %dup73839, 224
  store i256 %534, ptr %sp3840, align 16
  store i256 %mload.out3835, ptr %sp3842, align 16
  %535 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out3835, i256 %534, ptr %arg.ecx.addr)
  %.not23774 = icmp eq i8 %535, 0
  br i1 %.not23774, label %OP1198.PUSH1, label %return, !prof !6

OP1198.PUSH1:                                     ; preds = %OP1190.MLOAD.contd
  %b3872 = load i256, ptr %sp3830, align 16
  %536 = add i256 %b3872, 4
  store i256 %536, ptr %sp3830, align 16
  store i256 %536, ptr %sp3840, align 16
  %dup73880 = load i256, ptr %sp3812, align 16
  %sp3883 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %533
  %537 = and i256 %dup73880, 1461501637330902918203684832716283019655932542975
  store i256 %537, ptr %sp3842, align 16
  store i256 %536, ptr %sp3883, align 16
  %538 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %536, i256 %537, ptr %arg.ecx.addr)
  %.not23775 = icmp eq i8 %538, 0
  br i1 %.not23775, label %OP1208.PUSH1, label %return, !prof !6

OP1208.PUSH1:                                     ; preds = %OP1198.PUSH1
  %b3913 = load i256, ptr %sp3840, align 16
  %539 = add i256 %b3913, 32
  store i256 %539, ptr %sp3840, align 16
  %dup63917 = load i256, ptr %sp3816, align 16
  store i256 %dup63917, ptr %sp3842, align 16
  store i256 %539, ptr %sp3883, align 16
  %540 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %539, i256 %dup63917, ptr %arg.ecx.addr)
  %.not23776 = icmp eq i8 %540, 0
  br i1 %.not23776, label %OP1213.PUSH1, label %return, !prof !6

OP1213.PUSH1:                                     ; preds = %OP1208.PUSH1
  %b3934 = load i256, ptr %sp3840, align 16
  %541 = add i256 %b3934, 32
  store i256 %541, ptr %sp3840, align 16
  %dup53938 = load i256, ptr %sp3820, align 16
  store i256 %dup53938, ptr %sp3842, align 16
  store i256 %541, ptr %sp3883, align 16
  %542 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %541, i256 %dup53938, ptr %arg.ecx.addr)
  %.not23777 = icmp eq i8 %542, 0
  br i1 %.not23777, label %OP1218.PUSH1, label %return, !prof !6

OP1218.PUSH1:                                     ; preds = %OP1213.PUSH1
  %b3955 = load i256, ptr %sp3840, align 16
  %543 = add i256 %b3955, 32
  store i256 %543, ptr %sp3840, align 16
  %544 = add i256 %b3955, 64
  store i256 %544, ptr %sp3842, align 16
  %dup33971 = load i256, ptr %sp3830, align 16
  %545 = add i64 %len.addr.63, 12
  %sp3976 = getelementptr i256, ptr %523, i64 11
  %546 = sub i256 %544, %dup33971
  store i256 %546, ptr %sp3883, align 16
  store i256 %543, ptr %sp3976, align 16
  %547 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %543, i256 %546, ptr %arg.ecx.addr)
  %.not23778 = icmp eq i8 %547, 0
  br i1 %.not23778, label %OP1228.DUP5, label %return, !prof !6

OP1228.DUP5:                                      ; preds = %OP1218.PUSH1
  %sp3993 = getelementptr i256, ptr %523, i64 5
  %dup53994 = load i256, ptr %sp3993, align 16
  store i256 %dup53994, ptr %sp3883, align 16
  %dup53998 = load i256, ptr %sp3828, align 16
  store i256 %dup53998, ptr %sp3976, align 16
  %548 = add i64 %len.addr.63, 13
  %dup34002 = load i256, ptr %sp3842, align 16
  %sp4003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %545
  store i256 %dup34002, ptr %sp4003, align 16
  %sp4007 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %548
  store i256 %dup53998, ptr %sp4007, align 16
  %sp4011 = getelementptr i256, ptr %523, i64 14
  store i256 %dup34002, ptr %sp4011, align 16
  %549 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup34002, i256 %dup53998, ptr %arg.ecx.addr)
  %.not23779 = icmp eq i8 %549, 0
  br i1 %.not23779, label %OP1234.PUSH1, label %return, !prof !6

OP1234.PUSH1:                                     ; preds = %OP1228.DUP5
  %b4023 = load i256, ptr %sp4003, align 16
  %550 = add i256 %b4023, 32
  %sp4028 = getelementptr i256, ptr %523, i64 9
  store i256 %550, ptr %sp4028, align 16
  %dup14033 = load i256, ptr %sp3976, align 16
  store i256 %dup14033, ptr %sp4003, align 16
  %dup34037 = load i256, ptr %sp3883, align 16
  store i256 %dup34037, ptr %sp4007, align 16
  store i256 %550, ptr %sp4011, align 16
  %551 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4003)
  %.not23780 = icmp eq i8 %551, 0
  br i1 %.not23780, label %OP1242.PUSH1, label %return, !prof !6

OP1242.PUSH1:                                     ; preds = %OP1234.PUSH1
  store i256 0, ptr %sp4003, align 16
  %dup24049 = load i256, ptr %sp3976, align 16
  %dup54053 = load i256, ptr %sp4028, align 16
  store i256 %dup54053, ptr %sp4011, align 16
  %552 = add i256 %dup54053, %dup24049
  store i256 %552, ptr %sp4007, align 16
  %553 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %552, i256 0, ptr %arg.ecx.addr)
  %.not23781 = icmp eq i8 %553, 0
  br i1 %.not23781, label %OP1247.PUSH1, label %return, !prof !6

OP1247.PUSH1:                                     ; preds = %OP1242.PUSH1
  %dup34076 = load i256, ptr %sp3976, align 16
  store i256 %dup34076, ptr %sp4011, align 16
  %554 = add i256 %dup34076, 31
  %555 = and i256 %554, -32
  store i256 %555, ptr %sp3976, align 16
  %dup44102 = load i256, ptr %sp4028, align 16
  store i256 %dup44102, ptr %sp4007, align 16
  %556 = add i256 %dup44102, %555
  store i256 %dup44102, ptr %sp4003, align 16
  %swap.b4122 = load i256, ptr %sp3812, align 16
  store i256 %556, ptr %sp3812, align 16
  store i256 %swap.b4122, ptr %sp3842, align 16
  store i256 0, ptr %sp3816, align 16
  store i256 64, ptr %sp3820, align 16
  %mload.out.slot4137 = alloca i256, align 16
  %557 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot4137, ptr %arg.ecx.addr)
  %.not23782 = icmp eq i8 %557, 0
  br i1 %.not23782, label %OP1272.MLOAD.contd, label %return, !prof !6

OP1272.MLOAD.contd:                               ; preds = %OP1247.PUSH1
  %mload.out4138 = load i256, ptr %mload.out.slot4137, align 16
  store i256 %mload.out4138, ptr %sp3820, align 16
  %dup44146 = load i256, ptr %sp3812, align 16
  %558 = sub i256 %dup44146, %mload.out4138
  store i256 %558, ptr %sp3824, align 16
  store i256 %mload.out4138, ptr %sp3828, align 16
  store i256 0, ptr %sp3830, align 16
  %dup84162 = load i256, ptr %523, align 16
  store i256 %dup84162, ptr %sp3840, align 16
  store i256 %dup84162, ptr %sp3842, align 16
  %559 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3842, i8 17)
  %.not23783 = icmp eq i8 %559, 0
  br i1 %.not23783, label %OP1281.ISZERO, label %return, !prof !6

OP1281.ISZERO:                                    ; preds = %OP1272.MLOAD.contd
  %a4172 = load i256, ptr %sp3842, align 16
  %560 = icmp eq i256 %a4172, 0
  %561 = zext i1 %560 to i256
  store i256 %561, ptr %sp3842, align 16
  %562 = xor i1 %560, true
  %563 = zext i1 %562 to i256
  store i256 %563, ptr %sp3883, align 16
  br i1 %560, label %OP1286.PUSH1, label %OP1289.JUMPDEST

OP1286.PUSH1:                                     ; preds = %OP1281.ISZERO
  store i256 0, ptr %sp3883, align 16
  store i256 0, ptr %sp3976, align 16
  %564 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3883, i8 16)
  %.not23784 = icmp eq i8 %564, 0
  %spec.select17760 = select i1 %.not23784, i8 16, i8 %564, !prof !6
  br label %return

OP1289.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1281.ISZERO
  %len.addr.64 = phi i64 [ %533, %OP1281.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining = load i64, ptr %gas.remaining.addr, align 8
  %565 = zext i64 %gas.remaining to i256
  %566 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.64
  %sp4196 = getelementptr i256, ptr %566, i64 -1
  store i256 %565, ptr %sp4196, align 16
  %567 = add i64 %len.addr.64, -7
  %sp4198 = getelementptr i256, ptr %566, i64 -7
  %568 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp4198, i8 17, i8 0)
  %.not23785 = icmp eq i8 %568, 0
  br i1 %.not23785, label %suspend, label %return, !prof !6

OP1293.ISZERO:                                    ; preds = %resume
  %569 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp4200 = getelementptr i256, ptr %569, i64 -1
  %a4201 = load i256, ptr %sp4200, align 16
  %570 = icmp eq i256 %a4201, 0
  %571 = zext i1 %570 to i256
  store i256 %571, ptr %sp4200, align 16
  %572 = xor i1 %570, true
  %573 = zext i1 %572 to i256
  store i256 %573, ptr %569, align 16
  br i1 %570, label %OP1298.RETURNDATASIZE, label %OP1305.JUMPDEST

OP1298.RETURNDATASIZE:                            ; preds = %OP1293.ISZERO
  %ecx.return_data.len.addr = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len = load i64, ptr %ecx.return_data.len.addr, align 8
  %574 = zext i64 %ecx.return_data.len to i256
  store i256 %574, ptr %569, align 16
  %sp4217 = getelementptr i256, ptr %569, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp4217, i8 0, i64 64, i1 false)
  %575 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %569)
  %.not23399 = icmp eq i8 %575, 0
  br i1 %.not23399, label %OP1302.RETURNDATASIZE, label %return, !prof !6

OP1302.RETURNDATASIZE:                            ; preds = %OP1298.RETURNDATASIZE
  %ecx.return_data.len4226 = load i64, ptr %ecx.return_data.len.addr, align 8
  %576 = zext i64 %ecx.return_data.len4226 to i256
  store i256 %576, ptr %569, align 16
  store i256 0, ptr %sp4217, align 16
  %577 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %569, i8 16)
  %.not23400 = icmp eq i8 %577, 0
  %spec.select17761 = select i1 %.not23400, i8 16, i8 %577, !prof !6
  br label %return

OP1305.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1293.ISZERO
  %len.addr.65 = phi i64 [ %stack_len17730, %OP1293.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %578 = add i64 %len.addr.65, -4
  br label %OP1310.JUMPDEST, !annotation !7

OP1310.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1305.JUMPDEST, %OP1175.JUMPDEST
  %len.addr.66 = phi i64 [ %578, %OP1305.JUMPDEST ], [ %len.addr.63, %OP1175.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp4239 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.66
  store i256 64, ptr %sp4239, align 16
  %579 = add i64 %len.addr.66, 2
  %sp4243 = getelementptr i256, ptr %sp4239, i64 1
  store i256 64, ptr %sp4243, align 16
  %mload.out.slot4247 = alloca i256, align 16
  %580 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot4247, ptr %arg.ecx.addr)
  %.not23786 = icmp eq i8 %580, 0
  br i1 %.not23786, label %OP1313.MLOAD.contd, label %return, !prof !6

OP1313.MLOAD.contd:                               ; preds = %OP1310.JUMPDEST
  %mload.out4248 = load i256, ptr %mload.out.slot4247, align 16
  store i256 %mload.out4248, ptr %sp4243, align 16
  %sp4251 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %579
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp4251, align 16
  %sp4255 = getelementptr i256, ptr %sp4239, i64 3
  store i256 %mload.out4248, ptr %sp4255, align 16
  %581 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out4248, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23787 = icmp eq i8 %581, 0
  br i1 %.not23787, label %OP1317.ADDRESS, label %return, !prof !6

OP1317.ADDRESS:                                   ; preds = %OP1313.MLOAD.contd
  %contract.target_address.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address = load i160, ptr %contract.target_address.addr, align 16
  %582 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address)
  %583 = zext i160 %582 to i256
  store i256 %583, ptr %sp4251, align 16
  %dup34267 = load i256, ptr %sp4243, align 16
  %sp4268 = getelementptr i256, ptr %sp4239, i64 4
  store i256 %dup34267, ptr %sp4268, align 16
  %584 = add i256 %dup34267, 4
  store i256 %584, ptr %sp4255, align 16
  %585 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %584, i256 %583, ptr %arg.ecx.addr)
  %.not23788 = icmp eq i8 %585, 0
  br i1 %.not23788, label %OP1322.SWAP1, label %return, !prof !6

OP1322.SWAP1:                                     ; preds = %OP1317.ADDRESS
  %swap.a4282 = load i256, ptr %sp4243, align 16
  %swap.b4284 = load i256, ptr %sp4239, align 16
  store i256 %swap.a4282, ptr %sp4239, align 16
  store i256 %swap.b4284, ptr %sp4243, align 16
  %mload.out.slot4288 = alloca i256, align 16
  %586 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b4284, ptr %mload.out.slot4288, ptr %arg.ecx.addr)
  %.not23789 = icmp eq i8 %586, 0
  br i1 %.not23789, label %OP1323.MLOAD.contd, label %return, !prof !6

OP1323.MLOAD.contd:                               ; preds = %OP1322.SWAP1
  %mload.out4289 = load i256, ptr %mload.out.slot4288, align 16
  %sp4294 = getelementptr i256, ptr %sp4239, i64 -2
  %dup54295 = load i256, ptr %sp4294, align 16
  %587 = and i256 %dup54295, 1461501637330902918203684832716283019655932542975
  %swap.b4307 = load i256, ptr %sp4239, align 16
  store i256 %587, ptr %sp4239, align 16
  store i256 1889567281, ptr %sp4243, align 16
  %sp4320 = getelementptr i256, ptr %sp4239, i64 5
  %sp4322 = getelementptr i256, ptr %sp4239, i64 2
  %sp4324 = getelementptr i256, ptr %sp4239, i64 6
  %588 = add i256 %swap.b4307, 36
  store i256 %588, ptr %sp4322, align 16
  store i256 32, ptr %sp4255, align 16
  store i256 %mload.out4289, ptr %sp4268, align 16
  %sp4356 = getelementptr i256, ptr %sp4239, i64 7
  %589 = sub i256 %swap.b4307, %mload.out4289
  %590 = add i256 %589, 36
  store i256 %590, ptr %sp4320, align 16
  store i256 %mload.out4289, ptr %sp4324, align 16
  store i256 %587, ptr %sp4356, align 16
  %591 = add i64 %len.addr.66, 9
  %sp4385 = getelementptr i256, ptr %sp4239, i64 8
  store i256 %587, ptr %sp4385, align 16
  %592 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4385, i8 17)
  %.not23790 = icmp eq i8 %592, 0
  br i1 %.not23790, label %OP1347.ISZERO, label %return, !prof !6

OP1347.ISZERO:                                    ; preds = %OP1323.MLOAD.contd
  %a4390 = load i256, ptr %sp4385, align 16
  %593 = icmp eq i256 %a4390, 0
  %594 = zext i1 %593 to i256
  store i256 %594, ptr %sp4385, align 16
  %sp4395 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %591
  %595 = xor i1 %593, true
  %596 = zext i1 %595 to i256
  store i256 %596, ptr %sp4395, align 16
  br i1 %593, label %OP1352.PUSH1, label %OP1355.JUMPDEST

OP1352.PUSH1:                                     ; preds = %OP1347.ISZERO
  store i256 0, ptr %sp4395, align 16
  %sp4408 = getelementptr i256, ptr %sp4239, i64 10
  store i256 0, ptr %sp4408, align 16
  %597 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4395, i8 16)
  %.not23791 = icmp eq i8 %597, 0
  %spec.select17762 = select i1 %.not23791, i8 16, i8 %597, !prof !6
  br label %return

OP1355.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1347.ISZERO
  %len.addr.67 = phi i64 [ %591, %OP1347.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining4414 = load i64, ptr %gas.remaining.addr, align 8
  %598 = zext i64 %gas.remaining4414 to i256
  %599 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.67
  %sp4415 = getelementptr i256, ptr %599, i64 -1
  store i256 %598, ptr %sp4415, align 16
  %600 = add i64 %len.addr.67, -6
  %sp4417 = getelementptr i256, ptr %599, i64 -6
  %601 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp4417, i8 17, i8 3)
  %.not23792 = icmp eq i8 %601, 0
  br i1 %.not23792, label %suspend, label %return, !prof !6

OP1359.ISZERO:                                    ; preds = %resume
  %602 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp4419 = getelementptr i256, ptr %602, i64 -1
  %a4420 = load i256, ptr %sp4419, align 16
  %603 = icmp eq i256 %a4420, 0
  %604 = zext i1 %603 to i256
  store i256 %604, ptr %sp4419, align 16
  %605 = xor i1 %603, true
  %606 = zext i1 %605 to i256
  store i256 %606, ptr %602, align 16
  br i1 %603, label %OP1364.RETURNDATASIZE, label %OP1371.JUMPDEST

OP1364.RETURNDATASIZE:                            ; preds = %OP1359.ISZERO
  %ecx.return_data.len.addr4434 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len4435 = load i64, ptr %ecx.return_data.len.addr4434, align 8
  %607 = zext i64 %ecx.return_data.len4435 to i256
  store i256 %607, ptr %602, align 16
  %sp4438 = getelementptr i256, ptr %602, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp4438, i8 0, i64 64, i1 false)
  %608 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %602)
  %.not23397 = icmp eq i8 %608, 0
  br i1 %.not23397, label %OP1368.RETURNDATASIZE, label %return, !prof !6

OP1368.RETURNDATASIZE:                            ; preds = %OP1364.RETURNDATASIZE
  %ecx.return_data.len4447 = load i64, ptr %ecx.return_data.len.addr4434, align 8
  %609 = zext i64 %ecx.return_data.len4447 to i256
  store i256 %609, ptr %602, align 16
  store i256 0, ptr %sp4438, align 16
  %610 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %602, i8 16)
  %.not23398 = icmp eq i8 %610, 0
  %spec.select17763 = select i1 %.not23398, i8 16, i8 %610, !prof !6
  br label %return

OP1371.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1359.ISZERO
  %len.addr.68 = phi i64 [ %stack_len17730, %OP1359.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %611 = add i64 %len.addr.68, -3
  %612 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.68
  %sp4459 = getelementptr i256, ptr %612, i64 -4
  store i256 64, ptr %sp4459, align 16
  %mload.out.slot4463 = alloca i256, align 16
  %613 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot4463, ptr %arg.ecx.addr)
  %.not23723 = icmp eq i8 %613, 0
  br i1 %.not23723, label %OP1377.MLOAD.contd, label %return, !prof !6

OP1377.MLOAD.contd:                               ; preds = %OP1371.JUMPDEST
  %614 = add i64 %len.addr.68, -2
  %mload.out4464 = load i256, ptr %mload.out.slot4463, align 16
  store i256 %mload.out4464, ptr %sp4459, align 16
  %ecx.return_data.len.addr4467 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len4468 = load i64, ptr %ecx.return_data.len.addr4467, align 8
  %615 = zext i64 %ecx.return_data.len4468 to i256
  %sp4469 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %611
  store i256 %615, ptr %sp4469, align 16
  %sp4471 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %614
  %sp4475 = getelementptr i256, ptr %612, i64 -1
  store i256 %615, ptr %sp4475, align 16
  %616 = icmp ugt i64 %ecx.return_data.len4468, 31
  %617 = zext i1 %616 to i256
  store i256 %617, ptr %sp4471, align 16
  br i1 %616, label %OP1388.JUMPDEST, label %OP1385.PUSH1

OP1385.PUSH1:                                     ; preds = %OP1377.MLOAD.contd
  store i256 0, ptr %sp4471, align 16
  %sp4492 = getelementptr i256, ptr %612, i64 -2
  store i256 0, ptr %sp4475, align 16
  %618 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4492, i8 16)
  %.not23724 = icmp eq i8 %618, 0
  %spec.select17764 = select i1 %.not23724, i8 16, i8 %618, !prof !6
  br label %return

OP1388.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1377.MLOAD.contd
  %len.addr.69 = phi i64 [ %614, %OP1377.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %619 = add i64 %len.addr.69, -1
  %620 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.69
  %sp4500 = getelementptr i256, ptr %620, i64 -2
  %a4501 = load i256, ptr %sp4500, align 16
  %mload.out.slot4502 = alloca i256, align 16
  %621 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a4501, ptr %mload.out.slot4502, ptr %arg.ecx.addr)
  %.not23725 = icmp eq i8 %621, 0
  br i1 %.not23725, label %OP1390.MLOAD.contd, label %return, !prof !6

OP1390.MLOAD.contd:                               ; preds = %OP1388.JUMPDEST
  %mload.out4503 = load i256, ptr %mload.out.slot4502, align 16
  store i256 %mload.out4503, ptr %sp4500, align 16
  %sp4506 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %619
  store i256 64, ptr %sp4506, align 16
  %622 = add i64 %len.addr.69, 1
  %sp4508 = getelementptr i256, ptr %620, i64 -1
  store i256 64, ptr %620, align 16
  %mload.out.slot4514 = alloca i256, align 16
  %623 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot4514, ptr %arg.ecx.addr)
  %.not23726 = icmp eq i8 %623, 0
  br i1 %.not23726, label %OP1393.MLOAD.contd, label %return, !prof !6

OP1393.MLOAD.contd:                               ; preds = %OP1390.MLOAD.contd
  %mload.out4515 = load i256, ptr %mload.out.slot4514, align 16
  store i256 %mload.out4515, ptr %620, align 16
  %sp4518 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %622
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp4518, align 16
  %sp4522 = getelementptr i256, ptr %620, i64 2
  store i256 %mload.out4515, ptr %sp4522, align 16
  %624 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out4515, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23727 = icmp eq i8 %624, 0
  br i1 %.not23727, label %OP1397.ADDRESS, label %return, !prof !6

OP1397.ADDRESS:                                   ; preds = %OP1393.MLOAD.contd
  %contract.target_address.addr4529 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address4530 = load i160, ptr %contract.target_address.addr4529, align 16
  %625 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address4530)
  %626 = zext i160 %625 to i256
  store i256 %626, ptr %sp4518, align 16
  %dup34536 = load i256, ptr %620, align 16
  %sp4537 = getelementptr i256, ptr %620, i64 3
  store i256 %dup34536, ptr %sp4537, align 16
  %627 = add i256 %dup34536, 4
  store i256 %627, ptr %sp4522, align 16
  %628 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %627, i256 %626, ptr %arg.ecx.addr)
  %.not23728 = icmp eq i8 %628, 0
  br i1 %.not23728, label %OP1402.SWAP1, label %return, !prof !6

OP1402.SWAP1:                                     ; preds = %OP1397.ADDRESS
  %swap.a4551 = load i256, ptr %620, align 16
  %swap.b4553 = load i256, ptr %sp4508, align 16
  store i256 %swap.a4551, ptr %sp4508, align 16
  store i256 %swap.b4553, ptr %620, align 16
  %mload.out.slot4557 = alloca i256, align 16
  %629 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b4553, ptr %mload.out.slot4557, ptr %arg.ecx.addr)
  %.not23729 = icmp eq i8 %629, 0
  br i1 %.not23729, label %OP1403.MLOAD.contd, label %return, !prof !6

OP1403.MLOAD.contd:                               ; preds = %OP1402.SWAP1
  %mload.out4558 = load i256, ptr %mload.out.slot4557, align 16
  %swap.b4564 = load i256, ptr %sp4500, align 16
  %sp4568 = getelementptr i256, ptr %620, i64 -6
  store i256 %swap.b4564, ptr %sp4568, align 16
  %sp4574 = getelementptr i256, ptr %620, i64 -3
  %dup44575 = load i256, ptr %sp4574, align 16
  %630 = and i256 %dup44575, 1461501637330902918203684832716283019655932542975
  store i256 %630, ptr %sp4500, align 16
  %swap.b4594 = load i256, ptr %sp4508, align 16
  store i256 1889567281, ptr %sp4508, align 16
  %sp4604 = getelementptr i256, ptr %620, i64 4
  %631 = add i256 %swap.b4594, 36
  store i256 %631, ptr %620, align 16
  %sp4621 = getelementptr i256, ptr %620, i64 1
  store i256 32, ptr %sp4621, align 16
  store i256 %mload.out4558, ptr %sp4522, align 16
  %sp4641 = getelementptr i256, ptr %620, i64 5
  %632 = sub i256 %swap.b4594, %mload.out4558
  %633 = add i256 %632, 36
  store i256 %633, ptr %sp4537, align 16
  store i256 %mload.out4558, ptr %sp4604, align 16
  store i256 %630, ptr %sp4641, align 16
  %634 = add i64 %len.addr.69, 7
  %sp4670 = getelementptr i256, ptr %620, i64 6
  store i256 %630, ptr %sp4670, align 16
  %635 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4670, i8 17)
  %.not23730 = icmp eq i8 %635, 0
  br i1 %.not23730, label %OP1431.ISZERO, label %return, !prof !6

OP1431.ISZERO:                                    ; preds = %OP1403.MLOAD.contd
  %a4675 = load i256, ptr %sp4670, align 16
  %636 = icmp eq i256 %a4675, 0
  %637 = zext i1 %636 to i256
  store i256 %637, ptr %sp4670, align 16
  %sp4680 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %634
  %638 = xor i1 %636, true
  %639 = zext i1 %638 to i256
  store i256 %639, ptr %sp4680, align 16
  br i1 %636, label %OP1436.PUSH1, label %OP1439.JUMPDEST

OP1436.PUSH1:                                     ; preds = %OP1431.ISZERO
  store i256 0, ptr %sp4680, align 16
  %sp4693 = getelementptr i256, ptr %620, i64 8
  store i256 0, ptr %sp4693, align 16
  %640 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4680, i8 16)
  %.not23731 = icmp eq i8 %640, 0
  %spec.select17765 = select i1 %.not23731, i8 16, i8 %640, !prof !6
  br label %return

OP1439.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1431.ISZERO
  %len.addr.70 = phi i64 [ %634, %OP1431.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining4699 = load i64, ptr %gas.remaining.addr, align 8
  %641 = zext i64 %gas.remaining4699 to i256
  %642 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.70
  %sp4700 = getelementptr i256, ptr %642, i64 -1
  store i256 %641, ptr %sp4700, align 16
  %643 = add i64 %len.addr.70, -6
  %sp4702 = getelementptr i256, ptr %642, i64 -6
  %644 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp4702, i8 17, i8 3)
  %.not23732 = icmp eq i8 %644, 0
  br i1 %.not23732, label %suspend, label %return, !prof !6

OP1443.ISZERO:                                    ; preds = %resume
  %645 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp4704 = getelementptr i256, ptr %645, i64 -1
  %a4705 = load i256, ptr %sp4704, align 16
  %646 = icmp eq i256 %a4705, 0
  %647 = zext i1 %646 to i256
  store i256 %647, ptr %sp4704, align 16
  %648 = xor i1 %646, true
  %649 = zext i1 %648 to i256
  store i256 %649, ptr %645, align 16
  br i1 %646, label %OP1448.RETURNDATASIZE, label %OP1455.JUMPDEST

OP1448.RETURNDATASIZE:                            ; preds = %OP1443.ISZERO
  %ecx.return_data.len.addr4719 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len4720 = load i64, ptr %ecx.return_data.len.addr4719, align 8
  %650 = zext i64 %ecx.return_data.len4720 to i256
  store i256 %650, ptr %645, align 16
  %sp4723 = getelementptr i256, ptr %645, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp4723, i8 0, i64 64, i1 false)
  %651 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %645)
  %.not23395 = icmp eq i8 %651, 0
  br i1 %.not23395, label %OP1452.RETURNDATASIZE, label %return, !prof !6

OP1452.RETURNDATASIZE:                            ; preds = %OP1448.RETURNDATASIZE
  %ecx.return_data.len4732 = load i64, ptr %ecx.return_data.len.addr4719, align 8
  %652 = zext i64 %ecx.return_data.len4732 to i256
  store i256 %652, ptr %645, align 16
  store i256 0, ptr %sp4723, align 16
  %653 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %645, i8 16)
  %.not23396 = icmp eq i8 %653, 0
  %spec.select17766 = select i1 %.not23396, i8 16, i8 %653, !prof !6
  br label %return

OP1455.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1443.ISZERO
  %len.addr.71 = phi i64 [ %stack_len17730, %OP1443.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %654 = add i64 %len.addr.71, -3
  %655 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.71
  %sp4744 = getelementptr i256, ptr %655, i64 -4
  store i256 64, ptr %sp4744, align 16
  %mload.out.slot4748 = alloca i256, align 16
  %656 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot4748, ptr %arg.ecx.addr)
  %.not23710 = icmp eq i8 %656, 0
  br i1 %.not23710, label %OP1461.MLOAD.contd, label %return, !prof !6

OP1461.MLOAD.contd:                               ; preds = %OP1455.JUMPDEST
  %657 = add i64 %len.addr.71, -2
  %mload.out4749 = load i256, ptr %mload.out.slot4748, align 16
  store i256 %mload.out4749, ptr %sp4744, align 16
  %ecx.return_data.len.addr4752 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len4753 = load i64, ptr %ecx.return_data.len.addr4752, align 8
  %658 = zext i64 %ecx.return_data.len4753 to i256
  %sp4754 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %654
  store i256 %658, ptr %sp4754, align 16
  %sp4756 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %657
  %sp4760 = getelementptr i256, ptr %655, i64 -1
  store i256 %658, ptr %sp4760, align 16
  %659 = icmp ugt i64 %ecx.return_data.len4753, 31
  %660 = zext i1 %659 to i256
  store i256 %660, ptr %sp4756, align 16
  br i1 %659, label %OP1472.JUMPDEST, label %OP1469.PUSH1

OP1469.PUSH1:                                     ; preds = %OP1461.MLOAD.contd
  store i256 0, ptr %sp4756, align 16
  %sp4777 = getelementptr i256, ptr %655, i64 -2
  store i256 0, ptr %sp4760, align 16
  %661 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4777, i8 16)
  %.not23711 = icmp eq i8 %661, 0
  %spec.select17767 = select i1 %.not23711, i8 16, i8 %661, !prof !6
  br label %return

OP1472.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1461.MLOAD.contd
  %len.addr.72 = phi i64 [ %657, %OP1461.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %662 = add i64 %len.addr.72, -2
  %sp4785 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %662
  %a4786 = load i256, ptr %sp4785, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !16)
  %ecx.memory.addr.i24097 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24098 = load ptr, ptr %ecx.memory.addr.i24097, align 8, !alias.scope !16, !noalias !19
  %ecx.memory.len.addr.i24099 = getelementptr inbounds i8, ptr %ecx.memory.i24098, i64 16
  %ecx.memory.len.i24100 = load i64, ptr %ecx.memory.len.addr.i24099, align 8, !noalias !21
  %ecx.memory.last_checkpoint.addr.i24101 = getelementptr inbounds i8, ptr %ecx.memory.i24098, i64 48
  %ecx.memory.last_checkpoint.i24102 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24101, align 8, !noalias !21
  %663 = sub i64 %ecx.memory.len.i24100, %ecx.memory.last_checkpoint.i24102
  %664 = icmp ugt i256 %a4786, 18446744073709551615
  %665 = trunc i256 %a4786 to i64
  %666 = add i64 %665, 32
  %667 = icmp ugt i64 %665, -33
  %668 = or i1 %664, %667
  %669 = select i1 %668, i64 -1, i64 %666
  %670 = icmp ugt i64 %669, %663
  br i1 %670, label %resize.i24110, label %OP1474.MLOAD.contd, !prof !5

resize.i24110:                                    ; preds = %OP1472.JUMPDEST
  %671 = add i64 %len.addr.72, -1
  %672 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %669), !noalias !19
  %.not.i24111 = icmp eq i8 %672, 0
  br i1 %.not.i24111, label %OP1474.MLOAD.contd, label %return, !prof !6

OP1474.MLOAD.contd:                               ; preds = %OP1472.JUMPDEST, %resize.i24110
  %ecx.memory.buffer.ptr.shared.addr.i24104 = getelementptr inbounds i8, ptr %ecx.memory.i24098, i64 8
  %ecx.memory.buffer.ptr.shared.i24105 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24104, align 8, !noalias !21
  %ecx.memory.buffer.ptr.i24106 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24105, i64 %ecx.memory.last_checkpoint.i24102
  %slot.i24107 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24106, i64 %665
  %slot.value.i24108 = load i256, ptr %slot.i24107, align 1, !noalias !21
  %673 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24108)
  %674 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.72
  %sp4793 = getelementptr i256, ptr %674, i64 -5
  store i256 %673, ptr %sp4793, align 16
  %sp4801 = getelementptr i256, ptr %674, i64 -4
  store i256 0, ptr %sp4801, align 16
  %675 = add i64 %len.addr.72, -3
  %sp4808 = getelementptr i256, ptr %674, i64 -8
  %dup64809 = load i256, ptr %sp4808, align 16
  %sp4814 = getelementptr i256, ptr %674, i64 -3
  %676 = and i256 %dup64809, 5192296858534827628530496329220095
  %sp4818 = getelementptr i256, ptr %674, i64 -13
  %dup114819 = load i256, ptr %sp4818, align 16
  %677 = sub i256 %676, %dup114819
  %sp4833 = getelementptr i256, ptr %674, i64 -6
  %dup44834 = load i256, ptr %sp4833, align 16
  store i256 %dup44834, ptr %sp4785, align 16
  %678 = icmp ugt i256 %dup44834, %677
  %679 = zext i1 %678 to i256
  store i256 %679, ptr %sp4814, align 16
  br i1 %678, label %OP1494.JUMPDEST, label %OP1491.PUSH1

OP1491.PUSH1:                                     ; preds = %OP1474.MLOAD.contd
  %sp4806 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %675
  store i256 0, ptr %sp4806, align 16
  br label %OP1502.JUMPDEST

OP1494.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1474.MLOAD.contd
  %len.addr.73 = phi i64 [ %675, %OP1474.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %680 = add i64 %len.addr.73, 1
  %681 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.73
  %sp4850 = getelementptr i256, ptr %681, i64 -10
  %dup104851 = load i256, ptr %sp4850, align 16
  %sp4854 = getelementptr i256, ptr %681, i64 -5
  %dup64855 = load i256, ptr %sp4854, align 16
  %sp4856 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %680
  %sp4858 = getelementptr i256, ptr %681, i64 2
  store i256 5192296858534827628530496329220095, ptr %sp4858, align 16
  %682 = and i256 %dup64855, 5192296858534827628530496329220095
  %.neg = sub i256 %dup104851, %682
  %sp4872 = getelementptr i256, ptr %681, i64 -3
  %dup44873 = load i256, ptr %sp4872, align 16
  store i256 %dup44873, ptr %sp4856, align 16
  %683 = add i256 %.neg, %dup44873
  store i256 %683, ptr %681, align 16
  br label %OP1502.JUMPDEST, !annotation !7

OP1502.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1494.JUMPDEST, %OP1491.PUSH1
  %len.addr.74 = phi i64 [ %680, %OP1494.JUMPDEST ], [ %662, %OP1491.PUSH1 ], [ %len.addr.197, %dynamic_jump_table ]
  %684 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.74
  %sp4883 = getelementptr i256, ptr %684, i64 -1
  %swap.a4884 = load i256, ptr %sp4883, align 16
  %sp4885 = getelementptr i256, ptr %684, i64 -2
  store i256 %swap.a4884, ptr %sp4885, align 16
  store i256 0, ptr %sp4883, align 16
  %685 = add i64 %len.addr.74, 1
  %sp4891 = getelementptr i256, ptr %684, i64 -10
  %dup104892 = load i256, ptr %sp4891, align 16
  %sp4895 = getelementptr i256, ptr %684, i64 -5
  %dup64896 = load i256, ptr %sp4895, align 16
  %sp4897 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %685
  %sp4899 = getelementptr i256, ptr %684, i64 2
  store i256 5192296858534827628530496329220095, ptr %sp4899, align 16
  %686 = and i256 %dup64896, 5192296858534827628530496329220095
  %687 = sub i256 %686, %dup104892
  %sp4913 = getelementptr i256, ptr %684, i64 -3
  %dup44914 = load i256, ptr %sp4913, align 16
  store i256 %dup44914, ptr %sp4897, align 16
  %688 = icmp ugt i256 %dup44914, %687
  %689 = zext i1 %688 to i256
  store i256 %689, ptr %684, align 16
  br i1 %688, label %OP1518.JUMPDEST, label %OP1515.PUSH1

OP1515.PUSH1:                                     ; preds = %OP1502.JUMPDEST
  store i256 0, ptr %684, align 16
  br label %OP1526.JUMPDEST

OP1518.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert25785 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp4930.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25785, i64 -10
  %dup104931.pre = load i256, ptr %sp4930.phi.trans.insert, align 16
  %sp4934.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25785, i64 -5
  %dup64935.pre = load i256, ptr %sp4934.phi.trans.insert, align 16
  %sp4952.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert25785, i64 -3
  %dup44953.pre = load i256, ptr %sp4952.phi.trans.insert, align 16
  %.pre25845 = add i64 %len.addr.197, 1
  %.pre25847 = and i256 %dup64935.pre, 5192296858534827628530496329220095
  %.pre25849 = sub i256 %.pre25847, %dup104931.pre
  br label %OP1518.JUMPDEST

OP1518.JUMPDEST:                                  ; preds = %OP1518.JUMPDEST.loopexit, %OP1502.JUMPDEST
  %.pre-phi25850 = phi i256 [ %.pre25849, %OP1518.JUMPDEST.loopexit ], [ %687, %OP1502.JUMPDEST ]
  %.pre-phi25846 = phi i64 [ %.pre25845, %OP1518.JUMPDEST.loopexit ], [ %685, %OP1502.JUMPDEST ]
  %dup44953 = phi i256 [ %dup44953.pre, %OP1518.JUMPDEST.loopexit ], [ %dup44914, %OP1502.JUMPDEST ]
  %len.addr.75 = phi i64 [ %len.addr.197, %OP1518.JUMPDEST.loopexit ], [ %len.addr.74, %OP1502.JUMPDEST ]
  %690 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.75
  %sp4936 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi25846
  %sp4938 = getelementptr i256, ptr %690, i64 2
  store i256 5192296858534827628530496329220095, ptr %sp4938, align 16
  store i256 %dup44953, ptr %sp4936, align 16
  %691 = sub i256 %dup44953, %.pre-phi25850
  store i256 %691, ptr %690, align 16
  br label %OP1526.JUMPDEST, !annotation !7

OP1526.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1518.JUMPDEST, %OP1515.PUSH1
  %len.addr.76 = phi i64 [ %.pre-phi25846, %OP1518.JUMPDEST ], [ %685, %OP1515.PUSH1 ], [ %len.addr.197, %dynamic_jump_table ]
  %692 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.76
  %sp4963 = getelementptr i256, ptr %692, i64 -1
  %swap.a4964 = load i256, ptr %sp4963, align 16
  %sp4965 = getelementptr i256, ptr %692, i64 -2
  store i256 %swap.a4964, ptr %sp4965, align 16
  %sp4971 = getelementptr i256, ptr %692, i64 -3
  %dup34972 = load i256, ptr %sp4971, align 16
  %693 = icmp ne i256 %dup34972, 0
  %694 = zext i1 %693 to i256
  store i256 %694, ptr %sp4963, align 16
  store i256 %694, ptr %692, align 16
  br i1 %693, label %OP1539.JUMPDEST, label %OP1535.POP

OP1535.POP:                                       ; preds = %OP1526.JUMPDEST
  store i256 %swap.a4964, ptr %692, align 16
  %695 = icmp ne i256 %swap.a4964, 0
  %696 = zext i1 %695 to i256
  store i256 %696, ptr %sp4963, align 16
  br label %OP1539.JUMPDEST, !annotation !7

OP1539.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1535.POP, %OP1526.JUMPDEST
  %len.addr.77 = phi i64 [ %len.addr.76, %OP1526.JUMPDEST ], [ %len.addr.76, %OP1535.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %697 = add i64 %len.addr.77, -1
  %sp5002 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %697
  %a5003 = load i256, ptr %sp5002, align 16
  %.not23715 = icmp eq i256 %a5003, 0
  br i1 %.not23715, label %OP1542.PUSH1, label %OP1580.JUMPDEST

OP1542.PUSH1:                                     ; preds = %OP1539.JUMPDEST
  store i256 64, ptr %sp5002, align 16
  %mload.out.slot5009 = alloca i256, align 16
  %698 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot5009, ptr %arg.ecx.addr)
  %.not23716 = icmp eq i8 %698, 0
  br i1 %.not23716, label %OP1543.MLOAD.contd, label %return, !prof !6

OP1543.MLOAD.contd:                               ; preds = %OP1542.PUSH1
  %mload.out5010 = load i256, ptr %mload.out.slot5009, align 16
  store i256 %mload.out5010, ptr %sp5002, align 16
  %699 = add i64 %len.addr.77, 1
  %sp5013 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.77
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp5013, align 16
  %700 = add i64 %len.addr.77, 2
  %sp5015 = getelementptr i256, ptr %sp5013, i64 -1
  %sp5017 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %699
  store i256 %mload.out5010, ptr %sp5017, align 16
  %701 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out5010, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23717 = icmp eq i8 %701, 0
  br i1 %.not23717, label %OP1547.PUSH1, label %return, !prof !6

OP1547.PUSH1:                                     ; preds = %OP1543.MLOAD.contd
  %b5029 = load i256, ptr %sp5002, align 16
  %702 = add i256 %b5029, 4
  store i256 %702, ptr %sp5002, align 16
  store i256 %702, ptr %sp5013, align 16
  %sp5040 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %700
  %703 = add i256 %b5029, 36
  store i256 %703, ptr %sp5017, align 16
  %sp5054 = getelementptr i256, ptr %sp5013, i64 3
  store i256 32, ptr %sp5040, align 16
  store i256 %702, ptr %sp5054, align 16
  %704 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %702, i256 32, ptr %arg.ecx.addr)
  %.not23718 = icmp eq i8 %704, 0
  br i1 %.not23718, label %OP1558.PUSH1, label %return, !prof !6

OP1558.PUSH1:                                     ; preds = %OP1547.PUSH1
  store i256 36, ptr %sp5040, align 16
  %dup25074 = load i256, ptr %sp5017, align 16
  store i256 %dup25074, ptr %sp5054, align 16
  %705 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup25074, i256 36, ptr %arg.ecx.addr)
  %.not23719 = icmp eq i8 %705, 0
  br i1 %.not23719, label %OP1561.PUSH1, label %return, !prof !6

OP1561.PUSH1:                                     ; preds = %OP1558.PUSH1
  %b5087 = load i256, ptr %sp5017, align 16
  %706 = add i256 %b5087, 32
  store i256 %706, ptr %sp5017, align 16
  store i256 11092, ptr %sp5054, align 16
  %sp5096 = getelementptr i256, ptr %sp5013, i64 4
  store i256 36, ptr %sp5040, align 16
  store i256 %706, ptr %sp5096, align 16
  %707 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5040)
  %.not23720 = icmp eq i8 %707, 0
  br i1 %.not23720, label %OP1568.PUSH1, label %return, !prof !6

OP1568.PUSH1:                                     ; preds = %OP1561.PUSH1
  store i256 64, ptr %sp5040, align 16
  %b5110 = load i256, ptr %sp5017, align 16
  %708 = add i256 %b5110, 64
  %swap.b5116 = load i256, ptr %sp5015, align 16
  store i256 %708, ptr %sp5015, align 16
  store i256 %swap.b5116, ptr %sp5017, align 16
  store i256 64, ptr %sp5013, align 16
  %mload.out.slot5124 = alloca i256, align 16
  %709 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot5124, ptr %arg.ecx.addr)
  %.not23721 = icmp eq i8 %709, 0
  br i1 %.not23721, label %OP1574.MLOAD.contd, label %return, !prof !6

OP1574.MLOAD.contd:                               ; preds = %OP1568.PUSH1
  %mload.out5125 = load i256, ptr %mload.out.slot5124, align 16
  %swap.b5135 = load i256, ptr %sp5015, align 16
  store i256 %swap.b5135, ptr %sp5017, align 16
  %710 = sub i256 %swap.b5135, %mload.out5125
  store i256 %710, ptr %sp5015, align 16
  store i256 %mload.out5125, ptr %sp5013, align 16
  %711 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5015, i8 16)
  %.not23722 = icmp eq i8 %711, 0
  %spec.select17768 = select i1 %.not23722, i8 16, i8 %711, !prof !6
  br label %return

OP1580.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1539.JUMPDEST
  %len.addr.78 = phi i64 [ %697, %OP1539.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp5151 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.78
  store i256 0, ptr %sp5151, align 16
  %sp5153 = getelementptr i256, ptr %sp5151, i64 1
  store i256 3081, ptr %sp5153, align 16
  %sp5155 = getelementptr i256, ptr %sp5151, i64 2
  store i256 3051, ptr %sp5155, align 16
  %sp5157 = getelementptr i256, ptr %sp5151, i64 -2
  %dup55158 = load i256, ptr %sp5157, align 16
  %sp5159 = getelementptr i256, ptr %sp5151, i64 3
  store i256 %dup55158, ptr %sp5159, align 16
  %712 = add i64 %len.addr.78, 5
  %sp5161 = getelementptr i256, ptr %sp5151, i64 4
  store i256 3, ptr %sp5161, align 16
  %sp5163 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %712
  %sp5165 = getelementptr i256, ptr %sp5151, i64 6
  store i256 8680, ptr %sp5165, align 16
  store i256 8680, ptr %sp5163, align 16
  br label %dynamic_jump_table.preheader

OP1590.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp5177 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 3069, ptr %sp5177, align 16
  %sp5179 = getelementptr i256, ptr %sp5177, i64 -7
  %dup85180 = load i256, ptr %sp5179, align 16
  %sp5181 = getelementptr i256, ptr %sp5177, i64 1
  store i256 %dup85180, ptr %sp5181, align 16
  %713 = add i64 %len.addr.197, 3
  %sp5183 = getelementptr i256, ptr %sp5177, i64 2
  store i256 1000, ptr %sp5183, align 16
  %sp5185 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %713
  %sp5187 = getelementptr i256, ptr %sp5177, i64 4
  store i256 8680, ptr %sp5187, align 16
  store i256 8680, ptr %sp5185, align 16
  br label %dynamic_jump_table.backedge

dynamic_jump_table.backedge:                      ; preds = %OP1590.JUMPDEST, %OP1598.JUMPDEST, %OP1604.JUMPDEST, %OP1616.JUMPDEST, %OP1633.JUMPDEST, %OP1639.JUMPDEST, %OP1740.POP, %OP1803.JUMPDEST, %OP1916.JUMPDEST, %OP2260.JUMPDEST, %OP2291.PUSH2, %OP2315.JUMPDEST, %OP2332.JUMPDEST, %OP2421.PUSH2, %OP2469.POP, %OP2771.SWAP1, %OP2787.JUMPDEST, %OP3061.PUSH2, %OP3125.POP, %OP3385.POP, %OP3711.JUMPDEST, %OP3973.JUMP, %OP4439.JUMPDEST, %OP4669.PUSH2, %OP4721.POP, %OP4858.PUSH1, %OP4870.SWAP1, %OP4875.JUMPDEST, %OP4888.JUMPDEST, %OP5000.JUMPDEST, %OP5008.PUSH2, %OP5032.PUSH2, %OP5081.POP, %OP5096.JUMPDEST, %OP5118.PUSH2, %OP5144.PUSH2, %OP5178.POP, %OP5200.JUMPDEST
  %len.addr.197.be = phi i64 [ %800, %OP1803.JUMPDEST ], [ %2507, %OP5200.JUMPDEST ], [ %2498, %OP5178.POP ], [ %2482, %OP5144.PUSH2 ], [ %2471, %OP5118.PUSH2 ], [ %2468, %OP5096.JUMPDEST ], [ %2460, %OP5081.POP ], [ %2438, %OP5032.PUSH2 ], [ %2437, %OP5008.PUSH2 ], [ %2434, %OP5000.JUMPDEST ], [ %len.addr.197, %OP4888.JUMPDEST ], [ %2394, %OP4875.JUMPDEST ], [ %2391, %OP4870.SWAP1 ], [ %2390, %OP4858.PUSH1 ], [ %2318, %OP4721.POP ], [ %2292, %OP4669.PUSH2 ], [ %len.addr.197, %OP4439.JUMPDEST ], [ %1880, %OP3973.JUMP ], [ %1725, %OP3711.JUMPDEST ], [ %1584, %OP3385.POP ], [ %1470, %OP3125.POP ], [ %1420, %OP3061.PUSH2 ], [ %1290, %OP2787.JUMPDEST ], [ %1286, %OP2771.SWAP1 ], [ %1149, %OP2469.POP ], [ %1100, %OP2421.PUSH2 ], [ %1070, %OP2332.JUMPDEST ], [ %1065, %OP2315.JUMPDEST ], [ %1061, %OP2291.PUSH2 ], [ %1056, %OP2260.JUMPDEST ], [ %892, %OP1916.JUMPDEST ], [ %758, %OP1740.POP ], [ %722, %OP1639.JUMPDEST ], [ %len.addr.197, %OP1633.JUMPDEST ], [ %718, %OP1616.JUMPDEST ], [ %716, %OP1604.JUMPDEST ], [ %len.addr.197, %OP1598.JUMPDEST ], [ %713, %OP1590.JUMPDEST ]
  %.be = phi i256 [ %swap.b5894, %OP1803.JUMPDEST ], [ %swap.b17556, %OP5200.JUMPDEST ], [ %a17484, %OP5178.POP ], [ 8814, %OP5144.PUSH2 ], [ 8814, %OP5118.PUSH2 ], [ %swap.b17197, %OP5096.JUMPDEST ], [ %a17161, %OP5081.POP ], [ 10940, %OP5032.PUSH2 ], [ 10940, %OP5008.PUSH2 ], [ %swap.b16865, %OP5000.JUMPDEST ], [ 10940, %OP4888.JUMPDEST ], [ 8680, %OP4875.JUMPDEST ], [ 8680, %OP4870.SWAP1 ], [ 8814, %OP4858.PUSH1 ], [ %a16081, %OP4721.POP ], [ 10940, %OP4669.PUSH2 ], [ 10875, %OP4439.JUMPDEST ], [ %a13277, %OP3973.JUMP ], [ %a12421, %OP3711.JUMPDEST ], [ %a11118, %OP3385.POP ], [ %swap.b10226, %OP3125.POP ], [ 8680, %OP3061.PUSH2 ], [ 8680, %OP2787.JUMPDEST ], [ 8680, %OP2771.SWAP1 ], [ %swap.b8078, %OP2469.POP ], [ 8680, %OP2421.PUSH2 ], [ 8680, %OP2332.JUMPDEST ], [ 8680, %OP2315.JUMPDEST ], [ 8680, %OP2291.PUSH2 ], [ 8814, %OP2260.JUMPDEST ], [ %swap.b6282, %OP1916.JUMPDEST ], [ %a5708, %OP1740.POP ], [ 8680, %OP1639.JUMPDEST ], [ 8680, %OP1633.JUMPDEST ], [ 8680, %OP1616.JUMPDEST ], [ 8680, %OP1604.JUMPDEST ], [ 8814, %OP1598.JUMPDEST ], [ 8680, %OP1590.JUMPDEST ]
  br label %dynamic_jump_table

OP1598.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %714 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp5199 = getelementptr i256, ptr %714, i64 -1
  %swap.a5200 = load i256, ptr %sp5199, align 16
  %sp5201 = getelementptr i256, ptr %714, i64 -2
  %swap.b5202 = load i256, ptr %sp5201, align 16
  store i256 %swap.a5200, ptr %sp5201, align 16
  store i256 %swap.b5202, ptr %sp5199, align 16
  %sp5206 = getelementptr i256, ptr %714, i64 1
  store i256 8814, ptr %sp5206, align 16
  store i256 8814, ptr %714, align 16
  br label %dynamic_jump_table.backedge

OP1604.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %715 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp5218 = getelementptr i256, ptr %715, i64 -1
  %swap.a5219 = load i256, ptr %sp5218, align 16
  %sp5220 = getelementptr i256, ptr %715, i64 -2
  store i256 %swap.a5219, ptr %sp5220, align 16
  store i256 0, ptr %sp5218, align 16
  store i256 3105, ptr %715, align 16
  %sp5228 = getelementptr i256, ptr %715, i64 1
  store i256 3051, ptr %sp5228, align 16
  %sp5230 = getelementptr i256, ptr %715, i64 -3
  %dup55231 = load i256, ptr %sp5230, align 16
  %sp5232 = getelementptr i256, ptr %715, i64 2
  store i256 %dup55231, ptr %sp5232, align 16
  %716 = add i64 %len.addr.197, 4
  %sp5234 = getelementptr i256, ptr %715, i64 3
  store i256 3, ptr %sp5234, align 16
  %sp5236 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %716
  %sp5238 = getelementptr i256, ptr %715, i64 5
  store i256 8680, ptr %sp5238, align 16
  store i256 8680, ptr %sp5236, align 16
  br label %dynamic_jump_table.backedge

OP1616.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %717 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp5250 = getelementptr i256, ptr %717, i64 -1
  %swap.a5251 = load i256, ptr %sp5250, align 16
  %sp5252 = getelementptr i256, ptr %717, i64 -2
  store i256 %swap.a5251, ptr %sp5252, align 16
  store i256 3161, ptr %sp5250, align 16
  store i256 1000000, ptr %717, align 16
  %sp5260 = getelementptr i256, ptr %717, i64 1
  store i256 3149, ptr %sp5260, align 16
  %sp5262 = getelementptr i256, ptr %717, i64 2
  %718 = add i64 %len.addr.197, 4
  %sp5264 = getelementptr i256, ptr %717, i64 -9
  %dup12 = load i256, ptr %sp5264, align 16
  %sp5265 = getelementptr i256, ptr %717, i64 3
  %sp5269 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %718
  %719 = and i256 %dup12, 5192296858534827628530496329220095
  store i256 %719, ptr %sp5262, align 16
  %sp5282 = getelementptr i256, ptr %717, i64 -8
  %dup125283 = load i256, ptr %sp5282, align 16
  %720 = and i256 %dup125283, 5192296858534827628530496329220095
  store i256 %720, ptr %sp5265, align 16
  %sp5294 = getelementptr i256, ptr %717, i64 5
  store i256 8680, ptr %sp5294, align 16
  store i256 8680, ptr %sp5269, align 16
  br label %dynamic_jump_table.backedge

OP1633.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %721 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp5306 = getelementptr i256, ptr %721, i64 -1
  %swap.a5307 = load i256, ptr %sp5306, align 16
  %sp5308 = getelementptr i256, ptr %721, i64 -2
  %swap.b5309 = load i256, ptr %sp5308, align 16
  store i256 %swap.a5307, ptr %sp5308, align 16
  store i256 %swap.b5309, ptr %sp5306, align 16
  %sp5313 = getelementptr i256, ptr %721, i64 1
  store i256 8680, ptr %sp5313, align 16
  store i256 8680, ptr %721, align 16
  br label %dynamic_jump_table.backedge

OP1639.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp5325 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 3177, ptr %sp5325, align 16
  %sp5327 = getelementptr i256, ptr %sp5325, i64 -3
  %dup45328 = load i256, ptr %sp5327, align 16
  %sp5329 = getelementptr i256, ptr %sp5325, i64 1
  store i256 %dup45328, ptr %sp5329, align 16
  %722 = add i64 %len.addr.197, 3
  %sp5331 = getelementptr i256, ptr %sp5325, i64 -2
  %dup45332 = load i256, ptr %sp5331, align 16
  %sp5333 = getelementptr i256, ptr %sp5325, i64 2
  store i256 %dup45332, ptr %sp5333, align 16
  %sp5335 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %722
  %sp5337 = getelementptr i256, ptr %sp5325, i64 4
  store i256 8680, ptr %sp5337, align 16
  store i256 8680, ptr %sp5335, align 16
  br label %dynamic_jump_table.backedge

OP1647.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %723 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp5349 = getelementptr i256, ptr %723, i64 -1
  %a5350 = load i256, ptr %sp5349, align 16
  %724 = add i64 %len.addr.197, -2
  %sp5351 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %724
  %b5352 = load i256, ptr %sp5351, align 16
  %725 = icmp uge i256 %a5350, %b5352
  %726 = zext i1 %725 to i256
  store i256 %726, ptr %sp5351, align 16
  br i1 %725, label %OP1683.JUMPDEST, label %OP1652.PUSH1

OP1652.PUSH1:                                     ; preds = %OP1647.JUMPDEST
  store i256 64, ptr %sp5351, align 16
  %sp5364 = getelementptr i256, ptr %723, i64 -2
  store i256 64, ptr %sp5349, align 16
  %mload.out.slot5370 = alloca i256, align 16
  %727 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot5370, ptr %arg.ecx.addr)
  %.not23687 = icmp eq i8 %727, 0
  br i1 %.not23687, label %OP1654.MLOAD.contd, label %return, !prof !6

OP1654.MLOAD.contd:                               ; preds = %OP1652.PUSH1
  %mload.out5371 = load i256, ptr %mload.out.slot5370, align 16
  store i256 %mload.out5371, ptr %sp5349, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %723, align 16
  %sp5378 = getelementptr i256, ptr %723, i64 1
  store i256 %mload.out5371, ptr %sp5378, align 16
  %728 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out5371, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23688 = icmp eq i8 %728, 0
  br i1 %.not23688, label %OP1658.PUSH1, label %return, !prof !6

OP1658.PUSH1:                                     ; preds = %OP1654.MLOAD.contd
  store i256 32, ptr %723, align 16
  %dup35390 = load i256, ptr %sp5349, align 16
  %sp5391 = getelementptr i256, ptr %723, i64 2
  store i256 %dup35390, ptr %sp5391, align 16
  %729 = add i256 %dup35390, 4
  store i256 %729, ptr %sp5378, align 16
  %730 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %729, i256 32, ptr %arg.ecx.addr)
  %.not23689 = icmp eq i8 %730, 0
  br i1 %.not23689, label %OP1663.PUSH1, label %return, !prof !6

OP1663.PUSH1:                                     ; preds = %OP1658.PUSH1
  store i256 12, ptr %723, align 16
  %dup35409 = load i256, ptr %sp5349, align 16
  store i256 %dup35409, ptr %sp5391, align 16
  %731 = add i256 %dup35409, 36
  store i256 %731, ptr %sp5378, align 16
  %732 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %731, i256 12, ptr %arg.ecx.addr)
  %.not23690 = icmp eq i8 %732, 0
  br i1 %.not23690, label %OP1668.PUSH32, label %return, !prof !6

OP1668.PUSH32:                                    ; preds = %OP1663.PUSH1
  store i256 38641673103035791731704587902322197471115788880704794349015818184541134127104, ptr %723, align 16
  %dup35428 = load i256, ptr %sp5349, align 16
  store i256 %dup35428, ptr %sp5391, align 16
  %733 = add i256 %dup35428, 68
  store i256 %733, ptr %sp5378, align 16
  %734 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %733, i256 38641673103035791731704587902322197471115788880704794349015818184541134127104, ptr %arg.ecx.addr)
  %.not23691 = icmp eq i8 %734, 0
  br i1 %.not23691, label %OP1673.SWAP1, label %return, !prof !6

OP1673.SWAP1:                                     ; preds = %OP1668.PUSH32
  %swap.a5443 = load i256, ptr %sp5349, align 16
  %swap.b5445 = load i256, ptr %sp5364, align 16
  store i256 %swap.a5443, ptr %sp5364, align 16
  store i256 %swap.b5445, ptr %sp5349, align 16
  %mload.out.slot5449 = alloca i256, align 16
  %735 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b5445, ptr %mload.out.slot5449, ptr %arg.ecx.addr)
  %.not23692 = icmp eq i8 %735, 0
  br i1 %.not23692, label %OP1674.MLOAD.contd, label %return, !prof !6

OP1674.MLOAD.contd:                               ; preds = %OP1673.SWAP1
  %mload.out5450 = load i256, ptr %mload.out.slot5449, align 16
  %swap.b5456 = load i256, ptr %sp5364, align 16
  %736 = sub i256 %swap.b5456, %mload.out5450
  store i256 100, ptr %723, align 16
  %737 = add i256 %736, 100
  store i256 %737, ptr %sp5364, align 16
  store i256 %mload.out5450, ptr %sp5349, align 16
  %738 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5364, i8 16)
  %.not23693 = icmp eq i8 %738, 0
  %spec.select17769 = select i1 %.not23693, i8 16, i8 %738, !prof !6
  br label %return

OP1683.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1647.JUMPDEST
  %len.addr.79 = phi i64 [ %724, %OP1647.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %739 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.79
  %sp5491 = getelementptr i256, ptr %739, i64 -2
  store i256 3300, ptr %sp5491, align 16
  %sp5493 = getelementptr i256, ptr %739, i64 -6
  %dup55494 = load i256, ptr %sp5493, align 16
  %sp5495 = getelementptr i256, ptr %739, i64 -1
  store i256 %dup55494, ptr %sp5495, align 16
  %sp5497 = getelementptr i256, ptr %739, i64 -5
  %dup55498 = load i256, ptr %sp5497, align 16
  store i256 %dup55498, ptr %739, align 16
  %sp5501 = getelementptr i256, ptr %739, i64 -8
  %dup95502 = load i256, ptr %sp5501, align 16
  %sp5503 = getelementptr i256, ptr %739, i64 1
  store i256 %dup95502, ptr %sp5503, align 16
  %740 = add i64 %len.addr.79, 3
  %sp5505 = getelementptr i256, ptr %739, i64 -7
  %dup95506 = load i256, ptr %sp5505, align 16
  %sp5507 = getelementptr i256, ptr %739, i64 2
  store i256 %dup95506, ptr %sp5507, align 16
  br label %OP4337.JUMPDEST

OP1693.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp5511 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp5511, align 16
  %741 = add i64 %len.addr.197, 2
  %sp5515 = getelementptr i256, ptr %sp5511, i64 1
  store i256 64, ptr %sp5515, align 16
  %mload.out.slot5519 = alloca i256, align 16
  %742 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot5519, ptr %arg.ecx.addr)
  %.not23679 = icmp eq i8 %742, 0
  br i1 %.not23679, label %OP1696.MLOAD.contd, label %return, !prof !6

OP1696.MLOAD.contd:                               ; preds = %OP1693.JUMPDEST
  %mload.out5520 = load i256, ptr %mload.out.slot5519, align 16
  store i256 %mload.out5520, ptr %sp5515, align 16
  %sp5523 = getelementptr i256, ptr %sp5511, i64 -2
  %dup45524 = load i256, ptr %sp5523, align 16
  %sp5525 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %741
  store i256 %dup45524, ptr %sp5525, align 16
  %sp5529 = getelementptr i256, ptr %sp5511, i64 3
  store i256 %mload.out5520, ptr %sp5529, align 16
  %743 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out5520, i256 %dup45524, ptr %arg.ecx.addr)
  %.not23680 = icmp eq i8 %743, 0
  br i1 %.not23680, label %OP1700.PUSH1, label %return, !prof !6

OP1700.PUSH1:                                     ; preds = %OP1696.MLOAD.contd
  %dup25539 = load i256, ptr %sp5515, align 16
  %744 = add i256 %dup25539, 32
  %sp5548 = getelementptr i256, ptr %sp5511, i64 -1
  %dup45549 = load i256, ptr %sp5548, align 16
  store i256 %dup45549, ptr %sp5525, align 16
  store i256 %744, ptr %sp5529, align 16
  %745 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %744, i256 %dup45549, ptr %arg.ecx.addr)
  %.not23681 = icmp eq i8 %745, 0
  br i1 %.not23681, label %OP1706.DUP1, label %return, !prof !6

OP1706.DUP1:                                      ; preds = %OP1700.PUSH1
  %dup15563 = load i256, ptr %sp5515, align 16
  %dup35567 = load i256, ptr %sp5511, align 16
  %746 = add i256 %dup35567, %dup15563
  %sp5576 = getelementptr i256, ptr %sp5511, i64 -11
  %dup145577 = load i256, ptr %sp5576, align 16
  store i256 %dup145577, ptr %sp5525, align 16
  store i256 %746, ptr %sp5529, align 16
  %747 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %746, i256 %dup145577, ptr %arg.ecx.addr)
  %.not23682 = icmp eq i8 %747, 0
  br i1 %.not23682, label %OP1712.PUSH1, label %return, !prof !6

OP1712.PUSH1:                                     ; preds = %OP1706.DUP1
  %dup25593 = load i256, ptr %sp5515, align 16
  %748 = add i256 %dup25593, 96
  %sp5602 = getelementptr i256, ptr %sp5511, i64 -10
  %dup135603 = load i256, ptr %sp5602, align 16
  store i256 %dup135603, ptr %sp5525, align 16
  store i256 %748, ptr %sp5529, align 16
  %749 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %748, i256 %dup135603, ptr %arg.ecx.addr)
  %.not23683 = icmp eq i8 %749, 0
  br i1 %.not23683, label %OP1718.SWAP1, label %return, !prof !6

OP1718.SWAP1:                                     ; preds = %OP1712.PUSH1
  %swap.a5617 = load i256, ptr %sp5515, align 16
  %swap.b5619 = load i256, ptr %sp5511, align 16
  store i256 %swap.a5617, ptr %sp5511, align 16
  store i256 %swap.b5619, ptr %sp5515, align 16
  %mload.out.slot5623 = alloca i256, align 16
  %750 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b5619, ptr %mload.out.slot5623, ptr %arg.ecx.addr)
  %.not23684 = icmp eq i8 %750, 0
  br i1 %.not23684, label %OP1719.MLOAD.contd, label %return, !prof !6

OP1719.MLOAD.contd:                               ; preds = %OP1718.SWAP1
  %mload.out5624 = load i256, ptr %mload.out.slot5623, align 16
  %sp5629 = getelementptr i256, ptr %sp5511, i64 -9
  %dup125630 = load i256, ptr %sp5629, align 16
  %751 = and i256 %dup125630, 1461501637330902918203684832716283019655932542975
  %swap.b5642 = load i256, ptr %sp5511, align 16
  store i256 %751, ptr %sp5511, align 16
  %contract.caller5645 = load i160, ptr %contract.caller.addr10133, align 16
  %752 = tail call i160 @llvm.bswap.i160(i160 %contract.caller5645)
  %753 = zext i160 %752 to i256
  store i256 %753, ptr %sp5515, align 16
  %sp5653 = getelementptr i256, ptr %sp5511, i64 4
  store i256 -18299501639506427162692339522070276207788293564232738464873968934379665631198, ptr %sp5525, align 16
  %sp5662 = getelementptr i256, ptr %sp5511, i64 5
  %754 = sub i256 %swap.b5642, %mload.out5624
  store i256 128, ptr %sp5662, align 16
  %755 = add i256 %754, 128
  store i256 %755, ptr %sp5529, align 16
  store i256 %mload.out5624, ptr %sp5653, align 16
  %756 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5511, i8 3)
  %.not23685 = icmp eq i8 %756, 0
  br i1 %.not23685, label %OP1735.POP, label %return, !prof !6

OP1735.POP:                                       ; preds = %OP1719.MLOAD.contd
  store i256 1, ptr %sp5523, align 16
  store i256 12, ptr %sp5548, align 16
  %757 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5523, i8 17)
  %.not23686 = icmp eq i8 %757, 0
  br i1 %.not23686, label %OP1740.POP, label %return.loopexit25073.split.loop.exit25299, !prof !6

OP1740.POP:                                       ; preds = %OP1735.POP
  %758 = add i64 %len.addr.197, -12
  %sp5707 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %758
  %a5708 = load i256, ptr %sp5707, align 16
  br label %dynamic_jump_table.backedge

OP1750.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP317.JUMPDEST
  %len.addr.80 = phi i64 [ %134, %OP317.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %759 = add i64 %len.addr.80, 1
  %sp5711 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.80
  store i256 64, ptr %sp5711, align 16
  %ecx.memory.addr.i24113 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24114 = load ptr, ptr %ecx.memory.addr.i24113, align 8
  %ecx.memory.len.addr.i24115 = getelementptr inbounds i8, ptr %ecx.memory.i24114, i64 16
  %ecx.memory.len.i24116 = load i64, ptr %ecx.memory.len.addr.i24115, align 8, !noalias !22
  %ecx.memory.last_checkpoint.addr.i24117 = getelementptr inbounds i8, ptr %ecx.memory.i24114, i64 48
  %ecx.memory.last_checkpoint.i24118 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24117, align 8, !noalias !22
  %760 = sub i64 %ecx.memory.len.i24116, %ecx.memory.last_checkpoint.i24118
  %761 = icmp ult i64 %760, 96
  br i1 %761, label %resize.i24126, label %OP1752.MLOAD.contd, !prof !5

resize.i24126:                                    ; preds = %OP1750.JUMPDEST
  %762 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !26
  %.not.i24127 = icmp eq i8 %762, 0
  br i1 %.not.i24127, label %resize.i24126.OP1752.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24126.OP1752.MLOAD.contd_crit_edge:       ; preds = %resize.i24126
  %ecx.memory.i24130.pre = load ptr, ptr %ecx.memory.addr.i24113, align 8, !alias.scope !27
  br label %OP1752.MLOAD.contd

OP1752.MLOAD.contd:                               ; preds = %resize.i24126.OP1752.MLOAD.contd_crit_edge, %OP1750.JUMPDEST
  %ecx.memory.i24130 = phi ptr [ %ecx.memory.i24130.pre, %resize.i24126.OP1752.MLOAD.contd_crit_edge ], [ %ecx.memory.i24114, %OP1750.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i24120 = getelementptr inbounds i8, ptr %ecx.memory.i24114, i64 8
  %ecx.memory.buffer.ptr.shared.i24121 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24120, align 8, !noalias !22
  %ecx.memory.buffer.ptr.i24122 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24121, i64 %ecx.memory.last_checkpoint.i24118
  %slot.i24123 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24122, i64 64
  %slot.value.i24124 = load i256, ptr %slot.i24123, align 1, !noalias !22
  %763 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24124)
  store i256 %763, ptr %sp5711, align 16
  %764 = add i64 %len.addr.80, 2
  %sp5721 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %759
  %sp5723 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %764
  %765 = add i256 %763, 64
  store i256 %765, ptr %sp5721, align 16
  store i256 64, ptr %sp5723, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !27)
  %ecx.memory.len.addr.i24131 = getelementptr inbounds i8, ptr %ecx.memory.i24130, i64 16
  %ecx.memory.len.i24132 = load i64, ptr %ecx.memory.len.addr.i24131, align 8, !noalias !27
  %ecx.memory.last_checkpoint.addr.i24133 = getelementptr inbounds i8, ptr %ecx.memory.i24130, i64 48
  %ecx.memory.last_checkpoint.i24134 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24133, align 8, !noalias !27
  %766 = sub i64 %ecx.memory.len.i24132, %ecx.memory.last_checkpoint.i24134
  %767 = icmp ult i64 %766, 96
  br i1 %767, label %resize.i24141, label %OP1758.DUP1, !prof !5

resize.i24141:                                    ; preds = %OP1752.MLOAD.contd
  %768 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i24142 = icmp eq i8 %768, 0
  br i1 %.not.i24142, label %OP1758.DUP1, label %return, !prof !6

OP1758.DUP1:                                      ; preds = %OP1752.MLOAD.contd, %resize.i24141
  %ecx.memory.buffer.ptr.shared.addr.i24136 = getelementptr inbounds i8, ptr %ecx.memory.i24130, i64 8
  %ecx.memory.buffer.ptr.shared.i24137 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24136, align 8, !noalias !27
  %ecx.memory.buffer.ptr.i24138 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24137, i64 %ecx.memory.last_checkpoint.i24134
  %slot.i24139 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24138, i64 64
  %769 = tail call i256 @llvm.bswap.i256(i256 %765)
  store i256 %769, ptr %slot.i24139, align 1, !noalias !27
  %dup15739 = load i256, ptr %sp5711, align 16
  store i256 %dup15739, ptr %sp5721, align 16
  store i256 10, ptr %sp5723, align 16
  %sp5746 = getelementptr i256, ptr %sp5711, i64 3
  store i256 %dup15739, ptr %sp5746, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !30)
  %ecx.memory.i24145 = load ptr, ptr %ecx.memory.addr.i24113, align 8, !alias.scope !30
  %ecx.memory.len.addr.i24146 = getelementptr inbounds i8, ptr %ecx.memory.i24145, i64 16
  %ecx.memory.len.i24147 = load i64, ptr %ecx.memory.len.addr.i24146, align 8, !noalias !30
  %ecx.memory.last_checkpoint.addr.i24148 = getelementptr inbounds i8, ptr %ecx.memory.i24145, i64 48
  %ecx.memory.last_checkpoint.i24149 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24148, align 8, !noalias !30
  %770 = sub i64 %ecx.memory.len.i24147, %ecx.memory.last_checkpoint.i24149
  %771 = icmp ugt i256 %dup15739, 18446744073709551615
  %772 = trunc i256 %dup15739 to i64
  %773 = add i64 %772, 32
  %774 = icmp ugt i64 %772, -33
  %775 = or i1 %771, %774
  %776 = select i1 %775, i64 -1, i64 %773
  %777 = icmp ugt i64 %776, %770
  br i1 %777, label %resize.i24156, label %OP1762.PUSH1, !prof !5

resize.i24156:                                    ; preds = %OP1758.DUP1
  %778 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %776)
  %.not.i24157 = icmp eq i8 %778, 0
  br i1 %.not.i24157, label %OP1762.PUSH1, label %return, !prof !6

OP1762.PUSH1:                                     ; preds = %OP1758.DUP1, %resize.i24156
  %ecx.memory.buffer.ptr.shared.addr.i24151 = getelementptr inbounds i8, ptr %ecx.memory.i24145, i64 8
  %ecx.memory.buffer.ptr.shared.i24152 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24151, align 8, !noalias !30
  %ecx.memory.buffer.ptr.i24153 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24152, i64 %ecx.memory.last_checkpoint.i24149
  %slot.i24154 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24153, i64 %772
  store i256 4523128485832663883733241601901871400518358776001584532791311875309106626560, ptr %slot.i24154, align 1, !noalias !30
  %b5758 = load i256, ptr %sp5721, align 16
  %779 = add i256 %b5758, 32
  store i256 %779, ptr %sp5721, align 16
  store i256 38641673103035791393623033292975719447393963951753298749149485052705600700416, ptr %sp5723, align 16
  store i256 %779, ptr %sp5746, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !33)
  %ecx.memory.i24160 = load ptr, ptr %ecx.memory.addr.i24113, align 8, !alias.scope !33
  %ecx.memory.len.addr.i24161 = getelementptr inbounds i8, ptr %ecx.memory.i24160, i64 16
  %ecx.memory.len.i24162 = load i64, ptr %ecx.memory.len.addr.i24161, align 8, !noalias !33
  %ecx.memory.last_checkpoint.addr.i24163 = getelementptr inbounds i8, ptr %ecx.memory.i24160, i64 48
  %ecx.memory.last_checkpoint.i24164 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24163, align 8, !noalias !33
  %780 = sub i64 %ecx.memory.len.i24162, %ecx.memory.last_checkpoint.i24164
  %781 = icmp ugt i256 %779, 18446744073709551615
  %782 = trunc i256 %779 to i64
  %783 = add i64 %782, 32
  %784 = icmp ugt i64 %782, -33
  %785 = or i1 %781, %784
  %786 = select i1 %785, i64 -1, i64 %783
  %787 = icmp ugt i64 %786, %780
  br i1 %787, label %resize.i24171, label %OP1767.POP, !prof !5

resize.i24171:                                    ; preds = %OP1762.PUSH1
  %788 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %786)
  %.not.i24172 = icmp eq i8 %788, 0
  br i1 %.not.i24172, label %OP1767.POP, label %return, !prof !6

OP1767.POP:                                       ; preds = %OP1762.PUSH1, %resize.i24171
  %ecx.memory.buffer.ptr.shared.addr.i24166 = getelementptr inbounds i8, ptr %ecx.memory.i24160, i64 8
  %ecx.memory.buffer.ptr.shared.i24167 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24166, align 8, !noalias !33
  %ecx.memory.buffer.ptr.i24168 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24167, i64 %ecx.memory.last_checkpoint.i24164
  %slot.i24169 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24168, i64 %782
  store i256 237707081609193552703061, ptr %slot.i24169, align 1, !noalias !33
  %sp5773 = getelementptr i256, ptr %sp5711, i64 -1
  %dup25774 = load i256, ptr %sp5773, align 16
  store i256 %dup25774, ptr %sp5721, align 16
  br label %dynamic_jump_table.preheader

OP1770.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2559.DUP1, %OP2062.DUP1, %OP1015.JUMPDEST, %OP421.JUMPDEST
  %len.addr.81 = phi i64 [ %462, %OP1015.JUMPDEST ], [ %1185, %OP2559.DUP1 ], [ %954, %OP2062.DUP1 ], [ %199, %OP421.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %789 = add i64 %len.addr.81, 1
  %sp5781 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.81
  store i256 8, ptr %sp5781, align 16
  %790 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5781, i8 17)
  %.not23425 = icmp eq i8 %790, 0
  br i1 %.not23425, label %OP1773.PUSH14, label %return, !prof !6

OP1773.PUSH14:                                    ; preds = %OP1770.JUMPDEST
  %791 = add i64 %len.addr.81, 2
  %sp5785 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %789
  %sp5789 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %791
  %dup35792 = load i256, ptr %sp5781, align 16
  %sp5793 = getelementptr i256, ptr %sp5781, i64 3
  %792 = and i256 %dup35792, 5192296858534827628530496329220095
  %sp5803 = getelementptr i256, ptr %sp5781, i64 -1
  %swap.b5804 = load i256, ptr %sp5803, align 16
  store i256 %792, ptr %sp5803, align 16
  %sp5810 = getelementptr i256, ptr %sp5781, i64 4
  store i256 %dup35792, ptr %sp5810, align 16
  %793 = lshr i256 %dup35792, 112
  %794 = and i256 %793, 5192296858534827628530496329220095
  store i256 %794, ptr %sp5781, align 16
  %795 = lshr i256 %dup35792, 224
  store i256 4294967295, ptr %sp5793, align 16
  store i256 %795, ptr %sp5785, align 16
  store i256 %swap.b5804, ptr %sp5789, align 16
  br label %dynamic_jump_table.preheader

OP1792.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %sp5869.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp5877.phi.trans.insert = getelementptr i256, ptr %sp5869.phi.trans.insert, i64 -2
  %dup55878.pre = load i256, ptr %sp5877.phi.trans.insert, align 16
  %sp5881.phi.trans.insert = getelementptr i256, ptr %sp5869.phi.trans.insert, i64 -1
  %dup55882.pre = load i256, ptr %sp5881.phi.trans.insert, align 16
  br label %OP1792.JUMPDEST

OP1792.JUMPDEST:                                  ; preds = %OP1792.JUMPDEST.loopexit, %OP474.JUMPDEST
  %dup55882 = phi i256 [ %227, %OP474.JUMPDEST ], [ %dup55882.pre, %OP1792.JUMPDEST.loopexit ]
  %dup55878 = phi i256 [ %225, %OP474.JUMPDEST ], [ %dup55878.pre, %OP1792.JUMPDEST.loopexit ]
  %len.addr.82 = phi i64 [ %len.addr.20, %OP474.JUMPDEST ], [ %len.addr.197, %OP1792.JUMPDEST.loopexit ]
  %sp5869 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.82
  store i256 0, ptr %sp5869, align 16
  %sp5871 = getelementptr i256, ptr %sp5869, i64 1
  store i256 3570, ptr %sp5871, align 16
  %contract.caller.addr5873 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller5874 = load i160, ptr %contract.caller.addr5873, align 16
  %796 = tail call i160 @llvm.bswap.i160(i160 %contract.caller5874)
  %797 = zext i160 %796 to i256
  %sp5875 = getelementptr i256, ptr %sp5869, i64 2
  store i256 %797, ptr %sp5875, align 16
  %sp5879 = getelementptr i256, ptr %sp5869, i64 3
  store i256 %dup55878, ptr %sp5879, align 16
  %798 = add i64 %len.addr.82, 5
  %sp5883 = getelementptr i256, ptr %sp5869, i64 4
  store i256 %dup55882, ptr %sp5883, align 16
  br label %OP4565.JUMPDEST

OP1800.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %gep25530 = getelementptr i256, ptr %invariant.gep25529, i64 %len.addr.197
  store i256 1, ptr %gep25530, align 16
  br label %OP1803.JUMPDEST, !annotation !7

OP1803.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5208.JUMPDEST, %OP4296.JUMPDEST, %OP4262.JUMPDEST, %OP1800.JUMPDEST
  %len.addr.83 = phi i64 [ %2508, %OP5208.JUMPDEST ], [ %2073, %OP4296.JUMPDEST ], [ %2058, %OP4262.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ], [ %len.addr.197, %OP1800.JUMPDEST ]
  %799 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.83
  %sp5891 = getelementptr i256, ptr %799, i64 -1
  %swap.a5892 = load i256, ptr %sp5891, align 16
  %sp5893 = getelementptr i256, ptr %799, i64 -4
  %swap.b5894 = load i256, ptr %sp5893, align 16
  store i256 %swap.a5892, ptr %sp5893, align 16
  %sp5898 = getelementptr i256, ptr %799, i64 -3
  %swap.b5899 = load i256, ptr %sp5898, align 16
  store i256 %swap.b5894, ptr %sp5898, align 16
  store i256 %swap.b5899, ptr %sp5891, align 16
  %800 = add i64 %len.addr.83, -3
  br label %dynamic_jump_table.backedge

OP1809.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP504.JUMPDEST
  %len.addr.84 = phi i64 [ %239, %OP504.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %801 = add i64 %len.addr.84, 1
  %sp5907 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.84
  store i256 6, ptr %sp5907, align 16
  %802 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5907, i8 17)
  %.not23895 = icmp eq i8 %802, 0
  br i1 %.not23895, label %OP1812.PUSH20, label %return, !prof !6

OP1812.PUSH20:                                    ; preds = %OP1809.JUMPDEST
  %sp5911 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %801
  %b5916 = load i256, ptr %sp5907, align 16
  %803 = and i256 %b5916, 1461501637330902918203684832716283019655932542975
  store i256 %803, ptr %sp5907, align 16
  %sp5919 = getelementptr i256, ptr %sp5907, i64 -1
  %dup25920 = load i256, ptr %sp5919, align 16
  store i256 %dup25920, ptr %sp5911, align 16
  br label %dynamic_jump_table.preheader

OP1816.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP527.JUMPDEST
  %len.addr.85 = phi i64 [ %250, %OP527.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %804 = add i64 %len.addr.85, 1
  %sp5927 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.85
  store i256 0, ptr %sp5927, align 16
  %805 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5927, i8 17)
  %.not23890 = icmp eq i8 %805, 0
  br i1 %.not23890, label %OP1819.DUP2, label %return, !prof !6

OP1819.DUP2:                                      ; preds = %OP1816.JUMPDEST
  %sp5931 = getelementptr i256, ptr %sp5927, i64 -1
  %dup25932 = load i256, ptr %sp5931, align 16
  %sp5933 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %804
  store i256 %dup25932, ptr %sp5933, align 16
  br label %dynamic_jump_table.preheader

OP1821.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP562.JUMPDEST
  %len.addr.86 = phi i64 [ %267, %OP562.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %806 = add i64 %len.addr.86, 1
  %sp5939 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.86
  %807 = add i64 %len.addr.86, 2
  %sp5941 = getelementptr i256, ptr %sp5939, i64 -3
  %dup45942 = load i256, ptr %sp5941, align 16
  %sp5943 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %806
  %808 = and i256 %dup45942, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp5939, align 16
  store i256 %808, ptr %sp5943, align 16
  %809 = add i64 %len.addr.86, 3
  %sp5960 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %807
  store i256 0, ptr %sp5960, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !36)
  %ecx.memory.addr.i24174 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24175 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !36
  %ecx.memory.len.addr.i24176 = getelementptr inbounds i8, ptr %ecx.memory.i24175, i64 16
  %ecx.memory.len.i24177 = load i64, ptr %ecx.memory.len.addr.i24176, align 8, !noalias !36
  %ecx.memory.last_checkpoint.addr.i24178 = getelementptr inbounds i8, ptr %ecx.memory.i24175, i64 48
  %ecx.memory.last_checkpoint.i24179 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24178, align 8, !noalias !36
  %810 = sub i64 %ecx.memory.len.i24177, %ecx.memory.last_checkpoint.i24179
  %811 = icmp ult i64 %810, 32
  br i1 %811, label %resize.i24185, label %OP1829.PUSH1, !prof !5

resize.i24185:                                    ; preds = %OP1821.JUMPDEST
  %812 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i24186 = icmp eq i8 %812, 0
  br i1 %.not.i24186, label %OP1829.PUSH1, label %return, !prof !6

OP1829.PUSH1:                                     ; preds = %OP1821.JUMPDEST, %resize.i24185
  %ecx.memory.buffer.ptr.shared.addr.i24181 = getelementptr inbounds i8, ptr %ecx.memory.i24175, i64 8
  %ecx.memory.buffer.ptr.shared.i24182 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24181, align 8, !noalias !36
  %ecx.memory.buffer.ptr.i24183 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24182, i64 %ecx.memory.last_checkpoint.i24179
  %813 = tail call i256 @llvm.bswap.i256(i256 %808)
  store i256 %813, ptr %ecx.memory.buffer.ptr.i24183, align 1, !noalias !36
  store i256 32, ptr %sp5943, align 16
  store i256 2, ptr %sp5960, align 16
  %814 = add i64 %len.addr.86, 4
  %sp5978 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %809
  store i256 32, ptr %sp5978, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !39)
  %ecx.memory.i24189 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !39
  %ecx.memory.len.addr.i24190 = getelementptr inbounds i8, ptr %ecx.memory.i24189, i64 16
  %ecx.memory.len.i24191 = load i64, ptr %ecx.memory.len.addr.i24190, align 8, !noalias !39
  %ecx.memory.last_checkpoint.addr.i24192 = getelementptr inbounds i8, ptr %ecx.memory.i24189, i64 48
  %ecx.memory.last_checkpoint.i24193 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24192, align 8, !noalias !39
  %815 = sub i64 %ecx.memory.len.i24191, %ecx.memory.last_checkpoint.i24193
  %816 = icmp ult i64 %815, 64
  br i1 %816, label %resize.i24200, label %OP1834.PUSH1, !prof !5

resize.i24200:                                    ; preds = %OP1829.PUSH1
  %817 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i24201 = icmp eq i8 %817, 0
  br i1 %.not.i24201, label %OP1834.PUSH1, label %return, !prof !6

OP1834.PUSH1:                                     ; preds = %OP1829.PUSH1, %resize.i24200
  %ecx.memory.buffer.ptr.shared.addr.i24195 = getelementptr inbounds i8, ptr %ecx.memory.i24189, i64 8
  %ecx.memory.buffer.ptr.shared.i24196 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24195, align 8, !noalias !39
  %ecx.memory.buffer.ptr.i24197 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24196, i64 %ecx.memory.last_checkpoint.i24193
  %slot.i24198 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24197, i64 32
  store i256 904625697166532776746648320380374280103671755200316906558262375061821325312, ptr %slot.i24198, align 1, !noalias !39
  store i256 64, ptr %sp5960, align 16
  store i256 64, ptr %sp5978, align 16
  %818 = add i64 %len.addr.86, 5
  %dup45992 = load i256, ptr %sp5939, align 16
  %sp5993 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %814
  store i256 %dup45992, ptr %sp5993, align 16
  %819 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5978)
  %.not23937 = icmp eq i8 %819, 0
  br i1 %.not23937, label %OP1838.CALLER, label %return, !prof !6

OP1838.CALLER:                                    ; preds = %OP1834.PUSH1
  %contract.caller.addr5997 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller5998 = load i160, ptr %contract.caller.addr5997, align 16
  %820 = tail call i160 @llvm.bswap.i160(i160 %contract.caller5998)
  %821 = zext i160 %820 to i256
  store i256 %821, ptr %sp5993, align 16
  %dup56002 = load i256, ptr %sp5939, align 16
  %sp6003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %818
  store i256 %dup56002, ptr %sp6003, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !42)
  %ecx.memory.i24204 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !42
  %ecx.memory.len.addr.i24205 = getelementptr inbounds i8, ptr %ecx.memory.i24204, i64 16
  %ecx.memory.len.i24206 = load i64, ptr %ecx.memory.len.addr.i24205, align 8, !noalias !42
  %ecx.memory.last_checkpoint.addr.i24207 = getelementptr inbounds i8, ptr %ecx.memory.i24204, i64 48
  %ecx.memory.last_checkpoint.i24208 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24207, align 8, !noalias !42
  %822 = sub i64 %ecx.memory.len.i24206, %ecx.memory.last_checkpoint.i24208
  %823 = icmp ugt i256 %dup56002, 18446744073709551615
  %824 = trunc i256 %dup56002 to i64
  %825 = add i64 %824, 32
  %826 = icmp ugt i64 %824, -33
  %827 = or i1 %823, %826
  %828 = select i1 %827, i64 -1, i64 %825
  %829 = icmp ugt i64 %828, %822
  br i1 %829, label %resize.i24215, label %OP1841.SWAP1, !prof !5

resize.i24215:                                    ; preds = %OP1838.CALLER
  %830 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %828)
  %.not.i24216 = icmp eq i8 %830, 0
  br i1 %.not.i24216, label %OP1841.SWAP1, label %return, !prof !6

OP1841.SWAP1:                                     ; preds = %OP1838.CALLER, %resize.i24215
  %ecx.memory.buffer.ptr.shared.addr.i24210 = getelementptr inbounds i8, ptr %ecx.memory.i24204, i64 8
  %ecx.memory.buffer.ptr.shared.i24211 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24210, align 8, !noalias !42
  %ecx.memory.buffer.ptr.i24212 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24211, i64 %ecx.memory.last_checkpoint.i24208
  %slot.i24213 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24212, i64 %824
  %831 = tail call i256 @llvm.bswap.i256(i256 %821)
  store i256 %831, ptr %slot.i24213, align 1, !noalias !42
  %swap.a6011 = load i256, ptr %sp5978, align 16
  %swap.b6013 = load i256, ptr %sp5960, align 16
  store i256 %swap.a6011, ptr %sp5960, align 16
  %swap.b6018 = load i256, ptr %sp5943, align 16
  store i256 %swap.b6013, ptr %sp5943, align 16
  store i256 %swap.b6018, ptr %sp5978, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !45)
  %ecx.memory.i24219 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !45
  %ecx.memory.len.addr.i24220 = getelementptr inbounds i8, ptr %ecx.memory.i24219, i64 16
  %ecx.memory.len.i24221 = load i64, ptr %ecx.memory.len.addr.i24220, align 8, !noalias !45
  %ecx.memory.last_checkpoint.addr.i24222 = getelementptr inbounds i8, ptr %ecx.memory.i24219, i64 48
  %ecx.memory.last_checkpoint.i24223 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24222, align 8, !noalias !45
  %832 = sub i64 %ecx.memory.len.i24221, %ecx.memory.last_checkpoint.i24223
  %833 = icmp ugt i256 %swap.b6018, 18446744073709551615
  %834 = trunc i256 %swap.b6018 to i64
  %835 = add i64 %834, 32
  %836 = icmp ugt i64 %834, -33
  %837 = or i1 %833, %836
  %838 = select i1 %837, i64 -1, i64 %835
  %839 = icmp ugt i64 %838, %832
  br i1 %839, label %resize.i24230, label %OP1844.DUP2, !prof !5

resize.i24230:                                    ; preds = %OP1841.SWAP1
  %840 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %838)
  %.not.i24231 = icmp eq i8 %840, 0
  br i1 %.not.i24231, label %OP1844.DUP2, label %return, !prof !6

OP1844.DUP2:                                      ; preds = %OP1841.SWAP1, %resize.i24230
  %ecx.memory.buffer.ptr.shared.addr.i24225 = getelementptr inbounds i8, ptr %ecx.memory.i24219, i64 8
  %ecx.memory.buffer.ptr.shared.i24226 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24225, align 8, !noalias !45
  %ecx.memory.buffer.ptr.i24227 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24226, i64 %ecx.memory.last_checkpoint.i24223
  %slot.i24228 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24227, i64 %834
  %841 = tail call i256 @llvm.bswap.i256(i256 %swap.a6011)
  store i256 %841, ptr %slot.i24228, align 1, !noalias !45
  %dup26026 = load i256, ptr %sp5939, align 16
  store i256 %dup26026, ptr %sp5960, align 16
  %842 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5943)
  %.not23940 = icmp eq i8 %842, 0
  br i1 %.not23940, label %OP1846.SLOAD, label %return, !prof !6

OP1846.SLOAD:                                     ; preds = %OP1844.DUP2
  %843 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5943, i8 17)
  %.not23941 = icmp eq i8 %843, 0
  br i1 %.not23941, label %OP1847.PUSH32, label %return, !prof !6

OP1847.PUSH32:                                    ; preds = %OP1846.SLOAD
  store i256 -1, ptr %sp5960, align 16
  %b6038 = load i256, ptr %sp5943, align 16
  %844 = icmp eq i256 %b6038, -1
  %845 = zext i1 %844 to i256
  store i256 %845, ptr %sp5943, align 16
  br i1 %844, label %OP1909.JUMPDEST, label %OP1851.PUSH20

OP1851.PUSH20:                                    ; preds = %OP1847.PUSH32
  %dup56047 = load i256, ptr %sp5941, align 16
  %846 = and i256 %dup56047, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp5943, align 16
  store i256 %846, ptr %sp5960, align 16
  store i256 0, ptr %sp5978, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !48)
  %ecx.memory.i24234 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !48
  %ecx.memory.len.addr.i24235 = getelementptr inbounds i8, ptr %ecx.memory.i24234, i64 16
  %ecx.memory.len.i24236 = load i64, ptr %ecx.memory.len.addr.i24235, align 8, !noalias !48
  %ecx.memory.last_checkpoint.addr.i24237 = getelementptr inbounds i8, ptr %ecx.memory.i24234, i64 48
  %ecx.memory.last_checkpoint.i24238 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24237, align 8, !noalias !48
  %847 = sub i64 %ecx.memory.len.i24236, %ecx.memory.last_checkpoint.i24238
  %848 = icmp ult i64 %847, 32
  br i1 %848, label %resize.i24244, label %OP1858.PUSH1, !prof !5

resize.i24244:                                    ; preds = %OP1851.PUSH20
  %849 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i24245 = icmp eq i8 %849, 0
  br i1 %.not.i24245, label %OP1858.PUSH1, label %return, !prof !6

OP1858.PUSH1:                                     ; preds = %OP1851.PUSH20, %resize.i24244
  %ecx.memory.buffer.ptr.shared.addr.i24240 = getelementptr inbounds i8, ptr %ecx.memory.i24234, i64 8
  %ecx.memory.buffer.ptr.shared.i24241 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24240, align 8, !noalias !48
  %ecx.memory.buffer.ptr.i24242 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24241, i64 %ecx.memory.last_checkpoint.i24238
  %850 = tail call i256 @llvm.bswap.i256(i256 %846)
  store i256 %850, ptr %ecx.memory.buffer.ptr.i24242, align 1, !noalias !48
  store i256 32, ptr %sp5960, align 16
  store i256 2, ptr %sp5978, align 16
  store i256 32, ptr %sp5993, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !51)
  %ecx.memory.i24248 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !51
  %ecx.memory.len.addr.i24249 = getelementptr inbounds i8, ptr %ecx.memory.i24248, i64 16
  %ecx.memory.len.i24250 = load i64, ptr %ecx.memory.len.addr.i24249, align 8, !noalias !51
  %ecx.memory.last_checkpoint.addr.i24251 = getelementptr inbounds i8, ptr %ecx.memory.i24248, i64 48
  %ecx.memory.last_checkpoint.i24252 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24251, align 8, !noalias !51
  %851 = sub i64 %ecx.memory.len.i24250, %ecx.memory.last_checkpoint.i24252
  %852 = icmp ult i64 %851, 64
  br i1 %852, label %resize.i24259, label %OP1863.PUSH1, !prof !5

resize.i24259:                                    ; preds = %OP1858.PUSH1
  %853 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i24260 = icmp eq i8 %853, 0
  br i1 %.not.i24260, label %OP1863.PUSH1, label %return, !prof !6

OP1863.PUSH1:                                     ; preds = %OP1858.PUSH1, %resize.i24259
  %ecx.memory.buffer.ptr.shared.addr.i24254 = getelementptr inbounds i8, ptr %ecx.memory.i24248, i64 8
  %ecx.memory.buffer.ptr.shared.i24255 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24254, align 8, !noalias !51
  %ecx.memory.buffer.ptr.i24256 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24255, i64 %ecx.memory.last_checkpoint.i24252
  %slot.i24257 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24256, i64 32
  store i256 904625697166532776746648320380374280103671755200316906558262375061821325312, ptr %slot.i24257, align 1, !noalias !51
  store i256 64, ptr %sp5978, align 16
  store i256 64, ptr %sp5993, align 16
  %sp6096 = getelementptr i256, ptr %sp5939, i64 1
  %dup46097 = load i256, ptr %sp6096, align 16
  store i256 %dup46097, ptr %sp6003, align 16
  %854 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5993)
  %.not23944 = icmp eq i8 %854, 0
  br i1 %.not23944, label %OP1867.CALLER, label %return, !prof !6

OP1867.CALLER:                                    ; preds = %OP1863.PUSH1
  store i256 %821, ptr %sp6003, align 16
  %dup56107 = load i256, ptr %sp6096, align 16
  %sp6108 = getelementptr i256, ptr %sp5939, i64 6
  store i256 %dup56107, ptr %sp6108, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !54)
  %ecx.memory.i24263 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !54
  %ecx.memory.len.addr.i24264 = getelementptr inbounds i8, ptr %ecx.memory.i24263, i64 16
  %ecx.memory.len.i24265 = load i64, ptr %ecx.memory.len.addr.i24264, align 8, !noalias !54
  %ecx.memory.last_checkpoint.addr.i24266 = getelementptr inbounds i8, ptr %ecx.memory.i24263, i64 48
  %ecx.memory.last_checkpoint.i24267 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24266, align 8, !noalias !54
  %855 = sub i64 %ecx.memory.len.i24265, %ecx.memory.last_checkpoint.i24267
  %856 = icmp ugt i256 %dup56107, 18446744073709551615
  %857 = trunc i256 %dup56107 to i64
  %858 = add i64 %857, 32
  %859 = icmp ugt i64 %857, -33
  %860 = or i1 %856, %859
  %861 = select i1 %860, i64 -1, i64 %858
  %862 = icmp ugt i64 %861, %855
  br i1 %862, label %resize.i24274, label %OP1870.SWAP1, !prof !5

resize.i24274:                                    ; preds = %OP1867.CALLER
  %863 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %861)
  %.not.i24275 = icmp eq i8 %863, 0
  br i1 %.not.i24275, label %OP1870.SWAP1, label %return, !prof !6

OP1870.SWAP1:                                     ; preds = %OP1867.CALLER, %resize.i24274
  %ecx.memory.buffer.ptr.shared.addr.i24269 = getelementptr inbounds i8, ptr %ecx.memory.i24263, i64 8
  %ecx.memory.buffer.ptr.shared.i24270 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24269, align 8, !noalias !54
  %ecx.memory.buffer.ptr.i24271 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24270, i64 %ecx.memory.last_checkpoint.i24267
  %slot.i24272 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24271, i64 %857
  store i256 %831, ptr %slot.i24272, align 1, !noalias !54
  %swap.a6116 = load i256, ptr %sp5993, align 16
  %swap.b6118 = load i256, ptr %sp5978, align 16
  store i256 %swap.a6116, ptr %sp5978, align 16
  %swap.b6123 = load i256, ptr %sp5960, align 16
  store i256 %swap.b6118, ptr %sp5960, align 16
  store i256 %swap.b6123, ptr %sp5993, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !57)
  %ecx.memory.i24278 = load ptr, ptr %ecx.memory.addr.i24174, align 8, !alias.scope !57
  %ecx.memory.len.addr.i24279 = getelementptr inbounds i8, ptr %ecx.memory.i24278, i64 16
  %ecx.memory.len.i24280 = load i64, ptr %ecx.memory.len.addr.i24279, align 8, !noalias !57
  %ecx.memory.last_checkpoint.addr.i24281 = getelementptr inbounds i8, ptr %ecx.memory.i24278, i64 48
  %ecx.memory.last_checkpoint.i24282 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24281, align 8, !noalias !57
  %864 = sub i64 %ecx.memory.len.i24280, %ecx.memory.last_checkpoint.i24282
  %865 = icmp ugt i256 %swap.b6123, 18446744073709551615
  %866 = trunc i256 %swap.b6123 to i64
  %867 = add i64 %866, 32
  %868 = icmp ugt i64 %866, -33
  %869 = or i1 %865, %868
  %870 = select i1 %869, i64 -1, i64 %867
  %871 = icmp ugt i64 %870, %864
  br i1 %871, label %resize.i24289, label %OP1873.SWAP1, !prof !5

resize.i24289:                                    ; preds = %OP1870.SWAP1
  %872 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %870)
  %.not.i24290 = icmp eq i8 %872, 0
  br i1 %.not.i24290, label %OP1873.SWAP1, label %return, !prof !6

OP1873.SWAP1:                                     ; preds = %OP1870.SWAP1, %resize.i24289
  %ecx.memory.buffer.ptr.shared.addr.i24284 = getelementptr inbounds i8, ptr %ecx.memory.i24278, i64 8
  %ecx.memory.buffer.ptr.shared.i24285 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24284, align 8, !noalias !57
  %ecx.memory.buffer.ptr.i24286 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24285, i64 %ecx.memory.last_checkpoint.i24282
  %slot.i24287 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24286, i64 %866
  %873 = tail call i256 @llvm.bswap.i256(i256 %swap.a6116)
  store i256 %873, ptr %slot.i24287, align 1, !noalias !57
  %swap.a6131 = load i256, ptr %sp5960, align 16
  %swap.b6133 = load i256, ptr %sp5943, align 16
  store i256 %swap.a6131, ptr %sp5943, align 16
  store i256 %swap.b6133, ptr %sp5960, align 16
  %874 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5943)
  %.not23947 = icmp eq i8 %874, 0
  br i1 %.not23947, label %OP1875.SLOAD, label %return, !prof !6

OP1875.SLOAD:                                     ; preds = %OP1873.SWAP1
  %875 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5943, i8 17)
  %.not23948 = icmp eq i8 %875, 0
  br i1 %.not23948, label %OP1876.PUSH2, label %return, !prof !6

OP1876.PUSH2:                                     ; preds = %OP1875.SLOAD
  %swap.b6144 = load i256, ptr %sp5943, align 16
  store i256 3766, ptr %sp5943, align 16
  store i256 %swap.b6144, ptr %sp5960, align 16
  %sp6146 = getelementptr i256, ptr %sp5939, i64 -1
  %dup46147 = load i256, ptr %sp6146, align 16
  store i256 %dup46147, ptr %sp5978, align 16
  store i256 8814, ptr %sp6003, align 16
  store i256 8814, ptr %sp5993, align 16
  br label %dynamic_jump_table.preheader

OP1883.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %876 = add i64 %len.addr.197, 1
  %sp6164 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %877 = add i64 %len.addr.197, 2
  %sp6166 = getelementptr i256, ptr %sp6164, i64 -5
  %dup66167 = load i256, ptr %sp6166, align 16
  %sp6168 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %876
  %878 = and i256 %dup66167, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp6164, align 16
  store i256 %878, ptr %sp6168, align 16
  %sp6185 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %877
  store i256 0, ptr %sp6185, align 16
  %879 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %878, ptr %arg.ecx.addr)
  %.not23672 = icmp eq i8 %879, 0
  br i1 %.not23672, label %OP1891.PUSH1, label %return, !prof !6

OP1891.PUSH1:                                     ; preds = %OP1883.JUMPDEST
  store i256 32, ptr %sp6168, align 16
  store i256 2, ptr %sp6185, align 16
  %880 = add i64 %len.addr.197, 4
  %sp6203 = getelementptr i256, ptr %sp6164, i64 3
  store i256 32, ptr %sp6203, align 16
  %881 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 2, ptr %arg.ecx.addr)
  %.not23673 = icmp eq i8 %881, 0
  br i1 %.not23673, label %OP1896.PUSH1, label %return, !prof !6

OP1896.PUSH1:                                     ; preds = %OP1891.PUSH1
  store i256 64, ptr %sp6185, align 16
  store i256 64, ptr %sp6203, align 16
  %dup46217 = load i256, ptr %sp6164, align 16
  %sp6218 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %880
  store i256 %dup46217, ptr %sp6218, align 16
  %882 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6203)
  %.not23674 = icmp eq i8 %882, 0
  br i1 %.not23674, label %OP1900.CALLER, label %return, !prof !6

OP1900.CALLER:                                    ; preds = %OP1896.PUSH1
  %contract.caller6223 = load i160, ptr %contract.caller.addr10133, align 16
  %883 = tail call i160 @llvm.bswap.i160(i160 %contract.caller6223)
  %884 = zext i160 %883 to i256
  store i256 %884, ptr %sp6218, align 16
  %dup56227 = load i256, ptr %sp6164, align 16
  %sp6228 = getelementptr i256, ptr %sp6164, i64 5
  store i256 %dup56227, ptr %sp6228, align 16
  %885 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup56227, i256 %884, ptr %arg.ecx.addr)
  %.not23675 = icmp eq i8 %885, 0
  br i1 %.not23675, label %OP1903.SWAP1, label %return, !prof !6

OP1903.SWAP1:                                     ; preds = %OP1900.CALLER
  %swap.a6236 = load i256, ptr %sp6203, align 16
  %swap.b6238 = load i256, ptr %sp6185, align 16
  store i256 %swap.a6236, ptr %sp6185, align 16
  %swap.b6243 = load i256, ptr %sp6168, align 16
  store i256 %swap.b6238, ptr %sp6168, align 16
  store i256 %swap.b6243, ptr %sp6203, align 16
  %886 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b6243, i256 %swap.a6236, ptr %arg.ecx.addr)
  %.not23676 = icmp eq i8 %886, 0
  br i1 %.not23676, label %OP1906.SWAP1, label %return, !prof !6

OP1906.SWAP1:                                     ; preds = %OP1903.SWAP1
  %swap.a6251 = load i256, ptr %sp6168, align 16
  %swap.b6253 = load i256, ptr %sp6164, align 16
  store i256 %swap.a6251, ptr %sp6164, align 16
  store i256 %swap.b6253, ptr %sp6168, align 16
  %887 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6164)
  %.not23677 = icmp eq i8 %887, 0
  br i1 %.not23677, label %OP1908.SSTORE, label %return, !prof !6

OP1908.SSTORE:                                    ; preds = %OP1906.SWAP1
  %888 = add i64 %len.addr.197, -1
  %sp6257 = getelementptr i256, ptr %sp6164, i64 -1
  %889 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr %sp6257, i8 17)
  %.not23678 = icmp eq i8 %889, 0
  br i1 %.not23678, label %OP1909.JUMPDEST, label %return, !prof !6

OP1909.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1908.SSTORE, %OP1847.PUSH32
  %len.addr.87 = phi i64 [ %888, %OP1908.SSTORE ], [ %806, %OP1847.PUSH32 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp6260 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.87
  store i256 3827, ptr %sp6260, align 16
  %sp6262 = getelementptr i256, ptr %sp6260, i64 -4
  %dup56263 = load i256, ptr %sp6262, align 16
  %sp6264 = getelementptr i256, ptr %sp6260, i64 1
  store i256 %dup56263, ptr %sp6264, align 16
  %sp6266 = getelementptr i256, ptr %sp6260, i64 -3
  %dup56267 = load i256, ptr %sp6266, align 16
  %sp6268 = getelementptr i256, ptr %sp6260, i64 2
  store i256 %dup56267, ptr %sp6268, align 16
  %890 = add i64 %len.addr.87, 4
  %sp6270 = getelementptr i256, ptr %sp6260, i64 -2
  %dup56271 = load i256, ptr %sp6270, align 16
  %sp6272 = getelementptr i256, ptr %sp6260, i64 3
  store i256 %dup56271, ptr %sp6272, align 16
  br label %OP4620.JUMPDEST

OP1916.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %891 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp6277 = getelementptr i256, ptr %891, i64 -1
  %sp6281 = getelementptr i256, ptr %891, i64 -5
  %swap.b6282 = load i256, ptr %sp6281, align 16
  store i256 1, ptr %sp6281, align 16
  %sp6286 = getelementptr i256, ptr %891, i64 -4
  %swap.b6287 = load i256, ptr %sp6286, align 16
  store i256 %swap.b6282, ptr %sp6286, align 16
  store i256 %swap.b6287, ptr %sp6277, align 16
  %892 = add i64 %len.addr.197, -4
  br label %dynamic_jump_table.backedge

OP1925.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP583.JUMPDEST
  %len.addr.88 = phi i64 [ %276, %OP583.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %893 = add i64 %len.addr.88, 1
  %sp6296 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.88
  store i256 49955707469362902507454157297736832118868343942642399513960811609542965143241, ptr %sp6296, align 16
  %sp6298 = getelementptr i256, ptr %sp6296, i64 -1
  %dup26299 = load i256, ptr %sp6298, align 16
  %sp6300 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %893
  store i256 %dup26299, ptr %sp6300, align 16
  br label %dynamic_jump_table.preheader

OP1929.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP587.JUMPDEST
  %len.addr.89 = phi i64 [ %277, %OP587.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %894 = add i64 %len.addr.89, 1
  %sp6306 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.89
  store i256 18, ptr %sp6306, align 16
  %sp6308 = getelementptr i256, ptr %sp6306, i64 -1
  %dup26309 = load i256, ptr %sp6308, align 16
  %sp6310 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %894
  store i256 %dup26309, ptr %sp6310, align 16
  br label %dynamic_jump_table.preheader

OP1933.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP610.JUMPDEST
  %len.addr.90 = phi i64 [ %288, %OP610.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %895 = add i64 %len.addr.90, 1
  %sp6316 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.90
  store i256 3, ptr %sp6316, align 16
  %896 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6316, i8 17)
  %.not23881 = icmp eq i8 %896, 0
  br i1 %.not23881, label %OP1936.DUP2, label %return, !prof !6

OP1936.DUP2:                                      ; preds = %OP1933.JUMPDEST
  %sp6320 = getelementptr i256, ptr %sp6316, i64 -1
  %dup26321 = load i256, ptr %sp6320, align 16
  %sp6322 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %895
  store i256 %dup26321, ptr %sp6322, align 16
  br label %dynamic_jump_table.preheader

OP1938.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP629.JUMPDEST
  %len.addr.91 = phi i64 [ %len.addr.29, %OP629.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %897 = add i64 %len.addr.91, 1
  %sp6328 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.91
  store i256 5, ptr %sp6328, align 16
  %898 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6328, i8 17)
  %.not23869 = icmp eq i8 %898, 0
  br i1 %.not23869, label %OP1941.PUSH20, label %return, !prof !6

OP1941.PUSH20:                                    ; preds = %OP1938.JUMPDEST
  %899 = add i64 %len.addr.91, 2
  %sp6332 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %897
  %b6337 = load i256, ptr %sp6328, align 16
  %contract.caller.addr6340 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller6341 = load i160, ptr %contract.caller.addr6340, align 16
  %900 = tail call i160 @llvm.bswap.i160(i160 %contract.caller6341)
  %901 = zext i160 %900 to i256
  store i256 %901, ptr %sp6332, align 16
  %902 = trunc i256 %b6337 to i160
  %903 = icmp eq i160 %900, %902
  %904 = zext i1 %903 to i256
  store i256 %904, ptr %sp6328, align 16
  br i1 %903, label %OP1978.JUMPDEST, label %OP1947.PUSH1

OP1947.PUSH1:                                     ; preds = %OP1941.PUSH20
  store i256 64, ptr %sp6328, align 16
  store i256 64, ptr %sp6332, align 16
  %mload.out.slot6361 = alloca i256, align 16
  %905 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot6361, ptr %arg.ecx.addr)
  %.not23870 = icmp eq i8 %905, 0
  br i1 %.not23870, label %OP1949.MLOAD.contd, label %return, !prof !6

OP1949.MLOAD.contd:                               ; preds = %OP1947.PUSH1
  %mload.out6362 = load i256, ptr %mload.out.slot6361, align 16
  store i256 %mload.out6362, ptr %sp6332, align 16
  %sp6365 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %899
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp6365, align 16
  %sp6369 = getelementptr i256, ptr %sp6328, i64 3
  store i256 %mload.out6362, ptr %sp6369, align 16
  %906 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out6362, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23871 = icmp eq i8 %906, 0
  br i1 %.not23871, label %OP1953.PUSH1, label %return, !prof !6

OP1953.PUSH1:                                     ; preds = %OP1949.MLOAD.contd
  store i256 32, ptr %sp6365, align 16
  %dup36381 = load i256, ptr %sp6332, align 16
  %sp6382 = getelementptr i256, ptr %sp6328, i64 4
  store i256 %dup36381, ptr %sp6382, align 16
  %907 = add i256 %dup36381, 4
  store i256 %907, ptr %sp6369, align 16
  %908 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %907, i256 32, ptr %arg.ecx.addr)
  %.not23872 = icmp eq i8 %908, 0
  br i1 %.not23872, label %OP1958.PUSH1, label %return, !prof !6

OP1958.PUSH1:                                     ; preds = %OP1953.PUSH1
  store i256 20, ptr %sp6365, align 16
  %dup36400 = load i256, ptr %sp6332, align 16
  store i256 %dup36400, ptr %sp6382, align 16
  %909 = add i256 %dup36400, 36
  store i256 %909, ptr %sp6369, align 16
  %910 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %909, i256 20, ptr %arg.ecx.addr)
  %.not23873 = icmp eq i8 %910, 0
  br i1 %.not23873, label %OP1963.PUSH32, label %return, !prof !6

OP1963.PUSH32:                                    ; preds = %OP1958.PUSH1
  store i256 38641673103035791731704587895467533990804863390168994966396590763182907195392, ptr %sp6365, align 16
  %dup36419 = load i256, ptr %sp6332, align 16
  store i256 %dup36419, ptr %sp6382, align 16
  %911 = add i256 %dup36419, 68
  store i256 %911, ptr %sp6369, align 16
  %912 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %911, i256 38641673103035791731704587895467533990804863390168994966396590763182907195392, ptr %arg.ecx.addr)
  %.not23874 = icmp eq i8 %912, 0
  br i1 %.not23874, label %OP1968.SWAP1, label %return, !prof !6

OP1968.SWAP1:                                     ; preds = %OP1963.PUSH32
  %swap.a6434 = load i256, ptr %sp6332, align 16
  %swap.b6436 = load i256, ptr %sp6328, align 16
  store i256 %swap.a6434, ptr %sp6328, align 16
  store i256 %swap.b6436, ptr %sp6332, align 16
  %mload.out.slot6440 = alloca i256, align 16
  %913 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b6436, ptr %mload.out.slot6440, ptr %arg.ecx.addr)
  %.not23875 = icmp eq i8 %913, 0
  br i1 %.not23875, label %OP1969.MLOAD.contd, label %return, !prof !6

OP1969.MLOAD.contd:                               ; preds = %OP1968.SWAP1
  %mload.out6441 = load i256, ptr %mload.out.slot6440, align 16
  %swap.b6447 = load i256, ptr %sp6328, align 16
  %914 = sub i256 %swap.b6447, %mload.out6441
  store i256 100, ptr %sp6365, align 16
  %915 = add i256 %914, 100
  store i256 %915, ptr %sp6328, align 16
  store i256 %mload.out6441, ptr %sp6332, align 16
  %916 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6328, i8 16)
  %.not23876 = icmp eq i8 %916, 0
  %spec.select17770 = select i1 %.not23876, i8 16, i8 %916, !prof !6
  br label %return

OP1978.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre25800 = add i64 %len.addr.197, 1
  %.pre25802 = add i64 %len.addr.197, 2
  br label %OP1978.JUMPDEST

OP1978.JUMPDEST:                                  ; preds = %OP1978.JUMPDEST.loopexit, %OP1941.PUSH20
  %.pre-phi25803 = phi i64 [ %.pre25802, %OP1978.JUMPDEST.loopexit ], [ %899, %OP1941.PUSH20 ]
  %.pre-phi25801 = phi i64 [ %.pre25800, %OP1978.JUMPDEST.loopexit ], [ %897, %OP1941.PUSH20 ]
  %len.addr.92 = phi i64 [ %len.addr.197, %OP1978.JUMPDEST.loopexit ], [ %len.addr.91, %OP1941.PUSH20 ]
  %sp6480 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.92
  store i256 6, ptr %sp6480, align 16
  %sp6484 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi25801
  store i256 6, ptr %sp6484, align 16
  %917 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6484, i8 17)
  %.not23877 = icmp eq i8 %917, 0
  br i1 %.not23877, label %OP1982.PUSH20, label %return, !prof !6

OP1982.PUSH20:                                    ; preds = %OP1978.JUMPDEST
  %918 = add i64 %len.addr.92, 3
  %sp6488 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi25803
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6488, align 16
  %sp6492 = getelementptr i256, ptr %sp6480, i64 -2
  %swap.b6493 = load i256, ptr %sp6492, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6492, align 16
  %sp6497 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %918
  %919 = and i256 %swap.b6493, 1461501637330902918203684832716283019655932542975
  store i256 %919, ptr %sp6488, align 16
  store i256 -1461501637330902918203684832716283019655932542976, ptr %sp6497, align 16
  %swap.b6510 = load i256, ptr %sp6484, align 16
  store i256 -1461501637330902918203684832716283019655932542976, ptr %sp6484, align 16
  %sp6514 = getelementptr i256, ptr %sp6480, i64 4
  store i256 -1461501637330902918203684832716283019655932542976, ptr %sp6514, align 16
  %920 = and i256 %swap.b6510, -1461501637330902918203684832716283019655932542976
  store i256 %920, ptr %sp6497, align 16
  %b6525 = load i256, ptr %sp6488, align 16
  %921 = or i256 %b6525, %920
  store i256 %921, ptr %sp6488, align 16
  %swap.b6531 = load i256, ptr %sp6484, align 16
  store i256 %921, ptr %sp6484, align 16
  store i256 %swap.b6531, ptr %sp6488, align 16
  %swap.b6536 = load i256, ptr %sp6480, align 16
  store i256 %swap.b6531, ptr %sp6480, align 16
  store i256 %swap.b6536, ptr %sp6488, align 16
  %922 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6484, i8 17)
  %.not23878 = icmp eq i8 %922, 0
  br i1 %.not23878, label %OP1994.PUSH1, label %return, !prof !6

OP1994.PUSH1:                                     ; preds = %OP1982.PUSH20
  store i256 7, ptr %sp6484, align 16
  store i256 7, ptr %sp6488, align 16
  %923 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6488, i8 17)
  %.not23879 = icmp eq i8 %923, 0
  br i1 %.not23879, label %OP1997.SWAP3, label %return, !prof !6

OP1997.SWAP3:                                     ; preds = %OP1994.PUSH1
  %swap.a6549 = load i256, ptr %sp6488, align 16
  %sp6550 = getelementptr i256, ptr %sp6480, i64 -1
  %swap.b6551 = load i256, ptr %sp6550, align 16
  store i256 %swap.a6549, ptr %sp6550, align 16
  store i256 %swap.b6551, ptr %sp6488, align 16
  %swap.b6556 = load i256, ptr %sp6484, align 16
  store i256 %swap.b6551, ptr %sp6484, align 16
  store i256 %swap.b6556, ptr %sp6488, align 16
  %swap.b6561 = load i256, ptr %sp6492, align 16
  store i256 %swap.b6556, ptr %sp6492, align 16
  store i256 %swap.b6561, ptr %sp6488, align 16
  %924 = and i256 %swap.b6561, %swap.b6551
  store i256 %924, ptr %sp6484, align 16
  %swap.b6572 = load i256, ptr %sp6550, align 16
  store i256 %swap.b6572, ptr %sp6484, align 16
  %b6577 = load i256, ptr %sp6480, align 16
  %925 = and i256 %b6577, %swap.b6572
  store i256 %925, ptr %sp6480, align 16
  %926 = or i256 %925, %924
  %swap.b6589 = load i256, ptr %sp6492, align 16
  store i256 %926, ptr %sp6492, align 16
  store i256 %swap.b6589, ptr %sp6550, align 16
  %927 = add i64 %len.addr.92, -2
  %928 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6492, i8 17)
  %.not23880 = icmp eq i8 %928, 0
  br i1 %.not23880, label %OP2006.JUMP, label %return, !prof !6

OP2006.JUMP:                                      ; preds = %OP1997.SWAP3
  %929 = add i64 %len.addr.92, -3
  %sp6593 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %929
  %a6594 = load i256, ptr %sp6593, align 16
  br label %dynamic_jump_table.preheader

OP2007.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP643.JUMPDEST
  %len.addr.93 = phi i64 [ %302, %OP643.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %930 = add i64 %len.addr.93, 1
  %sp6597 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.93
  store i256 9, ptr %sp6597, align 16
  %931 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6597, i8 17)
  %.not23867 = icmp eq i8 %931, 0
  br i1 %.not23867, label %OP2010.DUP2, label %return, !prof !6

OP2010.DUP2:                                      ; preds = %OP2007.JUMPDEST
  %sp6601 = getelementptr i256, ptr %sp6597, i64 -1
  %dup26602 = load i256, ptr %sp6601, align 16
  %sp6603 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %930
  store i256 %dup26602, ptr %sp6603, align 16
  br label %dynamic_jump_table.preheader

OP2012.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP647.JUMPDEST
  %len.addr.94 = phi i64 [ %303, %OP647.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %932 = add i64 %len.addr.94, 1
  %sp6609 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.94
  store i256 10, ptr %sp6609, align 16
  %933 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6609, i8 17)
  %.not23866 = icmp eq i8 %933, 0
  br i1 %.not23866, label %OP2015.DUP2, label %return, !prof !6

OP2015.DUP2:                                      ; preds = %OP2012.JUMPDEST
  %sp6613 = getelementptr i256, ptr %sp6609, i64 -1
  %dup26614 = load i256, ptr %sp6613, align 16
  %sp6615 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %932
  store i256 %dup26614, ptr %sp6615, align 16
  br label %dynamic_jump_table.preheader

OP2017.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP666.JUMPDEST
  %len.addr.95 = phi i64 [ %310, %OP666.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %934 = add i64 %len.addr.95, 1
  %sp6621 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.95
  store i256 0, ptr %sp6621, align 16
  %935 = add i64 %len.addr.95, 2
  %sp6623 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %934
  store i256 12, ptr %sp6623, align 16
  %936 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6623, i8 17)
  %.not23980 = icmp eq i8 %936, 0
  br i1 %.not23980, label %OP2021.PUSH1, label %return, !prof !6

OP2021.PUSH1:                                     ; preds = %OP2017.JUMPDEST
  %937 = add i64 %len.addr.95, 3
  %sp6627 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %935
  store i256 1, ptr %sp6627, align 16
  %b6632 = load i256, ptr %sp6623, align 16
  %938 = icmp eq i256 %b6632, 1
  %939 = zext i1 %938 to i256
  store i256 %939, ptr %sp6623, align 16
  br i1 %938, label %OP2056.JUMPDEST, label %OP2025.PUSH1

OP2025.PUSH1:                                     ; preds = %OP2021.PUSH1
  store i256 64, ptr %sp6623, align 16
  store i256 64, ptr %sp6627, align 16
  %mload.out.slot6646 = alloca i256, align 16
  %940 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot6646, ptr %arg.ecx.addr)
  %.not23981 = icmp eq i8 %940, 0
  br i1 %.not23981, label %OP2027.MLOAD.contd, label %return, !prof !6

OP2027.MLOAD.contd:                               ; preds = %OP2025.PUSH1
  %mload.out6647 = load i256, ptr %mload.out.slot6646, align 16
  store i256 %mload.out6647, ptr %sp6627, align 16
  %sp6650 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %937
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp6650, align 16
  %sp6654 = getelementptr i256, ptr %sp6621, i64 4
  store i256 %mload.out6647, ptr %sp6654, align 16
  %941 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out6647, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23982 = icmp eq i8 %941, 0
  br i1 %.not23982, label %OP2031.PUSH1, label %return, !prof !6

OP2031.PUSH1:                                     ; preds = %OP2027.MLOAD.contd
  store i256 32, ptr %sp6650, align 16
  %dup36666 = load i256, ptr %sp6627, align 16
  %sp6667 = getelementptr i256, ptr %sp6621, i64 5
  store i256 %dup36666, ptr %sp6667, align 16
  %942 = add i256 %dup36666, 4
  store i256 %942, ptr %sp6654, align 16
  %943 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %942, i256 32, ptr %arg.ecx.addr)
  %.not23983 = icmp eq i8 %943, 0
  br i1 %.not23983, label %OP2036.PUSH1, label %return, !prof !6

OP2036.PUSH1:                                     ; preds = %OP2031.PUSH1
  store i256 17, ptr %sp6650, align 16
  %dup36685 = load i256, ptr %sp6627, align 16
  store i256 %dup36685, ptr %sp6667, align 16
  %944 = add i256 %dup36685, 36
  store i256 %944, ptr %sp6654, align 16
  %945 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %944, i256 17, ptr %arg.ecx.addr)
  %.not23984 = icmp eq i8 %945, 0
  br i1 %.not23984, label %OP2041.PUSH32, label %return, !prof !6

OP2041.PUSH32:                                    ; preds = %OP2036.PUSH1
  store i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %sp6650, align 16
  %dup36704 = load i256, ptr %sp6627, align 16
  store i256 %dup36704, ptr %sp6667, align 16
  %946 = add i256 %dup36704, 68
  store i256 %946, ptr %sp6654, align 16
  %947 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %946, i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %arg.ecx.addr)
  %.not23985 = icmp eq i8 %947, 0
  br i1 %.not23985, label %OP2046.SWAP1, label %return, !prof !6

OP2046.SWAP1:                                     ; preds = %OP2041.PUSH32
  %swap.a6719 = load i256, ptr %sp6627, align 16
  %swap.b6721 = load i256, ptr %sp6623, align 16
  store i256 %swap.a6719, ptr %sp6623, align 16
  store i256 %swap.b6721, ptr %sp6627, align 16
  %mload.out.slot6725 = alloca i256, align 16
  %948 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b6721, ptr %mload.out.slot6725, ptr %arg.ecx.addr)
  %.not23986 = icmp eq i8 %948, 0
  br i1 %.not23986, label %OP2047.MLOAD.contd, label %return, !prof !6

OP2047.MLOAD.contd:                               ; preds = %OP2046.SWAP1
  %mload.out6726 = load i256, ptr %mload.out.slot6725, align 16
  %swap.b6732 = load i256, ptr %sp6623, align 16
  %949 = sub i256 %swap.b6732, %mload.out6726
  store i256 100, ptr %sp6650, align 16
  %950 = add i256 %949, 100
  store i256 %950, ptr %sp6623, align 16
  store i256 %mload.out6726, ptr %sp6627, align 16
  %951 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6623, i8 16)
  %.not23987 = icmp eq i8 %951, 0
  %spec.select17771 = select i1 %.not23987, i8 16, i8 %951, !prof !6
  br label %return

OP2056.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2021.PUSH1
  %len.addr.96 = phi i64 [ %934, %OP2021.PUSH1 ], [ %len.addr.197, %dynamic_jump_table ]
  %952 = add i64 %len.addr.96, 1
  %sp6765 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.96
  store i256 0, ptr %sp6765, align 16
  %sp6767 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %952
  %sp6771 = getelementptr i256, ptr %sp6765, i64 2
  store i256 0, ptr %sp6767, align 16
  store i256 12, ptr %sp6771, align 16
  %953 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6767, i8 17)
  %.not23988 = icmp eq i8 %953, 0
  br i1 %.not23988, label %OP2062.DUP1, label %return, !prof !6

OP2062.DUP1:                                      ; preds = %OP2056.JUMPDEST
  %954 = add i64 %len.addr.96, 3
  %dup16781 = load i256, ptr %sp6765, align 16
  store i256 %dup16781, ptr %sp6767, align 16
  store i256 4244, ptr %sp6771, align 16
  br label %OP1770.JUMPDEST

OP2066.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %955 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp6789 = getelementptr i256, ptr %955, i64 -1
  store i256 6, ptr %sp6789, align 16
  %956 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6789, i8 17)
  %.not23664 = icmp eq i8 %956, 0
  br i1 %.not23664, label %OP2070.PUSH1, label %return, !prof !6

OP2070.PUSH1:                                     ; preds = %OP2066.JUMPDEST
  store i256 64, ptr %955, align 16
  %957 = add i64 %len.addr.197, 2
  %sp6797 = getelementptr i256, ptr %955, i64 1
  store i256 64, ptr %sp6797, align 16
  %mload.out.slot6801 = alloca i256, align 16
  %958 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot6801, ptr %arg.ecx.addr)
  %.not23665 = icmp eq i8 %958, 0
  br i1 %.not23665, label %OP2072.MLOAD.contd, label %return, !prof !6

OP2072.MLOAD.contd:                               ; preds = %OP2070.PUSH1
  %mload.out6802 = load i256, ptr %mload.out.slot6801, align 16
  store i256 %mload.out6802, ptr %sp6797, align 16
  %sp6805 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %957
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp6805, align 16
  %sp6809 = getelementptr i256, ptr %955, i64 3
  store i256 %mload.out6802, ptr %sp6809, align 16
  %959 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out6802, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23666 = icmp eq i8 %959, 0
  br i1 %.not23666, label %OP2076.ADDRESS, label %return, !prof !6

OP2076.ADDRESS:                                   ; preds = %OP2072.MLOAD.contd
  %contract.target_address6817 = load i160, ptr %contract.target_address.addr9353, align 16
  %960 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address6817)
  %961 = zext i160 %960 to i256
  store i256 %961, ptr %sp6805, align 16
  %dup36823 = load i256, ptr %sp6797, align 16
  %sp6824 = getelementptr i256, ptr %955, i64 4
  store i256 %dup36823, ptr %sp6824, align 16
  %962 = add i256 %dup36823, 4
  store i256 %962, ptr %sp6809, align 16
  %963 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %962, i256 %961, ptr %arg.ecx.addr)
  %.not23667 = icmp eq i8 %963, 0
  br i1 %.not23667, label %OP2081.SWAP1, label %return, !prof !6

OP2081.SWAP1:                                     ; preds = %OP2076.ADDRESS
  %swap.a6838 = load i256, ptr %sp6797, align 16
  %swap.b6840 = load i256, ptr %955, align 16
  store i256 %swap.a6838, ptr %955, align 16
  store i256 %swap.b6840, ptr %sp6797, align 16
  %mload.out.slot6844 = alloca i256, align 16
  %964 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b6840, ptr %mload.out.slot6844, ptr %arg.ecx.addr)
  %.not23668 = icmp eq i8 %964, 0
  br i1 %.not23668, label %OP2082.MLOAD.contd, label %return, !prof !6

OP2082.MLOAD.contd:                               ; preds = %OP2081.SWAP1
  %mload.out6845 = load i256, ptr %mload.out.slot6844, align 16
  %sp6850 = getelementptr i256, ptr %955, i64 -3
  %swap.b6851 = load i256, ptr %sp6850, align 16
  %sp6855 = getelementptr i256, ptr %955, i64 -5
  store i256 %swap.b6851, ptr %sp6855, align 16
  %swap.a6860 = load i256, ptr %955, align 16
  %sp6861 = getelementptr i256, ptr %955, i64 -2
  %swap.b6862 = load i256, ptr %sp6861, align 16
  %sp6866 = getelementptr i256, ptr %955, i64 -4
  store i256 %swap.b6862, ptr %sp6866, align 16
  store i256 0, ptr %sp6850, align 16
  %swap.b6887 = load i256, ptr %sp6789, align 16
  %965 = and i256 %swap.b6887, 1461501637330902918203684832716283019655932542975
  store i256 %965, ptr %sp6861, align 16
  store i256 1889567281, ptr %sp6789, align 16
  %966 = add i256 %swap.a6860, 36
  store i256 %966, ptr %955, align 16
  store i256 32, ptr %sp6797, align 16
  store i256 %mload.out6845, ptr %sp6805, align 16
  %sp6947 = getelementptr i256, ptr %955, i64 5
  %967 = sub i256 %swap.a6860, %mload.out6845
  %968 = add i256 %967, 36
  store i256 %968, ptr %sp6809, align 16
  store i256 %mload.out6845, ptr %sp6824, align 16
  store i256 %965, ptr %sp6947, align 16
  %969 = add i64 %len.addr.197, 7
  %sp6976 = getelementptr i256, ptr %955, i64 6
  store i256 %965, ptr %sp6976, align 16
  %970 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6976, i8 17)
  %.not23669 = icmp eq i8 %970, 0
  br i1 %.not23669, label %OP2115.ISZERO, label %return, !prof !6

OP2115.ISZERO:                                    ; preds = %OP2082.MLOAD.contd
  %a6981 = load i256, ptr %sp6976, align 16
  %971 = icmp eq i256 %a6981, 0
  %972 = zext i1 %971 to i256
  store i256 %972, ptr %sp6976, align 16
  %sp6986 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %969
  %973 = xor i1 %971, true
  %974 = zext i1 %973 to i256
  store i256 %974, ptr %sp6986, align 16
  br i1 %971, label %OP2120.PUSH1, label %OP2123.JUMPDEST

OP2120.PUSH1:                                     ; preds = %OP2115.ISZERO
  store i256 0, ptr %sp6986, align 16
  %sp6999 = getelementptr i256, ptr %955, i64 8
  store i256 0, ptr %sp6999, align 16
  %975 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6986, i8 16)
  %.not23670 = icmp eq i8 %975, 0
  %spec.select17772 = select i1 %.not23670, i8 16, i8 %975, !prof !6
  br label %return

OP2123.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2115.ISZERO
  %len.addr.97 = phi i64 [ %969, %OP2115.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining7005 = load i64, ptr %gas.remaining.addr, align 8
  %976 = zext i64 %gas.remaining7005 to i256
  %977 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.97
  %sp7006 = getelementptr i256, ptr %977, i64 -1
  store i256 %976, ptr %sp7006, align 16
  %978 = add i64 %len.addr.97, -6
  %sp7008 = getelementptr i256, ptr %977, i64 -6
  %979 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp7008, i8 17, i8 3)
  %.not23671 = icmp eq i8 %979, 0
  br i1 %.not23671, label %suspend, label %return, !prof !6

OP2127.ISZERO:                                    ; preds = %resume
  %980 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp7010 = getelementptr i256, ptr %980, i64 -1
  %a7011 = load i256, ptr %sp7010, align 16
  %981 = icmp eq i256 %a7011, 0
  %982 = zext i1 %981 to i256
  store i256 %982, ptr %sp7010, align 16
  %983 = xor i1 %981, true
  %984 = zext i1 %983 to i256
  store i256 %984, ptr %980, align 16
  br i1 %981, label %OP2132.RETURNDATASIZE, label %OP2139.JUMPDEST

OP2132.RETURNDATASIZE:                            ; preds = %OP2127.ISZERO
  %ecx.return_data.len.addr7025 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len7026 = load i64, ptr %ecx.return_data.len.addr7025, align 8
  %985 = zext i64 %ecx.return_data.len7026 to i256
  store i256 %985, ptr %980, align 16
  %sp7029 = getelementptr i256, ptr %980, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp7029, i8 0, i64 64, i1 false)
  %986 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %980)
  %.not23393 = icmp eq i8 %986, 0
  br i1 %.not23393, label %OP2136.RETURNDATASIZE, label %return, !prof !6

OP2136.RETURNDATASIZE:                            ; preds = %OP2132.RETURNDATASIZE
  %ecx.return_data.len7038 = load i64, ptr %ecx.return_data.len.addr7025, align 8
  %987 = zext i64 %ecx.return_data.len7038 to i256
  store i256 %987, ptr %980, align 16
  store i256 0, ptr %sp7029, align 16
  %988 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %980, i8 16)
  %.not23394 = icmp eq i8 %988, 0
  %spec.select17773 = select i1 %.not23394, i8 16, i8 %988, !prof !6
  br label %return

OP2139.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2127.ISZERO
  %len.addr.98 = phi i64 [ %stack_len17730, %OP2127.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %989 = add i64 %len.addr.98, -3
  %990 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.98
  %sp7050 = getelementptr i256, ptr %990, i64 -4
  store i256 64, ptr %sp7050, align 16
  %mload.out.slot7054 = alloca i256, align 16
  %991 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot7054, ptr %arg.ecx.addr)
  %.not23653 = icmp eq i8 %991, 0
  br i1 %.not23653, label %OP2145.MLOAD.contd, label %return, !prof !6

OP2145.MLOAD.contd:                               ; preds = %OP2139.JUMPDEST
  %992 = add i64 %len.addr.98, -2
  %mload.out7055 = load i256, ptr %mload.out.slot7054, align 16
  store i256 %mload.out7055, ptr %sp7050, align 16
  %ecx.return_data.len.addr7058 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len7059 = load i64, ptr %ecx.return_data.len.addr7058, align 8
  %993 = zext i64 %ecx.return_data.len7059 to i256
  %sp7060 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %989
  store i256 %993, ptr %sp7060, align 16
  %sp7062 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %992
  %sp7066 = getelementptr i256, ptr %990, i64 -1
  store i256 %993, ptr %sp7066, align 16
  %994 = icmp ugt i64 %ecx.return_data.len7059, 31
  %995 = zext i1 %994 to i256
  store i256 %995, ptr %sp7062, align 16
  br i1 %994, label %OP2156.JUMPDEST, label %OP2153.PUSH1

OP2153.PUSH1:                                     ; preds = %OP2145.MLOAD.contd
  store i256 0, ptr %sp7062, align 16
  %sp7083 = getelementptr i256, ptr %990, i64 -2
  store i256 0, ptr %sp7066, align 16
  %996 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7083, i8 16)
  %.not23654 = icmp eq i8 %996, 0
  %spec.select17774 = select i1 %.not23654, i8 16, i8 %996, !prof !6
  br label %return

OP2156.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2145.MLOAD.contd
  %len.addr.99 = phi i64 [ %992, %OP2145.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %997 = add i64 %len.addr.99, -1
  %998 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.99
  %sp7091 = getelementptr i256, ptr %998, i64 -2
  %a7092 = load i256, ptr %sp7091, align 16
  %mload.out.slot7093 = alloca i256, align 16
  %999 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a7092, ptr %mload.out.slot7093, ptr %arg.ecx.addr)
  %.not23655 = icmp eq i8 %999, 0
  br i1 %.not23655, label %OP2158.MLOAD.contd, label %return, !prof !6

OP2158.MLOAD.contd:                               ; preds = %OP2156.JUMPDEST
  %mload.out7094 = load i256, ptr %mload.out.slot7093, align 16
  store i256 %mload.out7094, ptr %sp7091, align 16
  %sp7097 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %997
  store i256 7, ptr %sp7097, align 16
  %sp7099 = getelementptr i256, ptr %998, i64 -1
  %1000 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr %sp7099, i8 17)
  %.not23656 = icmp eq i8 %1000, 0
  br i1 %.not23656, label %OP2161.PUSH1, label %return, !prof !6

OP2161.PUSH1:                                     ; preds = %OP2158.MLOAD.contd
  store i256 64, ptr %998, align 16
  %1001 = add i64 %len.addr.99, 2
  %sp7105 = getelementptr i256, ptr %998, i64 1
  store i256 64, ptr %sp7105, align 16
  %mload.out.slot7109 = alloca i256, align 16
  %1002 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot7109, ptr %arg.ecx.addr)
  %.not23657 = icmp eq i8 %1002, 0
  br i1 %.not23657, label %OP2163.MLOAD.contd, label %return, !prof !6

OP2163.MLOAD.contd:                               ; preds = %OP2161.PUSH1
  %mload.out7110 = load i256, ptr %mload.out.slot7109, align 16
  store i256 %mload.out7110, ptr %sp7105, align 16
  %sp7113 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1001
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp7113, align 16
  %sp7117 = getelementptr i256, ptr %998, i64 3
  store i256 %mload.out7110, ptr %sp7117, align 16
  %1003 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out7110, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23658 = icmp eq i8 %1003, 0
  br i1 %.not23658, label %OP2167.ADDRESS, label %return, !prof !6

OP2167.ADDRESS:                                   ; preds = %OP2163.MLOAD.contd
  %contract.target_address.addr7124 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address7125 = load i160, ptr %contract.target_address.addr7124, align 16
  %1004 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address7125)
  %1005 = zext i160 %1004 to i256
  store i256 %1005, ptr %sp7113, align 16
  %dup37131 = load i256, ptr %sp7105, align 16
  %sp7132 = getelementptr i256, ptr %998, i64 4
  store i256 %dup37131, ptr %sp7132, align 16
  %1006 = add i256 %dup37131, 4
  store i256 %1006, ptr %sp7117, align 16
  %1007 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1006, i256 %1005, ptr %arg.ecx.addr)
  %.not23659 = icmp eq i8 %1007, 0
  br i1 %.not23659, label %OP2172.SWAP1, label %return, !prof !6

OP2172.SWAP1:                                     ; preds = %OP2167.ADDRESS
  %swap.a7146 = load i256, ptr %sp7105, align 16
  %swap.b7148 = load i256, ptr %998, align 16
  store i256 %swap.a7146, ptr %998, align 16
  store i256 %swap.b7148, ptr %sp7105, align 16
  %mload.out.slot7152 = alloca i256, align 16
  %1008 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b7148, ptr %mload.out.slot7152, ptr %arg.ecx.addr)
  %.not23660 = icmp eq i8 %1008, 0
  br i1 %.not23660, label %OP2173.MLOAD.contd, label %return, !prof !6

OP2173.MLOAD.contd:                               ; preds = %OP2172.SWAP1
  %mload.out7153 = load i256, ptr %mload.out.slot7152, align 16
  %swap.b7159 = load i256, ptr %sp7091, align 16
  %sp7163 = getelementptr i256, ptr %998, i64 -3
  store i256 %swap.b7159, ptr %sp7163, align 16
  store i256 0, ptr %sp7091, align 16
  %swap.b7184 = load i256, ptr %sp7099, align 16
  %1009 = and i256 %swap.b7184, 1461501637330902918203684832716283019655932542975
  store i256 %1009, ptr %sp7099, align 16
  %swap.b7202 = load i256, ptr %998, align 16
  store i256 1889567281, ptr %998, align 16
  %sp7212 = getelementptr i256, ptr %998, i64 5
  %1010 = add i256 %swap.b7202, 36
  store i256 %1010, ptr %sp7105, align 16
  %sp7229 = getelementptr i256, ptr %998, i64 2
  store i256 32, ptr %sp7229, align 16
  store i256 %mload.out7153, ptr %sp7117, align 16
  %sp7249 = getelementptr i256, ptr %998, i64 6
  %1011 = sub i256 %swap.b7202, %mload.out7153
  %1012 = add i256 %1011, 36
  store i256 %1012, ptr %sp7132, align 16
  store i256 %mload.out7153, ptr %sp7212, align 16
  store i256 %1009, ptr %sp7249, align 16
  %1013 = add i64 %len.addr.99, 8
  %sp7278 = getelementptr i256, ptr %998, i64 7
  store i256 %1009, ptr %sp7278, align 16
  %1014 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7278, i8 17)
  %.not23661 = icmp eq i8 %1014, 0
  br i1 %.not23661, label %OP2204.ISZERO, label %return, !prof !6

OP2204.ISZERO:                                    ; preds = %OP2173.MLOAD.contd
  %a7283 = load i256, ptr %sp7278, align 16
  %1015 = icmp eq i256 %a7283, 0
  %1016 = zext i1 %1015 to i256
  store i256 %1016, ptr %sp7278, align 16
  %sp7288 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1013
  %1017 = xor i1 %1015, true
  %1018 = zext i1 %1017 to i256
  store i256 %1018, ptr %sp7288, align 16
  br i1 %1015, label %OP2209.PUSH1, label %OP2212.JUMPDEST

OP2209.PUSH1:                                     ; preds = %OP2204.ISZERO
  store i256 0, ptr %sp7288, align 16
  %sp7301 = getelementptr i256, ptr %998, i64 9
  store i256 0, ptr %sp7301, align 16
  %1019 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7288, i8 16)
  %.not23662 = icmp eq i8 %1019, 0
  %spec.select17775 = select i1 %.not23662, i8 16, i8 %1019, !prof !6
  br label %return

OP2212.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2204.ISZERO
  %len.addr.100 = phi i64 [ %1013, %OP2204.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining7307 = load i64, ptr %gas.remaining.addr, align 8
  %1020 = zext i64 %gas.remaining7307 to i256
  %1021 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.100
  %sp7308 = getelementptr i256, ptr %1021, i64 -1
  store i256 %1020, ptr %sp7308, align 16
  %1022 = add i64 %len.addr.100, -6
  %sp7310 = getelementptr i256, ptr %1021, i64 -6
  %1023 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp7310, i8 17, i8 3)
  %.not23663 = icmp eq i8 %1023, 0
  br i1 %.not23663, label %suspend, label %return, !prof !6

OP2216.ISZERO:                                    ; preds = %resume
  %1024 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp7312 = getelementptr i256, ptr %1024, i64 -1
  %a7313 = load i256, ptr %sp7312, align 16
  %1025 = icmp eq i256 %a7313, 0
  %1026 = zext i1 %1025 to i256
  store i256 %1026, ptr %sp7312, align 16
  %1027 = xor i1 %1025, true
  %1028 = zext i1 %1027 to i256
  store i256 %1028, ptr %1024, align 16
  br i1 %1025, label %OP2221.RETURNDATASIZE, label %OP2228.JUMPDEST

OP2221.RETURNDATASIZE:                            ; preds = %OP2216.ISZERO
  %ecx.return_data.len.addr7327 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len7328 = load i64, ptr %ecx.return_data.len.addr7327, align 8
  %1029 = zext i64 %ecx.return_data.len7328 to i256
  store i256 %1029, ptr %1024, align 16
  %sp7331 = getelementptr i256, ptr %1024, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp7331, i8 0, i64 64, i1 false)
  %1030 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1024)
  %.not23391 = icmp eq i8 %1030, 0
  br i1 %.not23391, label %OP2225.RETURNDATASIZE, label %return, !prof !6

OP2225.RETURNDATASIZE:                            ; preds = %OP2221.RETURNDATASIZE
  %ecx.return_data.len7340 = load i64, ptr %ecx.return_data.len.addr7327, align 8
  %1031 = zext i64 %ecx.return_data.len7340 to i256
  store i256 %1031, ptr %1024, align 16
  store i256 0, ptr %sp7331, align 16
  %1032 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1024, i8 16)
  %.not23392 = icmp eq i8 %1032, 0
  %spec.select17776 = select i1 %.not23392, i8 16, i8 %1032, !prof !6
  br label %return

OP2228.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2216.ISZERO
  %len.addr.101 = phi i64 [ %stack_len17730, %OP2216.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1033 = add i64 %len.addr.101, -3
  %1034 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.101
  %sp7352 = getelementptr i256, ptr %1034, i64 -4
  store i256 64, ptr %sp7352, align 16
  %mload.out.slot7356 = alloca i256, align 16
  %1035 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot7356, ptr %arg.ecx.addr)
  %.not23650 = icmp eq i8 %1035, 0
  br i1 %.not23650, label %OP2234.MLOAD.contd, label %return, !prof !6

OP2234.MLOAD.contd:                               ; preds = %OP2228.JUMPDEST
  %1036 = add i64 %len.addr.101, -2
  %mload.out7357 = load i256, ptr %mload.out.slot7356, align 16
  store i256 %mload.out7357, ptr %sp7352, align 16
  %ecx.return_data.len.addr7360 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len7361 = load i64, ptr %ecx.return_data.len.addr7360, align 8
  %1037 = zext i64 %ecx.return_data.len7361 to i256
  %sp7362 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1033
  store i256 %1037, ptr %sp7362, align 16
  %sp7364 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1036
  %sp7368 = getelementptr i256, ptr %1034, i64 -1
  store i256 %1037, ptr %sp7368, align 16
  %1038 = icmp ugt i64 %ecx.return_data.len7361, 31
  %1039 = zext i1 %1038 to i256
  store i256 %1039, ptr %sp7364, align 16
  br i1 %1038, label %OP2245.JUMPDEST, label %OP2242.PUSH1

OP2242.PUSH1:                                     ; preds = %OP2234.MLOAD.contd
  store i256 0, ptr %sp7364, align 16
  %sp7385 = getelementptr i256, ptr %1034, i64 -2
  store i256 0, ptr %sp7368, align 16
  %1040 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7385, i8 16)
  %.not23651 = icmp eq i8 %1040, 0
  %spec.select17777 = select i1 %.not23651, i8 16, i8 %1040, !prof !6
  br label %return

OP2245.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2234.MLOAD.contd
  %len.addr.102 = phi i64 [ %1036, %OP2234.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1041 = add i64 %len.addr.102, -1
  %1042 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.102
  %sp7393 = getelementptr i256, ptr %1042, i64 -2
  %a7394 = load i256, ptr %sp7393, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !60)
  %ecx.memory.addr.i24292 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24293 = load ptr, ptr %ecx.memory.addr.i24292, align 8, !alias.scope !60, !noalias !63
  %ecx.memory.len.addr.i24294 = getelementptr inbounds i8, ptr %ecx.memory.i24293, i64 16
  %ecx.memory.len.i24295 = load i64, ptr %ecx.memory.len.addr.i24294, align 8, !noalias !65
  %ecx.memory.last_checkpoint.addr.i24296 = getelementptr inbounds i8, ptr %ecx.memory.i24293, i64 48
  %ecx.memory.last_checkpoint.i24297 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24296, align 8, !noalias !65
  %1043 = sub i64 %ecx.memory.len.i24295, %ecx.memory.last_checkpoint.i24297
  %1044 = icmp ugt i256 %a7394, 18446744073709551615
  %1045 = trunc i256 %a7394 to i64
  %1046 = add i64 %1045, 32
  %1047 = icmp ugt i64 %1045, -33
  %1048 = or i1 %1044, %1047
  %1049 = select i1 %1048, i64 -1, i64 %1046
  %1050 = icmp ugt i64 %1049, %1043
  br i1 %1050, label %resize.i24305, label %OP2247.MLOAD.contd, !prof !5

resize.i24305:                                    ; preds = %OP2245.JUMPDEST
  %1051 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1049), !noalias !63
  %.not.i24306 = icmp eq i8 %1051, 0
  br i1 %.not.i24306, label %OP2247.MLOAD.contd, label %return, !prof !6

OP2247.MLOAD.contd:                               ; preds = %OP2245.JUMPDEST, %resize.i24305
  %ecx.memory.buffer.ptr.shared.addr.i24299 = getelementptr inbounds i8, ptr %ecx.memory.i24293, i64 8
  %ecx.memory.buffer.ptr.shared.i24300 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24299, align 8, !noalias !65
  %ecx.memory.buffer.ptr.i24301 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24300, i64 %ecx.memory.last_checkpoint.i24297
  %slot.i24302 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24301, i64 %1045
  %slot.value.i24303 = load i256, ptr %slot.i24302, align 1, !noalias !65
  %1052 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24303)
  %sp7401 = getelementptr i256, ptr %1042, i64 -3
  store i256 %1052, ptr %sp7401, align 16
  store i256 0, ptr %sp7393, align 16
  %sp7407 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1041
  store i256 4609, ptr %sp7407, align 16
  %sp7409 = getelementptr i256, ptr %1042, i64 -4
  %dup47410 = load i256, ptr %sp7409, align 16
  store i256 %dup47410, ptr %1042, align 16
  %1053 = add i64 %len.addr.102, 2
  %sp7413 = getelementptr i256, ptr %1042, i64 1
  %sp7415 = getelementptr i256, ptr %1042, i64 -6
  %dup87416 = load i256, ptr %sp7415, align 16
  %sp7417 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1053
  %1054 = and i256 %dup87416, 5192296858534827628530496329220095
  store i256 %1054, ptr %sp7413, align 16
  %sp7427 = getelementptr i256, ptr %1042, i64 3
  store i256 8814, ptr %sp7427, align 16
  store i256 8814, ptr %sp7417, align 16
  br label %dynamic_jump_table.preheader

OP2260.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1055 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7439 = getelementptr i256, ptr %1055, i64 -1
  %swap.a7440 = load i256, ptr %sp7439, align 16
  %sp7441 = getelementptr i256, ptr %1055, i64 -2
  store i256 %swap.a7440, ptr %sp7441, align 16
  store i256 0, ptr %sp7439, align 16
  store i256 4645, ptr %1055, align 16
  %sp7449 = getelementptr i256, ptr %1055, i64 -3
  %dup47450 = load i256, ptr %sp7449, align 16
  %sp7451 = getelementptr i256, ptr %1055, i64 1
  store i256 %dup47450, ptr %sp7451, align 16
  %1056 = add i64 %len.addr.197, 3
  %sp7453 = getelementptr i256, ptr %1055, i64 2
  %sp7455 = getelementptr i256, ptr %1055, i64 -5
  %dup87456 = load i256, ptr %sp7455, align 16
  %sp7457 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1056
  %1057 = and i256 %dup87456, 5192296858534827628530496329220095
  store i256 %1057, ptr %sp7453, align 16
  %sp7467 = getelementptr i256, ptr %1055, i64 4
  store i256 8814, ptr %sp7467, align 16
  store i256 8814, ptr %sp7457, align 16
  br label %dynamic_jump_table.backedge

OP2273.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1058 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7479 = getelementptr i256, ptr %1058, i64 -1
  %swap.a7480 = load i256, ptr %sp7479, align 16
  %sp7481 = getelementptr i256, ptr %1058, i64 -2
  store i256 %swap.a7480, ptr %sp7481, align 16
  store i256 0, ptr %sp7479, align 16
  store i256 4659, ptr %1058, align 16
  %sp7489 = getelementptr i256, ptr %1058, i64 -7
  %dup87490 = load i256, ptr %sp7489, align 16
  %sp7491 = getelementptr i256, ptr %1058, i64 1
  store i256 %dup87490, ptr %sp7491, align 16
  %sp7493 = getelementptr i256, ptr %1058, i64 -6
  br label %OP4725.JUMPDEST.sink.split

OP2282.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1059 = add i64 %len.addr.197, 1
  %sp7499 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 0, ptr %sp7499, align 16
  %1060 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7499, i8 17)
  %.not23640 = icmp eq i8 %1060, 0
  br i1 %.not23640, label %OP2285.SWAP1, label %return, !prof !6

OP2285.SWAP1:                                     ; preds = %OP2282.JUMPDEST
  %swap.a7504 = load i256, ptr %sp7499, align 16
  %sp7505 = getelementptr i256, ptr %sp7499, i64 -1
  %swap.b7506 = load i256, ptr %sp7505, align 16
  store i256 %swap.a7504, ptr %sp7505, align 16
  %sp7510 = getelementptr i256, ptr %sp7499, i64 -2
  store i256 %swap.b7506, ptr %sp7510, align 16
  %.not23641 = icmp eq i256 %swap.a7504, 0
  br i1 %.not23641, label %OP2291.PUSH2, label %OP2315.JUMPDEST

OP2291.PUSH2:                                     ; preds = %OP2285.SWAP1
  store i256 4700, ptr %sp7499, align 16
  %sp7523 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1059
  store i256 1000, ptr %sp7523, align 16
  %sp7525 = getelementptr i256, ptr %sp7499, i64 2
  store i256 3069, ptr %sp7525, align 16
  %sp7527 = getelementptr i256, ptr %sp7499, i64 3
  store i256 4695, ptr %sp7527, align 16
  %sp7529 = getelementptr i256, ptr %sp7499, i64 -4
  %dup87530 = load i256, ptr %sp7529, align 16
  %sp7531 = getelementptr i256, ptr %sp7499, i64 4
  store i256 %dup87530, ptr %sp7531, align 16
  %1061 = add i64 %len.addr.197, 6
  %sp7533 = getelementptr i256, ptr %sp7499, i64 -3
  %dup87534 = load i256, ptr %sp7533, align 16
  %sp7535 = getelementptr i256, ptr %sp7499, i64 5
  store i256 %dup87534, ptr %sp7535, align 16
  %sp7537 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1061
  %sp7539 = getelementptr i256, ptr %sp7499, i64 7
  store i256 8680, ptr %sp7539, align 16
  store i256 8680, ptr %sp7537, align 16
  br label %dynamic_jump_table.backedge

OP2304.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1062 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7553 = getelementptr i256, ptr %1062, i64 -1
  %swap.a7554 = load i256, ptr %sp7553, align 16
  %sp7555 = getelementptr i256, ptr %1062, i64 -10
  store i256 %swap.a7554, ptr %sp7555, align 16
  store i256 4715, ptr %sp7553, align 16
  store i256 0, ptr %1062, align 16
  %1063 = add i64 %len.addr.197, 2
  %sp7563 = getelementptr i256, ptr %1062, i64 1
  store i256 1000, ptr %sp7563, align 16
  br label %OP5005.JUMPDEST

OP2315.JUMPDEST:                                  ; preds = %dynamic_jump_table.OP2315.JUMPDEST_crit_edge, %OP2285.SWAP1
  %dup57590 = phi i256 [ %dup57590.pre, %dynamic_jump_table.OP2315.JUMPDEST_crit_edge ], [ %swap.a7504, %OP2285.SWAP1 ]
  %sp7569 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 4810, ptr %sp7569, align 16
  %sp7571 = getelementptr i256, ptr %sp7569, i64 1
  %sp7573 = getelementptr i256, ptr %sp7569, i64 -8
  %dup107574 = load i256, ptr %sp7573, align 16
  %sp7575 = getelementptr i256, ptr %sp7569, i64 2
  %1064 = and i256 %dup107574, 5192296858534827628530496329220095
  store i256 %1064, ptr %sp7571, align 16
  store i256 4756, ptr %sp7575, align 16
  %sp7585 = getelementptr i256, ptr %sp7569, i64 -4
  %dup77586 = load i256, ptr %sp7585, align 16
  %sp7587 = getelementptr i256, ptr %sp7569, i64 3
  store i256 %dup77586, ptr %sp7587, align 16
  %1065 = add i64 %len.addr.197, 5
  %sp7591 = getelementptr i256, ptr %sp7569, i64 4
  store i256 %dup57590, ptr %sp7591, align 16
  %sp7593 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1065
  %sp7595 = getelementptr i256, ptr %sp7569, i64 6
  store i256 8680, ptr %sp7595, align 16
  store i256 8680, ptr %sp7593, align 16
  br label %dynamic_jump_table.backedge

OP2327.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1066 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7607 = getelementptr i256, ptr %1066, i64 -2
  %dup27608 = load i256, ptr %sp7607, align 16
  store i256 %dup27608, ptr %1066, align 16
  %.not23629 = icmp eq i256 %dup27608, 0
  br i1 %.not23629, label %return, label %OP2332.JUMPDEST

OP2332.JUMPDEST:                                  ; preds = %dynamic_jump_table.OP2332.JUMPDEST_crit_edge, %OP2327.JUMPDEST
  %b7619 = phi i256 [ %b7619.pre, %dynamic_jump_table.OP2332.JUMPDEST_crit_edge ], [ %dup27608, %OP2327.JUMPDEST ]
  %1067 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7616 = getelementptr i256, ptr %1067, i64 -1
  %a7617 = load i256, ptr %sp7616, align 16
  %sp7618 = getelementptr i256, ptr %1067, i64 -2
  %1068 = udiv i256 %a7617, %b7619
  store i256 %1068, ptr %sp7618, align 16
  %sp7624 = getelementptr i256, ptr %1067, i64 -10
  %dup107625 = load i256, ptr %sp7624, align 16
  %1069 = and i256 %dup107625, 5192296858534827628530496329220095
  store i256 %1069, ptr %sp7616, align 16
  store i256 4797, ptr %1067, align 16
  %sp7636 = getelementptr i256, ptr %1067, i64 -6
  %dup77637 = load i256, ptr %sp7636, align 16
  %sp7638 = getelementptr i256, ptr %1067, i64 1
  store i256 %dup77637, ptr %sp7638, align 16
  %1070 = add i64 %len.addr.197, 3
  %sp7640 = getelementptr i256, ptr %1067, i64 -4
  %dup67641 = load i256, ptr %sp7640, align 16
  %sp7642 = getelementptr i256, ptr %1067, i64 2
  store i256 %dup67641, ptr %sp7642, align 16
  %sp7644 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1070
  %sp7646 = getelementptr i256, ptr %1067, i64 4
  store i256 8680, ptr %sp7646, align 16
  store i256 8680, ptr %sp7644, align 16
  br label %dynamic_jump_table.backedge

OP2344.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1071 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7658 = getelementptr i256, ptr %1071, i64 -2
  %dup27659 = load i256, ptr %sp7658, align 16
  store i256 %dup27659, ptr %1071, align 16
  %.not23628 = icmp eq i256 %dup27659, 0
  br i1 %.not23628, label %return, label %OP2349.JUMPDEST

OP2349.JUMPDEST:                                  ; preds = %dynamic_jump_table.OP2349.JUMPDEST_crit_edge, %OP2344.JUMPDEST
  %b7670 = phi i256 [ %b7670.pre, %dynamic_jump_table.OP2349.JUMPDEST_crit_edge ], [ %dup27659, %OP2344.JUMPDEST ]
  %1072 = add i64 %len.addr.197, -1
  %sp7667 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1072
  %a7668 = load i256, ptr %sp7667, align 16
  %gep = getelementptr i256, ptr %invariant.gep, i64 %len.addr.197
  %1073 = udiv i256 %a7668, %b7670
  store i256 %1073, ptr %gep, align 16
  br label %OP5084.JUMPDEST

OP2353.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1074 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7675 = getelementptr i256, ptr %1074, i64 -1
  %swap.a7676 = load i256, ptr %sp7675, align 16
  %sp7677 = getelementptr i256, ptr %1074, i64 -10
  %swap.b7678 = load i256, ptr %sp7677, align 16
  store i256 %swap.a7676, ptr %sp7677, align 16
  store i256 %swap.b7678, ptr %sp7675, align 16
  %1075 = add i64 %len.addr.197, -1
  br label %OP2356.JUMPDEST, !annotation !7

OP2356.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP2353.JUMPDEST
  %len.addr.106 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %1075, %OP2353.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1076 = add i64 %len.addr.106, 1
  %sp7682 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.106
  %sp7684 = getelementptr i256, ptr %sp7682, i64 -9
  %dup107685 = load i256, ptr %sp7684, align 16
  %sp7686 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1076
  store i256 %dup107685, ptr %sp7686, align 16
  %1077 = icmp ne i256 %dup107685, 0
  %1078 = zext i1 %1077 to i256
  store i256 %1078, ptr %sp7682, align 16
  br i1 %1077, label %OP2400.JUMPDEST, label %OP2362.PUSH1

OP2362.PUSH1:                                     ; preds = %OP2356.JUMPDEST
  %1079 = add i64 %len.addr.106, 2
  store i256 64, ptr %sp7682, align 16
  %mload.out.slot7701 = alloca i256, align 16
  %1080 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot7701, ptr %arg.ecx.addr)
  %.not23630 = icmp eq i8 %1080, 0
  br i1 %.not23630, label %OP2363.MLOAD.contd, label %return, !prof !6

OP2363.MLOAD.contd:                               ; preds = %OP2362.PUSH1
  %mload.out7702 = load i256, ptr %mload.out.slot7701, align 16
  store i256 %mload.out7702, ptr %sp7682, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp7686, align 16
  %1081 = add i64 %len.addr.106, 3
  %sp7709 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1079
  store i256 %mload.out7702, ptr %sp7709, align 16
  %1082 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out7702, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23631 = icmp eq i8 %1082, 0
  br i1 %.not23631, label %OP2367.PUSH1, label %return, !prof !6

OP2367.PUSH1:                                     ; preds = %OP2363.MLOAD.contd
  %b7721 = load i256, ptr %sp7682, align 16
  %1083 = add i256 %b7721, 4
  store i256 %1083, ptr %sp7682, align 16
  store i256 %1083, ptr %sp7686, align 16
  %sp7732 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1081
  %1084 = add i256 %b7721, 36
  store i256 %1084, ptr %sp7709, align 16
  %sp7746 = getelementptr i256, ptr %sp7682, i64 4
  store i256 32, ptr %sp7732, align 16
  store i256 %1083, ptr %sp7746, align 16
  %1085 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1083, i256 32, ptr %arg.ecx.addr)
  %.not23632 = icmp eq i8 %1085, 0
  br i1 %.not23632, label %OP2378.PUSH1, label %return, !prof !6

OP2378.PUSH1:                                     ; preds = %OP2367.PUSH1
  store i256 40, ptr %sp7732, align 16
  %dup27766 = load i256, ptr %sp7709, align 16
  store i256 %dup27766, ptr %sp7746, align 16
  %1086 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup27766, i256 40, ptr %arg.ecx.addr)
  %.not23633 = icmp eq i8 %1086, 0
  br i1 %.not23633, label %OP2381.PUSH1, label %return, !prof !6

OP2381.PUSH1:                                     ; preds = %OP2378.PUSH1
  %b7779 = load i256, ptr %sp7709, align 16
  %1087 = add i256 %b7779, 32
  store i256 %1087, ptr %sp7709, align 16
  store i256 11201, ptr %sp7746, align 16
  %sp7788 = getelementptr i256, ptr %sp7682, i64 5
  store i256 40, ptr %sp7732, align 16
  store i256 %1087, ptr %sp7788, align 16
  %1088 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7732)
  %.not23634 = icmp eq i8 %1088, 0
  br i1 %.not23634, label %OP2388.PUSH1, label %return, !prof !6

OP2388.PUSH1:                                     ; preds = %OP2381.PUSH1
  store i256 64, ptr %sp7732, align 16
  %b7802 = load i256, ptr %sp7709, align 16
  %1089 = add i256 %b7802, 64
  %swap.b7808 = load i256, ptr %sp7682, align 16
  store i256 %1089, ptr %sp7682, align 16
  store i256 %swap.b7808, ptr %sp7709, align 16
  store i256 64, ptr %sp7686, align 16
  %mload.out.slot7816 = alloca i256, align 16
  %1090 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot7816, ptr %arg.ecx.addr)
  %.not23635 = icmp eq i8 %1090, 0
  br i1 %.not23635, label %OP2394.MLOAD.contd, label %return, !prof !6

OP2394.MLOAD.contd:                               ; preds = %OP2388.PUSH1
  %mload.out7817 = load i256, ptr %mload.out.slot7816, align 16
  %swap.b7827 = load i256, ptr %sp7682, align 16
  store i256 %swap.b7827, ptr %sp7709, align 16
  %1091 = sub i256 %swap.b7827, %mload.out7817
  store i256 %1091, ptr %sp7682, align 16
  store i256 %mload.out7817, ptr %sp7686, align 16
  %1092 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7682, i8 16)
  %.not23636 = icmp eq i8 %1092, 0
  %spec.select17778 = select i1 %.not23636, i8 16, i8 %1092, !prof !6
  br label %return

OP2400.JUMPDEST:                                  ; preds = %dynamic_jump_table.OP2400.JUMPDEST_crit_edge, %OP2356.JUMPDEST
  %dup117850 = phi i256 [ %dup117850.pre, %dynamic_jump_table.OP2400.JUMPDEST_crit_edge ], [ %dup107685, %OP2356.JUMPDEST ]
  %len.addr.107 = phi i64 [ %len.addr.197, %dynamic_jump_table.OP2400.JUMPDEST_crit_edge ], [ %len.addr.106, %OP2356.JUMPDEST ]
  %sp7843 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.107
  store i256 4912, ptr %sp7843, align 16
  %sp7845 = getelementptr i256, ptr %sp7843, i64 -10
  %dup117846 = load i256, ptr %sp7845, align 16
  %sp7847 = getelementptr i256, ptr %sp7843, i64 1
  store i256 %dup117846, ptr %sp7847, align 16
  %1093 = add i64 %len.addr.107, 3
  %sp7851 = getelementptr i256, ptr %sp7843, i64 2
  store i256 %dup117850, ptr %sp7851, align 16
  br label %OP5005.JUMPDEST

OP2406.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp7855 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 4924, ptr %sp7855, align 16
  %sp7857 = getelementptr i256, ptr %sp7855, i64 -6
  %dup77858 = load i256, ptr %sp7857, align 16
  %sp7859 = getelementptr i256, ptr %sp7855, i64 1
  store i256 %dup77858, ptr %sp7859, align 16
  %sp7861 = getelementptr i256, ptr %sp7855, i64 -5
  %dup77862 = load i256, ptr %sp7861, align 16
  %sp7863 = getelementptr i256, ptr %sp7855, i64 2
  store i256 %dup77862, ptr %sp7863, align 16
  %sp7865 = getelementptr i256, ptr %sp7855, i64 -8
  %dup117866 = load i256, ptr %sp7865, align 16
  %sp7867 = getelementptr i256, ptr %sp7855, i64 3
  store i256 %dup117866, ptr %sp7867, align 16
  %1094 = add i64 %len.addr.197, 5
  %sp7869 = getelementptr i256, ptr %sp7855, i64 -7
  %dup117870 = load i256, ptr %sp7869, align 16
  %sp7871 = getelementptr i256, ptr %sp7855, i64 4
  store i256 %dup117870, ptr %sp7871, align 16
  br label %OP4337.JUMPDEST

OP2414.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1095 = add i64 %len.addr.197, 1
  %1096 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp7875 = getelementptr i256, ptr %1096, i64 -2
  %dup27876 = load i256, ptr %sp7875, align 16
  %1097 = icmp eq i256 %dup27876, 0
  %1098 = zext i1 %1097 to i256
  store i256 %1098, ptr %1096, align 16
  br i1 %1097, label %OP2439.JUMPDEST, label %OP2419.PUSH1

OP2419.PUSH1:                                     ; preds = %OP2414.JUMPDEST
  store i256 8, ptr %1096, align 16
  %1099 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %1096, i8 17)
  %.not23621 = icmp eq i8 %1099, 0
  br i1 %.not23621, label %OP2421.PUSH2, label %return, !prof !6

OP2421.PUSH2:                                     ; preds = %OP2419.PUSH1
  %sp7890 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1095
  %swap.b7895 = load i256, ptr %1096, align 16
  store i256 4986, ptr %1096, align 16
  %1100 = add i64 %len.addr.197, 3
  %sp7897 = getelementptr i256, ptr %1096, i64 2
  %sp7901 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1100
  %sp7905 = getelementptr i256, ptr %1096, i64 4
  %1101 = and i256 %swap.b7895, 5192296858534827628530496329220095
  store i256 %1101, ptr %sp7890, align 16
  %1102 = lshr i256 %swap.b7895, 112
  %1103 = and i256 %1102, 5192296858534827628530496329220095
  store i256 %1103, ptr %sp7897, align 16
  store i256 8680, ptr %sp7905, align 16
  store i256 8680, ptr %sp7901, align 16
  br label %dynamic_jump_table.backedge

OP2436.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp7951 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 11, ptr %sp7951, align 16
  %1104 = add i64 %len.addr.197, -1
  %sp7953 = getelementptr i256, ptr %sp7951, i64 -1
  %1105 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr %sp7953, i8 17)
  %.not23620 = icmp eq i8 %1105, 0
  br i1 %.not23620, label %OP2439.JUMPDEST, label %return, !prof !6

OP2439.JUMPDEST:                                  ; preds = %OP2436.JUMPDEST, %dynamic_jump_table, %OP2414.JUMPDEST
  %len.addr.108 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %1104, %OP2436.JUMPDEST ], [ %len.addr.197, %OP2414.JUMPDEST ]
  %sp7956 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.108
  store i256 64, ptr %sp7956, align 16
  %1106 = add i64 %len.addr.108, 2
  %sp7960 = getelementptr i256, ptr %sp7956, i64 1
  store i256 64, ptr %sp7960, align 16
  %ecx.memory.i24309 = load ptr, ptr %ecx.memory.addr.i24415, align 8
  %ecx.memory.len.addr.i24310 = getelementptr inbounds i8, ptr %ecx.memory.i24309, i64 16
  %ecx.memory.len.i24311 = load i64, ptr %ecx.memory.len.addr.i24310, align 8, !noalias !66
  %ecx.memory.last_checkpoint.addr.i24312 = getelementptr inbounds i8, ptr %ecx.memory.i24309, i64 48
  %ecx.memory.last_checkpoint.i24313 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24312, align 8, !noalias !66
  %1107 = sub i64 %ecx.memory.len.i24311, %ecx.memory.last_checkpoint.i24313
  %1108 = icmp ult i64 %1107, 96
  br i1 %1108, label %resize.i24321, label %OP2442.MLOAD.contd, !prof !5

resize.i24321:                                    ; preds = %OP2439.JUMPDEST
  %1109 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !70
  %.not.i24322 = icmp eq i8 %1109, 0
  br i1 %.not.i24322, label %resize.i24321.OP2442.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24321.OP2442.MLOAD.contd_crit_edge:       ; preds = %resize.i24321
  %ecx.memory.i24325.pre = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !71
  br label %OP2442.MLOAD.contd

OP2442.MLOAD.contd:                               ; preds = %resize.i24321.OP2442.MLOAD.contd_crit_edge, %OP2439.JUMPDEST
  %ecx.memory.i24325 = phi ptr [ %ecx.memory.i24325.pre, %resize.i24321.OP2442.MLOAD.contd_crit_edge ], [ %ecx.memory.i24309, %OP2439.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i24315 = getelementptr inbounds i8, ptr %ecx.memory.i24309, i64 8
  %ecx.memory.buffer.ptr.shared.i24316 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24315, align 8, !noalias !66
  %ecx.memory.buffer.ptr.i24317 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24316, i64 %ecx.memory.last_checkpoint.i24313
  %slot.i24318 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24317, i64 64
  %slot.value.i24319 = load i256, ptr %slot.i24318, align 1, !noalias !66
  %1110 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24319)
  store i256 %1110, ptr %sp7960, align 16
  %1111 = add i64 %len.addr.108, 3
  %sp7968 = getelementptr i256, ptr %sp7956, i64 -4
  %dup67969 = load i256, ptr %sp7968, align 16
  %sp7970 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1106
  store i256 %dup67969, ptr %sp7970, align 16
  %sp7974 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1111
  store i256 %1110, ptr %sp7974, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !71)
  %ecx.memory.len.addr.i24326 = getelementptr inbounds i8, ptr %ecx.memory.i24325, i64 16
  %ecx.memory.len.i24327 = load i64, ptr %ecx.memory.len.addr.i24326, align 8, !noalias !71
  %ecx.memory.last_checkpoint.addr.i24328 = getelementptr inbounds i8, ptr %ecx.memory.i24325, i64 48
  %ecx.memory.last_checkpoint.i24329 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24328, align 8, !noalias !71
  %1112 = sub i64 %ecx.memory.len.i24327, %ecx.memory.last_checkpoint.i24329
  %1113 = icmp ugt i256 %1110, 18446744073709551615
  %1114 = trunc i256 %1110 to i64
  %1115 = add i64 %1114, 32
  %1116 = icmp ugt i64 %1114, -33
  %1117 = or i1 %1113, %1116
  %1118 = select i1 %1117, i64 -1, i64 %1115
  %1119 = icmp ugt i64 %1118, %1112
  br i1 %1119, label %resize.i24336, label %OP2446.PUSH1, !prof !5

resize.i24336:                                    ; preds = %OP2442.MLOAD.contd
  %1120 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1118)
  %.not.i24337 = icmp eq i8 %1120, 0
  br i1 %.not.i24337, label %OP2446.PUSH1, label %return, !prof !6

OP2446.PUSH1:                                     ; preds = %OP2442.MLOAD.contd, %resize.i24336
  %ecx.memory.buffer.ptr.shared.addr.i24331 = getelementptr inbounds i8, ptr %ecx.memory.i24325, i64 8
  %ecx.memory.buffer.ptr.shared.i24332 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24331, align 8, !noalias !71
  %ecx.memory.buffer.ptr.i24333 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24332, i64 %ecx.memory.last_checkpoint.i24329
  %slot.i24334 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24333, i64 %1114
  %1121 = tail call i256 @llvm.bswap.i256(i256 %dup67969)
  store i256 %1121, ptr %slot.i24334, align 1, !noalias !71
  %dup27984 = load i256, ptr %sp7960, align 16
  %1122 = add i256 %dup27984, 32
  %sp7993 = getelementptr i256, ptr %sp7956, i64 -3
  %dup67994 = load i256, ptr %sp7993, align 16
  store i256 %dup67994, ptr %sp7970, align 16
  store i256 %1122, ptr %sp7974, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !74)
  %ecx.memory.i24340 = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !74
  %ecx.memory.len.addr.i24341 = getelementptr inbounds i8, ptr %ecx.memory.i24340, i64 16
  %ecx.memory.len.i24342 = load i64, ptr %ecx.memory.len.addr.i24341, align 8, !noalias !74
  %ecx.memory.last_checkpoint.addr.i24343 = getelementptr inbounds i8, ptr %ecx.memory.i24340, i64 48
  %ecx.memory.last_checkpoint.i24344 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24343, align 8, !noalias !74
  %1123 = sub i64 %ecx.memory.len.i24342, %ecx.memory.last_checkpoint.i24344
  %1124 = icmp ugt i256 %1122, 18446744073709551615
  %1125 = trunc i256 %1122 to i64
  %1126 = add i64 %1125, 32
  %1127 = icmp ugt i64 %1125, -33
  %1128 = or i1 %1124, %1127
  %1129 = select i1 %1128, i64 -1, i64 %1126
  %1130 = icmp ugt i64 %1129, %1123
  br i1 %1130, label %resize.i24351, label %OP2452.DUP2, !prof !5

resize.i24351:                                    ; preds = %OP2446.PUSH1
  %1131 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1129)
  %.not.i24352 = icmp eq i8 %1131, 0
  br i1 %.not.i24352, label %OP2452.DUP2, label %return, !prof !6

OP2452.DUP2:                                      ; preds = %OP2446.PUSH1, %resize.i24351
  %ecx.memory.buffer.ptr.shared.addr.i24346 = getelementptr inbounds i8, ptr %ecx.memory.i24340, i64 8
  %ecx.memory.buffer.ptr.shared.i24347 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24346, align 8, !noalias !74
  %ecx.memory.buffer.ptr.i24348 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24347, i64 %ecx.memory.last_checkpoint.i24344
  %slot.i24349 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24348, i64 %1125
  %1132 = tail call i256 @llvm.bswap.i256(i256 %dup67994)
  store i256 %1132, ptr %slot.i24349, align 1, !noalias !74
  %dup28008 = load i256, ptr %sp7956, align 16
  store i256 %dup28008, ptr %sp7970, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !77)
  %ecx.memory.i24355 = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !77, !noalias !80
  %ecx.memory.len.addr.i24356 = getelementptr inbounds i8, ptr %ecx.memory.i24355, i64 16
  %ecx.memory.len.i24357 = load i64, ptr %ecx.memory.len.addr.i24356, align 8, !noalias !82
  %ecx.memory.last_checkpoint.addr.i24358 = getelementptr inbounds i8, ptr %ecx.memory.i24355, i64 48
  %ecx.memory.last_checkpoint.i24359 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24358, align 8, !noalias !82
  %1133 = sub i64 %ecx.memory.len.i24357, %ecx.memory.last_checkpoint.i24359
  %1134 = icmp ugt i256 %dup28008, 18446744073709551615
  %1135 = trunc i256 %dup28008 to i64
  %1136 = add i64 %1135, 32
  %1137 = icmp ugt i64 %1135, -33
  %1138 = or i1 %1134, %1137
  %1139 = select i1 %1138, i64 -1, i64 %1136
  %1140 = icmp ugt i64 %1139, %1133
  br i1 %1140, label %resize.i24367, label %OP2453.MLOAD.contd, !prof !5

resize.i24367:                                    ; preds = %OP2452.DUP2
  %1141 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1139), !noalias !80
  %.not.i24368 = icmp eq i8 %1141, 0
  br i1 %.not.i24368, label %resize.i24367.OP2453.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24367.OP2453.MLOAD.contd_crit_edge:       ; preds = %resize.i24367
  %swap.b8024.pre = load i256, ptr %sp7956, align 16
  br label %OP2453.MLOAD.contd

OP2453.MLOAD.contd:                               ; preds = %resize.i24367.OP2453.MLOAD.contd_crit_edge, %OP2452.DUP2
  %swap.b8024 = phi i256 [ %swap.b8024.pre, %resize.i24367.OP2453.MLOAD.contd_crit_edge ], [ %dup28008, %OP2452.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i24361 = getelementptr inbounds i8, ptr %ecx.memory.i24355, i64 8
  %ecx.memory.buffer.ptr.shared.i24362 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24361, align 8, !noalias !82
  %ecx.memory.buffer.ptr.i24363 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24362, i64 %ecx.memory.last_checkpoint.i24359
  %slot.i24364 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24363, i64 %1135
  %slot.value.i24365 = load i256, ptr %slot.i24364, align 1, !noalias !82
  %1142 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24365)
  %contract.caller8018 = load i160, ptr %contract.caller.addr10133, align 16
  %1143 = tail call i160 @llvm.bswap.i160(i160 %contract.caller8018)
  %1144 = zext i160 %1143 to i256
  store i256 %1144, ptr %sp7956, align 16
  %sp8026 = getelementptr i256, ptr %sp7956, i64 4
  %swap.b8031 = load i256, ptr %sp7960, align 16
  store i256 34433387951413595430405412356854898828466764899293492449908537295105018698831, ptr %sp7960, align 16
  %sp8035 = getelementptr i256, ptr %sp7956, i64 5
  store i256 %swap.b8031, ptr %sp8035, align 16
  %1145 = sub i256 %swap.b8031, %1142
  store i256 %1145, ptr %sp8026, align 16
  %1146 = add i256 %1145, %swap.b8024
  store i256 %1146, ptr %sp7970, align 16
  store i256 %1142, ptr %sp7974, align 16
  %1147 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7956, i8 2)
  %.not23626 = icmp eq i8 %1147, 0
  br i1 %.not23626, label %OP2464.POP, label %return, !prof !6

OP2464.POP:                                       ; preds = %OP2453.MLOAD.contd
  %sp8063 = getelementptr i256, ptr %sp7956, i64 -2
  store i256 1, ptr %sp8063, align 16
  %sp8065 = getelementptr i256, ptr %sp7956, i64 -1
  store i256 12, ptr %sp8065, align 16
  %1148 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8063, i8 17)
  %.not23627 = icmp eq i8 %1148, 0
  br i1 %.not23627, label %OP2469.POP, label %return.loopexit25073.split.loop.exit25314, !prof !6

OP2469.POP:                                       ; preds = %OP2464.POP
  %swap.a8071 = load i256, ptr %sp7968, align 16
  %sp8072 = getelementptr i256, ptr %sp7956, i64 -9
  %swap.b8073 = load i256, ptr %sp8072, align 16
  store i256 %swap.a8071, ptr %sp8072, align 16
  %sp8077 = getelementptr i256, ptr %sp7956, i64 -11
  %swap.b8078 = load i256, ptr %sp8077, align 16
  store i256 %swap.b8073, ptr %sp8077, align 16
  %sp8082 = getelementptr i256, ptr %sp7956, i64 -10
  %swap.b8083 = load i256, ptr %sp8082, align 16
  store i256 %swap.b8078, ptr %sp8082, align 16
  store i256 %swap.b8083, ptr %sp7968, align 16
  %1149 = add i64 %len.addr.108, -10
  br label %dynamic_jump_table.backedge

OP2480.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP688.JUMPDEST
  %len.addr.109 = phi i64 [ %321, %OP688.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp8095 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.109
  store i256 1, ptr %sp8095, align 16
  %sp8097 = getelementptr i256, ptr %sp8095, i64 1
  store i256 32, ptr %sp8097, align 16
  %1150 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 1, ptr %arg.ecx.addr)
  %.not23975 = icmp eq i8 %1150, 0
  br i1 %.not23975, label %OP2484.PUSH1, label %return, !prof !6

OP2484.PUSH1:                                     ; preds = %OP2480.JUMPDEST
  %sp8108 = getelementptr i256, ptr %sp8095, i64 -1
  %swap.b8109 = load i256, ptr %sp8108, align 16
  store i256 0, ptr %sp8108, align 16
  store i256 %swap.b8109, ptr %sp8095, align 16
  store i256 0, ptr %sp8097, align 16
  %1151 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %swap.b8109, ptr %arg.ecx.addr)
  %.not23976 = icmp eq i8 %1151, 0
  br i1 %.not23976, label %OP2488.PUSH1, label %return, !prof !6

OP2488.PUSH1:                                     ; preds = %OP2484.PUSH1
  %swap.b8125 = load i256, ptr %sp8108, align 16
  store i256 64, ptr %sp8108, align 16
  store i256 %swap.b8125, ptr %sp8095, align 16
  %1152 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8108)
  %.not23977 = icmp eq i8 %1152, 0
  br i1 %.not23977, label %OP2491.SLOAD, label %return, !prof !6

OP2491.SLOAD:                                     ; preds = %OP2488.PUSH1
  %1153 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8108, i8 17)
  %.not23978 = icmp eq i8 %1153, 0
  br i1 %.not23978, label %OP2492.DUP2, label %return, !prof !6

OP2492.DUP2:                                      ; preds = %OP2491.SLOAD
  %sp8131 = getelementptr i256, ptr %sp8095, i64 -2
  %dup28132 = load i256, ptr %sp8131, align 16
  store i256 %dup28132, ptr %sp8095, align 16
  br label %dynamic_jump_table.preheader

OP2494.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP695.JUMPDEST
  %len.addr.110 = phi i64 [ %326, %OP695.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1154 = add i64 %len.addr.110, 1
  %sp8139 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.110
  store i256 11, ptr %sp8139, align 16
  %1155 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8139, i8 17)
  %.not23973 = icmp eq i8 %1155, 0
  br i1 %.not23973, label %OP2497.DUP2, label %return, !prof !6

OP2497.DUP2:                                      ; preds = %OP2494.JUMPDEST
  %sp8143 = getelementptr i256, ptr %sp8139, i64 -1
  %dup28144 = load i256, ptr %sp8143, align 16
  %sp8145 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1154
  store i256 %dup28144, ptr %sp8145, align 16
  br label %dynamic_jump_table.preheader

OP2499.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP714.JUMPDEST
  %len.addr.111 = phi i64 [ %333, %OP714.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp8151 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.111
  store i256 4, ptr %sp8151, align 16
  %sp8153 = getelementptr i256, ptr %sp8151, i64 1
  store i256 32, ptr %sp8153, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !83)
  %ecx.memory.addr.i24370 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24371 = load ptr, ptr %ecx.memory.addr.i24370, align 8, !alias.scope !83
  %ecx.memory.len.addr.i24372 = getelementptr inbounds i8, ptr %ecx.memory.i24371, i64 16
  %ecx.memory.len.i24373 = load i64, ptr %ecx.memory.len.addr.i24372, align 8, !noalias !83
  %ecx.memory.last_checkpoint.addr.i24374 = getelementptr inbounds i8, ptr %ecx.memory.i24371, i64 48
  %ecx.memory.last_checkpoint.i24375 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24374, align 8, !noalias !83
  %1156 = sub i64 %ecx.memory.len.i24373, %ecx.memory.last_checkpoint.i24375
  %1157 = icmp ult i64 %1156, 64
  br i1 %1157, label %resize.i24382, label %OP2503.PUSH1, !prof !5

resize.i24382:                                    ; preds = %OP2499.JUMPDEST
  %1158 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i24383 = icmp eq i8 %1158, 0
  br i1 %.not.i24383, label %OP2503.PUSH1, label %return, !prof !6

OP2503.PUSH1:                                     ; preds = %OP2499.JUMPDEST, %resize.i24382
  %ecx.memory.buffer.ptr.shared.addr.i24377 = getelementptr inbounds i8, ptr %ecx.memory.i24371, i64 8
  %ecx.memory.buffer.ptr.shared.i24378 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24377, align 8, !noalias !83
  %ecx.memory.buffer.ptr.i24379 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24378, i64 %ecx.memory.last_checkpoint.i24375
  %slot.i24380 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24379, i64 32
  store i256 1809251394333065553493296640760748560207343510400633813116524750123642650624, ptr %slot.i24380, align 1, !noalias !83
  %sp8164 = getelementptr i256, ptr %sp8151, i64 -1
  %swap.b8165 = load i256, ptr %sp8164, align 16
  store i256 0, ptr %sp8164, align 16
  store i256 %swap.b8165, ptr %sp8151, align 16
  store i256 0, ptr %sp8153, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !86)
  %ecx.memory.i24386 = load ptr, ptr %ecx.memory.addr.i24370, align 8, !alias.scope !86
  %ecx.memory.len.addr.i24387 = getelementptr inbounds i8, ptr %ecx.memory.i24386, i64 16
  %ecx.memory.len.i24388 = load i64, ptr %ecx.memory.len.addr.i24387, align 8, !noalias !86
  %ecx.memory.last_checkpoint.addr.i24389 = getelementptr inbounds i8, ptr %ecx.memory.i24386, i64 48
  %ecx.memory.last_checkpoint.i24390 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24389, align 8, !noalias !86
  %1159 = sub i64 %ecx.memory.len.i24388, %ecx.memory.last_checkpoint.i24390
  %1160 = icmp ult i64 %1159, 32
  br i1 %1160, label %resize.i24396, label %OP2507.PUSH1, !prof !5

resize.i24396:                                    ; preds = %OP2503.PUSH1
  %1161 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i24397 = icmp eq i8 %1161, 0
  br i1 %.not.i24397, label %OP2507.PUSH1, label %return, !prof !6

OP2507.PUSH1:                                     ; preds = %OP2503.PUSH1, %resize.i24396
  %ecx.memory.buffer.ptr.shared.addr.i24392 = getelementptr inbounds i8, ptr %ecx.memory.i24386, i64 8
  %ecx.memory.buffer.ptr.shared.i24393 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24392, align 8, !noalias !86
  %ecx.memory.buffer.ptr.i24394 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24393, i64 %ecx.memory.last_checkpoint.i24390
  %1162 = tail call i256 @llvm.bswap.i256(i256 %swap.b8165)
  store i256 %1162, ptr %ecx.memory.buffer.ptr.i24394, align 1, !noalias !86
  %swap.b8181 = load i256, ptr %sp8164, align 16
  store i256 64, ptr %sp8164, align 16
  store i256 %swap.b8181, ptr %sp8151, align 16
  %1163 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8164)
  %.not23971 = icmp eq i8 %1163, 0
  br i1 %.not23971, label %OP2510.SLOAD, label %return, !prof !6

OP2510.SLOAD:                                     ; preds = %OP2507.PUSH1
  %1164 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8164, i8 17)
  %.not23972 = icmp eq i8 %1164, 0
  br i1 %.not23972, label %OP2511.DUP2, label %return, !prof !6

OP2511.DUP2:                                      ; preds = %OP2510.SLOAD
  %sp8187 = getelementptr i256, ptr %sp8151, i64 -2
  %dup28188 = load i256, ptr %sp8187, align 16
  store i256 %dup28188, ptr %sp8151, align 16
  br label %dynamic_jump_table.preheader

OP2513.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP736.JUMPDEST
  %len.addr.112 = phi i64 [ %344, %OP736.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp8195 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.112
  %1165 = add i64 %len.addr.112, 2
  %1166 = add i64 %len.addr.112, 3
  %sp8201 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1165
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp8195, i8 0, i64 64, i1 false)
  store i256 12, ptr %sp8201, align 16
  %1167 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8201, i8 17)
  %.not23959 = icmp eq i8 %1167, 0
  br i1 %.not23959, label %OP2518.PUSH1, label %return, !prof !6

OP2518.PUSH1:                                     ; preds = %OP2513.JUMPDEST
  %1168 = add i64 %len.addr.112, 4
  %sp8205 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1166
  store i256 1, ptr %sp8205, align 16
  %b8210 = load i256, ptr %sp8201, align 16
  %1169 = icmp eq i256 %b8210, 1
  %1170 = zext i1 %1169 to i256
  store i256 %1170, ptr %sp8201, align 16
  br i1 %1169, label %OP2553.JUMPDEST, label %OP2522.PUSH1

OP2522.PUSH1:                                     ; preds = %OP2518.PUSH1
  store i256 64, ptr %sp8201, align 16
  store i256 64, ptr %sp8205, align 16
  %mload.out.slot8224 = alloca i256, align 16
  %1171 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot8224, ptr %arg.ecx.addr)
  %.not23960 = icmp eq i8 %1171, 0
  br i1 %.not23960, label %OP2524.MLOAD.contd, label %return, !prof !6

OP2524.MLOAD.contd:                               ; preds = %OP2522.PUSH1
  %mload.out8225 = load i256, ptr %mload.out.slot8224, align 16
  store i256 %mload.out8225, ptr %sp8205, align 16
  %sp8228 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1168
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp8228, align 16
  %sp8232 = getelementptr i256, ptr %sp8195, i64 5
  store i256 %mload.out8225, ptr %sp8232, align 16
  %1172 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out8225, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23961 = icmp eq i8 %1172, 0
  br i1 %.not23961, label %OP2528.PUSH1, label %return, !prof !6

OP2528.PUSH1:                                     ; preds = %OP2524.MLOAD.contd
  store i256 32, ptr %sp8228, align 16
  %dup38244 = load i256, ptr %sp8205, align 16
  %sp8245 = getelementptr i256, ptr %sp8195, i64 6
  store i256 %dup38244, ptr %sp8245, align 16
  %1173 = add i256 %dup38244, 4
  store i256 %1173, ptr %sp8232, align 16
  %1174 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1173, i256 32, ptr %arg.ecx.addr)
  %.not23962 = icmp eq i8 %1174, 0
  br i1 %.not23962, label %OP2533.PUSH1, label %return, !prof !6

OP2533.PUSH1:                                     ; preds = %OP2528.PUSH1
  store i256 17, ptr %sp8228, align 16
  %dup38263 = load i256, ptr %sp8205, align 16
  store i256 %dup38263, ptr %sp8245, align 16
  %1175 = add i256 %dup38263, 36
  store i256 %1175, ptr %sp8232, align 16
  %1176 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1175, i256 17, ptr %arg.ecx.addr)
  %.not23963 = icmp eq i8 %1176, 0
  br i1 %.not23963, label %OP2538.PUSH32, label %return, !prof !6

OP2538.PUSH32:                                    ; preds = %OP2533.PUSH1
  store i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %sp8228, align 16
  %dup38282 = load i256, ptr %sp8205, align 16
  store i256 %dup38282, ptr %sp8245, align 16
  %1177 = add i256 %dup38282, 68
  store i256 %1177, ptr %sp8232, align 16
  %1178 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1177, i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %arg.ecx.addr)
  %.not23964 = icmp eq i8 %1178, 0
  br i1 %.not23964, label %OP2543.SWAP1, label %return, !prof !6

OP2543.SWAP1:                                     ; preds = %OP2538.PUSH32
  %swap.a8297 = load i256, ptr %sp8205, align 16
  %swap.b8299 = load i256, ptr %sp8201, align 16
  store i256 %swap.a8297, ptr %sp8201, align 16
  store i256 %swap.b8299, ptr %sp8205, align 16
  %mload.out.slot8303 = alloca i256, align 16
  %1179 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b8299, ptr %mload.out.slot8303, ptr %arg.ecx.addr)
  %.not23965 = icmp eq i8 %1179, 0
  br i1 %.not23965, label %OP2544.MLOAD.contd, label %return, !prof !6

OP2544.MLOAD.contd:                               ; preds = %OP2543.SWAP1
  %mload.out8304 = load i256, ptr %mload.out.slot8303, align 16
  %swap.b8310 = load i256, ptr %sp8201, align 16
  %1180 = sub i256 %swap.b8310, %mload.out8304
  store i256 100, ptr %sp8228, align 16
  %1181 = add i256 %1180, 100
  store i256 %1181, ptr %sp8201, align 16
  store i256 %mload.out8304, ptr %sp8205, align 16
  %1182 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8201, i8 16)
  %.not23966 = icmp eq i8 %1182, 0
  %spec.select17779 = select i1 %.not23966, i8 16, i8 %1182, !prof !6
  br label %return

OP2553.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2518.PUSH1
  %len.addr.113 = phi i64 [ %1165, %OP2518.PUSH1 ], [ %len.addr.197, %dynamic_jump_table ]
  %1183 = add i64 %len.addr.113, 1
  %sp8343 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.113
  store i256 0, ptr %sp8343, align 16
  %sp8345 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1183
  %sp8349 = getelementptr i256, ptr %sp8343, i64 2
  store i256 0, ptr %sp8345, align 16
  store i256 12, ptr %sp8349, align 16
  %1184 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8345, i8 17)
  %.not23967 = icmp eq i8 %1184, 0
  br i1 %.not23967, label %OP2559.DUP1, label %return, !prof !6

OP2559.DUP1:                                      ; preds = %OP2553.JUMPDEST
  %1185 = add i64 %len.addr.113, 3
  %dup18359 = load i256, ptr %sp8343, align 16
  store i256 %dup18359, ptr %sp8345, align 16
  store i256 5241, ptr %sp8349, align 16
  br label %OP1770.JUMPDEST

OP2563.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1186 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp8367 = getelementptr i256, ptr %1186, i64 -1
  store i256 6, ptr %sp8367, align 16
  %1187 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8367, i8 17)
  %.not23611 = icmp eq i8 %1187, 0
  br i1 %.not23611, label %OP2567.PUSH1, label %return, !prof !6

OP2567.PUSH1:                                     ; preds = %OP2563.JUMPDEST
  %1188 = add i64 %len.addr.197, 1
  store i256 7, ptr %1186, align 16
  %1189 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %1186, i8 17)
  %.not23612 = icmp eq i8 %1189, 0
  br i1 %.not23612, label %OP2569.PUSH1, label %return, !prof !6

OP2569.PUSH1:                                     ; preds = %OP2567.PUSH1
  %sp8375 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1188
  store i256 64, ptr %sp8375, align 16
  %1190 = add i64 %len.addr.197, 3
  %sp8379 = getelementptr i256, ptr %1186, i64 2
  store i256 64, ptr %sp8379, align 16
  %mload.out.slot8383 = alloca i256, align 16
  %1191 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot8383, ptr %arg.ecx.addr)
  %.not23613 = icmp eq i8 %1191, 0
  br i1 %.not23613, label %OP2571.MLOAD.contd, label %return, !prof !6

OP2571.MLOAD.contd:                               ; preds = %OP2569.PUSH1
  %mload.out8384 = load i256, ptr %mload.out.slot8383, align 16
  store i256 %mload.out8384, ptr %sp8379, align 16
  %sp8387 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1190
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp8387, align 16
  %sp8391 = getelementptr i256, ptr %1186, i64 4
  store i256 %mload.out8384, ptr %sp8391, align 16
  %1192 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out8384, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23614 = icmp eq i8 %1192, 0
  br i1 %.not23614, label %OP2575.ADDRESS, label %return, !prof !6

OP2575.ADDRESS:                                   ; preds = %OP2571.MLOAD.contd
  %contract.target_address8399 = load i160, ptr %contract.target_address.addr9353, align 16
  %1193 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address8399)
  %1194 = zext i160 %1193 to i256
  store i256 %1194, ptr %sp8387, align 16
  %dup38405 = load i256, ptr %sp8379, align 16
  %sp8406 = getelementptr i256, ptr %1186, i64 5
  store i256 %dup38405, ptr %sp8406, align 16
  %1195 = add i256 %dup38405, 4
  store i256 %1195, ptr %sp8391, align 16
  %1196 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1195, i256 %1194, ptr %arg.ecx.addr)
  %.not23615 = icmp eq i8 %1196, 0
  br i1 %.not23615, label %OP2580.SWAP1, label %return, !prof !6

OP2580.SWAP1:                                     ; preds = %OP2575.ADDRESS
  %swap.a8420 = load i256, ptr %sp8379, align 16
  %swap.b8422 = load i256, ptr %sp8375, align 16
  store i256 %swap.a8420, ptr %sp8375, align 16
  store i256 %swap.b8422, ptr %sp8379, align 16
  %mload.out.slot8426 = alloca i256, align 16
  %1197 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b8422, ptr %mload.out.slot8426, ptr %arg.ecx.addr)
  %.not23616 = icmp eq i8 %1197, 0
  br i1 %.not23616, label %OP2581.MLOAD.contd, label %return, !prof !6

OP2581.MLOAD.contd:                               ; preds = %OP2580.SWAP1
  %mload.out8427 = load i256, ptr %mload.out.slot8426, align 16
  %sp8432 = getelementptr i256, ptr %1186, i64 -3
  %swap.b8433 = load i256, ptr %sp8432, align 16
  %sp8437 = getelementptr i256, ptr %1186, i64 -5
  store i256 %swap.b8433, ptr %sp8437, align 16
  %swap.a8442 = load i256, ptr %sp8375, align 16
  %sp8443 = getelementptr i256, ptr %1186, i64 -2
  %swap.b8444 = load i256, ptr %sp8443, align 16
  %sp8448 = getelementptr i256, ptr %1186, i64 -4
  store i256 %swap.b8444, ptr %sp8448, align 16
  %swap.b8457 = load i256, ptr %sp8367, align 16
  %1198 = and i256 %swap.b8457, 1461501637330902918203684832716283019655932542975
  store i256 %1198, ptr %sp8432, align 16
  %b8482 = load i256, ptr %1186, align 16
  %1199 = and i256 %b8482, 1461501637330902918203684832716283019655932542975
  store i256 %1199, ptr %sp8443, align 16
  store i256 0, ptr %sp8367, align 16
  store i256 %1198, ptr %1186, align 16
  store i256 1889567281, ptr %sp8375, align 16
  %sp8521 = getelementptr i256, ptr %1186, i64 6
  %1200 = add i256 %swap.a8442, 36
  store i256 %1200, ptr %sp8379, align 16
  %sp8538 = getelementptr i256, ptr %1186, i64 3
  store i256 32, ptr %sp8538, align 16
  store i256 %mload.out8427, ptr %sp8391, align 16
  %sp8553 = getelementptr i256, ptr %1186, i64 7
  %1201 = sub i256 %swap.a8442, %mload.out8427
  %1202 = add i256 %1201, 36
  store i256 %1202, ptr %sp8406, align 16
  store i256 %mload.out8427, ptr %sp8521, align 16
  store i256 %1198, ptr %sp8553, align 16
  %1203 = add i64 %len.addr.197, 9
  %sp8582 = getelementptr i256, ptr %1186, i64 8
  store i256 %1198, ptr %sp8582, align 16
  %1204 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8582, i8 17)
  %.not23617 = icmp eq i8 %1204, 0
  br i1 %.not23617, label %OP2619.ISZERO, label %return, !prof !6

OP2619.ISZERO:                                    ; preds = %OP2581.MLOAD.contd
  %a8587 = load i256, ptr %sp8582, align 16
  %1205 = icmp eq i256 %a8587, 0
  %1206 = zext i1 %1205 to i256
  store i256 %1206, ptr %sp8582, align 16
  %sp8592 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1203
  %1207 = xor i1 %1205, true
  %1208 = zext i1 %1207 to i256
  store i256 %1208, ptr %sp8592, align 16
  br i1 %1205, label %OP2624.PUSH1, label %OP2627.JUMPDEST

OP2624.PUSH1:                                     ; preds = %OP2619.ISZERO
  store i256 0, ptr %sp8592, align 16
  %sp8605 = getelementptr i256, ptr %1186, i64 10
  store i256 0, ptr %sp8605, align 16
  %1209 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8592, i8 16)
  %.not23618 = icmp eq i8 %1209, 0
  %spec.select17780 = select i1 %.not23618, i8 16, i8 %1209, !prof !6
  br label %return

OP2627.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2619.ISZERO
  %len.addr.114 = phi i64 [ %1203, %OP2619.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining8611 = load i64, ptr %gas.remaining.addr, align 8
  %1210 = zext i64 %gas.remaining8611 to i256
  %1211 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.114
  %sp8612 = getelementptr i256, ptr %1211, i64 -1
  store i256 %1210, ptr %sp8612, align 16
  %1212 = add i64 %len.addr.114, -6
  %sp8614 = getelementptr i256, ptr %1211, i64 -6
  %1213 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp8614, i8 17, i8 3)
  %.not23619 = icmp eq i8 %1213, 0
  br i1 %.not23619, label %suspend, label %return, !prof !6

OP2631.ISZERO:                                    ; preds = %resume
  %1214 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp8616 = getelementptr i256, ptr %1214, i64 -1
  %a8617 = load i256, ptr %sp8616, align 16
  %1215 = icmp eq i256 %a8617, 0
  %1216 = zext i1 %1215 to i256
  store i256 %1216, ptr %sp8616, align 16
  %1217 = xor i1 %1215, true
  %1218 = zext i1 %1217 to i256
  store i256 %1218, ptr %1214, align 16
  br i1 %1215, label %OP2636.RETURNDATASIZE, label %OP2643.JUMPDEST

OP2636.RETURNDATASIZE:                            ; preds = %OP2631.ISZERO
  %ecx.return_data.len.addr8631 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len8632 = load i64, ptr %ecx.return_data.len.addr8631, align 8
  %1219 = zext i64 %ecx.return_data.len8632 to i256
  store i256 %1219, ptr %1214, align 16
  %sp8635 = getelementptr i256, ptr %1214, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp8635, i8 0, i64 64, i1 false)
  %1220 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1214)
  %.not23389 = icmp eq i8 %1220, 0
  br i1 %.not23389, label %OP2640.RETURNDATASIZE, label %return, !prof !6

OP2640.RETURNDATASIZE:                            ; preds = %OP2636.RETURNDATASIZE
  %ecx.return_data.len8644 = load i64, ptr %ecx.return_data.len.addr8631, align 8
  %1221 = zext i64 %ecx.return_data.len8644 to i256
  store i256 %1221, ptr %1214, align 16
  store i256 0, ptr %sp8635, align 16
  %1222 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1214, i8 16)
  %.not23390 = icmp eq i8 %1222, 0
  %spec.select17781 = select i1 %.not23390, i8 16, i8 %1222, !prof !6
  br label %return

OP2643.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2631.ISZERO
  %len.addr.115 = phi i64 [ %stack_len17730, %OP2631.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1223 = add i64 %len.addr.115, -3
  %1224 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.115
  %sp8656 = getelementptr i256, ptr %1224, i64 -4
  store i256 64, ptr %sp8656, align 16
  %mload.out.slot8660 = alloca i256, align 16
  %1225 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot8660, ptr %arg.ecx.addr)
  %.not23601 = icmp eq i8 %1225, 0
  br i1 %.not23601, label %OP2649.MLOAD.contd, label %return, !prof !6

OP2649.MLOAD.contd:                               ; preds = %OP2643.JUMPDEST
  %1226 = add i64 %len.addr.115, -2
  %mload.out8661 = load i256, ptr %mload.out.slot8660, align 16
  store i256 %mload.out8661, ptr %sp8656, align 16
  %ecx.return_data.len.addr8664 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len8665 = load i64, ptr %ecx.return_data.len.addr8664, align 8
  %1227 = zext i64 %ecx.return_data.len8665 to i256
  %sp8666 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1223
  store i256 %1227, ptr %sp8666, align 16
  %sp8668 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1226
  %sp8672 = getelementptr i256, ptr %1224, i64 -1
  store i256 %1227, ptr %sp8672, align 16
  %1228 = icmp ugt i64 %ecx.return_data.len8665, 31
  %1229 = zext i1 %1228 to i256
  store i256 %1229, ptr %sp8668, align 16
  br i1 %1228, label %OP2660.JUMPDEST, label %OP2657.PUSH1

OP2657.PUSH1:                                     ; preds = %OP2649.MLOAD.contd
  store i256 0, ptr %sp8668, align 16
  %sp8689 = getelementptr i256, ptr %1224, i64 -2
  store i256 0, ptr %sp8672, align 16
  %1230 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8689, i8 16)
  %.not23602 = icmp eq i8 %1230, 0
  %spec.select17782 = select i1 %.not23602, i8 16, i8 %1230, !prof !6
  br label %return

OP2660.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2649.MLOAD.contd
  %len.addr.116 = phi i64 [ %1226, %OP2649.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1231 = add i64 %len.addr.116, -1
  %1232 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.116
  %sp8697 = getelementptr i256, ptr %1232, i64 -2
  %a8698 = load i256, ptr %sp8697, align 16
  %mload.out.slot8699 = alloca i256, align 16
  %1233 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a8698, ptr %mload.out.slot8699, ptr %arg.ecx.addr)
  %.not23603 = icmp eq i8 %1233, 0
  br i1 %.not23603, label %OP2662.MLOAD.contd, label %return, !prof !6

OP2662.MLOAD.contd:                               ; preds = %OP2660.JUMPDEST
  %mload.out8700 = load i256, ptr %mload.out.slot8699, align 16
  store i256 %mload.out8700, ptr %sp8697, align 16
  %sp8703 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1231
  store i256 64, ptr %sp8703, align 16
  %1234 = add i64 %len.addr.116, 1
  %sp8705 = getelementptr i256, ptr %1232, i64 -1
  store i256 64, ptr %1232, align 16
  %mload.out.slot8711 = alloca i256, align 16
  %1235 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot8711, ptr %arg.ecx.addr)
  %.not23604 = icmp eq i8 %1235, 0
  br i1 %.not23604, label %OP2665.MLOAD.contd, label %return, !prof !6

OP2665.MLOAD.contd:                               ; preds = %OP2662.MLOAD.contd
  %mload.out8712 = load i256, ptr %mload.out.slot8711, align 16
  store i256 %mload.out8712, ptr %1232, align 16
  %sp8715 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1234
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp8715, align 16
  %sp8719 = getelementptr i256, ptr %1232, i64 2
  store i256 %mload.out8712, ptr %sp8719, align 16
  %1236 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out8712, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23605 = icmp eq i8 %1236, 0
  br i1 %.not23605, label %OP2669.ADDRESS, label %return, !prof !6

OP2669.ADDRESS:                                   ; preds = %OP2665.MLOAD.contd
  %contract.target_address.addr8726 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address8727 = load i160, ptr %contract.target_address.addr8726, align 16
  %1237 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address8727)
  %1238 = zext i160 %1237 to i256
  store i256 %1238, ptr %sp8715, align 16
  %dup38733 = load i256, ptr %1232, align 16
  %sp8734 = getelementptr i256, ptr %1232, i64 3
  store i256 %dup38733, ptr %sp8734, align 16
  %1239 = add i256 %dup38733, 4
  store i256 %1239, ptr %sp8719, align 16
  %1240 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1239, i256 %1238, ptr %arg.ecx.addr)
  %.not23606 = icmp eq i8 %1240, 0
  br i1 %.not23606, label %OP2674.SWAP1, label %return, !prof !6

OP2674.SWAP1:                                     ; preds = %OP2669.ADDRESS
  %swap.a8748 = load i256, ptr %1232, align 16
  %swap.b8750 = load i256, ptr %sp8705, align 16
  store i256 %swap.a8748, ptr %sp8705, align 16
  store i256 %swap.b8750, ptr %1232, align 16
  %mload.out.slot8754 = alloca i256, align 16
  %1241 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b8750, ptr %mload.out.slot8754, ptr %arg.ecx.addr)
  %.not23607 = icmp eq i8 %1241, 0
  br i1 %.not23607, label %OP2675.MLOAD.contd, label %return, !prof !6

OP2675.MLOAD.contd:                               ; preds = %OP2674.SWAP1
  %mload.out8755 = load i256, ptr %mload.out.slot8754, align 16
  %swap.b8761 = load i256, ptr %sp8697, align 16
  %sp8765 = getelementptr i256, ptr %1232, i64 -3
  store i256 %swap.b8761, ptr %sp8765, align 16
  store i256 0, ptr %sp8697, align 16
  %sp8778 = getelementptr i256, ptr %1232, i64 -4
  %dup68779 = load i256, ptr %sp8778, align 16
  %1242 = and i256 %dup68779, 1461501637330902918203684832716283019655932542975
  %swap.b8791 = load i256, ptr %sp8705, align 16
  store i256 %1242, ptr %sp8705, align 16
  store i256 1889567281, ptr %1232, align 16
  %sp8804 = getelementptr i256, ptr %1232, i64 4
  %sp8806 = getelementptr i256, ptr %1232, i64 1
  %sp8808 = getelementptr i256, ptr %1232, i64 5
  %1243 = add i256 %swap.b8791, 36
  store i256 %1243, ptr %sp8806, align 16
  store i256 32, ptr %sp8719, align 16
  store i256 %mload.out8755, ptr %sp8734, align 16
  %sp8840 = getelementptr i256, ptr %1232, i64 6
  %1244 = sub i256 %swap.b8791, %mload.out8755
  %1245 = add i256 %1244, 36
  store i256 %1245, ptr %sp8804, align 16
  store i256 %mload.out8755, ptr %sp8808, align 16
  store i256 %1242, ptr %sp8840, align 16
  %1246 = add i64 %len.addr.116, 8
  %sp8869 = getelementptr i256, ptr %1232, i64 7
  store i256 %1242, ptr %sp8869, align 16
  %1247 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8869, i8 17)
  %.not23608 = icmp eq i8 %1247, 0
  br i1 %.not23608, label %OP2704.ISZERO, label %return, !prof !6

OP2704.ISZERO:                                    ; preds = %OP2675.MLOAD.contd
  %a8874 = load i256, ptr %sp8869, align 16
  %1248 = icmp eq i256 %a8874, 0
  %1249 = zext i1 %1248 to i256
  store i256 %1249, ptr %sp8869, align 16
  %sp8879 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1246
  %1250 = xor i1 %1248, true
  %1251 = zext i1 %1250 to i256
  store i256 %1251, ptr %sp8879, align 16
  br i1 %1248, label %OP2709.PUSH1, label %OP2712.JUMPDEST

OP2709.PUSH1:                                     ; preds = %OP2704.ISZERO
  store i256 0, ptr %sp8879, align 16
  %sp8892 = getelementptr i256, ptr %1232, i64 9
  store i256 0, ptr %sp8892, align 16
  %1252 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8879, i8 16)
  %.not23609 = icmp eq i8 %1252, 0
  %spec.select17783 = select i1 %.not23609, i8 16, i8 %1252, !prof !6
  br label %return

OP2712.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2704.ISZERO
  %len.addr.117 = phi i64 [ %1246, %OP2704.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining8898 = load i64, ptr %gas.remaining.addr, align 8
  %1253 = zext i64 %gas.remaining8898 to i256
  %1254 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.117
  %sp8899 = getelementptr i256, ptr %1254, i64 -1
  store i256 %1253, ptr %sp8899, align 16
  %1255 = add i64 %len.addr.117, -6
  %sp8901 = getelementptr i256, ptr %1254, i64 -6
  %1256 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp8901, i8 17, i8 3)
  %.not23610 = icmp eq i8 %1256, 0
  br i1 %.not23610, label %suspend, label %return, !prof !6

OP2716.ISZERO:                                    ; preds = %resume
  %1257 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp8903 = getelementptr i256, ptr %1257, i64 -1
  %a8904 = load i256, ptr %sp8903, align 16
  %1258 = icmp eq i256 %a8904, 0
  %1259 = zext i1 %1258 to i256
  store i256 %1259, ptr %sp8903, align 16
  %1260 = xor i1 %1258, true
  %1261 = zext i1 %1260 to i256
  store i256 %1261, ptr %1257, align 16
  br i1 %1258, label %OP2721.RETURNDATASIZE, label %OP2728.JUMPDEST

OP2721.RETURNDATASIZE:                            ; preds = %OP2716.ISZERO
  %ecx.return_data.len.addr8918 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len8919 = load i64, ptr %ecx.return_data.len.addr8918, align 8
  %1262 = zext i64 %ecx.return_data.len8919 to i256
  store i256 %1262, ptr %1257, align 16
  %sp8922 = getelementptr i256, ptr %1257, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp8922, i8 0, i64 64, i1 false)
  %1263 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1257)
  %.not23387 = icmp eq i8 %1263, 0
  br i1 %.not23387, label %OP2725.RETURNDATASIZE, label %return, !prof !6

OP2725.RETURNDATASIZE:                            ; preds = %OP2721.RETURNDATASIZE
  %ecx.return_data.len8931 = load i64, ptr %ecx.return_data.len.addr8918, align 8
  %1264 = zext i64 %ecx.return_data.len8931 to i256
  store i256 %1264, ptr %1257, align 16
  store i256 0, ptr %sp8922, align 16
  %1265 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1257, i8 16)
  %.not23388 = icmp eq i8 %1265, 0
  %spec.select17784 = select i1 %.not23388, i8 16, i8 %1265, !prof !6
  br label %return

OP2728.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2716.ISZERO
  %len.addr.118 = phi i64 [ %stack_len17730, %OP2716.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1266 = add i64 %len.addr.118, -3
  %1267 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.118
  %sp8943 = getelementptr i256, ptr %1267, i64 -4
  store i256 64, ptr %sp8943, align 16
  %mload.out.slot8947 = alloca i256, align 16
  %1268 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot8947, ptr %arg.ecx.addr)
  %.not23594 = icmp eq i8 %1268, 0
  br i1 %.not23594, label %OP2734.MLOAD.contd, label %return, !prof !6

OP2734.MLOAD.contd:                               ; preds = %OP2728.JUMPDEST
  %1269 = add i64 %len.addr.118, -2
  %mload.out8948 = load i256, ptr %mload.out.slot8947, align 16
  store i256 %mload.out8948, ptr %sp8943, align 16
  %ecx.return_data.len.addr8951 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len8952 = load i64, ptr %ecx.return_data.len.addr8951, align 8
  %1270 = zext i64 %ecx.return_data.len8952 to i256
  %sp8953 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1266
  store i256 %1270, ptr %sp8953, align 16
  %sp8955 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1269
  %sp8959 = getelementptr i256, ptr %1267, i64 -1
  store i256 %1270, ptr %sp8959, align 16
  %1271 = icmp ugt i64 %ecx.return_data.len8952, 31
  %1272 = zext i1 %1271 to i256
  store i256 %1272, ptr %sp8955, align 16
  br i1 %1271, label %OP2745.JUMPDEST, label %OP2742.PUSH1

OP2742.PUSH1:                                     ; preds = %OP2734.MLOAD.contd
  store i256 0, ptr %sp8955, align 16
  %sp8976 = getelementptr i256, ptr %1267, i64 -2
  store i256 0, ptr %sp8959, align 16
  %1273 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8976, i8 16)
  %.not23595 = icmp eq i8 %1273, 0
  %spec.select17785 = select i1 %.not23595, i8 16, i8 %1273, !prof !6
  br label %return

OP2745.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2734.MLOAD.contd
  %len.addr.119 = phi i64 [ %1269, %OP2734.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1274 = add i64 %len.addr.119, -1
  %1275 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.119
  %sp8984 = getelementptr i256, ptr %1275, i64 -2
  %a8985 = load i256, ptr %sp8984, align 16
  %mload.out.slot8986 = alloca i256, align 16
  %1276 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a8985, ptr %mload.out.slot8986, ptr %arg.ecx.addr)
  %.not23596 = icmp eq i8 %1276, 0
  br i1 %.not23596, label %OP2747.MLOAD.contd, label %return, !prof !6

OP2747.MLOAD.contd:                               ; preds = %OP2745.JUMPDEST
  %mload.out8987 = load i256, ptr %mload.out.slot8986, align 16
  store i256 %mload.out8987, ptr %sp8984, align 16
  %contract.target_address.addr8990 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address8991 = load i160, ptr %contract.target_address.addr8990, align 16
  %1277 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address8991)
  %1278 = zext i160 %1277 to i256
  %1279 = add i64 %len.addr.119, 1
  %sp8998 = getelementptr i256, ptr %1275, i64 -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp8998, i8 0, i64 32, i1 false)
  store i256 %1278, ptr %1275, align 16
  %sp9003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1279
  store i256 0, ptr %sp9003, align 16
  %1280 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %1278, ptr %arg.ecx.addr)
  %.not23597 = icmp eq i8 %1280, 0
  br i1 %.not23597, label %OP2753.PUSH1, label %return, !prof !6

OP2753.PUSH1:                                     ; preds = %OP2747.MLOAD.contd
  store i256 1, ptr %1275, align 16
  store i256 32, ptr %sp9003, align 16
  %1281 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 1, ptr %arg.ecx.addr)
  %.not23598 = icmp eq i8 %1281, 0
  br i1 %.not23598, label %OP2756.PUSH1, label %return, !prof !6

OP2756.PUSH1:                                     ; preds = %OP2753.PUSH1
  store i256 64, ptr %1275, align 16
  %dup29022 = load i256, ptr %sp8998, align 16
  store i256 %dup29022, ptr %sp9003, align 16
  %1282 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %1275)
  %.not23599 = icmp eq i8 %1282, 0
  br i1 %.not23599, label %OP2759.SLOAD, label %return, !prof !6

OP2759.SLOAD:                                     ; preds = %OP2756.PUSH1
  %1283 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %1275, i8 17)
  %.not23600 = icmp eq i8 %1283, 0
  br i1 %.not23600, label %OP2760.SWAP2, label %return, !prof !6

OP2760.SWAP2:                                     ; preds = %OP2759.SLOAD
  %swap.a9030 = load i256, ptr %1275, align 16
  %swap.b9032 = load i256, ptr %sp8984, align 16
  store i256 %swap.a9030, ptr %sp8984, align 16
  %sp9036 = getelementptr i256, ptr %1275, i64 -3
  store i256 %swap.b9032, ptr %sp9036, align 16
  store i256 5602, ptr %1275, align 16
  %sp9042 = getelementptr i256, ptr %1275, i64 -8
  %dup99043 = load i256, ptr %sp9042, align 16
  store i256 %dup99043, ptr %sp9003, align 16
  %sp9046 = getelementptr i256, ptr %1275, i64 -7
  br label %OP4725.JUMPDEST.sink.split

OP2768.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1284 = add i64 %len.addr.197, 1
  %sp9052 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 0, ptr %sp9052, align 16
  %1285 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9052, i8 17)
  %.not23593 = icmp eq i8 %1285, 0
  br i1 %.not23593, label %OP2771.SWAP1, label %return, !prof !6

OP2771.SWAP1:                                     ; preds = %OP2768.JUMPDEST
  %swap.a9057 = load i256, ptr %sp9052, align 16
  %sp9058 = getelementptr i256, ptr %sp9052, i64 -1
  %swap.b9059 = load i256, ptr %sp9058, align 16
  store i256 %swap.a9057, ptr %sp9058, align 16
  %sp9063 = getelementptr i256, ptr %sp9052, i64 -2
  store i256 %swap.b9059, ptr %sp9063, align 16
  %sp9071 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1284
  store i256 5625, ptr %sp9071, align 16
  %sp9073 = getelementptr i256, ptr %sp9052, i64 -3
  %dup59074 = load i256, ptr %sp9073, align 16
  %sp9075 = getelementptr i256, ptr %sp9052, i64 2
  store i256 %dup59074, ptr %sp9075, align 16
  %1286 = add i64 %len.addr.197, 4
  %sp9077 = getelementptr i256, ptr %sp9052, i64 -5
  %dup89078 = load i256, ptr %sp9077, align 16
  %sp9079 = getelementptr i256, ptr %sp9052, i64 3
  store i256 %dup89078, ptr %sp9079, align 16
  %sp9081 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1286
  %sp9083 = getelementptr i256, ptr %sp9052, i64 5
  store i256 8680, ptr %sp9083, align 16
  store i256 8680, ptr %sp9081, align 16
  br label %dynamic_jump_table.backedge

OP2782.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1287 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp9095 = getelementptr i256, ptr %1287, i64 -2
  %dup29096 = load i256, ptr %sp9095, align 16
  store i256 %dup29096, ptr %1287, align 16
  %.not23592 = icmp eq i256 %dup29096, 0
  br i1 %.not23592, label %return, label %OP2787.JUMPDEST

OP2787.JUMPDEST:                                  ; preds = %dynamic_jump_table.OP2787.JUMPDEST_crit_edge, %OP2782.JUMPDEST
  %b9107 = phi i256 [ %b9107.pre, %dynamic_jump_table.OP2787.JUMPDEST_crit_edge ], [ %dup29096, %OP2782.JUMPDEST ]
  %1288 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp9104 = getelementptr i256, ptr %1288, i64 -1
  %a9105 = load i256, ptr %sp9104, align 16
  %sp9106 = getelementptr i256, ptr %1288, i64 -2
  %1289 = udiv i256 %a9105, %b9107
  %sp9112 = getelementptr i256, ptr %1288, i64 -13
  store i256 %1289, ptr %sp9112, align 16
  %sp9116 = getelementptr i256, ptr %1288, i64 -3
  %dup19117 = load i256, ptr %sp9116, align 16
  store i256 %dup19117, ptr %sp9106, align 16
  store i256 5652, ptr %sp9104, align 16
  %sp9122 = getelementptr i256, ptr %1288, i64 -5
  %dup59123 = load i256, ptr %sp9122, align 16
  store i256 %dup59123, ptr %1288, align 16
  %1290 = add i64 %len.addr.197, 2
  %sp9126 = getelementptr i256, ptr %1288, i64 -6
  %dup79127 = load i256, ptr %sp9126, align 16
  %sp9128 = getelementptr i256, ptr %1288, i64 1
  store i256 %dup79127, ptr %sp9128, align 16
  %sp9130 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1290
  %sp9132 = getelementptr i256, ptr %1288, i64 3
  store i256 8680, ptr %sp9132, align 16
  store i256 8680, ptr %sp9130, align 16
  br label %dynamic_jump_table.backedge

OP2799.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1291 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp9144 = getelementptr i256, ptr %1291, i64 -2
  %dup29145 = load i256, ptr %sp9144, align 16
  store i256 %dup29145, ptr %1291, align 16
  %.not23579 = icmp eq i256 %dup29145, 0
  br i1 %.not23579, label %return, label %OP2804.JUMPDEST

OP2804.JUMPDEST:                                  ; preds = %dynamic_jump_table.OP2804.JUMPDEST_crit_edge, %OP2799.JUMPDEST
  %b9156 = phi i256 [ %b9156.pre, %dynamic_jump_table.OP2804.JUMPDEST_crit_edge ], [ %dup29145, %OP2799.JUMPDEST ]
  %1292 = add i64 %len.addr.197, -1
  %sp9153 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1292
  %a9154 = load i256, ptr %sp9153, align 16
  %1293 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp9155 = getelementptr i256, ptr %1293, i64 -2
  %1294 = udiv i256 %a9154, %b9156
  %sp9161 = getelementptr i256, ptr %1293, i64 -12
  store i256 %1294, ptr %sp9161, align 16
  %sp9167 = getelementptr i256, ptr %1293, i64 -13
  %dup129168 = load i256, ptr %sp9167, align 16
  %1295 = icmp ne i256 %dup129168, 0
  %1296 = zext i1 %1295 to i256
  store i256 %1296, ptr %sp9155, align 16
  %1297 = xor i1 %1295, true
  %1298 = zext i1 %1297 to i256
  store i256 %1298, ptr %sp9153, align 16
  br i1 %1295, label %OP2815.POP, label %OP2819.JUMPDEST

OP2815.POP:                                       ; preds = %OP2804.JUMPDEST
  store i256 %1294, ptr %sp9153, align 16
  %1299 = icmp ule i256 %b9156, %a9154
  %1300 = zext i1 %1299 to i256
  store i256 %1300, ptr %sp9155, align 16
  br label %OP2819.JUMPDEST, !annotation !7

OP2819.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2815.POP, %OP2804.JUMPDEST
  %len.addr.122 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %1292, %OP2804.JUMPDEST ], [ %1292, %OP2815.POP ]
  %1301 = add i64 %len.addr.122, -1
  %sp9202 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1301
  %a9203 = load i256, ptr %sp9202, align 16
  %.not23580 = icmp eq i256 %a9203, 0
  br i1 %.not23580, label %OP2822.PUSH1, label %OP2860.JUMPDEST

OP2822.PUSH1:                                     ; preds = %OP2819.JUMPDEST
  store i256 64, ptr %sp9202, align 16
  %mload.out.slot9209 = alloca i256, align 16
  %1302 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9209, ptr %arg.ecx.addr)
  %.not23581 = icmp eq i8 %1302, 0
  br i1 %.not23581, label %OP2823.MLOAD.contd, label %return, !prof !6

OP2823.MLOAD.contd:                               ; preds = %OP2822.PUSH1
  %mload.out9210 = load i256, ptr %mload.out.slot9209, align 16
  store i256 %mload.out9210, ptr %sp9202, align 16
  %1303 = add i64 %len.addr.122, 1
  %sp9213 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.122
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp9213, align 16
  %1304 = add i64 %len.addr.122, 2
  %sp9215 = getelementptr i256, ptr %sp9213, i64 -1
  %sp9217 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1303
  store i256 %mload.out9210, ptr %sp9217, align 16
  %1305 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out9210, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23582 = icmp eq i8 %1305, 0
  br i1 %.not23582, label %OP2827.PUSH1, label %return, !prof !6

OP2827.PUSH1:                                     ; preds = %OP2823.MLOAD.contd
  %b9229 = load i256, ptr %sp9202, align 16
  %1306 = add i256 %b9229, 4
  store i256 %1306, ptr %sp9202, align 16
  store i256 %1306, ptr %sp9213, align 16
  %sp9240 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1304
  %1307 = add i256 %b9229, 36
  store i256 %1307, ptr %sp9217, align 16
  %sp9254 = getelementptr i256, ptr %sp9213, i64 3
  store i256 32, ptr %sp9240, align 16
  store i256 %1306, ptr %sp9254, align 16
  %1308 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1306, i256 32, ptr %arg.ecx.addr)
  %.not23583 = icmp eq i8 %1308, 0
  br i1 %.not23583, label %OP2838.PUSH1, label %return, !prof !6

OP2838.PUSH1:                                     ; preds = %OP2827.PUSH1
  store i256 40, ptr %sp9240, align 16
  %dup29274 = load i256, ptr %sp9217, align 16
  store i256 %dup29274, ptr %sp9254, align 16
  %1309 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup29274, i256 40, ptr %arg.ecx.addr)
  %.not23584 = icmp eq i8 %1309, 0
  br i1 %.not23584, label %OP2841.PUSH1, label %return, !prof !6

OP2841.PUSH1:                                     ; preds = %OP2838.PUSH1
  %b9287 = load i256, ptr %sp9217, align 16
  %1310 = add i256 %b9287, 32
  store i256 %1310, ptr %sp9217, align 16
  store i256 11161, ptr %sp9254, align 16
  %sp9296 = getelementptr i256, ptr %sp9213, i64 4
  store i256 40, ptr %sp9240, align 16
  store i256 %1310, ptr %sp9296, align 16
  %1311 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9240)
  %.not23585 = icmp eq i8 %1311, 0
  br i1 %.not23585, label %OP2848.PUSH1, label %return, !prof !6

OP2848.PUSH1:                                     ; preds = %OP2841.PUSH1
  store i256 64, ptr %sp9240, align 16
  %b9310 = load i256, ptr %sp9217, align 16
  %1312 = add i256 %b9310, 64
  %swap.b9316 = load i256, ptr %sp9215, align 16
  store i256 %1312, ptr %sp9215, align 16
  store i256 %swap.b9316, ptr %sp9217, align 16
  store i256 64, ptr %sp9213, align 16
  %mload.out.slot9324 = alloca i256, align 16
  %1313 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9324, ptr %arg.ecx.addr)
  %.not23586 = icmp eq i8 %1313, 0
  br i1 %.not23586, label %OP2854.MLOAD.contd, label %return, !prof !6

OP2854.MLOAD.contd:                               ; preds = %OP2848.PUSH1
  %mload.out9325 = load i256, ptr %mload.out.slot9324, align 16
  %swap.b9335 = load i256, ptr %sp9215, align 16
  store i256 %swap.b9335, ptr %sp9217, align 16
  %1314 = sub i256 %swap.b9335, %mload.out9325
  store i256 %1314, ptr %sp9215, align 16
  store i256 %mload.out9325, ptr %sp9213, align 16
  %1315 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9215, i8 16)
  %.not23587 = icmp eq i8 %1315, 0
  %spec.select17786 = select i1 %.not23587, i8 16, i8 %1315, !prof !6
  br label %return

OP2860.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2819.JUMPDEST
  %len.addr.123 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %1301, %OP2819.JUMPDEST ]
  %sp9351 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.123
  store i256 5773, ptr %sp9351, align 16
  %contract.target_address9354 = load i160, ptr %contract.target_address.addr9353, align 16
  %1316 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address9354)
  %1317 = zext i160 %1316 to i256
  %sp9355 = getelementptr i256, ptr %sp9351, i64 1
  store i256 %1317, ptr %sp9355, align 16
  %1318 = add i64 %len.addr.123, 3
  %sp9357 = getelementptr i256, ptr %sp9351, i64 -3
  %dup59358 = load i256, ptr %sp9357, align 16
  %sp9359 = getelementptr i256, ptr %sp9351, i64 2
  store i256 %dup59358, ptr %sp9359, align 16
  br label %OP5103.JUMPDEST

OP2866.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp9363 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 5784, ptr %sp9363, align 16
  %sp9365 = getelementptr i256, ptr %sp9363, i64 -7
  %dup89366 = load i256, ptr %sp9365, align 16
  %sp9367 = getelementptr i256, ptr %sp9363, i64 1
  store i256 %dup89366, ptr %sp9367, align 16
  %sp9369 = getelementptr i256, ptr %sp9363, i64 -12
  %dup149370 = load i256, ptr %sp9369, align 16
  %sp9371 = getelementptr i256, ptr %sp9363, i64 2
  store i256 %dup149370, ptr %sp9371, align 16
  %sp9373 = getelementptr i256, ptr %sp9363, i64 -11
  %dup149374 = load i256, ptr %sp9373, align 16
  br label %OP3974.JUMPDEST.sink.split

OP2873.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp9379 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 5795, ptr %sp9379, align 16
  %sp9381 = getelementptr i256, ptr %sp9379, i64 -6
  %dup79382 = load i256, ptr %sp9381, align 16
  %sp9383 = getelementptr i256, ptr %sp9379, i64 1
  store i256 %dup79382, ptr %sp9383, align 16
  %sp9385 = getelementptr i256, ptr %sp9379, i64 -12
  %dup149386 = load i256, ptr %sp9385, align 16
  %sp9387 = getelementptr i256, ptr %sp9379, i64 2
  store i256 %dup149386, ptr %sp9387, align 16
  %sp9389 = getelementptr i256, ptr %sp9379, i64 -10
  %dup139390 = load i256, ptr %sp9389, align 16
  br label %OP3974.JUMPDEST.sink.split

OP2880.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp9395 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 64, ptr %sp9395, align 16
  %1319 = add i64 %len.addr.197, 2
  %sp9399 = getelementptr i256, ptr %sp9395, i64 1
  store i256 64, ptr %sp9399, align 16
  %mload.out.slot9403 = alloca i256, align 16
  %1320 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9403, ptr %arg.ecx.addr)
  %.not23572 = icmp eq i8 %1320, 0
  br i1 %.not23572, label %OP2883.MLOAD.contd, label %return, !prof !6

OP2883.MLOAD.contd:                               ; preds = %OP2880.JUMPDEST
  %mload.out9404 = load i256, ptr %mload.out.slot9403, align 16
  store i256 %mload.out9404, ptr %sp9399, align 16
  %sp9407 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1319
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp9407, align 16
  %sp9411 = getelementptr i256, ptr %sp9395, i64 3
  store i256 %mload.out9404, ptr %sp9411, align 16
  %1321 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out9404, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23573 = icmp eq i8 %1321, 0
  br i1 %.not23573, label %OP2887.ADDRESS, label %return, !prof !6

OP2887.ADDRESS:                                   ; preds = %OP2883.MLOAD.contd
  %contract.target_address9419 = load i160, ptr %contract.target_address.addr9353, align 16
  %1322 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address9419)
  %1323 = zext i160 %1322 to i256
  store i256 %1323, ptr %sp9407, align 16
  %dup39425 = load i256, ptr %sp9399, align 16
  %sp9426 = getelementptr i256, ptr %sp9395, i64 4
  store i256 %dup39425, ptr %sp9426, align 16
  %1324 = add i256 %dup39425, 4
  store i256 %1324, ptr %sp9411, align 16
  %1325 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1324, i256 %1323, ptr %arg.ecx.addr)
  %.not23574 = icmp eq i8 %1325, 0
  br i1 %.not23574, label %OP2892.SWAP1, label %return, !prof !6

OP2892.SWAP1:                                     ; preds = %OP2887.ADDRESS
  %swap.a9440 = load i256, ptr %sp9399, align 16
  %swap.b9442 = load i256, ptr %sp9395, align 16
  store i256 %swap.a9440, ptr %sp9395, align 16
  store i256 %swap.b9442, ptr %sp9399, align 16
  %mload.out.slot9446 = alloca i256, align 16
  %1326 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b9442, ptr %mload.out.slot9446, ptr %arg.ecx.addr)
  %.not23575 = icmp eq i8 %1326, 0
  br i1 %.not23575, label %OP2893.MLOAD.contd, label %return, !prof !6

OP2893.MLOAD.contd:                               ; preds = %OP2892.SWAP1
  %mload.out9447 = load i256, ptr %mload.out.slot9446, align 16
  %sp9452 = getelementptr i256, ptr %sp9395, i64 -7
  %dup109453 = load i256, ptr %sp9452, align 16
  %1327 = and i256 %dup109453, 1461501637330902918203684832716283019655932542975
  %swap.b9465 = load i256, ptr %sp9395, align 16
  store i256 %1327, ptr %sp9395, align 16
  store i256 1889567281, ptr %sp9399, align 16
  %sp9478 = getelementptr i256, ptr %sp9395, i64 5
  %sp9480 = getelementptr i256, ptr %sp9395, i64 2
  %sp9482 = getelementptr i256, ptr %sp9395, i64 6
  %1328 = add i256 %swap.b9465, 36
  store i256 %1328, ptr %sp9480, align 16
  store i256 32, ptr %sp9411, align 16
  store i256 %mload.out9447, ptr %sp9426, align 16
  %sp9514 = getelementptr i256, ptr %sp9395, i64 7
  %1329 = sub i256 %swap.b9465, %mload.out9447
  %1330 = add i256 %1329, 36
  store i256 %1330, ptr %sp9478, align 16
  store i256 %mload.out9447, ptr %sp9482, align 16
  store i256 %1327, ptr %sp9514, align 16
  %1331 = add i64 %len.addr.197, 9
  %sp9543 = getelementptr i256, ptr %sp9395, i64 8
  store i256 %1327, ptr %sp9543, align 16
  %1332 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9543, i8 17)
  %.not23576 = icmp eq i8 %1332, 0
  br i1 %.not23576, label %OP2917.ISZERO, label %return, !prof !6

OP2917.ISZERO:                                    ; preds = %OP2893.MLOAD.contd
  %a9548 = load i256, ptr %sp9543, align 16
  %1333 = icmp eq i256 %a9548, 0
  %1334 = zext i1 %1333 to i256
  store i256 %1334, ptr %sp9543, align 16
  %sp9553 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1331
  %1335 = xor i1 %1333, true
  %1336 = zext i1 %1335 to i256
  store i256 %1336, ptr %sp9553, align 16
  br i1 %1333, label %OP2922.PUSH1, label %OP2925.JUMPDEST

OP2922.PUSH1:                                     ; preds = %OP2917.ISZERO
  store i256 0, ptr %sp9553, align 16
  %sp9566 = getelementptr i256, ptr %sp9395, i64 10
  store i256 0, ptr %sp9566, align 16
  %1337 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9553, i8 16)
  %.not23577 = icmp eq i8 %1337, 0
  %spec.select17787 = select i1 %.not23577, i8 16, i8 %1337, !prof !6
  br label %return

OP2925.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2917.ISZERO
  %len.addr.124 = phi i64 [ %1331, %OP2917.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining9572 = load i64, ptr %gas.remaining.addr, align 8
  %1338 = zext i64 %gas.remaining9572 to i256
  %1339 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.124
  %sp9573 = getelementptr i256, ptr %1339, i64 -1
  store i256 %1338, ptr %sp9573, align 16
  %1340 = add i64 %len.addr.124, -6
  %sp9575 = getelementptr i256, ptr %1339, i64 -6
  %1341 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp9575, i8 17, i8 3)
  %.not23578 = icmp eq i8 %1341, 0
  br i1 %.not23578, label %suspend, label %return, !prof !6

OP2929.ISZERO:                                    ; preds = %resume
  %1342 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp9577 = getelementptr i256, ptr %1342, i64 -1
  %a9578 = load i256, ptr %sp9577, align 16
  %1343 = icmp eq i256 %a9578, 0
  %1344 = zext i1 %1343 to i256
  store i256 %1344, ptr %sp9577, align 16
  %1345 = xor i1 %1343, true
  %1346 = zext i1 %1345 to i256
  store i256 %1346, ptr %1342, align 16
  br i1 %1343, label %OP2934.RETURNDATASIZE, label %OP2941.JUMPDEST

OP2934.RETURNDATASIZE:                            ; preds = %OP2929.ISZERO
  %ecx.return_data.len.addr9592 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len9593 = load i64, ptr %ecx.return_data.len.addr9592, align 8
  %1347 = zext i64 %ecx.return_data.len9593 to i256
  store i256 %1347, ptr %1342, align 16
  %sp9596 = getelementptr i256, ptr %1342, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp9596, i8 0, i64 64, i1 false)
  %1348 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1342)
  %.not23385 = icmp eq i8 %1348, 0
  br i1 %.not23385, label %OP2938.RETURNDATASIZE, label %return, !prof !6

OP2938.RETURNDATASIZE:                            ; preds = %OP2934.RETURNDATASIZE
  %ecx.return_data.len9605 = load i64, ptr %ecx.return_data.len.addr9592, align 8
  %1349 = zext i64 %ecx.return_data.len9605 to i256
  store i256 %1349, ptr %1342, align 16
  store i256 0, ptr %sp9596, align 16
  %1350 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1342, i8 16)
  %.not23386 = icmp eq i8 %1350, 0
  %spec.select17788 = select i1 %.not23386, i8 16, i8 %1350, !prof !6
  br label %return

OP2941.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2929.ISZERO
  %len.addr.125 = phi i64 [ %stack_len17730, %OP2929.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1351 = add i64 %len.addr.125, -3
  %1352 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.125
  %sp9617 = getelementptr i256, ptr %1352, i64 -4
  store i256 64, ptr %sp9617, align 16
  %mload.out.slot9621 = alloca i256, align 16
  %1353 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9621, ptr %arg.ecx.addr)
  %.not23562 = icmp eq i8 %1353, 0
  br i1 %.not23562, label %OP2947.MLOAD.contd, label %return, !prof !6

OP2947.MLOAD.contd:                               ; preds = %OP2941.JUMPDEST
  %1354 = add i64 %len.addr.125, -2
  %mload.out9622 = load i256, ptr %mload.out.slot9621, align 16
  store i256 %mload.out9622, ptr %sp9617, align 16
  %ecx.return_data.len.addr9625 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len9626 = load i64, ptr %ecx.return_data.len.addr9625, align 8
  %1355 = zext i64 %ecx.return_data.len9626 to i256
  %sp9627 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1351
  store i256 %1355, ptr %sp9627, align 16
  %sp9629 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1354
  %sp9633 = getelementptr i256, ptr %1352, i64 -1
  store i256 %1355, ptr %sp9633, align 16
  %1356 = icmp ugt i64 %ecx.return_data.len9626, 31
  %1357 = zext i1 %1356 to i256
  store i256 %1357, ptr %sp9629, align 16
  br i1 %1356, label %OP2958.JUMPDEST, label %OP2955.PUSH1

OP2955.PUSH1:                                     ; preds = %OP2947.MLOAD.contd
  store i256 0, ptr %sp9629, align 16
  %sp9650 = getelementptr i256, ptr %1352, i64 -2
  store i256 0, ptr %sp9633, align 16
  %1358 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9650, i8 16)
  %.not23563 = icmp eq i8 %1358, 0
  %spec.select17789 = select i1 %.not23563, i8 16, i8 %1358, !prof !6
  br label %return

OP2958.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2947.MLOAD.contd
  %len.addr.126 = phi i64 [ %1354, %OP2947.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1359 = add i64 %len.addr.126, -1
  %1360 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.126
  %sp9658 = getelementptr i256, ptr %1360, i64 -2
  %a9659 = load i256, ptr %sp9658, align 16
  %mload.out.slot9660 = alloca i256, align 16
  %1361 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a9659, ptr %mload.out.slot9660, ptr %arg.ecx.addr)
  %.not23564 = icmp eq i8 %1361, 0
  br i1 %.not23564, label %OP2960.MLOAD.contd, label %return, !prof !6

OP2960.MLOAD.contd:                               ; preds = %OP2958.JUMPDEST
  %mload.out9661 = load i256, ptr %mload.out.slot9660, align 16
  store i256 %mload.out9661, ptr %sp9658, align 16
  %sp9664 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1359
  store i256 64, ptr %sp9664, align 16
  %1362 = add i64 %len.addr.126, 1
  %sp9666 = getelementptr i256, ptr %1360, i64 -1
  store i256 64, ptr %1360, align 16
  %mload.out.slot9672 = alloca i256, align 16
  %1363 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9672, ptr %arg.ecx.addr)
  %.not23565 = icmp eq i8 %1363, 0
  br i1 %.not23565, label %OP2963.MLOAD.contd, label %return, !prof !6

OP2963.MLOAD.contd:                               ; preds = %OP2960.MLOAD.contd
  %mload.out9673 = load i256, ptr %mload.out.slot9672, align 16
  store i256 %mload.out9673, ptr %1360, align 16
  %sp9676 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1362
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp9676, align 16
  %sp9680 = getelementptr i256, ptr %1360, i64 2
  store i256 %mload.out9673, ptr %sp9680, align 16
  %1364 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out9673, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23566 = icmp eq i8 %1364, 0
  br i1 %.not23566, label %OP2967.ADDRESS, label %return, !prof !6

OP2967.ADDRESS:                                   ; preds = %OP2963.MLOAD.contd
  %contract.target_address.addr9687 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address9688 = load i160, ptr %contract.target_address.addr9687, align 16
  %1365 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address9688)
  %1366 = zext i160 %1365 to i256
  store i256 %1366, ptr %sp9676, align 16
  %dup39694 = load i256, ptr %1360, align 16
  %sp9695 = getelementptr i256, ptr %1360, i64 3
  store i256 %dup39694, ptr %sp9695, align 16
  %1367 = add i256 %dup39694, 4
  store i256 %1367, ptr %sp9680, align 16
  %1368 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1367, i256 %1366, ptr %arg.ecx.addr)
  %.not23567 = icmp eq i8 %1368, 0
  br i1 %.not23567, label %OP2972.SWAP1, label %return, !prof !6

OP2972.SWAP1:                                     ; preds = %OP2967.ADDRESS
  %swap.a9709 = load i256, ptr %1360, align 16
  %swap.b9711 = load i256, ptr %sp9666, align 16
  store i256 %swap.a9709, ptr %sp9666, align 16
  store i256 %swap.b9711, ptr %1360, align 16
  %mload.out.slot9715 = alloca i256, align 16
  %1369 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b9711, ptr %mload.out.slot9715, ptr %arg.ecx.addr)
  %.not23568 = icmp eq i8 %1369, 0
  br i1 %.not23568, label %OP2973.MLOAD.contd, label %return, !prof !6

OP2973.MLOAD.contd:                               ; preds = %OP2972.SWAP1
  %mload.out9716 = load i256, ptr %mload.out.slot9715, align 16
  %swap.b9722 = load i256, ptr %sp9658, align 16
  %sp9726 = getelementptr i256, ptr %1360, i64 -7
  store i256 %swap.b9722, ptr %sp9726, align 16
  %sp9732 = getelementptr i256, ptr %1360, i64 -8
  %dup99733 = load i256, ptr %sp9732, align 16
  %1370 = and i256 %dup99733, 1461501637330902918203684832716283019655932542975
  store i256 %1370, ptr %sp9658, align 16
  %swap.b9752 = load i256, ptr %sp9666, align 16
  store i256 1889567281, ptr %sp9666, align 16
  %sp9762 = getelementptr i256, ptr %1360, i64 4
  %1371 = add i256 %swap.b9752, 36
  store i256 %1371, ptr %1360, align 16
  %sp9779 = getelementptr i256, ptr %1360, i64 1
  store i256 32, ptr %sp9779, align 16
  store i256 %mload.out9716, ptr %sp9680, align 16
  %sp9799 = getelementptr i256, ptr %1360, i64 5
  %1372 = sub i256 %swap.b9752, %mload.out9716
  %1373 = add i256 %1372, 36
  store i256 %1373, ptr %sp9695, align 16
  store i256 %mload.out9716, ptr %sp9762, align 16
  store i256 %1370, ptr %sp9799, align 16
  %1374 = add i64 %len.addr.126, 7
  %sp9828 = getelementptr i256, ptr %1360, i64 6
  store i256 %1370, ptr %sp9828, align 16
  %1375 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9828, i8 17)
  %.not23569 = icmp eq i8 %1375, 0
  br i1 %.not23569, label %OP3001.ISZERO, label %return, !prof !6

OP3001.ISZERO:                                    ; preds = %OP2973.MLOAD.contd
  %a9833 = load i256, ptr %sp9828, align 16
  %1376 = icmp eq i256 %a9833, 0
  %1377 = zext i1 %1376 to i256
  store i256 %1377, ptr %sp9828, align 16
  %sp9838 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1374
  %1378 = xor i1 %1376, true
  %1379 = zext i1 %1378 to i256
  store i256 %1379, ptr %sp9838, align 16
  br i1 %1376, label %OP3006.PUSH1, label %OP3009.JUMPDEST

OP3006.PUSH1:                                     ; preds = %OP3001.ISZERO
  store i256 0, ptr %sp9838, align 16
  %sp9851 = getelementptr i256, ptr %1360, i64 8
  store i256 0, ptr %sp9851, align 16
  %1380 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9838, i8 16)
  %.not23570 = icmp eq i8 %1380, 0
  %spec.select17790 = select i1 %.not23570, i8 16, i8 %1380, !prof !6
  br label %return

OP3009.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3001.ISZERO
  %len.addr.127 = phi i64 [ %1374, %OP3001.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining9857 = load i64, ptr %gas.remaining.addr, align 8
  %1381 = zext i64 %gas.remaining9857 to i256
  %1382 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.127
  %sp9858 = getelementptr i256, ptr %1382, i64 -1
  store i256 %1381, ptr %sp9858, align 16
  %1383 = add i64 %len.addr.127, -6
  %sp9860 = getelementptr i256, ptr %1382, i64 -6
  %1384 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp9860, i8 17, i8 3)
  %.not23571 = icmp eq i8 %1384, 0
  br i1 %.not23571, label %suspend, label %return, !prof !6

OP3013.ISZERO:                                    ; preds = %resume
  %1385 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp9862 = getelementptr i256, ptr %1385, i64 -1
  %a9863 = load i256, ptr %sp9862, align 16
  %1386 = icmp eq i256 %a9863, 0
  %1387 = zext i1 %1386 to i256
  store i256 %1387, ptr %sp9862, align 16
  %1388 = xor i1 %1386, true
  %1389 = zext i1 %1388 to i256
  store i256 %1389, ptr %1385, align 16
  br i1 %1386, label %OP3018.RETURNDATASIZE, label %OP3025.JUMPDEST

OP3018.RETURNDATASIZE:                            ; preds = %OP3013.ISZERO
  %ecx.return_data.len.addr9877 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len9878 = load i64, ptr %ecx.return_data.len.addr9877, align 8
  %1390 = zext i64 %ecx.return_data.len9878 to i256
  store i256 %1390, ptr %1385, align 16
  %sp9881 = getelementptr i256, ptr %1385, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp9881, i8 0, i64 64, i1 false)
  %1391 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1385)
  %.not23383 = icmp eq i8 %1391, 0
  br i1 %.not23383, label %OP3022.RETURNDATASIZE, label %return, !prof !6

OP3022.RETURNDATASIZE:                            ; preds = %OP3018.RETURNDATASIZE
  %ecx.return_data.len9890 = load i64, ptr %ecx.return_data.len.addr9877, align 8
  %1392 = zext i64 %ecx.return_data.len9890 to i256
  store i256 %1392, ptr %1385, align 16
  store i256 0, ptr %sp9881, align 16
  %1393 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1385, i8 16)
  %.not23384 = icmp eq i8 %1393, 0
  %spec.select17791 = select i1 %.not23384, i8 16, i8 %1393, !prof !6
  br label %return

OP3025.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3013.ISZERO
  %len.addr.128 = phi i64 [ %stack_len17730, %OP3013.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1394 = add i64 %len.addr.128, -3
  %1395 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.128
  %sp9902 = getelementptr i256, ptr %1395, i64 -4
  store i256 64, ptr %sp9902, align 16
  %mload.out.slot9906 = alloca i256, align 16
  %1396 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9906, ptr %arg.ecx.addr)
  %.not23559 = icmp eq i8 %1396, 0
  br i1 %.not23559, label %OP3031.MLOAD.contd, label %return, !prof !6

OP3031.MLOAD.contd:                               ; preds = %OP3025.JUMPDEST
  %1397 = add i64 %len.addr.128, -2
  %mload.out9907 = load i256, ptr %mload.out.slot9906, align 16
  store i256 %mload.out9907, ptr %sp9902, align 16
  %ecx.return_data.len.addr9910 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len9911 = load i64, ptr %ecx.return_data.len.addr9910, align 8
  %1398 = zext i64 %ecx.return_data.len9911 to i256
  %sp9912 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1394
  store i256 %1398, ptr %sp9912, align 16
  %sp9914 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1397
  %sp9918 = getelementptr i256, ptr %1395, i64 -1
  store i256 %1398, ptr %sp9918, align 16
  %1399 = icmp ugt i64 %ecx.return_data.len9911, 31
  %1400 = zext i1 %1399 to i256
  store i256 %1400, ptr %sp9914, align 16
  br i1 %1399, label %OP3042.JUMPDEST, label %OP3039.PUSH1

OP3039.PUSH1:                                     ; preds = %OP3031.MLOAD.contd
  store i256 0, ptr %sp9914, align 16
  %sp9935 = getelementptr i256, ptr %1395, i64 -2
  store i256 0, ptr %sp9918, align 16
  %1401 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9935, i8 16)
  %.not23560 = icmp eq i8 %1401, 0
  %spec.select17792 = select i1 %.not23560, i8 16, i8 %1401, !prof !6
  br label %return

OP3042.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3031.MLOAD.contd
  %len.addr.129 = phi i64 [ %1397, %OP3031.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1402 = add i64 %len.addr.129, -1
  %1403 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.129
  %sp9943 = getelementptr i256, ptr %1403, i64 -2
  %a9944 = load i256, ptr %sp9943, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !89)
  %ecx.memory.addr.i24399 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24400 = load ptr, ptr %ecx.memory.addr.i24399, align 8, !alias.scope !89, !noalias !92
  %ecx.memory.len.addr.i24401 = getelementptr inbounds i8, ptr %ecx.memory.i24400, i64 16
  %ecx.memory.len.i24402 = load i64, ptr %ecx.memory.len.addr.i24401, align 8, !noalias !94
  %ecx.memory.last_checkpoint.addr.i24403 = getelementptr inbounds i8, ptr %ecx.memory.i24400, i64 48
  %ecx.memory.last_checkpoint.i24404 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24403, align 8, !noalias !94
  %1404 = sub i64 %ecx.memory.len.i24402, %ecx.memory.last_checkpoint.i24404
  %1405 = icmp ugt i256 %a9944, 18446744073709551615
  %1406 = trunc i256 %a9944 to i64
  %1407 = add i64 %1406, 32
  %1408 = icmp ugt i64 %1406, -33
  %1409 = or i1 %1405, %1408
  %1410 = select i1 %1409, i64 -1, i64 %1407
  %1411 = icmp ugt i64 %1410, %1404
  br i1 %1411, label %resize.i24412, label %OP3044.MLOAD.contd, !prof !5

resize.i24412:                                    ; preds = %OP3042.JUMPDEST
  %1412 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1410), !noalias !92
  %.not.i24413 = icmp eq i8 %1412, 0
  br i1 %.not.i24413, label %OP3044.MLOAD.contd, label %return, !prof !6

OP3044.MLOAD.contd:                               ; preds = %OP3042.JUMPDEST, %resize.i24412
  %ecx.memory.buffer.ptr.shared.addr.i24406 = getelementptr inbounds i8, ptr %ecx.memory.i24400, i64 8
  %ecx.memory.buffer.ptr.shared.i24407 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24406, align 8, !noalias !94
  %ecx.memory.buffer.ptr.i24408 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24407, i64 %ecx.memory.last_checkpoint.i24404
  %slot.i24409 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24408, i64 %1406
  %slot.value.i24410 = load i256, ptr %slot.i24409, align 1, !noalias !94
  %1413 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24410)
  %sp9951 = getelementptr i256, ptr %1403, i64 -6
  store i256 %1413, ptr %sp9951, align 16
  store i256 6117, ptr %sp9943, align 16
  %sp9957 = getelementptr i256, ptr %1403, i64 -7
  %dup69958 = load i256, ptr %sp9957, align 16
  %sp9959 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1402
  store i256 %dup69958, ptr %sp9959, align 16
  store i256 %1413, ptr %1403, align 16
  %sp9965 = getelementptr i256, ptr %1403, i64 -11
  %dup129966 = load i256, ptr %sp9965, align 16
  %sp9967 = getelementptr i256, ptr %1403, i64 1
  store i256 %dup129966, ptr %sp9967, align 16
  %1414 = add i64 %len.addr.129, 3
  %sp9969 = getelementptr i256, ptr %1403, i64 -10
  %dup129970 = load i256, ptr %sp9969, align 16
  %sp9971 = getelementptr i256, ptr %1403, i64 2
  store i256 %dup129970, ptr %sp9971, align 16
  br label %OP4337.JUMPDEST

OP3054.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1415 = add i64 %len.addr.197, 1
  %1416 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp9975 = getelementptr i256, ptr %1416, i64 -2
  %dup29976 = load i256, ptr %sp9975, align 16
  %1417 = icmp eq i256 %dup29976, 0
  %1418 = zext i1 %1417 to i256
  store i256 %1418, ptr %1416, align 16
  br i1 %1417, label %OP3079.JUMPDEST, label %OP3059.PUSH1

OP3059.PUSH1:                                     ; preds = %OP3054.JUMPDEST
  store i256 8, ptr %1416, align 16
  %1419 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %1416, i8 17)
  %.not23552 = icmp eq i8 %1419, 0
  br i1 %.not23552, label %OP3061.PUSH2, label %return, !prof !6

OP3061.PUSH2:                                     ; preds = %OP3059.PUSH1
  %sp9990 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1415
  %swap.b9995 = load i256, ptr %1416, align 16
  store i256 6179, ptr %1416, align 16
  %1420 = add i64 %len.addr.197, 3
  %sp9997 = getelementptr i256, ptr %1416, i64 2
  %sp10001 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1420
  %sp10005 = getelementptr i256, ptr %1416, i64 4
  %1421 = and i256 %swap.b9995, 5192296858534827628530496329220095
  store i256 %1421, ptr %sp9990, align 16
  %1422 = lshr i256 %swap.b9995, 112
  %1423 = and i256 %1422, 5192296858534827628530496329220095
  store i256 %1423, ptr %sp9997, align 16
  store i256 8680, ptr %sp10005, align 16
  store i256 8680, ptr %sp10001, align 16
  br label %dynamic_jump_table.backedge

OP3076.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp10051 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 11, ptr %sp10051, align 16
  %1424 = add i64 %len.addr.197, -1
  %sp10053 = getelementptr i256, ptr %sp10051, i64 -1
  %1425 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr %sp10053, i8 17)
  %.not23551 = icmp eq i8 %1425, 0
  br i1 %.not23551, label %OP3079.JUMPDEST, label %return, !prof !6

OP3079.JUMPDEST:                                  ; preds = %OP3076.JUMPDEST, %dynamic_jump_table, %OP3054.JUMPDEST
  %len.addr.130 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %1424, %OP3076.JUMPDEST ], [ %len.addr.197, %OP3054.JUMPDEST ]
  %sp10056 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.130
  store i256 64, ptr %sp10056, align 16
  %1426 = add i64 %len.addr.130, 2
  %sp10060 = getelementptr i256, ptr %sp10056, i64 1
  store i256 64, ptr %sp10060, align 16
  %ecx.memory.i24416 = load ptr, ptr %ecx.memory.addr.i24415, align 8
  %ecx.memory.len.addr.i24417 = getelementptr inbounds i8, ptr %ecx.memory.i24416, i64 16
  %ecx.memory.len.i24418 = load i64, ptr %ecx.memory.len.addr.i24417, align 8, !noalias !95
  %ecx.memory.last_checkpoint.addr.i24419 = getelementptr inbounds i8, ptr %ecx.memory.i24416, i64 48
  %ecx.memory.last_checkpoint.i24420 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24419, align 8, !noalias !95
  %1427 = sub i64 %ecx.memory.len.i24418, %ecx.memory.last_checkpoint.i24420
  %1428 = icmp ult i64 %1427, 96
  br i1 %1428, label %resize.i24428, label %OP3082.MLOAD.contd, !prof !5

resize.i24428:                                    ; preds = %OP3079.JUMPDEST
  %1429 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !99
  %.not.i24429 = icmp eq i8 %1429, 0
  br i1 %.not.i24429, label %resize.i24428.OP3082.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24428.OP3082.MLOAD.contd_crit_edge:       ; preds = %resize.i24428
  %ecx.memory.i24432.pre = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !100
  br label %OP3082.MLOAD.contd

OP3082.MLOAD.contd:                               ; preds = %resize.i24428.OP3082.MLOAD.contd_crit_edge, %OP3079.JUMPDEST
  %ecx.memory.i24432 = phi ptr [ %ecx.memory.i24432.pre, %resize.i24428.OP3082.MLOAD.contd_crit_edge ], [ %ecx.memory.i24416, %OP3079.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i24422 = getelementptr inbounds i8, ptr %ecx.memory.i24416, i64 8
  %ecx.memory.buffer.ptr.shared.i24423 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24422, align 8, !noalias !95
  %ecx.memory.buffer.ptr.i24424 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24423, i64 %ecx.memory.last_checkpoint.i24420
  %slot.i24425 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24424, i64 64
  %slot.value.i24426 = load i256, ptr %slot.i24425, align 1, !noalias !95
  %1430 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24426)
  store i256 %1430, ptr %sp10060, align 16
  %1431 = add i64 %len.addr.130, 3
  %sp10068 = getelementptr i256, ptr %sp10056, i64 -11
  %dup1310069 = load i256, ptr %sp10068, align 16
  %sp10070 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1426
  store i256 %dup1310069, ptr %sp10070, align 16
  %sp10074 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1431
  store i256 %1430, ptr %sp10074, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !100)
  %ecx.memory.len.addr.i24433 = getelementptr inbounds i8, ptr %ecx.memory.i24432, i64 16
  %ecx.memory.len.i24434 = load i64, ptr %ecx.memory.len.addr.i24433, align 8, !noalias !100
  %ecx.memory.last_checkpoint.addr.i24435 = getelementptr inbounds i8, ptr %ecx.memory.i24432, i64 48
  %ecx.memory.last_checkpoint.i24436 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24435, align 8, !noalias !100
  %1432 = sub i64 %ecx.memory.len.i24434, %ecx.memory.last_checkpoint.i24436
  %1433 = icmp ugt i256 %1430, 18446744073709551615
  %1434 = trunc i256 %1430 to i64
  %1435 = add i64 %1434, 32
  %1436 = icmp ugt i64 %1434, -33
  %1437 = or i1 %1433, %1436
  %1438 = select i1 %1437, i64 -1, i64 %1435
  %1439 = icmp ugt i64 %1438, %1432
  br i1 %1439, label %resize.i24443, label %OP3086.PUSH1, !prof !5

resize.i24443:                                    ; preds = %OP3082.MLOAD.contd
  %1440 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1438)
  %.not.i24444 = icmp eq i8 %1440, 0
  br i1 %.not.i24444, label %OP3086.PUSH1, label %return, !prof !6

OP3086.PUSH1:                                     ; preds = %OP3082.MLOAD.contd, %resize.i24443
  %ecx.memory.buffer.ptr.shared.addr.i24438 = getelementptr inbounds i8, ptr %ecx.memory.i24432, i64 8
  %ecx.memory.buffer.ptr.shared.i24439 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24438, align 8, !noalias !100
  %ecx.memory.buffer.ptr.i24440 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24439, i64 %ecx.memory.last_checkpoint.i24436
  %slot.i24441 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24440, i64 %1434
  %1441 = tail call i256 @llvm.bswap.i256(i256 %dup1310069)
  store i256 %1441, ptr %slot.i24441, align 1, !noalias !100
  %dup210084 = load i256, ptr %sp10060, align 16
  %1442 = add i256 %dup210084, 32
  %sp10093 = getelementptr i256, ptr %sp10056, i64 -10
  %dup1310094 = load i256, ptr %sp10093, align 16
  store i256 %dup1310094, ptr %sp10070, align 16
  store i256 %1442, ptr %sp10074, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !103)
  %ecx.memory.i24447 = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !103
  %ecx.memory.len.addr.i24448 = getelementptr inbounds i8, ptr %ecx.memory.i24447, i64 16
  %ecx.memory.len.i24449 = load i64, ptr %ecx.memory.len.addr.i24448, align 8, !noalias !103
  %ecx.memory.last_checkpoint.addr.i24450 = getelementptr inbounds i8, ptr %ecx.memory.i24447, i64 48
  %ecx.memory.last_checkpoint.i24451 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24450, align 8, !noalias !103
  %1443 = sub i64 %ecx.memory.len.i24449, %ecx.memory.last_checkpoint.i24451
  %1444 = icmp ugt i256 %1442, 18446744073709551615
  %1445 = trunc i256 %1442 to i64
  %1446 = add i64 %1445, 32
  %1447 = icmp ugt i64 %1445, -33
  %1448 = or i1 %1444, %1447
  %1449 = select i1 %1448, i64 -1, i64 %1446
  %1450 = icmp ugt i64 %1449, %1443
  br i1 %1450, label %resize.i24458, label %OP3092.DUP2, !prof !5

resize.i24458:                                    ; preds = %OP3086.PUSH1
  %1451 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1449)
  %.not.i24459 = icmp eq i8 %1451, 0
  br i1 %.not.i24459, label %OP3092.DUP2, label %return, !prof !6

OP3092.DUP2:                                      ; preds = %OP3086.PUSH1, %resize.i24458
  %ecx.memory.buffer.ptr.shared.addr.i24453 = getelementptr inbounds i8, ptr %ecx.memory.i24447, i64 8
  %ecx.memory.buffer.ptr.shared.i24454 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24453, align 8, !noalias !103
  %ecx.memory.buffer.ptr.i24455 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24454, i64 %ecx.memory.last_checkpoint.i24451
  %slot.i24456 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24455, i64 %1445
  %1452 = tail call i256 @llvm.bswap.i256(i256 %dup1310094)
  store i256 %1452, ptr %slot.i24456, align 1, !noalias !103
  %dup210108 = load i256, ptr %sp10056, align 16
  store i256 %dup210108, ptr %sp10070, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !106)
  %ecx.memory.i24462 = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !106, !noalias !109
  %ecx.memory.len.addr.i24463 = getelementptr inbounds i8, ptr %ecx.memory.i24462, i64 16
  %ecx.memory.len.i24464 = load i64, ptr %ecx.memory.len.addr.i24463, align 8, !noalias !111
  %ecx.memory.last_checkpoint.addr.i24465 = getelementptr inbounds i8, ptr %ecx.memory.i24462, i64 48
  %ecx.memory.last_checkpoint.i24466 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24465, align 8, !noalias !111
  %1453 = sub i64 %ecx.memory.len.i24464, %ecx.memory.last_checkpoint.i24466
  %1454 = icmp ugt i256 %dup210108, 18446744073709551615
  %1455 = trunc i256 %dup210108 to i64
  %1456 = add i64 %1455, 32
  %1457 = icmp ugt i64 %1455, -33
  %1458 = or i1 %1454, %1457
  %1459 = select i1 %1458, i64 -1, i64 %1456
  %1460 = icmp ugt i64 %1459, %1453
  br i1 %1460, label %resize.i24474, label %OP3093.MLOAD.contd, !prof !5

resize.i24474:                                    ; preds = %OP3092.DUP2
  %1461 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1459), !noalias !109
  %.not.i24475 = icmp eq i8 %1461, 0
  br i1 %.not.i24475, label %resize.i24474.OP3093.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24474.OP3093.MLOAD.contd_crit_edge:       ; preds = %resize.i24474
  %swap.b10131.pre = load i256, ptr %sp10056, align 16
  br label %OP3093.MLOAD.contd

OP3093.MLOAD.contd:                               ; preds = %resize.i24474.OP3093.MLOAD.contd_crit_edge, %OP3092.DUP2
  %swap.b10131 = phi i256 [ %swap.b10131.pre, %resize.i24474.OP3093.MLOAD.contd_crit_edge ], [ %dup210108, %OP3092.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i24468 = getelementptr inbounds i8, ptr %ecx.memory.i24462, i64 8
  %ecx.memory.buffer.ptr.shared.i24469 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24468, align 8, !noalias !111
  %ecx.memory.buffer.ptr.i24470 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24469, i64 %ecx.memory.last_checkpoint.i24466
  %slot.i24471 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24470, i64 %1455
  %slot.value.i24472 = load i256, ptr %slot.i24471, align 1, !noalias !111
  %1462 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24472)
  %sp10119 = getelementptr i256, ptr %sp10056, i64 -12
  %dup16 = load i256, ptr %sp10119, align 16
  %sp10120 = getelementptr i256, ptr %sp10056, i64 4
  %1463 = and i256 %dup16, 1461501637330902918203684832716283019655932542975
  store i256 %1463, ptr %sp10056, align 16
  %contract.caller10134 = load i160, ptr %contract.caller.addr10133, align 16
  %1464 = tail call i160 @llvm.bswap.i160(i160 %contract.caller10134)
  %1465 = zext i160 %1464 to i256
  %swap.b10140 = load i256, ptr %sp10060, align 16
  store i256 %1465, ptr %sp10060, align 16
  %sp10142 = getelementptr i256, ptr %sp10056, i64 5
  %sp10146 = getelementptr i256, ptr %sp10056, i64 2
  store i256 -15920609018922013889778855752699675274319218694663800175615849495769140468586, ptr %sp10146, align 16
  %sp10156 = getelementptr i256, ptr %sp10056, i64 6
  store i256 %swap.b10140, ptr %sp10156, align 16
  %1466 = sub i256 %swap.b10140, %1462
  store i256 %swap.b10131, ptr %sp10142, align 16
  %1467 = add i256 %1466, %swap.b10131
  store i256 %1467, ptr %sp10074, align 16
  store i256 %1462, ptr %sp10120, align 16
  %1468 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10056, i8 3)
  %.not23557 = icmp eq i8 %1468, 0
  br i1 %.not23557, label %OP3111.POP, label %return, !prof !6

OP3111.POP:                                       ; preds = %OP3093.MLOAD.contd
  %sp10201 = getelementptr i256, ptr %sp10056, i64 -9
  store i256 1, ptr %sp10201, align 16
  %sp10203 = getelementptr i256, ptr %sp10056, i64 -8
  %sp10207 = getelementptr i256, ptr %sp10056, i64 -7
  store i256 1, ptr %sp10203, align 16
  store i256 12, ptr %sp10207, align 16
  %1469 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10203, i8 17)
  %.not23558 = icmp eq i8 %1469, 0
  br i1 %.not23558, label %OP3125.POP, label %return.loopexit25073.split.loop.exit25329, !prof !6

OP3125.POP:                                       ; preds = %OP3111.POP
  %swap.a10218 = load i256, ptr %sp10093, align 16
  %swap.b10220 = load i256, ptr %sp10119, align 16
  store i256 %swap.a10218, ptr %sp10119, align 16
  store i256 %swap.b10220, ptr %sp10093, align 16
  %swap.a10224 = load i256, ptr %sp10068, align 16
  %sp10225 = getelementptr i256, ptr %sp10056, i64 -13
  %swap.b10226 = load i256, ptr %sp10225, align 16
  store i256 %swap.a10224, ptr %sp10225, align 16
  store i256 %swap.b10226, ptr %sp10068, align 16
  %1470 = add i64 %len.addr.130, -11
  br label %dynamic_jump_table.backedge

OP3130.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP766.JUMPDEST
  %len.addr.131 = phi i64 [ %360, %OP766.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1471 = add i64 %len.addr.131, 1
  %sp10232 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.131
  store i256 64, ptr %sp10232, align 16
  %mload.out.slot10236 = alloca i256, align 16
  %1472 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10236, ptr %arg.ecx.addr)
  %.not23954 = icmp eq i8 %1472, 0
  br i1 %.not23954, label %OP3132.MLOAD.contd, label %return, !prof !6

OP3132.MLOAD.contd:                               ; preds = %OP3130.JUMPDEST
  %mload.out10237 = load i256, ptr %mload.out.slot10236, align 16
  store i256 %mload.out10237, ptr %sp10232, align 16
  %1473 = add i64 %len.addr.131, 2
  %sp10242 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1471
  %sp10244 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1473
  %1474 = add i256 %mload.out10237, 64
  store i256 %1474, ptr %sp10242, align 16
  store i256 64, ptr %sp10244, align 16
  %1475 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 64, i256 %1474, ptr %arg.ecx.addr)
  %.not23955 = icmp eq i8 %1475, 0
  br i1 %.not23955, label %OP3138.DUP1, label %return, !prof !6

OP3138.DUP1:                                      ; preds = %OP3132.MLOAD.contd
  %dup110260 = load i256, ptr %sp10232, align 16
  store i256 %dup110260, ptr %sp10242, align 16
  store i256 6, ptr %sp10244, align 16
  %sp10267 = getelementptr i256, ptr %sp10232, i64 3
  store i256 %dup110260, ptr %sp10267, align 16
  %1476 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup110260, i256 6, ptr %arg.ecx.addr)
  %.not23956 = icmp eq i8 %1476, 0
  br i1 %.not23956, label %OP3142.PUSH1, label %return, !prof !6

OP3142.PUSH1:                                     ; preds = %OP3138.DUP1
  %b10279 = load i256, ptr %sp10242, align 16
  %1477 = add i256 %b10279, 32
  store i256 %1477, ptr %sp10242, align 16
  store i256 38584911250388698612837757449965367182959626645333496662771568053921630912512, ptr %sp10244, align 16
  store i256 %1477, ptr %sp10267, align 16
  %1478 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1477, i256 38584911250388698612837757449965367182959626645333496662771568053921630912512, ptr %arg.ecx.addr)
  %.not23957 = icmp eq i8 %1478, 0
  br i1 %.not23957, label %OP3147.POP, label %return, !prof !6

OP3147.POP:                                       ; preds = %OP3142.PUSH1
  %sp10294 = getelementptr i256, ptr %sp10232, i64 -1
  %dup210295 = load i256, ptr %sp10294, align 16
  store i256 %dup210295, ptr %sp10242, align 16
  br label %dynamic_jump_table.preheader

OP3150.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %sp10302.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp10310.phi.trans.insert = getelementptr i256, ptr %sp10302.phi.trans.insert, i64 -2
  %dup510311.pre = load i256, ptr %sp10310.phi.trans.insert, align 16
  %sp10314.phi.trans.insert = getelementptr i256, ptr %sp10302.phi.trans.insert, i64 -1
  %dup510315.pre = load i256, ptr %sp10314.phi.trans.insert, align 16
  br label %OP3150.JUMPDEST

OP3150.JUMPDEST:                                  ; preds = %OP3150.JUMPDEST.loopexit, %OP785.JUMPDEST
  %dup510315 = phi i256 [ %372, %OP785.JUMPDEST ], [ %dup510315.pre, %OP3150.JUMPDEST.loopexit ]
  %dup510311 = phi i256 [ %370, %OP785.JUMPDEST ], [ %dup510311.pre, %OP3150.JUMPDEST.loopexit ]
  %len.addr.132 = phi i64 [ %len.addr.43, %OP785.JUMPDEST ], [ %len.addr.197, %OP3150.JUMPDEST.loopexit ]
  %sp10302 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.132
  store i256 0, ptr %sp10302, align 16
  %sp10304 = getelementptr i256, ptr %sp10302, i64 1
  store i256 3570, ptr %sp10304, align 16
  %contract.caller.addr10306 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller10307 = load i160, ptr %contract.caller.addr10306, align 16
  %1479 = tail call i160 @llvm.bswap.i160(i160 %contract.caller10307)
  %1480 = zext i160 %1479 to i256
  %sp10308 = getelementptr i256, ptr %sp10302, i64 2
  store i256 %1480, ptr %sp10308, align 16
  %sp10312 = getelementptr i256, ptr %sp10302, i64 3
  store i256 %dup510311, ptr %sp10312, align 16
  %1481 = add i64 %len.addr.132, 5
  %sp10316 = getelementptr i256, ptr %sp10302, i64 4
  store i256 %dup510315, ptr %sp10316, align 16
  br label %OP4620.JUMPDEST

OP3158.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP797.JUMPDEST
  %len.addr.133 = phi i64 [ %373, %OP797.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1482 = add i64 %len.addr.133, 1
  %sp10320 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.133
  store i256 1000, ptr %sp10320, align 16
  %sp10322 = getelementptr i256, ptr %sp10320, i64 -1
  %dup210323 = load i256, ptr %sp10322, align 16
  %sp10324 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1482
  store i256 %dup210323, ptr %sp10324, align 16
  br label %dynamic_jump_table.preheader

OP3162.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP816.JUMPDEST
  %len.addr.134 = phi i64 [ %380, %OP816.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1483 = add i64 %len.addr.134, 1
  %sp10330 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.134
  store i256 12, ptr %sp10330, align 16
  %1484 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10330, i8 17)
  %.not23991 = icmp eq i8 %1484, 0
  br i1 %.not23991, label %OP3165.PUSH1, label %return, !prof !6

OP3165.PUSH1:                                     ; preds = %OP3162.JUMPDEST
  %1485 = add i64 %len.addr.134, 2
  %sp10334 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1483
  store i256 1, ptr %sp10334, align 16
  %b10339 = load i256, ptr %sp10330, align 16
  %1486 = icmp eq i256 %b10339, 1
  %1487 = zext i1 %1486 to i256
  store i256 %1487, ptr %sp10330, align 16
  br i1 %1486, label %OP3200.JUMPDEST, label %OP3169.PUSH1

OP3169.PUSH1:                                     ; preds = %OP3165.PUSH1
  store i256 64, ptr %sp10330, align 16
  store i256 64, ptr %sp10334, align 16
  %mload.out.slot10353 = alloca i256, align 16
  %1488 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10353, ptr %arg.ecx.addr)
  %.not23992 = icmp eq i8 %1488, 0
  br i1 %.not23992, label %OP3171.MLOAD.contd, label %return, !prof !6

OP3171.MLOAD.contd:                               ; preds = %OP3169.PUSH1
  %mload.out10354 = load i256, ptr %mload.out.slot10353, align 16
  store i256 %mload.out10354, ptr %sp10334, align 16
  %sp10357 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1485
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp10357, align 16
  %sp10361 = getelementptr i256, ptr %sp10330, i64 3
  store i256 %mload.out10354, ptr %sp10361, align 16
  %1489 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10354, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23993 = icmp eq i8 %1489, 0
  br i1 %.not23993, label %OP3175.PUSH1, label %return, !prof !6

OP3175.PUSH1:                                     ; preds = %OP3171.MLOAD.contd
  store i256 32, ptr %sp10357, align 16
  %dup310373 = load i256, ptr %sp10334, align 16
  %sp10374 = getelementptr i256, ptr %sp10330, i64 4
  store i256 %dup310373, ptr %sp10374, align 16
  %1490 = add i256 %dup310373, 4
  store i256 %1490, ptr %sp10361, align 16
  %1491 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1490, i256 32, ptr %arg.ecx.addr)
  %.not23994 = icmp eq i8 %1491, 0
  br i1 %.not23994, label %OP3180.PUSH1, label %return, !prof !6

OP3180.PUSH1:                                     ; preds = %OP3175.PUSH1
  store i256 17, ptr %sp10357, align 16
  %dup310392 = load i256, ptr %sp10334, align 16
  store i256 %dup310392, ptr %sp10374, align 16
  %1492 = add i256 %dup310392, 36
  store i256 %1492, ptr %sp10361, align 16
  %1493 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1492, i256 17, ptr %arg.ecx.addr)
  %.not23995 = icmp eq i8 %1493, 0
  br i1 %.not23995, label %OP3185.PUSH32, label %return, !prof !6

OP3185.PUSH32:                                    ; preds = %OP3180.PUSH1
  store i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %sp10357, align 16
  %dup310411 = load i256, ptr %sp10334, align 16
  store i256 %dup310411, ptr %sp10374, align 16
  %1494 = add i256 %dup310411, 68
  store i256 %1494, ptr %sp10361, align 16
  %1495 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1494, i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %arg.ecx.addr)
  %.not23996 = icmp eq i8 %1495, 0
  br i1 %.not23996, label %OP3190.SWAP1, label %return, !prof !6

OP3190.SWAP1:                                     ; preds = %OP3185.PUSH32
  %swap.a10426 = load i256, ptr %sp10334, align 16
  %swap.b10428 = load i256, ptr %sp10330, align 16
  store i256 %swap.a10426, ptr %sp10330, align 16
  store i256 %swap.b10428, ptr %sp10334, align 16
  %mload.out.slot10432 = alloca i256, align 16
  %1496 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b10428, ptr %mload.out.slot10432, ptr %arg.ecx.addr)
  %.not23997 = icmp eq i8 %1496, 0
  br i1 %.not23997, label %OP3191.MLOAD.contd, label %return, !prof !6

OP3191.MLOAD.contd:                               ; preds = %OP3190.SWAP1
  %mload.out10433 = load i256, ptr %mload.out.slot10432, align 16
  %swap.b10439 = load i256, ptr %sp10330, align 16
  %1497 = sub i256 %swap.b10439, %mload.out10433
  store i256 100, ptr %sp10357, align 16
  %1498 = add i256 %1497, 100
  store i256 %1498, ptr %sp10330, align 16
  store i256 %mload.out10433, ptr %sp10334, align 16
  %1499 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10330, i8 16)
  %.not23998 = icmp eq i8 %1499, 0
  %spec.select17793 = select i1 %.not23998, i8 16, i8 %1499, !prof !6
  br label %return

OP3200.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre25837 = add i64 %len.addr.197, 1
  %.pre25839 = add i64 %len.addr.197, 2
  br label %OP3200.JUMPDEST

OP3200.JUMPDEST:                                  ; preds = %OP3200.JUMPDEST.loopexit, %OP3165.PUSH1
  %.pre-phi25840 = phi i64 [ %.pre25839, %OP3200.JUMPDEST.loopexit ], [ %1485, %OP3165.PUSH1 ]
  %.pre-phi25838 = phi i64 [ %.pre25837, %OP3200.JUMPDEST.loopexit ], [ %1483, %OP3165.PUSH1 ]
  %len.addr.135 = phi i64 [ %len.addr.197, %OP3200.JUMPDEST.loopexit ], [ %len.addr.134, %OP3165.PUSH1 ]
  %sp10472 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.135
  store i256 0, ptr %sp10472, align 16
  %sp10474 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi25838
  store i256 12, ptr %sp10474, align 16
  %1500 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10472, i8 17)
  %.not23999 = icmp eq i8 %1500, 0
  br i1 %.not23999, label %OP3204.PUSH1, label %return, !prof !6

OP3204.PUSH1:                                     ; preds = %OP3200.JUMPDEST
  store i256 6, ptr %sp10472, align 16
  %1501 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10472, i8 17)
  %.not24000 = icmp eq i8 %1501, 0
  br i1 %.not24000, label %OP3206.PUSH1, label %return, !prof !6

OP3206.PUSH1:                                     ; preds = %OP3204.PUSH1
  store i256 7, ptr %sp10474, align 16
  %1502 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10474, i8 17)
  %.not24001 = icmp eq i8 %1502, 0
  br i1 %.not24001, label %OP3208.PUSH1, label %return, !prof !6

OP3208.PUSH1:                                     ; preds = %OP3206.PUSH1
  %1503 = add i64 %len.addr.135, 3
  %sp10486 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi25840
  store i256 8, ptr %sp10486, align 16
  %1504 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10486, i8 17)
  %.not24002 = icmp eq i8 %1504, 0
  br i1 %.not24002, label %OP3210.PUSH1, label %return, !prof !6

OP3210.PUSH1:                                     ; preds = %OP3208.PUSH1
  %sp10490 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1503
  store i256 64, ptr %sp10490, align 16
  %1505 = add i64 %len.addr.135, 5
  %sp10494 = getelementptr i256, ptr %sp10472, i64 4
  store i256 64, ptr %sp10494, align 16
  %mload.out.slot10498 = alloca i256, align 16
  %1506 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10498, ptr %arg.ecx.addr)
  %.not24003 = icmp eq i8 %1506, 0
  br i1 %.not24003, label %OP3212.MLOAD.contd, label %return, !prof !6

OP3212.MLOAD.contd:                               ; preds = %OP3210.PUSH1
  %mload.out10499 = load i256, ptr %mload.out.slot10498, align 16
  store i256 %mload.out10499, ptr %sp10494, align 16
  %sp10502 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1505
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp10502, align 16
  %sp10506 = getelementptr i256, ptr %sp10472, i64 6
  store i256 %mload.out10499, ptr %sp10506, align 16
  %1507 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10499, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not24004 = icmp eq i8 %1507, 0
  br i1 %.not24004, label %OP3216.ADDRESS, label %return, !prof !6

OP3216.ADDRESS:                                   ; preds = %OP3212.MLOAD.contd
  %contract.target_address.addr10513 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address10514 = load i160, ptr %contract.target_address.addr10513, align 16
  %1508 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address10514)
  %1509 = zext i160 %1508 to i256
  store i256 %1509, ptr %sp10502, align 16
  %dup310520 = load i256, ptr %sp10494, align 16
  %sp10521 = getelementptr i256, ptr %sp10472, i64 7
  store i256 %dup310520, ptr %sp10521, align 16
  %1510 = add i256 %dup310520, 4
  store i256 %1510, ptr %sp10506, align 16
  %1511 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1510, i256 %1509, ptr %arg.ecx.addr)
  %.not24005 = icmp eq i8 %1511, 0
  br i1 %.not24005, label %OP3221.SWAP1, label %return, !prof !6

OP3221.SWAP1:                                     ; preds = %OP3216.ADDRESS
  %swap.a10535 = load i256, ptr %sp10494, align 16
  %swap.b10537 = load i256, ptr %sp10490, align 16
  store i256 %swap.a10535, ptr %sp10490, align 16
  store i256 %swap.b10537, ptr %sp10494, align 16
  %mload.out.slot10541 = alloca i256, align 16
  %1512 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b10537, ptr %mload.out.slot10541, ptr %arg.ecx.addr)
  %.not24006 = icmp eq i8 %1512, 0
  br i1 %.not24006, label %OP3222.MLOAD.contd, label %return, !prof !6

OP3222.MLOAD.contd:                               ; preds = %OP3221.SWAP1
  %mload.out10542 = load i256, ptr %mload.out.slot10541, align 16
  %swap.b10550 = load i256, ptr %sp10472, align 16
  %1513 = and i256 %swap.b10550, 1461501637330902918203684832716283019655932542975
  store i256 %1513, ptr %sp10472, align 16
  %sp10574 = getelementptr i256, ptr %sp10472, i64 1
  %swap.b10575 = load i256, ptr %sp10574, align 16
  %1514 = and i256 %swap.b10575, 1461501637330902918203684832716283019655932542975
  store i256 %1514, ptr %sp10574, align 16
  %sp10592 = getelementptr i256, ptr %sp10472, i64 2
  %swap.b10593 = load i256, ptr %sp10592, align 16
  store i256 6699, ptr %sp10592, align 16
  %sp10601 = getelementptr i256, ptr %sp10472, i64 3
  %swap.b10602 = load i256, ptr %sp10601, align 16
  store i256 %1513, ptr %sp10601, align 16
  %sp10604 = getelementptr i256, ptr %sp10472, i64 -1
  %dup810605 = load i256, ptr %sp10604, align 16
  store i256 %dup810605, ptr %sp10494, align 16
  %sp10613 = getelementptr i256, ptr %sp10472, i64 8
  %sp10617 = getelementptr i256, ptr %sp10472, i64 5
  store i256 6694, ptr %sp10617, align 16
  %sp10620 = getelementptr i256, ptr %sp10472, i64 9
  %1515 = and i256 %swap.b10593, 5192296858534827628530496329220095
  store i256 %1515, ptr %sp10506, align 16
  store i256 %1513, ptr %sp10521, align 16
  %sp10642 = getelementptr i256, ptr %sp10472, i64 10
  store i256 1889567281, ptr %sp10613, align 16
  %sp10649 = getelementptr i256, ptr %sp10472, i64 11
  %sp10653 = getelementptr i256, ptr %sp10472, i64 12
  %sp10657 = getelementptr i256, ptr %sp10472, i64 13
  %1516 = add i256 %swap.b10602, 36
  store i256 %1516, ptr %sp10620, align 16
  store i256 32, ptr %sp10642, align 16
  store i256 %mload.out10542, ptr %sp10649, align 16
  %sp10694 = getelementptr i256, ptr %sp10472, i64 14
  %1517 = sub i256 %swap.b10602, %mload.out10542
  %1518 = add i256 %1517, 36
  store i256 %1518, ptr %sp10653, align 16
  store i256 %mload.out10542, ptr %sp10657, align 16
  store i256 %1513, ptr %sp10694, align 16
  %1519 = add i64 %len.addr.135, 16
  %sp10723 = getelementptr i256, ptr %sp10472, i64 15
  store i256 %1513, ptr %sp10723, align 16
  %1520 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10723, i8 17)
  %.not24007 = icmp eq i8 %1520, 0
  br i1 %.not24007, label %OP3265.ISZERO, label %return, !prof !6

OP3265.ISZERO:                                    ; preds = %OP3222.MLOAD.contd
  %a10728 = load i256, ptr %sp10723, align 16
  %1521 = icmp eq i256 %a10728, 0
  %1522 = zext i1 %1521 to i256
  store i256 %1522, ptr %sp10723, align 16
  %sp10733 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1519
  %1523 = xor i1 %1521, true
  %1524 = zext i1 %1523 to i256
  store i256 %1524, ptr %sp10733, align 16
  br i1 %1521, label %OP3270.PUSH1, label %OP3273.JUMPDEST

OP3270.PUSH1:                                     ; preds = %OP3265.ISZERO
  store i256 0, ptr %sp10733, align 16
  %sp10746 = getelementptr i256, ptr %sp10472, i64 17
  store i256 0, ptr %sp10746, align 16
  %1525 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10733, i8 16)
  %.not24008 = icmp eq i8 %1525, 0
  %spec.select17794 = select i1 %.not24008, i8 16, i8 %1525, !prof !6
  br label %return

OP3273.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3371.ISZERO, %OP3265.ISZERO
  %len.addr.136 = phi i64 [ %1575, %OP3371.ISZERO ], [ %1519, %OP3265.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining10752 = load i64, ptr %gas.remaining.addr, align 8
  %1526 = zext i64 %gas.remaining10752 to i256
  %1527 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.136
  %sp10753 = getelementptr i256, ptr %1527, i64 -1
  store i256 %1526, ptr %sp10753, align 16
  %1528 = add i64 %len.addr.136, -6
  %sp10755 = getelementptr i256, ptr %1527, i64 -6
  %1529 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp10755, i8 17, i8 3)
  %.not24009 = icmp eq i8 %1529, 0
  br i1 %.not24009, label %suspend, label %return, !prof !6

OP3277.ISZERO:                                    ; preds = %resume
  %1530 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp10757 = getelementptr i256, ptr %1530, i64 -1
  %a10758 = load i256, ptr %sp10757, align 16
  %1531 = icmp eq i256 %a10758, 0
  %1532 = zext i1 %1531 to i256
  store i256 %1532, ptr %sp10757, align 16
  %1533 = xor i1 %1531, true
  %1534 = zext i1 %1533 to i256
  store i256 %1534, ptr %1530, align 16
  br i1 %1531, label %OP3282.RETURNDATASIZE, label %OP3289.JUMPDEST

OP3282.RETURNDATASIZE:                            ; preds = %OP3277.ISZERO
  %ecx.return_data.len.addr10772 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len10773 = load i64, ptr %ecx.return_data.len.addr10772, align 8
  %1535 = zext i64 %ecx.return_data.len10773 to i256
  store i256 %1535, ptr %1530, align 16
  %sp10776 = getelementptr i256, ptr %1530, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp10776, i8 0, i64 64, i1 false)
  %1536 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1530)
  %.not23381 = icmp eq i8 %1536, 0
  br i1 %.not23381, label %OP3286.RETURNDATASIZE, label %return, !prof !6

OP3286.RETURNDATASIZE:                            ; preds = %OP3282.RETURNDATASIZE
  %ecx.return_data.len10785 = load i64, ptr %ecx.return_data.len.addr10772, align 8
  %1537 = zext i64 %ecx.return_data.len10785 to i256
  store i256 %1537, ptr %1530, align 16
  store i256 0, ptr %sp10776, align 16
  %1538 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1530, i8 16)
  %.not23382 = icmp eq i8 %1538, 0
  %spec.select17795 = select i1 %.not23382, i8 16, i8 %1538, !prof !6
  br label %return

OP3289.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3277.ISZERO
  %len.addr.137 = phi i64 [ %stack_len17730, %OP3277.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1539 = add i64 %len.addr.137, -3
  %1540 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.137
  %sp10797 = getelementptr i256, ptr %1540, i64 -4
  store i256 64, ptr %sp10797, align 16
  %mload.out.slot10801 = alloca i256, align 16
  %1541 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10801, ptr %arg.ecx.addr)
  %.not23548 = icmp eq i8 %1541, 0
  br i1 %.not23548, label %OP3295.MLOAD.contd, label %return, !prof !6

OP3295.MLOAD.contd:                               ; preds = %OP3289.JUMPDEST
  %1542 = add i64 %len.addr.137, -2
  %mload.out10802 = load i256, ptr %mload.out.slot10801, align 16
  store i256 %mload.out10802, ptr %sp10797, align 16
  %ecx.return_data.len.addr10805 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len10806 = load i64, ptr %ecx.return_data.len.addr10805, align 8
  %1543 = zext i64 %ecx.return_data.len10806 to i256
  %sp10807 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1539
  store i256 %1543, ptr %sp10807, align 16
  %sp10809 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1542
  %sp10813 = getelementptr i256, ptr %1540, i64 -1
  store i256 %1543, ptr %sp10813, align 16
  %1544 = icmp ugt i64 %ecx.return_data.len10806, 31
  %1545 = zext i1 %1544 to i256
  store i256 %1545, ptr %sp10809, align 16
  br i1 %1544, label %OP3306.JUMPDEST, label %OP3303.PUSH1

OP3303.PUSH1:                                     ; preds = %OP3295.MLOAD.contd
  store i256 0, ptr %sp10809, align 16
  %sp10830 = getelementptr i256, ptr %1540, i64 -2
  store i256 0, ptr %sp10813, align 16
  %1546 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10830, i8 16)
  %.not23549 = icmp eq i8 %1546, 0
  %spec.select17796 = select i1 %.not23549, i8 16, i8 %1546, !prof !6
  br label %return

OP3306.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3295.MLOAD.contd
  %len.addr.138 = phi i64 [ %1542, %OP3295.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1547 = add i64 %len.addr.138, -1
  %1548 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.138
  %sp10838 = getelementptr i256, ptr %1548, i64 -2
  %a10839 = load i256, ptr %sp10838, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !112)
  %ecx.memory.addr.i24477 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24478 = load ptr, ptr %ecx.memory.addr.i24477, align 8, !alias.scope !112, !noalias !115
  %ecx.memory.len.addr.i24479 = getelementptr inbounds i8, ptr %ecx.memory.i24478, i64 16
  %ecx.memory.len.i24480 = load i64, ptr %ecx.memory.len.addr.i24479, align 8, !noalias !117
  %ecx.memory.last_checkpoint.addr.i24481 = getelementptr inbounds i8, ptr %ecx.memory.i24478, i64 48
  %ecx.memory.last_checkpoint.i24482 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24481, align 8, !noalias !117
  %1549 = sub i64 %ecx.memory.len.i24480, %ecx.memory.last_checkpoint.i24482
  %1550 = icmp ugt i256 %a10839, 18446744073709551615
  %1551 = trunc i256 %a10839 to i64
  %1552 = add i64 %1551, 32
  %1553 = icmp ugt i64 %1551, -33
  %1554 = or i1 %1550, %1553
  %1555 = select i1 %1554, i64 -1, i64 %1552
  %1556 = icmp ugt i64 %1555, %1549
  br i1 %1556, label %resize.i24490, label %OP3308.MLOAD.contd, !prof !5

resize.i24490:                                    ; preds = %OP3306.JUMPDEST
  %1557 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1555), !noalias !115
  %.not.i24491 = icmp eq i8 %1557, 0
  br i1 %.not.i24491, label %OP3308.MLOAD.contd, label %return, !prof !6

OP3308.MLOAD.contd:                               ; preds = %OP3306.JUMPDEST, %resize.i24490
  %ecx.memory.buffer.ptr.shared.addr.i24484 = getelementptr inbounds i8, ptr %ecx.memory.i24478, i64 8
  %ecx.memory.buffer.ptr.shared.i24485 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24484, align 8, !noalias !117
  %ecx.memory.buffer.ptr.i24486 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24485, i64 %ecx.memory.last_checkpoint.i24482
  %slot.i24487 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24486, i64 %1551
  %slot.value.i24488 = load i256, ptr %slot.i24487, align 1, !noalias !117
  %1558 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24488)
  %sp10846 = getelementptr i256, ptr %1548, i64 -3
  %swap.b10847 = load i256, ptr %sp10846, align 16
  store i256 %1558, ptr %sp10846, align 16
  store i256 %swap.b10847, ptr %sp10838, align 16
  store i256 8814, ptr %1548, align 16
  %sp10855 = getelementptr i256, ptr %1548, i64 -1
  store i256 8814, ptr %sp10855, align 16
  br label %dynamic_jump_table.preheader

OP3317.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1559 = add i64 %len.addr.197, 1
  %sp10865 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 8, ptr %sp10865, align 16
  %1560 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10865, i8 17)
  %.not23541 = icmp eq i8 %1560, 0
  br i1 %.not23541, label %OP3320.PUSH1, label %return, !prof !6

OP3320.PUSH1:                                     ; preds = %OP3317.JUMPDEST
  %sp10869 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1559
  store i256 64, ptr %sp10869, align 16
  %1561 = add i64 %len.addr.197, 3
  %sp10873 = getelementptr i256, ptr %sp10865, i64 2
  store i256 64, ptr %sp10873, align 16
  %mload.out.slot10877 = alloca i256, align 16
  %1562 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10877, ptr %arg.ecx.addr)
  %.not23542 = icmp eq i8 %1562, 0
  br i1 %.not23542, label %OP3322.MLOAD.contd, label %return, !prof !6

OP3322.MLOAD.contd:                               ; preds = %OP3320.PUSH1
  %mload.out10878 = load i256, ptr %mload.out.slot10877, align 16
  store i256 %mload.out10878, ptr %sp10873, align 16
  %sp10881 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1561
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp10881, align 16
  %sp10885 = getelementptr i256, ptr %sp10865, i64 4
  store i256 %mload.out10878, ptr %sp10885, align 16
  %1563 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10878, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23543 = icmp eq i8 %1563, 0
  br i1 %.not23543, label %OP3326.ADDRESS, label %return, !prof !6

OP3326.ADDRESS:                                   ; preds = %OP3322.MLOAD.contd
  %contract.target_address10893 = load i160, ptr %contract.target_address.addr9353, align 16
  %1564 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address10893)
  %1565 = zext i160 %1564 to i256
  store i256 %1565, ptr %sp10881, align 16
  %dup310899 = load i256, ptr %sp10873, align 16
  %sp10900 = getelementptr i256, ptr %sp10865, i64 5
  store i256 %dup310899, ptr %sp10900, align 16
  %1566 = add i256 %dup310899, 4
  store i256 %1566, ptr %sp10885, align 16
  %1567 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1566, i256 %1565, ptr %arg.ecx.addr)
  %.not23544 = icmp eq i8 %1567, 0
  br i1 %.not23544, label %OP3331.SWAP1, label %return, !prof !6

OP3331.SWAP1:                                     ; preds = %OP3326.ADDRESS
  %swap.a10914 = load i256, ptr %sp10873, align 16
  %swap.b10916 = load i256, ptr %sp10869, align 16
  store i256 %swap.a10914, ptr %sp10869, align 16
  store i256 %swap.b10916, ptr %sp10873, align 16
  %mload.out.slot10920 = alloca i256, align 16
  %1568 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b10916, ptr %mload.out.slot10920, ptr %arg.ecx.addr)
  %.not23545 = icmp eq i8 %1568, 0
  br i1 %.not23545, label %OP3332.MLOAD.contd, label %return, !prof !6

OP3332.MLOAD.contd:                               ; preds = %OP3331.SWAP1
  %mload.out10921 = load i256, ptr %mload.out.slot10920, align 16
  %swap.b10929 = load i256, ptr %sp10865, align 16
  store i256 6858, ptr %sp10865, align 16
  %sp10931 = getelementptr i256, ptr %sp10865, i64 -1
  %dup510932 = load i256, ptr %sp10931, align 16
  %sp10937 = getelementptr i256, ptr %sp10865, i64 1
  %swap.b10938 = load i256, ptr %sp10937, align 16
  store i256 %dup510932, ptr %sp10937, align 16
  %sp10940 = getelementptr i256, ptr %sp10865, i64 -3
  %dup810941 = load i256, ptr %sp10940, align 16
  store i256 %dup810941, ptr %sp10873, align 16
  %sp10949 = getelementptr i256, ptr %sp10865, i64 6
  %sp10953 = getelementptr i256, ptr %sp10865, i64 3
  store i256 6694, ptr %sp10953, align 16
  %sp10956 = getelementptr i256, ptr %sp10865, i64 7
  %1569 = lshr i256 %swap.b10929, 112
  %1570 = and i256 %1569, 5192296858534827628530496329220095
  store i256 %1570, ptr %sp10885, align 16
  %sp10986 = getelementptr i256, ptr %sp10865, i64 8
  %1571 = and i256 %dup510932, 1461501637330902918203684832716283019655932542975
  store i256 %1571, ptr %sp10900, align 16
  store i256 1889567281, ptr %sp10949, align 16
  %sp11006 = getelementptr i256, ptr %sp10865, i64 9
  %sp11010 = getelementptr i256, ptr %sp10865, i64 10
  %sp11014 = getelementptr i256, ptr %sp10865, i64 11
  %1572 = add i256 %swap.b10938, 36
  store i256 %1572, ptr %sp10956, align 16
  store i256 32, ptr %sp10986, align 16
  store i256 %mload.out10921, ptr %sp11006, align 16
  %sp11051 = getelementptr i256, ptr %sp10865, i64 12
  %1573 = sub i256 %swap.b10938, %mload.out10921
  %1574 = add i256 %1573, 36
  store i256 %1574, ptr %sp11010, align 16
  store i256 %mload.out10921, ptr %sp11014, align 16
  store i256 %1571, ptr %sp11051, align 16
  %1575 = add i64 %len.addr.197, 14
  %sp11080 = getelementptr i256, ptr %sp10865, i64 13
  store i256 %1571, ptr %sp11080, align 16
  %1576 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11080, i8 17)
  %.not23546 = icmp eq i8 %1576, 0
  br i1 %.not23546, label %OP3371.ISZERO, label %return, !prof !6

OP3371.ISZERO:                                    ; preds = %OP3332.MLOAD.contd
  %a11085 = load i256, ptr %sp11080, align 16
  %1577 = icmp eq i256 %a11085, 0
  %1578 = zext i1 %1577 to i256
  store i256 %1578, ptr %sp11080, align 16
  %sp11090 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1575
  %1579 = xor i1 %1577, true
  %1580 = zext i1 %1579 to i256
  store i256 %1580, ptr %sp11090, align 16
  br i1 %1577, label %OP3376.PUSH1, label %OP3273.JUMPDEST

OP3376.PUSH1:                                     ; preds = %OP3371.ISZERO
  store i256 0, ptr %sp11090, align 16
  %sp11103 = getelementptr i256, ptr %sp10865, i64 15
  store i256 0, ptr %sp11103, align 16
  %1581 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11090, i8 16)
  %.not23547 = icmp eq i8 %1581, 0
  %spec.select17797 = select i1 %.not23547, i8 16, i8 %1581, !prof !6
  br label %return

OP3379.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1582 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp11110 = getelementptr i256, ptr %1582, i64 -2
  store i256 1, ptr %sp11110, align 16
  %sp11112 = getelementptr i256, ptr %1582, i64 -1
  store i256 12, ptr %sp11112, align 16
  %1583 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11110, i8 17)
  %.not23540 = icmp eq i8 %1583, 0
  br i1 %.not23540, label %OP3385.POP, label %return.loopexit25073.split.loop.exit25332, !prof !6

OP3385.POP:                                       ; preds = %OP3379.JUMPDEST
  %1584 = add i64 %len.addr.197, -4
  %sp11117 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1584
  %a11118 = load i256, ptr %sp11117, align 16
  br label %dynamic_jump_table.backedge

OP3387.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP823.JUMPDEST
  %len.addr.139 = phi i64 [ %385, %OP823.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1585 = add i64 %len.addr.139, 1
  %sp11121 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.139
  store i256 5, ptr %sp11121, align 16
  %1586 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11121, i8 17)
  %.not23989 = icmp eq i8 %1586, 0
  br i1 %.not23989, label %OP3390.PUSH20, label %return, !prof !6

OP3390.PUSH20:                                    ; preds = %OP3387.JUMPDEST
  %sp11125 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1585
  %b11130 = load i256, ptr %sp11121, align 16
  %1587 = and i256 %b11130, 1461501637330902918203684832716283019655932542975
  store i256 %1587, ptr %sp11121, align 16
  %sp11133 = getelementptr i256, ptr %sp11121, i64 -1
  %dup211134 = load i256, ptr %sp11133, align 16
  store i256 %dup211134, ptr %sp11125, align 16
  br label %dynamic_jump_table.preheader

OP3394.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP827.JUMPDEST
  %len.addr.140 = phi i64 [ %386, %OP827.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1588 = add i64 %len.addr.140, 1
  %sp11141 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.140
  store i256 7, ptr %sp11141, align 16
  %1589 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11141, i8 17)
  %.not23860 = icmp eq i8 %1589, 0
  br i1 %.not23860, label %OP3397.PUSH20, label %return, !prof !6

OP3397.PUSH20:                                    ; preds = %OP3394.JUMPDEST
  %sp11145 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1588
  %b11150 = load i256, ptr %sp11141, align 16
  %1590 = and i256 %b11150, 1461501637330902918203684832716283019655932542975
  store i256 %1590, ptr %sp11141, align 16
  %sp11153 = getelementptr i256, ptr %sp11141, i64 -1
  %dup211154 = load i256, ptr %sp11153, align 16
  store i256 %dup211154, ptr %sp11145, align 16
  br label %dynamic_jump_table.preheader

OP3401.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP846.JUMPDEST
  %len.addr.141 = phi i64 [ %403, %OP846.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %env.block.timestamp.addr = getelementptr inbounds i8, ptr %arg.env.addr, i64 80
  %env.block.timestamp = load i256, ptr %env.block.timestamp.addr, align 16
  %sp11161 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.141
  %1591 = add i64 %len.addr.141, 2
  %sp11163 = getelementptr i256, ptr %sp11161, i64 -4
  %dup511164 = load i256, ptr %sp11163, align 16
  %sp11165 = getelementptr i256, ptr %sp11161, i64 1
  store i256 %dup511164, ptr %sp11165, align 16
  %1592 = icmp uge i256 %dup511164, %env.block.timestamp
  %1593 = zext i1 %1592 to i256
  store i256 %1593, ptr %sp11161, align 16
  br i1 %1592, label %OP3439.JUMPDEST, label %OP3408.PUSH1

OP3408.PUSH1:                                     ; preds = %OP3401.JUMPDEST
  store i256 64, ptr %sp11161, align 16
  store i256 64, ptr %sp11165, align 16
  %mload.out.slot11188 = alloca i256, align 16
  %1594 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot11188, ptr %arg.ecx.addr)
  %.not23819 = icmp eq i8 %1594, 0
  br i1 %.not23819, label %OP3410.MLOAD.contd, label %return, !prof !6

OP3410.MLOAD.contd:                               ; preds = %OP3408.PUSH1
  %mload.out11189 = load i256, ptr %mload.out.slot11188, align 16
  store i256 %mload.out11189, ptr %sp11165, align 16
  %sp11192 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1591
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp11192, align 16
  %sp11196 = getelementptr i256, ptr %sp11161, i64 3
  store i256 %mload.out11189, ptr %sp11196, align 16
  %1595 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out11189, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23820 = icmp eq i8 %1595, 0
  br i1 %.not23820, label %OP3414.PUSH1, label %return, !prof !6

OP3414.PUSH1:                                     ; preds = %OP3410.MLOAD.contd
  store i256 32, ptr %sp11192, align 16
  %dup311208 = load i256, ptr %sp11165, align 16
  %sp11209 = getelementptr i256, ptr %sp11161, i64 4
  store i256 %dup311208, ptr %sp11209, align 16
  %1596 = add i256 %dup311208, 4
  store i256 %1596, ptr %sp11196, align 16
  %1597 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1596, i256 32, ptr %arg.ecx.addr)
  %.not23821 = icmp eq i8 %1597, 0
  br i1 %.not23821, label %OP3419.PUSH1, label %return, !prof !6

OP3419.PUSH1:                                     ; preds = %OP3414.PUSH1
  store i256 18, ptr %sp11192, align 16
  %dup311227 = load i256, ptr %sp11165, align 16
  store i256 %dup311227, ptr %sp11209, align 16
  %1598 = add i256 %dup311227, 36
  store i256 %1598, ptr %sp11196, align 16
  %1599 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1598, i256 18, ptr %arg.ecx.addr)
  %.not23822 = icmp eq i8 %1599, 0
  br i1 %.not23822, label %OP3424.PUSH32, label %return, !prof !6

OP3424.PUSH32:                                    ; preds = %OP3419.PUSH1
  store i256 38641673103035791731704587894057369281770848613377023642476638478731803885568, ptr %sp11192, align 16
  %dup311246 = load i256, ptr %sp11165, align 16
  store i256 %dup311246, ptr %sp11209, align 16
  %1600 = add i256 %dup311246, 68
  store i256 %1600, ptr %sp11196, align 16
  %1601 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1600, i256 38641673103035791731704587894057369281770848613377023642476638478731803885568, ptr %arg.ecx.addr)
  %.not23823 = icmp eq i8 %1601, 0
  br i1 %.not23823, label %OP3429.SWAP1, label %return, !prof !6

OP3429.SWAP1:                                     ; preds = %OP3424.PUSH32
  %swap.a11261 = load i256, ptr %sp11165, align 16
  %swap.b11263 = load i256, ptr %sp11161, align 16
  store i256 %swap.a11261, ptr %sp11161, align 16
  store i256 %swap.b11263, ptr %sp11165, align 16
  %mload.out.slot11267 = alloca i256, align 16
  %1602 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b11263, ptr %mload.out.slot11267, ptr %arg.ecx.addr)
  %.not23824 = icmp eq i8 %1602, 0
  br i1 %.not23824, label %OP3430.MLOAD.contd, label %return, !prof !6

OP3430.MLOAD.contd:                               ; preds = %OP3429.SWAP1
  %mload.out11268 = load i256, ptr %mload.out.slot11267, align 16
  %swap.b11274 = load i256, ptr %sp11161, align 16
  %1603 = sub i256 %swap.b11274, %mload.out11268
  store i256 100, ptr %sp11192, align 16
  %1604 = add i256 %1603, 100
  store i256 %1604, ptr %sp11161, align 16
  store i256 %mload.out11268, ptr %sp11165, align 16
  %1605 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11161, i8 16)
  %.not23825 = icmp eq i8 %1605, 0
  %spec.select17798 = select i1 %.not23825, i8 16, i8 %1605, !prof !6
  br label %return

OP3439.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3401.JUMPDEST
  %len.addr.142 = phi i64 [ %len.addr.141, %OP3401.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1606 = add i64 %len.addr.142, 1
  %sp11307 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.142
  store i256 3, ptr %sp11307, align 16
  %1607 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11307, i8 17)
  %.not23826 = icmp eq i8 %1607, 0
  br i1 %.not23826, label %OP3442.PUSH20, label %return, !prof !6

OP3442.PUSH20:                                    ; preds = %OP3439.JUMPDEST
  %sp11311 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1606
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp11311, align 16
  %sp11315 = getelementptr i256, ptr %sp11307, i64 2
  %1608 = add i64 %len.addr.142, 4
  %sp11317 = getelementptr i256, ptr %sp11307, i64 -7
  %dup1011318 = load i256, ptr %sp11317, align 16
  %sp11319 = getelementptr i256, ptr %sp11307, i64 3
  %1609 = and i256 %dup1011318, 1461501637330902918203684832716283019655932542975
  store i256 %1609, ptr %sp11315, align 16
  store i256 0, ptr %sp11319, align 16
  %1610 = add i64 %len.addr.142, 5
  %sp11331 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1608
  store i256 %1609, ptr %sp11331, align 16
  %1611 = add i64 %len.addr.142, 6
  %sp11335 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1610
  store i256 0, ptr %sp11335, align 16
  %1612 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %1609, ptr %arg.ecx.addr)
  %.not23827 = icmp eq i8 %1612, 0
  br i1 %.not23827, label %OP3450.PUSH1, label %return, !prof !6

OP3450.PUSH1:                                     ; preds = %OP3442.PUSH20
  store i256 32, ptr %sp11331, align 16
  store i256 4, ptr %sp11335, align 16
  %1613 = add i64 %len.addr.142, 7
  %sp11353 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1611
  store i256 32, ptr %sp11353, align 16
  %1614 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 4, ptr %arg.ecx.addr)
  %.not23828 = icmp eq i8 %1614, 0
  br i1 %.not23828, label %OP3455.PUSH1, label %return, !prof !6

OP3455.PUSH1:                                     ; preds = %OP3450.PUSH1
  store i256 64, ptr %sp11335, align 16
  store i256 64, ptr %sp11353, align 16
  %1615 = add i64 %len.addr.142, 8
  %dup411367 = load i256, ptr %sp11319, align 16
  %sp11368 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1613
  store i256 %dup411367, ptr %sp11368, align 16
  %1616 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11353)
  %.not23829 = icmp eq i8 %1616, 0
  br i1 %.not23829, label %OP3459.DUP1, label %return, !prof !6

OP3459.DUP1:                                      ; preds = %OP3455.PUSH1
  %dup111373 = load i256, ptr %sp11353, align 16
  store i256 %dup111373, ptr %sp11368, align 16
  %1617 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11368, i8 17)
  %.not23830 = icmp eq i8 %1617, 0
  br i1 %.not23830, label %OP3461.PUSH1, label %return, !prof !6

OP3461.PUSH1:                                     ; preds = %OP3459.DUP1
  %1618 = add i64 %len.addr.142, 9
  %sp11378 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1615
  %sp11382 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1618
  %dup311385 = load i256, ptr %sp11368, align 16
  %sp11386 = getelementptr i256, ptr %sp11307, i64 10
  store i256 %dup311385, ptr %sp11386, align 16
  %1619 = add i256 %dup311385, 1
  store i256 %1619, ptr %sp11378, align 16
  %sp11401 = getelementptr i256, ptr %sp11307, i64 6
  %swap.b11402 = load i256, ptr %sp11401, align 16
  store i256 1, ptr %sp11401, align 16
  store i256 %swap.b11402, ptr %sp11382, align 16
  %1620 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11378, i8 17)
  %.not23831 = icmp eq i8 %1620, 0
  br i1 %.not23831, label %OP3468.DUP3, label %return, !prof !6

OP3468.DUP3:                                      ; preds = %OP3461.PUSH1
  %dup311407 = load i256, ptr %sp11335, align 16
  store i256 %dup311407, ptr %sp11378, align 16
  %mload.out.slot11412 = alloca i256, align 16
  %1621 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup311407, ptr %mload.out.slot11412, ptr %arg.ecx.addr)
  %.not23832 = icmp eq i8 %1621, 0
  br i1 %.not23832, label %OP3469.MLOAD.contd, label %return, !prof !6

OP3469.MLOAD.contd:                               ; preds = %OP3468.DUP3
  %mload.out11413 = load i256, ptr %mload.out.slot11412, align 16
  store i256 %mload.out11413, ptr %sp11378, align 16
  store i256 49955707469362902507454157297736832118868343942642399513960811609542965143241, ptr %sp11382, align 16
  %sp11422 = getelementptr i256, ptr %sp11307, i64 4
  %dup711423 = load i256, ptr %sp11422, align 16
  %sp11424 = getelementptr i256, ptr %sp11307, i64 11
  store i256 %dup711423, ptr %sp11424, align 16
  %1622 = add i256 %dup711423, %mload.out11413
  store i256 %1622, ptr %sp11386, align 16
  %1623 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1622, i256 49955707469362902507454157297736832118868343942642399513960811609542965143241, ptr %arg.ecx.addr)
  %.not23833 = icmp eq i8 %1623, 0
  br i1 %.not23833, label %OP3475.DUP1, label %return, !prof !6

OP3475.DUP1:                                      ; preds = %OP3469.MLOAD.contd
  %dup111438 = load i256, ptr %sp11378, align 16
  %sp11441 = getelementptr i256, ptr %sp11307, i64 5
  %dup511442 = load i256, ptr %sp11441, align 16
  store i256 %dup511442, ptr %sp11386, align 16
  %1624 = add i256 %dup511442, %dup111438
  %swap.b11454 = load i256, ptr %sp11315, align 16
  store i256 %swap.b11454, ptr %sp11378, align 16
  store i256 %dup111438, ptr %sp11315, align 16
  store i256 %1624, ptr %sp11382, align 16
  %1625 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1624, i256 %swap.b11454, ptr %arg.ecx.addr)
  %.not23834 = icmp eq i8 %1625, 0
  br i1 %.not23834, label %OP3482.SWAP6, label %return, !prof !6

OP3482.SWAP6:                                     ; preds = %OP3475.DUP1
  %swap.a11472 = load i256, ptr %sp11368, align 16
  %sp11473 = getelementptr i256, ptr %sp11307, i64 1
  %swap.b11474 = load i256, ptr %sp11473, align 16
  store i256 %swap.a11472, ptr %sp11473, align 16
  %sp11476 = getelementptr i256, ptr %sp11307, i64 -6
  %dup1411477 = load i256, ptr %sp11476, align 16
  %1626 = and i256 %dup1411477, %swap.b11474
  store i256 %1626, ptr %sp11368, align 16
  %dup711489 = load i256, ptr %sp11315, align 16
  store i256 %dup711489, ptr %sp11382, align 16
  %1627 = add i256 %dup711489, 96
  store i256 %1627, ptr %sp11378, align 16
  %1628 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1627, i256 %1626, ptr %arg.ecx.addr)
  %.not23835 = icmp eq i8 %1628, 0
  br i1 %.not23835, label %OP3489.PUSH1, label %return, !prof !6

OP3489.PUSH1:                                     ; preds = %OP3482.SWAP6
  %dup611506 = load i256, ptr %sp11315, align 16
  %1629 = add i256 %dup611506, 128
  %sp11515 = getelementptr i256, ptr %sp11307, i64 -5
  %dup1311516 = load i256, ptr %sp11515, align 16
  store i256 %dup1311516, ptr %sp11368, align 16
  store i256 %1629, ptr %sp11378, align 16
  %1630 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1629, i256 %dup1311516, ptr %arg.ecx.addr)
  %.not23836 = icmp eq i8 %1630, 0
  br i1 %.not23836, label %OP3495.PUSH1, label %return, !prof !6

OP3495.PUSH1:                                     ; preds = %OP3489.PUSH1
  %dup611532 = load i256, ptr %sp11315, align 16
  store i256 %dup611532, ptr %sp11378, align 16
  %1631 = add i256 %dup611532, 160
  %swap.b11544 = load i256, ptr %sp11473, align 16
  %swap.b11549 = load i256, ptr %sp11353, align 16
  store i256 %swap.b11544, ptr %sp11353, align 16
  store i256 %swap.b11549, ptr %sp11473, align 16
  store i256 %1631, ptr %sp11368, align 16
  %1632 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1631, i256 %swap.b11544, ptr %arg.ecx.addr)
  %.not23837 = icmp eq i8 %1632, 0
  br i1 %.not23837, label %OP3502.PUSH1, label %return, !prof !6

OP3502.PUSH1:                                     ; preds = %OP3495.PUSH1
  store i256 192, ptr %sp11353, align 16
  %dup611568 = load i256, ptr %sp11315, align 16
  %1633 = add i256 %dup611568, 192
  %sp11577 = getelementptr i256, ptr %sp11307, i64 -4
  %dup1211578 = load i256, ptr %sp11577, align 16
  store i256 %dup1211578, ptr %sp11368, align 16
  store i256 %1633, ptr %sp11378, align 16
  %1634 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1633, i256 %dup1211578, ptr %arg.ecx.addr)
  %.not23838 = icmp eq i8 %1634, 0
  br i1 %.not23838, label %OP3509.DUP2, label %return, !prof !6

OP3509.DUP2:                                      ; preds = %OP3502.PUSH1
  %dup211592 = load i256, ptr %sp11335, align 16
  store i256 %dup211592, ptr %sp11368, align 16
  %mload.out.slot11597 = alloca i256, align 16
  %1635 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup211592, ptr %mload.out.slot11597, ptr %arg.ecx.addr)
  %.not23839 = icmp eq i8 %1635, 0
  br i1 %.not23839, label %OP3510.MLOAD.contd, label %return, !prof !6

OP3510.MLOAD.contd:                               ; preds = %OP3509.DUP2
  %mload.out11598 = load i256, ptr %mload.out.slot11597, align 16
  %dup711606 = load i256, ptr %sp11315, align 16
  store i256 %dup711606, ptr %sp11382, align 16
  %1636 = sub i256 %dup711606, %mload.out11598
  %swap.b11623 = load i256, ptr %sp11353, align 16
  store i256 %mload.out11598, ptr %sp11353, align 16
  %1637 = add i256 %swap.b11623, %1636
  store i256 %1637, ptr %sp11368, align 16
  store i256 %mload.out11598, ptr %sp11378, align 16
  %1638 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out11598, i256 %1637, ptr %arg.ecx.addr)
  %.not23840 = icmp eq i8 %1638, 0
  br i1 %.not23840, label %OP3519.PUSH1, label %return, !prof !6

OP3519.PUSH1:                                     ; preds = %OP3510.MLOAD.contd
  %dup611643 = load i256, ptr %sp11315, align 16
  %1639 = add i256 %dup611643, 224
  store i256 %1639, ptr %sp11368, align 16
  %dup311653 = load i256, ptr %sp11335, align 16
  store i256 %dup311653, ptr %sp11378, align 16
  %1640 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup311653, i256 %1639, ptr %arg.ecx.addr)
  %.not23841 = icmp eq i8 %1640, 0
  br i1 %.not23841, label %OP3524.DUP1, label %return, !prof !6

OP3524.DUP1:                                      ; preds = %OP3519.PUSH1
  %dup111662 = load i256, ptr %sp11353, align 16
  store i256 %dup111662, ptr %sp11368, align 16
  %mload.out.slot11667 = alloca i256, align 16
  %1641 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup111662, ptr %mload.out.slot11667, ptr %arg.ecx.addr)
  %.not23842 = icmp eq i8 %1641, 0
  br i1 %.not23842, label %OP3525.MLOAD.contd, label %return, !prof !6

OP3525.MLOAD.contd:                               ; preds = %OP3524.DUP1
  %mload.out11668 = load i256, ptr %mload.out.slot11667, align 16
  %swap.b11674 = load i256, ptr %sp11353, align 16
  store i256 %mload.out11668, ptr %sp11353, align 16
  %dup411677 = load i256, ptr %sp11422, align 16
  store i256 %dup411677, ptr %sp11378, align 16
  %1642 = add i256 %dup411677, %swap.b11674
  store i256 %1642, ptr %sp11368, align 16
  %1643 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11353)
  %.not23843 = icmp eq i8 %1643, 0
  br i1 %.not23843, label %OP3530.PUSH32, label %return, !prof !6

OP3530.PUSH32:                                    ; preds = %OP3525.MLOAD.contd
  store i256 11309588061646438093662687302255421419811724423900836950936401294474059186176, ptr %sp11368, align 16
  %dup711693 = load i256, ptr %sp11315, align 16
  store i256 %dup711693, ptr %sp11382, align 16
  %1644 = add i256 %dup711693, 256
  store i256 %1644, ptr %sp11378, align 16
  %1645 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1644, i256 11309588061646438093662687302255421419811724423900836950936401294474059186176, ptr %arg.ecx.addr)
  %.not23844 = icmp eq i8 %1645, 0
  br i1 %.not23844, label %OP3535.PUSH2, label %return, !prof !6

OP3535.PUSH2:                                     ; preds = %OP3530.PUSH32
  %dup611710 = load i256, ptr %sp11315, align 16
  store i256 %dup611710, ptr %sp11378, align 16
  %1646 = add i256 %dup611710, 258
  %swap.b11722 = load i256, ptr %sp11307, align 16
  %swap.b11727 = load i256, ptr %sp11353, align 16
  store i256 %swap.b11722, ptr %sp11353, align 16
  store i256 %swap.b11727, ptr %sp11307, align 16
  store i256 %1646, ptr %sp11368, align 16
  %1647 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1646, i256 %swap.b11722, ptr %arg.ecx.addr)
  %.not23845 = icmp eq i8 %1647, 0
  br i1 %.not23845, label %OP3542.PUSH2, label %return, !prof !6

OP3542.PUSH2:                                     ; preds = %OP3535.PUSH2
  %dup611746 = load i256, ptr %sp11315, align 16
  store i256 %dup611746, ptr %sp11378, align 16
  %1648 = add i256 %dup611746, 290
  %swap.b11758 = load i256, ptr %sp11307, align 16
  store i256 %swap.b11758, ptr %sp11353, align 16
  store i256 290, ptr %sp11307, align 16
  store i256 %1648, ptr %sp11368, align 16
  %1649 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1648, i256 %swap.b11758, ptr %arg.ecx.addr)
  %.not23846 = icmp eq i8 %1649, 0
  br i1 %.not23846, label %OP3550.DUP1, label %return, !prof !6

OP3550.DUP1:                                      ; preds = %OP3542.PUSH2
  %dup111776 = load i256, ptr %sp11335, align 16
  store i256 %dup111776, ptr %sp11353, align 16
  %mload.out.slot11781 = alloca i256, align 16
  %1650 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup111776, ptr %mload.out.slot11781, ptr %arg.ecx.addr)
  %.not23847 = icmp eq i8 %1650, 0
  br i1 %.not23847, label %OP3551.MLOAD.contd, label %return, !prof !6

OP3551.MLOAD.contd:                               ; preds = %OP3550.DUP1
  %mload.out11782 = load i256, ptr %mload.out.slot11781, align 16
  %dup611790 = load i256, ptr %sp11315, align 16
  store i256 %dup611790, ptr %sp11378, align 16
  %1651 = sub i256 %dup611790, %mload.out11782
  %swap.b11807 = load i256, ptr %sp11307, align 16
  store i256 %mload.out11782, ptr %sp11307, align 16
  %1652 = add i256 %swap.b11807, %1651
  store i256 %1652, ptr %sp11353, align 16
  store i256 %mload.out11782, ptr %sp11368, align 16
  %1653 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out11782, i256 %1652, ptr %arg.ecx.addr)
  %.not23848 = icmp eq i8 %1653, 0
  br i1 %.not23848, label %OP3560.PUSH2, label %return, !prof !6

OP3560.PUSH2:                                     ; preds = %OP3551.MLOAD.contd
  %dup511827 = load i256, ptr %sp11315, align 16
  %1654 = add i256 %dup511827, 322
  store i256 %1654, ptr %sp11353, align 16
  store i256 %1654, ptr %sp11368, align 16
  %dup311841 = load i256, ptr %sp11335, align 16
  store i256 %dup311841, ptr %sp11378, align 16
  %1655 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup311841, i256 %1654, ptr %arg.ecx.addr)
  %.not23849 = icmp eq i8 %1655, 0
  br i1 %.not23849, label %OP3566.DUP7, label %return, !prof !6

OP3566.DUP7:                                      ; preds = %OP3560.PUSH2
  %dup711850 = load i256, ptr %sp11307, align 16
  store i256 %dup711850, ptr %sp11368, align 16
  %mload.out.slot11855 = alloca i256, align 16
  %1656 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup711850, ptr %mload.out.slot11855, ptr %arg.ecx.addr)
  %.not23850 = icmp eq i8 %1656, 0
  br i1 %.not23850, label %OP3567.MLOAD.contd, label %return, !prof !6

OP3567.MLOAD.contd:                               ; preds = %OP3566.DUP7
  %mload.out11856 = load i256, ptr %mload.out.slot11855, align 16
  %swap.b11862 = load i256, ptr %sp11307, align 16
  %dup411865 = load i256, ptr %sp11422, align 16
  store i256 %dup411865, ptr %sp11378, align 16
  %1657 = add i256 %dup411865, %swap.b11862
  %swap.b11882 = load i256, ptr %sp11353, align 16
  store i256 %mload.out11856, ptr %sp11353, align 16
  store i256 %swap.b11882, ptr %sp11307, align 16
  store i256 %1657, ptr %sp11368, align 16
  %1658 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11353)
  %.not23851 = icmp eq i8 %1658, 0
  br i1 %.not23851, label %OP3575.SWAP6, label %return, !prof !6

OP3575.SWAP6:                                     ; preds = %OP3567.MLOAD.contd
  %swap.a11892 = load i256, ptr %sp11353, align 16
  %swap.b11894 = load i256, ptr %sp11307, align 16
  store i256 %swap.a11892, ptr %sp11307, align 16
  %dup411897 = load i256, ptr %sp11319, align 16
  store i256 %dup411897, ptr %sp11353, align 16
  store i256 %swap.b11894, ptr %sp11368, align 16
  %1659 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b11894, i256 %dup411897, ptr %arg.ecx.addr)
  %.not23852 = icmp eq i8 %1659, 0
  br i1 %.not23852, label %OP3579.PUSH2, label %return, !prof !6

OP3579.PUSH2:                                     ; preds = %OP3575.SWAP6
  %dup511913 = load i256, ptr %sp11315, align 16
  %1660 = add i256 %dup511913, 354
  store i256 %1660, ptr %sp11353, align 16
  store i256 %1660, ptr %sp11368, align 16
  %dup311927 = load i256, ptr %sp11335, align 16
  store i256 %dup311927, ptr %sp11378, align 16
  %1661 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup311927, i256 %1660, ptr %arg.ecx.addr)
  %.not23853 = icmp eq i8 %1661, 0
  br i1 %.not23853, label %OP3585.DUP7, label %return, !prof !6

OP3585.DUP7:                                      ; preds = %OP3579.PUSH2
  %dup711936 = load i256, ptr %sp11307, align 16
  %swap.b11942 = load i256, ptr %sp11353, align 16
  store i256 %dup711936, ptr %sp11353, align 16
  store i256 %swap.b11942, ptr %sp11368, align 16
  %1662 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b11942, i256 %dup711936, ptr %arg.ecx.addr)
  %.not23854 = icmp eq i8 %1662, 0
  br i1 %.not23854, label %OP3588.PUSH1, label %return, !prof !6

OP3588.PUSH1:                                     ; preds = %OP3585.DUP7
  %sp11951 = getelementptr i256, ptr %sp11307, i64 -3
  %dup1011952 = load i256, ptr %sp11951, align 16
  %1663 = and i256 %dup1011952, 255
  store i256 %1663, ptr %sp11353, align 16
  %dup611964 = load i256, ptr %sp11315, align 16
  store i256 %dup611964, ptr %sp11378, align 16
  %1664 = add i256 %dup611964, 386
  store i256 %1664, ptr %sp11368, align 16
  %1665 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1664, i256 %1663, ptr %arg.ecx.addr)
  %.not23855 = icmp eq i8 %1665, 0
  br i1 %.not23855, label %OP3595.PUSH2, label %return, !prof !6

OP3595.PUSH2:                                     ; preds = %OP3588.PUSH1
  %dup511981 = load i256, ptr %sp11315, align 16
  %1666 = add i256 %dup511981, 418
  %sp11990 = getelementptr i256, ptr %sp11307, i64 -2
  %dup911991 = load i256, ptr %sp11990, align 16
  store i256 %dup911991, ptr %sp11353, align 16
  store i256 %1666, ptr %sp11368, align 16
  %1667 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1666, i256 %dup911991, ptr %arg.ecx.addr)
  %.not23856 = icmp eq i8 %1667, 0
  br i1 %.not23856, label %OP3601.PUSH2, label %return, !prof !6

OP3601.PUSH2:                                     ; preds = %OP3595.PUSH2
  %dup512007 = load i256, ptr %sp11315, align 16
  %1668 = add i256 %dup512007, 450
  %sp12016 = getelementptr i256, ptr %sp11307, i64 -1
  %dup812017 = load i256, ptr %sp12016, align 16
  store i256 %dup812017, ptr %sp11353, align 16
  store i256 %1668, ptr %sp11368, align 16
  %1669 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1668, i256 %dup812017, ptr %arg.ecx.addr)
  %.not23857 = icmp eq i8 %1669, 0
  br i1 %.not23857, label %OP3607.MLOAD, label %return, !prof !6

OP3607.MLOAD:                                     ; preds = %OP3601.PUSH2
  %a12031 = load i256, ptr %sp11335, align 16
  %mload.out.slot12032 = alloca i256, align 16
  %1670 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a12031, ptr %mload.out.slot12032, ptr %arg.ecx.addr)
  %.not23858 = icmp eq i8 %1670, 0
  br i1 %.not23858, label %OP3607.MLOAD.contd, label %return, !prof !6

OP3607.MLOAD.contd:                               ; preds = %OP3607.MLOAD
  %mload.out12033 = load i256, ptr %mload.out.slot12032, align 16
  %swap.b12039 = load i256, ptr %sp11319, align 16
  %swap.b12044 = load i256, ptr %sp11473, align 16
  store i256 %swap.b12039, ptr %sp11473, align 16
  %swap.b12049 = load i256, ptr %sp11315, align 16
  store i256 %swap.b12044, ptr %sp11315, align 16
  %1671 = add i256 %swap.b12049, 482
  store i256 %1671, ptr %sp11319, align 16
  %1672 = add i256 %mload.out12033, -32
  store i256 %1672, ptr %sp11441, align 16
  %1673 = sub i256 %swap.b12049, %mload.out12033
  %1674 = add i256 %1673, 482
  store i256 %1674, ptr %sp11353, align 16
  store i256 %mload.out12033, ptr %sp11368, align 16
  store i256 %swap.b12044, ptr %sp11378, align 16
  %gas.remaining12129 = load i64, ptr %gas.remaining.addr, align 8
  %1675 = zext i64 %gas.remaining12129 to i256
  store i256 %1675, ptr %sp11382, align 16
  %1676 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11422, i8 17, i8 3)
  %.not23859 = icmp eq i8 %1676, 0
  br i1 %.not23859, label %suspend, label %return, !prof !6

OP3630.ISZERO:                                    ; preds = %resume
  %1677 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp12134 = getelementptr i256, ptr %1677, i64 -1
  %a12135 = load i256, ptr %sp12134, align 16
  %1678 = icmp eq i256 %a12135, 0
  %1679 = zext i1 %1678 to i256
  store i256 %1679, ptr %sp12134, align 16
  %1680 = xor i1 %1678, true
  %1681 = zext i1 %1680 to i256
  store i256 %1681, ptr %1677, align 16
  br i1 %1678, label %OP3635.RETURNDATASIZE, label %OP3642.JUMPDEST

OP3635.RETURNDATASIZE:                            ; preds = %OP3630.ISZERO
  %ecx.return_data.len.addr12149 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len12150 = load i64, ptr %ecx.return_data.len.addr12149, align 8
  %1682 = zext i64 %ecx.return_data.len12150 to i256
  store i256 %1682, ptr %1677, align 16
  %sp12153 = getelementptr i256, ptr %1677, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp12153, i8 0, i64 64, i1 false)
  %1683 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1677)
  %.not23379 = icmp eq i8 %1683, 0
  br i1 %.not23379, label %OP3639.RETURNDATASIZE, label %return, !prof !6

OP3639.RETURNDATASIZE:                            ; preds = %OP3635.RETURNDATASIZE
  %ecx.return_data.len12162 = load i64, ptr %ecx.return_data.len.addr12149, align 8
  %1684 = zext i64 %ecx.return_data.len12162 to i256
  store i256 %1684, ptr %1677, align 16
  store i256 0, ptr %sp12153, align 16
  %1685 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1677, i8 16)
  %.not23380 = icmp eq i8 %1685, 0
  %spec.select17799 = select i1 %.not23380, i8 16, i8 %1685, !prof !6
  br label %return

OP3642.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3630.ISZERO
  %len.addr.143 = phi i64 [ %stack_len17730, %OP3630.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1686 = add i64 %len.addr.143, -1
  %1687 = add i64 %len.addr.143, -2
  %sp12172 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1687
  store i256 64, ptr %sp12172, align 16
  %mload.out.slot12176 = alloca i256, align 16
  %1688 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12176, ptr %arg.ecx.addr)
  %.not23529 = icmp eq i8 %1688, 0
  br i1 %.not23529, label %OP3646.MLOAD.contd, label %return, !prof !6

OP3646.MLOAD.contd:                               ; preds = %OP3642.JUMPDEST
  %mload.out12177 = load i256, ptr %mload.out.slot12176, align 16
  %sp12180 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1686
  store i256 -32, ptr %sp12180, align 16
  %1689 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.143
  %sp12184 = getelementptr i256, ptr %1689, i64 -2
  %1690 = add i256 %mload.out12177, -32
  store i256 %1690, ptr %sp12184, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !118)
  %ecx.memory.addr.i24493 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24494 = load ptr, ptr %ecx.memory.addr.i24493, align 8, !alias.scope !118, !noalias !121
  %ecx.memory.len.addr.i24495 = getelementptr inbounds i8, ptr %ecx.memory.i24494, i64 16
  %ecx.memory.len.i24496 = load i64, ptr %ecx.memory.len.addr.i24495, align 8, !noalias !123
  %ecx.memory.last_checkpoint.addr.i24497 = getelementptr inbounds i8, ptr %ecx.memory.i24494, i64 48
  %ecx.memory.last_checkpoint.i24498 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24497, align 8, !noalias !123
  %1691 = sub i64 %ecx.memory.len.i24496, %ecx.memory.last_checkpoint.i24498
  %1692 = icmp ugt i256 %1690, 18446744073709551615
  %1693 = trunc i256 %1690 to i64
  %1694 = add i64 %1693, 32
  %1695 = icmp ugt i64 %1693, -33
  %1696 = or i1 %1692, %1695
  %1697 = select i1 %1696, i64 -1, i64 %1694
  %1698 = icmp ugt i64 %1697, %1691
  br i1 %1698, label %resize.i24506, label %OP3649.MLOAD.contd, !prof !5

resize.i24506:                                    ; preds = %OP3646.MLOAD.contd
  %1699 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1697), !noalias !121
  %.not.i24507 = icmp eq i8 %1699, 0
  br i1 %.not.i24507, label %OP3649.MLOAD.contd, label %return, !prof !6

OP3649.MLOAD.contd:                               ; preds = %OP3646.MLOAD.contd, %resize.i24506
  %ecx.memory.buffer.ptr.shared.addr.i24500 = getelementptr inbounds i8, ptr %ecx.memory.i24494, i64 8
  %ecx.memory.buffer.ptr.shared.i24501 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24500, align 8, !noalias !123
  %ecx.memory.buffer.ptr.i24502 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24501, i64 %ecx.memory.last_checkpoint.i24498
  %slot.i24503 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24502, i64 %1693
  %slot.value.i24504 = load i256, ptr %slot.i24503, align 1, !noalias !123
  %1700 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24504)
  %sp12196 = getelementptr i256, ptr %1689, i64 -4
  store i256 %1700, ptr %sp12196, align 16
  %sp12201 = getelementptr i256, ptr %1689, i64 -3
  %1701 = and i256 %1700, 1461501637330902918203684832716283019655932542975
  %1702 = icmp eq i256 %1701, 0
  %1703 = zext i1 %1702 to i256
  %1704 = xor i1 %1702, true
  %1705 = zext i1 %1704 to i256
  store i256 %1705, ptr %sp12201, align 16
  store i256 %1703, ptr %sp12184, align 16
  br i1 %1702, label %OP3670.JUMPDEST, label %OP3662.POP

OP3662.POP:                                       ; preds = %OP3649.MLOAD.contd
  %sp12234 = getelementptr i256, ptr %1689, i64 -12
  %dup912235 = load i256, ptr %sp12234, align 16
  %1706 = and i256 %dup912235, 1461501637330902918203684832716283019655932542975
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp12180, align 16
  store i256 %1701, ptr %sp12184, align 16
  %1707 = icmp eq i256 %1701, %1706
  %1708 = zext i1 %1707 to i256
  store i256 %1708, ptr %sp12201, align 16
  br label %OP3670.JUMPDEST, !annotation !7

OP3670.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3662.POP, %OP3649.MLOAD.contd
  %len.addr.144 = phi i64 [ %1687, %OP3649.MLOAD.contd ], [ %1687, %OP3662.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %1709 = add i64 %len.addr.144, -1
  %sp12265 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1709
  %a12266 = load i256, ptr %sp12265, align 16
  %.not23532 = icmp eq i256 %a12266, 0
  br i1 %.not23532, label %OP3673.PUSH1, label %OP3704.JUMPDEST

OP3673.PUSH1:                                     ; preds = %OP3670.JUMPDEST
  store i256 64, ptr %sp12265, align 16
  %1710 = add i64 %len.addr.144, 1
  %1711 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.144
  %sp12270 = getelementptr i256, ptr %1711, i64 -1
  store i256 64, ptr %1711, align 16
  %mload.out.slot12276 = alloca i256, align 16
  %1712 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12276, ptr %arg.ecx.addr)
  %.not23533 = icmp eq i8 %1712, 0
  br i1 %.not23533, label %OP3675.MLOAD.contd, label %return, !prof !6

OP3675.MLOAD.contd:                               ; preds = %OP3673.PUSH1
  %mload.out12277 = load i256, ptr %mload.out.slot12276, align 16
  store i256 %mload.out12277, ptr %1711, align 16
  %sp12280 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1710
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp12280, align 16
  %sp12284 = getelementptr i256, ptr %1711, i64 2
  store i256 %mload.out12277, ptr %sp12284, align 16
  %1713 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12277, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23534 = icmp eq i8 %1713, 0
  br i1 %.not23534, label %OP3679.PUSH1, label %return, !prof !6

OP3679.PUSH1:                                     ; preds = %OP3675.MLOAD.contd
  store i256 32, ptr %sp12280, align 16
  %dup312296 = load i256, ptr %1711, align 16
  %sp12297 = getelementptr i256, ptr %1711, i64 3
  store i256 %dup312296, ptr %sp12297, align 16
  %1714 = add i256 %dup312296, 4
  store i256 %1714, ptr %sp12284, align 16
  %1715 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1714, i256 32, ptr %arg.ecx.addr)
  %.not23535 = icmp eq i8 %1715, 0
  br i1 %.not23535, label %OP3684.PUSH1, label %return, !prof !6

OP3684.PUSH1:                                     ; preds = %OP3679.PUSH1
  store i256 28, ptr %sp12280, align 16
  %dup312315 = load i256, ptr %1711, align 16
  store i256 %dup312315, ptr %sp12297, align 16
  %1716 = add i256 %dup312315, 36
  store i256 %1716, ptr %sp12284, align 16
  %1717 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1716, i256 28, ptr %arg.ecx.addr)
  %.not23536 = icmp eq i8 %1717, 0
  br i1 %.not23536, label %OP3689.PUSH32, label %return, !prof !6

OP3689.PUSH32:                                    ; preds = %OP3684.PUSH1
  store i256 38641673103035791731704587899846419028922750264491344903186080211751768424448, ptr %sp12280, align 16
  %dup312334 = load i256, ptr %1711, align 16
  store i256 %dup312334, ptr %sp12297, align 16
  %1718 = add i256 %dup312334, 68
  store i256 %1718, ptr %sp12284, align 16
  %1719 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1718, i256 38641673103035791731704587899846419028922750264491344903186080211751768424448, ptr %arg.ecx.addr)
  %.not23537 = icmp eq i8 %1719, 0
  br i1 %.not23537, label %OP3694.SWAP1, label %return, !prof !6

OP3694.SWAP1:                                     ; preds = %OP3689.PUSH32
  %swap.a12349 = load i256, ptr %1711, align 16
  %swap.b12351 = load i256, ptr %sp12270, align 16
  store i256 %swap.a12349, ptr %sp12270, align 16
  store i256 %swap.b12351, ptr %1711, align 16
  %mload.out.slot12355 = alloca i256, align 16
  %1720 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b12351, ptr %mload.out.slot12355, ptr %arg.ecx.addr)
  %.not23538 = icmp eq i8 %1720, 0
  br i1 %.not23538, label %OP3695.MLOAD.contd, label %return, !prof !6

OP3695.MLOAD.contd:                               ; preds = %OP3694.SWAP1
  %mload.out12356 = load i256, ptr %mload.out.slot12355, align 16
  %swap.b12362 = load i256, ptr %sp12270, align 16
  %1721 = sub i256 %swap.b12362, %mload.out12356
  store i256 100, ptr %sp12280, align 16
  %1722 = add i256 %1721, 100
  store i256 %1722, ptr %sp12270, align 16
  store i256 %mload.out12356, ptr %1711, align 16
  %1723 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12270, i8 16)
  %.not23539 = icmp eq i8 %1723, 0
  %spec.select17800 = select i1 %.not23539, i8 16, i8 %1723, !prof !6
  br label %return

OP3704.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3670.JUMPDEST
  %len.addr.145 = phi i64 [ %1709, %OP3670.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp12395 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.145
  store i256 7629, ptr %sp12395, align 16
  %sp12397 = getelementptr i256, ptr %sp12395, i64 -9
  %dup1012398 = load i256, ptr %sp12397, align 16
  %sp12399 = getelementptr i256, ptr %sp12395, i64 1
  store i256 %dup1012398, ptr %sp12399, align 16
  %sp12401 = getelementptr i256, ptr %sp12395, i64 -8
  %dup1012402 = load i256, ptr %sp12401, align 16
  %sp12403 = getelementptr i256, ptr %sp12395, i64 2
  store i256 %dup1012402, ptr %sp12403, align 16
  %1724 = add i64 %len.addr.145, 4
  %sp12405 = getelementptr i256, ptr %sp12395, i64 -7
  %dup1012406 = load i256, ptr %sp12405, align 16
  %sp12407 = getelementptr i256, ptr %sp12395, i64 3
  store i256 %dup1012406, ptr %sp12407, align 16
  br label %OP4565.JUMPDEST

OP3711.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1725 = add i64 %len.addr.197, -10
  %sp12420 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1725
  %a12421 = load i256, ptr %sp12420, align 16
  br label %dynamic_jump_table.backedge

OP3722.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP904.JUMPDEST
  %len.addr.146 = phi i64 [ %len.addr.52, %OP904.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1726 = add i64 %len.addr.146, 1
  %sp12424 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.146
  %sp12426 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1726
  store i256 32, ptr %sp12424, align 16
  store i256 2, ptr %sp12426, align 16
  %1727 = add i64 %len.addr.146, 3
  %sp12435 = getelementptr i256, ptr %sp12424, i64 2
  store i256 32, ptr %sp12435, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !124)
  %ecx.memory.addr.i24509 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24510 = load ptr, ptr %ecx.memory.addr.i24509, align 8, !alias.scope !124
  %ecx.memory.len.addr.i24511 = getelementptr inbounds i8, ptr %ecx.memory.i24510, i64 16
  %ecx.memory.len.i24512 = load i64, ptr %ecx.memory.len.addr.i24511, align 8, !noalias !124
  %ecx.memory.last_checkpoint.addr.i24513 = getelementptr inbounds i8, ptr %ecx.memory.i24510, i64 48
  %ecx.memory.last_checkpoint.i24514 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24513, align 8, !noalias !124
  %1728 = sub i64 %ecx.memory.len.i24512, %ecx.memory.last_checkpoint.i24514
  %1729 = icmp ult i64 %1728, 64
  br i1 %1729, label %resize.i24521, label %OP3728.PUSH1, !prof !5

resize.i24521:                                    ; preds = %OP3722.JUMPDEST
  %1730 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i24522 = icmp eq i8 %1730, 0
  br i1 %.not.i24522, label %OP3728.PUSH1, label %return, !prof !6

OP3728.PUSH1:                                     ; preds = %OP3722.JUMPDEST, %resize.i24521
  %ecx.memory.buffer.ptr.shared.addr.i24516 = getelementptr inbounds i8, ptr %ecx.memory.i24510, i64 8
  %ecx.memory.buffer.ptr.shared.i24517 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24516, align 8, !noalias !124
  %ecx.memory.buffer.ptr.i24518 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24517, i64 %ecx.memory.last_checkpoint.i24514
  %slot.i24519 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24518, i64 32
  store i256 904625697166532776746648320380374280103671755200316906558262375061821325312, ptr %slot.i24519, align 1, !noalias !124
  %sp12446 = getelementptr i256, ptr %sp12424, i64 -2
  %swap.b12447 = load i256, ptr %sp12446, align 16
  store i256 0, ptr %sp12446, align 16
  store i256 %swap.b12447, ptr %sp12426, align 16
  store i256 0, ptr %sp12435, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !127)
  %ecx.memory.i24525 = load ptr, ptr %ecx.memory.addr.i24509, align 8, !alias.scope !127
  %ecx.memory.len.addr.i24526 = getelementptr inbounds i8, ptr %ecx.memory.i24525, i64 16
  %ecx.memory.len.i24527 = load i64, ptr %ecx.memory.len.addr.i24526, align 8, !noalias !127
  %ecx.memory.last_checkpoint.addr.i24528 = getelementptr inbounds i8, ptr %ecx.memory.i24525, i64 48
  %ecx.memory.last_checkpoint.i24529 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24528, align 8, !noalias !127
  %1731 = sub i64 %ecx.memory.len.i24527, %ecx.memory.last_checkpoint.i24529
  %1732 = icmp ult i64 %1731, 32
  br i1 %1732, label %resize.i24535, label %OP3732.PUSH1, !prof !5

resize.i24535:                                    ; preds = %OP3728.PUSH1
  %1733 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i24536 = icmp eq i8 %1733, 0
  br i1 %.not.i24536, label %OP3732.PUSH1, label %return, !prof !6

OP3732.PUSH1:                                     ; preds = %OP3728.PUSH1, %resize.i24535
  %ecx.memory.buffer.ptr.shared.addr.i24531 = getelementptr inbounds i8, ptr %ecx.memory.i24525, i64 8
  %ecx.memory.buffer.ptr.shared.i24532 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24531, align 8, !noalias !127
  %ecx.memory.buffer.ptr.i24533 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24532, i64 %ecx.memory.last_checkpoint.i24529
  %1734 = tail call i256 @llvm.bswap.i256(i256 %swap.b12447)
  store i256 %1734, ptr %ecx.memory.buffer.ptr.i24533, align 1, !noalias !127
  store i256 64, ptr %sp12426, align 16
  store i256 64, ptr %sp12435, align 16
  %dup512465 = load i256, ptr %sp12446, align 16
  %sp12466 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1727
  store i256 %dup512465, ptr %sp12466, align 16
  %1735 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12435)
  %.not23813 = icmp eq i8 %1735, 0
  br i1 %.not23813, label %OP3736.SWAP1, label %return, !prof !6

OP3736.SWAP1:                                     ; preds = %OP3732.PUSH1
  %swap.a12471 = load i256, ptr %sp12435, align 16
  %swap.b12473 = load i256, ptr %sp12426, align 16
  store i256 %swap.a12471, ptr %sp12426, align 16
  %swap.b12478 = load i256, ptr %sp12424, align 16
  store i256 %swap.b12473, ptr %sp12424, align 16
  store i256 %swap.b12478, ptr %sp12435, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !130)
  %ecx.memory.i24539 = load ptr, ptr %ecx.memory.addr.i24509, align 8, !alias.scope !130
  %ecx.memory.len.addr.i24540 = getelementptr inbounds i8, ptr %ecx.memory.i24539, i64 16
  %ecx.memory.len.i24541 = load i64, ptr %ecx.memory.len.addr.i24540, align 8, !noalias !130
  %ecx.memory.last_checkpoint.addr.i24542 = getelementptr inbounds i8, ptr %ecx.memory.i24539, i64 48
  %ecx.memory.last_checkpoint.i24543 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24542, align 8, !noalias !130
  %1736 = sub i64 %ecx.memory.len.i24541, %ecx.memory.last_checkpoint.i24543
  %1737 = icmp ugt i256 %swap.b12478, 18446744073709551615
  %1738 = trunc i256 %swap.b12478 to i64
  %1739 = add i64 %1738, 32
  %1740 = icmp ugt i64 %1738, -33
  %1741 = or i1 %1737, %1740
  %1742 = select i1 %1741, i64 -1, i64 %1739
  %1743 = icmp ugt i64 %1742, %1736
  br i1 %1743, label %resize.i24550, label %OP3739.SWAP1, !prof !5

resize.i24550:                                    ; preds = %OP3736.SWAP1
  %1744 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1742)
  %.not.i24551 = icmp eq i8 %1744, 0
  br i1 %.not.i24551, label %OP3739.SWAP1, label %return, !prof !6

OP3739.SWAP1:                                     ; preds = %OP3736.SWAP1, %resize.i24550
  %ecx.memory.buffer.ptr.shared.addr.i24545 = getelementptr inbounds i8, ptr %ecx.memory.i24539, i64 8
  %ecx.memory.buffer.ptr.shared.i24546 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24545, align 8, !noalias !130
  %ecx.memory.buffer.ptr.i24547 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24546, i64 %ecx.memory.last_checkpoint.i24543
  %slot.i24548 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24547, i64 %1738
  %1745 = tail call i256 @llvm.bswap.i256(i256 %swap.a12471)
  store i256 %1745, ptr %slot.i24548, align 1, !noalias !130
  %swap.a12486 = load i256, ptr %sp12424, align 16
  %sp12487 = getelementptr i256, ptr %sp12424, i64 -1
  %swap.b12488 = load i256, ptr %sp12487, align 16
  store i256 %swap.a12486, ptr %sp12487, align 16
  store i256 %swap.b12488, ptr %sp12424, align 16
  %dup312491 = load i256, ptr %sp12446, align 16
  store i256 %dup312491, ptr %sp12426, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !133)
  %ecx.memory.i24554 = load ptr, ptr %ecx.memory.addr.i24509, align 8, !alias.scope !133
  %ecx.memory.len.addr.i24555 = getelementptr inbounds i8, ptr %ecx.memory.i24554, i64 16
  %ecx.memory.len.i24556 = load i64, ptr %ecx.memory.len.addr.i24555, align 8, !noalias !133
  %ecx.memory.last_checkpoint.addr.i24557 = getelementptr inbounds i8, ptr %ecx.memory.i24554, i64 48
  %ecx.memory.last_checkpoint.i24558 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24557, align 8, !noalias !133
  %1746 = sub i64 %ecx.memory.len.i24556, %ecx.memory.last_checkpoint.i24558
  %1747 = icmp ugt i256 %dup312491, 18446744073709551615
  %1748 = trunc i256 %dup312491 to i64
  %1749 = add i64 %1748, 32
  %1750 = icmp ugt i64 %1748, -33
  %1751 = or i1 %1747, %1750
  %1752 = select i1 %1751, i64 -1, i64 %1749
  %1753 = icmp ugt i64 %1752, %1746
  br i1 %1753, label %resize.i24565, label %OP3742.SWAP1, !prof !5

resize.i24565:                                    ; preds = %OP3739.SWAP1
  %1754 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1752)
  %.not.i24566 = icmp eq i8 %1754, 0
  br i1 %.not.i24566, label %OP3742.SWAP1, label %return, !prof !6

OP3742.SWAP1:                                     ; preds = %OP3739.SWAP1, %resize.i24565
  %ecx.memory.buffer.ptr.shared.addr.i24560 = getelementptr inbounds i8, ptr %ecx.memory.i24554, i64 8
  %ecx.memory.buffer.ptr.shared.i24561 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24560, align 8, !noalias !133
  %ecx.memory.buffer.ptr.i24562 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24561, i64 %ecx.memory.last_checkpoint.i24558
  %slot.i24563 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24562, i64 %1748
  %1755 = tail call i256 @llvm.bswap.i256(i256 %swap.b12488)
  store i256 %1755, ptr %slot.i24563, align 1, !noalias !133
  %swap.a12500 = load i256, ptr %sp12487, align 16
  %swap.b12502 = load i256, ptr %sp12446, align 16
  store i256 %swap.a12500, ptr %sp12446, align 16
  store i256 %swap.b12502, ptr %sp12487, align 16
  %1756 = add i64 %len.addr.146, -1
  %1757 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12446)
  %.not23816 = icmp eq i8 %1757, 0
  br i1 %.not23816, label %OP3744.SLOAD, label %return, !prof !6

OP3744.SLOAD:                                     ; preds = %OP3742.SWAP1
  %1758 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12446, i8 17)
  %.not23817 = icmp eq i8 %1758, 0
  br i1 %.not23817, label %OP3745.DUP2, label %return, !prof !6

OP3745.DUP2:                                      ; preds = %OP3744.SLOAD
  %sp12508 = getelementptr i256, ptr %sp12424, i64 -3
  %dup212509 = load i256, ptr %sp12508, align 16
  %sp12510 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1756
  store i256 %dup212509, ptr %sp12510, align 16
  br label %dynamic_jump_table.preheader

OP3747.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP918.JUMPDEST
  %len.addr.147 = phi i64 [ %423, %OP918.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %1759 = add i64 %len.addr.147, 1
  %sp12516 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.147
  store i256 12, ptr %sp12516, align 16
  %1760 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12516, i8 17)
  %.not23793 = icmp eq i8 %1760, 0
  br i1 %.not23793, label %OP3750.PUSH1, label %return, !prof !6

OP3750.PUSH1:                                     ; preds = %OP3747.JUMPDEST
  %1761 = add i64 %len.addr.147, 2
  %sp12520 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1759
  store i256 1, ptr %sp12520, align 16
  %b12525 = load i256, ptr %sp12516, align 16
  %1762 = icmp eq i256 %b12525, 1
  %1763 = zext i1 %1762 to i256
  store i256 %1763, ptr %sp12516, align 16
  br i1 %1762, label %OP3785.JUMPDEST, label %OP3754.PUSH1

OP3754.PUSH1:                                     ; preds = %OP3750.PUSH1
  store i256 64, ptr %sp12516, align 16
  store i256 64, ptr %sp12520, align 16
  %mload.out.slot12539 = alloca i256, align 16
  %1764 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12539, ptr %arg.ecx.addr)
  %.not23794 = icmp eq i8 %1764, 0
  br i1 %.not23794, label %OP3756.MLOAD.contd, label %return, !prof !6

OP3756.MLOAD.contd:                               ; preds = %OP3754.PUSH1
  %mload.out12540 = load i256, ptr %mload.out.slot12539, align 16
  store i256 %mload.out12540, ptr %sp12520, align 16
  %sp12543 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1761
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp12543, align 16
  %sp12547 = getelementptr i256, ptr %sp12516, i64 3
  store i256 %mload.out12540, ptr %sp12547, align 16
  %1765 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12540, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23795 = icmp eq i8 %1765, 0
  br i1 %.not23795, label %OP3760.PUSH1, label %return, !prof !6

OP3760.PUSH1:                                     ; preds = %OP3756.MLOAD.contd
  store i256 32, ptr %sp12543, align 16
  %dup312559 = load i256, ptr %sp12520, align 16
  %sp12560 = getelementptr i256, ptr %sp12516, i64 4
  store i256 %dup312559, ptr %sp12560, align 16
  %1766 = add i256 %dup312559, 4
  store i256 %1766, ptr %sp12547, align 16
  %1767 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1766, i256 32, ptr %arg.ecx.addr)
  %.not23796 = icmp eq i8 %1767, 0
  br i1 %.not23796, label %OP3765.PUSH1, label %return, !prof !6

OP3765.PUSH1:                                     ; preds = %OP3760.PUSH1
  store i256 17, ptr %sp12543, align 16
  %dup312578 = load i256, ptr %sp12520, align 16
  store i256 %dup312578, ptr %sp12560, align 16
  %1768 = add i256 %dup312578, 36
  store i256 %1768, ptr %sp12547, align 16
  %1769 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1768, i256 17, ptr %arg.ecx.addr)
  %.not23797 = icmp eq i8 %1769, 0
  br i1 %.not23797, label %OP3770.PUSH32, label %return, !prof !6

OP3770.PUSH32:                                    ; preds = %OP3765.PUSH1
  store i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %sp12543, align 16
  %dup312597 = load i256, ptr %sp12520, align 16
  store i256 %dup312597, ptr %sp12560, align 16
  %1770 = add i256 %dup312597, 68
  store i256 %1770, ptr %sp12547, align 16
  %1771 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1770, i256 38641673103035791731704587904236210086261392376350007196325178590355645267968, ptr %arg.ecx.addr)
  %.not23798 = icmp eq i8 %1771, 0
  br i1 %.not23798, label %OP3775.SWAP1, label %return, !prof !6

OP3775.SWAP1:                                     ; preds = %OP3770.PUSH32
  %swap.a12612 = load i256, ptr %sp12520, align 16
  %swap.b12614 = load i256, ptr %sp12516, align 16
  store i256 %swap.a12612, ptr %sp12516, align 16
  store i256 %swap.b12614, ptr %sp12520, align 16
  %mload.out.slot12618 = alloca i256, align 16
  %1772 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b12614, ptr %mload.out.slot12618, ptr %arg.ecx.addr)
  %.not23799 = icmp eq i8 %1772, 0
  br i1 %.not23799, label %OP3776.MLOAD.contd, label %return, !prof !6

OP3776.MLOAD.contd:                               ; preds = %OP3775.SWAP1
  %mload.out12619 = load i256, ptr %mload.out.slot12618, align 16
  %swap.b12625 = load i256, ptr %sp12516, align 16
  %1773 = sub i256 %swap.b12625, %mload.out12619
  store i256 100, ptr %sp12543, align 16
  %1774 = add i256 %1773, 100
  store i256 %1774, ptr %sp12516, align 16
  store i256 %mload.out12619, ptr %sp12520, align 16
  %1775 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12516, i8 16)
  %.not23800 = icmp eq i8 %1775, 0
  %spec.select17801 = select i1 %.not23800, i8 16, i8 %1775, !prof !6
  br label %return

OP3785.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre = add i64 %len.addr.197, 1
  br label %OP3785.JUMPDEST

OP3785.JUMPDEST:                                  ; preds = %OP3785.JUMPDEST.loopexit, %OP3750.PUSH1
  %.pre-phi = phi i64 [ %.pre, %OP3785.JUMPDEST.loopexit ], [ %1759, %OP3750.PUSH1 ]
  %len.addr.148 = phi i64 [ %len.addr.197, %OP3785.JUMPDEST.loopexit ], [ %len.addr.147, %OP3750.PUSH1 ]
  %sp12658 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.148
  store i256 0, ptr %sp12658, align 16
  %sp12660 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi
  store i256 12, ptr %sp12660, align 16
  %1776 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12658, i8 17)
  %.not23801 = icmp eq i8 %1776, 0
  br i1 %.not23801, label %OP3789.PUSH1, label %return, !prof !6

OP3789.PUSH1:                                     ; preds = %OP3785.JUMPDEST
  store i256 6, ptr %sp12658, align 16
  %1777 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12658, i8 17)
  %.not23802 = icmp eq i8 %1777, 0
  br i1 %.not23802, label %OP3791.PUSH1, label %return, !prof !6

OP3791.PUSH1:                                     ; preds = %OP3789.PUSH1
  store i256 64, ptr %sp12660, align 16
  %1778 = add i64 %len.addr.148, 3
  %sp12672 = getelementptr i256, ptr %sp12658, i64 2
  store i256 64, ptr %sp12672, align 16
  %mload.out.slot12676 = alloca i256, align 16
  %1779 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12676, ptr %arg.ecx.addr)
  %.not23803 = icmp eq i8 %1779, 0
  br i1 %.not23803, label %OP3793.MLOAD.contd, label %return, !prof !6

OP3793.MLOAD.contd:                               ; preds = %OP3791.PUSH1
  %mload.out12677 = load i256, ptr %mload.out.slot12676, align 16
  store i256 %mload.out12677, ptr %sp12672, align 16
  %sp12680 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1778
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp12680, align 16
  %sp12684 = getelementptr i256, ptr %sp12658, i64 4
  store i256 %mload.out12677, ptr %sp12684, align 16
  %1780 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12677, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23804 = icmp eq i8 %1780, 0
  br i1 %.not23804, label %OP3797.ADDRESS, label %return, !prof !6

OP3797.ADDRESS:                                   ; preds = %OP3793.MLOAD.contd
  %contract.target_address.addr12691 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address12692 = load i160, ptr %contract.target_address.addr12691, align 16
  %1781 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address12692)
  %1782 = zext i160 %1781 to i256
  store i256 %1782, ptr %sp12680, align 16
  %dup312698 = load i256, ptr %sp12672, align 16
  %sp12699 = getelementptr i256, ptr %sp12658, i64 5
  store i256 %dup312698, ptr %sp12699, align 16
  %1783 = add i256 %dup312698, 4
  store i256 %1783, ptr %sp12684, align 16
  %1784 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1783, i256 %1782, ptr %arg.ecx.addr)
  %.not23805 = icmp eq i8 %1784, 0
  br i1 %.not23805, label %OP3802.SWAP1, label %return, !prof !6

OP3802.SWAP1:                                     ; preds = %OP3797.ADDRESS
  %swap.a12713 = load i256, ptr %sp12672, align 16
  %swap.b12715 = load i256, ptr %sp12660, align 16
  store i256 %swap.a12713, ptr %sp12660, align 16
  store i256 %swap.b12715, ptr %sp12672, align 16
  %mload.out.slot12719 = alloca i256, align 16
  %1785 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b12715, ptr %mload.out.slot12719, ptr %arg.ecx.addr)
  %.not23806 = icmp eq i8 %1785, 0
  br i1 %.not23806, label %OP3803.MLOAD.contd, label %return, !prof !6

OP3803.MLOAD.contd:                               ; preds = %OP3802.SWAP1
  %mload.out12720 = load i256, ptr %mload.out.slot12719, align 16
  store i256 %mload.out12720, ptr %sp12672, align 16
  %swap.b12728 = load i256, ptr %sp12658, align 16
  store i256 8148, ptr %sp12658, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp12684, align 16
  %1786 = and i256 %swap.b12728, 1461501637330902918203684832716283019655932542975
  store i256 %1786, ptr %sp12680, align 16
  %swap.b12741 = load i256, ptr %sp12660, align 16
  store i256 %1786, ptr %sp12660, align 16
  %swap.b12748 = load i256, ptr %sp12672, align 16
  store i256 1889567281, ptr %sp12672, align 16
  %sp12754 = getelementptr i256, ptr %sp12658, i64 6
  %sp12756 = getelementptr i256, ptr %sp12658, i64 3
  %sp12758 = getelementptr i256, ptr %sp12658, i64 7
  %1787 = add i256 %swap.b12741, 36
  store i256 %1787, ptr %sp12756, align 16
  store i256 32, ptr %sp12684, align 16
  store i256 %swap.b12748, ptr %sp12699, align 16
  %sp12790 = getelementptr i256, ptr %sp12658, i64 8
  %1788 = sub i256 %swap.b12741, %swap.b12748
  %1789 = add i256 %1788, 36
  store i256 %1789, ptr %sp12754, align 16
  store i256 %swap.b12748, ptr %sp12758, align 16
  %sp12813 = getelementptr i256, ptr %sp12658, i64 1
  %dup712814 = load i256, ptr %sp12813, align 16
  store i256 %dup712814, ptr %sp12790, align 16
  %1790 = add i64 %len.addr.148, 10
  %sp12819 = getelementptr i256, ptr %sp12658, i64 9
  store i256 %dup712814, ptr %sp12819, align 16
  %1791 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12819, i8 17)
  %.not23807 = icmp eq i8 %1791, 0
  br i1 %.not23807, label %OP3828.ISZERO, label %return, !prof !6

OP3828.ISZERO:                                    ; preds = %OP3803.MLOAD.contd
  %a12824 = load i256, ptr %sp12819, align 16
  %1792 = icmp eq i256 %a12824, 0
  %1793 = zext i1 %1792 to i256
  store i256 %1793, ptr %sp12819, align 16
  %sp12829 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1790
  %1794 = xor i1 %1792, true
  %1795 = zext i1 %1794 to i256
  store i256 %1795, ptr %sp12829, align 16
  br i1 %1792, label %OP3833.PUSH1, label %OP3836.JUMPDEST

OP3833.PUSH1:                                     ; preds = %OP3828.ISZERO
  store i256 0, ptr %sp12829, align 16
  %sp12842 = getelementptr i256, ptr %sp12658, i64 11
  store i256 0, ptr %sp12842, align 16
  %1796 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12829, i8 16)
  %.not23808 = icmp eq i8 %1796, 0
  %spec.select17802 = select i1 %.not23808, i8 16, i8 %1796, !prof !6
  br label %return

OP3836.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3828.ISZERO
  %len.addr.149 = phi i64 [ %1790, %OP3828.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining12848 = load i64, ptr %gas.remaining.addr, align 8
  %1797 = zext i64 %gas.remaining12848 to i256
  %1798 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.149
  %sp12849 = getelementptr i256, ptr %1798, i64 -1
  store i256 %1797, ptr %sp12849, align 16
  %1799 = add i64 %len.addr.149, -6
  %sp12851 = getelementptr i256, ptr %1798, i64 -6
  %1800 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp12851, i8 17, i8 3)
  %.not23809 = icmp eq i8 %1800, 0
  br i1 %.not23809, label %suspend, label %return, !prof !6

OP3840.ISZERO:                                    ; preds = %resume
  %1801 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp12853 = getelementptr i256, ptr %1801, i64 -1
  %a12854 = load i256, ptr %sp12853, align 16
  %1802 = icmp eq i256 %a12854, 0
  %1803 = zext i1 %1802 to i256
  store i256 %1803, ptr %sp12853, align 16
  %1804 = xor i1 %1802, true
  %1805 = zext i1 %1804 to i256
  store i256 %1805, ptr %1801, align 16
  br i1 %1802, label %OP3845.RETURNDATASIZE, label %OP3852.JUMPDEST

OP3845.RETURNDATASIZE:                            ; preds = %OP3840.ISZERO
  %ecx.return_data.len.addr12868 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len12869 = load i64, ptr %ecx.return_data.len.addr12868, align 8
  %1806 = zext i64 %ecx.return_data.len12869 to i256
  store i256 %1806, ptr %1801, align 16
  %sp12872 = getelementptr i256, ptr %1801, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp12872, i8 0, i64 64, i1 false)
  %1807 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1801)
  %.not23377 = icmp eq i8 %1807, 0
  br i1 %.not23377, label %OP3849.RETURNDATASIZE, label %return, !prof !6

OP3849.RETURNDATASIZE:                            ; preds = %OP3845.RETURNDATASIZE
  %ecx.return_data.len12881 = load i64, ptr %ecx.return_data.len.addr12868, align 8
  %1808 = zext i64 %ecx.return_data.len12881 to i256
  store i256 %1808, ptr %1801, align 16
  store i256 0, ptr %sp12872, align 16
  %1809 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1801, i8 16)
  %.not23378 = icmp eq i8 %1809, 0
  %spec.select17803 = select i1 %.not23378, i8 16, i8 %1809, !prof !6
  br label %return

OP3852.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3840.ISZERO
  %len.addr.150 = phi i64 [ %stack_len17730, %OP3840.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1810 = add i64 %len.addr.150, -3
  %1811 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.150
  %sp12893 = getelementptr i256, ptr %1811, i64 -4
  store i256 64, ptr %sp12893, align 16
  %mload.out.slot12897 = alloca i256, align 16
  %1812 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12897, ptr %arg.ecx.addr)
  %.not23518 = icmp eq i8 %1812, 0
  br i1 %.not23518, label %OP3858.MLOAD.contd, label %return, !prof !6

OP3858.MLOAD.contd:                               ; preds = %OP3852.JUMPDEST
  %1813 = add i64 %len.addr.150, -2
  %mload.out12898 = load i256, ptr %mload.out.slot12897, align 16
  store i256 %mload.out12898, ptr %sp12893, align 16
  %ecx.return_data.len.addr12901 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len12902 = load i64, ptr %ecx.return_data.len.addr12901, align 8
  %1814 = zext i64 %ecx.return_data.len12902 to i256
  %sp12903 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1810
  store i256 %1814, ptr %sp12903, align 16
  %sp12905 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1813
  %sp12909 = getelementptr i256, ptr %1811, i64 -1
  store i256 %1814, ptr %sp12909, align 16
  %1815 = icmp ugt i64 %ecx.return_data.len12902, 31
  %1816 = zext i1 %1815 to i256
  store i256 %1816, ptr %sp12905, align 16
  br i1 %1815, label %OP3869.JUMPDEST, label %OP3866.PUSH1

OP3866.PUSH1:                                     ; preds = %OP3858.MLOAD.contd
  store i256 0, ptr %sp12905, align 16
  %sp12926 = getelementptr i256, ptr %1811, i64 -2
  store i256 0, ptr %sp12909, align 16
  %1817 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12926, i8 16)
  %.not23519 = icmp eq i8 %1817, 0
  %spec.select17804 = select i1 %.not23519, i8 16, i8 %1817, !prof !6
  br label %return

OP3869.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3858.MLOAD.contd
  %len.addr.151 = phi i64 [ %1813, %OP3858.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1818 = add i64 %len.addr.151, -1
  %1819 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.151
  %sp12934 = getelementptr i256, ptr %1819, i64 -2
  %a12935 = load i256, ptr %sp12934, align 16
  %mload.out.slot12936 = alloca i256, align 16
  %1820 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a12935, ptr %mload.out.slot12936, ptr %arg.ecx.addr)
  %.not23520 = icmp eq i8 %1820, 0
  br i1 %.not23520, label %OP3871.MLOAD.contd, label %return, !prof !6

OP3871.MLOAD.contd:                               ; preds = %OP3869.JUMPDEST
  %mload.out12937 = load i256, ptr %mload.out.slot12936, align 16
  store i256 %mload.out12937, ptr %sp12934, align 16
  %sp12940 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1818
  store i256 7, ptr %sp12940, align 16
  %sp12942 = getelementptr i256, ptr %1819, i64 -1
  %1821 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr %sp12942, i8 17)
  %.not23521 = icmp eq i8 %1821, 0
  br i1 %.not23521, label %OP3874.PUSH1, label %return, !prof !6

OP3874.PUSH1:                                     ; preds = %OP3871.MLOAD.contd
  store i256 64, ptr %1819, align 16
  %1822 = add i64 %len.addr.151, 2
  %sp12948 = getelementptr i256, ptr %1819, i64 1
  store i256 64, ptr %sp12948, align 16
  %mload.out.slot12952 = alloca i256, align 16
  %1823 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12952, ptr %arg.ecx.addr)
  %.not23522 = icmp eq i8 %1823, 0
  br i1 %.not23522, label %OP3876.MLOAD.contd, label %return, !prof !6

OP3876.MLOAD.contd:                               ; preds = %OP3874.PUSH1
  %mload.out12953 = load i256, ptr %mload.out.slot12952, align 16
  store i256 %mload.out12953, ptr %sp12948, align 16
  %sp12956 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1822
  store i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %sp12956, align 16
  %sp12960 = getelementptr i256, ptr %1819, i64 3
  store i256 %mload.out12953, ptr %sp12960, align 16
  %1824 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12953, i256 50942633119752846454219349998365661925608737367104304655302372697894809501696, ptr %arg.ecx.addr)
  %.not23523 = icmp eq i8 %1824, 0
  br i1 %.not23523, label %OP3880.ADDRESS, label %return, !prof !6

OP3880.ADDRESS:                                   ; preds = %OP3876.MLOAD.contd
  %contract.target_address.addr12967 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address12968 = load i160, ptr %contract.target_address.addr12967, align 16
  %1825 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address12968)
  %1826 = zext i160 %1825 to i256
  store i256 %1826, ptr %sp12956, align 16
  %dup312974 = load i256, ptr %sp12948, align 16
  %sp12975 = getelementptr i256, ptr %1819, i64 4
  store i256 %dup312974, ptr %sp12975, align 16
  %1827 = add i256 %dup312974, 4
  store i256 %1827, ptr %sp12960, align 16
  %1828 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1827, i256 %1826, ptr %arg.ecx.addr)
  %.not23524 = icmp eq i8 %1828, 0
  br i1 %.not23524, label %OP3885.SWAP1, label %return, !prof !6

OP3885.SWAP1:                                     ; preds = %OP3880.ADDRESS
  %swap.a12989 = load i256, ptr %sp12948, align 16
  %swap.b12991 = load i256, ptr %1819, align 16
  store i256 %swap.a12989, ptr %1819, align 16
  store i256 %swap.b12991, ptr %sp12948, align 16
  %mload.out.slot12995 = alloca i256, align 16
  %1829 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b12991, ptr %mload.out.slot12995, ptr %arg.ecx.addr)
  %.not23525 = icmp eq i8 %1829, 0
  br i1 %.not23525, label %OP3886.MLOAD.contd, label %return, !prof !6

OP3886.MLOAD.contd:                               ; preds = %OP3885.SWAP1
  %mload.out12996 = load i256, ptr %mload.out.slot12995, align 16
  %swap.b13009 = load i256, ptr %sp12942, align 16
  %1830 = and i256 %swap.b13009, 1461501637330902918203684832716283019655932542975
  store i256 %1830, ptr %sp12942, align 16
  %swap.b13027 = load i256, ptr %1819, align 16
  store i256 1889567281, ptr %1819, align 16
  %sp13037 = getelementptr i256, ptr %1819, i64 5
  %1831 = add i256 %swap.b13027, 36
  store i256 %1831, ptr %sp12948, align 16
  %sp13054 = getelementptr i256, ptr %1819, i64 2
  store i256 32, ptr %sp13054, align 16
  store i256 %mload.out12996, ptr %sp12960, align 16
  %sp13074 = getelementptr i256, ptr %1819, i64 6
  %1832 = sub i256 %swap.b13027, %mload.out12996
  %1833 = add i256 %1832, 36
  store i256 %1833, ptr %sp12975, align 16
  store i256 %mload.out12996, ptr %sp13037, align 16
  store i256 %1830, ptr %sp13074, align 16
  %1834 = add i64 %len.addr.151, 8
  %sp13103 = getelementptr i256, ptr %1819, i64 7
  store i256 %1830, ptr %sp13103, align 16
  %1835 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13103, i8 17)
  %.not23526 = icmp eq i8 %1835, 0
  br i1 %.not23526, label %OP3912.ISZERO, label %return, !prof !6

OP3912.ISZERO:                                    ; preds = %OP3886.MLOAD.contd
  %a13108 = load i256, ptr %sp13103, align 16
  %1836 = icmp eq i256 %a13108, 0
  %1837 = zext i1 %1836 to i256
  store i256 %1837, ptr %sp13103, align 16
  %sp13113 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1834
  %1838 = xor i1 %1836, true
  %1839 = zext i1 %1838 to i256
  store i256 %1839, ptr %sp13113, align 16
  br i1 %1836, label %OP3917.PUSH1, label %OP3920.JUMPDEST

OP3917.PUSH1:                                     ; preds = %OP3912.ISZERO
  store i256 0, ptr %sp13113, align 16
  %sp13126 = getelementptr i256, ptr %1819, i64 9
  store i256 0, ptr %sp13126, align 16
  %1840 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13113, i8 16)
  %.not23527 = icmp eq i8 %1840, 0
  %spec.select17805 = select i1 %.not23527, i8 16, i8 %1840, !prof !6
  br label %return

OP3920.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3912.ISZERO
  %len.addr.152 = phi i64 [ %1834, %OP3912.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining13132 = load i64, ptr %gas.remaining.addr, align 8
  %1841 = zext i64 %gas.remaining13132 to i256
  %1842 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.152
  %sp13133 = getelementptr i256, ptr %1842, i64 -1
  store i256 %1841, ptr %sp13133, align 16
  %1843 = add i64 %len.addr.152, -6
  %sp13135 = getelementptr i256, ptr %1842, i64 -6
  %1844 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp13135, i8 17, i8 3)
  %.not23528 = icmp eq i8 %1844, 0
  br i1 %.not23528, label %suspend, label %return, !prof !6

OP3924.ISZERO:                                    ; preds = %resume
  %1845 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp13137 = getelementptr i256, ptr %1845, i64 -1
  %a13138 = load i256, ptr %sp13137, align 16
  %1846 = icmp eq i256 %a13138, 0
  %1847 = zext i1 %1846 to i256
  store i256 %1847, ptr %sp13137, align 16
  %1848 = xor i1 %1846, true
  %1849 = zext i1 %1848 to i256
  store i256 %1849, ptr %1845, align 16
  br i1 %1846, label %OP3929.RETURNDATASIZE, label %OP3936.JUMPDEST

OP3929.RETURNDATASIZE:                            ; preds = %OP3924.ISZERO
  %ecx.return_data.len.addr13152 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len13153 = load i64, ptr %ecx.return_data.len.addr13152, align 8
  %1850 = zext i64 %ecx.return_data.len13153 to i256
  store i256 %1850, ptr %1845, align 16
  %sp13156 = getelementptr i256, ptr %1845, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp13156, i8 0, i64 64, i1 false)
  %1851 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1845)
  %.not23375 = icmp eq i8 %1851, 0
  br i1 %.not23375, label %OP3933.RETURNDATASIZE, label %return, !prof !6

OP3933.RETURNDATASIZE:                            ; preds = %OP3929.RETURNDATASIZE
  %ecx.return_data.len13165 = load i64, ptr %ecx.return_data.len.addr13152, align 8
  %1852 = zext i64 %ecx.return_data.len13165 to i256
  store i256 %1852, ptr %1845, align 16
  store i256 0, ptr %sp13156, align 16
  %1853 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1845, i8 16)
  %.not23376 = icmp eq i8 %1853, 0
  %spec.select17806 = select i1 %.not23376, i8 16, i8 %1853, !prof !6
  br label %return

OP3936.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3924.ISZERO
  %len.addr.153 = phi i64 [ %stack_len17730, %OP3924.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %1854 = add i64 %len.addr.153, -3
  %1855 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.153
  %sp13177 = getelementptr i256, ptr %1855, i64 -4
  store i256 64, ptr %sp13177, align 16
  %mload.out.slot13181 = alloca i256, align 16
  %1856 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13181, ptr %arg.ecx.addr)
  %.not23514 = icmp eq i8 %1856, 0
  br i1 %.not23514, label %OP3942.MLOAD.contd, label %return, !prof !6

OP3942.MLOAD.contd:                               ; preds = %OP3936.JUMPDEST
  %1857 = add i64 %len.addr.153, -2
  %mload.out13182 = load i256, ptr %mload.out.slot13181, align 16
  store i256 %mload.out13182, ptr %sp13177, align 16
  %ecx.return_data.len.addr13185 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len13186 = load i64, ptr %ecx.return_data.len.addr13185, align 8
  %1858 = zext i64 %ecx.return_data.len13186 to i256
  %sp13187 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1854
  store i256 %1858, ptr %sp13187, align 16
  %sp13189 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1857
  %sp13193 = getelementptr i256, ptr %1855, i64 -1
  store i256 %1858, ptr %sp13193, align 16
  %1859 = icmp ugt i64 %ecx.return_data.len13186, 31
  %1860 = zext i1 %1859 to i256
  store i256 %1860, ptr %sp13189, align 16
  br i1 %1859, label %OP3953.JUMPDEST, label %OP3950.PUSH1

OP3950.PUSH1:                                     ; preds = %OP3942.MLOAD.contd
  store i256 0, ptr %sp13189, align 16
  %sp13210 = getelementptr i256, ptr %1855, i64 -2
  store i256 0, ptr %sp13193, align 16
  %1861 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13210, i8 16)
  %.not23515 = icmp eq i8 %1861, 0
  %spec.select17807 = select i1 %.not23515, i8 16, i8 %1861, !prof !6
  br label %return

OP3953.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3942.MLOAD.contd
  %len.addr.154 = phi i64 [ %1857, %OP3942.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1862 = add i64 %len.addr.154, -1
  %1863 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.154
  %sp13218 = getelementptr i256, ptr %1863, i64 -2
  %a13219 = load i256, ptr %sp13218, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !136)
  %ecx.memory.addr.i24568 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24569 = load ptr, ptr %ecx.memory.addr.i24568, align 8, !alias.scope !136, !noalias !139
  %ecx.memory.len.addr.i24570 = getelementptr inbounds i8, ptr %ecx.memory.i24569, i64 16
  %ecx.memory.len.i24571 = load i64, ptr %ecx.memory.len.addr.i24570, align 8, !noalias !141
  %ecx.memory.last_checkpoint.addr.i24572 = getelementptr inbounds i8, ptr %ecx.memory.i24569, i64 48
  %ecx.memory.last_checkpoint.i24573 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24572, align 8, !noalias !141
  %1864 = sub i64 %ecx.memory.len.i24571, %ecx.memory.last_checkpoint.i24573
  %1865 = icmp ugt i256 %a13219, 18446744073709551615
  %1866 = trunc i256 %a13219 to i64
  %1867 = add i64 %1866, 32
  %1868 = icmp ugt i64 %1866, -33
  %1869 = or i1 %1865, %1868
  %1870 = select i1 %1869, i64 -1, i64 %1867
  %1871 = icmp ugt i64 %1870, %1864
  br i1 %1871, label %resize.i24581, label %OP3955.MLOAD.contd, !prof !5

resize.i24581:                                    ; preds = %OP3953.JUMPDEST
  %1872 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1870), !noalias !139
  %.not.i24582 = icmp eq i8 %1872, 0
  br i1 %.not.i24582, label %OP3955.MLOAD.contd, label %return, !prof !6

OP3955.MLOAD.contd:                               ; preds = %OP3953.JUMPDEST, %resize.i24581
  %ecx.memory.buffer.ptr.shared.addr.i24575 = getelementptr inbounds i8, ptr %ecx.memory.i24569, i64 8
  %ecx.memory.buffer.ptr.shared.i24576 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24575, align 8, !noalias !141
  %ecx.memory.buffer.ptr.i24577 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24576, i64 %ecx.memory.last_checkpoint.i24573
  %slot.i24578 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24577, i64 %1866
  %slot.value.i24579 = load i256, ptr %slot.i24578, align 1, !noalias !141
  %1873 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24579)
  store i256 %1873, ptr %sp13218, align 16
  %sp13224 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1862
  store i256 8, ptr %sp13224, align 16
  %sp13226 = getelementptr i256, ptr %1863, i64 -1
  %1874 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr %sp13226, i8 17)
  %.not23517 = icmp eq i8 %1874, 0
  br i1 %.not23517, label %OP3958.PUSH14, label %return, !prof !6

OP3958.PUSH14:                                    ; preds = %OP3955.MLOAD.contd
  %1875 = add i64 %len.addr.154, 1
  %sp13232 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1875
  %dup313235 = load i256, ptr %sp13226, align 16
  %sp13236 = getelementptr i256, ptr %1863, i64 2
  %1876 = and i256 %dup313235, 5192296858534827628530496329220095
  store i256 %1876, ptr %sp13226, align 16
  store i256 %dup313235, ptr %sp13236, align 16
  %1877 = lshr i256 %dup313235, 112
  store i256 %1877, ptr %sp13232, align 16
  %1878 = and i256 %1877, 5192296858534827628530496329220095
  store i256 %1878, ptr %1863, align 16
  br label %OP4337.JUMPDEST

OP3969.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp13270 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 1, ptr %sp13270, align 16
  %sp13272 = getelementptr i256, ptr %sp13270, i64 1
  store i256 12, ptr %sp13272, align 16
  %1879 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13270, i8 17)
  %.not23513 = icmp eq i8 %1879, 0
  br i1 %.not23513, label %OP3973.JUMP, label %return, !prof !6

OP3973.JUMP:                                      ; preds = %OP3969.JUMPDEST
  %1880 = add i64 %len.addr.197, -1
  %sp13276 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1880
  %a13277 = load i256, ptr %sp13276, align 16
  br label %dynamic_jump_table.backedge

OP3974.JUMPDEST.sink.split:                       ; preds = %OP1158.PUSH2, %OP1169.PUSH2, %OP2866.JUMPDEST, %OP2873.JUMPDEST
  %sp9379.sink = phi ptr [ %sp9379, %OP2873.JUMPDEST ], [ %sp9363, %OP2866.JUMPDEST ], [ %520, %OP1169.PUSH2 ], [ %517, %OP1158.PUSH2 ]
  %dup139390.sink = phi i256 [ %dup139390, %OP2873.JUMPDEST ], [ %dup149374, %OP2866.JUMPDEST ], [ %dup103763, %OP1169.PUSH2 ], [ %dup11, %OP1158.PUSH2 ]
  %len.addr.155.ph.in = phi i64 [ %len.addr.197, %OP2873.JUMPDEST ], [ %len.addr.197, %OP2866.JUMPDEST ], [ %len.addr.62, %OP1169.PUSH2 ], [ %len.addr.61, %OP1158.PUSH2 ]
  %len.addr.155.ph = add i64 %len.addr.155.ph.in, 4
  %sp9391 = getelementptr i256, ptr %sp9379.sink, i64 3
  store i256 %dup139390.sink, ptr %sp9391, align 16
  br label %OP3974.JUMPDEST

OP3974.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP3974.JUMPDEST.sink.split
  %len.addr.155 = phi i64 [ %len.addr.155.ph, %OP3974.JUMPDEST.sink.split ], [ %len.addr.197, %dynamic_jump_table ], [ %len.addr.197, %dynamic_jump_table ]
  %sp13280 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.155
  store i256 64, ptr %sp13280, align 16
  %1881 = add i64 %len.addr.155, 2
  %sp13284 = getelementptr i256, ptr %sp13280, i64 1
  store i256 64, ptr %sp13284, align 16
  %mload.out.slot13288 = alloca i256, align 16
  %1882 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13288, ptr %arg.ecx.addr)
  %.not23751 = icmp eq i8 %1882, 0
  br i1 %.not23751, label %OP3977.MLOAD.contd, label %return, !prof !6

OP3977.MLOAD.contd:                               ; preds = %OP3974.JUMPDEST
  %mload.out13289 = load i256, ptr %mload.out.slot13288, align 16
  store i256 %mload.out13289, ptr %sp13284, align 16
  %1883 = add i64 %len.addr.155, 3
  %sp13294 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1881
  %1884 = add i64 %len.addr.155, 4
  %dup313297 = load i256, ptr %sp13280, align 16
  %sp13298 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1883
  %1885 = add i256 %dup313297, %mload.out13289
  store i256 %1885, ptr %sp13294, align 16
  store i256 %dup313297, ptr %sp13298, align 16
  %1886 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup313297, i256 %1885, ptr %arg.ecx.addr)
  %.not23752 = icmp eq i8 %1886, 0
  br i1 %.not23752, label %OP3983.PUSH1, label %return, !prof !6

OP3983.PUSH1:                                     ; preds = %OP3977.MLOAD.contd
  store i256 25, ptr %sp13294, align 16
  %dup213318 = load i256, ptr %sp13284, align 16
  store i256 %dup213318, ptr %sp13298, align 16
  %1887 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup213318, i256 25, ptr %arg.ecx.addr)
  %.not23753 = icmp eq i8 %1887, 0
  br i1 %.not23753, label %OP3986.PUSH32, label %return, !prof !6

OP3986.PUSH32:                                    ; preds = %OP3983.PUSH1
  store i256 52670383448186445861553817759887498218675746408080920759387454194053457903616, ptr %sp13294, align 16
  %swap.b13333 = load i256, ptr %sp13284, align 16
  store i256 32, ptr %sp13284, align 16
  %1888 = add i64 %len.addr.155, 5
  %sp13337 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1884
  store i256 32, ptr %sp13337, align 16
  %1889 = add i256 %swap.b13333, 32
  store i256 %1889, ptr %sp13298, align 16
  %1890 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1889, i256 52670383448186445861553817759887498218675746408080920759387454194053457903616, ptr %arg.ecx.addr)
  %.not23754 = icmp eq i8 %1890, 0
  br i1 %.not23754, label %OP3992.DUP2, label %return, !prof !6

OP3992.DUP2:                                      ; preds = %OP3986.PUSH32
  %dup213351 = load i256, ptr %sp13280, align 16
  store i256 %dup213351, ptr %sp13294, align 16
  %mload.out.slot13356 = alloca i256, align 16
  %1891 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup213351, ptr %mload.out.slot13356, ptr %arg.ecx.addr)
  %.not23755 = icmp eq i8 %1891, 0
  br i1 %.not23755, label %OP3993.MLOAD.contd, label %return, !prof !6

OP3993.MLOAD.contd:                               ; preds = %OP3992.DUP2
  %mload.out13357 = load i256, ptr %mload.out.slot13356, align 16
  store i256 %mload.out13357, ptr %sp13294, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp13298, align 16
  %sp13362 = getelementptr i256, ptr %sp13280, i64 -2
  %dup613363 = load i256, ptr %sp13362, align 16
  %1892 = add i64 %len.addr.155, 6
  %sp13368 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1888
  %1893 = and i256 %dup613363, 1461501637330902918203684832716283019655932542975
  store i256 %1893, ptr %sp13337, align 16
  %sp13378 = getelementptr i256, ptr %sp13280, i64 2
  %sp13380 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1892
  store i256 %mload.out13357, ptr %sp13380, align 16
  %1894 = add i256 %mload.out13357, 36
  store i256 %1894, ptr %sp13368, align 16
  %1895 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1894, i256 %1893, ptr %arg.ecx.addr)
  %.not23756 = icmp eq i8 %1895, 0
  br i1 %.not23756, label %OP4002.PUSH1, label %return, !prof !6

OP4002.PUSH1:                                     ; preds = %OP3993.MLOAD.contd
  store i256 68, ptr %sp13337, align 16
  %dup413400 = load i256, ptr %sp13378, align 16
  %1896 = add i256 %dup413400, 68
  %sp13409 = getelementptr i256, ptr %sp13280, i64 -1
  %dup713410 = load i256, ptr %sp13409, align 16
  store i256 %dup713410, ptr %sp13368, align 16
  store i256 %1896, ptr %sp13380, align 16
  %1897 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1896, i256 %dup713410, ptr %arg.ecx.addr)
  %.not23757 = icmp eq i8 %1897, 0
  br i1 %.not23757, label %OP4009.DUP5, label %return, !prof !6

OP4009.DUP5:                                      ; preds = %OP4002.PUSH1
  %dup513424 = load i256, ptr %sp13280, align 16
  store i256 %dup513424, ptr %sp13368, align 16
  %mload.out.slot13429 = alloca i256, align 16
  %1898 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup513424, ptr %mload.out.slot13429, ptr %arg.ecx.addr)
  %.not23758 = icmp eq i8 %1898, 0
  br i1 %.not23758, label %OP4010.MLOAD.contd, label %return, !prof !6

OP4010.MLOAD.contd:                               ; preds = %OP4009.DUP5
  %mload.out13430 = load i256, ptr %mload.out.slot13429, align 16
  %dup513438 = load i256, ptr %sp13378, align 16
  %sp13439 = getelementptr i256, ptr %sp13280, i64 7
  store i256 %dup513438, ptr %sp13439, align 16
  %1899 = sub i256 %dup513438, %mload.out13430
  %swap.b13455 = load i256, ptr %sp13337, align 16
  store i256 %mload.out13430, ptr %sp13337, align 16
  %1900 = add i256 %swap.b13455, %1899
  store i256 %1900, ptr %sp13368, align 16
  store i256 %mload.out13430, ptr %sp13380, align 16
  %1901 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out13430, i256 %1900, ptr %arg.ecx.addr)
  %.not23759 = icmp eq i8 %1901, 0
  br i1 %.not23759, label %OP4019.PUSH1, label %return, !prof !6

OP4019.PUSH1:                                     ; preds = %OP4010.MLOAD.contd
  %swap.b13477 = load i256, ptr %sp13337, align 16
  %swap.b13482 = load i256, ptr %sp13378, align 16
  store i256 %swap.b13477, ptr %sp13378, align 16
  %1902 = add i256 %swap.b13482, 100
  store i256 %1902, ptr %sp13337, align 16
  %dup513491 = load i256, ptr %sp13280, align 16
  store i256 %dup513491, ptr %sp13368, align 16
  %1903 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup513491, i256 %1902, ptr %arg.ecx.addr)
  %.not23760 = icmp eq i8 %1903, 0
  br i1 %.not23760, label %OP4025.SWAP2, label %return, !prof !6

OP4025.SWAP2:                                     ; preds = %OP4019.PUSH1
  %swap.a13500 = load i256, ptr %sp13298, align 16
  %swap.b13502 = load i256, ptr %sp13284, align 16
  store i256 %swap.a13500, ptr %sp13284, align 16
  %dup213505 = load i256, ptr %sp13294, align 16
  %1904 = add i256 %dup213505, %swap.b13502
  store i256 %1904, ptr %sp13298, align 16
  store i256 %1904, ptr %sp13337, align 16
  %mload.out.slot13520 = alloca i256, align 16
  %1905 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %1904, ptr %mload.out.slot13520, ptr %arg.ecx.addr)
  %.not23761 = icmp eq i8 %1905, 0
  br i1 %.not23761, label %OP4029.MLOAD.contd, label %return, !prof !6

OP4029.MLOAD.contd:                               ; preds = %OP4025.SWAP2
  %mload.out13521 = load i256, ptr %mload.out.slot13520, align 16
  %1906 = and i256 %mload.out13521, 26959946667150639794667015087019630673637144422540572481103610249215
  %1907 = or disjoint i256 %1906, -39341301877480157781710804024396230103289065588583741745104145964028735258624
  store i256 %1907, ptr %sp13337, align 16
  %dup213541 = load i256, ptr %sp13298, align 16
  store i256 %dup213541, ptr %sp13368, align 16
  %1908 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup213541, i256 %1907, ptr %arg.ecx.addr)
  %.not23762 = icmp eq i8 %1908, 0
  br i1 %.not23762, label %OP4036.SWAP3, label %return, !prof !6

OP4036.SWAP3:                                     ; preds = %OP4029.MLOAD.contd
  %swap.a13550 = load i256, ptr %sp13298, align 16
  %swap.b13552 = load i256, ptr %sp13280, align 16
  store i256 %swap.a13550, ptr %sp13280, align 16
  store i256 %swap.b13552, ptr %sp13298, align 16
  %mload.out.slot13556 = alloca i256, align 16
  %1909 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b13552, ptr %mload.out.slot13556, ptr %arg.ecx.addr)
  %.not23763 = icmp eq i8 %1909, 0
  br i1 %.not23763, label %OP4037.MLOAD.contd, label %return, !prof !6

OP4037.MLOAD.contd:                               ; preds = %OP4036.SWAP3
  %mload.out13557 = load i256, ptr %mload.out.slot13556, align 16
  store i256 %mload.out13557, ptr %sp13298, align 16
  %dup213561 = load i256, ptr %sp13294, align 16
  store i256 %dup213561, ptr %sp13337, align 16
  %mload.out.slot13566 = alloca i256, align 16
  %1910 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup213561, ptr %mload.out.slot13566, ptr %arg.ecx.addr)
  %.not23764 = icmp eq i8 %1910, 0
  br i1 %.not23764, label %OP4039.MLOAD.contd, label %return, !prof !6

OP4039.MLOAD.contd:                               ; preds = %OP4037.MLOAD.contd
  %mload.out13567 = load i256, ptr %mload.out.slot13566, align 16
  %swap.b13575 = load i256, ptr %sp13280, align 16
  store i256 0, ptr %sp13280, align 16
  %swap.b13582 = load i256, ptr %sp13284, align 16
  store i256 96, ptr %sp13284, align 16
  %sp13584 = getelementptr i256, ptr %sp13280, i64 -3
  %dup1013585 = load i256, ptr %sp13584, align 16
  %1911 = and i256 %dup1013585, %swap.b13582
  %swap.b13597 = load i256, ptr %sp13378, align 16
  store i256 %1911, ptr %sp13378, align 16
  %sp13601 = getelementptr i256, ptr %sp13280, i64 3
  %swap.b13602 = load i256, ptr %sp13601, align 16
  store i256 %swap.b13597, ptr %sp13601, align 16
  store i256 %swap.b13602, ptr %sp13337, align 16
  store i256 %swap.b13602, ptr %sp13368, align 16
  store i256 %swap.b13575, ptr %sp13380, align 16
  store i256 %mload.out13567, ptr %sp13439, align 16
  %sp13625 = getelementptr i256, ptr %sp13280, i64 8
  store i256 %mload.out13567, ptr %sp13625, align 16
  %sp13629 = getelementptr i256, ptr %sp13280, i64 9
  store i256 %swap.b13602, ptr %sp13629, align 16
  %1912 = add i64 %len.addr.155, 11
  %sp13633 = getelementptr i256, ptr %sp13280, i64 10
  store i256 %swap.b13575, ptr %sp13633, align 16
  br label %OP4055.JUMPDEST.preheader, !annotation !7

OP4055.JUMPDEST.preheader:                        ; preds = %dynamic_jump_table, %OP4039.MLOAD.contd
  %len.addr.156.ph = phi i64 [ %1912, %OP4039.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %1913 = add i64 %len.addr.156.ph, 1
  %sp13636 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.156.ph
  %sp13638 = getelementptr i256, ptr %sp13636, i64 -3
  %sp13640 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1913
  %dup41363925531 = load i256, ptr %sp13638, align 16
  store i256 %dup41363925531, ptr %sp13640, align 16
  %1914 = icmp ult i256 %dup41363925531, 32
  %1915 = zext i1 %1914 to i256
  store i256 %1915, ptr %sp13636, align 16
  br i1 %1914, label %OP4078.JUMPDEST, label %OP4061.DUP1.lr.ph

OP4061.DUP1.lr.ph:                                ; preds = %OP4055.JUMPDEST.preheader
  %sp13651 = getelementptr i256, ptr %sp13636, i64 -1
  %sp13661 = getelementptr i256, ptr %sp13636, i64 -2
  %dup113652.pre = load i256, ptr %sp13651, align 16
  br label %OP4061.DUP1

OP4061.DUP1:                                      ; preds = %OP4061.DUP1.lr.ph, %OP4065.PUSH32
  %dup113652 = phi i256 [ %dup113652.pre, %OP4061.DUP1.lr.ph ], [ %1937, %OP4065.PUSH32 ]
  store i256 %dup113652, ptr %sp13636, align 16
  %ecx.memory.i24585 = load ptr, ptr %ecx.memory.addr.i24415, align 8
  %ecx.memory.len.addr.i24586 = getelementptr inbounds i8, ptr %ecx.memory.i24585, i64 16
  %ecx.memory.len.i24587 = load i64, ptr %ecx.memory.len.addr.i24586, align 8, !noalias !142
  %ecx.memory.last_checkpoint.addr.i24588 = getelementptr inbounds i8, ptr %ecx.memory.i24585, i64 48
  %ecx.memory.last_checkpoint.i24589 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24588, align 8, !noalias !142
  %1916 = sub i64 %ecx.memory.len.i24587, %ecx.memory.last_checkpoint.i24589
  %1917 = icmp ugt i256 %dup113652, 18446744073709551615
  %1918 = trunc i256 %dup113652 to i64
  %1919 = add i64 %1918, 32
  %1920 = icmp ugt i64 %1918, -33
  %1921 = or i1 %1917, %1920
  %1922 = select i1 %1921, i64 -1, i64 %1919
  %1923 = icmp ugt i64 %1922, %1916
  br i1 %1923, label %resize.i24597, label %OP4062.MLOAD.contd, !prof !5

resize.i24597:                                    ; preds = %OP4061.DUP1
  %1924 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1922), !noalias !146
  %.not.i24598 = icmp eq i8 %1924, 0
  br i1 %.not.i24598, label %resize.i24597.OP4062.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24597.OP4062.MLOAD.contd_crit_edge:       ; preds = %resize.i24597
  %ecx.memory.i24601.pre = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !147
  br label %OP4062.MLOAD.contd

OP4062.MLOAD.contd:                               ; preds = %resize.i24597.OP4062.MLOAD.contd_crit_edge, %OP4061.DUP1
  %ecx.memory.i24601 = phi ptr [ %ecx.memory.i24601.pre, %resize.i24597.OP4062.MLOAD.contd_crit_edge ], [ %ecx.memory.i24585, %OP4061.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i24591 = getelementptr inbounds i8, ptr %ecx.memory.i24585, i64 8
  %ecx.memory.buffer.ptr.shared.i24592 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24591, align 8, !noalias !142
  %ecx.memory.buffer.ptr.i24593 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24592, i64 %ecx.memory.last_checkpoint.i24589
  %slot.i24594 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24593, i64 %1918
  %slot.value.i24595 = load i256, ptr %slot.i24594, align 1, !noalias !142
  %1925 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24595)
  store i256 %1925, ptr %sp13636, align 16
  %dup313662 = load i256, ptr %sp13661, align 16
  store i256 %dup313662, ptr %sp13640, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !147)
  %ecx.memory.len.addr.i24602 = getelementptr inbounds i8, ptr %ecx.memory.i24601, i64 16
  %ecx.memory.len.i24603 = load i64, ptr %ecx.memory.len.addr.i24602, align 8, !noalias !147
  %ecx.memory.last_checkpoint.addr.i24604 = getelementptr inbounds i8, ptr %ecx.memory.i24601, i64 48
  %ecx.memory.last_checkpoint.i24605 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24604, align 8, !noalias !147
  %1926 = sub i64 %ecx.memory.len.i24603, %ecx.memory.last_checkpoint.i24605
  %1927 = icmp ugt i256 %dup313662, 18446744073709551615
  %1928 = trunc i256 %dup313662 to i64
  %1929 = add i64 %1928, 32
  %1930 = icmp ugt i64 %1928, -33
  %1931 = or i1 %1927, %1930
  %1932 = select i1 %1931, i64 -1, i64 %1929
  %1933 = icmp ugt i64 %1932, %1926
  br i1 %1933, label %resize.i24612, label %OP4065.PUSH32, !prof !5

resize.i24612:                                    ; preds = %OP4062.MLOAD.contd
  %1934 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1932)
  %.not.i24613 = icmp eq i8 %1934, 0
  br i1 %.not.i24613, label %OP4065.PUSH32, label %return, !prof !6

OP4065.PUSH32:                                    ; preds = %OP4062.MLOAD.contd, %resize.i24612
  %ecx.memory.buffer.ptr.shared.addr.i24607 = getelementptr inbounds i8, ptr %ecx.memory.i24601, i64 8
  %ecx.memory.buffer.ptr.shared.i24608 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24607, align 8, !noalias !147
  %ecx.memory.buffer.ptr.i24609 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24608, i64 %ecx.memory.last_checkpoint.i24605
  %slot.i24610 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24609, i64 %1928
  store i256 %slot.value.i24595, ptr %slot.i24610, align 1, !noalias !147
  %swap.b13675 = load i256, ptr %sp13651, align 16
  %swap.b13680 = load i256, ptr %sp13638, align 16
  %1935 = add i256 %swap.b13680, -32
  store i256 %1935, ptr %sp13638, align 16
  %swap.b13698 = load i256, ptr %sp13661, align 16
  %1936 = add i256 %swap.b13698, 32
  store i256 %1936, ptr %sp13661, align 16
  %1937 = add i256 %swap.b13675, 32
  store i256 %1937, ptr %sp13651, align 16
  store i256 %1935, ptr %sp13640, align 16
  %1938 = icmp ult i256 %1935, 32
  %1939 = zext i1 %1938 to i256
  store i256 %1939, ptr %sp13636, align 16
  br i1 %1938, label %OP4078.JUMPDEST, label %OP4061.DUP1

OP4078.JUMPDEST.loopexit25542:                    ; preds = %dynamic_jump_table
  %sp13723.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp13725.phi.trans.insert = getelementptr i256, ptr %sp13723.phi.trans.insert, i64 -3
  %dup413726.pre = load i256, ptr %sp13725.phi.trans.insert, align 16
  br label %OP4078.JUMPDEST

OP4078.JUMPDEST:                                  ; preds = %OP4065.PUSH32, %OP4078.JUMPDEST.loopexit25542, %OP4055.JUMPDEST.preheader
  %dup413726 = phi i256 [ %dup41363925531, %OP4055.JUMPDEST.preheader ], [ %dup413726.pre, %OP4078.JUMPDEST.loopexit25542 ], [ %1935, %OP4065.PUSH32 ]
  %len.addr.157 = phi i64 [ %len.addr.156.ph, %OP4055.JUMPDEST.preheader ], [ %len.addr.197, %OP4078.JUMPDEST.loopexit25542 ], [ %len.addr.156.ph, %OP4065.PUSH32 ]
  %sp13723 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.157
  store i256 1, ptr %sp13723, align 16
  %1940 = add i64 %len.addr.157, 2
  %sp13725 = getelementptr i256, ptr %sp13723, i64 -3
  %sp13727 = getelementptr i256, ptr %sp13723, i64 1
  %1941 = add i64 %len.addr.157, 3
  %sp13729 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1940
  %1942 = sub i256 32, %dup413726
  store i256 %1942, ptr %sp13727, align 16
  store i256 256, ptr %sp13729, align 16
  %1943 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13727, i8 17)
  %.not23767 = icmp eq i8 %1943, 0
  br i1 %.not23767, label %OP4085.SUB, label %return, !prof !6

OP4085.SUB:                                       ; preds = %OP4078.JUMPDEST
  %a13742 = load i256, ptr %sp13727, align 16
  %b13744 = load i256, ptr %sp13723, align 16
  %1944 = sub i256 %a13742, %b13744
  store i256 %1944, ptr %sp13723, align 16
  %1945 = xor i256 %1944, -1
  store i256 %1945, ptr %sp13727, align 16
  %sp13755 = getelementptr i256, ptr %sp13723, i64 -1
  %dup313756 = load i256, ptr %sp13755, align 16
  store i256 %dup313756, ptr %sp13729, align 16
  %mload.out.slot13761 = alloca i256, align 16
  %1946 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup313756, ptr %mload.out.slot13761, ptr %arg.ecx.addr)
  %.not23768 = icmp eq i8 %1946, 0
  br i1 %.not23768, label %OP4089.MLOAD.contd, label %return, !prof !6

OP4089.MLOAD.contd:                               ; preds = %OP4085.SUB
  %mload.out13762 = load i256, ptr %mload.out.slot13761, align 16
  %b13768 = load i256, ptr %sp13727, align 16
  %1947 = and i256 %b13768, %mload.out13762
  store i256 %1947, ptr %sp13727, align 16
  %dup213772 = load i256, ptr %sp13723, align 16
  store i256 %dup213772, ptr %sp13729, align 16
  %1948 = add i64 %len.addr.157, 4
  %sp13775 = getelementptr i256, ptr %sp13723, i64 -2
  %dup513776 = load i256, ptr %sp13775, align 16
  %sp13777 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1941
  store i256 %dup513776, ptr %sp13777, align 16
  %mload.out.slot13781 = alloca i256, align 16
  %1949 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup513776, ptr %mload.out.slot13781, ptr %arg.ecx.addr)
  %.not23769 = icmp eq i8 %1949, 0
  br i1 %.not23769, label %OP4093.MLOAD.contd, label %return, !prof !6

OP4093.MLOAD.contd:                               ; preds = %OP4089.MLOAD.contd
  %mload.out13782 = load i256, ptr %mload.out.slot13781, align 16
  %b13788 = load i256, ptr %sp13729, align 16
  %1950 = and i256 %b13788, %mload.out13782
  store i256 %1950, ptr %sp13729, align 16
  %dup313796 = load i256, ptr %sp13727, align 16
  %sp13797 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1948
  %1951 = or i256 %dup313796, %1950
  store i256 %1951, ptr %sp13777, align 16
  %dup613806 = load i256, ptr %sp13775, align 16
  store i256 %dup613806, ptr %sp13797, align 16
  %1952 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup613806, i256 %1951, ptr %arg.ecx.addr)
  %.not23770 = icmp eq i8 %1952, 0
  br i1 %.not23770, label %OP4100.POP, label %return, !prof !6

OP4100.POP:                                       ; preds = %OP4093.MLOAD.contd
  %sp13820 = getelementptr i256, ptr %sp13723, i64 -4
  %swap.a13821 = load i256, ptr %sp13820, align 16
  %sp13822 = getelementptr i256, ptr %sp13723, i64 -5
  %swap.b13823 = load i256, ptr %sp13822, align 16
  store i256 %swap.a13821, ptr %sp13822, align 16
  store i256 %swap.b13823, ptr %sp13820, align 16
  %1953 = add i64 %len.addr.157, -5
  %sp13828 = getelementptr i256, ptr %sp13723, i64 -6
  %b13829 = load i256, ptr %sp13828, align 16
  %1954 = add i256 %b13829, %swap.a13821
  %sp13834 = getelementptr i256, ptr %sp13723, i64 -8
  store i256 %1954, ptr %sp13834, align 16
  %sp13839 = getelementptr i256, ptr %sp13723, i64 -7
  store i256 0, ptr %sp13839, align 16
  store i256 64, ptr %sp13828, align 16
  %mload.out.slot13845 = alloca i256, align 16
  %1955 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13845, ptr %arg.ecx.addr)
  %.not23771 = icmp eq i8 %1955, 0
  br i1 %.not23771, label %OP4114.MLOAD.contd, label %return, !prof !6

OP4114.MLOAD.contd:                               ; preds = %OP4100.POP
  %mload.out13846 = load i256, ptr %mload.out.slot13845, align 16
  store i256 %mload.out13846, ptr %sp13828, align 16
  %dup413854 = load i256, ptr %sp13834, align 16
  %1956 = sub i256 %dup413854, %mload.out13846
  store i256 %1956, ptr %sp13822, align 16
  store i256 %mload.out13846, ptr %sp13820, align 16
  store i256 0, ptr %sp13725, align 16
  %sp13869 = getelementptr i256, ptr %sp13723, i64 -9
  %dup713870 = load i256, ptr %sp13869, align 16
  store i256 %dup713870, ptr %sp13775, align 16
  %gas.remaining13873 = load i64, ptr %gas.remaining.addr, align 8
  %1957 = zext i64 %gas.remaining13873 to i256
  store i256 %1957, ptr %sp13755, align 16
  %1958 = add i64 %len.addr.157, -7
  %1959 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13839, i8 17, i8 0)
  %.not23772 = icmp eq i8 %1959, 0
  br i1 %.not23772, label %suspend, label %return, !prof !6

OP4123.SWAP2:                                     ; preds = %resume
  %1960 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp13878 = getelementptr i256, ptr %1960, i64 -1
  %swap.a13879 = load i256, ptr %sp13878, align 16
  %sp13880 = getelementptr i256, ptr %1960, i64 -3
  store i256 %swap.a13879, ptr %sp13880, align 16
  %ecx.return_data.len.addr13885 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len13886 = load i64, ptr %ecx.return_data.len.addr13885, align 8
  %1961 = zext i64 %ecx.return_data.len13886 to i256
  %sp13887 = getelementptr i256, ptr %1960, i64 -2
  store i256 %1961, ptr %sp13887, align 16
  store i256 %1961, ptr %sp13878, align 16
  %1962 = add i64 %stack_len17730, 1
  %sp13897 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1962
  store i256 %1961, ptr %sp13897, align 16
  %1963 = icmp eq i64 %ecx.return_data.len13886, 0
  %1964 = zext i1 %1963 to i256
  store i256 %1964, ptr %1960, align 16
  br i1 %1963, label %OP4158.JUMPDEST, label %OP4133.PUSH1

OP4133.PUSH1:                                     ; preds = %OP4123.SWAP2
  store i256 64, ptr %1960, align 16
  %ecx.memory.addr.i24615 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24616 = load ptr, ptr %ecx.memory.addr.i24615, align 8
  %ecx.memory.len.addr.i24617 = getelementptr inbounds i8, ptr %ecx.memory.i24616, i64 16
  %ecx.memory.len.i24618 = load i64, ptr %ecx.memory.len.addr.i24617, align 8, !noalias !150
  %ecx.memory.last_checkpoint.addr.i24619 = getelementptr inbounds i8, ptr %ecx.memory.i24616, i64 48
  %ecx.memory.last_checkpoint.i24620 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24619, align 8, !noalias !150
  %1965 = sub i64 %ecx.memory.len.i24618, %ecx.memory.last_checkpoint.i24620
  %1966 = icmp ult i64 %1965, 96
  br i1 %1966, label %resize.i24628, label %OP4134.MLOAD.contd, !prof !5

resize.i24628:                                    ; preds = %OP4133.PUSH1
  %1967 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !154
  %.not.i24629 = icmp eq i8 %1967, 0
  br i1 %.not.i24629, label %resize.i24628.OP4134.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24628.OP4134.MLOAD.contd_crit_edge:       ; preds = %resize.i24628
  %ecx.return_data.len13931.pre = load i64, ptr %ecx.return_data.len.addr13885, align 8
  %ecx.memory.i24632.pre = load ptr, ptr %ecx.memory.addr.i24615, align 8, !alias.scope !155
  %.pre25851 = zext i64 %ecx.return_data.len13931.pre to i256
  br label %OP4134.MLOAD.contd

OP4134.MLOAD.contd:                               ; preds = %resize.i24628.OP4134.MLOAD.contd_crit_edge, %OP4133.PUSH1
  %.pre-phi25852 = phi i256 [ %.pre25851, %resize.i24628.OP4134.MLOAD.contd_crit_edge ], [ %1961, %OP4133.PUSH1 ]
  %ecx.memory.i24632 = phi ptr [ %ecx.memory.i24632.pre, %resize.i24628.OP4134.MLOAD.contd_crit_edge ], [ %ecx.memory.i24616, %OP4133.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i24622 = getelementptr inbounds i8, ptr %ecx.memory.i24616, i64 8
  %ecx.memory.buffer.ptr.shared.i24623 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24622, align 8, !noalias !150
  %ecx.memory.buffer.ptr.i24624 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24623, i64 %ecx.memory.last_checkpoint.i24620
  %slot.i24625 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24624, i64 64
  %slot.value.i24626 = load i256, ptr %slot.i24625, align 1, !noalias !150
  %1968 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24626)
  store i256 %1968, ptr %sp13887, align 16
  %sp13932 = getelementptr i256, ptr %1960, i64 2
  store i256 %.pre-phi25852, ptr %sp13932, align 16
  %1969 = add nuw nsw i256 %.pre-phi25852, 63
  %1970 = and i256 %1969, 36893488147419103200
  %1971 = add i256 %1968, %1970
  store i256 %1971, ptr %1960, align 16
  store i256 64, ptr %sp13897, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !155)
  %ecx.memory.len.addr.i24633 = getelementptr inbounds i8, ptr %ecx.memory.i24632, i64 16
  %ecx.memory.len.i24634 = load i64, ptr %ecx.memory.len.addr.i24633, align 8, !noalias !155
  %ecx.memory.last_checkpoint.addr.i24635 = getelementptr inbounds i8, ptr %ecx.memory.i24632, i64 48
  %ecx.memory.last_checkpoint.i24636 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24635, align 8, !noalias !155
  %1972 = sub i64 %ecx.memory.len.i24634, %ecx.memory.last_checkpoint.i24636
  %1973 = icmp ult i64 %1972, 96
  br i1 %1973, label %resize.i24643, label %OP4147.RETURNDATASIZE, !prof !5

resize.i24643:                                    ; preds = %OP4134.MLOAD.contd
  %1974 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i24644 = icmp eq i8 %1974, 0
  br i1 %.not.i24644, label %OP4147.RETURNDATASIZE, label %return, !prof !6

OP4147.RETURNDATASIZE:                            ; preds = %OP4134.MLOAD.contd, %resize.i24643
  %ecx.memory.buffer.ptr.shared.addr.i24638 = getelementptr inbounds i8, ptr %ecx.memory.i24632, i64 8
  %ecx.memory.buffer.ptr.shared.i24639 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24638, align 8, !noalias !155
  %ecx.memory.buffer.ptr.i24640 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24639, i64 %ecx.memory.last_checkpoint.i24636
  %slot.i24641 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24640, i64 64
  %1975 = tail call i256 @llvm.bswap.i256(i256 %1971)
  store i256 %1975, ptr %slot.i24641, align 1, !noalias !155
  %ecx.return_data.len13964 = load i64, ptr %ecx.return_data.len.addr13885, align 8
  %1976 = zext i64 %ecx.return_data.len13964 to i256
  store i256 %1976, ptr %1960, align 16
  %dup313968 = load i256, ptr %sp13887, align 16
  store i256 %dup313968, ptr %sp13897, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !158)
  %ecx.memory.i24647 = load ptr, ptr %ecx.memory.addr.i24615, align 8, !alias.scope !158
  %ecx.memory.len.addr.i24648 = getelementptr inbounds i8, ptr %ecx.memory.i24647, i64 16
  %ecx.memory.len.i24649 = load i64, ptr %ecx.memory.len.addr.i24648, align 8, !noalias !158
  %ecx.memory.last_checkpoint.addr.i24650 = getelementptr inbounds i8, ptr %ecx.memory.i24647, i64 48
  %ecx.memory.last_checkpoint.i24651 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24650, align 8, !noalias !158
  %1977 = sub i64 %ecx.memory.len.i24649, %ecx.memory.last_checkpoint.i24651
  %1978 = icmp ugt i256 %dup313968, 18446744073709551615
  %1979 = trunc i256 %dup313968 to i64
  %1980 = add i64 %1979, 32
  %1981 = icmp ugt i64 %1979, -33
  %1982 = or i1 %1978, %1981
  %1983 = select i1 %1982, i64 -1, i64 %1980
  %1984 = icmp ugt i64 %1983, %1977
  br i1 %1984, label %resize.i24658, label %OP4150.RETURNDATASIZE, !prof !5

resize.i24658:                                    ; preds = %OP4147.RETURNDATASIZE
  %1985 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1983)
  %.not.i24659 = icmp eq i8 %1985, 0
  br i1 %.not.i24659, label %OP4150.RETURNDATASIZE, label %return, !prof !6

OP4150.RETURNDATASIZE:                            ; preds = %OP4147.RETURNDATASIZE, %resize.i24658
  %ecx.memory.buffer.ptr.shared.addr.i24653 = getelementptr inbounds i8, ptr %ecx.memory.i24647, i64 8
  %ecx.memory.buffer.ptr.shared.i24654 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24653, align 8, !noalias !158
  %ecx.memory.buffer.ptr.i24655 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24654, i64 %ecx.memory.last_checkpoint.i24651
  %slot.i24656 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24655, i64 %1979
  %1986 = tail call i256 @llvm.bswap.i256(i256 %1976)
  store i256 %1986, ptr %slot.i24656, align 1, !noalias !158
  %ecx.return_data.len13977 = load i64, ptr %ecx.return_data.len.addr13885, align 8
  %1987 = zext i64 %ecx.return_data.len13977 to i256
  store i256 %1987, ptr %1960, align 16
  store i256 0, ptr %sp13897, align 16
  %dup513985 = load i256, ptr %sp13887, align 16
  %sp13986 = getelementptr i256, ptr %1960, i64 3
  store i256 %dup513985, ptr %sp13986, align 16
  %1988 = add i256 %dup513985, 32
  store i256 %1988, ptr %sp13932, align 16
  %1989 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %1960)
  %.not23374 = icmp eq i8 %1989, 0
  br i1 %.not23374, label %OP4162.JUMPDEST, label %return, !prof !6

OP4158.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %sp13998.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp14002.phi.trans.insert = getelementptr i256, ptr %sp13998.phi.trans.insert, i64 -2
  %swap.b14003.pre = load i256, ptr %sp14002.phi.trans.insert, align 16
  br label %OP4158.JUMPDEST

OP4158.JUMPDEST:                                  ; preds = %OP4158.JUMPDEST.loopexit, %OP4123.SWAP2
  %swap.b14003 = phi i256 [ 0, %OP4123.SWAP2 ], [ %swap.b14003.pre, %OP4158.JUMPDEST.loopexit ]
  %len.addr.158 = phi i64 [ %stack_len17730, %OP4123.SWAP2 ], [ %len.addr.197, %OP4158.JUMPDEST.loopexit ]
  %sp13998 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.158
  %sp14002 = getelementptr i256, ptr %sp13998, i64 -2
  store i256 96, ptr %sp14002, align 16
  store i256 %swap.b14003, ptr %sp13998, align 16
  br label %OP4162.JUMPDEST, !annotation !7

OP4162.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4150.RETURNDATASIZE, %OP4158.JUMPDEST
  %len.addr.159 = phi i64 [ %len.addr.158, %OP4158.JUMPDEST ], [ %stack_len17730, %OP4150.RETURNDATASIZE ], [ %len.addr.197, %dynamic_jump_table ]
  %1990 = add i64 %len.addr.159, -1
  %1991 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.159
  %sp14008 = getelementptr i256, ptr %1991, i64 -2
  %swap.a14009 = load i256, ptr %sp14008, align 16
  %sp14010 = getelementptr i256, ptr %1991, i64 -4
  store i256 %swap.a14009, ptr %sp14010, align 16
  %1992 = add i64 %len.addr.159, -2
  %sp14014 = getelementptr i256, ptr %1991, i64 -3
  %swap.a14015 = load i256, ptr %sp14014, align 16
  %sp14016 = getelementptr i256, ptr %1991, i64 -5
  store i256 %swap.a14015, ptr %sp14016, align 16
  store i256 %swap.a14015, ptr %sp14014, align 16
  %sp14026 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1992
  %1993 = icmp eq i256 %swap.a14015, 0
  %1994 = zext i1 %1993 to i256
  store i256 %1994, ptr %sp14026, align 16
  br i1 %1993, label %OP4199.JUMPDEST, label %OP4173.POP

OP4173.POP:                                       ; preds = %OP4162.JUMPDEST
  store i256 %swap.a14009, ptr %sp14014, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !161)
  %ecx.memory.addr.i24661 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24662 = load ptr, ptr %ecx.memory.addr.i24661, align 8, !alias.scope !161, !noalias !164
  %ecx.memory.len.addr.i24663 = getelementptr inbounds i8, ptr %ecx.memory.i24662, i64 16
  %ecx.memory.len.i24664 = load i64, ptr %ecx.memory.len.addr.i24663, align 8, !noalias !166
  %ecx.memory.last_checkpoint.addr.i24665 = getelementptr inbounds i8, ptr %ecx.memory.i24662, i64 48
  %ecx.memory.last_checkpoint.i24666 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24665, align 8, !noalias !166
  %1995 = sub i64 %ecx.memory.len.i24664, %ecx.memory.last_checkpoint.i24666
  %1996 = icmp ugt i256 %swap.a14009, 18446744073709551615
  %1997 = trunc i256 %swap.a14009 to i64
  %1998 = add i64 %1997, 32
  %1999 = icmp ugt i64 %1997, -33
  %2000 = or i1 %1996, %1999
  %2001 = select i1 %2000, i64 -1, i64 %1998
  %2002 = icmp ugt i64 %2001, %1995
  br i1 %2002, label %resize.i24674, label %OP4175.MLOAD.contd, !prof !5

resize.i24674:                                    ; preds = %OP4173.POP
  %2003 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2001), !noalias !164
  %.not.i24675 = icmp eq i8 %2003, 0
  br i1 %.not.i24675, label %OP4175.MLOAD.contd, label %return, !prof !6

OP4175.MLOAD.contd:                               ; preds = %OP4173.POP, %resize.i24674
  %ecx.memory.buffer.ptr.shared.addr.i24668 = getelementptr inbounds i8, ptr %ecx.memory.i24662, i64 8
  %ecx.memory.buffer.ptr.shared.i24669 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24668, align 8, !noalias !166
  %ecx.memory.buffer.ptr.i24670 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24669, i64 %ecx.memory.last_checkpoint.i24666
  %slot.i24671 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24670, i64 %1997
  %slot.value.i24672 = load i256, ptr %slot.i24671, align 1, !noalias !166
  %2004 = icmp eq i256 %slot.value.i24672, 0
  %2005 = zext i1 %2004 to i256
  store i256 %2005, ptr %sp14014, align 16
  store i256 %2005, ptr %sp14026, align 16
  br i1 %2004, label %OP4199.JUMPDEST, label %OP4180.POP

OP4180.POP:                                       ; preds = %OP4175.MLOAD.contd
  %dup114059 = load i256, ptr %sp14010, align 16
  %sp14066 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1990
  store i256 32, ptr %sp14066, align 16
  %2006 = add i256 %dup114059, 32
  store i256 %2006, ptr %sp14014, align 16
  store i256 %dup114059, ptr %sp14008, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !167)
  %ecx.memory.i24678 = load ptr, ptr %ecx.memory.addr.i24661, align 8, !alias.scope !167, !noalias !170
  %ecx.memory.len.addr.i24679 = getelementptr inbounds i8, ptr %ecx.memory.i24678, i64 16
  %ecx.memory.len.i24680 = load i64, ptr %ecx.memory.len.addr.i24679, align 8, !noalias !172
  %ecx.memory.last_checkpoint.addr.i24681 = getelementptr inbounds i8, ptr %ecx.memory.i24678, i64 48
  %ecx.memory.last_checkpoint.i24682 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24681, align 8, !noalias !172
  %2007 = sub i64 %ecx.memory.len.i24680, %ecx.memory.last_checkpoint.i24682
  %2008 = icmp ugt i256 %dup114059, 18446744073709551615
  %2009 = trunc i256 %dup114059 to i64
  %2010 = add i64 %2009, 32
  %2011 = icmp ugt i64 %2009, -33
  %2012 = or i1 %2008, %2011
  %2013 = select i1 %2012, i64 -1, i64 %2010
  %2014 = icmp ugt i64 %2013, %2007
  br i1 %2014, label %resize.i24690, label %OP4186.MLOAD.contd, !prof !5

resize.i24690:                                    ; preds = %OP4180.POP
  %2015 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2013), !noalias !170
  %.not.i24691 = icmp eq i8 %2015, 0
  br i1 %.not.i24691, label %OP4186.MLOAD.contd, label %return, !prof !6

OP4186.MLOAD.contd:                               ; preds = %OP4180.POP, %resize.i24690
  %ecx.memory.buffer.ptr.shared.addr.i24684 = getelementptr inbounds i8, ptr %ecx.memory.i24678, i64 8
  %ecx.memory.buffer.ptr.shared.i24685 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24684, align 8, !noalias !172
  %ecx.memory.buffer.ptr.i24686 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24685, i64 %ecx.memory.last_checkpoint.i24682
  %slot.i24687 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24686, i64 %2009
  %slot.value.i24688 = load i256, ptr %slot.i24687, align 1, !noalias !172
  %2016 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24688)
  store i256 %2016, ptr %sp14026, align 16
  store i256 %2016, ptr %1991, align 16
  %2017 = icmp ugt i256 %2016, 31
  %2018 = zext i1 %2017 to i256
  store i256 %2018, ptr %sp14066, align 16
  br i1 %2017, label %OP4196.JUMPDEST, label %OP4193.PUSH1

OP4193.PUSH1:                                     ; preds = %OP4186.MLOAD.contd
  store i256 0, ptr %sp14066, align 16
  %sp14106 = getelementptr i256, ptr %1991, i64 -1
  store i256 0, ptr %1991, align 16
  %2019 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14106, i8 16)
  %.not23503 = icmp eq i8 %2019, 0
  %spec.select17808 = select i1 %.not23503, i8 16, i8 %2019, !prof !6
  br label %return

OP4196.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4186.MLOAD.contd
  %len.addr.160 = phi i64 [ %1990, %OP4186.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %2020 = add i64 %len.addr.160, -1
  %2021 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.160
  %sp14114 = getelementptr i256, ptr %2021, i64 -2
  %a14115 = load i256, ptr %sp14114, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !173)
  %ecx.memory.addr.i24693 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24694 = load ptr, ptr %ecx.memory.addr.i24693, align 8, !alias.scope !173, !noalias !176
  %ecx.memory.len.addr.i24695 = getelementptr inbounds i8, ptr %ecx.memory.i24694, i64 16
  %ecx.memory.len.i24696 = load i64, ptr %ecx.memory.len.addr.i24695, align 8, !noalias !178
  %ecx.memory.last_checkpoint.addr.i24697 = getelementptr inbounds i8, ptr %ecx.memory.i24694, i64 48
  %ecx.memory.last_checkpoint.i24698 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24697, align 8, !noalias !178
  %2022 = sub i64 %ecx.memory.len.i24696, %ecx.memory.last_checkpoint.i24698
  %2023 = icmp ugt i256 %a14115, 18446744073709551615
  %2024 = trunc i256 %a14115 to i64
  %2025 = add i64 %2024, 32
  %2026 = icmp ugt i64 %2024, -33
  %2027 = or i1 %2023, %2026
  %2028 = select i1 %2027, i64 -1, i64 %2025
  %2029 = icmp ugt i64 %2028, %2022
  br i1 %2029, label %resize.i24706, label %OP4198.MLOAD.contd, !prof !5

resize.i24706:                                    ; preds = %OP4196.JUMPDEST
  %2030 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2028), !noalias !176
  %.not.i24707 = icmp eq i8 %2030, 0
  br i1 %.not.i24707, label %OP4198.MLOAD.contd, label %return, !prof !6

OP4198.MLOAD.contd:                               ; preds = %OP4196.JUMPDEST, %resize.i24706
  %ecx.memory.buffer.ptr.shared.addr.i24700 = getelementptr inbounds i8, ptr %ecx.memory.i24694, i64 8
  %ecx.memory.buffer.ptr.shared.i24701 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24700, align 8, !noalias !178
  %ecx.memory.buffer.ptr.i24702 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24701, i64 %ecx.memory.last_checkpoint.i24698
  %slot.i24703 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24702, i64 %2024
  %slot.value.i24704 = load i256, ptr %slot.i24703, align 1, !noalias !178
  %2031 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24704)
  store i256 %2031, ptr %sp14114, align 16
  br label %OP4199.JUMPDEST, !annotation !7

OP4199.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4198.MLOAD.contd, %OP4175.MLOAD.contd, %OP4162.JUMPDEST
  %len.addr.161 = phi i64 [ %2020, %OP4198.MLOAD.contd ], [ %1992, %OP4162.JUMPDEST ], [ %1992, %OP4175.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %2032 = add i64 %len.addr.161, -1
  %sp14121 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2032
  %a14122 = load i256, ptr %sp14121, align 16
  %.not23505 = icmp eq i256 %a14122, 0
  br i1 %.not23505, label %OP4202.PUSH1, label %OP4233.JUMPDEST

OP4202.PUSH1:                                     ; preds = %OP4199.JUMPDEST
  store i256 64, ptr %sp14121, align 16
  %2033 = add i64 %len.addr.161, 1
  %2034 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.161
  %sp14126 = getelementptr i256, ptr %2034, i64 -1
  store i256 64, ptr %2034, align 16
  %mload.out.slot14132 = alloca i256, align 16
  %2035 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14132, ptr %arg.ecx.addr)
  %.not23506 = icmp eq i8 %2035, 0
  br i1 %.not23506, label %OP4204.MLOAD.contd, label %return, !prof !6

OP4204.MLOAD.contd:                               ; preds = %OP4202.PUSH1
  %mload.out14133 = load i256, ptr %mload.out.slot14132, align 16
  store i256 %mload.out14133, ptr %2034, align 16
  %sp14136 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2033
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14136, align 16
  %sp14140 = getelementptr i256, ptr %2034, i64 2
  store i256 %mload.out14133, ptr %sp14140, align 16
  %2036 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14133, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23507 = icmp eq i8 %2036, 0
  br i1 %.not23507, label %OP4208.PUSH1, label %return, !prof !6

OP4208.PUSH1:                                     ; preds = %OP4204.MLOAD.contd
  store i256 32, ptr %sp14136, align 16
  %dup314152 = load i256, ptr %2034, align 16
  %sp14153 = getelementptr i256, ptr %2034, i64 3
  store i256 %dup314152, ptr %sp14153, align 16
  %2037 = add i256 %dup314152, 4
  store i256 %2037, ptr %sp14140, align 16
  %2038 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2037, i256 32, ptr %arg.ecx.addr)
  %.not23508 = icmp eq i8 %2038, 0
  br i1 %.not23508, label %OP4213.PUSH1, label %return, !prof !6

OP4213.PUSH1:                                     ; preds = %OP4208.PUSH1
  store i256 26, ptr %sp14136, align 16
  %dup314171 = load i256, ptr %2034, align 16
  store i256 %dup314171, ptr %sp14153, align 16
  %2039 = add i256 %dup314171, 36
  store i256 %2039, ptr %sp14140, align 16
  %2040 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2039, i256 26, ptr %arg.ecx.addr)
  %.not23509 = icmp eq i8 %2040, 0
  br i1 %.not23509, label %OP4218.PUSH32, label %return, !prof !6

OP4218.PUSH32:                                    ; preds = %OP4213.PUSH1
  store i256 38641673103035791731704587915945305821834519506660595196760963476668136030208, ptr %sp14136, align 16
  %dup314190 = load i256, ptr %2034, align 16
  store i256 %dup314190, ptr %sp14153, align 16
  %2041 = add i256 %dup314190, 68
  store i256 %2041, ptr %sp14140, align 16
  %2042 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2041, i256 38641673103035791731704587915945305821834519506660595196760963476668136030208, ptr %arg.ecx.addr)
  %.not23510 = icmp eq i8 %2042, 0
  br i1 %.not23510, label %OP4223.SWAP1, label %return, !prof !6

OP4223.SWAP1:                                     ; preds = %OP4218.PUSH32
  %swap.a14205 = load i256, ptr %2034, align 16
  %swap.b14207 = load i256, ptr %sp14126, align 16
  store i256 %swap.a14205, ptr %sp14126, align 16
  store i256 %swap.b14207, ptr %2034, align 16
  %mload.out.slot14211 = alloca i256, align 16
  %2043 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b14207, ptr %mload.out.slot14211, ptr %arg.ecx.addr)
  %.not23511 = icmp eq i8 %2043, 0
  br i1 %.not23511, label %OP4224.MLOAD.contd, label %return, !prof !6

OP4224.MLOAD.contd:                               ; preds = %OP4223.SWAP1
  %mload.out14212 = load i256, ptr %mload.out.slot14211, align 16
  %swap.b14218 = load i256, ptr %sp14126, align 16
  %2044 = sub i256 %swap.b14218, %mload.out14212
  store i256 100, ptr %sp14136, align 16
  %2045 = add i256 %2044, 100
  store i256 %2045, ptr %sp14126, align 16
  store i256 %mload.out14212, ptr %2034, align 16
  %2046 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14126, i8 16)
  %.not23512 = icmp eq i8 %2046, 0
  %spec.select17809 = select i1 %.not23512, i8 16, i8 %2046, !prof !6
  br label %return

OP4233.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4199.JUMPDEST
  %len.addr.162 = phi i64 [ %2032, %OP4199.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %2047 = add i64 %len.addr.162, -6
  %sp14256 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2047
  %a14257 = load i256, ptr %sp14256, align 16
  br label %dynamic_jump_table.preheader

OP4240.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp14260 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 0, ptr %sp14260, align 16
  %2048 = add i64 %len.addr.197, 2
  %sp14262 = getelementptr i256, ptr %sp14260, i64 -1
  %dup214263 = load i256, ptr %sp14262, align 16
  %sp14264 = getelementptr i256, ptr %sp14260, i64 1
  %2049 = icmp eq i256 %dup214263, 0
  %2050 = zext i1 %2049 to i256
  store i256 %2050, ptr %sp14264, align 16
  %sp14272 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2048
  store i256 %2050, ptr %sp14272, align 16
  br i1 %2049, label %OP4262.JUMPDEST, label %OP4247.POP

OP4247.POP:                                       ; preds = %OP4240.JUMPDEST
  %sp14283 = getelementptr i256, ptr %sp14260, i64 -2
  %dup314284 = load i256, ptr %sp14283, align 16
  %2051 = mul i256 %dup314284, %dup214263
  store i256 %2051, ptr %sp14260, align 16
  store i256 %dup314284, ptr %sp14264, align 16
  store i256 %dup214263, ptr %sp14272, align 16
  %2052 = add i64 %len.addr.197, 4
  %sp14303 = getelementptr i256, ptr %sp14260, i64 3
  store i256 %2051, ptr %sp14303, align 16
  %sp14307 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2052
  store i256 %dup214263, ptr %sp14307, align 16
  br label %OP4259.JUMPDEST

OP4259.JUMPDEST:                                  ; preds = %OP4247.POP, %dynamic_jump_table
  %len.addr.163 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2052, %OP4247.POP ]
  %2053 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.163
  %sp14314 = getelementptr i256, ptr %2053, i64 -1
  %a14315 = load i256, ptr %sp14314, align 16
  %sp14316 = getelementptr i256, ptr %2053, i64 -2
  %b14317 = load i256, ptr %sp14316, align 16
  %2054 = udiv i256 %a14315, %b14317
  store i256 %2054, ptr %sp14316, align 16
  %2055 = add i64 %len.addr.163, -2
  %sp14322 = getelementptr i256, ptr %2053, i64 -3
  %b14323 = load i256, ptr %sp14322, align 16
  %2056 = icmp eq i256 %2054, %b14323
  %2057 = zext i1 %2056 to i256
  store i256 %2057, ptr %sp14322, align 16
  br label %OP4262.JUMPDEST, !annotation !7

OP4262.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4259.JUMPDEST, %OP4240.JUMPDEST
  %len.addr.164 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2055, %OP4259.JUMPDEST ], [ %2048, %OP4240.JUMPDEST ]
  %2058 = add i64 %len.addr.164, -1
  %sp14327 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2058
  %a14328 = load i256, ptr %sp14327, align 16
  %.not23492 = icmp eq i256 %a14328, 0
  br i1 %.not23492, label %OP4265.PUSH1, label %OP1803.JUMPDEST

OP4265.PUSH1:                                     ; preds = %OP4262.JUMPDEST
  store i256 64, ptr %sp14327, align 16
  %2059 = add i64 %len.addr.164, 1
  %2060 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.164
  %sp14332 = getelementptr i256, ptr %2060, i64 -1
  store i256 64, ptr %2060, align 16
  %mload.out.slot14338 = alloca i256, align 16
  %2061 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14338, ptr %arg.ecx.addr)
  %.not23493 = icmp eq i8 %2061, 0
  br i1 %.not23493, label %OP4267.MLOAD.contd, label %return, !prof !6

OP4267.MLOAD.contd:                               ; preds = %OP4265.PUSH1
  %mload.out14339 = load i256, ptr %mload.out.slot14338, align 16
  store i256 %mload.out14339, ptr %2060, align 16
  %sp14342 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2059
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14342, align 16
  %sp14346 = getelementptr i256, ptr %2060, i64 2
  store i256 %mload.out14339, ptr %sp14346, align 16
  %2062 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14339, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23494 = icmp eq i8 %2062, 0
  br i1 %.not23494, label %OP4271.PUSH1, label %return, !prof !6

OP4271.PUSH1:                                     ; preds = %OP4267.MLOAD.contd
  store i256 32, ptr %sp14342, align 16
  %dup314358 = load i256, ptr %2060, align 16
  %sp14359 = getelementptr i256, ptr %2060, i64 3
  store i256 %dup314358, ptr %sp14359, align 16
  %2063 = add i256 %dup314358, 4
  store i256 %2063, ptr %sp14346, align 16
  %2064 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2063, i256 32, ptr %arg.ecx.addr)
  %.not23495 = icmp eq i8 %2064, 0
  br i1 %.not23495, label %OP4276.PUSH1, label %return, !prof !6

OP4276.PUSH1:                                     ; preds = %OP4271.PUSH1
  store i256 20, ptr %sp14342, align 16
  %dup314377 = load i256, ptr %2060, align 16
  store i256 %dup314377, ptr %sp14359, align 16
  %2065 = add i256 %dup314377, 36
  store i256 %2065, ptr %sp14346, align 16
  %2066 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2065, i256 20, ptr %arg.ecx.addr)
  %.not23496 = icmp eq i8 %2066, 0
  br i1 %.not23496, label %OP4281.PUSH32, label %return, !prof !6

OP4281.PUSH32:                                    ; preds = %OP4276.PUSH1
  store i256 45434785798259124660747129597546303000779477223871130978233674825584957456384, ptr %sp14342, align 16
  %dup314396 = load i256, ptr %2060, align 16
  store i256 %dup314396, ptr %sp14359, align 16
  %2067 = add i256 %dup314396, 68
  store i256 %2067, ptr %sp14346, align 16
  %2068 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2067, i256 45434785798259124660747129597546303000779477223871130978233674825584957456384, ptr %arg.ecx.addr)
  %.not23497 = icmp eq i8 %2068, 0
  br i1 %.not23497, label %OP4286.SWAP1, label %return, !prof !6

OP4286.SWAP1:                                     ; preds = %OP4281.PUSH32
  %swap.a14411 = load i256, ptr %2060, align 16
  %swap.b14413 = load i256, ptr %sp14332, align 16
  store i256 %swap.a14411, ptr %sp14332, align 16
  store i256 %swap.b14413, ptr %2060, align 16
  %mload.out.slot14417 = alloca i256, align 16
  %2069 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b14413, ptr %mload.out.slot14417, ptr %arg.ecx.addr)
  %.not23498 = icmp eq i8 %2069, 0
  br i1 %.not23498, label %OP4287.MLOAD.contd, label %return, !prof !6

OP4287.MLOAD.contd:                               ; preds = %OP4286.SWAP1
  %mload.out14418 = load i256, ptr %mload.out.slot14417, align 16
  %swap.b14424 = load i256, ptr %sp14332, align 16
  %2070 = sub i256 %swap.b14424, %mload.out14418
  store i256 100, ptr %sp14342, align 16
  %2071 = add i256 %2070, 100
  store i256 %2071, ptr %sp14332, align 16
  store i256 %mload.out14418, ptr %2060, align 16
  %2072 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14332, i8 16)
  %.not23499 = icmp eq i8 %2072, 0
  %spec.select17810 = select i1 %.not23499, i8 16, i8 %2072, !prof !6
  br label %return

OP4296.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2073 = add i64 %len.addr.197, 1
  %2074 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp14457 = getelementptr i256, ptr %2074, i64 -1
  %dup114458 = load i256, ptr %sp14457, align 16
  %sp14461 = getelementptr i256, ptr %2074, i64 -2
  %dup314462 = load i256, ptr %sp14461, align 16
  %sp14463 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2073
  %2075 = sub i256 %dup314462, %dup114458
  store i256 %2075, ptr %2074, align 16
  %sp14477 = getelementptr i256, ptr %2074, i64 2
  store i256 %2075, ptr %sp14477, align 16
  %2076 = icmp ule i256 %dup114458, %dup314462
  %2077 = zext i1 %2076 to i256
  store i256 %2077, ptr %sp14463, align 16
  br i1 %2076, label %OP1803.JUMPDEST, label %OP4306.PUSH1

OP4306.PUSH1:                                     ; preds = %OP4296.JUMPDEST
  %sp14477.le = getelementptr i256, ptr %2074, i64 2
  %2078 = add i64 %len.addr.197, 3
  store i256 64, ptr %sp14463, align 16
  store i256 64, ptr %sp14477.le, align 16
  %mload.out.slot14500 = alloca i256, align 16
  %2079 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14500, ptr %arg.ecx.addr)
  %.not23484 = icmp eq i8 %2079, 0
  br i1 %.not23484, label %OP4308.MLOAD.contd, label %return, !prof !6

OP4308.MLOAD.contd:                               ; preds = %OP4306.PUSH1
  %mload.out14501 = load i256, ptr %mload.out.slot14500, align 16
  store i256 %mload.out14501, ptr %sp14477.le, align 16
  %sp14504 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2078
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14504, align 16
  %sp14508 = getelementptr i256, ptr %2074, i64 4
  store i256 %mload.out14501, ptr %sp14508, align 16
  %2080 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14501, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23485 = icmp eq i8 %2080, 0
  br i1 %.not23485, label %OP4312.PUSH1, label %return, !prof !6

OP4312.PUSH1:                                     ; preds = %OP4308.MLOAD.contd
  store i256 32, ptr %sp14504, align 16
  %dup314520 = load i256, ptr %sp14477.le, align 16
  %sp14521 = getelementptr i256, ptr %2074, i64 5
  store i256 %dup314520, ptr %sp14521, align 16
  %2081 = add i256 %dup314520, 4
  store i256 %2081, ptr %sp14508, align 16
  %2082 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2081, i256 32, ptr %arg.ecx.addr)
  %.not23486 = icmp eq i8 %2082, 0
  br i1 %.not23486, label %OP4317.PUSH1, label %return, !prof !6

OP4317.PUSH1:                                     ; preds = %OP4312.PUSH1
  store i256 21, ptr %sp14504, align 16
  %dup314539 = load i256, ptr %sp14477.le, align 16
  store i256 %dup314539, ptr %sp14521, align 16
  %2083 = add i256 %dup314539, 36
  store i256 %2083, ptr %sp14508, align 16
  %2084 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2083, i256 21, ptr %arg.ecx.addr)
  %.not23487 = icmp eq i8 %2084, 0
  br i1 %.not23487, label %OP4322.PUSH32, label %return, !prof !6

OP4322.PUSH32:                                    ; preds = %OP4317.PUSH1
  store i256 45434785798259124660894245428059312211213725548196251198658069351696294739968, ptr %sp14504, align 16
  %dup314558 = load i256, ptr %sp14477.le, align 16
  store i256 %dup314558, ptr %sp14521, align 16
  %2085 = add i256 %dup314558, 68
  store i256 %2085, ptr %sp14508, align 16
  %2086 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2085, i256 45434785798259124660894245428059312211213725548196251198658069351696294739968, ptr %arg.ecx.addr)
  %.not23488 = icmp eq i8 %2086, 0
  br i1 %.not23488, label %OP4327.SWAP1, label %return, !prof !6

OP4327.SWAP1:                                     ; preds = %OP4322.PUSH32
  %swap.a14573 = load i256, ptr %sp14477.le, align 16
  %swap.b14575 = load i256, ptr %sp14463, align 16
  store i256 %swap.a14573, ptr %sp14463, align 16
  store i256 %swap.b14575, ptr %sp14477.le, align 16
  %mload.out.slot14579 = alloca i256, align 16
  %2087 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b14575, ptr %mload.out.slot14579, ptr %arg.ecx.addr)
  %.not23489 = icmp eq i8 %2087, 0
  br i1 %.not23489, label %OP4328.MLOAD.contd, label %return, !prof !6

OP4328.MLOAD.contd:                               ; preds = %OP4327.SWAP1
  %mload.out14580 = load i256, ptr %mload.out.slot14579, align 16
  %swap.b14586 = load i256, ptr %sp14463, align 16
  %2088 = sub i256 %swap.b14586, %mload.out14580
  store i256 100, ptr %sp14504, align 16
  %2089 = add i256 %2088, 100
  store i256 %2089, ptr %sp14463, align 16
  store i256 %mload.out14580, ptr %sp14477.le, align 16
  %2090 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14463, i8 16)
  %.not23490 = icmp eq i8 %2090, 0
  %spec.select17811 = select i1 %.not23490, i8 16, i8 %2090, !prof !6
  br label %return

OP4337.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3958.PUSH14, %OP3044.MLOAD.contd, %OP2406.JUMPDEST, %OP1683.JUMPDEST
  %len.addr.165 = phi i64 [ %1875, %OP3958.PUSH14 ], [ %1414, %OP3044.MLOAD.contd ], [ %1094, %OP2406.JUMPDEST ], [ %740, %OP1683.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %2091 = add i64 %len.addr.165, 1
  %sp14619 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.165
  %sp14621 = getelementptr i256, ptr %sp14619, i64 -4
  %dup514622 = load i256, ptr %sp14621, align 16
  %sp14623 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2091
  %2092 = icmp ugt i256 %dup514622, 5192296858534827628530496329220095
  %2093 = zext i1 %2092 to i256
  %2094 = xor i1 %2092, true
  %2095 = zext i1 %2094 to i256
  store i256 %2095, ptr %sp14619, align 16
  store i256 %2093, ptr %sp14623, align 16
  br i1 %2092, label %OP4351.JUMPDEST, label %OP4346.POP

OP4346.POP:                                       ; preds = %OP4337.JUMPDEST
  %sp14650 = getelementptr i256, ptr %sp14619, i64 -3
  %dup414651 = load i256, ptr %sp14650, align 16
  store i256 %dup414651, ptr %sp14623, align 16
  %2096 = icmp ult i256 %dup414651, 5192296858534827628530496329220096
  %2097 = zext i1 %2096 to i256
  store i256 %2097, ptr %sp14619, align 16
  br label %OP4351.JUMPDEST, !annotation !7

OP4351.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4346.POP, %OP4337.JUMPDEST
  %len.addr.166 = phi i64 [ %2091, %OP4337.JUMPDEST ], [ %2091, %OP4346.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %2098 = add i64 %len.addr.166, -1
  %sp14665 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2098
  %a14666 = load i256, ptr %sp14665, align 16
  %.not23694 = icmp eq i256 %a14666, 0
  br i1 %.not23694, label %OP4354.PUSH1, label %OP4385.JUMPDEST

OP4354.PUSH1:                                     ; preds = %OP4351.JUMPDEST
  store i256 64, ptr %sp14665, align 16
  %2099 = add i64 %len.addr.166, 1
  %2100 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.166
  %sp14670 = getelementptr i256, ptr %2100, i64 -1
  store i256 64, ptr %2100, align 16
  %mload.out.slot14676 = alloca i256, align 16
  %2101 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14676, ptr %arg.ecx.addr)
  %.not23695 = icmp eq i8 %2101, 0
  br i1 %.not23695, label %OP4356.MLOAD.contd, label %return, !prof !6

OP4356.MLOAD.contd:                               ; preds = %OP4354.PUSH1
  %mload.out14677 = load i256, ptr %mload.out.slot14676, align 16
  store i256 %mload.out14677, ptr %2100, align 16
  %sp14680 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2099
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14680, align 16
  %sp14684 = getelementptr i256, ptr %2100, i64 2
  store i256 %mload.out14677, ptr %sp14684, align 16
  %2102 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14677, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23696 = icmp eq i8 %2102, 0
  br i1 %.not23696, label %OP4360.PUSH1, label %return, !prof !6

OP4360.PUSH1:                                     ; preds = %OP4356.MLOAD.contd
  store i256 32, ptr %sp14680, align 16
  %dup314696 = load i256, ptr %2100, align 16
  %sp14697 = getelementptr i256, ptr %2100, i64 3
  store i256 %dup314696, ptr %sp14697, align 16
  %2103 = add i256 %dup314696, 4
  store i256 %2103, ptr %sp14684, align 16
  %2104 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2103, i256 32, ptr %arg.ecx.addr)
  %.not23697 = icmp eq i8 %2104, 0
  br i1 %.not23697, label %OP4365.PUSH1, label %return, !prof !6

OP4365.PUSH1:                                     ; preds = %OP4360.PUSH1
  store i256 19, ptr %sp14680, align 16
  %dup314715 = load i256, ptr %2100, align 16
  store i256 %dup314715, ptr %sp14697, align 16
  %2105 = add i256 %dup314715, 36
  store i256 %2105, ptr %sp14684, align 16
  %2106 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2105, i256 19, ptr %arg.ecx.addr)
  %.not23698 = icmp eq i8 %2106, 0
  br i1 %.not23698, label %OP4370.PUSH32, label %return, !prof !6

OP4370.PUSH32:                                    ; preds = %OP4365.PUSH1
  store i256 38641673103035791731704587908660723145277594738107380858947041184128687931392, ptr %sp14680, align 16
  %dup314734 = load i256, ptr %2100, align 16
  store i256 %dup314734, ptr %sp14697, align 16
  %2107 = add i256 %dup314734, 68
  store i256 %2107, ptr %sp14684, align 16
  %2108 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2107, i256 38641673103035791731704587908660723145277594738107380858947041184128687931392, ptr %arg.ecx.addr)
  %.not23699 = icmp eq i8 %2108, 0
  br i1 %.not23699, label %OP4375.SWAP1, label %return, !prof !6

OP4375.SWAP1:                                     ; preds = %OP4370.PUSH32
  %swap.a14749 = load i256, ptr %2100, align 16
  %swap.b14751 = load i256, ptr %sp14670, align 16
  store i256 %swap.a14749, ptr %sp14670, align 16
  store i256 %swap.b14751, ptr %2100, align 16
  %mload.out.slot14755 = alloca i256, align 16
  %2109 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b14751, ptr %mload.out.slot14755, ptr %arg.ecx.addr)
  %.not23700 = icmp eq i8 %2109, 0
  br i1 %.not23700, label %OP4376.MLOAD.contd, label %return, !prof !6

OP4376.MLOAD.contd:                               ; preds = %OP4375.SWAP1
  %mload.out14756 = load i256, ptr %mload.out.slot14755, align 16
  %swap.b14762 = load i256, ptr %sp14670, align 16
  %2110 = sub i256 %swap.b14762, %mload.out14756
  store i256 100, ptr %sp14680, align 16
  %2111 = add i256 %2110, 100
  store i256 %2111, ptr %sp14670, align 16
  store i256 %mload.out14756, ptr %2100, align 16
  %2112 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14670, i8 16)
  %.not23701 = icmp eq i8 %2112, 0
  %spec.select17812 = select i1 %.not23701, i8 16, i8 %2112, !prof !6
  br label %return

OP4385.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4351.JUMPDEST
  %len.addr.167 = phi i64 [ %2098, %OP4351.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %2113 = add i64 %len.addr.167, 1
  %sp14795 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.167
  store i256 8, ptr %sp14795, align 16
  %2114 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14795, i8 17)
  %.not23702 = icmp eq i8 %2114, 0
  br i1 %.not23702, label %OP4388.PUSH4, label %return, !prof !6

OP4388.PUSH4:                                     ; preds = %OP4385.JUMPDEST
  %sp14799 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2113
  %2115 = add i64 %len.addr.167, 3
  %env.block.timestamp.addr14801 = getelementptr inbounds i8, ptr %arg.env.addr, i64 80
  %env.block.timestamp14802 = load i256, ptr %env.block.timestamp.addr14801, align 16
  %sp14803 = getelementptr i256, ptr %sp14795, i64 2
  %sp14807 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2115
  %2116 = and i256 %env.block.timestamp14802, 4294967295
  %swap.b14818 = load i256, ptr %sp14795, align 16
  store i256 %2116, ptr %sp14795, align 16
  %2117 = lshr i256 %swap.b14818, 224
  %2118 = sub nsw i256 %2116, %2117
  store i256 %2118, ptr %sp14799, align 16
  %2119 = and i256 %2118, 4294967295
  %2120 = icmp eq i256 %2119, 0
  %2121 = zext i1 %2120 to i256
  %2122 = xor i1 %2120, true
  %2123 = zext i1 %2122 to i256
  store i256 %2123, ptr %sp14803, align 16
  store i256 %2121, ptr %sp14807, align 16
  br i1 %2120, label %OP4415.JUMPDEST, label %OP4409.POP

OP4409.POP:                                       ; preds = %OP4388.PUSH4
  %sp14891 = getelementptr i256, ptr %sp14795, i64 -2
  %dup514892 = load i256, ptr %sp14891, align 16
  store i256 %dup514892, ptr %sp14807, align 16
  %2124 = and i256 %dup514892, 5192296858534827628530496329220095
  %2125 = icmp ne i256 %2124, 0
  %2126 = zext i1 %2125 to i256
  store i256 %2126, ptr %sp14803, align 16
  br label %OP4415.JUMPDEST, !annotation !7

OP4415.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4409.POP, %OP4388.PUSH4
  %len.addr.168 = phi i64 [ %2115, %OP4388.PUSH4 ], [ %2115, %OP4409.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %2127 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.168
  %sp14910 = getelementptr i256, ptr %2127, i64 -1
  %dup114911 = load i256, ptr %sp14910, align 16
  %2128 = icmp eq i256 %dup114911, 0
  %2129 = zext i1 %2128 to i256
  store i256 %2129, ptr %2127, align 16
  br i1 %2128, label %OP4426.JUMPDEST, label %OP4420.POP

OP4420.POP:                                       ; preds = %OP4415.JUMPDEST
  %sp14924 = getelementptr i256, ptr %2127, i64 -4
  %dup414925 = load i256, ptr %sp14924, align 16
  store i256 %dup414925, ptr %2127, align 16
  %2130 = and i256 %dup414925, 5192296858534827628530496329220095
  %2131 = icmp ne i256 %2130, 0
  %2132 = zext i1 %2131 to i256
  store i256 %2132, ptr %sp14910, align 16
  br label %OP4426.JUMPDEST, !annotation !7

OP4426.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4420.POP, %OP4415.JUMPDEST
  %len.addr.169 = phi i64 [ %len.addr.168, %OP4415.JUMPDEST ], [ %len.addr.168, %OP4420.POP ], [ %len.addr.197, %dynamic_jump_table ]
  %2133 = add i64 %len.addr.169, -1
  %sp14943 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2133
  %a14944 = load i256, ptr %sp14943, align 16
  %2134 = icmp eq i256 %a14944, 0
  %2135 = zext i1 %2134 to i256
  store i256 %2135, ptr %sp14943, align 16
  br i1 %2134, label %OP4488.JUMPDEST, label %OP4430.DUP1

OP4430.DUP1:                                      ; preds = %OP4426.JUMPDEST
  %2136 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.169
  %sp14950 = getelementptr i256, ptr %2136, i64 -2
  %dup114951 = load i256, ptr %sp14950, align 16
  %sp14958 = getelementptr i256, ptr %2136, i64 -1
  %2137 = and i256 %dup114951, 4294967295
  store i256 %2137, ptr %sp14958, align 16
  store i256 9253, ptr %2136, align 16
  %sp14964 = getelementptr i256, ptr %2136, i64 -5
  %dup614965 = load i256, ptr %sp14964, align 16
  %sp14966 = getelementptr i256, ptr %2136, i64 1
  store i256 %dup614965, ptr %sp14966, align 16
  %sp14968 = getelementptr i256, ptr %2136, i64 2
  store i256 9211, ptr %sp14968, align 16
  %2138 = add i64 %len.addr.169, 4
  %sp14970 = getelementptr i256, ptr %2136, i64 -4
  %dup714971 = load i256, ptr %sp14970, align 16
  %sp14972 = getelementptr i256, ptr %2136, i64 3
  store i256 %dup714971, ptr %sp14972, align 16
  br label %OP5181.JUMPDEST

OP4439.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp14976 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp14980 = getelementptr i256, ptr %sp14976, i64 -1
  %b14981 = load i256, ptr %sp14980, align 16
  %2139 = and i256 %b14981, 26959946667150639794667015087019630673637144422540572481103610249215
  %sp14986 = getelementptr i256, ptr %sp14976, i64 -2
  %swap.b14987 = load i256, ptr %sp14986, align 16
  store i256 %2139, ptr %sp14986, align 16
  store i256 %swap.b14987, ptr %sp14980, align 16
  %sp14991 = getelementptr i256, ptr %sp14976, i64 1
  store i256 10875, ptr %sp14991, align 16
  store i256 10875, ptr %sp14976, align 16
  br label %dynamic_jump_table.backedge

OP4447.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp15003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 9, ptr %sp15003, align 16
  %2140 = add i64 %len.addr.197, 2
  %sp15007 = getelementptr i256, ptr %sp15003, i64 1
  store i256 9, ptr %sp15007, align 16
  %2141 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15007, i8 17)
  %.not23482 = icmp eq i8 %2141, 0
  br i1 %.not23482, label %OP4451.PUSH28, label %return, !prof !6

OP4451.PUSH28:                                    ; preds = %OP4447.JUMPDEST
  %sp15011 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2140
  %sp15015 = getelementptr i256, ptr %sp15003, i64 -1
  %swap.b15016 = load i256, ptr %sp15015, align 16
  %swap.b15021 = load i256, ptr %sp15007, align 16
  store i256 26959946667150639794667015087019630673637144422540572481103610249215, ptr %sp15011, align 16
  %2142 = and i256 %swap.b15016, 26959946667150639794667015087019630673637144422540572481103610249215
  %sp15036 = getelementptr i256, ptr %sp15003, i64 -2
  %swap.b15037 = load i256, ptr %sp15036, align 16
  %swap.b15042 = load i256, ptr %sp15003, align 16
  store i256 %2142, ptr %sp15007, align 16
  %2143 = mul i256 %swap.b15037, %2142
  store i256 %2143, ptr %sp15003, align 16
  %2144 = add i256 %2143, %swap.b15021
  store i256 %2144, ptr %sp15036, align 16
  store i256 %swap.b15042, ptr %sp15015, align 16
  %2145 = add i64 %len.addr.197, -2
  %2146 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15036, i8 17)
  %.not23483 = icmp eq i8 %2146, 0
  br i1 %.not23483, label %OP4463.PUSH4, label %return, !prof !6

OP4463.PUSH4:                                     ; preds = %OP4451.PUSH28
  %2147 = add i64 %len.addr.197, 3
  %sp15068 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2145
  %sp15070 = getelementptr i256, ptr %sp15003, i64 -3
  %dup215071 = load i256, ptr %sp15070, align 16
  %2148 = and i256 %dup215071, 4294967295
  store i256 %2148, ptr %sp15068, align 16
  store i256 9317, ptr %sp15015, align 16
  %sp15082 = getelementptr i256, ptr %sp15003, i64 -5
  %dup515083 = load i256, ptr %sp15082, align 16
  store i256 %dup515083, ptr %sp15003, align 16
  store i256 9211, ptr %sp15007, align 16
  %sp15088 = getelementptr i256, ptr %sp15003, i64 -6
  %dup815089 = load i256, ptr %sp15088, align 16
  store i256 %dup815089, ptr %sp15011, align 16
  br label %OP5181.JUMPDEST

OP4472.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp15094 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 10, ptr %sp15094, align 16
  %2149 = add i64 %len.addr.197, 2
  %sp15098 = getelementptr i256, ptr %sp15094, i64 1
  store i256 10, ptr %sp15098, align 16
  %2150 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15098, i8 17)
  %.not23480 = icmp eq i8 %2150, 0
  br i1 %.not23480, label %OP4476.PUSH28, label %return, !prof !6

OP4476.PUSH28:                                    ; preds = %OP4472.JUMPDEST
  %sp15102 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2149
  %sp15106 = getelementptr i256, ptr %sp15094, i64 -1
  %swap.b15107 = load i256, ptr %sp15106, align 16
  %swap.b15112 = load i256, ptr %sp15098, align 16
  store i256 26959946667150639794667015087019630673637144422540572481103610249215, ptr %sp15102, align 16
  %2151 = and i256 %swap.b15107, 26959946667150639794667015087019630673637144422540572481103610249215
  %sp15127 = getelementptr i256, ptr %sp15094, i64 -2
  %swap.b15128 = load i256, ptr %sp15127, align 16
  %swap.b15133 = load i256, ptr %sp15094, align 16
  store i256 %2151, ptr %sp15098, align 16
  %2152 = mul i256 %swap.b15128, %2151
  store i256 %2152, ptr %sp15094, align 16
  %2153 = add i256 %2152, %swap.b15112
  store i256 %2153, ptr %sp15127, align 16
  store i256 %swap.b15133, ptr %sp15106, align 16
  %2154 = add i64 %len.addr.197, -2
  %2155 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15127, i8 17)
  %.not23481 = icmp eq i8 %2155, 0
  br i1 %.not23481, label %OP4488.JUMPDEST, label %return, !prof !6

OP4488.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4476.PUSH28, %OP4426.JUMPDEST
  %len.addr.170 = phi i64 [ %2154, %OP4476.PUSH28 ], [ %2133, %OP4426.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp15160 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.170
  store i256 8, ptr %sp15160, align 16
  %2156 = add i64 %len.addr.170, 2
  %sp15164 = getelementptr i256, ptr %sp15160, i64 1
  store i256 8, ptr %sp15164, align 16
  %2157 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15164, i8 17)
  %.not23703 = icmp eq i8 %2157, 0
  br i1 %.not23703, label %OP4492.PUSH32, label %return, !prof !6

OP4492.PUSH32:                                    ; preds = %OP4488.JUMPDEST
  %2158 = add i64 %len.addr.170, 3
  %sp15168 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2156
  %sp15178 = getelementptr i256, ptr %sp15160, i64 -6
  %dup915179 = load i256, ptr %sp15178, align 16
  %sp15180 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2158
  %2159 = add i64 %len.addr.170, 5
  %sp15184 = getelementptr i256, ptr %sp15160, i64 4
  %2160 = and i256 %dup915179, 5192296858534827628530496329220095
  store i256 5192296858534827628530496329220095, ptr %sp15164, align 16
  %sp15223 = getelementptr i256, ptr %sp15160, i64 -5
  %dup915224 = load i256, ptr %sp15223, align 16
  %sp15229 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2159
  %2161 = shl i256 %dup915224, 112
  store i256 5192296858534827628530496329220096, ptr %sp15168, align 16
  %.masked = and i256 %2161, 26959946667150639794667015087019625481340285887712943950607281029120
  %2162 = or disjoint i256 %2160, %.masked
  %sp15280 = getelementptr i256, ptr %sp15160, i64 -2
  %dup815281 = load i256, ptr %sp15280, align 16
  %sp15282 = getelementptr i256, ptr %sp15160, i64 6
  store i256 %dup815281, ptr %sp15282, align 16
  %2163 = and i256 %dup815281, 4294967295
  store i256 %2163, ptr %sp15229, align 16
  %2164 = shl nuw i256 %2163, 224
  %2165 = or disjoint i256 %2162, %2164
  %swap.b15305 = load i256, ptr %sp15160, align 16
  store i256 %2165, ptr %sp15160, align 16
  store i256 %2165, ptr %sp15180, align 16
  store i256 %swap.b15305, ptr %sp15184, align 16
  %2166 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15180, i8 17)
  %.not23704 = icmp eq i8 %2166, 0
  br i1 %.not23704, label %OP4526.PUSH1, label %return, !prof !6

OP4526.PUSH1:                                     ; preds = %OP4492.PUSH32
  store i256 64, ptr %sp15180, align 16
  store i256 64, ptr %sp15184, align 16
  %ecx.memory.addr.i24709 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24710 = load ptr, ptr %ecx.memory.addr.i24709, align 8
  %ecx.memory.len.addr.i24711 = getelementptr inbounds i8, ptr %ecx.memory.i24710, i64 16
  %ecx.memory.len.i24712 = load i64, ptr %ecx.memory.len.addr.i24711, align 8, !noalias !179
  %ecx.memory.last_checkpoint.addr.i24713 = getelementptr inbounds i8, ptr %ecx.memory.i24710, i64 48
  %ecx.memory.last_checkpoint.i24714 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24713, align 8, !noalias !179
  %2167 = sub i64 %ecx.memory.len.i24712, %ecx.memory.last_checkpoint.i24714
  %2168 = icmp ult i64 %2167, 96
  br i1 %2168, label %resize.i24722, label %OP4528.MLOAD.contd, !prof !5

resize.i24722:                                    ; preds = %OP4526.PUSH1
  %2169 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !183
  %.not.i24723 = icmp eq i8 %2169, 0
  br i1 %.not.i24723, label %resize.i24722.OP4528.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24722.OP4528.MLOAD.contd_crit_edge:       ; preds = %resize.i24722
  %ecx.memory.i24726.pre = load ptr, ptr %ecx.memory.addr.i24709, align 8, !alias.scope !184
  br label %OP4528.MLOAD.contd

OP4528.MLOAD.contd:                               ; preds = %resize.i24722.OP4528.MLOAD.contd_crit_edge, %OP4526.PUSH1
  %ecx.memory.i24726 = phi ptr [ %ecx.memory.i24726.pre, %resize.i24722.OP4528.MLOAD.contd_crit_edge ], [ %ecx.memory.i24710, %OP4526.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i24716 = getelementptr inbounds i8, ptr %ecx.memory.i24710, i64 8
  %ecx.memory.buffer.ptr.shared.i24717 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24716, align 8, !noalias !179
  %ecx.memory.buffer.ptr.i24718 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24717, i64 %ecx.memory.last_checkpoint.i24714
  %slot.i24719 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24718, i64 64
  %slot.value.i24720 = load i256, ptr %slot.i24719, align 1, !noalias !179
  %2170 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24720)
  store i256 %2170, ptr %sp15184, align 16
  %dup515331 = load i256, ptr %sp15160, align 16
  %dup515335 = load i256, ptr %sp15164, align 16
  %2171 = and i256 %dup515335, %dup515331
  store i256 %2171, ptr %sp15229, align 16
  store i256 %2170, ptr %sp15282, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !184)
  %ecx.memory.len.addr.i24727 = getelementptr inbounds i8, ptr %ecx.memory.i24726, i64 16
  %ecx.memory.len.i24728 = load i64, ptr %ecx.memory.len.addr.i24727, align 8, !noalias !184
  %ecx.memory.last_checkpoint.addr.i24729 = getelementptr inbounds i8, ptr %ecx.memory.i24726, i64 48
  %ecx.memory.last_checkpoint.i24730 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24729, align 8, !noalias !184
  %2172 = sub i64 %ecx.memory.len.i24728, %ecx.memory.last_checkpoint.i24730
  %2173 = icmp ugt i256 %2170, 18446744073709551615
  %2174 = trunc i256 %2170 to i64
  %2175 = add i64 %2174, 32
  %2176 = icmp ugt i64 %2174, -33
  %2177 = or i1 %2173, %2176
  %2178 = select i1 %2177, i64 -1, i64 %2175
  %2179 = icmp ugt i64 %2178, %2172
  br i1 %2179, label %resize.i24737, label %OP4534.SWAP2, !prof !5

resize.i24737:                                    ; preds = %OP4528.MLOAD.contd
  %2180 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2178)
  %.not.i24738 = icmp eq i8 %2180, 0
  br i1 %.not.i24738, label %OP4534.SWAP2, label %return, !prof !6

OP4534.SWAP2:                                     ; preds = %OP4528.MLOAD.contd, %resize.i24737
  %ecx.memory.buffer.ptr.shared.addr.i24732 = getelementptr inbounds i8, ptr %ecx.memory.i24726, i64 8
  %ecx.memory.buffer.ptr.shared.i24733 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24732, align 8, !noalias !184
  %ecx.memory.buffer.ptr.i24734 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24733, i64 %ecx.memory.last_checkpoint.i24730
  %slot.i24735 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24734, i64 %2174
  %2181 = tail call i256 @llvm.bswap.i256(i256 %2171)
  store i256 %2181, ptr %slot.i24735, align 1, !noalias !184
  %swap.a15354 = load i256, ptr %sp15184, align 16
  %swap.b15356 = load i256, ptr %sp15168, align 16
  %swap.b15361 = load i256, ptr %sp15180, align 16
  %swap.b15366 = load i256, ptr %sp15160, align 16
  store i256 %swap.b15361, ptr %sp15160, align 16
  %2182 = udiv i256 %swap.b15366, %swap.b15356
  %swap.b15382 = load i256, ptr %sp15164, align 16
  store i256 %swap.a15354, ptr %sp15164, align 16
  %2183 = and i256 %swap.b15382, %2182
  store i256 %2183, ptr %sp15168, align 16
  %2184 = add i256 %swap.a15354, 32
  store i256 %2184, ptr %sp15180, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !187)
  %ecx.memory.i24741 = load ptr, ptr %ecx.memory.addr.i24709, align 8, !alias.scope !187
  %ecx.memory.len.addr.i24742 = getelementptr inbounds i8, ptr %ecx.memory.i24741, i64 16
  %ecx.memory.len.i24743 = load i64, ptr %ecx.memory.len.addr.i24742, align 8, !noalias !187
  %ecx.memory.last_checkpoint.addr.i24744 = getelementptr inbounds i8, ptr %ecx.memory.i24741, i64 48
  %ecx.memory.last_checkpoint.i24745 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24744, align 8, !noalias !187
  %2185 = sub i64 %ecx.memory.len.i24743, %ecx.memory.last_checkpoint.i24745
  %2186 = icmp ugt i256 %2184, 18446744073709551615
  %2187 = trunc i256 %2184 to i64
  %2188 = add i64 %2187, 32
  %2189 = icmp ugt i64 %2187, -33
  %2190 = or i1 %2186, %2189
  %2191 = select i1 %2190, i64 -1, i64 %2188
  %2192 = icmp ugt i64 %2191, %2185
  br i1 %2192, label %resize.i24752, label %OP4545.DUP2, !prof !5

resize.i24752:                                    ; preds = %OP4534.SWAP2
  %2193 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2191)
  %.not.i24753 = icmp eq i8 %2193, 0
  br i1 %.not.i24753, label %OP4545.DUP2, label %return, !prof !6

OP4545.DUP2:                                      ; preds = %OP4534.SWAP2, %resize.i24752
  %ecx.memory.buffer.ptr.shared.addr.i24747 = getelementptr inbounds i8, ptr %ecx.memory.i24741, i64 8
  %ecx.memory.buffer.ptr.shared.i24748 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24747, align 8, !noalias !187
  %ecx.memory.buffer.ptr.i24749 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24748, i64 %ecx.memory.last_checkpoint.i24745
  %slot.i24750 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24749, i64 %2187
  %2194 = tail call i256 @llvm.bswap.i256(i256 %2183)
  store i256 %2194, ptr %slot.i24750, align 1, !noalias !187
  %dup215408 = load i256, ptr %sp15160, align 16
  store i256 %dup215408, ptr %sp15168, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !190)
  %ecx.memory.i24756 = load ptr, ptr %ecx.memory.addr.i24709, align 8, !alias.scope !190, !noalias !193
  %ecx.memory.len.addr.i24757 = getelementptr inbounds i8, ptr %ecx.memory.i24756, i64 16
  %ecx.memory.len.i24758 = load i64, ptr %ecx.memory.len.addr.i24757, align 8, !noalias !195
  %ecx.memory.last_checkpoint.addr.i24759 = getelementptr inbounds i8, ptr %ecx.memory.i24756, i64 48
  %ecx.memory.last_checkpoint.i24760 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24759, align 8, !noalias !195
  %2195 = sub i64 %ecx.memory.len.i24758, %ecx.memory.last_checkpoint.i24760
  %2196 = icmp ugt i256 %dup215408, 18446744073709551615
  %2197 = trunc i256 %dup215408 to i64
  %2198 = add i64 %2197, 32
  %2199 = icmp ugt i64 %2197, -33
  %2200 = or i1 %2196, %2199
  %2201 = select i1 %2200, i64 -1, i64 %2198
  %2202 = icmp ugt i64 %2201, %2195
  br i1 %2202, label %resize.i24768, label %OP4546.MLOAD.contd, !prof !5

resize.i24768:                                    ; preds = %OP4545.DUP2
  %2203 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2201), !noalias !193
  %.not.i24769 = icmp eq i8 %2203, 0
  br i1 %.not.i24769, label %resize.i24768.OP4546.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24768.OP4546.MLOAD.contd_crit_edge:       ; preds = %resize.i24768
  %swap.b15422.pre = load i256, ptr %sp15160, align 16
  br label %OP4546.MLOAD.contd

OP4546.MLOAD.contd:                               ; preds = %resize.i24768.OP4546.MLOAD.contd_crit_edge, %OP4545.DUP2
  %swap.b15422 = phi i256 [ %swap.b15422.pre, %resize.i24768.OP4546.MLOAD.contd_crit_edge ], [ %dup215408, %OP4545.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i24762 = getelementptr inbounds i8, ptr %ecx.memory.i24756, i64 8
  %ecx.memory.buffer.ptr.shared.i24763 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24762, align 8, !noalias !195
  %ecx.memory.buffer.ptr.i24764 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24763, i64 %ecx.memory.last_checkpoint.i24760
  %slot.i24765 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24764, i64 %2197
  %slot.value.i24766 = load i256, ptr %slot.i24765, align 1, !noalias !195
  %2204 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24766)
  store i256 12779816039653418130147443943508909043197515211396019578577781669352630368977, ptr %sp15160, align 16
  %swap.b15427 = load i256, ptr %sp15164, align 16
  store i256 %swap.b15427, ptr %sp15184, align 16
  %2205 = sub i256 %swap.b15427, %2204
  store i256 %swap.b15422, ptr %sp15180, align 16
  %2206 = add i256 %swap.b15422, %2205
  store i256 %2206, ptr %sp15164, align 16
  store i256 %2204, ptr %sp15168, align 16
  %2207 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15160, i8 1)
  %.not23709 = icmp eq i8 %2207, 0
  br i1 %.not23709, label %OP4558.POP, label %return, !prof !6

OP4558.POP:                                       ; preds = %OP4546.MLOAD.contd
  %2208 = add i64 %len.addr.170, -7
  %sp15473 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2208
  %a15474 = load i256, ptr %sp15473, align 16
  br label %dynamic_jump_table.preheader

OP4565.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3704.JUMPDEST, %OP1792.JUMPDEST
  %len.addr.171 = phi i64 [ %1724, %OP3704.JUMPDEST ], [ %798, %OP1792.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %sp15477 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.171
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp15477, align 16
  %sp15481 = getelementptr i256, ptr %sp15477, i64 1
  %2209 = add i64 %len.addr.171, 3
  %sp15483 = getelementptr i256, ptr %sp15477, i64 -3
  %dup515484 = load i256, ptr %sp15483, align 16
  %sp15485 = getelementptr i256, ptr %sp15477, i64 2
  %2210 = and i256 %dup515484, 1461501637330902918203684832716283019655932542975
  store i256 %2210, ptr %sp15481, align 16
  store i256 0, ptr %sp15485, align 16
  %2211 = add i64 %len.addr.171, 4
  %sp15497 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2209
  store i256 %2210, ptr %sp15497, align 16
  %2212 = add i64 %len.addr.171, 5
  %sp15501 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2211
  store i256 0, ptr %sp15501, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !196)
  %ecx.memory.addr.i24771 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24772 = load ptr, ptr %ecx.memory.addr.i24771, align 8, !alias.scope !196
  %ecx.memory.len.addr.i24773 = getelementptr inbounds i8, ptr %ecx.memory.i24772, i64 16
  %ecx.memory.len.i24774 = load i64, ptr %ecx.memory.len.addr.i24773, align 8, !noalias !196
  %ecx.memory.last_checkpoint.addr.i24775 = getelementptr inbounds i8, ptr %ecx.memory.i24772, i64 48
  %ecx.memory.last_checkpoint.i24776 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24775, align 8, !noalias !196
  %2213 = sub i64 %ecx.memory.len.i24774, %ecx.memory.last_checkpoint.i24776
  %2214 = icmp ult i64 %2213, 32
  br i1 %2214, label %resize.i24782, label %OP4574.PUSH1, !prof !5

resize.i24782:                                    ; preds = %OP4565.JUMPDEST
  %2215 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i24783 = icmp eq i8 %2215, 0
  br i1 %.not.i24783, label %OP4574.PUSH1, label %return, !prof !6

OP4574.PUSH1:                                     ; preds = %OP4565.JUMPDEST, %resize.i24782
  %ecx.memory.buffer.ptr.shared.addr.i24778 = getelementptr inbounds i8, ptr %ecx.memory.i24772, i64 8
  %ecx.memory.buffer.ptr.shared.i24779 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24778, align 8, !noalias !196
  %ecx.memory.buffer.ptr.i24780 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24779, i64 %ecx.memory.last_checkpoint.i24776
  %2216 = tail call i256 @llvm.bswap.i256(i256 %2210)
  store i256 %2216, ptr %ecx.memory.buffer.ptr.i24780, align 1, !noalias !196
  store i256 32, ptr %sp15497, align 16
  store i256 2, ptr %sp15501, align 16
  %2217 = add i64 %len.addr.171, 6
  %sp15519 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2212
  store i256 32, ptr %sp15519, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !199)
  %ecx.memory.i24786 = load ptr, ptr %ecx.memory.addr.i24771, align 8, !alias.scope !199
  %ecx.memory.len.addr.i24787 = getelementptr inbounds i8, ptr %ecx.memory.i24786, i64 16
  %ecx.memory.len.i24788 = load i64, ptr %ecx.memory.len.addr.i24787, align 8, !noalias !199
  %ecx.memory.last_checkpoint.addr.i24789 = getelementptr inbounds i8, ptr %ecx.memory.i24786, i64 48
  %ecx.memory.last_checkpoint.i24790 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24789, align 8, !noalias !199
  %2218 = sub i64 %ecx.memory.len.i24788, %ecx.memory.last_checkpoint.i24790
  %2219 = icmp ult i64 %2218, 64
  br i1 %2219, label %resize.i24797, label %OP4579.PUSH1, !prof !5

resize.i24797:                                    ; preds = %OP4574.PUSH1
  %2220 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i24798 = icmp eq i8 %2220, 0
  br i1 %.not.i24798, label %OP4579.PUSH1, label %return, !prof !6

OP4579.PUSH1:                                     ; preds = %OP4574.PUSH1, %resize.i24797
  %ecx.memory.buffer.ptr.shared.addr.i24792 = getelementptr inbounds i8, ptr %ecx.memory.i24786, i64 8
  %ecx.memory.buffer.ptr.shared.i24793 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24792, align 8, !noalias !199
  %ecx.memory.buffer.ptr.i24794 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24793, i64 %ecx.memory.last_checkpoint.i24790
  %slot.i24795 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24794, i64 32
  store i256 904625697166532776746648320380374280103671755200316906558262375061821325312, ptr %slot.i24795, align 1, !noalias !199
  store i256 64, ptr %sp15501, align 16
  store i256 64, ptr %sp15519, align 16
  %dup415533 = load i256, ptr %sp15485, align 16
  %sp15534 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2217
  store i256 %dup415533, ptr %sp15534, align 16
  %2221 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15519)
  %.not23903 = icmp eq i8 %2221, 0
  br i1 %.not23903, label %OP4583.SWAP5, label %return, !prof !6

OP4583.SWAP5:                                     ; preds = %OP4579.PUSH1
  %swap.a15539 = load i256, ptr %sp15519, align 16
  %swap.b15541 = load i256, ptr %sp15477, align 16
  store i256 %swap.a15539, ptr %sp15477, align 16
  %sp15543 = getelementptr i256, ptr %sp15477, i64 -2
  %dup815544 = load i256, ptr %sp15543, align 16
  %2222 = and i256 %dup815544, %swap.b15541
  store i256 %2222, ptr %sp15519, align 16
  store i256 %2222, ptr %sp15534, align 16
  %dup515558 = load i256, ptr %sp15485, align 16
  %sp15559 = getelementptr i256, ptr %sp15477, i64 7
  store i256 %dup515558, ptr %sp15559, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !202)
  %ecx.memory.i24801 = load ptr, ptr %ecx.memory.addr.i24771, align 8, !alias.scope !202
  %ecx.memory.len.addr.i24802 = getelementptr inbounds i8, ptr %ecx.memory.i24801, i64 16
  %ecx.memory.len.i24803 = load i64, ptr %ecx.memory.len.addr.i24802, align 8, !noalias !202
  %ecx.memory.last_checkpoint.addr.i24804 = getelementptr inbounds i8, ptr %ecx.memory.i24801, i64 48
  %ecx.memory.last_checkpoint.i24805 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24804, align 8, !noalias !202
  %2223 = sub i64 %ecx.memory.len.i24803, %ecx.memory.last_checkpoint.i24805
  %2224 = icmp ugt i256 %dup515558, 18446744073709551615
  %2225 = trunc i256 %dup515558 to i64
  %2226 = add i64 %2225, 32
  %2227 = icmp ugt i64 %2225, -33
  %2228 = or i1 %2224, %2227
  %2229 = select i1 %2228, i64 -1, i64 %2226
  %2230 = icmp ugt i64 %2229, %2223
  br i1 %2230, label %resize.i24812, label %OP4589.SWAP5, !prof !5

resize.i24812:                                    ; preds = %OP4583.SWAP5
  %2231 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2229)
  %.not.i24813 = icmp eq i8 %2231, 0
  br i1 %.not.i24813, label %OP4589.SWAP5, label %return, !prof !6

OP4589.SWAP5:                                     ; preds = %OP4583.SWAP5, %resize.i24812
  %ecx.memory.buffer.ptr.shared.addr.i24807 = getelementptr inbounds i8, ptr %ecx.memory.i24801, i64 8
  %ecx.memory.buffer.ptr.shared.i24808 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24807, align 8, !noalias !202
  %ecx.memory.buffer.ptr.i24809 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24808, i64 %ecx.memory.last_checkpoint.i24805
  %slot.i24810 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24809, i64 %2225
  %2232 = tail call i256 @llvm.bswap.i256(i256 %2222)
  store i256 %2232, ptr %slot.i24810, align 1, !noalias !202
  %swap.a15567 = load i256, ptr %sp15519, align 16
  %swap.b15569 = load i256, ptr %sp15477, align 16
  store i256 %swap.a15567, ptr %sp15477, align 16
  store i256 %swap.b15569, ptr %sp15519, align 16
  %dup315572 = load i256, ptr %sp15497, align 16
  store i256 %dup315572, ptr %sp15534, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !205)
  %ecx.memory.i24816 = load ptr, ptr %ecx.memory.addr.i24771, align 8, !alias.scope !205
  %ecx.memory.len.addr.i24817 = getelementptr inbounds i8, ptr %ecx.memory.i24816, i64 16
  %ecx.memory.len.i24818 = load i64, ptr %ecx.memory.len.addr.i24817, align 8, !noalias !205
  %ecx.memory.last_checkpoint.addr.i24819 = getelementptr inbounds i8, ptr %ecx.memory.i24816, i64 48
  %ecx.memory.last_checkpoint.i24820 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24819, align 8, !noalias !205
  %2233 = sub i64 %ecx.memory.len.i24818, %ecx.memory.last_checkpoint.i24820
  %2234 = icmp ugt i256 %dup315572, 18446744073709551615
  %2235 = trunc i256 %dup315572 to i64
  %2236 = add i64 %2235, 32
  %2237 = icmp ugt i64 %2235, -33
  %2238 = or i1 %2234, %2237
  %2239 = select i1 %2238, i64 -1, i64 %2236
  %2240 = icmp ugt i64 %2239, %2233
  br i1 %2240, label %resize.i24827, label %OP4592.SWAP2, !prof !5

resize.i24827:                                    ; preds = %OP4589.SWAP5
  %2241 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2239)
  %.not.i24828 = icmp eq i8 %2241, 0
  br i1 %.not.i24828, label %OP4592.SWAP2, label %return, !prof !6

OP4592.SWAP2:                                     ; preds = %OP4589.SWAP5, %resize.i24827
  %ecx.memory.buffer.ptr.shared.addr.i24822 = getelementptr inbounds i8, ptr %ecx.memory.i24816, i64 8
  %ecx.memory.buffer.ptr.shared.i24823 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24822, align 8, !noalias !205
  %ecx.memory.buffer.ptr.i24824 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24823, i64 %ecx.memory.last_checkpoint.i24820
  %slot.i24825 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24824, i64 %2235
  %2242 = tail call i256 @llvm.bswap.i256(i256 %swap.b15569)
  store i256 %2242, ptr %slot.i24825, align 1, !noalias !205
  %swap.a15581 = load i256, ptr %sp15501, align 16
  %swap.b15583 = load i256, ptr %sp15485, align 16
  store i256 %swap.a15581, ptr %sp15485, align 16
  store i256 %swap.b15583, ptr %sp15519, align 16
  %2243 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15501)
  %.not23906 = icmp eq i8 %2243, 0
  br i1 %.not23906, label %OP4596.DUP6, label %return, !prof !6

OP4596.DUP6:                                      ; preds = %OP4592.SWAP2
  %sp15596 = getelementptr i256, ptr %sp15477, i64 -1
  %dup615597 = load i256, ptr %sp15596, align 16
  %swap.b15603 = load i256, ptr %sp15501, align 16
  store i256 %dup615597, ptr %sp15501, align 16
  store i256 %swap.b15603, ptr %sp15519, align 16
  %2244 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15501, i8 17)
  %.not23907 = icmp eq i8 %2244, 0
  br i1 %.not23907, label %OP4599.DUP2, label %return, !prof !6

OP4599.DUP2:                                      ; preds = %OP4596.DUP6
  %dup215608 = load i256, ptr %sp15485, align 16
  store i256 %dup215608, ptr %sp15501, align 16
  %ecx.memory.i24831 = load ptr, ptr %ecx.memory.addr.i24771, align 8
  %ecx.memory.len.addr.i24832 = getelementptr inbounds i8, ptr %ecx.memory.i24831, i64 16
  %ecx.memory.len.i24833 = load i64, ptr %ecx.memory.len.addr.i24832, align 8, !noalias !208
  %ecx.memory.last_checkpoint.addr.i24834 = getelementptr inbounds i8, ptr %ecx.memory.i24831, i64 48
  %ecx.memory.last_checkpoint.i24835 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24834, align 8, !noalias !208
  %2245 = sub i64 %ecx.memory.len.i24833, %ecx.memory.last_checkpoint.i24835
  %2246 = icmp ugt i256 %dup215608, 18446744073709551615
  %2247 = trunc i256 %dup215608 to i64
  %2248 = add i64 %2247, 32
  %2249 = icmp ugt i64 %2247, -33
  %2250 = or i1 %2246, %2249
  %2251 = select i1 %2250, i64 -1, i64 %2248
  %2252 = icmp ugt i64 %2251, %2245
  br i1 %2252, label %resize.i24843, label %OP4600.MLOAD.contd, !prof !5

resize.i24843:                                    ; preds = %OP4599.DUP2
  %2253 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2251), !noalias !212
  %.not.i24844 = icmp eq i8 %2253, 0
  br i1 %.not.i24844, label %resize.i24843.OP4600.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24843.OP4600.MLOAD.contd_crit_edge:       ; preds = %resize.i24843
  %ecx.memory.i24847.pre = load ptr, ptr %ecx.memory.addr.i24771, align 8, !alias.scope !213
  br label %OP4600.MLOAD.contd

OP4600.MLOAD.contd:                               ; preds = %resize.i24843.OP4600.MLOAD.contd_crit_edge, %OP4599.DUP2
  %ecx.memory.i24847 = phi ptr [ %ecx.memory.i24847.pre, %resize.i24843.OP4600.MLOAD.contd_crit_edge ], [ %ecx.memory.i24831, %OP4599.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i24837 = getelementptr inbounds i8, ptr %ecx.memory.i24831, i64 8
  %ecx.memory.buffer.ptr.shared.i24838 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24837, align 8, !noalias !208
  %ecx.memory.buffer.ptr.i24839 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24838, i64 %ecx.memory.last_checkpoint.i24835
  %slot.i24840 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24839, i64 %2247
  %slot.value.i24841 = load i256, ptr %slot.i24840, align 1, !noalias !208
  %2254 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24841)
  store i256 %2254, ptr %sp15501, align 16
  %dup615618 = load i256, ptr %sp15596, align 16
  store i256 %dup615618, ptr %sp15519, align 16
  store i256 %2254, ptr %sp15534, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !213)
  %ecx.memory.len.addr.i24848 = getelementptr inbounds i8, ptr %ecx.memory.i24847, i64 16
  %ecx.memory.len.i24849 = load i64, ptr %ecx.memory.len.addr.i24848, align 8, !noalias !213
  %ecx.memory.last_checkpoint.addr.i24850 = getelementptr inbounds i8, ptr %ecx.memory.i24847, i64 48
  %ecx.memory.last_checkpoint.i24851 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24850, align 8, !noalias !213
  %2255 = sub i64 %ecx.memory.len.i24849, %ecx.memory.last_checkpoint.i24851
  %2256 = icmp ugt i256 %2254, 18446744073709551615
  %2257 = trunc i256 %2254 to i64
  %2258 = add i64 %2257, 32
  %2259 = icmp ugt i64 %2257, -33
  %2260 = or i1 %2256, %2259
  %2261 = select i1 %2260, i64 -1, i64 %2258
  %2262 = icmp ugt i64 %2261, %2255
  br i1 %2262, label %resize.i24858, label %OP4604.SWAP2, !prof !5

resize.i24858:                                    ; preds = %OP4600.MLOAD.contd
  %2263 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2261)
  %.not.i24859 = icmp eq i8 %2263, 0
  br i1 %.not.i24859, label %OP4604.SWAP2, label %return, !prof !6

OP4604.SWAP2:                                     ; preds = %OP4600.MLOAD.contd, %resize.i24858
  %ecx.memory.buffer.ptr.shared.addr.i24853 = getelementptr inbounds i8, ptr %ecx.memory.i24847, i64 8
  %ecx.memory.buffer.ptr.shared.i24854 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24853, align 8, !noalias !213
  %ecx.memory.buffer.ptr.i24855 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24854, i64 %ecx.memory.last_checkpoint.i24851
  %slot.i24856 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24855, i64 %2257
  %2264 = tail call i256 @llvm.bswap.i256(i256 %dup615618)
  store i256 %2264, ptr %slot.i24856, align 1, !noalias !213
  %swap.a15631 = load i256, ptr %sp15501, align 16
  %swap.b15633 = load i256, ptr %sp15485, align 16
  store i256 %swap.a15631, ptr %sp15485, align 16
  store i256 %swap.b15633, ptr %sp15501, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !216)
  %ecx.memory.i24862 = load ptr, ptr %ecx.memory.addr.i24771, align 8, !alias.scope !216, !noalias !219
  %ecx.memory.len.addr.i24863 = getelementptr inbounds i8, ptr %ecx.memory.i24862, i64 16
  %ecx.memory.len.i24864 = load i64, ptr %ecx.memory.len.addr.i24863, align 8, !noalias !221
  %ecx.memory.last_checkpoint.addr.i24865 = getelementptr inbounds i8, ptr %ecx.memory.i24862, i64 48
  %ecx.memory.last_checkpoint.i24866 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24865, align 8, !noalias !221
  %2265 = sub i64 %ecx.memory.len.i24864, %ecx.memory.last_checkpoint.i24866
  %2266 = icmp ugt i256 %swap.b15633, 18446744073709551615
  %2267 = trunc i256 %swap.b15633 to i64
  %2268 = add i64 %2267, 32
  %2269 = icmp ugt i64 %2267, -33
  %2270 = or i1 %2266, %2269
  %2271 = select i1 %2270, i64 -1, i64 %2268
  %2272 = icmp ugt i64 %2271, %2265
  br i1 %2272, label %resize.i24874, label %OP4605.MLOAD.contd, !prof !5

resize.i24874:                                    ; preds = %OP4604.SWAP2
  %2273 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2271), !noalias !219
  %.not.i24875 = icmp eq i8 %2273, 0
  br i1 %.not.i24875, label %resize.i24874.OP4605.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i24874.OP4605.MLOAD.contd_crit_edge:       ; preds = %resize.i24874
  %swap.b15646.pre = load i256, ptr %sp15485, align 16
  br label %OP4605.MLOAD.contd

OP4605.MLOAD.contd:                               ; preds = %resize.i24874.OP4605.MLOAD.contd_crit_edge, %OP4604.SWAP2
  %swap.b15646 = phi i256 [ %swap.b15646.pre, %resize.i24874.OP4605.MLOAD.contd_crit_edge ], [ %swap.a15631, %OP4604.SWAP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i24868 = getelementptr inbounds i8, ptr %ecx.memory.i24862, i64 8
  %ecx.memory.buffer.ptr.shared.i24869 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24868, align 8, !noalias !221
  %ecx.memory.buffer.ptr.i24870 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24869, i64 %ecx.memory.last_checkpoint.i24866
  %slot.i24871 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24870, i64 %2267
  %slot.value.i24872 = load i256, ptr %slot.i24871, align 1, !noalias !221
  %2274 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24872)
  store i256 -52305948261162578668367882225327028569797882979485679342215860919519743330011, ptr %sp15485, align 16
  store i256 %swap.b15646, ptr %sp15534, align 16
  %2275 = sub i256 %swap.b15646, %2274
  %swap.b15671 = load i256, ptr %sp15497, align 16
  store i256 %swap.b15671, ptr %sp15519, align 16
  %2276 = add i256 %swap.b15671, %2275
  store i256 %2276, ptr %sp15497, align 16
  store i256 %2274, ptr %sp15501, align 16
  %2277 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15477, i8 3)
  %.not23911 = icmp eq i8 %2277, 0
  br i1 %.not23911, label %OP4616.POP, label %return, !prof !6

OP4616.POP:                                       ; preds = %OP4605.MLOAD.contd
  %2278 = add i64 %len.addr.171, -4
  %sp15689 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2278
  %a15690 = load i256, ptr %sp15689, align 16
  br label %dynamic_jump_table.preheader

OP4620.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3150.JUMPDEST, %OP1909.JUMPDEST
  %len.addr.172 = phi i64 [ %1481, %OP3150.JUMPDEST ], [ %890, %OP1909.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %2279 = add i64 %len.addr.172, 1
  %sp15693 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.172
  %sp15695 = getelementptr i256, ptr %sp15693, i64 -3
  %dup415696 = load i256, ptr %sp15695, align 16
  %sp15697 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2279
  %2280 = and i256 %dup415696, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp15693, align 16
  store i256 %2280, ptr %sp15697, align 16
  %2281 = add i64 %len.addr.172, 3
  %sp15714 = getelementptr i256, ptr %sp15693, i64 2
  store i256 0, ptr %sp15714, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !222)
  %ecx.memory.addr.i24877 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24878 = load ptr, ptr %ecx.memory.addr.i24877, align 8, !alias.scope !222
  %ecx.memory.len.addr.i24879 = getelementptr inbounds i8, ptr %ecx.memory.i24878, i64 16
  %ecx.memory.len.i24880 = load i64, ptr %ecx.memory.len.addr.i24879, align 8, !noalias !222
  %ecx.memory.last_checkpoint.addr.i24881 = getelementptr inbounds i8, ptr %ecx.memory.i24878, i64 48
  %ecx.memory.last_checkpoint.i24882 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24881, align 8, !noalias !222
  %2282 = sub i64 %ecx.memory.len.i24880, %ecx.memory.last_checkpoint.i24882
  %2283 = icmp ult i64 %2282, 32
  br i1 %2283, label %resize.i24888, label %OP4628.PUSH1, !prof !5

resize.i24888:                                    ; preds = %OP4620.JUMPDEST
  %2284 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i24889 = icmp eq i8 %2284, 0
  br i1 %.not.i24889, label %OP4628.PUSH1, label %return, !prof !6

OP4628.PUSH1:                                     ; preds = %OP4620.JUMPDEST, %resize.i24888
  %ecx.memory.buffer.ptr.shared.addr.i24884 = getelementptr inbounds i8, ptr %ecx.memory.i24878, i64 8
  %ecx.memory.buffer.ptr.shared.i24885 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24884, align 8, !noalias !222
  %ecx.memory.buffer.ptr.i24886 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24885, i64 %ecx.memory.last_checkpoint.i24882
  %2285 = tail call i256 @llvm.bswap.i256(i256 %2280)
  store i256 %2285, ptr %ecx.memory.buffer.ptr.i24886, align 1, !noalias !222
  store i256 1, ptr %sp15697, align 16
  store i256 32, ptr %sp15714, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !225)
  %ecx.memory.i24892 = load ptr, ptr %ecx.memory.addr.i24877, align 8, !alias.scope !225
  %ecx.memory.len.addr.i24893 = getelementptr inbounds i8, ptr %ecx.memory.i24892, i64 16
  %ecx.memory.len.i24894 = load i64, ptr %ecx.memory.len.addr.i24893, align 8, !noalias !225
  %ecx.memory.last_checkpoint.addr.i24895 = getelementptr inbounds i8, ptr %ecx.memory.i24892, i64 48
  %ecx.memory.last_checkpoint.i24896 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24895, align 8, !noalias !225
  %2286 = sub i64 %ecx.memory.len.i24894, %ecx.memory.last_checkpoint.i24896
  %2287 = icmp ult i64 %2286, 64
  br i1 %2287, label %resize.i24903, label %OP4631.PUSH1, !prof !5

resize.i24903:                                    ; preds = %OP4628.PUSH1
  %2288 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i24904 = icmp eq i8 %2288, 0
  br i1 %.not.i24904, label %OP4631.PUSH1, label %return, !prof !6

OP4631.PUSH1:                                     ; preds = %OP4628.PUSH1, %resize.i24903
  %ecx.memory.buffer.ptr.shared.addr.i24898 = getelementptr inbounds i8, ptr %ecx.memory.i24892, i64 8
  %ecx.memory.buffer.ptr.shared.i24899 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24898, align 8, !noalias !225
  %ecx.memory.buffer.ptr.i24900 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24899, i64 %ecx.memory.last_checkpoint.i24896
  %slot.i24901 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24900, i64 32
  store i256 452312848583266388373324160190187140051835877600158453279131187530910662656, ptr %slot.i24901, align 1, !noalias !225
  %swap.b15735 = load i256, ptr %sp15693, align 16
  store i256 64, ptr %sp15693, align 16
  store i256 %swap.b15735, ptr %sp15697, align 16
  %2289 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15693)
  %.not23952 = icmp eq i8 %2289, 0
  br i1 %.not23952, label %OP4634.SLOAD, label %return, !prof !6

OP4634.SLOAD:                                     ; preds = %OP4631.PUSH1
  %2290 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15693, i8 17)
  %.not23953 = icmp eq i8 %2290, 0
  br i1 %.not23953, label %OP4635.PUSH2, label %return, !prof !6

OP4635.PUSH2:                                     ; preds = %OP4634.SLOAD
  %swap.b15746 = load i256, ptr %sp15693, align 16
  store i256 9793, ptr %sp15693, align 16
  store i256 %swap.b15746, ptr %sp15697, align 16
  %sp15748 = getelementptr i256, ptr %sp15693, i64 -1
  %dup315749 = load i256, ptr %sp15748, align 16
  store i256 %dup315749, ptr %sp15714, align 16
  %sp15752 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2281
  %sp15754 = getelementptr i256, ptr %sp15693, i64 4
  store i256 8814, ptr %sp15754, align 16
  store i256 8814, ptr %sp15752, align 16
  br label %dynamic_jump_table.preheader

OP4642.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2291 = add i64 %len.addr.197, 1
  %sp15766 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp15766, align 16
  %2292 = add i64 %len.addr.197, 2
  %sp15770 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2291
  %sp15772 = getelementptr i256, ptr %sp15766, i64 -4
  %dup615773 = load i256, ptr %sp15772, align 16
  %sp15774 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2292
  %2293 = and i256 %dup615773, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp15770, align 16
  store i256 %2293, ptr %sp15774, align 16
  %2294 = add i64 %len.addr.197, 4
  %sp15791 = getelementptr i256, ptr %sp15766, i64 3
  store i256 0, ptr %sp15791, align 16
  %2295 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %2293, ptr %arg.ecx.addr)
  %.not23473 = icmp eq i8 %2295, 0
  br i1 %.not23473, label %OP4651.PUSH1, label %return, !prof !6

OP4651.PUSH1:                                     ; preds = %OP4642.JUMPDEST
  store i256 1, ptr %sp15774, align 16
  store i256 32, ptr %sp15791, align 16
  %2296 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 1, ptr %arg.ecx.addr)
  %.not23474 = icmp eq i8 %2296, 0
  br i1 %.not23474, label %OP4654.PUSH1, label %return, !prof !6

OP4654.PUSH1:                                     ; preds = %OP4651.PUSH1
  store i256 64, ptr %sp15774, align 16
  store i256 64, ptr %sp15791, align 16
  %dup315814 = load i256, ptr %sp15770, align 16
  %sp15815 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2294
  store i256 %dup315814, ptr %sp15815, align 16
  %2297 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15791)
  %.not23475 = icmp eq i8 %2297, 0
  br i1 %.not23475, label %OP4658.SWAP4, label %return, !prof !6

OP4658.SWAP4:                                     ; preds = %OP4654.PUSH1
  %sp15821 = getelementptr i256, ptr %sp15766, i64 -1
  %swap.b15822 = load i256, ptr %sp15821, align 16
  %swap.b15827 = load i256, ptr %sp15774, align 16
  store i256 %swap.b15822, ptr %sp15774, align 16
  store i256 %swap.b15827, ptr %sp15821, align 16
  %2298 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15774, i8 17)
  %.not23476 = icmp eq i8 %2298, 0
  br i1 %.not23476, label %OP4662.SWAP1, label %return, !prof !6

OP4662.SWAP1:                                     ; preds = %OP4658.SWAP4
  %swap.a15837 = load i256, ptr %sp15770, align 16
  %swap.b15839 = load i256, ptr %sp15766, align 16
  store i256 %swap.a15837, ptr %sp15766, align 16
  %sp15841 = getelementptr i256, ptr %sp15766, i64 -3
  %dup515842 = load i256, ptr %sp15841, align 16
  %2299 = and i256 %dup515842, %swap.b15839
  store i256 %2299, ptr %sp15770, align 16
  store i256 %swap.a15837, ptr %sp15774, align 16
  %2300 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.a15837, i256 %2299, ptr %arg.ecx.addr)
  %.not23477 = icmp eq i8 %2300, 0
  br i1 %.not23477, label %OP4667.KECCAK256, label %return, !prof !6

OP4667.KECCAK256:                                 ; preds = %OP4662.SWAP1
  %2301 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15821)
  %.not23478 = icmp eq i8 %2301, 0
  br i1 %.not23478, label %OP4668.SLOAD, label %return, !prof !6

OP4668.SLOAD:                                     ; preds = %OP4667.KECCAK256
  %2302 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15821, i8 17)
  %.not23479 = icmp eq i8 %2302, 0
  br i1 %.not23479, label %OP4669.PUSH2, label %return, !prof !6

OP4669.PUSH2:                                     ; preds = %OP4668.SLOAD
  %swap.b15869 = load i256, ptr %sp15821, align 16
  store i256 9859, ptr %sp15821, align 16
  store i256 %swap.b15869, ptr %sp15766, align 16
  %sp15871 = getelementptr i256, ptr %sp15766, i64 -2
  %dup315872 = load i256, ptr %sp15871, align 16
  store i256 %dup315872, ptr %sp15770, align 16
  store i256 10940, ptr %sp15791, align 16
  store i256 10940, ptr %sp15774, align 16
  br label %dynamic_jump_table.backedge

OP4676.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp15889 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp15889, align 16
  %sp15893 = getelementptr i256, ptr %sp15889, i64 1
  %2303 = add i64 %len.addr.197, 3
  %sp15895 = getelementptr i256, ptr %sp15889, i64 -3
  %dup515896 = load i256, ptr %sp15895, align 16
  %sp15897 = getelementptr i256, ptr %sp15889, i64 2
  %2304 = and i256 %dup515896, 1461501637330902918203684832716283019655932542975
  store i256 %2304, ptr %sp15893, align 16
  store i256 0, ptr %sp15897, align 16
  %2305 = add i64 %len.addr.197, 4
  %sp15909 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2303
  store i256 %2304, ptr %sp15909, align 16
  %2306 = add i64 %len.addr.197, 5
  %sp15913 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2305
  store i256 0, ptr %sp15913, align 16
  %2307 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %2304, ptr %arg.ecx.addr)
  %.not23465 = icmp eq i8 %2307, 0
  br i1 %.not23465, label %OP4685.PUSH1, label %return, !prof !6

OP4685.PUSH1:                                     ; preds = %OP4676.JUMPDEST
  store i256 32, ptr %sp15909, align 16
  store i256 1, ptr %sp15913, align 16
  %sp15931 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2306
  store i256 32, ptr %sp15931, align 16
  %2308 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 1, ptr %arg.ecx.addr)
  %.not23466 = icmp eq i8 %2308, 0
  br i1 %.not23466, label %OP4690.PUSH1, label %return, !prof !6

OP4690.PUSH1:                                     ; preds = %OP4685.PUSH1
  %swap.b15943 = load i256, ptr %sp15897, align 16
  store i256 64, ptr %sp15897, align 16
  store i256 64, ptr %sp15913, align 16
  store i256 %swap.b15943, ptr %sp15931, align 16
  %2309 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15913)
  %.not23467 = icmp eq i8 %2309, 0
  br i1 %.not23467, label %OP4695.SWAP5, label %return, !prof !6

OP4695.SWAP5:                                     ; preds = %OP4690.PUSH1
  %sp15958 = getelementptr i256, ptr %sp15889, i64 -1
  %swap.b15959 = load i256, ptr %sp15958, align 16
  %swap.b15964 = load i256, ptr %sp15909, align 16
  store i256 %swap.b15959, ptr %sp15909, align 16
  store i256 %swap.b15964, ptr %sp15958, align 16
  %2310 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15909, i8 17)
  %.not23468 = icmp eq i8 %2310, 0
  br i1 %.not23468, label %OP4699.DUP1, label %return, !prof !6

OP4699.DUP1:                                      ; preds = %OP4695.SWAP5
  %dup115974 = load i256, ptr %sp15897, align 16
  store i256 %dup115974, ptr %sp15909, align 16
  %mload.out.slot15979 = alloca i256, align 16
  %2311 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup115974, ptr %mload.out.slot15979, ptr %arg.ecx.addr)
  %.not23469 = icmp eq i8 %2311, 0
  br i1 %.not23469, label %OP4700.MLOAD.contd, label %return, !prof !6

OP4700.MLOAD.contd:                               ; preds = %OP4699.DUP1
  %mload.out15980 = load i256, ptr %mload.out.slot15979, align 16
  store i256 %mload.out15980, ptr %sp15909, align 16
  %sp15983 = getelementptr i256, ptr %sp15889, i64 -2
  %dup615984 = load i256, ptr %sp15983, align 16
  store i256 %dup615984, ptr %sp15913, align 16
  store i256 %mload.out15980, ptr %sp15931, align 16
  %2312 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15980, i256 %dup615984, ptr %arg.ecx.addr)
  %.not23470 = icmp eq i8 %2312, 0
  br i1 %.not23470, label %OP4704.SWAP1, label %return, !prof !6

OP4704.SWAP1:                                     ; preds = %OP4700.MLOAD.contd
  %swap.a15997 = load i256, ptr %sp15909, align 16
  %swap.b15999 = load i256, ptr %sp15897, align 16
  store i256 %swap.a15997, ptr %sp15897, align 16
  store i256 %swap.b15999, ptr %sp15909, align 16
  %mload.out.slot16003 = alloca i256, align 16
  %2313 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b15999, ptr %mload.out.slot16003, ptr %arg.ecx.addr)
  %.not23471 = icmp eq i8 %2313, 0
  br i1 %.not23471, label %OP4705.MLOAD.contd, label %return, !prof !6

OP4705.MLOAD.contd:                               ; preds = %OP4704.SWAP1
  %mload.out16004 = load i256, ptr %mload.out.slot16003, align 16
  %swap.b16010 = load i256, ptr %sp15893, align 16
  %swap.b16015 = load i256, ptr %sp15958, align 16
  store i256 %swap.b16010, ptr %sp15958, align 16
  %swap.b16020 = load i256, ptr %sp15889, align 16
  %sp16022 = getelementptr i256, ptr %sp15889, i64 -4
  %dup816023 = load i256, ptr %sp16022, align 16
  %2314 = and i256 %dup816023, %swap.b16020
  store i256 %2314, ptr %sp15889, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp15893, align 16
  %swap.b16047 = load i256, ptr %sp15897, align 16
  store i256 %swap.b16047, ptr %sp15931, align 16
  %2315 = sub i256 %swap.b16047, %mload.out16004
  store i256 %2315, ptr %sp15913, align 16
  %2316 = add i256 %2315, %swap.b16015
  store i256 %2316, ptr %sp15897, align 16
  store i256 %mload.out16004, ptr %sp15909, align 16
  %2317 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15958, i8 3)
  %.not23472 = icmp eq i8 %2317, 0
  br i1 %.not23472, label %OP4721.POP, label %return.loopexit25073.split.loop.exit25380, !prof !6

OP4721.POP:                                       ; preds = %OP4705.MLOAD.contd
  %2318 = add i64 %len.addr.197, -5
  %sp16080 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2318
  %a16081 = load i256, ptr %sp16080, align 16
  br label %dynamic_jump_table.backedge

OP4725.JUMPDEST.sink.split:                       ; preds = %OP2273.JUMPDEST, %OP2760.SWAP2
  %sp9046.sink = phi ptr [ %sp9046, %OP2760.SWAP2 ], [ %sp7493, %OP2273.JUMPDEST ]
  %len.addr.173.ph.in = phi i64 [ %len.addr.119, %OP2760.SWAP2 ], [ %len.addr.197, %OP2273.JUMPDEST ]
  %2319 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.173.ph.in
  %len.addr.173.ph = add i64 %len.addr.173.ph.in, 3
  %dup99047 = load i256, ptr %sp9046.sink, align 16
  %sp9048 = getelementptr i256, ptr %2319, i64 2
  store i256 %dup99047, ptr %sp9048, align 16
  br label %OP4725.JUMPDEST

OP4725.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4725.JUMPDEST.sink.split
  %len.addr.173 = phi i64 [ %len.addr.173.ph, %OP4725.JUMPDEST.sink.split ], [ %len.addr.197, %dynamic_jump_table ]
  %sp16084 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.173
  %sp16090 = getelementptr i256, ptr %sp16084, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp16084, i8 0, i64 64, i1 false)
  %2320 = add i64 %len.addr.173, 4
  %sp16092 = getelementptr i256, ptr %sp16084, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp16090, i8 0, i64 32, i1 false)
  store i256 5, ptr %sp16092, align 16
  %2321 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16092, i8 17)
  %.not23642 = icmp eq i8 %2321, 0
  br i1 %.not23642, label %OP4732.SWAP1, label %return, !prof !6

OP4732.SWAP1:                                     ; preds = %OP4725.JUMPDEST
  %swap.a16102 = load i256, ptr %sp16092, align 16
  %swap.b16104 = load i256, ptr %sp16090, align 16
  store i256 %swap.a16102, ptr %sp16090, align 16
  store i256 %swap.b16104, ptr %sp16092, align 16
  %2322 = add i64 %len.addr.173, 5
  %sp16106 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2320
  store i256 256, ptr %sp16106, align 16
  %2323 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16092, i8 17)
  %.not23643 = icmp eq i8 %2323, 0
  br i1 %.not23643, label %OP4735.SWAP1, label %return, !prof !6

OP4735.SWAP1:                                     ; preds = %OP4732.SWAP1
  %swap.a16111 = load i256, ptr %sp16092, align 16
  %swap.b16113 = load i256, ptr %sp16090, align 16
  %2324 = udiv i256 %swap.b16113, %swap.a16111
  %2325 = and i256 %2324, 1461501637330902918203684832716283019655932542975
  store i256 %2325, ptr %sp16090, align 16
  store i256 25067096, ptr %sp16092, align 16
  store i256 64, ptr %sp16106, align 16
  %mload.out.slot16143 = alloca i256, align 16
  %2326 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16143, ptr %arg.ecx.addr)
  %.not23644 = icmp eq i8 %2326, 0
  br i1 %.not23644, label %OP4743.MLOAD.contd, label %return, !prof !6

OP4743.MLOAD.contd:                               ; preds = %OP4735.SWAP1
  %mload.out16144 = load i256, ptr %mload.out.slot16143, align 16
  store i256 %mload.out16144, ptr %sp16106, align 16
  %dup216148 = load i256, ptr %sp16092, align 16
  %sp16149 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2322
  %2327 = add i64 %len.addr.173, 7
  %sp16151 = getelementptr i256, ptr %sp16084, i64 6
  %2328 = shl i256 %dup216148, 224
  store i256 %2328, ptr %sp16149, align 16
  store i256 %mload.out16144, ptr %sp16151, align 16
  %2329 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out16144, i256 %2328, ptr %arg.ecx.addr)
  %.not23645 = icmp eq i8 %2329, 0
  br i1 %.not23645, label %OP4751.PUSH1, label %return, !prof !6

OP4751.PUSH1:                                     ; preds = %OP4743.MLOAD.contd
  %b16181 = load i256, ptr %sp16106, align 16
  %2330 = add i256 %b16181, 4
  store i256 %2330, ptr %sp16106, align 16
  store i256 32, ptr %sp16149, align 16
  store i256 64, ptr %sp16151, align 16
  %mload.out.slot16190 = alloca i256, align 16
  %2331 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16190, ptr %arg.ecx.addr)
  %.not23646 = icmp eq i8 %2331, 0
  br i1 %.not23646, label %OP4755.MLOAD.contd, label %return, !prof !6

OP4755.MLOAD.contd:                               ; preds = %OP4751.PUSH1
  %mload.out16191 = load i256, ptr %mload.out.slot16190, align 16
  store i256 %mload.out16191, ptr %sp16151, align 16
  %sp16196 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2327
  %sp16198 = getelementptr i256, ptr %sp16084, i64 4
  %dup416199 = load i256, ptr %sp16198, align 16
  %sp16200 = getelementptr i256, ptr %sp16084, i64 8
  %2332 = sub i256 %dup416199, %mload.out16191
  store i256 %2332, ptr %sp16196, align 16
  store i256 %mload.out16191, ptr %sp16200, align 16
  %dup716213 = load i256, ptr %sp16090, align 16
  %sp16214 = getelementptr i256, ptr %sp16084, i64 9
  store i256 %dup716213, ptr %sp16214, align 16
  %2333 = add i64 %len.addr.173, 11
  %sp16218 = getelementptr i256, ptr %sp16084, i64 10
  store i256 %dup716213, ptr %sp16218, align 16
  %2334 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16218, i8 17)
  %.not23647 = icmp eq i8 %2334, 0
  br i1 %.not23647, label %OP4763.ISZERO, label %return, !prof !6

OP4763.ISZERO:                                    ; preds = %OP4755.MLOAD.contd
  %a16223 = load i256, ptr %sp16218, align 16
  %2335 = icmp eq i256 %a16223, 0
  %2336 = zext i1 %2335 to i256
  store i256 %2336, ptr %sp16218, align 16
  %sp16228 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2333
  %2337 = xor i1 %2335, true
  %2338 = zext i1 %2337 to i256
  store i256 %2338, ptr %sp16228, align 16
  br i1 %2335, label %OP4768.PUSH1, label %OP4771.JUMPDEST

OP4768.PUSH1:                                     ; preds = %OP4763.ISZERO
  store i256 0, ptr %sp16228, align 16
  %sp16241 = getelementptr i256, ptr %sp16084, i64 12
  store i256 0, ptr %sp16241, align 16
  %2339 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16228, i8 16)
  %.not23648 = icmp eq i8 %2339, 0
  %spec.select17813 = select i1 %.not23648, i8 16, i8 %2339, !prof !6
  br label %return

OP4771.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4763.ISZERO
  %len.addr.174 = phi i64 [ %2333, %OP4763.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %gas.remaining16247 = load i64, ptr %gas.remaining.addr, align 8
  %2340 = zext i64 %gas.remaining16247 to i256
  %2341 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.174
  %sp16248 = getelementptr i256, ptr %2341, i64 -1
  store i256 %2340, ptr %sp16248, align 16
  %2342 = add i64 %len.addr.174, -6
  %sp16250 = getelementptr i256, ptr %2341, i64 -6
  %2343 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp16250, i8 17, i8 3)
  %.not23649 = icmp eq i8 %2343, 0
  br i1 %.not23649, label %suspend, label %return, !prof !6

OP4775.ISZERO:                                    ; preds = %resume
  %2344 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len17730
  %sp16252 = getelementptr i256, ptr %2344, i64 -1
  %a16253 = load i256, ptr %sp16252, align 16
  %2345 = icmp eq i256 %a16253, 0
  %2346 = zext i1 %2345 to i256
  store i256 %2346, ptr %sp16252, align 16
  %2347 = xor i1 %2345, true
  %2348 = zext i1 %2347 to i256
  store i256 %2348, ptr %2344, align 16
  br i1 %2345, label %OP4780.RETURNDATASIZE, label %OP4787.JUMPDEST

OP4780.RETURNDATASIZE:                            ; preds = %OP4775.ISZERO
  %ecx.return_data.len.addr16267 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len16268 = load i64, ptr %ecx.return_data.len.addr16267, align 8
  %2349 = zext i64 %ecx.return_data.len16268 to i256
  store i256 %2349, ptr %2344, align 16
  %sp16271 = getelementptr i256, ptr %2344, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp16271, i8 0, i64 64, i1 false)
  %2350 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %2344)
  %.not = icmp eq i8 %2350, 0
  br i1 %.not, label %OP4784.RETURNDATASIZE, label %return, !prof !6

OP4784.RETURNDATASIZE:                            ; preds = %OP4780.RETURNDATASIZE
  %ecx.return_data.len16280 = load i64, ptr %ecx.return_data.len.addr16267, align 8
  %2351 = zext i64 %ecx.return_data.len16280 to i256
  store i256 %2351, ptr %2344, align 16
  store i256 0, ptr %sp16271, align 16
  %2352 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %2344, i8 16)
  %.not23370 = icmp eq i8 %2352, 0
  %spec.select17814 = select i1 %.not23370, i8 16, i8 %2352, !prof !6
  br label %return

OP4787.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4775.ISZERO
  %len.addr.175 = phi i64 [ %stack_len17730, %OP4775.ISZERO ], [ %len.addr.197, %dynamic_jump_table ]
  %2353 = add i64 %len.addr.175, -3
  %2354 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.175
  %sp16292 = getelementptr i256, ptr %2354, i64 -4
  store i256 64, ptr %sp16292, align 16
  %mload.out.slot16296 = alloca i256, align 16
  %2355 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16296, ptr %arg.ecx.addr)
  %.not23459 = icmp eq i8 %2355, 0
  br i1 %.not23459, label %OP4793.MLOAD.contd, label %return, !prof !6

OP4793.MLOAD.contd:                               ; preds = %OP4787.JUMPDEST
  %2356 = add i64 %len.addr.175, -2
  %mload.out16297 = load i256, ptr %mload.out.slot16296, align 16
  store i256 %mload.out16297, ptr %sp16292, align 16
  %ecx.return_data.len.addr16300 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len16301 = load i64, ptr %ecx.return_data.len.addr16300, align 8
  %2357 = zext i64 %ecx.return_data.len16301 to i256
  %sp16302 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2353
  store i256 %2357, ptr %sp16302, align 16
  %sp16304 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2356
  %sp16308 = getelementptr i256, ptr %2354, i64 -1
  store i256 %2357, ptr %sp16308, align 16
  %2358 = icmp ugt i64 %ecx.return_data.len16301, 31
  %2359 = zext i1 %2358 to i256
  store i256 %2359, ptr %sp16304, align 16
  br i1 %2358, label %OP4804.JUMPDEST, label %OP4801.PUSH1

OP4801.PUSH1:                                     ; preds = %OP4793.MLOAD.contd
  store i256 0, ptr %sp16304, align 16
  %sp16325 = getelementptr i256, ptr %2354, i64 -2
  store i256 0, ptr %sp16308, align 16
  %2360 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16325, i8 16)
  %.not23460 = icmp eq i8 %2360, 0
  %spec.select17815 = select i1 %.not23460, i8 16, i8 %2360, !prof !6
  br label %return

OP4804.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4793.MLOAD.contd
  %len.addr.176 = phi i64 [ %2356, %OP4793.MLOAD.contd ], [ %len.addr.197, %dynamic_jump_table ]
  %2361 = add i64 %len.addr.176, -1
  %2362 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.176
  %sp16333 = getelementptr i256, ptr %2362, i64 -2
  %a16334 = load i256, ptr %sp16333, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !228)
  %ecx.memory.addr.i24906 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i24907 = load ptr, ptr %ecx.memory.addr.i24906, align 8, !alias.scope !228, !noalias !231
  %ecx.memory.len.addr.i24908 = getelementptr inbounds i8, ptr %ecx.memory.i24907, i64 16
  %ecx.memory.len.i24909 = load i64, ptr %ecx.memory.len.addr.i24908, align 8, !noalias !233
  %ecx.memory.last_checkpoint.addr.i24910 = getelementptr inbounds i8, ptr %ecx.memory.i24907, i64 48
  %ecx.memory.last_checkpoint.i24911 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24910, align 8, !noalias !233
  %2363 = sub i64 %ecx.memory.len.i24909, %ecx.memory.last_checkpoint.i24911
  %2364 = icmp ugt i256 %a16334, 18446744073709551615
  %2365 = trunc i256 %a16334 to i64
  %2366 = add i64 %2365, 32
  %2367 = icmp ugt i64 %2365, -33
  %2368 = or i1 %2364, %2367
  %2369 = select i1 %2368, i64 -1, i64 %2366
  %2370 = icmp ugt i64 %2369, %2363
  br i1 %2370, label %resize.i24919, label %OP4806.MLOAD.contd, !prof !5

resize.i24919:                                    ; preds = %OP4804.JUMPDEST
  %2371 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2369), !noalias !231
  %.not.i24920 = icmp eq i8 %2371, 0
  br i1 %.not.i24920, label %OP4806.MLOAD.contd, label %return, !prof !6

OP4806.MLOAD.contd:                               ; preds = %OP4804.JUMPDEST, %resize.i24919
  %ecx.memory.buffer.ptr.shared.addr.i24913 = getelementptr inbounds i8, ptr %ecx.memory.i24907, i64 8
  %ecx.memory.buffer.ptr.shared.i24914 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24913, align 8, !noalias !233
  %ecx.memory.buffer.ptr.i24915 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24914, i64 %ecx.memory.last_checkpoint.i24911
  %slot.i24916 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24915, i64 %2365
  %slot.value.i24917 = load i256, ptr %slot.i24916, align 1, !noalias !233
  %2372 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i24917)
  store i256 %2372, ptr %sp16333, align 16
  %sp16339 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2361
  store i256 11, ptr %sp16339, align 16
  %sp16341 = getelementptr i256, ptr %2362, i64 -1
  %2373 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr %sp16341, i8 17)
  %.not23462 = icmp eq i8 %2373, 0
  br i1 %.not23462, label %OP4809.PUSH20, label %return, !prof !6

OP4809.PUSH20:                                    ; preds = %OP4806.MLOAD.contd
  %dup316346 = load i256, ptr %sp16333, align 16
  %sp16347 = getelementptr i256, ptr %2362, i64 1
  %2374 = and i256 %dup316346, 1461501637330902918203684832716283019655932542975
  %2375 = icmp eq i256 %2374, 0
  %2376 = zext i1 %2375 to i256
  %2377 = xor i1 %2375, true
  %2378 = zext i1 %2377 to i256
  %sp16369 = getelementptr i256, ptr %2362, i64 -4
  %swap.b16370 = load i256, ptr %sp16369, align 16
  store i256 %2378, ptr %sp16369, align 16
  store i256 %swap.b16370, ptr %sp16347, align 16
  %sp16380 = getelementptr i256, ptr %2362, i64 -3
  %swap.b16381 = load i256, ptr %sp16380, align 16
  store i256 %dup316346, ptr %sp16380, align 16
  store i256 %swap.b16381, ptr %2362, align 16
  %swap.a16385 = load i256, ptr %sp16341, align 16
  store i256 %swap.a16385, ptr %sp16333, align 16
  store i256 %2376, ptr %sp16341, align 16
  br i1 %2375, label %OP4927.JUMPDEST, label %OP4823.DUP1

OP4823.DUP1:                                      ; preds = %OP4809.PUSH20
  %2379 = icmp eq i256 %swap.a16385, 0
  %2380 = zext i1 %2379 to i256
  store i256 %2380, ptr %sp16339, align 16
  br i1 %2379, label %OP4935.JUMPDEST, label %OP4827.PUSH1

OP4827.PUSH1:                                     ; preds = %OP4823.DUP1
  store i256 0, ptr %sp16339, align 16
  store i256 10200, ptr %2362, align 16
  store i256 4695, ptr %sp16347, align 16
  %sp16409 = getelementptr i256, ptr %2362, i64 2
  %2381 = add i64 %len.addr.176, 4
  %sp16411 = getelementptr i256, ptr %2362, i64 -6
  %dup916412 = load i256, ptr %sp16411, align 16
  %sp16413 = getelementptr i256, ptr %2362, i64 3
  %sp16417 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2381
  %2382 = and i256 %dup916412, 5192296858534827628530496329220095
  store i256 %2382, ptr %sp16409, align 16
  %sp16430 = getelementptr i256, ptr %2362, i64 -5
  %dup916431 = load i256, ptr %sp16430, align 16
  %2383 = and i256 %dup916431, 5192296858534827628530496329220095
  store i256 %2383, ptr %sp16413, align 16
  %sp16442 = getelementptr i256, ptr %2362, i64 5
  store i256 8680, ptr %sp16442, align 16
  store i256 8680, ptr %sp16417, align 16
  br label %dynamic_jump_table.preheader

OP4841.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2384 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp16454 = getelementptr i256, ptr %2384, i64 -1
  %swap.a16455 = load i256, ptr %sp16454, align 16
  %sp16456 = getelementptr i256, ptr %2384, i64 -2
  store i256 %swap.a16455, ptr %sp16456, align 16
  store i256 0, ptr %sp16454, align 16
  store i256 10213, ptr %2384, align 16
  %2385 = add i64 %len.addr.197, 2
  %sp16464 = getelementptr i256, ptr %2384, i64 -3
  %dup416465 = load i256, ptr %sp16464, align 16
  %sp16466 = getelementptr i256, ptr %2384, i64 1
  store i256 %dup416465, ptr %sp16466, align 16
  br label %OP4943.JUMPDEST

OP4849.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2386 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp16470 = getelementptr i256, ptr %2386, i64 -1
  %swap.a16471 = load i256, ptr %sp16470, align 16
  %sp16472 = getelementptr i256, ptr %2386, i64 -2
  store i256 %swap.a16471, ptr %sp16472, align 16
  %2387 = add i64 %len.addr.197, -1
  %sp16478 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2387
  %sp16480 = getelementptr i256, ptr %2386, i64 -3
  %dup316481 = load i256, ptr %sp16480, align 16
  store i256 %dup316481, ptr %2386, align 16
  %2388 = icmp ule i256 %dup316481, %swap.a16471
  %2389 = zext i1 %2388 to i256
  store i256 %2389, ptr %sp16478, align 16
  br i1 %2388, label %OP4921.JUMPDEST, label %OP4858.PUSH1

OP4858.PUSH1:                                     ; preds = %OP4849.JUMPDEST
  store i256 0, ptr %sp16478, align 16
  store i256 10259, ptr %2386, align 16
  %sp16501 = getelementptr i256, ptr %2386, i64 1
  store i256 10244, ptr %sp16501, align 16
  %sp16505 = getelementptr i256, ptr %2386, i64 2
  store i256 %dup316481, ptr %sp16505, align 16
  %2390 = add i64 %len.addr.197, 4
  %sp16509 = getelementptr i256, ptr %2386, i64 3
  store i256 %swap.a16471, ptr %sp16509, align 16
  %sp16511 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2390
  %sp16513 = getelementptr i256, ptr %2386, i64 5
  store i256 8814, ptr %sp16513, align 16
  store i256 8814, ptr %sp16511, align 16
  br label %dynamic_jump_table.backedge

OP4867.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2391 = add i64 %len.addr.197, 1
  %sp16525 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 0, ptr %sp16525, align 16
  %2392 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16525, i8 17)
  %.not23458 = icmp eq i8 %2392, 0
  br i1 %.not23458, label %OP4870.SWAP1, label %return, !prof !6

OP4870.SWAP1:                                     ; preds = %OP4867.JUMPDEST
  %swap.a16530 = load i256, ptr %sp16525, align 16
  %sp16531 = getelementptr i256, ptr %sp16525, i64 -1
  %swap.b16532 = load i256, ptr %sp16531, align 16
  store i256 %swap.a16530, ptr %sp16531, align 16
  store i256 %swap.b16532, ptr %sp16525, align 16
  %sp16534 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2391
  %sp16536 = getelementptr i256, ptr %sp16525, i64 2
  store i256 8680, ptr %sp16536, align 16
  store i256 8680, ptr %sp16534, align 16
  br label %dynamic_jump_table.backedge

OP4875.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2393 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp16548 = getelementptr i256, ptr %2393, i64 -1
  %swap.a16549 = load i256, ptr %sp16548, align 16
  %sp16550 = getelementptr i256, ptr %2393, i64 -2
  store i256 %swap.a16549, ptr %sp16550, align 16
  store i256 0, ptr %sp16548, align 16
  store i256 10296, ptr %2393, align 16
  %sp16558 = getelementptr i256, ptr %2393, i64 -3
  %dup416559 = load i256, ptr %sp16558, align 16
  %sp16560 = getelementptr i256, ptr %2393, i64 1
  store i256 %dup416559, ptr %sp16560, align 16
  %sp16562 = getelementptr i256, ptr %2393, i64 2
  store i256 10284, ptr %sp16562, align 16
  %sp16564 = getelementptr i256, ptr %2393, i64 -4
  %dup716565 = load i256, ptr %sp16564, align 16
  %sp16566 = getelementptr i256, ptr %2393, i64 3
  store i256 %dup716565, ptr %sp16566, align 16
  %2394 = add i64 %len.addr.197, 5
  %sp16568 = getelementptr i256, ptr %2393, i64 4
  store i256 5, ptr %sp16568, align 16
  %sp16570 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2394
  %sp16572 = getelementptr i256, ptr %2393, i64 6
  store i256 8680, ptr %sp16572, align 16
  store i256 8680, ptr %sp16570, align 16
  br label %dynamic_jump_table.backedge

OP4888.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2395 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp16584 = getelementptr i256, ptr %2395, i64 -1
  %swap.a16585 = load i256, ptr %sp16584, align 16
  %sp16586 = getelementptr i256, ptr %2395, i64 -2
  %swap.b16587 = load i256, ptr %sp16586, align 16
  store i256 %swap.a16585, ptr %sp16586, align 16
  store i256 %swap.b16587, ptr %sp16584, align 16
  %sp16591 = getelementptr i256, ptr %2395, i64 1
  store i256 10940, ptr %sp16591, align 16
  store i256 10940, ptr %2395, align 16
  br label %dynamic_jump_table.backedge

OP4894.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2396 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp16603 = getelementptr i256, ptr %2396, i64 -1
  %swap.a16604 = load i256, ptr %sp16603, align 16
  %sp16605 = getelementptr i256, ptr %2396, i64 -2
  store i256 %swap.a16604, ptr %sp16605, align 16
  store i256 0, ptr %sp16603, align 16
  store i256 %swap.a16604, ptr %2396, align 16
  %2397 = add i64 %len.addr.197, 2
  %sp16615 = getelementptr i256, ptr %2396, i64 -3
  %dup416616 = load i256, ptr %sp16615, align 16
  %sp16617 = getelementptr i256, ptr %2396, i64 1
  store i256 %dup416616, ptr %sp16617, align 16
  %sp16621 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2397
  store i256 %swap.a16604, ptr %sp16621, align 16
  %.not23457 = icmp eq i256 %swap.a16604, 0
  br i1 %.not23457, label %return, label %OP4904.JUMPDEST

OP4904.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4894.JUMPDEST
  %len.addr.177 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2397, %OP4894.JUMPDEST ]
  %2398 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.177
  %sp16628 = getelementptr i256, ptr %2398, i64 -1
  %a16629 = load i256, ptr %sp16628, align 16
  %sp16630 = getelementptr i256, ptr %2398, i64 -2
  %b16631 = load i256, ptr %sp16630, align 16
  %2399 = udiv i256 %a16629, %b16631
  %sp16636 = getelementptr i256, ptr %2398, i64 -3
  store i256 %2399, ptr %sp16636, align 16
  %2400 = add i64 %len.addr.177, -2
  %sp16642 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2400
  %2401 = icmp ugt i256 %b16631, %a16629
  %2402 = zext i1 %2401 to i256
  store i256 %2402, ptr %sp16642, align 16
  br i1 %2401, label %OP4917.JUMPDEST, label %OP4912.PUSH2

OP4912.PUSH2:                                     ; preds = %OP4904.JUMPDEST
  store i256 10328, ptr %sp16642, align 16
  %sp16653 = getelementptr i256, ptr %2398, i64 -9
  %dup816654 = load i256, ptr %sp16653, align 16
  store i256 %dup816654, ptr %sp16628, align 16
  %2403 = add i64 %len.addr.177, 1
  store i256 %2399, ptr %2398, align 16
  br label %OP5005.JUMPDEST

OP4917.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4904.JUMPDEST
  %len.addr.178 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2400, %OP4904.JUMPDEST ]
  %2404 = add i64 %len.addr.178, -3
  br label %OP4921.JUMPDEST, !annotation !7

OP4921.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4849.JUMPDEST, %OP4917.JUMPDEST
  %len.addr.179 = phi i64 [ %2404, %OP4917.JUMPDEST ], [ %2387, %OP4849.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %2405 = add i64 %len.addr.179, -2
  br label %OP4935.JUMPDEST, !annotation !7

OP4927.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4809.PUSH20
  %len.addr.181 = phi i64 [ %2361, %OP4809.PUSH20 ], [ %len.addr.197, %dynamic_jump_table ]
  %2406 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.181
  %sp16672 = getelementptr i256, ptr %2406, i64 -1
  %dup116673 = load i256, ptr %sp16672, align 16
  %2407 = icmp eq i256 %dup116673, 0
  %2408 = zext i1 %2407 to i256
  store i256 %2408, ptr %2406, align 16
  br i1 %2407, label %OP4935.JUMPDEST, label %OP4932.PUSH1

OP4932.PUSH1:                                     ; preds = %OP4927.JUMPDEST
  store i256 0, ptr %2406, align 16
  %sp16685 = getelementptr i256, ptr %2406, i64 1
  store i256 11, ptr %sp16685, align 16
  %2409 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %2406, i8 17)
  %.not23464 = icmp eq i8 %2409, 0
  br i1 %.not23464, label %OP4935.JUMPDEST, label %return, !prof !6

OP4935.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP4823.DUP1, %OP4921.JUMPDEST, %OP4932.PUSH1, %OP4927.JUMPDEST
  %len.addr.182 = phi i64 [ %len.addr.181, %OP4927.JUMPDEST ], [ %len.addr.181, %OP4932.PUSH1 ], [ %2405, %OP4921.JUMPDEST ], [ %2361, %OP4823.DUP1 ], [ %len.addr.197, %dynamic_jump_table ], [ %len.addr.197, %dynamic_jump_table ]
  %2410 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.182
  %sp16692 = getelementptr i256, ptr %2410, i64 -3
  %swap.a16693 = load i256, ptr %sp16692, align 16
  %sp16694 = getelementptr i256, ptr %2410, i64 -6
  %swap.b16695 = load i256, ptr %sp16694, align 16
  store i256 %swap.a16693, ptr %sp16694, align 16
  %sp16699 = getelementptr i256, ptr %2410, i64 -5
  %swap.b16700 = load i256, ptr %sp16699, align 16
  store i256 %swap.b16695, ptr %sp16699, align 16
  store i256 %swap.b16700, ptr %sp16692, align 16
  %2411 = add i64 %len.addr.182, -5
  br label %dynamic_jump_table.preheader

OP4943.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP4841.JUMPDEST
  %len.addr.183 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2385, %OP4841.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ]
  %2412 = add i64 %len.addr.183, 1
  %sp16708 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.183
  store i256 0, ptr %sp16708, align 16
  %2413 = add i64 %len.addr.183, 2
  %sp16710 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2412
  %sp16712 = getelementptr i256, ptr %sp16708, i64 -1
  %dup316713 = load i256, ptr %sp16712, align 16
  %sp16714 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2413
  store i256 %dup316713, ptr %sp16714, align 16
  %2414 = icmp ult i256 %dup316713, 4
  %2415 = zext i1 %2414 to i256
  store i256 %2415, ptr %sp16710, align 16
  br i1 %2414, label %OP4993.JUMPDEST, label %OP4951.POP

OP4951.POP:                                       ; preds = %OP4943.JUMPDEST
  store i256 %dup316713, ptr %sp16708, align 16
  %sp16740 = getelementptr i256, ptr %sp16708, i64 3
  store i256 %dup316713, ptr %sp16740, align 16
  %2416 = lshr i256 %dup316713, 1
  store i256 %2416, ptr %sp16714, align 16
  %2417 = add nuw i256 %2416, 1
  store i256 %2417, ptr %sp16710, align 16
  br label %OP4958.JUMPDEST, !annotation !7

OP4958.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4983.JUMPDEST, %OP4951.POP
  %len.addr.184 = phi i64 [ %2428, %OP4983.JUMPDEST ], [ %len.addr.197, %dynamic_jump_table ], [ %2413, %OP4951.POP ]
  %2418 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.184
  %sp16755 = getelementptr i256, ptr %2418, i64 -2
  %dup216756 = load i256, ptr %sp16755, align 16
  %sp16759 = getelementptr i256, ptr %2418, i64 -1
  %dup216760 = load i256, ptr %sp16759, align 16
  %sp16761 = getelementptr i256, ptr %2418, i64 1
  store i256 %dup216760, ptr %sp16761, align 16
  %2419 = icmp uge i256 %dup216760, %dup216756
  %2420 = zext i1 %2419 to i256
  store i256 %2420, ptr %2418, align 16
  br i1 %2419, label %OP4989.JUMPDEST, label %OP4965.DUP1

OP4965.DUP1:                                      ; preds = %OP4958.JUMPDEST
  store i256 %dup216760, ptr %sp16755, align 16
  store i256 2, ptr %2418, align 16
  store i256 %dup216760, ptr %sp16761, align 16
  %sp16794 = getelementptr i256, ptr %2418, i64 2
  store i256 %dup216760, ptr %sp16794, align 16
  %2421 = add i64 %len.addr.184, 4
  %sp16796 = getelementptr i256, ptr %2418, i64 -3
  %dup616797 = load i256, ptr %sp16796, align 16
  %sp16798 = getelementptr i256, ptr %2418, i64 3
  store i256 %dup616797, ptr %sp16798, align 16
  %sp16802 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2421
  store i256 %dup216760, ptr %sp16802, align 16
  %.not23638 = icmp eq i256 %dup216760, 0
  br i1 %.not23638, label %return, label %OP4976.JUMPDEST

OP4976.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4965.DUP1
  %len.addr.185 = phi i64 [ %2421, %OP4965.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %2422 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.185
  %sp16809 = getelementptr i256, ptr %2422, i64 -1
  %a16810 = load i256, ptr %sp16809, align 16
  %sp16811 = getelementptr i256, ptr %2422, i64 -2
  %b16812 = load i256, ptr %sp16811, align 16
  %2423 = udiv i256 %a16810, %b16812
  %2424 = add i64 %len.addr.185, -2
  %sp16815 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2424
  %sp16817 = getelementptr i256, ptr %2422, i64 -3
  %b16818 = load i256, ptr %sp16817, align 16
  %2425 = add i256 %b16818, %2423
  store i256 %2425, ptr %sp16817, align 16
  %sp16821 = getelementptr i256, ptr %2422, i64 -4
  %dup216822 = load i256, ptr %sp16821, align 16
  store i256 %dup216822, ptr %sp16815, align 16
  %.not23639 = icmp eq i256 %dup216822, 0
  br i1 %.not23639, label %return, label %OP4983.JUMPDEST

OP4983.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4976.JUMPDEST
  %len.addr.186 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2424, %OP4976.JUMPDEST ]
  %2426 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.186
  %sp16830 = getelementptr i256, ptr %2426, i64 -1
  %a16831 = load i256, ptr %sp16830, align 16
  %sp16832 = getelementptr i256, ptr %2426, i64 -2
  %b16833 = load i256, ptr %sp16832, align 16
  %2427 = udiv i256 %a16831, %b16833
  %sp16838 = getelementptr i256, ptr %2426, i64 -3
  %swap.b16839 = load i256, ptr %sp16838, align 16
  store i256 %2427, ptr %sp16838, align 16
  store i256 %swap.b16839, ptr %sp16832, align 16
  %2428 = add i64 %len.addr.186, -2
  br label %OP4958.JUMPDEST

OP4989.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4958.JUMPDEST
  %len.addr.187 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %len.addr.184, %OP4958.JUMPDEST ]
  %2429 = add i64 %len.addr.187, -1
  br label %OP5000.JUMPDEST

OP4993.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4943.JUMPDEST
  %len.addr.188 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2412, %OP4943.JUMPDEST ]
  %2430 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.188
  %sp16847 = getelementptr i256, ptr %2430, i64 -2
  %dup216848 = load i256, ptr %sp16847, align 16
  %2431 = icmp eq i256 %dup216848, 0
  %2432 = zext i1 %2431 to i256
  store i256 %2432, ptr %2430, align 16
  br i1 %2431, label %OP5000.JUMPDEST, label %OP4998.POP

OP4998.POP:                                       ; preds = %OP4993.JUMPDEST
  %sp16859 = getelementptr i256, ptr %2430, i64 -1
  store i256 1, ptr %sp16859, align 16
  br label %OP5000.JUMPDEST, !annotation !7

OP5000.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4998.POP, %OP4993.JUMPDEST, %OP4989.JUMPDEST
  %len.addr.189 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %len.addr.188, %OP4993.JUMPDEST ], [ %len.addr.188, %OP4998.POP ], [ %2429, %OP4989.JUMPDEST ]
  %2433 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.189
  %sp16862 = getelementptr i256, ptr %2433, i64 -1
  %swap.a16863 = load i256, ptr %sp16862, align 16
  %sp16864 = getelementptr i256, ptr %2433, i64 -3
  %swap.b16865 = load i256, ptr %sp16864, align 16
  store i256 %swap.a16863, ptr %sp16864, align 16
  %sp16869 = getelementptr i256, ptr %2433, i64 -2
  %swap.b16870 = load i256, ptr %sp16869, align 16
  store i256 %swap.b16865, ptr %sp16869, align 16
  store i256 %swap.b16870, ptr %sp16862, align 16
  %2434 = add i64 %len.addr.189, -2
  br label %dynamic_jump_table.backedge

OP5005.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4912.PUSH2, %OP2400.JUMPDEST, %OP2304.JUMPDEST
  %len.addr.190 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2403, %OP4912.PUSH2 ], [ %1093, %OP2400.JUMPDEST ], [ %1063, %OP2304.JUMPDEST ]
  %2435 = add i64 %len.addr.190, 1
  %sp16877 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.190
  store i256 0, ptr %sp16877, align 16
  %2436 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16877, i8 17)
  %.not23637 = icmp eq i8 %2436, 0
  br i1 %.not23637, label %OP5008.PUSH2, label %return, !prof !6

OP5008.PUSH2:                                     ; preds = %OP5005.JUMPDEST
  %sp16881 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2435
  %swap.b16886 = load i256, ptr %sp16877, align 16
  store i256 10461, ptr %sp16877, align 16
  store i256 %swap.b16886, ptr %sp16881, align 16
  %2437 = add i64 %len.addr.190, 3
  %sp16888 = getelementptr i256, ptr %sp16877, i64 -1
  %dup316889 = load i256, ptr %sp16888, align 16
  %sp16890 = getelementptr i256, ptr %sp16877, i64 2
  store i256 %dup316889, ptr %sp16890, align 16
  %sp16892 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2437
  %sp16894 = getelementptr i256, ptr %sp16877, i64 4
  store i256 10940, ptr %sp16894, align 16
  store i256 10940, ptr %sp16892, align 16
  br label %dynamic_jump_table.backedge

OP5015.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp16906 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp16910 = getelementptr i256, ptr %sp16906, i64 -1
  %swap.b16911 = load i256, ptr %sp16910, align 16
  store i256 0, ptr %sp16910, align 16
  store i256 %swap.b16911, ptr %sp16906, align 16
  %2438 = add i64 %len.addr.197, 2
  %sp16915 = getelementptr i256, ptr %sp16906, i64 1
  store i256 0, ptr %sp16915, align 16
  %2439 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16906, i8 17)
  %.not23452 = icmp eq i8 %2439, 0
  br i1 %.not23452, label %OP5020.PUSH20, label %return, !prof !6

OP5020.PUSH20:                                    ; preds = %OP5015.JUMPDEST
  %sp16921 = getelementptr i256, ptr %sp16906, i64 -3
  %dup416922 = load i256, ptr %sp16921, align 16
  %2440 = and i256 %dup416922, 1461501637330902918203684832716283019655932542975
  store i256 %2440, ptr %sp16906, align 16
  %dup216932 = load i256, ptr %sp16910, align 16
  store i256 %dup216932, ptr %sp16915, align 16
  %2441 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup216932, i256 %2440, ptr %arg.ecx.addr)
  %.not23453 = icmp eq i8 %2441, 0
  br i1 %.not23453, label %OP5025.PUSH1, label %return, !prof !6

OP5025.PUSH1:                                     ; preds = %OP5020.PUSH20
  store i256 1, ptr %sp16906, align 16
  store i256 32, ptr %sp16915, align 16
  %2442 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 1, ptr %arg.ecx.addr)
  %.not23454 = icmp eq i8 %2442, 0
  br i1 %.not23454, label %OP5028.PUSH1, label %return, !prof !6

OP5028.PUSH1:                                     ; preds = %OP5025.PUSH1
  %swap.b16954 = load i256, ptr %sp16910, align 16
  store i256 64, ptr %sp16910, align 16
  store i256 %swap.b16954, ptr %sp16906, align 16
  %2443 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16910)
  %.not23455 = icmp eq i8 %2443, 0
  br i1 %.not23455, label %OP5031.SLOAD, label %return, !prof !6

OP5031.SLOAD:                                     ; preds = %OP5028.PUSH1
  %2444 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16910, i8 17)
  %.not23456 = icmp eq i8 %2444, 0
  br i1 %.not23456, label %OP5032.PUSH2, label %return, !prof !6

OP5032.PUSH2:                                     ; preds = %OP5031.SLOAD
  %swap.b16965 = load i256, ptr %sp16910, align 16
  store i256 10517, ptr %sp16910, align 16
  store i256 %swap.b16965, ptr %sp16906, align 16
  %sp16967 = getelementptr i256, ptr %sp16906, i64 -2
  %dup316968 = load i256, ptr %sp16967, align 16
  store i256 %dup316968, ptr %sp16915, align 16
  %sp16971 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2438
  %sp16973 = getelementptr i256, ptr %sp16906, i64 3
  store i256 10940, ptr %sp16973, align 16
  store i256 10940, ptr %sp16971, align 16
  br label %dynamic_jump_table.backedge

OP5039.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp16985 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %2445 = add i64 %len.addr.197, 2
  %sp16987 = getelementptr i256, ptr %sp16985, i64 -3
  %dup416988 = load i256, ptr %sp16987, align 16
  %sp16989 = getelementptr i256, ptr %sp16985, i64 1
  %2446 = and i256 %dup416988, 1461501637330902918203684832716283019655932542975
  store i256 %2446, ptr %sp16985, align 16
  store i256 0, ptr %sp16989, align 16
  %2447 = add i64 %len.addr.197, 3
  %sp17001 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2445
  store i256 %2446, ptr %sp17001, align 16
  %2448 = add i64 %len.addr.197, 4
  %sp17005 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2447
  store i256 0, ptr %sp17005, align 16
  %2449 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %2446, ptr %arg.ecx.addr)
  %.not23444 = icmp eq i8 %2449, 0
  br i1 %.not23444, label %OP5047.PUSH1, label %return, !prof !6

OP5047.PUSH1:                                     ; preds = %OP5039.JUMPDEST
  store i256 32, ptr %sp17001, align 16
  store i256 1, ptr %sp17005, align 16
  %sp17023 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2448
  store i256 32, ptr %sp17023, align 16
  %2450 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 1, ptr %arg.ecx.addr)
  %.not23445 = icmp eq i8 %2450, 0
  br i1 %.not23445, label %OP5052.PUSH1, label %return, !prof !6

OP5052.PUSH1:                                     ; preds = %OP5047.PUSH1
  %2451 = add i64 %len.addr.197, 5
  store i256 64, ptr %sp17005, align 16
  store i256 64, ptr %sp17023, align 16
  %dup417037 = load i256, ptr %sp16989, align 16
  %sp17038 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2451
  store i256 %dup417037, ptr %sp17038, align 16
  %2452 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17023)
  %.not23446 = icmp eq i8 %2452, 0
  br i1 %.not23446, label %OP5056.SWAP5, label %return, !prof !6

OP5056.SWAP5:                                     ; preds = %OP5052.PUSH1
  %sp17044 = getelementptr i256, ptr %sp16985, i64 -1
  %swap.b17045 = load i256, ptr %sp17044, align 16
  %swap.b17050 = load i256, ptr %sp17005, align 16
  store i256 %swap.b17045, ptr %sp17005, align 16
  store i256 %swap.b17050, ptr %sp17044, align 16
  %2453 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17005, i8 17)
  %.not23447 = icmp eq i8 %2453, 0
  br i1 %.not23447, label %OP5060.DUP4, label %return, !prof !6

OP5060.DUP4:                                      ; preds = %OP5056.SWAP5
  %dup417060 = load i256, ptr %sp17044, align 16
  store i256 %dup417060, ptr %sp17005, align 16
  %mload.out.slot17065 = alloca i256, align 16
  %2454 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup417060, ptr %mload.out.slot17065, ptr %arg.ecx.addr)
  %.not23448 = icmp eq i8 %2454, 0
  br i1 %.not23448, label %OP5061.MLOAD.contd, label %return, !prof !6

OP5061.MLOAD.contd:                               ; preds = %OP5060.DUP4
  %mload.out17066 = load i256, ptr %mload.out.slot17065, align 16
  store i256 %mload.out17066, ptr %sp17005, align 16
  %sp17069 = getelementptr i256, ptr %sp16985, i64 -2
  %dup617070 = load i256, ptr %sp17069, align 16
  store i256 %dup617070, ptr %sp17023, align 16
  store i256 %mload.out17066, ptr %sp17038, align 16
  %2455 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out17066, i256 %dup617070, ptr %arg.ecx.addr)
  %.not23449 = icmp eq i8 %2455, 0
  br i1 %.not23449, label %OP5065.SWAP4, label %return, !prof !6

OP5065.SWAP4:                                     ; preds = %OP5061.MLOAD.contd
  %swap.a17083 = load i256, ptr %sp17005, align 16
  %swap.b17085 = load i256, ptr %sp17044, align 16
  store i256 %swap.a17083, ptr %sp17044, align 16
  store i256 %swap.b17085, ptr %sp17005, align 16
  %mload.out.slot17089 = alloca i256, align 16
  %2456 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b17085, ptr %mload.out.slot17089, ptr %arg.ecx.addr)
  %.not23450 = icmp eq i8 %2456, 0
  br i1 %.not23450, label %OP5066.MLOAD.contd, label %return, !prof !6

OP5066.MLOAD.contd:                               ; preds = %OP5065.SWAP4
  %mload.out17090 = load i256, ptr %mload.out.slot17089, align 16
  %swap.b17096 = load i256, ptr %sp16985, align 16
  %swap.b17101 = load i256, ptr %sp17044, align 16
  store i256 %swap.b17096, ptr %sp17044, align 16
  %swap.b17106 = load i256, ptr %sp16989, align 16
  store i256 %swap.b17106, ptr %sp16985, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp16989, align 16
  store i256 %swap.b17101, ptr %sp17038, align 16
  %2457 = sub i256 %swap.b17101, %mload.out17090
  %swap.b17143 = load i256, ptr %sp17001, align 16
  store i256 %swap.b17143, ptr %sp17023, align 16
  %2458 = add i256 %swap.b17143, %2457
  store i256 %2458, ptr %sp17001, align 16
  store i256 %mload.out17090, ptr %sp17005, align 16
  %2459 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17044, i8 3)
  %.not23451 = icmp eq i8 %2459, 0
  br i1 %.not23451, label %OP5081.POP, label %return.loopexit25073.split.loop.exit25425, !prof !6

OP5081.POP:                                       ; preds = %OP5066.MLOAD.contd
  %2460 = add i64 %len.addr.197, -4
  %sp17160 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2460
  %a17161 = load i256, ptr %sp17160, align 16
  br label %dynamic_jump_table.backedge

OP5084.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2349.JUMPDEST
  %len.addr.191 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %1072, %OP2349.JUMPDEST ]
  %2461 = add i64 %len.addr.191, 1
  %sp17164 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.191
  store i256 0, ptr %sp17164, align 16
  %2462 = add i64 %len.addr.191, 2
  %sp17166 = getelementptr i256, ptr %sp17164, i64 -1
  %dup217167 = load i256, ptr %sp17166, align 16
  %sp17168 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2461
  %sp17170 = getelementptr i256, ptr %sp17164, i64 -2
  %dup417171 = load i256, ptr %sp17170, align 16
  %sp17172 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2462
  store i256 %dup417171, ptr %sp17172, align 16
  %2463 = icmp ult i256 %dup417171, %dup217167
  %2464 = zext i1 %2463 to i256
  store i256 %2464, ptr %sp17168, align 16
  br i1 %2463, label %OP5094.JUMPDEST, label %OP5091.DUP2

OP5091.DUP2:                                      ; preds = %OP5084.JUMPDEST
  store i256 %dup217167, ptr %sp17168, align 16
  br label %OP5096.JUMPDEST

OP5094.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5084.JUMPDEST
  %len.addr.192 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2461, %OP5084.JUMPDEST ]
  %2465 = add i64 %len.addr.192, 1
  %2466 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.192
  %sp17189 = getelementptr i256, ptr %2466, i64 -3
  %dup317190 = load i256, ptr %sp17189, align 16
  store i256 %dup317190, ptr %2466, align 16
  br label %OP5096.JUMPDEST, !annotation !7

OP5096.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5094.JUMPDEST, %OP5091.DUP2
  %len.addr.193 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2465, %OP5094.JUMPDEST ], [ %2462, %OP5091.DUP2 ]
  %2467 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.193
  %sp17194 = getelementptr i256, ptr %2467, i64 -1
  %swap.a17195 = load i256, ptr %sp17194, align 16
  %sp17196 = getelementptr i256, ptr %2467, i64 -5
  %swap.b17197 = load i256, ptr %sp17196, align 16
  store i256 %swap.a17195, ptr %sp17196, align 16
  %sp17201 = getelementptr i256, ptr %2467, i64 -4
  %swap.b17202 = load i256, ptr %sp17201, align 16
  store i256 %swap.b17197, ptr %sp17201, align 16
  store i256 %swap.b17202, ptr %sp17194, align 16
  %2468 = add i64 %len.addr.193, -4
  br label %dynamic_jump_table.backedge

OP5103.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2860.JUMPDEST
  %len.addr.194 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %1318, %OP2860.JUMPDEST ]
  %2469 = add i64 %len.addr.194, 1
  %sp17211 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.194
  %sp17213 = getelementptr i256, ptr %sp17211, i64 -2
  %dup317214 = load i256, ptr %sp17213, align 16
  %sp17215 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2469
  %2470 = and i256 %dup317214, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp17211, align 16
  store i256 %2470, ptr %sp17215, align 16
  %2471 = add i64 %len.addr.194, 3
  %sp17232 = getelementptr i256, ptr %sp17211, i64 2
  store i256 0, ptr %sp17232, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !234)
  %ecx.memory.i24923 = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !234
  %ecx.memory.len.addr.i24924 = getelementptr inbounds i8, ptr %ecx.memory.i24923, i64 16
  %ecx.memory.len.i24925 = load i64, ptr %ecx.memory.len.addr.i24924, align 8, !noalias !234
  %ecx.memory.last_checkpoint.addr.i24926 = getelementptr inbounds i8, ptr %ecx.memory.i24923, i64 48
  %ecx.memory.last_checkpoint.i24927 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24926, align 8, !noalias !234
  %2472 = sub i64 %ecx.memory.len.i24925, %ecx.memory.last_checkpoint.i24927
  %2473 = icmp ult i64 %2472, 32
  br i1 %2473, label %resize.i24933, label %OP5111.PUSH1, !prof !5

resize.i24933:                                    ; preds = %OP5103.JUMPDEST
  %2474 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i24934 = icmp eq i8 %2474, 0
  br i1 %.not.i24934, label %OP5111.PUSH1, label %return, !prof !6

OP5111.PUSH1:                                     ; preds = %OP5103.JUMPDEST, %resize.i24933
  %ecx.memory.buffer.ptr.shared.addr.i24929 = getelementptr inbounds i8, ptr %ecx.memory.i24923, i64 8
  %ecx.memory.buffer.ptr.shared.i24930 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24929, align 8, !noalias !234
  %ecx.memory.buffer.ptr.i24931 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24930, i64 %ecx.memory.last_checkpoint.i24927
  %2475 = tail call i256 @llvm.bswap.i256(i256 %2470)
  store i256 %2475, ptr %ecx.memory.buffer.ptr.i24931, align 1, !noalias !234
  store i256 1, ptr %sp17215, align 16
  store i256 32, ptr %sp17232, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !237)
  %ecx.memory.i24937 = load ptr, ptr %ecx.memory.addr.i24415, align 8, !alias.scope !237
  %ecx.memory.len.addr.i24938 = getelementptr inbounds i8, ptr %ecx.memory.i24937, i64 16
  %ecx.memory.len.i24939 = load i64, ptr %ecx.memory.len.addr.i24938, align 8, !noalias !237
  %ecx.memory.last_checkpoint.addr.i24940 = getelementptr inbounds i8, ptr %ecx.memory.i24937, i64 48
  %ecx.memory.last_checkpoint.i24941 = load i64, ptr %ecx.memory.last_checkpoint.addr.i24940, align 8, !noalias !237
  %2476 = sub i64 %ecx.memory.len.i24939, %ecx.memory.last_checkpoint.i24941
  %2477 = icmp ult i64 %2476, 64
  br i1 %2477, label %resize.i24948, label %OP5114.PUSH1, !prof !5

resize.i24948:                                    ; preds = %OP5111.PUSH1
  %2478 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i24949 = icmp eq i8 %2478, 0
  br i1 %.not.i24949, label %OP5114.PUSH1, label %return, !prof !6

OP5114.PUSH1:                                     ; preds = %OP5111.PUSH1, %resize.i24948
  %ecx.memory.buffer.ptr.shared.addr.i24943 = getelementptr inbounds i8, ptr %ecx.memory.i24937, i64 8
  %ecx.memory.buffer.ptr.shared.i24944 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i24943, align 8, !noalias !237
  %ecx.memory.buffer.ptr.i24945 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i24944, i64 %ecx.memory.last_checkpoint.i24941
  %slot.i24946 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i24945, i64 32
  store i256 452312848583266388373324160190187140051835877600158453279131187530910662656, ptr %slot.i24946, align 1, !noalias !237
  %swap.b17253 = load i256, ptr %sp17211, align 16
  store i256 64, ptr %sp17211, align 16
  store i256 %swap.b17253, ptr %sp17215, align 16
  %2479 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17211)
  %.not23590 = icmp eq i8 %2479, 0
  br i1 %.not23590, label %OP5117.SLOAD, label %return, !prof !6

OP5117.SLOAD:                                     ; preds = %OP5114.PUSH1
  %2480 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17211, i8 17)
  %.not23591 = icmp eq i8 %2480, 0
  br i1 %.not23591, label %OP5118.PUSH2, label %return, !prof !6

OP5118.PUSH2:                                     ; preds = %OP5117.SLOAD
  %swap.b17264 = load i256, ptr %sp17211, align 16
  store i256 10696, ptr %sp17211, align 16
  store i256 %swap.b17264, ptr %sp17215, align 16
  %sp17266 = getelementptr i256, ptr %sp17211, i64 -1
  %dup317267 = load i256, ptr %sp17266, align 16
  store i256 %dup317267, ptr %sp17232, align 16
  %sp17270 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2471
  %sp17272 = getelementptr i256, ptr %sp17211, i64 4
  store i256 8814, ptr %sp17272, align 16
  store i256 8814, ptr %sp17270, align 16
  br label %dynamic_jump_table.backedge

OP5125.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2481 = add i64 %len.addr.197, 1
  %sp17284 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %2482 = add i64 %len.addr.197, 2
  %sp17286 = getelementptr i256, ptr %sp17284, i64 -3
  %dup417287 = load i256, ptr %sp17286, align 16
  %sp17288 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2481
  %2483 = and i256 %dup417287, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp17284, align 16
  store i256 %2483, ptr %sp17288, align 16
  %sp17305 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2482
  store i256 0, ptr %sp17305, align 16
  %2484 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %2483, ptr %arg.ecx.addr)
  %.not23439 = icmp eq i8 %2484, 0
  br i1 %.not23439, label %OP5133.PUSH1, label %return, !prof !6

OP5133.PUSH1:                                     ; preds = %OP5125.JUMPDEST
  store i256 1, ptr %sp17288, align 16
  store i256 32, ptr %sp17305, align 16
  %2485 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 1, ptr %arg.ecx.addr)
  %.not23440 = icmp eq i8 %2485, 0
  br i1 %.not23440, label %OP5136.PUSH1, label %return, !prof !6

OP5136.PUSH1:                                     ; preds = %OP5133.PUSH1
  store i256 64, ptr %sp17288, align 16
  %dup217324 = load i256, ptr %sp17284, align 16
  store i256 %dup217324, ptr %sp17305, align 16
  %2486 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17288)
  %.not23441 = icmp eq i8 %2486, 0
  br i1 %.not23441, label %OP5139.SWAP2, label %return, !prof !6

OP5139.SWAP2:                                     ; preds = %OP5136.PUSH1
  %sp17331 = getelementptr i256, ptr %sp17284, i64 -1
  %swap.b17332 = load i256, ptr %sp17331, align 16
  %swap.b17337 = load i256, ptr %sp17284, align 16
  store i256 %swap.b17332, ptr %sp17284, align 16
  store i256 %swap.b17337, ptr %sp17331, align 16
  %2487 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17284, i8 17)
  %.not23442 = icmp eq i8 %2487, 0
  br i1 %.not23442, label %OP5143.SLOAD, label %return, !prof !6

OP5143.SLOAD:                                     ; preds = %OP5139.SWAP2
  %2488 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17331, i8 17)
  %.not23443 = icmp eq i8 %2488, 0
  br i1 %.not23443, label %OP5144.PUSH2, label %return, !prof !6

OP5144.PUSH2:                                     ; preds = %OP5143.SLOAD
  %swap.b17353 = load i256, ptr %sp17331, align 16
  store i256 10754, ptr %sp17331, align 16
  store i256 %swap.b17353, ptr %sp17284, align 16
  %sp17355 = getelementptr i256, ptr %sp17284, i64 -2
  %dup317356 = load i256, ptr %sp17355, align 16
  store i256 %dup317356, ptr %sp17288, align 16
  %sp17361 = getelementptr i256, ptr %sp17284, i64 3
  store i256 8814, ptr %sp17361, align 16
  store i256 8814, ptr %sp17305, align 16
  br label %dynamic_jump_table.backedge

OP5151.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp17373 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp17377 = getelementptr i256, ptr %sp17373, i64 -1
  %swap.b17378 = load i256, ptr %sp17377, align 16
  store i256 0, ptr %sp17377, align 16
  store i256 %swap.b17378, ptr %sp17373, align 16
  %2489 = add i64 %len.addr.197, 2
  %sp17382 = getelementptr i256, ptr %sp17373, i64 1
  store i256 0, ptr %sp17382, align 16
  %2490 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17373, i8 17)
  %.not23434 = icmp eq i8 %2490, 0
  br i1 %.not23434, label %OP5156.PUSH1, label %return, !prof !6

OP5156.PUSH1:                                     ; preds = %OP5151.JUMPDEST
  store i256 64, ptr %sp17373, align 16
  store i256 64, ptr %sp17382, align 16
  %mload.out.slot17394 = alloca i256, align 16
  %2491 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot17394, ptr %arg.ecx.addr)
  %.not23435 = icmp eq i8 %2491, 0
  br i1 %.not23435, label %OP5158.MLOAD.contd, label %return, !prof !6

OP5158.MLOAD.contd:                               ; preds = %OP5156.PUSH1
  %mload.out17395 = load i256, ptr %mload.out.slot17394, align 16
  store i256 %mload.out17395, ptr %sp17382, align 16
  %sp17398 = getelementptr i256, ptr %sp17373, i64 -2
  %dup417399 = load i256, ptr %sp17398, align 16
  %sp17400 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2489
  store i256 %dup417399, ptr %sp17400, align 16
  %sp17404 = getelementptr i256, ptr %sp17373, i64 3
  store i256 %mload.out17395, ptr %sp17404, align 16
  %2492 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out17395, i256 %dup417399, ptr %arg.ecx.addr)
  %.not23436 = icmp eq i8 %2492, 0
  br i1 %.not23436, label %OP5162.SWAP1, label %return, !prof !6

OP5162.SWAP1:                                     ; preds = %OP5158.MLOAD.contd
  %swap.a17412 = load i256, ptr %sp17382, align 16
  %swap.b17414 = load i256, ptr %sp17373, align 16
  store i256 %swap.a17412, ptr %sp17373, align 16
  store i256 %swap.b17414, ptr %sp17382, align 16
  %mload.out.slot17418 = alloca i256, align 16
  %2493 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b17414, ptr %mload.out.slot17418, ptr %arg.ecx.addr)
  %.not23437 = icmp eq i8 %2493, 0
  br i1 %.not23437, label %OP5163.MLOAD.contd, label %return, !prof !6

OP5163.MLOAD.contd:                               ; preds = %OP5162.SWAP1
  %mload.out17419 = load i256, ptr %mload.out.slot17418, align 16
  %sp17424 = getelementptr i256, ptr %sp17373, i64 -3
  %dup617425 = load i256, ptr %sp17424, align 16
  %2494 = and i256 %dup617425, 1461501637330902918203684832716283019655932542975
  %swap.b17437 = load i256, ptr %sp17373, align 16
  store i256 %2494, ptr %sp17373, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp17382, align 16
  %sp17453 = getelementptr i256, ptr %sp17373, i64 4
  %2495 = sub i256 %swap.b17437, %mload.out17419
  store i256 32, ptr %sp17453, align 16
  %2496 = add i256 %2495, 32
  store i256 %2496, ptr %sp17400, align 16
  store i256 %mload.out17419, ptr %sp17404, align 16
  %2497 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17377, i8 3)
  %.not23438 = icmp eq i8 %2497, 0
  br i1 %.not23438, label %OP5178.POP, label %return.loopexit25073.split.loop.exit25461, !prof !6

OP5178.POP:                                       ; preds = %OP5163.MLOAD.contd
  %2498 = add i64 %len.addr.197, -4
  %sp17483 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2498
  %a17484 = load i256, ptr %sp17483, align 16
  br label %dynamic_jump_table.backedge

OP5181.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4463.PUSH4, %OP4430.DUP1
  %len.addr.195 = phi i64 [ %2147, %OP4463.PUSH4 ], [ %2138, %OP4430.DUP1 ], [ %len.addr.197, %dynamic_jump_table ]
  %sp17487 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.195
  %sp17491 = getelementptr i256, ptr %sp17487, i64 -1
  %b17492 = load i256, ptr %sp17491, align 16
  store i256 5192296858534827628530496329220096, ptr %sp17487, align 16
  %2499 = shl i256 %b17492, 112
  %2500 = and i256 %2499, 26959946667150639794667015087019625481340285887712943950607281029120
  %sp17505 = getelementptr i256, ptr %sp17487, i64 -2
  %swap.b17506 = load i256, ptr %sp17505, align 16
  store i256 %2500, ptr %sp17505, align 16
  store i256 %swap.b17506, ptr %sp17491, align 16
  %2501 = add i64 %len.addr.195, -1
  br label %dynamic_jump_table.preheader

dynamic_jump_table.preheader:                     ; preds = %OP1580.JUMPDEST, %OP1767.POP, %OP1773.PUSH14, %OP1812.PUSH20, %OP1819.DUP2, %OP1876.PUSH2, %OP1925.JUMPDEST, %OP1929.JUMPDEST, %OP1936.DUP2, %OP2006.JUMP, %OP2010.DUP2, %OP2015.DUP2, %OP2247.MLOAD.contd, %OP2492.DUP2, %OP2497.DUP2, %OP2511.DUP2, %OP3147.POP, %OP3158.JUMPDEST, %OP3308.MLOAD.contd, %OP3390.PUSH20, %OP3397.PUSH20, %OP3745.DUP2, %OP4233.JUMPDEST, %OP4558.POP, %OP4616.POP, %OP4635.PUSH2, %OP4827.PUSH1, %OP4935.JUMPDEST, %OP5181.JUMPDEST
  %len.addr.197.ph = phi i64 [ %712, %OP1580.JUMPDEST ], [ %759, %OP1767.POP ], [ %801, %OP1812.PUSH20 ], [ %804, %OP1819.DUP2 ], [ %814, %OP1876.PUSH2 ], [ %893, %OP1925.JUMPDEST ], [ %894, %OP1929.JUMPDEST ], [ %895, %OP1936.DUP2 ], [ %929, %OP2006.JUMP ], [ %930, %OP2010.DUP2 ], [ %932, %OP2015.DUP2 ], [ %1053, %OP2247.MLOAD.contd ], [ %len.addr.109, %OP2492.DUP2 ], [ %1154, %OP2497.DUP2 ], [ %len.addr.111, %OP2511.DUP2 ], [ %1471, %OP3147.POP ], [ %1482, %OP3158.JUMPDEST ], [ %1547, %OP3308.MLOAD.contd ], [ %1585, %OP3390.PUSH20 ], [ %1588, %OP3397.PUSH20 ], [ %1756, %OP3745.DUP2 ], [ %2047, %OP4233.JUMPDEST ], [ %2208, %OP4558.POP ], [ %2278, %OP4616.POP ], [ %2281, %OP4635.PUSH2 ], [ %2381, %OP4827.PUSH1 ], [ %2411, %OP4935.JUMPDEST ], [ %2501, %OP5181.JUMPDEST ], [ %791, %OP1773.PUSH14 ]
  %.ph25072 = phi i256 [ 8680, %OP1580.JUMPDEST ], [ %dup25774, %OP1767.POP ], [ %dup25920, %OP1812.PUSH20 ], [ %dup25932, %OP1819.DUP2 ], [ 8814, %OP1876.PUSH2 ], [ %dup26299, %OP1925.JUMPDEST ], [ %dup26309, %OP1929.JUMPDEST ], [ %dup26321, %OP1936.DUP2 ], [ %a6594, %OP2006.JUMP ], [ %dup26602, %OP2010.DUP2 ], [ %dup26614, %OP2015.DUP2 ], [ 8814, %OP2247.MLOAD.contd ], [ %dup28132, %OP2492.DUP2 ], [ %dup28144, %OP2497.DUP2 ], [ %dup28188, %OP2511.DUP2 ], [ %dup210295, %OP3147.POP ], [ %dup210323, %OP3158.JUMPDEST ], [ 8814, %OP3308.MLOAD.contd ], [ %dup211134, %OP3390.PUSH20 ], [ %dup211154, %OP3397.PUSH20 ], [ %dup212509, %OP3745.DUP2 ], [ %a14257, %OP4233.JUMPDEST ], [ %a15474, %OP4558.POP ], [ %a15690, %OP4616.POP ], [ 8814, %OP4635.PUSH2 ], [ 8680, %OP4827.PUSH1 ], [ %swap.b16695, %OP4935.JUMPDEST ], [ %swap.b17506, %OP5181.JUMPDEST ], [ %swap.b5804, %OP1773.PUSH14 ]
  %invariant.gep = getelementptr i256, ptr %arg.stack.addr, i64 -2
  %invariant.gep25529 = getelementptr i256, ptr %arg.stack.addr, i64 -1
  %ecx.memory.addr.i24415 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %contract.caller.addr10133 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.target_address.addr9353 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %invariant.gep26077 = getelementptr i256, ptr %arg.stack.addr, i64 -2
  %invariant.gep26079 = getelementptr i256, ptr %arg.stack.addr, i64 -2
  %invariant.gep26081 = getelementptr i256, ptr %arg.stack.addr, i64 -9
  %invariant.gep26083 = getelementptr i256, ptr %arg.stack.addr, i64 -2
  %invariant.gep26085 = getelementptr i256, ptr %arg.stack.addr, i64 -1
  br label %dynamic_jump_table

OP5188.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp17512 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 0, ptr %sp17512, align 16
  %sp17514 = getelementptr i256, ptr %sp17512, i64 1
  %2502 = add i64 %len.addr.197, 3
  %sp17516 = getelementptr i256, ptr %sp17512, i64 -1
  %dup317517 = load i256, ptr %sp17516, align 16
  %sp17518 = getelementptr i256, ptr %sp17512, i64 2
  %2503 = and i256 %dup317517, 5192296858534827628530496329220095
  store i256 %2503, ptr %sp17514, align 16
  %sp17528 = getelementptr i256, ptr %sp17512, i64 -2
  %dup517529 = load i256, ptr %sp17528, align 16
  %sp17530 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2502
  %2504 = and i256 %dup517529, 26959946667150639794667015087019630673637144422540572481103610249215
  store i256 %2504, ptr %sp17518, align 16
  store i256 %2503, ptr %sp17530, align 16
  %.not23433 = icmp eq i256 %2503, 0
  br i1 %.not23433, label %return, label %OP5200.JUMPDEST

OP5200.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5188.JUMPDEST
  %len.addr.196 = phi i64 [ %len.addr.197, %dynamic_jump_table ], [ %2502, %OP5188.JUMPDEST ]
  %2505 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.196
  %sp17547 = getelementptr i256, ptr %2505, i64 -1
  %a17548 = load i256, ptr %sp17547, align 16
  %sp17549 = getelementptr i256, ptr %2505, i64 -2
  %b17550 = load i256, ptr %sp17549, align 16
  %2506 = udiv i256 %a17548, %b17550
  %sp17555 = getelementptr i256, ptr %2505, i64 -6
  %swap.b17556 = load i256, ptr %sp17555, align 16
  store i256 %2506, ptr %sp17555, align 16
  %sp17560 = getelementptr i256, ptr %2505, i64 -5
  %swap.b17561 = load i256, ptr %sp17560, align 16
  store i256 %swap.b17556, ptr %sp17560, align 16
  store i256 %swap.b17561, ptr %sp17549, align 16
  %2507 = add i64 %len.addr.196, -5
  br label %dynamic_jump_table.backedge

OP5208.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2508 = add i64 %len.addr.197, 1
  %2509 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.197
  %sp17570 = getelementptr i256, ptr %2509, i64 -1
  %dup117571 = load i256, ptr %sp17570, align 16
  %sp17574 = getelementptr i256, ptr %2509, i64 -2
  %dup317575 = load i256, ptr %sp17574, align 16
  %sp17576 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2508
  %2510 = add i256 %dup317575, %dup117571
  store i256 %2510, ptr %2509, align 16
  %sp17590 = getelementptr i256, ptr %2509, i64 2
  store i256 %2510, ptr %sp17590, align 16
  %2511 = icmp uge i256 %2510, %dup317575
  %2512 = zext i1 %2511 to i256
  store i256 %2512, ptr %sp17576, align 16
  br i1 %2511, label %OP1803.JUMPDEST, label %OP5218.PUSH1

OP5218.PUSH1:                                     ; preds = %OP5208.JUMPDEST
  %sp17590.le = getelementptr i256, ptr %2509, i64 2
  %2513 = add i64 %len.addr.197, 3
  store i256 64, ptr %sp17576, align 16
  store i256 64, ptr %sp17590.le, align 16
  %mload.out.slot17613 = alloca i256, align 16
  %2514 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot17613, ptr %arg.ecx.addr)
  %.not23426 = icmp eq i8 %2514, 0
  br i1 %.not23426, label %OP5220.MLOAD.contd, label %return, !prof !6

OP5220.MLOAD.contd:                               ; preds = %OP5218.PUSH1
  %mload.out17614 = load i256, ptr %mload.out.slot17613, align 16
  store i256 %mload.out17614, ptr %sp17590.le, align 16
  %sp17617 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2513
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp17617, align 16
  %sp17621 = getelementptr i256, ptr %2509, i64 4
  store i256 %mload.out17614, ptr %sp17621, align 16
  %2515 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out17614, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not23427 = icmp eq i8 %2515, 0
  br i1 %.not23427, label %OP5224.PUSH1, label %return, !prof !6

OP5224.PUSH1:                                     ; preds = %OP5220.MLOAD.contd
  store i256 32, ptr %sp17617, align 16
  %dup317633 = load i256, ptr %sp17590.le, align 16
  %sp17634 = getelementptr i256, ptr %2509, i64 5
  store i256 %dup317633, ptr %sp17634, align 16
  %2516 = add i256 %dup317633, 4
  store i256 %2516, ptr %sp17621, align 16
  %2517 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2516, i256 32, ptr %arg.ecx.addr)
  %.not23428 = icmp eq i8 %2517, 0
  br i1 %.not23428, label %OP5229.PUSH1, label %return, !prof !6

OP5229.PUSH1:                                     ; preds = %OP5224.PUSH1
  store i256 20, ptr %sp17617, align 16
  %dup317652 = load i256, ptr %sp17590.le, align 16
  store i256 %dup317652, ptr %sp17634, align 16
  %2518 = add i256 %dup317652, 36
  store i256 %2518, ptr %sp17621, align 16
  %2519 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2518, i256 20, ptr %arg.ecx.addr)
  %.not23429 = icmp eq i8 %2519, 0
  br i1 %.not23429, label %OP5234.PUSH32, label %return, !prof !6

OP5234.PUSH32:                                    ; preds = %OP5229.PUSH1
  store i256 45434785798259124660451259184032529079373492369795387008523657748458537746432, ptr %sp17617, align 16
  %dup317671 = load i256, ptr %sp17590.le, align 16
  store i256 %dup317671, ptr %sp17634, align 16
  %2520 = add i256 %dup317671, 68
  store i256 %2520, ptr %sp17621, align 16
  %2521 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2520, i256 45434785798259124660451259184032529079373492369795387008523657748458537746432, ptr %arg.ecx.addr)
  %.not23430 = icmp eq i8 %2521, 0
  br i1 %.not23430, label %OP5239.SWAP1, label %return, !prof !6

OP5239.SWAP1:                                     ; preds = %OP5234.PUSH32
  %swap.a17686 = load i256, ptr %sp17590.le, align 16
  %swap.b17688 = load i256, ptr %sp17576, align 16
  store i256 %swap.a17686, ptr %sp17576, align 16
  store i256 %swap.b17688, ptr %sp17590.le, align 16
  %mload.out.slot17692 = alloca i256, align 16
  %2522 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b17688, ptr %mload.out.slot17692, ptr %arg.ecx.addr)
  %.not23431 = icmp eq i8 %2522, 0
  br i1 %.not23431, label %OP5240.MLOAD.contd, label %return, !prof !6

OP5240.MLOAD.contd:                               ; preds = %OP5239.SWAP1
  %mload.out17693 = load i256, ptr %mload.out.slot17692, align 16
  %swap.b17699 = load i256, ptr %sp17576, align 16
  %2523 = sub i256 %swap.b17699, %mload.out17693
  store i256 100, ptr %sp17617, align 16
  %2524 = add i256 %2523, 100
  store i256 %2524, ptr %sp17576, align 16
  store i256 %mload.out17693, ptr %sp17590.le, align 16
  %2525 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17576, i8 16)
  %.not23432 = icmp eq i8 %2525, 0
  %spec.select17816 = select i1 %.not23432, i8 16, i8 %2525, !prof !6
  br label %return

dynamic_jump_table:                               ; preds = %dynamic_jump_table.backedge, %dynamic_jump_table.preheader
  %len.addr.197 = phi i64 [ %len.addr.197.ph, %dynamic_jump_table.preheader ], [ %len.addr.197.be, %dynamic_jump_table.backedge ]
  %2526 = phi i256 [ %.ph25072, %dynamic_jump_table.preheader ], [ %.be, %dynamic_jump_table.backedge ]
  switch i256 %2526, label %return.loopexit26312 [
    i256 16, label %OP11.JUMPDEST
    i256 113, label %OP59.JUMPDEST.loopexit
    i256 151, label %OP77.JUMPDEST.loopexit
    i256 211, label %OP105.JUMPDEST.loopexit
    i256 249, label %OP123.JUMPDEST.loopexit
    i256 320, label %OP156.JUMPDEST.loopexit
    i256 358, label %OP174.JUMPDEST.loopexit
    i256 407, label %OP197.JUMPDEST.loopexit
    i256 441, label %OP213.JUMPDEST
    i256 446, label %OP217.JUMPDEST
    i256 468, label %OP232.JUMPDEST.loopexit
    i256 536, label %OP268.JUMPDEST
    i256 554, label %OP282.JUMPDEST.loopexit
    i256 588, label %OP306.JUMPDEST
    i256 599, label %return
    i256 601, label %OP317.JUMPDEST
    i256 609, label %OP321.JUMPDEST
    i256 643, label %OP352.JUMPDEST.preheader
    i256 667, label %OP371.JUMPDEST
    i256 712, label %OP408.JUMPDEST
    i256 726, label %OP421.JUMPDEST
    i256 734, label %OP425.JUMPDEST
    i256 789, label %OP459.JUMPDEST
    i256 811, label %OP474.JUMPDEST.loopexit
    i256 846, label %OP486.JUMPDEST
    i256 866, label %OP504.JUMPDEST
    i256 874, label %OP508.JUMPDEST
    i256 915, label %OP527.JUMPDEST
    i256 923, label %OP531.JUMPDEST
    i256 941, label %OP547.JUMPDEST
    i256 963, label %OP562.JUMPDEST.loopexit
    i256 1008, label %OP583.JUMPDEST
    i256 1016, label %OP587.JUMPDEST
    i256 1024, label %OP591.JUMPDEST
    i256 1046, label %OP610.JUMPDEST
    i256 1054, label %OP614.JUMPDEST
    i256 1076, label %OP629.JUMPDEST.loopexit
    i256 1113, label %OP643.JUMPDEST
    i256 1121, label %OP647.JUMPDEST
    i256 1129, label %OP651.JUMPDEST
    i256 1151, label %OP666.JUMPDEST.loopexit
    i256 1180, label %OP673.JUMPDEST
    i256 1202, label %OP688.JUMPDEST.loopexit
    i256 1231, label %OP695.JUMPDEST
    i256 1239, label %OP699.JUMPDEST
    i256 1261, label %OP714.JUMPDEST.loopexit
    i256 1290, label %OP721.JUMPDEST
    i256 1312, label %OP736.JUMPDEST.loopexit
    i256 1341, label %OP743.JUMPDEST
    i256 1366, label %OP766.JUMPDEST
    i256 1374, label %OP770.JUMPDEST
    i256 1396, label %OP785.JUMPDEST.loopexit
    i256 1431, label %OP797.JUMPDEST
    i256 1439, label %OP801.JUMPDEST
    i256 1461, label %OP816.JUMPDEST.loopexit
    i256 1490, label %OP823.JUMPDEST
    i256 1498, label %OP827.JUMPDEST
    i256 1506, label %OP831.JUMPDEST.loopexit
    i256 1528, label %OP846.JUMPDEST.loopexit
    i256 1600, label %OP889.JUMPDEST.loopexit
    i256 1622, label %OP904.JUMPDEST.loopexit
    i256 1659, label %OP918.JUMPDEST
    i256 1667, label %OP922.JUMPDEST
    i256 1780, label %OP960.JUMPDEST
    i256 1799, label %OP974.JUMPDEST
    i256 1884, label %OP1015.JUMPDEST
    i256 1895, label %OP1021.JUMPDEST
    i256 1946, label %OP1042.JUMPDEST
    i256 2031, label %OP1083.JUMPDEST
    i256 2132, label %OP1119.JUMPDEST
    i256 2239, label %OP1153.JUMPDEST
    i256 2256, label %OP1164.JUMPDEST
    i256 2273, label %OP1175.JUMPDEST
    i256 2474, label %OP1289.JUMPDEST
    i256 2494, label %OP1305.JUMPDEST
    i256 2499, label %OP1310.JUMPDEST
    i256 2607, label %OP1355.JUMPDEST
    i256 2627, label %OP1371.JUMPDEST
    i256 2649, label %OP1388.JUMPDEST
    i256 2763, label %OP1439.JUMPDEST
    i256 2783, label %OP1455.JUMPDEST
    i256 2805, label %OP1472.JUMPDEST
    i256 2847, label %OP1494.JUMPDEST
    i256 2869, label %OP1502.JUMPDEST
    i256 2905, label %OP1518.JUMPDEST.loopexit
    i256 2927, label %OP1526.JUMPDEST
    i256 2944, label %OP1539.JUMPDEST
    i256 3029, label %OP1580.JUMPDEST
    i256 3051, label %OP1590.JUMPDEST
    i256 3069, label %OP1598.JUMPDEST
    i256 3081, label %OP1604.JUMPDEST
    i256 3105, label %OP1616.JUMPDEST
    i256 3149, label %OP1633.JUMPDEST
    i256 3161, label %OP1639.JUMPDEST
    i256 3177, label %OP1647.JUMPDEST
    i256 3286, label %OP1683.JUMPDEST
    i256 3300, label %OP1693.JUMPDEST
    i256 3415, label %OP1750.JUMPDEST
    i256 3472, label %OP1770.JUMPDEST
    i256 3557, label %OP1792.JUMPDEST.loopexit
    i256 3570, label %OP1800.JUMPDEST
    i256 3574, label %OP1803.JUMPDEST
    i256 3580, label %OP1809.JUMPDEST
    i256 3608, label %OP1816.JUMPDEST
    i256 3614, label %OP1821.JUMPDEST
    i256 3766, label %OP1883.JUMPDEST
    i256 3816, label %OP1909.JUMPDEST
    i256 3827, label %OP1916.JUMPDEST
    i256 3837, label %OP1925.JUMPDEST
    i256 3873, label %OP1929.JUMPDEST
    i256 3878, label %OP1933.JUMPDEST
    i256 3884, label %OP1938.JUMPDEST
    i256 4018, label %OP1978.JUMPDEST.loopexit
    i256 4101, label %OP2007.JUMPDEST
    i256 4107, label %OP2012.JUMPDEST
    i256 4113, label %OP2017.JUMPDEST
    i256 4228, label %OP2056.JUMPDEST
    i256 4244, label %OP2066.JUMPDEST
    i256 4366, label %OP2123.JUMPDEST
    i256 4386, label %OP2139.JUMPDEST
    i256 4408, label %OP2156.JUMPDEST
    i256 4529, label %OP2212.JUMPDEST
    i256 4549, label %OP2228.JUMPDEST
    i256 4571, label %OP2245.JUMPDEST
    i256 4609, label %OP2260.JUMPDEST
    i256 4645, label %OP2273.JUMPDEST
    i256 4659, label %OP2282.JUMPDEST
    i256 4695, label %OP4943.JUMPDEST
    i256 4700, label %OP2304.JUMPDEST
    i256 4715, label %OP2356.JUMPDEST
    i256 4720, label %dynamic_jump_table.OP2315.JUMPDEST_crit_edge
    i256 4756, label %OP2327.JUMPDEST
    i256 4763, label %dynamic_jump_table.OP2332.JUMPDEST_crit_edge
    i256 4797, label %OP2344.JUMPDEST
    i256 4804, label %dynamic_jump_table.OP2349.JUMPDEST_crit_edge
    i256 4810, label %OP2353.JUMPDEST
    i256 4813, label %OP2356.JUMPDEST
    i256 4902, label %dynamic_jump_table.OP2400.JUMPDEST_crit_edge
    i256 4912, label %OP2406.JUMPDEST
    i256 4924, label %OP2414.JUMPDEST
    i256 4986, label %OP2436.JUMPDEST
    i256 4990, label %OP2439.JUMPDEST
    i256 5067, label %OP2480.JUMPDEST
    i256 5085, label %OP2494.JUMPDEST
    i256 5091, label %OP2499.JUMPDEST
    i256 5109, label %OP2513.JUMPDEST
    i256 5225, label %OP2553.JUMPDEST
    i256 5241, label %OP2563.JUMPDEST
    i256 5371, label %OP2627.JUMPDEST
    i256 5391, label %OP2643.JUMPDEST
    i256 5413, label %OP2660.JUMPDEST
    i256 5529, label %OP2712.JUMPDEST
    i256 5549, label %OP2728.JUMPDEST
    i256 5571, label %OP2745.JUMPDEST
    i256 5602, label %OP2768.JUMPDEST
    i256 5625, label %OP2782.JUMPDEST
    i256 5632, label %dynamic_jump_table.OP2787.JUMPDEST_crit_edge
    i256 5652, label %OP2799.JUMPDEST
    i256 5659, label %dynamic_jump_table.OP2804.JUMPDEST_crit_edge
    i256 5678, label %OP2819.JUMPDEST
    i256 5763, label %OP2860.JUMPDEST
    i256 5773, label %OP2866.JUMPDEST
    i256 5784, label %OP2873.JUMPDEST
    i256 5795, label %OP2880.JUMPDEST
    i256 5903, label %OP2925.JUMPDEST
    i256 5923, label %OP2941.JUMPDEST
    i256 5945, label %OP2958.JUMPDEST
    i256 6059, label %OP3009.JUMPDEST
    i256 6079, label %OP3025.JUMPDEST
    i256 6101, label %OP3042.JUMPDEST
    i256 6117, label %OP3054.JUMPDEST
    i256 6179, label %OP3076.JUMPDEST
    i256 6183, label %OP3079.JUMPDEST
    i256 6290, label %OP3130.JUMPDEST
    i256 6347, label %OP3150.JUMPDEST.loopexit
    i256 6360, label %OP3158.JUMPDEST
    i256 6366, label %OP3162.JUMPDEST
    i256 6479, label %OP3200.JUMPDEST.loopexit
    i256 6638, label %OP3273.JUMPDEST
    i256 6658, label %OP3289.JUMPDEST
    i256 6680, label %OP3306.JUMPDEST
    i256 6694, label %OP3974.JUMPDEST
    i256 6699, label %OP3317.JUMPDEST
    i256 6858, label %OP3379.JUMPDEST
    i256 6868, label %OP3387.JUMPDEST
    i256 6896, label %OP3394.JUMPDEST
    i256 6924, label %OP3401.JUMPDEST
    i256 7035, label %OP3439.JUMPDEST
    i256 7388, label %OP3642.JUMPDEST
    i256 7511, label %OP3670.JUMPDEST
    i256 7618, label %OP3704.JUMPDEST
    i256 7629, label %OP3711.JUMPDEST
    i256 7640, label %OP3722.JUMPDEST
    i256 7669, label %OP3747.JUMPDEST
    i256 7782, label %OP3785.JUMPDEST.loopexit
    i256 7901, label %OP3836.JUMPDEST
    i256 7921, label %OP3852.JUMPDEST
    i256 7943, label %OP3869.JUMPDEST
    i256 8058, label %OP3920.JUMPDEST
    i256 8078, label %OP3936.JUMPDEST
    i256 8100, label %OP3953.JUMPDEST
    i256 8148, label %OP3969.JUMPDEST
    i256 8155, label %OP3974.JUMPDEST
    i256 8356, label %OP4055.JUMPDEST.preheader
    i256 8417, label %OP4078.JUMPDEST.loopexit25542
    i256 8515, label %OP4158.JUMPDEST.loopexit
    i256 8520, label %OP4162.JUMPDEST
    i256 8563, label %OP4196.JUMPDEST
    i256 8566, label %OP4199.JUMPDEST
    i256 8673, label %OP4233.JUMPDEST
    i256 8680, label %OP4240.JUMPDEST
    i256 8704, label %OP4259.JUMPDEST
    i256 8707, label %OP4262.JUMPDEST
    i256 8814, label %OP4296.JUMPDEST
    i256 8928, label %OP4337.JUMPDEST
    i256 8972, label %OP4351.JUMPDEST
    i256 9079, label %OP4385.JUMPDEST
    i256 9159, label %OP4415.JUMPDEST
    i256 9186, label %OP4426.JUMPDEST
    i256 9211, label %OP4439.JUMPDEST
    i256 9253, label %OP4447.JUMPDEST
    i256 9317, label %OP4472.JUMPDEST
    i256 9362, label %OP4488.JUMPDEST
    i256 9628, label %OP4565.JUMPDEST
    i256 9739, label %OP4620.JUMPDEST
    i256 9793, label %OP4642.JUMPDEST
    i256 9859, label %OP4676.JUMPDEST
    i256 9964, label %OP4725.JUMPDEST
    i256 10071, label %OP4771.JUMPDEST
    i256 10091, label %OP4787.JUMPDEST
    i256 10113, label %OP4804.JUMPDEST
    i256 10200, label %OP4841.JUMPDEST
    i256 10213, label %OP4849.JUMPDEST
    i256 10244, label %OP4867.JUMPDEST
    i256 10259, label %OP4875.JUMPDEST
    i256 10284, label %OP4888.JUMPDEST
    i256 10296, label %OP4894.JUMPDEST
    i256 10309, label %OP4904.JUMPDEST
    i256 10328, label %OP4917.JUMPDEST
    i256 10332, label %OP4921.JUMPDEST
    i256 10335, label %OP4935.JUMPDEST
    i256 10340, label %OP4927.JUMPDEST
    i256 10352, label %OP4935.JUMPDEST
    i256 10360, label %OP4943.JUMPDEST
    i256 10381, label %OP4958.JUMPDEST
    i256 10404, label %OP4976.JUMPDEST
    i256 10413, label %OP4983.JUMPDEST
    i256 10421, label %OP4989.JUMPDEST
    i256 10427, label %OP4993.JUMPDEST
    i256 10437, label %OP5000.JUMPDEST
    i256 10442, label %OP5005.JUMPDEST
    i256 10461, label %OP5015.JUMPDEST
    i256 10517, label %OP5039.JUMPDEST
    i256 10618, label %OP5084.JUMPDEST
    i256 10633, label %OP5094.JUMPDEST
    i256 10635, label %OP5096.JUMPDEST
    i256 10642, label %OP5103.JUMPDEST
    i256 10696, label %OP5125.JUMPDEST
    i256 10754, label %OP5151.JUMPDEST
    i256 10839, label %OP5181.JUMPDEST
    i256 10875, label %OP5188.JUMPDEST
    i256 10932, label %OP5200.JUMPDEST
    i256 10940, label %OP5208.JUMPDEST
  ], !prof !240

dynamic_jump_table.OP2315.JUMPDEST_crit_edge:     ; preds = %dynamic_jump_table
  %gep26086 = getelementptr i256, ptr %invariant.gep26085, i64 %len.addr.197
  %dup57590.pre = load i256, ptr %gep26086, align 16
  br label %OP2315.JUMPDEST

dynamic_jump_table.OP2400.JUMPDEST_crit_edge:     ; preds = %dynamic_jump_table
  %gep26082 = getelementptr i256, ptr %invariant.gep26081, i64 %len.addr.197
  %dup117850.pre = load i256, ptr %gep26082, align 16
  br label %OP2400.JUMPDEST

dynamic_jump_table.OP2332.JUMPDEST_crit_edge:     ; preds = %dynamic_jump_table
  %gep26084 = getelementptr i256, ptr %invariant.gep26083, i64 %len.addr.197
  %b7619.pre = load i256, ptr %gep26084, align 16
  br label %OP2332.JUMPDEST

dynamic_jump_table.OP2349.JUMPDEST_crit_edge:     ; preds = %dynamic_jump_table
  %gep.phi.trans.insert = getelementptr i256, ptr %invariant.gep, i64 %len.addr.197
  %b7670.pre = load i256, ptr %gep.phi.trans.insert, align 16
  br label %OP2349.JUMPDEST

dynamic_jump_table.OP2787.JUMPDEST_crit_edge:     ; preds = %dynamic_jump_table
  %gep26080 = getelementptr i256, ptr %invariant.gep26079, i64 %len.addr.197
  %b9107.pre = load i256, ptr %gep26080, align 16
  br label %OP2787.JUMPDEST

dynamic_jump_table.OP2804.JUMPDEST_crit_edge:     ; preds = %dynamic_jump_table
  %gep26078 = getelementptr i256, ptr %invariant.gep26077, i64 %len.addr.197
  %b9156.pre = load i256, ptr %gep26078, align 16
  br label %OP2804.JUMPDEST

suspend:                                          ; preds = %OP4771.JUMPDEST, %OP4114.MLOAD.contd, %OP3920.JUMPDEST, %OP3836.JUMPDEST, %OP3607.MLOAD.contd, %OP3273.JUMPDEST, %OP3009.JUMPDEST, %OP2925.JUMPDEST, %OP2712.JUMPDEST, %OP2627.JUMPDEST, %OP2212.JUMPDEST, %OP2123.JUMPDEST, %OP1439.JUMPDEST, %OP1355.JUMPDEST, %OP1289.JUMPDEST
  %len.addr.198 = phi i64 [ %2342, %OP4771.JUMPDEST ], [ %1958, %OP4114.MLOAD.contd ], [ %1843, %OP3920.JUMPDEST ], [ %1799, %OP3836.JUMPDEST ], [ %1608, %OP3607.MLOAD.contd ], [ %1528, %OP3273.JUMPDEST ], [ %1383, %OP3009.JUMPDEST ], [ %1340, %OP2925.JUMPDEST ], [ %1255, %OP2712.JUMPDEST ], [ %1212, %OP2627.JUMPDEST ], [ %1022, %OP2212.JUMPDEST ], [ %978, %OP2123.JUMPDEST ], [ %643, %OP1439.JUMPDEST ], [ %600, %OP1355.JUMPDEST ], [ %567, %OP1289.JUMPDEST ]
  %2527 = phi ptr [ blockaddress(@univ2_pair, %OP4775.ISZERO), %OP4771.JUMPDEST ], [ blockaddress(@univ2_pair, %OP4123.SWAP2), %OP4114.MLOAD.contd ], [ blockaddress(@univ2_pair, %OP3924.ISZERO), %OP3920.JUMPDEST ], [ blockaddress(@univ2_pair, %OP3840.ISZERO), %OP3836.JUMPDEST ], [ blockaddress(@univ2_pair, %OP3630.ISZERO), %OP3607.MLOAD.contd ], [ blockaddress(@univ2_pair, %OP3277.ISZERO), %OP3273.JUMPDEST ], [ blockaddress(@univ2_pair, %OP3013.ISZERO), %OP3009.JUMPDEST ], [ blockaddress(@univ2_pair, %OP2929.ISZERO), %OP2925.JUMPDEST ], [ blockaddress(@univ2_pair, %OP2716.ISZERO), %OP2712.JUMPDEST ], [ blockaddress(@univ2_pair, %OP2631.ISZERO), %OP2627.JUMPDEST ], [ blockaddress(@univ2_pair, %OP2216.ISZERO), %OP2212.JUMPDEST ], [ blockaddress(@univ2_pair, %OP2127.ISZERO), %OP2123.JUMPDEST ], [ blockaddress(@univ2_pair, %OP1443.ISZERO), %OP1439.JUMPDEST ], [ blockaddress(@univ2_pair, %OP1359.ISZERO), %OP1355.JUMPDEST ], [ blockaddress(@univ2_pair, %OP1293.ISZERO), %OP1289.JUMPDEST ]
  store ptr %2527, ptr %ecx.resume_at.addr, align 8
  br label %return, !annotation !241

return.loopexit25073.split.loop.exit25299:        ; preds = %OP1735.POP
  %2528 = add i64 %len.addr.197, -2
  br label %return

return.loopexit25073.split.loop.exit25314:        ; preds = %OP2464.POP
  %2529 = add i64 %len.addr.108, -2
  br label %return

return.loopexit25073.split.loop.exit25329:        ; preds = %OP3111.POP
  %2530 = add i64 %len.addr.130, -8
  br label %return

return.loopexit25073.split.loop.exit25332:        ; preds = %OP3379.JUMPDEST
  %2531 = add i64 %len.addr.197, -2
  br label %return

return.loopexit25073.split.loop.exit25380:        ; preds = %OP4705.MLOAD.contd
  %2532 = add i64 %len.addr.197, -1
  br label %return

return.loopexit25073.split.loop.exit25425:        ; preds = %OP5066.MLOAD.contd
  %2533 = add i64 %len.addr.197, -1
  br label %return

return.loopexit25073.split.loop.exit25461:        ; preds = %OP5163.MLOAD.contd
  %2534 = add i64 %len.addr.197, -1
  br label %return

return.loopexit26312:                             ; preds = %dynamic_jump_table
  br label %return

return:                                           ; preds = %OP1693.JUMPDEST, %OP1696.MLOAD.contd, %OP1700.PUSH1, %OP1706.DUP1, %OP1712.PUSH1, %OP1718.SWAP1, %OP1719.MLOAD.contd, %OP2282.JUMPDEST, %OP2419.PUSH1, %OP2436.JUMPDEST, %OP2453.MLOAD.contd, %OP2768.JUMPDEST, %OP3059.PUSH1, %OP3076.JUMPDEST, %OP3093.MLOAD.contd, %OP3969.JUMPDEST, %OP4642.JUMPDEST, %OP4651.PUSH1, %OP4654.PUSH1, %OP4658.SWAP4, %OP4662.SWAP1, %OP4667.KECCAK256, %OP4668.SLOAD, %OP4676.JUMPDEST, %OP4685.PUSH1, %OP4690.PUSH1, %OP4695.SWAP5, %OP4699.DUP1, %OP4700.MLOAD.contd, %OP4704.SWAP1, %OP4867.JUMPDEST, %OP5005.JUMPDEST, %OP5015.JUMPDEST, %OP5020.PUSH20, %OP5025.PUSH1, %OP5028.PUSH1, %OP5031.SLOAD, %OP5039.JUMPDEST, %OP5047.PUSH1, %OP5052.PUSH1, %OP5056.SWAP5, %OP5060.DUP4, %OP5061.MLOAD.contd, %OP5065.SWAP4, %OP5114.PUSH1, %OP5117.SLOAD, %OP5125.JUMPDEST, %OP5133.PUSH1, %OP5136.PUSH1, %OP5139.SWAP2, %OP5143.SLOAD, %OP5151.JUMPDEST, %OP5156.PUSH1, %OP5158.MLOAD.contd, %OP5162.SWAP1, %OP5188.JUMPDEST, %OP4976.JUMPDEST, %OP4965.DUP1, %OP4894.JUMPDEST, %OP2799.JUMPDEST, %OP2782.JUMPDEST, %OP2344.JUMPDEST, %OP2327.JUMPDEST, %resize.i24321, %resize.i24336, %resize.i24351, %resize.i24367, %resize.i24428, %resize.i24443, %resize.i24458, %resize.i24474, %resize.i24933, %resize.i24948, %resize.i24612, %resize.i24597, %resize.i24094, %resize.i24080, %dynamic_jump_table, %return.loopexit26312, %return.loopexit25073.split.loop.exit25299, %return.loopexit25073.split.loop.exit25314, %return.loopexit25073.split.loop.exit25329, %return.loopexit25073.split.loop.exit25332, %return.loopexit25073.split.loop.exit25380, %return.loopexit25073.split.loop.exit25425, %return.loopexit25073.split.loop.exit25461, %resize.i24919, %resize.i24903, %resize.i24888, %resize.i24874, %resize.i24858, %resize.i24843, %resize.i24827, %resize.i24812, %resize.i24797, %resize.i24782, %resize.i24768, %resize.i24752, %resize.i24737, %resize.i24722, %resize.i24706, %resize.i24690, %resize.i24674, %resize.i24658, %resize.i24643, %resize.i24628, %resize.i24581, %resize.i24565, %resize.i24550, %resize.i24535, %resize.i24521, %resize.i24506, %resize.i24490, %resize.i24412, %resize.i24396, %resize.i24382, %resize.i24305, %resize.i24289, %resize.i24274, %resize.i24259, %resize.i24244, %resize.i24230, %resize.i24215, %resize.i24200, %resize.i24185, %resize.i24171, %resize.i24156, %resize.i24141, %resize.i24126, %resize.i24110, %resize.i, %OP5240.MLOAD.contd, %OP4801.PUSH1, %OP4784.RETURNDATASIZE, %OP4768.PUSH1, %OP4376.MLOAD.contd, %OP4328.MLOAD.contd, %OP4287.MLOAD.contd, %OP4224.MLOAD.contd, %OP4193.PUSH1, %OP3950.PUSH1, %OP3933.RETURNDATASIZE, %OP3917.PUSH1, %OP3866.PUSH1, %OP3849.RETURNDATASIZE, %OP3833.PUSH1, %OP3776.MLOAD.contd, %OP3695.MLOAD.contd, %OP3639.RETURNDATASIZE, %OP3430.MLOAD.contd, %OP3376.PUSH1, %OP3303.PUSH1, %OP3286.RETURNDATASIZE, %OP3270.PUSH1, %OP3191.MLOAD.contd, %OP3039.PUSH1, %OP3022.RETURNDATASIZE, %OP3006.PUSH1, %OP2955.PUSH1, %OP2938.RETURNDATASIZE, %OP2922.PUSH1, %OP2854.MLOAD.contd, %OP2742.PUSH1, %OP2725.RETURNDATASIZE, %OP2709.PUSH1, %OP2657.PUSH1, %OP2640.RETURNDATASIZE, %OP2624.PUSH1, %OP2544.MLOAD.contd, %OP2394.MLOAD.contd, %OP2242.PUSH1, %OP2225.RETURNDATASIZE, %OP2209.PUSH1, %OP2153.PUSH1, %OP2136.RETURNDATASIZE, %OP2120.PUSH1, %OP2047.MLOAD.contd, %OP1969.MLOAD.contd, %OP1674.MLOAD.contd, %OP1574.MLOAD.contd, %OP1469.PUSH1, %OP1452.RETURNDATASIZE, %OP1436.PUSH1, %OP1385.PUSH1, %OP1368.RETURNDATASIZE, %OP1352.PUSH1, %OP1302.RETURNDATASIZE, %OP1286.PUSH1, %OP1144.MLOAD.contd, %OP1077.MLOAD.contd, %OP1009.MLOAD.contd, %OP951.MLOAD.contd, %OP901.PUSH1, %OP843.PUSH1, %OP813.PUSH1, %OP782.PUSH1, %OP758.MLOAD.contd, %OP733.PUSH1, %OP711.PUSH1, %OP685.PUSH1, %OP663.PUSH1, %OP626.PUSH1, %OP601.MLOAD.contd, %OP559.PUSH1, %OP538.MLOAD.contd, %OP518.MLOAD.contd, %OP495.MLOAD.contd, %OP471.PUSH1, %OP450.MLOAD.contd, %OP415.MLOAD.contd, %OP303.PUSH1, %OP279.PUSH1, %OP265.PUSH1, %OP229.PUSH1, %OP213.JUMPDEST, %OP8.PUSH1, %suspend, %OP5239.SWAP1, %OP5234.PUSH32, %OP5229.PUSH1, %OP5224.PUSH1, %OP5220.MLOAD.contd, %OP5218.PUSH1, %OP4932.PUSH1, %OP4806.MLOAD.contd, %OP4787.JUMPDEST, %OP4780.RETURNDATASIZE, %OP4771.JUMPDEST, %OP4755.MLOAD.contd, %OP4751.PUSH1, %OP4743.MLOAD.contd, %OP4735.SWAP1, %OP4732.SWAP1, %OP4725.JUMPDEST, %OP4634.SLOAD, %OP4631.PUSH1, %OP4605.MLOAD.contd, %OP4596.DUP6, %OP4592.SWAP2, %OP4579.PUSH1, %OP4546.MLOAD.contd, %OP4492.PUSH32, %OP4488.JUMPDEST, %OP4476.PUSH28, %OP4472.JUMPDEST, %OP4451.PUSH28, %OP4447.JUMPDEST, %OP4385.JUMPDEST, %OP4375.SWAP1, %OP4370.PUSH32, %OP4365.PUSH1, %OP4360.PUSH1, %OP4356.MLOAD.contd, %OP4354.PUSH1, %OP4327.SWAP1, %OP4322.PUSH32, %OP4317.PUSH1, %OP4312.PUSH1, %OP4308.MLOAD.contd, %OP4306.PUSH1, %OP4286.SWAP1, %OP4281.PUSH32, %OP4276.PUSH1, %OP4271.PUSH1, %OP4267.MLOAD.contd, %OP4265.PUSH1, %OP4223.SWAP1, %OP4218.PUSH32, %OP4213.PUSH1, %OP4208.PUSH1, %OP4204.MLOAD.contd, %OP4202.PUSH1, %OP4150.RETURNDATASIZE, %OP4114.MLOAD.contd, %OP4100.POP, %OP4093.MLOAD.contd, %OP4089.MLOAD.contd, %OP4085.SUB, %OP4078.JUMPDEST, %OP4037.MLOAD.contd, %OP4036.SWAP3, %OP4029.MLOAD.contd, %OP4025.SWAP2, %OP4019.PUSH1, %OP4010.MLOAD.contd, %OP4009.DUP5, %OP4002.PUSH1, %OP3993.MLOAD.contd, %OP3992.DUP2, %OP3986.PUSH32, %OP3983.PUSH1, %OP3977.MLOAD.contd, %OP3974.JUMPDEST, %OP3955.MLOAD.contd, %OP3936.JUMPDEST, %OP3929.RETURNDATASIZE, %OP3920.JUMPDEST, %OP3886.MLOAD.contd, %OP3885.SWAP1, %OP3880.ADDRESS, %OP3876.MLOAD.contd, %OP3874.PUSH1, %OP3871.MLOAD.contd, %OP3869.JUMPDEST, %OP3852.JUMPDEST, %OP3845.RETURNDATASIZE, %OP3836.JUMPDEST, %OP3803.MLOAD.contd, %OP3802.SWAP1, %OP3797.ADDRESS, %OP3793.MLOAD.contd, %OP3791.PUSH1, %OP3789.PUSH1, %OP3785.JUMPDEST, %OP3775.SWAP1, %OP3770.PUSH32, %OP3765.PUSH1, %OP3760.PUSH1, %OP3756.MLOAD.contd, %OP3754.PUSH1, %OP3747.JUMPDEST, %OP3744.SLOAD, %OP3742.SWAP1, %OP3732.PUSH1, %OP3694.SWAP1, %OP3689.PUSH32, %OP3684.PUSH1, %OP3679.PUSH1, %OP3675.MLOAD.contd, %OP3673.PUSH1, %OP3642.JUMPDEST, %OP3635.RETURNDATASIZE, %OP3607.MLOAD.contd, %OP3607.MLOAD, %OP3601.PUSH2, %OP3595.PUSH2, %OP3588.PUSH1, %OP3585.DUP7, %OP3579.PUSH2, %OP3575.SWAP6, %OP3567.MLOAD.contd, %OP3566.DUP7, %OP3560.PUSH2, %OP3551.MLOAD.contd, %OP3550.DUP1, %OP3542.PUSH2, %OP3535.PUSH2, %OP3530.PUSH32, %OP3525.MLOAD.contd, %OP3524.DUP1, %OP3519.PUSH1, %OP3510.MLOAD.contd, %OP3509.DUP2, %OP3502.PUSH1, %OP3495.PUSH1, %OP3489.PUSH1, %OP3482.SWAP6, %OP3475.DUP1, %OP3469.MLOAD.contd, %OP3468.DUP3, %OP3461.PUSH1, %OP3459.DUP1, %OP3455.PUSH1, %OP3450.PUSH1, %OP3442.PUSH20, %OP3439.JUMPDEST, %OP3429.SWAP1, %OP3424.PUSH32, %OP3419.PUSH1, %OP3414.PUSH1, %OP3410.MLOAD.contd, %OP3408.PUSH1, %OP3394.JUMPDEST, %OP3387.JUMPDEST, %OP3332.MLOAD.contd, %OP3331.SWAP1, %OP3326.ADDRESS, %OP3322.MLOAD.contd, %OP3320.PUSH1, %OP3317.JUMPDEST, %OP3289.JUMPDEST, %OP3282.RETURNDATASIZE, %OP3273.JUMPDEST, %OP3222.MLOAD.contd, %OP3221.SWAP1, %OP3216.ADDRESS, %OP3212.MLOAD.contd, %OP3210.PUSH1, %OP3208.PUSH1, %OP3206.PUSH1, %OP3204.PUSH1, %OP3200.JUMPDEST, %OP3190.SWAP1, %OP3185.PUSH32, %OP3180.PUSH1, %OP3175.PUSH1, %OP3171.MLOAD.contd, %OP3169.PUSH1, %OP3162.JUMPDEST, %OP3142.PUSH1, %OP3138.DUP1, %OP3132.MLOAD.contd, %OP3130.JUMPDEST, %OP3025.JUMPDEST, %OP3018.RETURNDATASIZE, %OP3009.JUMPDEST, %OP2973.MLOAD.contd, %OP2972.SWAP1, %OP2967.ADDRESS, %OP2963.MLOAD.contd, %OP2960.MLOAD.contd, %OP2958.JUMPDEST, %OP2941.JUMPDEST, %OP2934.RETURNDATASIZE, %OP2925.JUMPDEST, %OP2893.MLOAD.contd, %OP2892.SWAP1, %OP2887.ADDRESS, %OP2883.MLOAD.contd, %OP2880.JUMPDEST, %OP2848.PUSH1, %OP2841.PUSH1, %OP2838.PUSH1, %OP2827.PUSH1, %OP2823.MLOAD.contd, %OP2822.PUSH1, %OP2759.SLOAD, %OP2756.PUSH1, %OP2753.PUSH1, %OP2747.MLOAD.contd, %OP2745.JUMPDEST, %OP2728.JUMPDEST, %OP2721.RETURNDATASIZE, %OP2712.JUMPDEST, %OP2675.MLOAD.contd, %OP2674.SWAP1, %OP2669.ADDRESS, %OP2665.MLOAD.contd, %OP2662.MLOAD.contd, %OP2660.JUMPDEST, %OP2643.JUMPDEST, %OP2636.RETURNDATASIZE, %OP2627.JUMPDEST, %OP2581.MLOAD.contd, %OP2580.SWAP1, %OP2575.ADDRESS, %OP2571.MLOAD.contd, %OP2569.PUSH1, %OP2567.PUSH1, %OP2563.JUMPDEST, %OP2553.JUMPDEST, %OP2543.SWAP1, %OP2538.PUSH32, %OP2533.PUSH1, %OP2528.PUSH1, %OP2524.MLOAD.contd, %OP2522.PUSH1, %OP2513.JUMPDEST, %OP2510.SLOAD, %OP2507.PUSH1, %OP2494.JUMPDEST, %OP2491.SLOAD, %OP2488.PUSH1, %OP2484.PUSH1, %OP2480.JUMPDEST, %OP2388.PUSH1, %OP2381.PUSH1, %OP2378.PUSH1, %OP2367.PUSH1, %OP2363.MLOAD.contd, %OP2362.PUSH1, %OP2228.JUMPDEST, %OP2221.RETURNDATASIZE, %OP2212.JUMPDEST, %OP2173.MLOAD.contd, %OP2172.SWAP1, %OP2167.ADDRESS, %OP2163.MLOAD.contd, %OP2161.PUSH1, %OP2158.MLOAD.contd, %OP2156.JUMPDEST, %OP2139.JUMPDEST, %OP2132.RETURNDATASIZE, %OP2123.JUMPDEST, %OP2082.MLOAD.contd, %OP2081.SWAP1, %OP2076.ADDRESS, %OP2072.MLOAD.contd, %OP2070.PUSH1, %OP2066.JUMPDEST, %OP2056.JUMPDEST, %OP2046.SWAP1, %OP2041.PUSH32, %OP2036.PUSH1, %OP2031.PUSH1, %OP2027.MLOAD.contd, %OP2025.PUSH1, %OP2017.JUMPDEST, %OP2012.JUMPDEST, %OP2007.JUMPDEST, %OP1997.SWAP3, %OP1994.PUSH1, %OP1982.PUSH20, %OP1978.JUMPDEST, %OP1968.SWAP1, %OP1963.PUSH32, %OP1958.PUSH1, %OP1953.PUSH1, %OP1949.MLOAD.contd, %OP1947.PUSH1, %OP1938.JUMPDEST, %OP1933.JUMPDEST, %OP1908.SSTORE, %OP1906.SWAP1, %OP1903.SWAP1, %OP1900.CALLER, %OP1896.PUSH1, %OP1891.PUSH1, %OP1883.JUMPDEST, %OP1875.SLOAD, %OP1873.SWAP1, %OP1863.PUSH1, %OP1846.SLOAD, %OP1844.DUP2, %OP1834.PUSH1, %OP1816.JUMPDEST, %OP1809.JUMPDEST, %OP1770.JUMPDEST, %OP1673.SWAP1, %OP1668.PUSH32, %OP1663.PUSH1, %OP1658.PUSH1, %OP1654.MLOAD.contd, %OP1652.PUSH1, %OP1568.PUSH1, %OP1561.PUSH1, %OP1558.PUSH1, %OP1547.PUSH1, %OP1543.MLOAD.contd, %OP1542.PUSH1, %OP1455.JUMPDEST, %OP1448.RETURNDATASIZE, %OP1439.JUMPDEST, %OP1403.MLOAD.contd, %OP1402.SWAP1, %OP1397.ADDRESS, %OP1393.MLOAD.contd, %OP1390.MLOAD.contd, %OP1388.JUMPDEST, %OP1371.JUMPDEST, %OP1364.RETURNDATASIZE, %OP1355.JUMPDEST, %OP1323.MLOAD.contd, %OP1322.SWAP1, %OP1317.ADDRESS, %OP1313.MLOAD.contd, %OP1310.JUMPDEST, %OP1298.RETURNDATASIZE, %OP1289.JUMPDEST, %OP1272.MLOAD.contd, %OP1247.PUSH1, %OP1242.PUSH1, %OP1234.PUSH1, %OP1228.DUP5, %OP1218.PUSH1, %OP1213.PUSH1, %OP1208.PUSH1, %OP1198.PUSH1, %OP1190.MLOAD.contd, %OP1180.DUP9, %OP1143.SWAP1, %OP1138.PUSH32, %OP1133.PUSH1, %OP1128.PUSH1, %OP1124.MLOAD.contd, %OP1122.PUSH1, %OP1086.PUSH1, %OP1083.JUMPDEST, %OP1071.PUSH1, %OP1064.PUSH1, %OP1061.PUSH1, %OP1050.PUSH1, %OP1046.MLOAD.contd, %OP1045.PUSH1, %OP1003.PUSH1, %OP996.PUSH1, %OP993.PUSH1, %OP982.PUSH1, %OP978.MLOAD.contd, %OP977.PUSH1, %OP960.JUMPDEST, %OP950.SWAP1, %OP945.PUSH32, %OP940.PUSH1, %OP935.PUSH1, %OP931.MLOAD.contd, %OP929.PUSH1, %OP922.JUMPDEST, %OP757.DUP1, %OP750.PUSH1, %OP746.MLOAD.contd, %OP743.JUMPDEST, %OP601.MLOAD, %OP594.MLOAD.contd, %OP591.JUMPDEST, %OP538.MLOAD, %OP534.MLOAD.contd, %OP531.JUMPDEST, %OP518.MLOAD, %OP511.MLOAD.contd, %OP508.JUMPDEST, %OP495.MLOAD, %OP489.MLOAD.contd, %OP486.JUMPDEST, %OP449.SWAP1, %OP443.PUSH4, %OP435.SWAP3, %OP428.MLOAD.contd, %OP425.JUMPDEST, %OP408.JUMPDEST, %OP399.SUB, %OP392.MLOAD.contd, %OP388.DUP1, %OP335.DUP4, %OP330.MLOAD.contd, %OP329.DUP4, %OP324.MLOAD.contd, %OP321.JUMPDEST
  %len.addr.200 = phi i64 [ %len.addr.8, %OP213.JUMPDEST ], [ %424, %OP922.JUMPDEST ], [ %len.addr.55, %OP960.JUMPDEST ], [ %789, %OP1770.JUMPDEST ], [ %2513, %OP5218.PUSH1 ], [ %2513, %OP5220.MLOAD.contd ], [ %2513, %OP5224.PUSH1 ], [ %2513, %OP5229.PUSH1 ], [ %2513, %OP5234.PUSH32 ], [ %2513, %OP5239.SWAP1 ], [ %2508, %OP5240.MLOAD.contd ], [ %len.addr.181, %OP4932.PUSH1 ], [ %len.addr.176, %OP4806.MLOAD.contd ], [ %2353, %OP4787.JUMPDEST ], [ %2356, %OP4801.PUSH1 ], [ %2342, %OP4771.JUMPDEST ], [ %len.addr.198, %suspend ], [ %2320, %OP4725.JUMPDEST ], [ %2320, %OP4732.SWAP1 ], [ %2322, %OP4735.SWAP1 ], [ %2322, %OP4743.MLOAD.contd ], [ %2327, %OP4751.PUSH1 ], [ %2333, %OP4755.MLOAD.contd ], [ %2333, %OP4768.PUSH1 ], [ %2279, %OP4631.PUSH1 ], [ %2279, %OP4634.SLOAD ], [ %2217, %OP4579.PUSH1 ], [ %2212, %OP4592.SWAP2 ], [ %2211, %OP4596.DUP6 ], [ %len.addr.171, %OP4605.MLOAD.contd ], [ %2156, %OP4488.JUMPDEST ], [ %2158, %OP4492.PUSH32 ], [ %len.addr.170, %OP4546.MLOAD.contd ], [ %2149, %OP4472.JUMPDEST ], [ %2154, %OP4476.PUSH28 ], [ %2140, %OP4447.JUMPDEST ], [ %2145, %OP4451.PUSH28 ], [ %2113, %OP4385.JUMPDEST ], [ %2099, %OP4354.PUSH1 ], [ %2099, %OP4356.MLOAD.contd ], [ %2099, %OP4360.PUSH1 ], [ %2099, %OP4365.PUSH1 ], [ %2099, %OP4370.PUSH32 ], [ %2099, %OP4375.SWAP1 ], [ %2098, %OP4376.MLOAD.contd ], [ %2078, %OP4306.PUSH1 ], [ %2078, %OP4308.MLOAD.contd ], [ %2078, %OP4312.PUSH1 ], [ %2078, %OP4317.PUSH1 ], [ %2078, %OP4322.PUSH32 ], [ %2078, %OP4327.SWAP1 ], [ %2073, %OP4328.MLOAD.contd ], [ %2059, %OP4265.PUSH1 ], [ %2059, %OP4267.MLOAD.contd ], [ %2059, %OP4271.PUSH1 ], [ %2059, %OP4276.PUSH1 ], [ %2059, %OP4281.PUSH32 ], [ %2059, %OP4286.SWAP1 ], [ %2058, %OP4287.MLOAD.contd ], [ %2033, %OP4202.PUSH1 ], [ %2033, %OP4204.MLOAD.contd ], [ %2033, %OP4208.PUSH1 ], [ %2033, %OP4213.PUSH1 ], [ %2033, %OP4218.PUSH32 ], [ %2033, %OP4223.SWAP1 ], [ %2032, %OP4224.MLOAD.contd ], [ %1990, %OP4193.PUSH1 ], [ %1940, %OP4078.JUMPDEST ], [ %1941, %OP4085.SUB ], [ %1948, %OP4089.MLOAD.contd ], [ %1941, %OP4093.MLOAD.contd ], [ %1953, %OP4100.POP ], [ %1958, %OP4114.MLOAD.contd ], [ %1881, %OP3974.JUMPDEST ], [ %1881, %OP3977.MLOAD.contd ], [ %1881, %OP3983.PUSH1 ], [ %1881, %OP3986.PUSH32 ], [ %1883, %OP3992.DUP2 ], [ %1884, %OP3993.MLOAD.contd ], [ %1888, %OP4002.PUSH1 ], [ %1892, %OP4009.DUP5 ], [ %1888, %OP4010.MLOAD.contd ], [ %1884, %OP4019.PUSH1 ], [ %1888, %OP4025.SWAP2 ], [ %1884, %OP4029.MLOAD.contd ], [ %1884, %OP4036.SWAP3 ], [ %1888, %OP4037.MLOAD.contd ], [ %len.addr.154, %OP3955.MLOAD.contd ], [ %1854, %OP3936.JUMPDEST ], [ %1857, %OP3950.PUSH1 ], [ %1843, %OP3920.JUMPDEST ], [ %1818, %OP3869.JUMPDEST ], [ %len.addr.151, %OP3871.MLOAD.contd ], [ %1822, %OP3874.PUSH1 ], [ %1822, %OP3876.MLOAD.contd ], [ %1822, %OP3880.ADDRESS ], [ %1822, %OP3885.SWAP1 ], [ %1834, %OP3886.MLOAD.contd ], [ %1834, %OP3917.PUSH1 ], [ %1810, %OP3852.JUMPDEST ], [ %1813, %OP3866.PUSH1 ], [ %1799, %OP3836.JUMPDEST ], [ %len.addr.148, %OP3785.JUMPDEST ], [ %.pre-phi, %OP3789.PUSH1 ], [ %1778, %OP3791.PUSH1 ], [ %1778, %OP3793.MLOAD.contd ], [ %1778, %OP3797.ADDRESS ], [ %1778, %OP3802.SWAP1 ], [ %1790, %OP3803.MLOAD.contd ], [ %1790, %OP3833.PUSH1 ], [ %1759, %OP3747.JUMPDEST ], [ %1761, %OP3754.PUSH1 ], [ %1761, %OP3756.MLOAD.contd ], [ %1761, %OP3760.PUSH1 ], [ %1761, %OP3765.PUSH1 ], [ %1761, %OP3770.PUSH32 ], [ %1761, %OP3775.SWAP1 ], [ %len.addr.147, %OP3776.MLOAD.contd ], [ %1727, %OP3732.PUSH1 ], [ %1756, %OP3742.SWAP1 ], [ %1756, %OP3744.SLOAD ], [ %1710, %OP3673.PUSH1 ], [ %1710, %OP3675.MLOAD.contd ], [ %1710, %OP3679.PUSH1 ], [ %1710, %OP3684.PUSH1 ], [ %1710, %OP3689.PUSH32 ], [ %1710, %OP3694.SWAP1 ], [ %1709, %OP3695.MLOAD.contd ], [ %1686, %OP3642.JUMPDEST ], [ %1606, %OP3439.JUMPDEST ], [ %1608, %OP3442.PUSH20 ], [ %1610, %OP3450.PUSH1 ], [ %1613, %OP3455.PUSH1 ], [ %1615, %OP3459.DUP1 ], [ %1615, %OP3461.PUSH1 ], [ %1618, %OP3468.DUP3 ], [ %1618, %OP3469.MLOAD.contd ], [ %1615, %OP3475.DUP1 ], [ %1613, %OP3482.SWAP6 ], [ %1613, %OP3489.PUSH1 ], [ %1611, %OP3495.PUSH1 ], [ %1613, %OP3502.PUSH1 ], [ %1615, %OP3509.DUP2 ], [ %1613, %OP3510.MLOAD.contd ], [ %1613, %OP3519.PUSH1 ], [ %1615, %OP3524.DUP1 ], [ %1613, %OP3525.MLOAD.contd ], [ %1613, %OP3530.PUSH32 ], [ %1611, %OP3535.PUSH2 ], [ %1611, %OP3542.PUSH2 ], [ %1613, %OP3550.DUP1 ], [ %1611, %OP3551.MLOAD.contd ], [ %1613, %OP3560.PUSH2 ], [ %1615, %OP3566.DUP7 ], [ %1613, %OP3567.MLOAD.contd ], [ %1611, %OP3575.SWAP6 ], [ %1613, %OP3579.PUSH2 ], [ %1611, %OP3585.DUP7 ], [ %1611, %OP3588.PUSH1 ], [ %1611, %OP3595.PUSH2 ], [ %1611, %OP3601.PUSH2 ], [ %1611, %OP3607.MLOAD ], [ %1608, %OP3607.MLOAD.contd ], [ %1591, %OP3408.PUSH1 ], [ %1591, %OP3410.MLOAD.contd ], [ %1591, %OP3414.PUSH1 ], [ %1591, %OP3419.PUSH1 ], [ %1591, %OP3424.PUSH32 ], [ %1591, %OP3429.SWAP1 ], [ %len.addr.141, %OP3430.MLOAD.contd ], [ %1588, %OP3394.JUMPDEST ], [ %1585, %OP3387.JUMPDEST ], [ %1559, %OP3317.JUMPDEST ], [ %1561, %OP3320.PUSH1 ], [ %1561, %OP3322.MLOAD.contd ], [ %1561, %OP3326.ADDRESS ], [ %1561, %OP3331.SWAP1 ], [ %1575, %OP3332.MLOAD.contd ], [ %1528, %OP3273.JUMPDEST ], [ %1575, %OP3376.PUSH1 ], [ %1539, %OP3289.JUMPDEST ], [ %1542, %OP3303.PUSH1 ], [ %len.addr.135, %OP3200.JUMPDEST ], [ %.pre-phi25838, %OP3204.PUSH1 ], [ %.pre-phi25840, %OP3206.PUSH1 ], [ %1503, %OP3208.PUSH1 ], [ %1505, %OP3210.PUSH1 ], [ %1505, %OP3212.MLOAD.contd ], [ %1505, %OP3216.ADDRESS ], [ %1505, %OP3221.SWAP1 ], [ %1519, %OP3222.MLOAD.contd ], [ %1519, %OP3270.PUSH1 ], [ %1483, %OP3162.JUMPDEST ], [ %1485, %OP3169.PUSH1 ], [ %1485, %OP3171.MLOAD.contd ], [ %1485, %OP3175.PUSH1 ], [ %1485, %OP3180.PUSH1 ], [ %1485, %OP3185.PUSH32 ], [ %1485, %OP3190.SWAP1 ], [ %len.addr.134, %OP3191.MLOAD.contd ], [ %1471, %OP3130.JUMPDEST ], [ %1471, %OP3132.MLOAD.contd ], [ %1473, %OP3138.DUP1 ], [ %1473, %OP3142.PUSH1 ], [ %1394, %OP3025.JUMPDEST ], [ %1397, %OP3039.PUSH1 ], [ %1383, %OP3009.JUMPDEST ], [ %1359, %OP2958.JUMPDEST ], [ %1362, %OP2960.MLOAD.contd ], [ %1362, %OP2963.MLOAD.contd ], [ %1362, %OP2967.ADDRESS ], [ %1362, %OP2972.SWAP1 ], [ %1374, %OP2973.MLOAD.contd ], [ %1374, %OP3006.PUSH1 ], [ %1351, %OP2941.JUMPDEST ], [ %1354, %OP2955.PUSH1 ], [ %1340, %OP2925.JUMPDEST ], [ %1319, %OP2880.JUMPDEST ], [ %1319, %OP2883.MLOAD.contd ], [ %1319, %OP2887.ADDRESS ], [ %1319, %OP2892.SWAP1 ], [ %1331, %OP2893.MLOAD.contd ], [ %1331, %OP2922.PUSH1 ], [ %len.addr.122, %OP2822.PUSH1 ], [ %len.addr.122, %OP2823.MLOAD.contd ], [ %1304, %OP2827.PUSH1 ], [ %1304, %OP2838.PUSH1 ], [ %1304, %OP2841.PUSH1 ], [ %1303, %OP2848.PUSH1 ], [ %1301, %OP2854.MLOAD.contd ], [ %1274, %OP2745.JUMPDEST ], [ %len.addr.119, %OP2747.MLOAD.contd ], [ %len.addr.119, %OP2753.PUSH1 ], [ %1279, %OP2756.PUSH1 ], [ %1279, %OP2759.SLOAD ], [ %1266, %OP2728.JUMPDEST ], [ %1269, %OP2742.PUSH1 ], [ %1255, %OP2712.JUMPDEST ], [ %1231, %OP2660.JUMPDEST ], [ %1234, %OP2662.MLOAD.contd ], [ %1234, %OP2665.MLOAD.contd ], [ %1234, %OP2669.ADDRESS ], [ %1234, %OP2674.SWAP1 ], [ %1246, %OP2675.MLOAD.contd ], [ %1246, %OP2709.PUSH1 ], [ %1223, %OP2643.JUMPDEST ], [ %1226, %OP2657.PUSH1 ], [ %1212, %OP2627.JUMPDEST ], [ %len.addr.197, %OP2563.JUMPDEST ], [ %1188, %OP2567.PUSH1 ], [ %1190, %OP2569.PUSH1 ], [ %1190, %OP2571.MLOAD.contd ], [ %1190, %OP2575.ADDRESS ], [ %1190, %OP2580.SWAP1 ], [ %1203, %OP2581.MLOAD.contd ], [ %1203, %OP2624.PUSH1 ], [ %1183, %OP2553.JUMPDEST ], [ %1166, %OP2513.JUMPDEST ], [ %1168, %OP2522.PUSH1 ], [ %1168, %OP2524.MLOAD.contd ], [ %1168, %OP2528.PUSH1 ], [ %1168, %OP2533.PUSH1 ], [ %1168, %OP2538.PUSH32 ], [ %1168, %OP2543.SWAP1 ], [ %1165, %OP2544.MLOAD.contd ], [ %len.addr.111, %OP2507.PUSH1 ], [ %len.addr.111, %OP2510.SLOAD ], [ %1154, %OP2494.JUMPDEST ], [ %len.addr.109, %OP2480.JUMPDEST ], [ %len.addr.109, %OP2484.PUSH1 ], [ %len.addr.109, %OP2488.PUSH1 ], [ %len.addr.109, %OP2491.SLOAD ], [ %1076, %OP2362.PUSH1 ], [ %1076, %OP2363.MLOAD.contd ], [ %1081, %OP2367.PUSH1 ], [ %1081, %OP2378.PUSH1 ], [ %1081, %OP2381.PUSH1 ], [ %1079, %OP2388.PUSH1 ], [ %len.addr.106, %OP2394.MLOAD.contd ], [ %1033, %OP2228.JUMPDEST ], [ %1036, %OP2242.PUSH1 ], [ %1022, %OP2212.JUMPDEST ], [ %997, %OP2156.JUMPDEST ], [ %len.addr.99, %OP2158.MLOAD.contd ], [ %1001, %OP2161.PUSH1 ], [ %1001, %OP2163.MLOAD.contd ], [ %1001, %OP2167.ADDRESS ], [ %1001, %OP2172.SWAP1 ], [ %1013, %OP2173.MLOAD.contd ], [ %1013, %OP2209.PUSH1 ], [ %989, %OP2139.JUMPDEST ], [ %992, %OP2153.PUSH1 ], [ %978, %OP2123.JUMPDEST ], [ %len.addr.197, %OP2066.JUMPDEST ], [ %957, %OP2070.PUSH1 ], [ %957, %OP2072.MLOAD.contd ], [ %957, %OP2076.ADDRESS ], [ %957, %OP2081.SWAP1 ], [ %969, %OP2082.MLOAD.contd ], [ %969, %OP2120.PUSH1 ], [ %952, %OP2056.JUMPDEST ], [ %935, %OP2017.JUMPDEST ], [ %937, %OP2025.PUSH1 ], [ %937, %OP2027.MLOAD.contd ], [ %937, %OP2031.PUSH1 ], [ %937, %OP2036.PUSH1 ], [ %937, %OP2041.PUSH32 ], [ %937, %OP2046.SWAP1 ], [ %934, %OP2047.MLOAD.contd ], [ %932, %OP2012.JUMPDEST ], [ %930, %OP2007.JUMPDEST ], [ %.pre-phi25803, %OP1978.JUMPDEST ], [ %.pre-phi25801, %OP1982.PUSH20 ], [ %918, %OP1994.PUSH1 ], [ %927, %OP1997.SWAP3 ], [ %897, %OP1938.JUMPDEST ], [ %899, %OP1947.PUSH1 ], [ %899, %OP1949.MLOAD.contd ], [ %899, %OP1953.PUSH1 ], [ %899, %OP1958.PUSH1 ], [ %899, %OP1963.PUSH32 ], [ %899, %OP1968.SWAP1 ], [ %len.addr.91, %OP1969.MLOAD.contd ], [ %895, %OP1933.JUMPDEST ], [ %876, %OP1883.JUMPDEST ], [ %877, %OP1891.PUSH1 ], [ %880, %OP1896.PUSH1 ], [ %880, %OP1900.CALLER ], [ %877, %OP1903.SWAP1 ], [ %876, %OP1906.SWAP1 ], [ %888, %OP1908.SSTORE ], [ %814, %OP1834.PUSH1 ], [ %807, %OP1844.DUP2 ], [ %807, %OP1846.SLOAD ], [ %818, %OP1863.PUSH1 ], [ %807, %OP1873.SWAP1 ], [ %807, %OP1875.SLOAD ], [ %804, %OP1816.JUMPDEST ], [ %801, %OP1809.JUMPDEST ], [ %len.addr.197, %OP1652.PUSH1 ], [ %len.addr.197, %OP1654.MLOAD.contd ], [ %len.addr.197, %OP1658.PUSH1 ], [ %len.addr.197, %OP1663.PUSH1 ], [ %len.addr.197, %OP1668.PUSH32 ], [ %len.addr.197, %OP1673.SWAP1 ], [ %724, %OP1674.MLOAD.contd ], [ %len.addr.77, %OP1542.PUSH1 ], [ %len.addr.77, %OP1543.MLOAD.contd ], [ %700, %OP1547.PUSH1 ], [ %700, %OP1558.PUSH1 ], [ %700, %OP1561.PUSH1 ], [ %699, %OP1568.PUSH1 ], [ %697, %OP1574.MLOAD.contd ], [ %654, %OP1455.JUMPDEST ], [ %657, %OP1469.PUSH1 ], [ %643, %OP1439.JUMPDEST ], [ %619, %OP1388.JUMPDEST ], [ %622, %OP1390.MLOAD.contd ], [ %622, %OP1393.MLOAD.contd ], [ %622, %OP1397.ADDRESS ], [ %622, %OP1402.SWAP1 ], [ %634, %OP1403.MLOAD.contd ], [ %634, %OP1436.PUSH1 ], [ %611, %OP1371.JUMPDEST ], [ %614, %OP1385.PUSH1 ], [ %600, %OP1355.JUMPDEST ], [ %579, %OP1310.JUMPDEST ], [ %579, %OP1313.MLOAD.contd ], [ %579, %OP1317.ADDRESS ], [ %579, %OP1322.SWAP1 ], [ %591, %OP1323.MLOAD.contd ], [ %591, %OP1352.PUSH1 ], [ %567, %OP1289.JUMPDEST ], [ %530, %OP1180.DUP9 ], [ %530, %OP1190.MLOAD.contd ], [ %532, %OP1198.PUSH1 ], [ %532, %OP1208.PUSH1 ], [ %532, %OP1213.PUSH1 ], [ %533, %OP1218.PUSH1 ], [ %548, %OP1228.DUP5 ], [ %545, %OP1234.PUSH1 ], [ %545, %OP1242.PUSH1 ], [ %529, %OP1247.PUSH1 ], [ %533, %OP1272.MLOAD.contd ], [ %533, %OP1286.PUSH1 ], [ %503, %OP1122.PUSH1 ], [ %503, %OP1124.MLOAD.contd ], [ %503, %OP1128.PUSH1 ], [ %503, %OP1133.PUSH1 ], [ %503, %OP1138.PUSH32 ], [ %503, %OP1143.SWAP1 ], [ %502, %OP1144.MLOAD.contd ], [ %488, %OP1083.JUMPDEST ], [ %490, %OP1086.PUSH1 ], [ %len.addr.58, %OP1045.PUSH1 ], [ %len.addr.58, %OP1046.MLOAD.contd ], [ %476, %OP1050.PUSH1 ], [ %476, %OP1061.PUSH1 ], [ %476, %OP1064.PUSH1 ], [ %475, %OP1071.PUSH1 ], [ %473, %OP1077.MLOAD.contd ], [ %411, %OP901.PUSH1 ], [ %387, %OP843.PUSH1 ], [ %374, %OP813.PUSH1 ], [ %361, %OP782.PUSH1 ], [ %350, %OP743.JUMPDEST ], [ %349, %OP746.MLOAD.contd ], [ %len.addr.197, %OP750.PUSH1 ], [ %349, %OP757.DUP1 ], [ %358, %OP758.MLOAD.contd ], [ %338, %OP733.PUSH1 ], [ %327, %OP711.PUSH1 ], [ %315, %OP685.PUSH1 ], [ %304, %OP663.PUSH1 ], [ %289, %OP626.PUSH1 ], [ %279, %OP591.JUMPDEST ], [ %278, %OP594.MLOAD.contd ], [ %278, %OP601.MLOAD ], [ %286, %OP601.MLOAD.contd ], [ %260, %OP559.PUSH1 ], [ %252, %OP531.JUMPDEST ], [ %251, %OP534.MLOAD.contd ], [ %251, %OP538.MLOAD ], [ %258, %OP538.MLOAD.contd ], [ %241, %OP508.JUMPDEST ], [ %240, %OP511.MLOAD.contd ], [ %240, %OP518.MLOAD ], [ %248, %OP518.MLOAD.contd ], [ %229, %OP486.JUMPDEST ], [ %228, %OP489.MLOAD.contd ], [ %228, %OP495.MLOAD ], [ %237, %OP495.MLOAD.contd ], [ %216, %OP471.PUSH1 ], [ %200, %OP425.JUMPDEST ], [ %200, %OP428.MLOAD.contd ], [ %len.addr.197, %OP435.SWAP3 ], [ %207, %OP443.PUSH4 ], [ %207, %OP449.SWAP1 ], [ %214, %OP450.MLOAD.contd ], [ %194, %OP408.JUMPDEST ], [ %197, %OP415.MLOAD.contd ], [ %176, %OP388.DUP1 ], [ %175, %OP392.MLOAD.contd ], [ %189, %OP399.SUB ], [ %135, %OP321.JUMPDEST ], [ %137, %OP324.MLOAD.contd ], [ %138, %OP329.DUP4 ], [ %137, %OP330.MLOAD.contd ], [ %138, %OP335.DUP4 ], [ %len.addr.56, %OP977.PUSH1 ], [ %len.addr.56, %OP978.MLOAD.contd ], [ %450, %OP982.PUSH1 ], [ %450, %OP993.PUSH1 ], [ %450, %OP996.PUSH1 ], [ %449, %OP1003.PUSH1 ], [ %447, %OP1009.MLOAD.contd ], [ %426, %OP929.PUSH1 ], [ %426, %OP931.MLOAD.contd ], [ %426, %OP935.PUSH1 ], [ %426, %OP940.PUSH1 ], [ %426, %OP945.PUSH32 ], [ %426, %OP950.SWAP1 ], [ %len.addr.54, %OP951.MLOAD.contd ], [ %118, %OP303.PUSH1 ], [ %len.addr.11, %OP279.PUSH1 ], [ %101, %OP265.PUSH1 ], [ %90, %OP229.PUSH1 ], [ 1, %OP8.PUSH1 ], [ %stack_len17730, %OP1298.RETURNDATASIZE ], [ %stack_len17730, %OP1302.RETURNDATASIZE ], [ %stack_len17730, %OP4780.RETURNDATASIZE ], [ %stack_len17730, %OP4784.RETURNDATASIZE ], [ %stack_len17730, %OP4150.RETURNDATASIZE ], [ %stack_len17730, %OP3929.RETURNDATASIZE ], [ %stack_len17730, %OP3933.RETURNDATASIZE ], [ %stack_len17730, %OP3845.RETURNDATASIZE ], [ %stack_len17730, %OP3849.RETURNDATASIZE ], [ %stack_len17730, %OP3635.RETURNDATASIZE ], [ %stack_len17730, %OP3639.RETURNDATASIZE ], [ %stack_len17730, %OP3282.RETURNDATASIZE ], [ %stack_len17730, %OP3286.RETURNDATASIZE ], [ %stack_len17730, %OP3018.RETURNDATASIZE ], [ %stack_len17730, %OP3022.RETURNDATASIZE ], [ %stack_len17730, %OP2934.RETURNDATASIZE ], [ %stack_len17730, %OP2938.RETURNDATASIZE ], [ %stack_len17730, %OP2721.RETURNDATASIZE ], [ %stack_len17730, %OP2725.RETURNDATASIZE ], [ %stack_len17730, %OP2636.RETURNDATASIZE ], [ %stack_len17730, %OP2640.RETURNDATASIZE ], [ %stack_len17730, %OP2221.RETURNDATASIZE ], [ %stack_len17730, %OP2225.RETURNDATASIZE ], [ %stack_len17730, %OP2132.RETURNDATASIZE ], [ %stack_len17730, %OP2136.RETURNDATASIZE ], [ %stack_len17730, %OP1448.RETURNDATASIZE ], [ %stack_len17730, %OP1452.RETURNDATASIZE ], [ %stack_len17730, %OP1364.RETURNDATASIZE ], [ %stack_len17730, %OP1368.RETURNDATASIZE ], [ 0, %resize.i ], [ %671, %resize.i24110 ], [ %759, %resize.i24126 ], [ %759, %resize.i24141 ], [ %764, %resize.i24156 ], [ %764, %resize.i24171 ], [ %806, %resize.i24185 ], [ %807, %resize.i24200 ], [ %814, %resize.i24215 ], [ %807, %resize.i24230 ], [ %807, %resize.i24244 ], [ %809, %resize.i24259 ], [ %818, %resize.i24274 ], [ %809, %resize.i24289 ], [ %1041, %resize.i24305 ], [ %len.addr.111, %resize.i24382 ], [ %len.addr.111, %resize.i24396 ], [ %1402, %resize.i24412 ], [ %1547, %resize.i24490 ], [ %1686, %resize.i24506 ], [ %1726, %resize.i24521 ], [ %1726, %resize.i24535 ], [ %1726, %resize.i24550 ], [ %len.addr.146, %resize.i24565 ], [ %1862, %resize.i24581 ], [ %1962, %resize.i24628 ], [ %stack_len17730, %resize.i24643 ], [ %stack_len17730, %resize.i24658 ], [ %1992, %resize.i24674 ], [ %1990, %resize.i24690 ], [ %2020, %resize.i24706 ], [ %2159, %resize.i24722 ], [ %2159, %resize.i24737 ], [ %2156, %resize.i24752 ], [ %2158, %resize.i24768 ], [ %2209, %resize.i24782 ], [ %2211, %resize.i24797 ], [ %2217, %resize.i24812 ], [ %2212, %resize.i24827 ], [ %2212, %resize.i24843 ], [ %2212, %resize.i24858 ], [ %2212, %resize.i24874 ], [ %2279, %resize.i24888 ], [ %2279, %resize.i24903 ], [ %2361, %resize.i24919 ], [ %2528, %return.loopexit25073.split.loop.exit25299 ], [ %2529, %return.loopexit25073.split.loop.exit25314 ], [ %2530, %return.loopexit25073.split.loop.exit25329 ], [ %2531, %return.loopexit25073.split.loop.exit25332 ], [ %2532, %return.loopexit25073.split.loop.exit25380 ], [ %2533, %return.loopexit25073.split.loop.exit25425 ], [ %2534, %return.loopexit25073.split.loop.exit25461 ], [ %len.addr.197, %dynamic_jump_table ], [ %len.addr.15.ph, %resize.i24094 ], [ %147, %resize.i24080 ], [ %len.addr.156.ph, %resize.i24612 ], [ %1913, %resize.i24597 ], [ %741, %OP1693.JUMPDEST ], [ %741, %OP1696.MLOAD.contd ], [ %741, %OP1700.PUSH1 ], [ %741, %OP1706.DUP1 ], [ %741, %OP1712.PUSH1 ], [ %741, %OP1718.SWAP1 ], [ %len.addr.197, %OP1719.MLOAD.contd ], [ %1059, %OP2282.JUMPDEST ], [ %1095, %OP2419.PUSH1 ], [ %1104, %OP2436.JUMPDEST ], [ %len.addr.108, %OP2453.MLOAD.contd ], [ %1284, %OP2768.JUMPDEST ], [ %1415, %OP3059.PUSH1 ], [ %1424, %OP3076.JUMPDEST ], [ %len.addr.130, %OP3093.MLOAD.contd ], [ %len.addr.197, %OP3969.JUMPDEST ], [ %2292, %OP4642.JUMPDEST ], [ %2292, %OP4651.PUSH1 ], [ %2294, %OP4654.PUSH1 ], [ %2292, %OP4658.SWAP4 ], [ %2291, %OP4662.SWAP1 ], [ %len.addr.197, %OP4667.KECCAK256 ], [ %len.addr.197, %OP4668.SLOAD ], [ %2303, %OP4676.JUMPDEST ], [ %2305, %OP4685.PUSH1 ], [ %2306, %OP4690.PUSH1 ], [ %2303, %OP4695.SWAP5 ], [ %2305, %OP4699.DUP1 ], [ %2305, %OP4700.MLOAD.contd ], [ %2305, %OP4704.SWAP1 ], [ %2391, %OP4867.JUMPDEST ], [ %2435, %OP5005.JUMPDEST ], [ %len.addr.197, %OP5015.JUMPDEST ], [ %len.addr.197, %OP5020.PUSH20 ], [ %len.addr.197, %OP5025.PUSH1 ], [ %len.addr.197, %OP5028.PUSH1 ], [ %len.addr.197, %OP5031.SLOAD ], [ %2445, %OP5039.JUMPDEST ], [ %2447, %OP5047.PUSH1 ], [ %2451, %OP5052.PUSH1 ], [ %2447, %OP5056.SWAP5 ], [ %2448, %OP5060.DUP4 ], [ %2448, %OP5061.MLOAD.contd ], [ %2448, %OP5065.SWAP4 ], [ %2469, %OP5114.PUSH1 ], [ %2469, %OP5117.SLOAD ], [ %2481, %OP5125.JUMPDEST ], [ %2481, %OP5133.PUSH1 ], [ %2482, %OP5136.PUSH1 ], [ %len.addr.197, %OP5139.SWAP2 ], [ %len.addr.197, %OP5143.SLOAD ], [ %len.addr.197, %OP5151.JUMPDEST ], [ %2489, %OP5156.PUSH1 ], [ %2489, %OP5158.MLOAD.contd ], [ %2489, %OP5162.SWAP1 ], [ %2502, %OP5188.JUMPDEST ], [ %2424, %OP4976.JUMPDEST ], [ %2421, %OP4965.DUP1 ], [ %2397, %OP4894.JUMPDEST ], [ %len.addr.197, %OP2799.JUMPDEST ], [ %len.addr.197, %OP2782.JUMPDEST ], [ %len.addr.197, %OP2344.JUMPDEST ], [ %len.addr.197, %OP2327.JUMPDEST ], [ %1106, %resize.i24321 ], [ %1106, %resize.i24336 ], [ %1106, %resize.i24351 ], [ %1111, %resize.i24367 ], [ %1426, %resize.i24428 ], [ %1426, %resize.i24443 ], [ %1426, %resize.i24458 ], [ %1431, %resize.i24474 ], [ %2469, %resize.i24933 ], [ %2469, %resize.i24948 ], [ %len.addr.197, %return.loopexit26312 ]
  %2535 = phi i8 [ %spec.select17733, %OP213.JUMPDEST ], [ %425, %OP922.JUMPDEST ], [ %442, %OP960.JUMPDEST ], [ %790, %OP1770.JUMPDEST ], [ %2514, %OP5218.PUSH1 ], [ %2515, %OP5220.MLOAD.contd ], [ %2517, %OP5224.PUSH1 ], [ %2519, %OP5229.PUSH1 ], [ %2521, %OP5234.PUSH32 ], [ %2522, %OP5239.SWAP1 ], [ %spec.select17816, %OP5240.MLOAD.contd ], [ %2409, %OP4932.PUSH1 ], [ %2373, %OP4806.MLOAD.contd ], [ %2355, %OP4787.JUMPDEST ], [ %spec.select17815, %OP4801.PUSH1 ], [ %2343, %OP4771.JUMPDEST ], [ 32, %suspend ], [ %2321, %OP4725.JUMPDEST ], [ %2323, %OP4732.SWAP1 ], [ %2326, %OP4735.SWAP1 ], [ %2329, %OP4743.MLOAD.contd ], [ %2331, %OP4751.PUSH1 ], [ %2334, %OP4755.MLOAD.contd ], [ %spec.select17813, %OP4768.PUSH1 ], [ %2289, %OP4631.PUSH1 ], [ %2290, %OP4634.SLOAD ], [ %2221, %OP4579.PUSH1 ], [ %2243, %OP4592.SWAP2 ], [ %2244, %OP4596.DUP6 ], [ %2277, %OP4605.MLOAD.contd ], [ %2157, %OP4488.JUMPDEST ], [ %2166, %OP4492.PUSH32 ], [ %2207, %OP4546.MLOAD.contd ], [ %2150, %OP4472.JUMPDEST ], [ %2155, %OP4476.PUSH28 ], [ %2141, %OP4447.JUMPDEST ], [ %2146, %OP4451.PUSH28 ], [ %2114, %OP4385.JUMPDEST ], [ %2101, %OP4354.PUSH1 ], [ %2102, %OP4356.MLOAD.contd ], [ %2104, %OP4360.PUSH1 ], [ %2106, %OP4365.PUSH1 ], [ %2108, %OP4370.PUSH32 ], [ %2109, %OP4375.SWAP1 ], [ %spec.select17812, %OP4376.MLOAD.contd ], [ %2079, %OP4306.PUSH1 ], [ %2080, %OP4308.MLOAD.contd ], [ %2082, %OP4312.PUSH1 ], [ %2084, %OP4317.PUSH1 ], [ %2086, %OP4322.PUSH32 ], [ %2087, %OP4327.SWAP1 ], [ %spec.select17811, %OP4328.MLOAD.contd ], [ %2061, %OP4265.PUSH1 ], [ %2062, %OP4267.MLOAD.contd ], [ %2064, %OP4271.PUSH1 ], [ %2066, %OP4276.PUSH1 ], [ %2068, %OP4281.PUSH32 ], [ %2069, %OP4286.SWAP1 ], [ %spec.select17810, %OP4287.MLOAD.contd ], [ %2035, %OP4202.PUSH1 ], [ %2036, %OP4204.MLOAD.contd ], [ %2038, %OP4208.PUSH1 ], [ %2040, %OP4213.PUSH1 ], [ %2042, %OP4218.PUSH32 ], [ %2043, %OP4223.SWAP1 ], [ %spec.select17809, %OP4224.MLOAD.contd ], [ %spec.select17808, %OP4193.PUSH1 ], [ %1943, %OP4078.JUMPDEST ], [ %1946, %OP4085.SUB ], [ %1949, %OP4089.MLOAD.contd ], [ %1952, %OP4093.MLOAD.contd ], [ %1955, %OP4100.POP ], [ %1959, %OP4114.MLOAD.contd ], [ %1882, %OP3974.JUMPDEST ], [ %1886, %OP3977.MLOAD.contd ], [ %1887, %OP3983.PUSH1 ], [ %1890, %OP3986.PUSH32 ], [ %1891, %OP3992.DUP2 ], [ %1895, %OP3993.MLOAD.contd ], [ %1897, %OP4002.PUSH1 ], [ %1898, %OP4009.DUP5 ], [ %1901, %OP4010.MLOAD.contd ], [ %1903, %OP4019.PUSH1 ], [ %1905, %OP4025.SWAP2 ], [ %1908, %OP4029.MLOAD.contd ], [ %1909, %OP4036.SWAP3 ], [ %1910, %OP4037.MLOAD.contd ], [ %1874, %OP3955.MLOAD.contd ], [ %1856, %OP3936.JUMPDEST ], [ %spec.select17807, %OP3950.PUSH1 ], [ %1844, %OP3920.JUMPDEST ], [ %1820, %OP3869.JUMPDEST ], [ %1821, %OP3871.MLOAD.contd ], [ %1823, %OP3874.PUSH1 ], [ %1824, %OP3876.MLOAD.contd ], [ %1828, %OP3880.ADDRESS ], [ %1829, %OP3885.SWAP1 ], [ %1835, %OP3886.MLOAD.contd ], [ %spec.select17805, %OP3917.PUSH1 ], [ %1812, %OP3852.JUMPDEST ], [ %spec.select17804, %OP3866.PUSH1 ], [ %1800, %OP3836.JUMPDEST ], [ %1776, %OP3785.JUMPDEST ], [ %1777, %OP3789.PUSH1 ], [ %1779, %OP3791.PUSH1 ], [ %1780, %OP3793.MLOAD.contd ], [ %1784, %OP3797.ADDRESS ], [ %1785, %OP3802.SWAP1 ], [ %1791, %OP3803.MLOAD.contd ], [ %spec.select17802, %OP3833.PUSH1 ], [ %1760, %OP3747.JUMPDEST ], [ %1764, %OP3754.PUSH1 ], [ %1765, %OP3756.MLOAD.contd ], [ %1767, %OP3760.PUSH1 ], [ %1769, %OP3765.PUSH1 ], [ %1771, %OP3770.PUSH32 ], [ %1772, %OP3775.SWAP1 ], [ %spec.select17801, %OP3776.MLOAD.contd ], [ %1735, %OP3732.PUSH1 ], [ %1757, %OP3742.SWAP1 ], [ %1758, %OP3744.SLOAD ], [ %1712, %OP3673.PUSH1 ], [ %1713, %OP3675.MLOAD.contd ], [ %1715, %OP3679.PUSH1 ], [ %1717, %OP3684.PUSH1 ], [ %1719, %OP3689.PUSH32 ], [ %1720, %OP3694.SWAP1 ], [ %spec.select17800, %OP3695.MLOAD.contd ], [ %1688, %OP3642.JUMPDEST ], [ %1607, %OP3439.JUMPDEST ], [ %1612, %OP3442.PUSH20 ], [ %1614, %OP3450.PUSH1 ], [ %1616, %OP3455.PUSH1 ], [ %1617, %OP3459.DUP1 ], [ %1620, %OP3461.PUSH1 ], [ %1621, %OP3468.DUP3 ], [ %1623, %OP3469.MLOAD.contd ], [ %1625, %OP3475.DUP1 ], [ %1628, %OP3482.SWAP6 ], [ %1630, %OP3489.PUSH1 ], [ %1632, %OP3495.PUSH1 ], [ %1634, %OP3502.PUSH1 ], [ %1635, %OP3509.DUP2 ], [ %1638, %OP3510.MLOAD.contd ], [ %1640, %OP3519.PUSH1 ], [ %1641, %OP3524.DUP1 ], [ %1643, %OP3525.MLOAD.contd ], [ %1645, %OP3530.PUSH32 ], [ %1647, %OP3535.PUSH2 ], [ %1649, %OP3542.PUSH2 ], [ %1650, %OP3550.DUP1 ], [ %1653, %OP3551.MLOAD.contd ], [ %1655, %OP3560.PUSH2 ], [ %1656, %OP3566.DUP7 ], [ %1658, %OP3567.MLOAD.contd ], [ %1659, %OP3575.SWAP6 ], [ %1661, %OP3579.PUSH2 ], [ %1662, %OP3585.DUP7 ], [ %1665, %OP3588.PUSH1 ], [ %1667, %OP3595.PUSH2 ], [ %1669, %OP3601.PUSH2 ], [ %1670, %OP3607.MLOAD ], [ %1676, %OP3607.MLOAD.contd ], [ %1594, %OP3408.PUSH1 ], [ %1595, %OP3410.MLOAD.contd ], [ %1597, %OP3414.PUSH1 ], [ %1599, %OP3419.PUSH1 ], [ %1601, %OP3424.PUSH32 ], [ %1602, %OP3429.SWAP1 ], [ %spec.select17798, %OP3430.MLOAD.contd ], [ %1589, %OP3394.JUMPDEST ], [ %1586, %OP3387.JUMPDEST ], [ %1560, %OP3317.JUMPDEST ], [ %1562, %OP3320.PUSH1 ], [ %1563, %OP3322.MLOAD.contd ], [ %1567, %OP3326.ADDRESS ], [ %1568, %OP3331.SWAP1 ], [ %1576, %OP3332.MLOAD.contd ], [ %1529, %OP3273.JUMPDEST ], [ %spec.select17797, %OP3376.PUSH1 ], [ %1541, %OP3289.JUMPDEST ], [ %spec.select17796, %OP3303.PUSH1 ], [ %1500, %OP3200.JUMPDEST ], [ %1501, %OP3204.PUSH1 ], [ %1502, %OP3206.PUSH1 ], [ %1504, %OP3208.PUSH1 ], [ %1506, %OP3210.PUSH1 ], [ %1507, %OP3212.MLOAD.contd ], [ %1511, %OP3216.ADDRESS ], [ %1512, %OP3221.SWAP1 ], [ %1520, %OP3222.MLOAD.contd ], [ %spec.select17794, %OP3270.PUSH1 ], [ %1484, %OP3162.JUMPDEST ], [ %1488, %OP3169.PUSH1 ], [ %1489, %OP3171.MLOAD.contd ], [ %1491, %OP3175.PUSH1 ], [ %1493, %OP3180.PUSH1 ], [ %1495, %OP3185.PUSH32 ], [ %1496, %OP3190.SWAP1 ], [ %spec.select17793, %OP3191.MLOAD.contd ], [ %1472, %OP3130.JUMPDEST ], [ %1475, %OP3132.MLOAD.contd ], [ %1476, %OP3138.DUP1 ], [ %1478, %OP3142.PUSH1 ], [ %1396, %OP3025.JUMPDEST ], [ %spec.select17792, %OP3039.PUSH1 ], [ %1384, %OP3009.JUMPDEST ], [ %1361, %OP2958.JUMPDEST ], [ %1363, %OP2960.MLOAD.contd ], [ %1364, %OP2963.MLOAD.contd ], [ %1368, %OP2967.ADDRESS ], [ %1369, %OP2972.SWAP1 ], [ %1375, %OP2973.MLOAD.contd ], [ %spec.select17790, %OP3006.PUSH1 ], [ %1353, %OP2941.JUMPDEST ], [ %spec.select17789, %OP2955.PUSH1 ], [ %1341, %OP2925.JUMPDEST ], [ %1320, %OP2880.JUMPDEST ], [ %1321, %OP2883.MLOAD.contd ], [ %1325, %OP2887.ADDRESS ], [ %1326, %OP2892.SWAP1 ], [ %1332, %OP2893.MLOAD.contd ], [ %spec.select17787, %OP2922.PUSH1 ], [ %1302, %OP2822.PUSH1 ], [ %1305, %OP2823.MLOAD.contd ], [ %1308, %OP2827.PUSH1 ], [ %1309, %OP2838.PUSH1 ], [ %1311, %OP2841.PUSH1 ], [ %1313, %OP2848.PUSH1 ], [ %spec.select17786, %OP2854.MLOAD.contd ], [ %1276, %OP2745.JUMPDEST ], [ %1280, %OP2747.MLOAD.contd ], [ %1281, %OP2753.PUSH1 ], [ %1282, %OP2756.PUSH1 ], [ %1283, %OP2759.SLOAD ], [ %1268, %OP2728.JUMPDEST ], [ %spec.select17785, %OP2742.PUSH1 ], [ %1256, %OP2712.JUMPDEST ], [ %1233, %OP2660.JUMPDEST ], [ %1235, %OP2662.MLOAD.contd ], [ %1236, %OP2665.MLOAD.contd ], [ %1240, %OP2669.ADDRESS ], [ %1241, %OP2674.SWAP1 ], [ %1247, %OP2675.MLOAD.contd ], [ %spec.select17783, %OP2709.PUSH1 ], [ %1225, %OP2643.JUMPDEST ], [ %spec.select17782, %OP2657.PUSH1 ], [ %1213, %OP2627.JUMPDEST ], [ %1187, %OP2563.JUMPDEST ], [ %1189, %OP2567.PUSH1 ], [ %1191, %OP2569.PUSH1 ], [ %1192, %OP2571.MLOAD.contd ], [ %1196, %OP2575.ADDRESS ], [ %1197, %OP2580.SWAP1 ], [ %1204, %OP2581.MLOAD.contd ], [ %spec.select17780, %OP2624.PUSH1 ], [ %1184, %OP2553.JUMPDEST ], [ %1167, %OP2513.JUMPDEST ], [ %1171, %OP2522.PUSH1 ], [ %1172, %OP2524.MLOAD.contd ], [ %1174, %OP2528.PUSH1 ], [ %1176, %OP2533.PUSH1 ], [ %1178, %OP2538.PUSH32 ], [ %1179, %OP2543.SWAP1 ], [ %spec.select17779, %OP2544.MLOAD.contd ], [ %1163, %OP2507.PUSH1 ], [ %1164, %OP2510.SLOAD ], [ %1155, %OP2494.JUMPDEST ], [ %1150, %OP2480.JUMPDEST ], [ %1151, %OP2484.PUSH1 ], [ %1152, %OP2488.PUSH1 ], [ %1153, %OP2491.SLOAD ], [ %1080, %OP2362.PUSH1 ], [ %1082, %OP2363.MLOAD.contd ], [ %1085, %OP2367.PUSH1 ], [ %1086, %OP2378.PUSH1 ], [ %1088, %OP2381.PUSH1 ], [ %1090, %OP2388.PUSH1 ], [ %spec.select17778, %OP2394.MLOAD.contd ], [ %1035, %OP2228.JUMPDEST ], [ %spec.select17777, %OP2242.PUSH1 ], [ %1023, %OP2212.JUMPDEST ], [ %999, %OP2156.JUMPDEST ], [ %1000, %OP2158.MLOAD.contd ], [ %1002, %OP2161.PUSH1 ], [ %1003, %OP2163.MLOAD.contd ], [ %1007, %OP2167.ADDRESS ], [ %1008, %OP2172.SWAP1 ], [ %1014, %OP2173.MLOAD.contd ], [ %spec.select17775, %OP2209.PUSH1 ], [ %991, %OP2139.JUMPDEST ], [ %spec.select17774, %OP2153.PUSH1 ], [ %979, %OP2123.JUMPDEST ], [ %956, %OP2066.JUMPDEST ], [ %958, %OP2070.PUSH1 ], [ %959, %OP2072.MLOAD.contd ], [ %963, %OP2076.ADDRESS ], [ %964, %OP2081.SWAP1 ], [ %970, %OP2082.MLOAD.contd ], [ %spec.select17772, %OP2120.PUSH1 ], [ %953, %OP2056.JUMPDEST ], [ %936, %OP2017.JUMPDEST ], [ %940, %OP2025.PUSH1 ], [ %941, %OP2027.MLOAD.contd ], [ %943, %OP2031.PUSH1 ], [ %945, %OP2036.PUSH1 ], [ %947, %OP2041.PUSH32 ], [ %948, %OP2046.SWAP1 ], [ %spec.select17771, %OP2047.MLOAD.contd ], [ %933, %OP2012.JUMPDEST ], [ %931, %OP2007.JUMPDEST ], [ %917, %OP1978.JUMPDEST ], [ %922, %OP1982.PUSH20 ], [ %923, %OP1994.PUSH1 ], [ %928, %OP1997.SWAP3 ], [ %898, %OP1938.JUMPDEST ], [ %905, %OP1947.PUSH1 ], [ %906, %OP1949.MLOAD.contd ], [ %908, %OP1953.PUSH1 ], [ %910, %OP1958.PUSH1 ], [ %912, %OP1963.PUSH32 ], [ %913, %OP1968.SWAP1 ], [ %spec.select17770, %OP1969.MLOAD.contd ], [ %896, %OP1933.JUMPDEST ], [ %879, %OP1883.JUMPDEST ], [ %881, %OP1891.PUSH1 ], [ %882, %OP1896.PUSH1 ], [ %885, %OP1900.CALLER ], [ %886, %OP1903.SWAP1 ], [ %887, %OP1906.SWAP1 ], [ %889, %OP1908.SSTORE ], [ %819, %OP1834.PUSH1 ], [ %842, %OP1844.DUP2 ], [ %843, %OP1846.SLOAD ], [ %854, %OP1863.PUSH1 ], [ %874, %OP1873.SWAP1 ], [ %875, %OP1875.SLOAD ], [ %805, %OP1816.JUMPDEST ], [ %802, %OP1809.JUMPDEST ], [ %727, %OP1652.PUSH1 ], [ %728, %OP1654.MLOAD.contd ], [ %730, %OP1658.PUSH1 ], [ %732, %OP1663.PUSH1 ], [ %734, %OP1668.PUSH32 ], [ %735, %OP1673.SWAP1 ], [ %spec.select17769, %OP1674.MLOAD.contd ], [ %698, %OP1542.PUSH1 ], [ %701, %OP1543.MLOAD.contd ], [ %704, %OP1547.PUSH1 ], [ %705, %OP1558.PUSH1 ], [ %707, %OP1561.PUSH1 ], [ %709, %OP1568.PUSH1 ], [ %spec.select17768, %OP1574.MLOAD.contd ], [ %656, %OP1455.JUMPDEST ], [ %spec.select17767, %OP1469.PUSH1 ], [ %644, %OP1439.JUMPDEST ], [ %621, %OP1388.JUMPDEST ], [ %623, %OP1390.MLOAD.contd ], [ %624, %OP1393.MLOAD.contd ], [ %628, %OP1397.ADDRESS ], [ %629, %OP1402.SWAP1 ], [ %635, %OP1403.MLOAD.contd ], [ %spec.select17765, %OP1436.PUSH1 ], [ %613, %OP1371.JUMPDEST ], [ %spec.select17764, %OP1385.PUSH1 ], [ %601, %OP1355.JUMPDEST ], [ %580, %OP1310.JUMPDEST ], [ %581, %OP1313.MLOAD.contd ], [ %585, %OP1317.ADDRESS ], [ %586, %OP1322.SWAP1 ], [ %592, %OP1323.MLOAD.contd ], [ %spec.select17762, %OP1352.PUSH1 ], [ %568, %OP1289.JUMPDEST ], [ %531, %OP1180.DUP9 ], [ %535, %OP1190.MLOAD.contd ], [ %538, %OP1198.PUSH1 ], [ %540, %OP1208.PUSH1 ], [ %542, %OP1213.PUSH1 ], [ %547, %OP1218.PUSH1 ], [ %549, %OP1228.DUP5 ], [ %551, %OP1234.PUSH1 ], [ %553, %OP1242.PUSH1 ], [ %557, %OP1247.PUSH1 ], [ %559, %OP1272.MLOAD.contd ], [ %spec.select17760, %OP1286.PUSH1 ], [ %505, %OP1122.PUSH1 ], [ %506, %OP1124.MLOAD.contd ], [ %508, %OP1128.PUSH1 ], [ %510, %OP1133.PUSH1 ], [ %512, %OP1138.PUSH32 ], [ %513, %OP1143.SWAP1 ], [ %spec.select17759, %OP1144.MLOAD.contd ], [ %489, %OP1083.JUMPDEST ], [ %491, %OP1086.PUSH1 ], [ %474, %OP1045.PUSH1 ], [ %477, %OP1046.MLOAD.contd ], [ %480, %OP1050.PUSH1 ], [ %481, %OP1061.PUSH1 ], [ %483, %OP1064.PUSH1 ], [ %485, %OP1071.PUSH1 ], [ %spec.select17758, %OP1077.MLOAD.contd ], [ %spec.select17755, %OP901.PUSH1 ], [ %spec.select17754, %OP843.PUSH1 ], [ %spec.select17753, %OP813.PUSH1 ], [ %spec.select17752, %OP782.PUSH1 ], [ %351, %OP743.JUMPDEST ], [ %352, %OP746.MLOAD.contd ], [ %354, %OP750.PUSH1 ], [ %355, %OP757.DUP1 ], [ %spec.select17751, %OP758.MLOAD.contd ], [ %spec.select17750, %OP733.PUSH1 ], [ %spec.select17749, %OP711.PUSH1 ], [ %spec.select17748, %OP685.PUSH1 ], [ %spec.select17747, %OP663.PUSH1 ], [ %spec.select17746, %OP626.PUSH1 ], [ %280, %OP591.JUMPDEST ], [ %282, %OP594.MLOAD.contd ], [ %283, %OP601.MLOAD ], [ %spec.select17745, %OP601.MLOAD.contd ], [ %spec.select17744, %OP559.PUSH1 ], [ %253, %OP531.JUMPDEST ], [ %254, %OP534.MLOAD.contd ], [ %255, %OP538.MLOAD ], [ %spec.select17743, %OP538.MLOAD.contd ], [ %242, %OP508.JUMPDEST ], [ %244, %OP511.MLOAD.contd ], [ %245, %OP518.MLOAD ], [ %spec.select17742, %OP518.MLOAD.contd ], [ %230, %OP486.JUMPDEST ], [ %233, %OP489.MLOAD.contd ], [ %234, %OP495.MLOAD ], [ %spec.select17741, %OP495.MLOAD.contd ], [ %spec.select17740, %OP471.PUSH1 ], [ %201, %OP425.JUMPDEST ], [ %203, %OP428.MLOAD.contd ], [ %206, %OP435.SWAP3 ], [ %210, %OP443.PUSH4 ], [ %211, %OP449.SWAP1 ], [ %spec.select17739, %OP450.MLOAD.contd ], [ %195, %OP408.JUMPDEST ], [ %spec.select17738, %OP415.MLOAD.contd ], [ %184, %OP388.DUP1 ], [ %186, %OP392.MLOAD.contd ], [ %191, %OP399.SUB ], [ %136, %OP321.JUMPDEST ], [ %139, %OP324.MLOAD.contd ], [ %140, %OP329.DUP4 ], [ %142, %OP330.MLOAD.contd ], [ %143, %OP335.DUP4 ], [ %448, %OP977.PUSH1 ], [ %451, %OP978.MLOAD.contd ], [ %454, %OP982.PUSH1 ], [ %455, %OP993.PUSH1 ], [ %457, %OP996.PUSH1 ], [ %459, %OP1003.PUSH1 ], [ %spec.select17757, %OP1009.MLOAD.contd ], [ %429, %OP929.PUSH1 ], [ %430, %OP931.MLOAD.contd ], [ %432, %OP935.PUSH1 ], [ %434, %OP940.PUSH1 ], [ %436, %OP945.PUSH32 ], [ %437, %OP950.SWAP1 ], [ %spec.select17756, %OP951.MLOAD.contd ], [ %spec.select17737, %OP303.PUSH1 ], [ %spec.select17736, %OP279.PUSH1 ], [ %spec.select17735, %OP265.PUSH1 ], [ %spec.select17734, %OP229.PUSH1 ], [ %spec.select, %OP8.PUSH1 ], [ %575, %OP1298.RETURNDATASIZE ], [ %spec.select17761, %OP1302.RETURNDATASIZE ], [ %2350, %OP4780.RETURNDATASIZE ], [ %spec.select17814, %OP4784.RETURNDATASIZE ], [ %1989, %OP4150.RETURNDATASIZE ], [ %1851, %OP3929.RETURNDATASIZE ], [ %spec.select17806, %OP3933.RETURNDATASIZE ], [ %1807, %OP3845.RETURNDATASIZE ], [ %spec.select17803, %OP3849.RETURNDATASIZE ], [ %1683, %OP3635.RETURNDATASIZE ], [ %spec.select17799, %OP3639.RETURNDATASIZE ], [ %1536, %OP3282.RETURNDATASIZE ], [ %spec.select17795, %OP3286.RETURNDATASIZE ], [ %1391, %OP3018.RETURNDATASIZE ], [ %spec.select17791, %OP3022.RETURNDATASIZE ], [ %1348, %OP2934.RETURNDATASIZE ], [ %spec.select17788, %OP2938.RETURNDATASIZE ], [ %1263, %OP2721.RETURNDATASIZE ], [ %spec.select17784, %OP2725.RETURNDATASIZE ], [ %1220, %OP2636.RETURNDATASIZE ], [ %spec.select17781, %OP2640.RETURNDATASIZE ], [ %1030, %OP2221.RETURNDATASIZE ], [ %spec.select17776, %OP2225.RETURNDATASIZE ], [ %986, %OP2132.RETURNDATASIZE ], [ %spec.select17773, %OP2136.RETURNDATASIZE ], [ %651, %OP1448.RETURNDATASIZE ], [ %spec.select17766, %OP1452.RETURNDATASIZE ], [ %608, %OP1364.RETURNDATASIZE ], [ %spec.select17763, %OP1368.RETURNDATASIZE ], [ %3, %resize.i ], [ %672, %resize.i24110 ], [ %762, %resize.i24126 ], [ %768, %resize.i24141 ], [ %778, %resize.i24156 ], [ %788, %resize.i24171 ], [ %812, %resize.i24185 ], [ %817, %resize.i24200 ], [ %830, %resize.i24215 ], [ %840, %resize.i24230 ], [ %849, %resize.i24244 ], [ %853, %resize.i24259 ], [ %863, %resize.i24274 ], [ %872, %resize.i24289 ], [ %1051, %resize.i24305 ], [ %1158, %resize.i24382 ], [ %1161, %resize.i24396 ], [ %1412, %resize.i24412 ], [ %1557, %resize.i24490 ], [ %1699, %resize.i24506 ], [ %1730, %resize.i24521 ], [ %1733, %resize.i24535 ], [ %1744, %resize.i24550 ], [ %1754, %resize.i24565 ], [ %1872, %resize.i24581 ], [ %1967, %resize.i24628 ], [ %1974, %resize.i24643 ], [ %1985, %resize.i24658 ], [ %2003, %resize.i24674 ], [ %2015, %resize.i24690 ], [ %2030, %resize.i24706 ], [ %2169, %resize.i24722 ], [ %2180, %resize.i24737 ], [ %2193, %resize.i24752 ], [ %2203, %resize.i24768 ], [ %2215, %resize.i24782 ], [ %2220, %resize.i24797 ], [ %2231, %resize.i24812 ], [ %2241, %resize.i24827 ], [ %2253, %resize.i24843 ], [ %2263, %resize.i24858 ], [ %2273, %resize.i24874 ], [ %2284, %resize.i24888 ], [ %2288, %resize.i24903 ], [ %2371, %resize.i24919 ], [ %757, %return.loopexit25073.split.loop.exit25299 ], [ %1148, %return.loopexit25073.split.loop.exit25314 ], [ %1469, %return.loopexit25073.split.loop.exit25329 ], [ %1583, %return.loopexit25073.split.loop.exit25332 ], [ %2317, %return.loopexit25073.split.loop.exit25380 ], [ %2459, %return.loopexit25073.split.loop.exit25425 ], [ %2497, %return.loopexit25073.split.loop.exit25461 ], [ 1, %dynamic_jump_table ], [ %171, %resize.i24094 ], [ %160, %resize.i24080 ], [ %1934, %resize.i24612 ], [ %1924, %resize.i24597 ], [ %742, %OP1693.JUMPDEST ], [ %743, %OP1696.MLOAD.contd ], [ %745, %OP1700.PUSH1 ], [ %747, %OP1706.DUP1 ], [ %749, %OP1712.PUSH1 ], [ %750, %OP1718.SWAP1 ], [ %756, %OP1719.MLOAD.contd ], [ %1060, %OP2282.JUMPDEST ], [ %1099, %OP2419.PUSH1 ], [ %1105, %OP2436.JUMPDEST ], [ %1147, %OP2453.MLOAD.contd ], [ %1285, %OP2768.JUMPDEST ], [ %1419, %OP3059.PUSH1 ], [ %1425, %OP3076.JUMPDEST ], [ %1468, %OP3093.MLOAD.contd ], [ %1879, %OP3969.JUMPDEST ], [ %2295, %OP4642.JUMPDEST ], [ %2296, %OP4651.PUSH1 ], [ %2297, %OP4654.PUSH1 ], [ %2298, %OP4658.SWAP4 ], [ %2300, %OP4662.SWAP1 ], [ %2301, %OP4667.KECCAK256 ], [ %2302, %OP4668.SLOAD ], [ %2307, %OP4676.JUMPDEST ], [ %2308, %OP4685.PUSH1 ], [ %2309, %OP4690.PUSH1 ], [ %2310, %OP4695.SWAP5 ], [ %2311, %OP4699.DUP1 ], [ %2312, %OP4700.MLOAD.contd ], [ %2313, %OP4704.SWAP1 ], [ %2392, %OP4867.JUMPDEST ], [ %2436, %OP5005.JUMPDEST ], [ %2439, %OP5015.JUMPDEST ], [ %2441, %OP5020.PUSH20 ], [ %2442, %OP5025.PUSH1 ], [ %2443, %OP5028.PUSH1 ], [ %2444, %OP5031.SLOAD ], [ %2449, %OP5039.JUMPDEST ], [ %2450, %OP5047.PUSH1 ], [ %2452, %OP5052.PUSH1 ], [ %2453, %OP5056.SWAP5 ], [ %2454, %OP5060.DUP4 ], [ %2455, %OP5061.MLOAD.contd ], [ %2456, %OP5065.SWAP4 ], [ %2479, %OP5114.PUSH1 ], [ %2480, %OP5117.SLOAD ], [ %2484, %OP5125.JUMPDEST ], [ %2485, %OP5133.PUSH1 ], [ %2486, %OP5136.PUSH1 ], [ %2487, %OP5139.SWAP2 ], [ %2488, %OP5143.SLOAD ], [ %2490, %OP5151.JUMPDEST ], [ %2491, %OP5156.PUSH1 ], [ %2492, %OP5158.MLOAD.contd ], [ %2493, %OP5162.SWAP1 ], [ 88, %OP5188.JUMPDEST ], [ 88, %OP4976.JUMPDEST ], [ 88, %OP4965.DUP1 ], [ 88, %OP4894.JUMPDEST ], [ 88, %OP2799.JUMPDEST ], [ 88, %OP2782.JUMPDEST ], [ 88, %OP2344.JUMPDEST ], [ 88, %OP2327.JUMPDEST ], [ %1109, %resize.i24321 ], [ %1120, %resize.i24336 ], [ %1131, %resize.i24351 ], [ %1141, %resize.i24367 ], [ %1429, %resize.i24428 ], [ %1440, %resize.i24443 ], [ %1451, %resize.i24458 ], [ %1461, %resize.i24474 ], [ %2474, %resize.i24933 ], [ %2478, %resize.i24948 ], [ 89, %return.loopexit26312 ]
  store i64 %len.addr.200, ptr %arg.stack_len.addr, align 8
  ret i8 %2535
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
define private fastcc i8 @__revmc_ir_builtin_mstore(i256 noundef %0, i256 noundef %1, ptr noalias nocapture noundef nonnull %2) unnamed_addr #0 {
entry:
  %ecx.memory.addr = getelementptr inbounds i8, ptr %2, i64 40
  %ecx.memory = load ptr, ptr %ecx.memory.addr, align 8
  %ecx.memory.len.addr = getelementptr inbounds i8, ptr %ecx.memory, i64 16
  %ecx.memory.len = load i64, ptr %ecx.memory.len.addr, align 8
  %ecx.memory.last_checkpoint.addr = getelementptr inbounds i8, ptr %ecx.memory, i64 48
  %ecx.memory.last_checkpoint = load i64, ptr %ecx.memory.last_checkpoint.addr, align 8
  %3 = sub i64 %ecx.memory.len, %ecx.memory.last_checkpoint
  %4 = icmp ugt i256 %0, 18446744073709551615
  %5 = trunc i256 %0 to i64
  %6 = add i64 %5, 32
  %7 = icmp ugt i64 %5, -33
  %8 = or i1 %4, %7
  %9 = select i1 %8, i64 -1, i64 %6
  %10 = icmp ugt i64 %9, %3
  br i1 %10, label %resize, label %contd, !prof !5

resize:                                           ; preds = %entry
  %11 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %2, i64 %9)
  %.not = icmp eq i8 %11, 0
  br i1 %.not, label %contd, label %common.ret, !prof !6

common.ret:                                       ; preds = %resize, %contd
  %common.ret.op = phi i8 [ 0, %contd ], [ %11, %resize ]
  ret i8 %common.ret.op

contd:                                            ; preds = %resize, %entry
  %ecx.memory.buffer.ptr.shared.addr = getelementptr inbounds i8, ptr %ecx.memory, i64 8
  %ecx.memory.buffer.ptr.shared = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr, align 8
  %ecx.memory.buffer.ptr = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared, i64 %ecx.memory.last_checkpoint
  %slot = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr, i64 %5
  %12 = tail call i256 @llvm.bswap.i256(i256 %1)
  store i256 %12, ptr %slot, align 1
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_resize_memory(ptr noalias nocapture noundef align 8 dereferenceable(88), i64 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i256 @llvm.bswap.i256(i256) #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_do_return(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef readonly align 8 dereferenceable(64), i8 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite)
define private fastcc i256 @__revmc_ir_builtin_calldataload(i256 noundef %0, ptr nocapture readonly %.72.val, i64 %.80.val) unnamed_addr #3 {
entry:
  %1 = zext i64 %.80.val to i256
  %2 = icmp ugt i256 %1, %0
  br i1 %2, label %then, label %contd

then:                                             ; preds = %entry
  %3 = trunc i256 %0 to i64
  %calldata.addr = getelementptr inbounds i8, ptr %.72.val, i64 %3
  %4 = sub i64 %.80.val, %3
  %5 = tail call i64 @llvm.umin.i64(i64 %4, i64 32)
  %calldata.addr1 = alloca i256, align 16
  store i256 0, ptr %calldata.addr1, align 16
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %calldata.addr1, ptr align 1 %calldata.addr, i64 %5, i1 false)
  %calldata.i256 = load i256, ptr %calldata.addr1, align 16
  %6 = tail call i256 @llvm.bswap.i256(i256 %calldata.i256)
  br label %contd

contd:                                            ; preds = %entry, %then
  %7 = phi i256 [ %6, %then ], [ 0, %entry ]
  ret i256 %7
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #2

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
define private fastcc i8 @__revmc_ir_builtin_mload(i256 noundef %0, ptr noalias nocapture noundef nonnull writeonly %1, ptr noalias nocapture noundef nonnull %2) unnamed_addr #0 {
entry:
  %ecx.memory.addr = getelementptr inbounds i8, ptr %2, i64 40
  %ecx.memory = load ptr, ptr %ecx.memory.addr, align 8
  %ecx.memory.len.addr = getelementptr inbounds i8, ptr %ecx.memory, i64 16
  %ecx.memory.len = load i64, ptr %ecx.memory.len.addr, align 8
  %ecx.memory.last_checkpoint.addr = getelementptr inbounds i8, ptr %ecx.memory, i64 48
  %ecx.memory.last_checkpoint = load i64, ptr %ecx.memory.last_checkpoint.addr, align 8
  %3 = sub i64 %ecx.memory.len, %ecx.memory.last_checkpoint
  %4 = icmp ugt i256 %0, 18446744073709551615
  %5 = trunc i256 %0 to i64
  %6 = add i64 %5, 32
  %7 = icmp ugt i64 %5, -33
  %8 = or i1 %4, %7
  %9 = select i1 %8, i64 -1, i64 %6
  %10 = icmp ugt i64 %9, %3
  br i1 %10, label %resize, label %contd, !prof !5

resize:                                           ; preds = %entry
  %11 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %2, i64 %9)
  %.not = icmp eq i8 %11, 0
  br i1 %.not, label %contd, label %common.ret, !prof !6

common.ret:                                       ; preds = %resize, %contd
  %common.ret.op = phi i8 [ 0, %contd ], [ %11, %resize ]
  ret i8 %common.ret.op

contd:                                            ; preds = %resize, %entry
  %ecx.memory.buffer.ptr.shared.addr = getelementptr inbounds i8, ptr %ecx.memory, i64 8
  %ecx.memory.buffer.ptr.shared = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr, align 8
  %ecx.memory.buffer.ptr = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared, i64 %ecx.memory.last_checkpoint
  %slot = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr, i64 %5
  %slot.value = load i256, ptr %slot, align 1
  %12 = tail call i256 @llvm.bswap.i256(i256 %slot.value)
  store i256 %12, ptr %1, align 16
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_exp(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef align 8 dereferenceable(64), i8 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_sload(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef align 8 dereferenceable(32), i8 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_sstore(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef readonly align 8 dereferenceable(64), i8 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_codecopy(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef readonly align 8 dereferenceable(96)) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i160 @llvm.bswap.i160(i160) #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_calldatacopy(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef readonly align 8 dereferenceable(96)) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_extcodesize(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef align 8 dereferenceable(32), i8 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_call(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef align 8, i8 noundef, i8 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_returndatacopy(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef readonly align 8 dereferenceable(96)) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_log(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef align 8, i8 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_keccak256(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef align 8 dereferenceable(64)) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
define i8 @usdc(ptr nocapture noundef readonly align 8 dereferenceable(24) %arg.gas.addr, ptr noalias nocapture noundef align 8 dereferenceable(32768) %arg.stack.addr, ptr noalias nocapture noundef align 8 dereferenceable(8) %arg.stack_len.addr, ptr noalias nocapture readnone align 16 %arg.env.addr, ptr noalias nocapture noundef readonly align 8 dereferenceable(224) %arg.contract.addr, ptr noalias nocapture noundef align 8 dereferenceable(88) %arg.ecx.addr) #0 {
entry:
  %gas.remaining.addr = getelementptr inbounds i8, ptr %arg.gas.addr, i64 8
  %ecx.resume_at.addr = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 32
  %ecx.resume_at = load ptr, ptr %ecx.resume_at.addr, align 8
  %0 = icmp eq ptr %ecx.resume_at, null
  br i1 %0, label %no_resume, label %resume

resume:                                           ; preds = %entry
  %stack_len2388 = load i64, ptr %arg.stack_len.addr, align 8
  indirectbr ptr %ecx.resume_at, [label %OP343.SWAP3, label %OP644.RETURNDATASIZE]

no_resume:                                        ; preds = %entry
  store i256 128, ptr %arg.stack.addr, align 16
  %sp2 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 1
  store i256 64, ptr %sp2, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !242)
  %ecx.memory.addr.i = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i = load ptr, ptr %ecx.memory.addr.i, align 8, !alias.scope !242
  %ecx.memory.len.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 16
  %ecx.memory.len.i = load i64, ptr %ecx.memory.len.addr.i, align 8, !noalias !242
  %ecx.memory.last_checkpoint.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 48
  %ecx.memory.last_checkpoint.i = load i64, ptr %ecx.memory.last_checkpoint.addr.i, align 8, !noalias !242
  %1 = sub i64 %ecx.memory.len.i, %ecx.memory.last_checkpoint.i
  %2 = icmp ult i64 %1, 96
  br i1 %2, label %resize.i, label %OP3.PUSH1, !prof !5

resize.i:                                         ; preds = %no_resume
  %3 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i = icmp eq i8 %3, 0
  br i1 %.not.i, label %OP3.PUSH1, label %return, !prof !6

OP3.PUSH1:                                        ; preds = %no_resume, %resize.i
  %ecx.memory.buffer.ptr.shared.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 8
  %ecx.memory.buffer.ptr.shared.i = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i, align 8, !noalias !242
  %ecx.memory.buffer.ptr.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i, i64 %ecx.memory.last_checkpoint.i
  %slot.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i, i64 64
  store i256 -57896044618658097711785492504343953926634992332820282019728792003956564819968, ptr %slot.i, align 1, !noalias !242
  %contract.input.len.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len = load i64, ptr %contract.input.len.addr, align 8
  %4 = zext i64 %contract.input.len to i256
  store i256 %4, ptr %sp2, align 16
  %5 = icmp ult i64 %contract.input.len, 4
  %6 = zext i1 %5 to i256
  store i256 %6, ptr %arg.stack.addr, align 16
  br i1 %5, label %OP246.JUMPDEST.sink.split, label %OP8.PUSH1

OP8.PUSH1:                                        ; preds = %OP3.PUSH1
  store i256 0, ptr %arg.stack.addr, align 16
  %7 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val3273 = load ptr, ptr %7, align 8
  %8 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 0, ptr %arg.contract.addr.val3273, i64 %contract.input.len)
  %9 = lshr i256 %8, 224
  store i256 %9, ptr %arg.stack.addr, align 16
  %sp48 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 2
  store i256 911855590, ptr %sp48, align 16
  %10 = icmp eq i256 %9, 911855590
  %11 = zext i1 %10 to i256
  store i256 %11, ptr %sp2, align 16
  br i1 %10, label %OP46.JUMPDEST, label %OP20.DUP1

OP20.DUP1:                                        ; preds = %OP8.PUSH1
  store i256 1327428230, ptr %sp48, align 16
  %12 = icmp eq i256 %9, 1327428230
  %13 = zext i1 %12 to i256
  store i256 %13, ptr %sp2, align 16
  br i1 %12, label %OP84.JUMPDEST, label %OP25.DUP1

OP25.DUP1:                                        ; preds = %OP20.DUP1
  store i256 1549851163, ptr %sp48, align 16
  %14 = icmp eq i256 %9, 1549851163
  %15 = zext i1 %14 to i256
  store i256 %15, ptr %sp2, align 16
  br i1 %14, label %OP134.JUMPDEST, label %OP30.DUP1

OP30.DUP1:                                        ; preds = %OP25.DUP1
  store i256 2401778032, ptr %sp48, align 16
  %16 = icmp eq i256 %9, 2401778032
  %17 = zext i1 %16 to i256
  store i256 %17, ptr %sp2, align 16
  br i1 %16, label %OP171.JUMPDEST, label %OP35.DUP1

OP35.DUP1:                                        ; preds = %OP30.DUP1
  store i256 4166100032, ptr %sp48, align 16
  %18 = icmp eq i256 %9, 4166100032
  %19 = zext i1 %18 to i256
  store i256 %19, ptr %sp2, align 16
  br i1 %18, label %OP209.JUMPDEST, label %OP246.JUMPDEST.sink.split

OP46.JUMPDEST:                                    ; preds = %dynamic_jump_table, %OP8.PUSH1
  %len.addr.1 = phi i64 [ 1, %OP8.PUSH1 ], [ %len.addr.37, %dynamic_jump_table ]
  %20 = add i64 %len.addr.1, 1
  %contract.call_value.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value = load i256, ptr %contract.call_value.addr, align 16
  %sp126 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.1
  store i256 %contract.call_value, ptr %sp126, align 16
  %sp130 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %20
  %21 = icmp eq i256 %contract.call_value, 0
  %22 = zext i1 %21 to i256
  store i256 %22, ptr %sp130, align 16
  br i1 %21, label %OP55.JUMPDEST, label %OP52.PUSH1

OP52.PUSH1:                                       ; preds = %OP46.JUMPDEST
  store i256 0, ptr %sp130, align 16
  %sp143 = getelementptr i256, ptr %sp126, i64 2
  store i256 0, ptr %sp143, align 16
  %23 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp130, i8 16)
  %.not3263 = icmp eq i8 %23, 0
  %spec.select = select i1 %.not3263, i8 16, i8 %23, !prof !6
  br label %return

OP55.JUMPDEST:                                    ; preds = %dynamic_jump_table, %OP46.JUMPDEST
  %len.addr.2 = phi i64 [ %20, %OP46.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %24 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.2
  %sp149 = getelementptr i256, ptr %24, i64 -1
  store i256 184, ptr %sp149, align 16
  %25 = add i64 %len.addr.2, 1
  %sp155 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %25
  %contract.input.len.addr157 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len158 = load i64, ptr %contract.input.len.addr157, align 8
  %26 = zext i64 %contract.input.len158 to i256
  %sp159 = getelementptr i256, ptr %24, i64 2
  store i256 %26, ptr %24, align 16
  store i256 4, ptr %sp155, align 16
  store i256 4, ptr %sp159, align 16
  %sp187 = getelementptr i256, ptr %24, i64 3
  store i256 4, ptr %sp187, align 16
  %27 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val3271 = load ptr, ptr %27, align 8
  %28 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val3271, i64 %contract.input.len158)
  %sp193 = getelementptr i256, ptr %24, i64 4
  %29 = and i256 %28, 1461501637330902918203684832716283019655932542975
  store i256 32, ptr %sp193, align 16
  store i256 %29, ptr %24, align 16
  store i256 %26, ptr %sp155, align 16
  store i256 4, ptr %sp159, align 16
  store i256 36, ptr %sp187, align 16
  br label %OP260.JUMPDEST

OP84.JUMPDEST.loopexit:                           ; preds = %dynamic_jump_table
  %contract.input.len.addr249.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len250.pre = load i64, ptr %contract.input.len.addr249.phi.trans.insert, align 8
  %.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val3269.pre = load ptr, ptr %.phi.trans.insert, align 8
  %.pre = zext i64 %contract.input.len250.pre to i256
  br label %OP84.JUMPDEST

OP84.JUMPDEST:                                    ; preds = %OP84.JUMPDEST.loopexit, %OP20.DUP1
  %.pre-phi = phi i256 [ %.pre, %OP84.JUMPDEST.loopexit ], [ %4, %OP20.DUP1 ]
  %arg.contract.addr.val3269 = phi ptr [ %arg.contract.addr.val3269.pre, %OP84.JUMPDEST.loopexit ], [ %arg.contract.addr.val3273, %OP20.DUP1 ]
  %contract.input.len250 = phi i64 [ %contract.input.len250.pre, %OP84.JUMPDEST.loopexit ], [ %contract.input.len, %OP20.DUP1 ]
  %len.addr.3 = phi i64 [ %len.addr.37, %OP84.JUMPDEST.loopexit ], [ 1, %OP20.DUP1 ]
  %sp241 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.3
  store i256 262, ptr %sp241, align 16
  %sp243 = getelementptr i256, ptr %sp241, i64 1
  %sp247 = getelementptr i256, ptr %sp241, i64 2
  %30 = add i64 %len.addr.3, 4
  %sp251 = getelementptr i256, ptr %sp241, i64 3
  store i256 %.pre-phi, ptr %sp243, align 16
  store i256 4, ptr %sp247, align 16
  store i256 4, ptr %sp251, align 16
  %sp280 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %30
  store i256 4, ptr %sp280, align 16
  %31 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val3269, i64 %contract.input.len250)
  %sp286 = getelementptr i256, ptr %sp241, i64 5
  %32 = and i256 %31, 1461501637330902918203684832716283019655932542975
  store i256 %32, ptr %sp243, align 16
  store i256 %.pre-phi, ptr %sp247, align 16
  store i256 4, ptr %sp251, align 16
  store i256 36, ptr %sp280, align 16
  store i256 36, ptr %sp286, align 16
  %33 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 36, ptr %arg.contract.addr.val3269, i64 %contract.input.len250)
  %sp340 = getelementptr i256, ptr %sp241, i64 6
  store i256 68, ptr %sp280, align 16
  %34 = add i256 %33, 4
  store i256 %34, ptr %sp286, align 16
  store i256 %34, ptr %sp340, align 16
  %35 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %34, ptr %arg.contract.addr.val3269, i64 %contract.input.len250)
  %sp375 = getelementptr i256, ptr %sp241, i64 7
  store i256 32, ptr %sp375, align 16
  %36 = add i256 %33, 36
  store i256 %.pre-phi, ptr %sp280, align 16
  store i256 %35, ptr %sp251, align 16
  store i256 %36, ptr %sp247, align 16
  store i256 4, ptr %sp286, align 16
  store i256 68, ptr %sp340, align 16
  br label %OP289.JUMPDEST

OP134.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP25.DUP1
  %len.addr.4 = phi i64 [ 1, %OP25.DUP1 ], [ %len.addr.37, %dynamic_jump_table ]
  %37 = add i64 %len.addr.4, 1
  %contract.call_value.addr435 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value436 = load i256, ptr %contract.call_value.addr435, align 16
  %sp437 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.4
  store i256 %contract.call_value436, ptr %sp437, align 16
  %sp441 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %37
  %38 = icmp eq i256 %contract.call_value436, 0
  %39 = zext i1 %38 to i256
  store i256 %39, ptr %sp441, align 16
  br i1 %38, label %OP143.JUMPDEST, label %OP140.PUSH1

OP140.PUSH1:                                      ; preds = %OP134.JUMPDEST
  store i256 0, ptr %sp441, align 16
  %sp454 = getelementptr i256, ptr %sp437, i64 2
  store i256 0, ptr %sp454, align 16
  %40 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp441, i8 16)
  %.not3262 = icmp eq i8 %40, 0
  %spec.select2391 = select i1 %.not3262, i8 16, i8 %40, !prof !6
  br label %return

OP143.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP134.JUMPDEST
  %len.addr.5 = phi i64 [ %37, %OP134.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %41 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.5
  %sp460 = getelementptr i256, ptr %41, i64 -1
  store i256 285, ptr %sp460, align 16
  br label %OP367.JUMPDEST

OP148.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %42 = add i64 %len.addr.37, 1
  %sp464 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  store i256 64, ptr %sp464, align 16
  %ecx.memory.i3276 = load ptr, ptr %ecx.memory.addr.i3461, align 8
  %ecx.memory.len.addr.i3277 = getelementptr inbounds i8, ptr %ecx.memory.i3276, i64 16
  %ecx.memory.len.i3278 = load i64, ptr %ecx.memory.len.addr.i3277, align 8, !noalias !245
  %ecx.memory.last_checkpoint.addr.i3279 = getelementptr inbounds i8, ptr %ecx.memory.i3276, i64 48
  %ecx.memory.last_checkpoint.i3280 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3279, align 8, !noalias !245
  %43 = sub i64 %ecx.memory.len.i3278, %ecx.memory.last_checkpoint.i3280
  %44 = icmp ult i64 %43, 96
  br i1 %44, label %resize.i3287, label %OP150.MLOAD.contd, !prof !5

resize.i3287:                                     ; preds = %OP148.JUMPDEST
  %45 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !249
  %.not.i3288 = icmp eq i8 %45, 0
  br i1 %.not.i3288, label %resize.i3287.OP150.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3287.OP150.MLOAD.contd_crit_edge:         ; preds = %resize.i3287
  %ecx.memory.i3290.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8
  br label %OP150.MLOAD.contd

OP150.MLOAD.contd:                                ; preds = %resize.i3287.OP150.MLOAD.contd_crit_edge, %OP148.JUMPDEST
  %ecx.memory.i3290 = phi ptr [ %ecx.memory.i3290.pre, %resize.i3287.OP150.MLOAD.contd_crit_edge ], [ %ecx.memory.i3276, %OP148.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i3282 = getelementptr inbounds i8, ptr %ecx.memory.i3276, i64 8
  %ecx.memory.buffer.ptr.shared.i3283 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3282, align 8, !noalias !245
  %ecx.memory.buffer.ptr.i3284 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3283, i64 %ecx.memory.last_checkpoint.i3280
  %slot.i3285 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3284, i64 64
  %slot.value.i = load i256, ptr %slot.i3285, align 1, !noalias !245
  %46 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i)
  store i256 %46, ptr %sp464, align 16
  %47 = add i64 %len.addr.37, 2
  %sp472 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %42
  store i256 %46, ptr %sp472, align 16
  %sp474 = getelementptr i256, ptr %sp464, i64 -1
  %dup3475 = load i256, ptr %sp474, align 16
  %sp476 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %47
  %sp478 = getelementptr i256, ptr %sp464, i64 3
  %48 = and i256 %dup3475, 1461501637330902918203684832716283019655932542975
  store i256 %48, ptr %sp476, align 16
  store i256 %46, ptr %sp478, align 16
  %ecx.memory.len.addr.i3291 = getelementptr inbounds i8, ptr %ecx.memory.i3290, i64 16
  %ecx.memory.len.i3292 = load i64, ptr %ecx.memory.len.addr.i3291, align 8, !noalias !250
  %ecx.memory.last_checkpoint.addr.i3293 = getelementptr inbounds i8, ptr %ecx.memory.i3290, i64 48
  %ecx.memory.last_checkpoint.i3294 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3293, align 8, !noalias !250
  %49 = sub i64 %ecx.memory.len.i3292, %ecx.memory.last_checkpoint.i3294
  %50 = icmp ugt i256 %46, 18446744073709551615
  %51 = trunc i256 %46 to i64
  %52 = add i64 %51, 32
  %53 = icmp ugt i64 %51, -33
  %54 = or i1 %50, %53
  %55 = select i1 %54, i64 -1, i64 %52
  %56 = icmp ugt i64 %55, %49
  br i1 %56, label %resize.i3301, label %OP159.PUSH1, !prof !5

resize.i3301:                                     ; preds = %OP150.MLOAD.contd
  %57 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %55)
  %.not.i3302 = icmp eq i8 %57, 0
  br i1 %.not.i3302, label %resize.i3301.OP159.PUSH1_crit_edge, label %return, !prof !6

resize.i3301.OP159.PUSH1_crit_edge:               ; preds = %resize.i3301
  %ecx.memory.i3305.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8, !alias.scope !253, !noalias !256
  br label %OP159.PUSH1

OP159.PUSH1:                                      ; preds = %resize.i3301.OP159.PUSH1_crit_edge, %OP150.MLOAD.contd
  %ecx.memory.i3305 = phi ptr [ %ecx.memory.i3305.pre, %resize.i3301.OP159.PUSH1_crit_edge ], [ %ecx.memory.i3290, %OP150.MLOAD.contd ]
  %ecx.memory.buffer.ptr.shared.addr.i3296 = getelementptr inbounds i8, ptr %ecx.memory.i3290, i64 8
  %ecx.memory.buffer.ptr.shared.i3297 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3296, align 8, !noalias !250
  %ecx.memory.buffer.ptr.i3298 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3297, i64 %ecx.memory.last_checkpoint.i3294
  %slot.i3299 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3298, i64 %51
  %58 = tail call i256 @llvm.bswap.i256(i256 %48)
  store i256 %58, ptr %slot.i3299, align 1, !noalias !250
  store i256 32, ptr %sp476, align 16
  %b508 = load i256, ptr %sp472, align 16
  %59 = add i256 %b508, 32
  %swap.b514 = load i256, ptr %sp474, align 16
  store i256 %59, ptr %sp474, align 16
  store i256 %swap.b514, ptr %sp472, align 16
  store i256 64, ptr %sp464, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !253)
  %ecx.memory.len.addr.i3306 = getelementptr inbounds i8, ptr %ecx.memory.i3305, i64 16
  %ecx.memory.len.i3307 = load i64, ptr %ecx.memory.len.addr.i3306, align 8, !noalias !258
  %ecx.memory.last_checkpoint.addr.i3308 = getelementptr inbounds i8, ptr %ecx.memory.i3305, i64 48
  %ecx.memory.last_checkpoint.i3309 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3308, align 8, !noalias !258
  %60 = sub i64 %ecx.memory.len.i3307, %ecx.memory.last_checkpoint.i3309
  %61 = icmp ult i64 %60, 96
  br i1 %61, label %resize.i3317, label %OP165.MLOAD.contd, !prof !5

resize.i3317:                                     ; preds = %OP159.PUSH1
  %62 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !256
  %.not.i3318 = icmp eq i8 %62, 0
  br i1 %.not.i3318, label %resize.i3317.OP165.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3317.OP165.MLOAD.contd_crit_edge:         ; preds = %resize.i3317
  %swap.b533.pre = load i256, ptr %sp474, align 16
  br label %OP165.MLOAD.contd

OP165.MLOAD.contd:                                ; preds = %resize.i3317.OP165.MLOAD.contd_crit_edge, %OP159.PUSH1
  %swap.b533 = phi i256 [ %swap.b533.pre, %resize.i3317.OP165.MLOAD.contd_crit_edge ], [ %59, %OP159.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i3311 = getelementptr inbounds i8, ptr %ecx.memory.i3305, i64 8
  %ecx.memory.buffer.ptr.shared.i3312 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3311, align 8, !noalias !258
  %ecx.memory.buffer.ptr.i3313 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3312, i64 %ecx.memory.last_checkpoint.i3309
  %slot.i3314 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3313, i64 64
  %slot.value.i3315 = load i256, ptr %slot.i3314, align 1, !noalias !258
  %63 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3315)
  store i256 %swap.b533, ptr %sp472, align 16
  %64 = sub i256 %swap.b533, %63
  store i256 %64, ptr %sp474, align 16
  store i256 %63, ptr %sp464, align 16
  %65 = add i64 %len.addr.37, -1
  %66 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp474, i8 2)
  %.not3261 = icmp eq i8 %66, 0
  %spec.select2392 = select i1 %.not3261, i8 2, i8 %66, !prof !6
  br label %return

OP171.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP30.DUP1
  %len.addr.6 = phi i64 [ 1, %OP30.DUP1 ], [ %len.addr.37, %dynamic_jump_table ]
  %67 = add i64 %len.addr.6, 1
  %contract.call_value.addr549 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value550 = load i256, ptr %contract.call_value.addr549, align 16
  %sp551 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.6
  store i256 %contract.call_value550, ptr %sp551, align 16
  %sp555 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %67
  %68 = icmp eq i256 %contract.call_value550, 0
  %69 = zext i1 %68 to i256
  store i256 %69, ptr %sp555, align 16
  br i1 %68, label %OP180.JUMPDEST, label %OP177.PUSH1

OP177.PUSH1:                                      ; preds = %OP171.JUMPDEST
  store i256 0, ptr %sp555, align 16
  %sp568 = getelementptr i256, ptr %sp551, i64 2
  store i256 0, ptr %sp568, align 16
  %70 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp555, i8 16)
  %.not3257 = icmp eq i8 %70, 0
  %spec.select2393 = select i1 %.not3257, i8 16, i8 %70, !prof !6
  br label %return

OP180.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP171.JUMPDEST
  %len.addr.7 = phi i64 [ %67, %OP171.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %71 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.7
  %sp574 = getelementptr i256, ptr %71, i64 -1
  store i256 416, ptr %sp574, align 16
  %72 = add i64 %len.addr.7, 1
  %sp580 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %72
  %contract.input.len.addr582 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len583 = load i64, ptr %contract.input.len.addr582, align 8
  %73 = zext i64 %contract.input.len583 to i256
  %sp584 = getelementptr i256, ptr %71, i64 2
  store i256 %73, ptr %71, align 16
  store i256 4, ptr %sp580, align 16
  store i256 4, ptr %sp584, align 16
  %sp613 = getelementptr i256, ptr %71, i64 3
  store i256 4, ptr %sp613, align 16
  %74 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val = load ptr, ptr %74, align 8
  %75 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val, i64 %contract.input.len583)
  %sp619 = getelementptr i256, ptr %71, i64 4
  %76 = and i256 %75, 1461501637330902918203684832716283019655932542975
  store i256 32, ptr %sp619, align 16
  store i256 %76, ptr %71, align 16
  store i256 %73, ptr %sp580, align 16
  store i256 4, ptr %sp584, align 16
  store i256 36, ptr %sp613, align 16
  br label %OP398.JUMPDEST

OP209.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP35.DUP1
  %len.addr.8 = phi i64 [ 1, %OP35.DUP1 ], [ %len.addr.37, %dynamic_jump_table ]
  %77 = add i64 %len.addr.8, 1
  %contract.call_value.addr667 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value668 = load i256, ptr %contract.call_value.addr667, align 16
  %sp669 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.8
  store i256 %contract.call_value668, ptr %sp669, align 16
  %sp673 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %77
  %78 = icmp eq i256 %contract.call_value668, 0
  %79 = zext i1 %78 to i256
  store i256 %79, ptr %sp673, align 16
  br i1 %78, label %OP218.JUMPDEST, label %OP215.PUSH1

OP215.PUSH1:                                      ; preds = %OP209.JUMPDEST
  store i256 0, ptr %sp673, align 16
  %sp686 = getelementptr i256, ptr %sp669, i64 2
  store i256 0, ptr %sp686, align 16
  %80 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp673, i8 16)
  %.not3256 = icmp eq i8 %80, 0
  %spec.select2394 = select i1 %.not3256, i8 16, i8 %80, !prof !6
  br label %return

OP218.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP209.JUMPDEST
  %len.addr.9 = phi i64 [ %77, %OP209.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %81 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.9
  %sp692 = getelementptr i256, ptr %81, i64 -1
  store i256 439, ptr %sp692, align 16
  br label %OP521.JUMPDEST

OP223.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %82 = add i64 %len.addr.37, 1
  %sp696 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  store i256 64, ptr %sp696, align 16
  %ecx.memory.i3321 = load ptr, ptr %ecx.memory.addr.i3461, align 8
  %ecx.memory.len.addr.i3322 = getelementptr inbounds i8, ptr %ecx.memory.i3321, i64 16
  %ecx.memory.len.i3323 = load i64, ptr %ecx.memory.len.addr.i3322, align 8, !noalias !259
  %ecx.memory.last_checkpoint.addr.i3324 = getelementptr inbounds i8, ptr %ecx.memory.i3321, i64 48
  %ecx.memory.last_checkpoint.i3325 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3324, align 8, !noalias !259
  %83 = sub i64 %ecx.memory.len.i3323, %ecx.memory.last_checkpoint.i3325
  %84 = icmp ult i64 %83, 96
  br i1 %84, label %resize.i3333, label %OP225.MLOAD.contd, !prof !5

resize.i3333:                                     ; preds = %OP223.JUMPDEST
  %85 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !263
  %.not.i3334 = icmp eq i8 %85, 0
  br i1 %.not.i3334, label %resize.i3333.OP225.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3333.OP225.MLOAD.contd_crit_edge:         ; preds = %resize.i3333
  %ecx.memory.i3337.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8
  br label %OP225.MLOAD.contd

OP225.MLOAD.contd:                                ; preds = %resize.i3333.OP225.MLOAD.contd_crit_edge, %OP223.JUMPDEST
  %ecx.memory.i3337 = phi ptr [ %ecx.memory.i3337.pre, %resize.i3333.OP225.MLOAD.contd_crit_edge ], [ %ecx.memory.i3321, %OP223.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i3327 = getelementptr inbounds i8, ptr %ecx.memory.i3321, i64 8
  %ecx.memory.buffer.ptr.shared.i3328 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3327, align 8, !noalias !259
  %ecx.memory.buffer.ptr.i3329 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3328, i64 %ecx.memory.last_checkpoint.i3325
  %slot.i3330 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3329, i64 64
  %slot.value.i3331 = load i256, ptr %slot.i3330, align 1, !noalias !259
  %86 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3331)
  store i256 %86, ptr %sp696, align 16
  %87 = add i64 %len.addr.37, 2
  %sp706 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %82
  store i256 %86, ptr %sp706, align 16
  %sp708 = getelementptr i256, ptr %sp696, i64 -1
  %dup3709 = load i256, ptr %sp708, align 16
  %sp710 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %87
  %sp712 = getelementptr i256, ptr %sp696, i64 3
  %88 = and i256 %dup3709, 1461501637330902918203684832716283019655932542975
  store i256 %88, ptr %sp710, align 16
  store i256 %86, ptr %sp712, align 16
  %ecx.memory.len.addr.i3338 = getelementptr inbounds i8, ptr %ecx.memory.i3337, i64 16
  %ecx.memory.len.i3339 = load i64, ptr %ecx.memory.len.addr.i3338, align 8, !noalias !264
  %ecx.memory.last_checkpoint.addr.i3340 = getelementptr inbounds i8, ptr %ecx.memory.i3337, i64 48
  %ecx.memory.last_checkpoint.i3341 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3340, align 8, !noalias !264
  %89 = sub i64 %ecx.memory.len.i3339, %ecx.memory.last_checkpoint.i3341
  %90 = icmp ugt i256 %86, 18446744073709551615
  %91 = trunc i256 %86 to i64
  %92 = add i64 %91, 32
  %93 = icmp ugt i64 %91, -33
  %94 = or i1 %90, %93
  %95 = select i1 %94, i64 -1, i64 %92
  %96 = icmp ugt i64 %95, %89
  br i1 %96, label %resize.i3348, label %OP234.PUSH1, !prof !5

resize.i3348:                                     ; preds = %OP225.MLOAD.contd
  %97 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %95)
  %.not.i3349 = icmp eq i8 %97, 0
  br i1 %.not.i3349, label %resize.i3348.OP234.PUSH1_crit_edge, label %return, !prof !6

resize.i3348.OP234.PUSH1_crit_edge:               ; preds = %resize.i3348
  %ecx.memory.i3352.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8, !alias.scope !267, !noalias !270
  br label %OP234.PUSH1

OP234.PUSH1:                                      ; preds = %resize.i3348.OP234.PUSH1_crit_edge, %OP225.MLOAD.contd
  %ecx.memory.i3352 = phi ptr [ %ecx.memory.i3352.pre, %resize.i3348.OP234.PUSH1_crit_edge ], [ %ecx.memory.i3337, %OP225.MLOAD.contd ]
  %ecx.memory.buffer.ptr.shared.addr.i3343 = getelementptr inbounds i8, ptr %ecx.memory.i3337, i64 8
  %ecx.memory.buffer.ptr.shared.i3344 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3343, align 8, !noalias !264
  %ecx.memory.buffer.ptr.i3345 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3344, i64 %ecx.memory.last_checkpoint.i3341
  %slot.i3346 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3345, i64 %91
  %98 = tail call i256 @llvm.bswap.i256(i256 %88)
  store i256 %98, ptr %slot.i3346, align 1, !noalias !264
  store i256 32, ptr %sp710, align 16
  %b742 = load i256, ptr %sp706, align 16
  %99 = add i256 %b742, 32
  %swap.b748 = load i256, ptr %sp708, align 16
  store i256 %99, ptr %sp708, align 16
  store i256 %swap.b748, ptr %sp706, align 16
  store i256 64, ptr %sp696, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !267)
  %ecx.memory.len.addr.i3353 = getelementptr inbounds i8, ptr %ecx.memory.i3352, i64 16
  %ecx.memory.len.i3354 = load i64, ptr %ecx.memory.len.addr.i3353, align 8, !noalias !272
  %ecx.memory.last_checkpoint.addr.i3355 = getelementptr inbounds i8, ptr %ecx.memory.i3352, i64 48
  %ecx.memory.last_checkpoint.i3356 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3355, align 8, !noalias !272
  %100 = sub i64 %ecx.memory.len.i3354, %ecx.memory.last_checkpoint.i3356
  %101 = icmp ult i64 %100, 96
  br i1 %101, label %resize.i3364, label %OP240.MLOAD.contd, !prof !5

resize.i3364:                                     ; preds = %OP234.PUSH1
  %102 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !270
  %.not.i3365 = icmp eq i8 %102, 0
  br i1 %.not.i3365, label %resize.i3364.OP240.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3364.OP240.MLOAD.contd_crit_edge:         ; preds = %resize.i3364
  %swap.b767.pre = load i256, ptr %sp708, align 16
  br label %OP240.MLOAD.contd

OP240.MLOAD.contd:                                ; preds = %resize.i3364.OP240.MLOAD.contd_crit_edge, %OP234.PUSH1
  %swap.b767 = phi i256 [ %swap.b767.pre, %resize.i3364.OP240.MLOAD.contd_crit_edge ], [ %99, %OP234.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i3358 = getelementptr inbounds i8, ptr %ecx.memory.i3352, i64 8
  %ecx.memory.buffer.ptr.shared.i3359 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3358, align 8, !noalias !272
  %ecx.memory.buffer.ptr.i3360 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3359, i64 %ecx.memory.last_checkpoint.i3356
  %slot.i3361 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3360, i64 64
  %slot.value.i3362 = load i256, ptr %slot.i3361, align 1, !noalias !272
  %103 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3362)
  store i256 %swap.b767, ptr %sp706, align 16
  %104 = sub i256 %swap.b767, %103
  store i256 %104, ptr %sp708, align 16
  store i256 %103, ptr %sp696, align 16
  %105 = add i64 %len.addr.37, -1
  %106 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp708, i8 2)
  %.not3255 = icmp eq i8 %106, 0
  %spec.select2395 = select i1 %.not3255, i8 2, i8 %106, !prof !6
  br label %return

OP246.JUMPDEST.sink.split.loopexit3722:           ; preds = %dynamic_jump_table, %OP264.JUMPDEST, %OP293.JUMPDEST, %OP372.JUMPDEST
  %len.addr.24.sink3681.ph = phi i64 [ %117, %OP264.JUMPDEST ], [ %126, %OP293.JUMPDEST ], [ %157, %OP372.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %.sink.ph = phi i256 [ 612, %OP264.JUMPDEST ], [ 770, %OP293.JUMPDEST ], [ 860, %OP372.JUMPDEST ], [ 117, %dynamic_jump_table ]
  br label %OP246.JUMPDEST.sink.split

OP246.JUMPDEST.sink.split:                        ; preds = %dynamic_jump_table, %OP246.JUMPDEST.sink.split.loopexit3722, %OP3.PUSH1, %OP35.DUP1, %OP526.JUMPDEST, %OP402.JUMPDEST, %OP357.JUMPDEST, %OP390.JUMPDEST, %OP513.JUMPDEST, %OP544.JUMPDEST
  %len.addr.24.sink3681 = phi i64 [ %len.addr.37, %OP357.JUMPDEST ], [ %len.addr.37, %OP390.JUMPDEST ], [ %165, %OP402.JUMPDEST ], [ %len.addr.37, %OP513.JUMPDEST ], [ %236, %OP526.JUMPDEST ], [ %len.addr.37, %OP544.JUMPDEST ], [ 0, %OP3.PUSH1 ], [ 1, %OP35.DUP1 ], [ %len.addr.24.sink3681.ph, %OP246.JUMPDEST.sink.split.loopexit3722 ], [ %len.addr.37, %dynamic_jump_table ]
  %.sink = phi i256 [ 770, %OP357.JUMPDEST ], [ 860, %OP390.JUMPDEST ], [ 1306, %OP402.JUMPDEST ], [ 1306, %OP513.JUMPDEST ], [ 1394, %OP526.JUMPDEST ], [ 1394, %OP544.JUMPDEST ], [ 117, %OP3.PUSH1 ], [ 117, %OP35.DUP1 ], [ %.sink.ph, %OP246.JUMPDEST.sink.split.loopexit3722 ], [ 612, %dynamic_jump_table ]
  %107 = add i64 %len.addr.24.sink3681, 1
  %sp1574 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.24.sink3681
  store i256 %.sink, ptr %sp1574, align 16
  br label %OP246.JUMPDEST

OP246.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP246.JUMPDEST.sink.split
  %len.addr.10 = phi i64 [ %107, %OP246.JUMPDEST.sink.split ], [ %len.addr.37, %dynamic_jump_table ]
  %108 = add i64 %len.addr.10, 1
  %sp783 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.10
  store i256 513, ptr %sp783, align 16
  br label %OP552.JUMPDEST

OP250.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %sp787 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  store i256 529, ptr %sp787, align 16
  %109 = add i64 %len.addr.37, 2
  %sp789 = getelementptr i256, ptr %sp787, i64 1
  store i256 524, ptr %sp789, align 16
  br label %OP617.JUMPDEST

OP258.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %110 = add i64 %len.addr.37, -1
  %sp795 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %110
  %a796 = load i256, ptr %sp795, align 16
  br label %dynamic_jump_table.backedge

dynamic_jump_table.backedge:                      ; preds = %OP258.JUMPDEST, %OP286.JUMPDEST, %OP395.JUMPDEST, %OP518.JUMPDEST, %OP549.JUMPDEST, %OP615.JUMPDEST, %OP627.SWAP2, %OP706.POP, %OP718.POP, %OP721.JUMPDEST, %OP786.POP, %OP794.SWAP1
  %len.addr.37.be = phi i64 [ %341, %OP794.SWAP1 ], [ %336, %OP786.POP ], [ %313, %OP721.JUMPDEST ], [ %312, %OP718.POP ], [ %310, %OP706.POP ], [ %len.addr.28, %OP627.SWAP2 ], [ %267, %OP615.JUMPDEST ], [ %241, %OP549.JUMPDEST ], [ %230, %OP518.JUMPDEST ], [ %162, %OP395.JUMPDEST ], [ %119, %OP286.JUMPDEST ], [ %110, %OP258.JUMPDEST ]
  %.be = phi i256 [ %swap.b2377, %OP794.SWAP1 ], [ %a2334, %OP786.POP ], [ %a2115, %OP721.JUMPDEST ], [ %a2111, %OP718.POP ], [ %a2077, %OP706.POP ], [ %swap.b1845, %OP627.SWAP2 ], [ %a1804, %OP615.JUMPDEST ], [ %swap.b1582, %OP549.JUMPDEST ], [ %a1520, %OP518.JUMPDEST ], [ %swap.b1117, %OP395.JUMPDEST ], [ %a851, %OP286.JUMPDEST ], [ %a796, %OP258.JUMPDEST ]
  br label %dynamic_jump_table

OP260.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP55.JUMPDEST
  %len.addr.11 = phi i64 [ %25, %OP55.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %111 = add i64 %len.addr.11, 1
  %sp799 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.11
  store i256 539, ptr %sp799, align 16
  br label %OP661.JUMPDEST

OP264.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %112 = add i64 %len.addr.37, 1
  %sp803 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp807 = getelementptr i256, ptr %sp803, i64 -1
  %b808 = load i256, ptr %sp807, align 16
  %contract.caller = load i160, ptr %contract.caller.addr1600, align 16
  %113 = tail call i160 @llvm.bswap.i160(i160 %contract.caller)
  %114 = zext i160 %113 to i256
  %sp813 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %112
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp813, align 16
  store i256 %114, ptr %sp803, align 16
  %115 = trunc i256 %b808 to i160
  %116 = icmp ne i160 %113, %115
  %117 = add i64 %len.addr.37, -1
  %sp827 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %117
  %118 = zext i1 %116 to i256
  store i256 %118, ptr %sp827, align 16
  br i1 %116, label %OP246.JUMPDEST.sink.split.loopexit3722, label %OP274.PUSH2

OP274.PUSH2:                                      ; preds = %OP264.JUMPDEST
  store i256 599, ptr %sp827, align 16
  %sp836 = getelementptr i256, ptr %sp803, i64 -2
  br label %OP676.JUMPDEST.sink.split

OP286.JUMPDEST:                                   ; preds = %dynamic_jump_table, %dynamic_jump_table, %dynamic_jump_table
  %119 = add i64 %len.addr.37, -2
  %sp850 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %119
  %a851 = load i256, ptr %sp850, align 16
  br label %dynamic_jump_table.backedge

OP289.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP84.JUMPDEST
  %len.addr.13 = phi i64 [ %30, %OP84.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %120 = add i64 %len.addr.13, 1
  %sp854 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.13
  store i256 624, ptr %sp854, align 16
  br label %OP661.JUMPDEST

OP293.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %121 = add i64 %len.addr.37, 1
  %sp858 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp862 = getelementptr i256, ptr %sp858, i64 -1
  %b863 = load i256, ptr %sp862, align 16
  %contract.caller867 = load i160, ptr %contract.caller.addr1600, align 16
  %122 = tail call i160 @llvm.bswap.i160(i160 %contract.caller867)
  %123 = zext i160 %122 to i256
  %sp870 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %121
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp870, align 16
  store i256 %123, ptr %sp858, align 16
  %124 = trunc i256 %b863 to i160
  %125 = icmp ne i160 %122, %124
  %126 = add i64 %len.addr.37, -1
  %sp884 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %126
  %127 = zext i1 %125 to i256
  store i256 %127, ptr %sp884, align 16
  br i1 %125, label %OP246.JUMPDEST.sink.split.loopexit3722, label %OP303.PUSH2

OP303.PUSH2:                                      ; preds = %OP293.JUMPDEST
  store i256 684, ptr %sp884, align 16
  %sp893 = getelementptr i256, ptr %sp858, i64 -4
  br label %OP676.JUMPDEST.sink.split

OP307.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %contract.target_address.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address = load i160, ptr %contract.target_address.addr, align 16
  %128 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address)
  %129 = zext i160 %128 to i256
  %sp898 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp900 = getelementptr i256, ptr %sp898, i64 1
  store i256 %129, ptr %sp898, align 16
  %contract.call_value.addr908 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value909 = load i256, ptr %contract.call_value.addr908, align 16
  store i256 %contract.call_value909, ptr %sp900, align 16
  %sp912 = getelementptr i256, ptr %sp898, i64 -2
  %dup4913 = load i256, ptr %sp912, align 16
  %sp914 = getelementptr i256, ptr %sp898, i64 2
  store i256 %dup4913, ptr %sp914, align 16
  %sp916 = getelementptr i256, ptr %sp898, i64 -1
  %dup4917 = load i256, ptr %sp916, align 16
  %sp918 = getelementptr i256, ptr %sp898, i64 3
  store i256 %dup4917, ptr %sp918, align 16
  %130 = add i64 %len.addr.37, 5
  %sp920 = getelementptr i256, ptr %sp898, i64 4
  store i256 64, ptr %sp920, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !273)
  %ecx.memory.i3368 = load ptr, ptr %ecx.memory.addr.i3461, align 8, !alias.scope !273, !noalias !276
  %ecx.memory.len.addr.i3369 = getelementptr inbounds i8, ptr %ecx.memory.i3368, i64 16
  %ecx.memory.len.i3370 = load i64, ptr %ecx.memory.len.addr.i3369, align 8, !noalias !278
  %ecx.memory.last_checkpoint.addr.i3371 = getelementptr inbounds i8, ptr %ecx.memory.i3368, i64 48
  %ecx.memory.last_checkpoint.i3372 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3371, align 8, !noalias !278
  %131 = sub i64 %ecx.memory.len.i3370, %ecx.memory.last_checkpoint.i3372
  %132 = icmp ult i64 %131, 96
  br i1 %132, label %resize.i3380, label %OP315.MLOAD.contd, !prof !5

resize.i3380:                                     ; preds = %OP307.JUMPDEST
  %133 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !276
  %.not.i3381 = icmp eq i8 %133, 0
  br i1 %.not.i3381, label %resize.i3380.OP315.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3380.OP315.MLOAD.contd_crit_edge:         ; preds = %resize.i3380
  %dup4933.pre = load i256, ptr %sp914, align 16
  %dup4937.pre = load i256, ptr %sp918, align 16
  br label %OP315.MLOAD.contd

OP315.MLOAD.contd:                                ; preds = %resize.i3380.OP315.MLOAD.contd_crit_edge, %OP307.JUMPDEST
  %dup4937 = phi i256 [ %dup4937.pre, %resize.i3380.OP315.MLOAD.contd_crit_edge ], [ %dup4917, %OP307.JUMPDEST ]
  %dup4933 = phi i256 [ %dup4933.pre, %resize.i3380.OP315.MLOAD.contd_crit_edge ], [ %dup4913, %OP307.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i3374 = getelementptr inbounds i8, ptr %ecx.memory.i3368, i64 8
  %ecx.memory.buffer.ptr.shared.i3375 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3374, align 8, !noalias !278
  %ecx.memory.buffer.ptr.i3376 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3375, i64 %ecx.memory.last_checkpoint.i3372
  %slot.i3377 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3376, i64 64
  %slot.value.i3378 = load i256, ptr %slot.i3377, align 1, !noalias !278
  %134 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3378)
  store i256 %134, ptr %sp920, align 16
  %sp930 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %130
  store i256 %134, ptr %sp930, align 16
  %sp934 = getelementptr i256, ptr %sp898, i64 6
  store i256 %dup4933, ptr %sp934, align 16
  %135 = add i64 %len.addr.37, 8
  %sp938 = getelementptr i256, ptr %sp898, i64 7
  store i256 %dup4937, ptr %sp938, align 16
  %sp942 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %135
  store i256 %dup4937, ptr %sp942, align 16
  %sp946 = getelementptr i256, ptr %sp898, i64 9
  store i256 %dup4933, ptr %sp946, align 16
  %sp949 = getelementptr i256, ptr %sp898, i64 10
  store i256 %134, ptr %sp949, align 16
  %136 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp942)
  %.not3245 = icmp eq i8 %136, 0
  br i1 %.not3245, label %OP323.DUP3, label %return, !prof !6

OP323.DUP3:                                       ; preds = %OP315.MLOAD.contd
  %dup3954 = load i256, ptr %sp930, align 16
  store i256 %dup3954, ptr %sp942, align 16
  %b960 = load i256, ptr %sp938, align 16
  %137 = add i256 %b960, %dup3954
  store i256 %dup3954, ptr %sp938, align 16
  %swap.b973 = load i256, ptr %sp914, align 16
  store i256 %137, ptr %sp914, align 16
  store i256 %swap.b973, ptr %sp930, align 16
  store i256 0, ptr %sp918, align 16
  store i256 64, ptr %sp920, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !279)
  %ecx.memory.i3384 = load ptr, ptr %ecx.memory.addr.i3461, align 8, !alias.scope !279, !noalias !282
  %ecx.memory.len.addr.i3385 = getelementptr inbounds i8, ptr %ecx.memory.i3384, i64 16
  %ecx.memory.len.i3386 = load i64, ptr %ecx.memory.len.addr.i3385, align 8, !noalias !284
  %ecx.memory.last_checkpoint.addr.i3387 = getelementptr inbounds i8, ptr %ecx.memory.i3384, i64 48
  %ecx.memory.last_checkpoint.i3388 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3387, align 8, !noalias !284
  %138 = sub i64 %ecx.memory.len.i3386, %ecx.memory.last_checkpoint.i3388
  %139 = icmp ult i64 %138, 96
  br i1 %139, label %resize.i3396, label %OP334.MLOAD.contd, !prof !5

resize.i3396:                                     ; preds = %OP323.DUP3
  %140 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !282
  %.not.i3397 = icmp eq i8 %140, 0
  br i1 %.not.i3397, label %resize.i3396.OP334.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3396.OP334.MLOAD.contd_crit_edge:         ; preds = %resize.i3396
  %dup4993.pre = load i256, ptr %sp914, align 16
  br label %OP334.MLOAD.contd

OP334.MLOAD.contd:                                ; preds = %resize.i3396.OP334.MLOAD.contd_crit_edge, %OP323.DUP3
  %dup4993 = phi i256 [ %dup4993.pre, %resize.i3396.OP334.MLOAD.contd_crit_edge ], [ %137, %OP323.DUP3 ]
  %ecx.memory.buffer.ptr.shared.addr.i3390 = getelementptr inbounds i8, ptr %ecx.memory.i3384, i64 8
  %ecx.memory.buffer.ptr.shared.i3391 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3390, align 8, !noalias !284
  %ecx.memory.buffer.ptr.i3392 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3391, i64 %ecx.memory.last_checkpoint.i3388
  %slot.i3393 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3392, i64 64
  %slot.value.i3394 = load i256, ptr %slot.i3393, align 1, !noalias !284
  %141 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3394)
  store i256 %141, ptr %sp920, align 16
  %142 = sub i256 %dup4993, %141
  store i256 %142, ptr %sp930, align 16
  store i256 %141, ptr %sp934, align 16
  %dup6 = load i256, ptr %sp900, align 16
  store i256 %dup6, ptr %sp938, align 16
  %dup8 = load i256, ptr %sp898, align 16
  store i256 %dup8, ptr %sp942, align 16
  %gas.remaining = load i64, ptr %gas.remaining.addr, align 8
  %143 = zext i64 %gas.remaining to i256
  store i256 %143, ptr %sp946, align 16
  %144 = add i64 %len.addr.37, 3
  %145 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr nonnull %sp918, i8 17, i8 0)
  %.not3247 = icmp eq i8 %145, 0
  br i1 %.not3247, label %suspend, label %return, !prof !6

OP343.SWAP3:                                      ; preds = %resume
  %146 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len2388
  %sp1016 = getelementptr i256, ptr %146, i64 -1
  %swap.a1017 = load i256, ptr %sp1016, align 16
  %sp1018 = getelementptr i256, ptr %146, i64 -4
  %swap.b1019 = load i256, ptr %sp1018, align 16
  store i256 %swap.b1019, ptr %sp1016, align 16
  %147 = add i64 %stack_len2388, -4
  %sp1024 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %147
  %148 = icmp ne i256 %swap.a1017, 0
  %149 = zext i1 %148 to i256
  store i256 %149, ptr %sp1024, align 16
  br i1 %148, label %OP362.JUMPDEST, label %OP351.PUSH1

OP351.PUSH1:                                      ; preds = %OP343.SWAP3
  store i256 0, ptr %sp1024, align 16
  %sp1039 = getelementptr i256, ptr %146, i64 -3
  store i256 0, ptr %sp1039, align 16
  %150 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1018, i8 16)
  %.not3203 = icmp eq i8 %150, 0
  %spec.select2396 = select i1 %.not3203, i8 16, i8 %150, !prof !6
  br label %return

OP357.JUMPDEST:                                   ; preds = %dynamic_jump_table
  br label %OP246.JUMPDEST.sink.split

OP362.JUMPDEST:                                   ; preds = %dynamic_jump_table, %dynamic_jump_table, %dynamic_jump_table, %OP343.SWAP3
  %len.addr.16 = phi i64 [ %147, %OP343.SWAP3 ], [ %len.addr.37, %dynamic_jump_table ], [ %len.addr.37, %dynamic_jump_table ], [ %len.addr.37, %dynamic_jump_table ]
  %151 = add i64 %len.addr.16, -4
  %sp1054 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %151
  %a1055 = load i256, ptr %sp1054, align 16
  br label %dynamic_jump_table.preheader

OP367.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP143.JUMPDEST
  %len.addr.17 = phi i64 [ %len.addr.5, %OP143.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %sp1058 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.17
  store i256 0, ptr %sp1058, align 16
  %152 = add i64 %len.addr.17, 2
  %sp1060 = getelementptr i256, ptr %sp1058, i64 1
  store i256 786, ptr %sp1060, align 16
  br label %OP661.JUMPDEST

OP372.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %sp1064 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp1068 = getelementptr i256, ptr %sp1064, i64 -1
  %b1069 = load i256, ptr %sp1068, align 16
  %contract.caller1073 = load i160, ptr %contract.caller.addr1600, align 16
  %153 = tail call i160 @llvm.bswap.i160(i160 %contract.caller1073)
  %154 = zext i160 %153 to i256
  %sp1076 = getelementptr i256, ptr %sp1064, i64 1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1076, align 16
  store i256 %154, ptr %sp1064, align 16
  %155 = trunc i256 %b1069 to i160
  %156 = icmp ne i160 %153, %155
  %157 = add i64 %len.addr.37, -1
  %sp1090 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %157
  %158 = zext i1 %156 to i256
  store i256 %158, ptr %sp1090, align 16
  br i1 %156, label %OP246.JUMPDEST.sink.split.loopexit3722, label %OP382.PUSH2

OP382.PUSH2:                                      ; preds = %OP372.JUMPDEST
  store i256 845, ptr %sp1090, align 16
  br label %OP617.JUMPDEST

OP385.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %159 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp1101 = getelementptr i256, ptr %159, i64 -1
  %swap.a1102 = load i256, ptr %sp1101, align 16
  %sp1103 = getelementptr i256, ptr %159, i64 -2
  %swap.b1104 = load i256, ptr %sp1103, align 16
  store i256 %swap.a1102, ptr %sp1103, align 16
  store i256 %swap.b1104, ptr %sp1101, align 16
  %160 = add i64 %len.addr.37, -1
  br label %OP395.JUMPDEST

OP390.JUMPDEST:                                   ; preds = %dynamic_jump_table
  br label %OP246.JUMPDEST.sink.split

OP395.JUMPDEST:                                   ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP385.JUMPDEST
  %len.addr.19 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %160, %OP385.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %161 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.19
  %sp1114 = getelementptr i256, ptr %161, i64 -1
  %swap.a1115 = load i256, ptr %sp1114, align 16
  %sp1116 = getelementptr i256, ptr %161, i64 -2
  %swap.b1117 = load i256, ptr %sp1116, align 16
  store i256 %swap.a1115, ptr %sp1116, align 16
  store i256 %swap.b1117, ptr %sp1114, align 16
  %162 = add i64 %len.addr.19, -1
  br label %dynamic_jump_table.backedge

OP398.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP180.JUMPDEST
  %len.addr.20 = phi i64 [ %72, %OP180.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %163 = add i64 %len.addr.20, 1
  %sp1123 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.20
  store i256 872, ptr %sp1123, align 16
  br label %OP661.JUMPDEST

OP402.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %164 = add i64 %len.addr.37, 1
  %sp1127 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %165 = add i64 %len.addr.37, -1
  %sp1131 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %165
  %b1132 = load i256, ptr %sp1131, align 16
  %contract.caller1136 = load i160, ptr %contract.caller.addr1600, align 16
  %166 = tail call i160 @llvm.bswap.i160(i160 %contract.caller1136)
  %167 = zext i160 %166 to i256
  %168 = add i64 %len.addr.37, 2
  %sp1139 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %164
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1139, align 16
  store i256 %167, ptr %sp1127, align 16
  %169 = trunc i256 %b1132 to i160
  %170 = icmp ne i160 %166, %169
  %171 = zext i1 %170 to i256
  store i256 %171, ptr %sp1131, align 16
  br i1 %170, label %OP246.JUMPDEST.sink.split, label %OP412.PUSH1

OP412.PUSH1:                                      ; preds = %OP402.JUMPDEST
  %sp1170 = getelementptr i256, ptr %sp1127, i64 -2
  %dup21171 = load i256, ptr %sp1170, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1139, align 16
  %172 = and i256 %dup21171, 1461501637330902918203684832716283019655932542975
  store i256 %172, ptr %sp1127, align 16
  %173 = icmp ne i256 %172, 0
  %174 = zext i1 %173 to i256
  store i256 %174, ptr %sp1131, align 16
  br i1 %173, label %OP467.JUMPDEST, label %OP424.PUSH1

OP424.PUSH1:                                      ; preds = %OP412.PUSH1
  store i256 64, ptr %sp1131, align 16
  %mload.out.slot1207 = alloca i256, align 16
  %175 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1207, ptr %arg.ecx.addr)
  %.not3236 = icmp eq i8 %175, 0
  br i1 %.not3236, label %OP425.MLOAD.contd, label %return, !prof !6

OP425.MLOAD.contd:                                ; preds = %OP424.PUSH1
  %mload.out1208 = load i256, ptr %mload.out.slot1207, align 16
  store i256 %mload.out1208, ptr %sp1131, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp1127, align 16
  %sp1213 = getelementptr i256, ptr %sp1127, i64 -1
  store i256 %mload.out1208, ptr %sp1139, align 16
  %176 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1208, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not3237 = icmp eq i8 %176, 0
  br i1 %.not3237, label %OP429.PUSH1, label %return, !prof !6

OP429.PUSH1:                                      ; preds = %OP425.MLOAD.contd
  %b1227 = load i256, ptr %sp1131, align 16
  %177 = add i256 %b1227, 4
  store i256 %177, ptr %sp1131, align 16
  store i256 %177, ptr %sp1127, align 16
  %178 = add i64 %len.addr.37, 3
  %sp1238 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %168
  %179 = add i256 %b1227, 36
  store i256 %179, ptr %sp1139, align 16
  %sp1252 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %178
  store i256 32, ptr %sp1238, align 16
  store i256 %177, ptr %sp1252, align 16
  %180 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %177, i256 32, ptr %arg.ecx.addr)
  %.not3238 = icmp eq i8 %180, 0
  br i1 %.not3238, label %OP440.PUSH1, label %return, !prof !6

OP440.PUSH1:                                      ; preds = %OP429.PUSH1
  store i256 54, ptr %sp1238, align 16
  %dup21272 = load i256, ptr %sp1139, align 16
  store i256 %dup21272, ptr %sp1252, align 16
  %181 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup21272, i256 54, ptr %arg.ecx.addr)
  %.not3239 = icmp eq i8 %181, 0
  br i1 %.not3239, label %OP443.PUSH1, label %return, !prof !6

OP443.PUSH1:                                      ; preds = %OP440.PUSH1
  %b1285 = load i256, ptr %sp1139, align 16
  %182 = add i256 %b1285, 32
  store i256 %182, ptr %sp1139, align 16
  store i256 %182, ptr %sp1238, align 16
  store i256 30477107189792067702951349257708165893248881721137574385922903256726661788271, ptr %sp1252, align 16
  %sp1296 = getelementptr i256, ptr %sp1127, i64 4
  store i256 %182, ptr %sp1296, align 16
  %183 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %182, i256 30477107189792067702951349257708165893248881721137574385922903256726661788271, ptr %arg.ecx.addr)
  %.not3240 = icmp eq i8 %183, 0
  br i1 %.not3240, label %OP449.PUSH1, label %return, !prof !6

OP449.PUSH1:                                      ; preds = %OP443.PUSH1
  %b1308 = load i256, ptr %sp1238, align 16
  %184 = add i256 %b1308, 32
  store i256 %184, ptr %sp1238, align 16
  store i256 54491554319770077267973647787871709851929635748906334457066294958349250199552, ptr %sp1252, align 16
  store i256 %184, ptr %sp1296, align 16
  %185 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %184, i256 54491554319770077267973647787871709851929635748906334457066294958349250199552, ptr %arg.ecx.addr)
  %.not3241 = icmp eq i8 %185, 0
  br i1 %.not3241, label %OP454.POP, label %return, !prof !6

OP454.POP:                                        ; preds = %OP449.PUSH1
  store i256 64, ptr %sp1238, align 16
  %b1328 = load i256, ptr %sp1139, align 16
  %186 = add i256 %b1328, 64
  %swap.b1334 = load i256, ptr %sp1213, align 16
  store i256 %186, ptr %sp1213, align 16
  store i256 %swap.b1334, ptr %sp1139, align 16
  store i256 64, ptr %sp1127, align 16
  %mload.out.slot1342 = alloca i256, align 16
  %187 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1342, ptr %arg.ecx.addr)
  %.not3242 = icmp eq i8 %187, 0
  br i1 %.not3242, label %OP461.MLOAD.contd, label %return, !prof !6

OP461.MLOAD.contd:                                ; preds = %OP454.POP
  %mload.out1343 = load i256, ptr %mload.out.slot1342, align 16
  %swap.b1353 = load i256, ptr %sp1213, align 16
  store i256 %swap.b1353, ptr %sp1139, align 16
  %188 = sub i256 %swap.b1353, %mload.out1343
  store i256 %188, ptr %sp1213, align 16
  store i256 %mload.out1343, ptr %sp1127, align 16
  %189 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1213, i8 16)
  %.not3243 = icmp eq i8 %189, 0
  %spec.select2397 = select i1 %.not3243, i8 16, i8 %189, !prof !6
  br label %return

OP467.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP412.PUSH1
  %len.addr.21 = phi i64 [ %165, %OP412.PUSH1 ], [ %len.addr.37, %dynamic_jump_table ]
  %sp1369 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.21
  store i256 57168638331561637060830620937878871246875502369269713186874178039217247582607, ptr %sp1369, align 16
  %190 = add i64 %len.addr.21, 2
  %sp1371 = getelementptr i256, ptr %sp1369, i64 1
  store i256 1167, ptr %sp1371, align 16
  br label %OP661.JUMPDEST

OP472.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %191 = add i64 %len.addr.37, 1
  %192 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp1375 = getelementptr i256, ptr %192, i64 -3
  %dup31376 = load i256, ptr %sp1375, align 16
  store i256 %dup31376, ptr %192, align 16
  %193 = add i64 %len.addr.37, 2
  %sp1379 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %191
  store i256 64, ptr %sp1379, align 16
  %ecx.memory.i3400 = load ptr, ptr %ecx.memory.addr.i3461, align 8
  %ecx.memory.len.addr.i3401 = getelementptr inbounds i8, ptr %ecx.memory.i3400, i64 16
  %ecx.memory.len.i3402 = load i64, ptr %ecx.memory.len.addr.i3401, align 8, !noalias !285
  %ecx.memory.last_checkpoint.addr.i3403 = getelementptr inbounds i8, ptr %ecx.memory.i3400, i64 48
  %ecx.memory.last_checkpoint.i3404 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3403, align 8, !noalias !285
  %194 = sub i64 %ecx.memory.len.i3402, %ecx.memory.last_checkpoint.i3404
  %195 = icmp ult i64 %194, 96
  br i1 %195, label %resize.i3412, label %OP475.MLOAD.contd, !prof !5

resize.i3412:                                     ; preds = %OP472.JUMPDEST
  %196 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !289
  %.not.i3413 = icmp eq i8 %196, 0
  br i1 %.not.i3413, label %resize.i3412.OP475.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3412.OP475.MLOAD.contd_crit_edge:         ; preds = %resize.i3412
  %ecx.memory.i3416.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8
  br label %OP475.MLOAD.contd

OP475.MLOAD.contd:                                ; preds = %resize.i3412.OP475.MLOAD.contd_crit_edge, %OP472.JUMPDEST
  %ecx.memory.i3416 = phi ptr [ %ecx.memory.i3416.pre, %resize.i3412.OP475.MLOAD.contd_crit_edge ], [ %ecx.memory.i3400, %OP472.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i3406 = getelementptr inbounds i8, ptr %ecx.memory.i3400, i64 8
  %ecx.memory.buffer.ptr.shared.i3407 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3406, align 8, !noalias !285
  %ecx.memory.buffer.ptr.i3408 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3407, i64 %ecx.memory.last_checkpoint.i3404
  %slot.i3409 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3408, i64 64
  %slot.value.i3410 = load i256, ptr %slot.i3409, align 1, !noalias !285
  %197 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3410)
  store i256 %197, ptr %sp1379, align 16
  %198 = add i64 %len.addr.37, 3
  %sp1389 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %193
  store i256 %197, ptr %sp1389, align 16
  %sp1391 = getelementptr i256, ptr %192, i64 -1
  %dup41392 = load i256, ptr %sp1391, align 16
  %sp1393 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %198
  %sp1395 = getelementptr i256, ptr %192, i64 4
  %199 = and i256 %dup41392, 1461501637330902918203684832716283019655932542975
  store i256 %199, ptr %sp1393, align 16
  store i256 %197, ptr %sp1395, align 16
  %ecx.memory.len.addr.i3417 = getelementptr inbounds i8, ptr %ecx.memory.i3416, i64 16
  %ecx.memory.len.i3418 = load i64, ptr %ecx.memory.len.addr.i3417, align 8, !noalias !290
  %ecx.memory.last_checkpoint.addr.i3419 = getelementptr inbounds i8, ptr %ecx.memory.i3416, i64 48
  %ecx.memory.last_checkpoint.i3420 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3419, align 8, !noalias !290
  %200 = sub i64 %ecx.memory.len.i3418, %ecx.memory.last_checkpoint.i3420
  %201 = icmp ugt i256 %197, 18446744073709551615
  %202 = trunc i256 %197 to i64
  %203 = add i64 %202, 32
  %204 = icmp ugt i64 %202, -33
  %205 = or i1 %201, %204
  %206 = select i1 %205, i64 -1, i64 %203
  %207 = icmp ugt i64 %206, %200
  br i1 %207, label %resize.i3427, label %OP484.PUSH1, !prof !5

resize.i3427:                                     ; preds = %OP475.MLOAD.contd
  %208 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %206)
  %.not.i3428 = icmp eq i8 %208, 0
  br i1 %.not.i3428, label %resize.i3427.OP484.PUSH1_crit_edge, label %return, !prof !6

resize.i3427.OP484.PUSH1_crit_edge:               ; preds = %resize.i3427
  %ecx.memory.i3431.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8
  br label %OP484.PUSH1

OP484.PUSH1:                                      ; preds = %resize.i3427.OP484.PUSH1_crit_edge, %OP475.MLOAD.contd
  %ecx.memory.i3431 = phi ptr [ %ecx.memory.i3431.pre, %resize.i3427.OP484.PUSH1_crit_edge ], [ %ecx.memory.i3416, %OP475.MLOAD.contd ]
  %ecx.memory.buffer.ptr.shared.addr.i3422 = getelementptr inbounds i8, ptr %ecx.memory.i3416, i64 8
  %ecx.memory.buffer.ptr.shared.i3423 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3422, align 8, !noalias !290
  %ecx.memory.buffer.ptr.i3424 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3423, i64 %ecx.memory.last_checkpoint.i3420
  %slot.i3425 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3424, i64 %202
  %209 = tail call i256 @llvm.bswap.i256(i256 %199)
  store i256 %209, ptr %slot.i3425, align 1, !noalias !290
  %b1425 = load i256, ptr %sp1389, align 16
  %210 = add i256 %b1425, 32
  store i256 %210, ptr %sp1389, align 16
  %dup31429 = load i256, ptr %192, align 16
  %211 = and i256 %dup31429, 1461501637330902918203684832716283019655932542975
  store i256 %211, ptr %sp1393, align 16
  store i256 %210, ptr %sp1395, align 16
  %ecx.memory.len.addr.i3432 = getelementptr inbounds i8, ptr %ecx.memory.i3431, i64 16
  %ecx.memory.len.i3433 = load i64, ptr %ecx.memory.len.addr.i3432, align 8, !noalias !293
  %ecx.memory.last_checkpoint.addr.i3434 = getelementptr inbounds i8, ptr %ecx.memory.i3431, i64 48
  %ecx.memory.last_checkpoint.i3435 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3434, align 8, !noalias !293
  %212 = sub i64 %ecx.memory.len.i3433, %ecx.memory.last_checkpoint.i3435
  %213 = icmp ugt i256 %210, 18446744073709551615
  %214 = trunc i256 %210 to i64
  %215 = add i64 %214, 32
  %216 = icmp ugt i64 %214, -33
  %217 = or i1 %213, %216
  %218 = select i1 %217, i64 -1, i64 %215
  %219 = icmp ugt i64 %218, %212
  br i1 %219, label %resize.i3442, label %OP493.PUSH1, !prof !5

resize.i3442:                                     ; preds = %OP484.PUSH1
  %220 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %218)
  %.not.i3443 = icmp eq i8 %220, 0
  br i1 %.not.i3443, label %resize.i3442.OP493.PUSH1_crit_edge, label %return, !prof !6

resize.i3442.OP493.PUSH1_crit_edge:               ; preds = %resize.i3442
  %ecx.memory.i3446.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8, !alias.scope !296, !noalias !299
  br label %OP493.PUSH1

OP493.PUSH1:                                      ; preds = %resize.i3442.OP493.PUSH1_crit_edge, %OP484.PUSH1
  %ecx.memory.i3446 = phi ptr [ %ecx.memory.i3446.pre, %resize.i3442.OP493.PUSH1_crit_edge ], [ %ecx.memory.i3431, %OP484.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i3437 = getelementptr inbounds i8, ptr %ecx.memory.i3431, i64 8
  %ecx.memory.buffer.ptr.shared.i3438 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3437, align 8, !noalias !293
  %ecx.memory.buffer.ptr.i3439 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3438, i64 %ecx.memory.last_checkpoint.i3435
  %slot.i3440 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3439, i64 %214
  %221 = tail call i256 @llvm.bswap.i256(i256 %211)
  store i256 %221, ptr %slot.i3440, align 1, !noalias !293
  store i256 32, ptr %sp1393, align 16
  %b1462 = load i256, ptr %sp1389, align 16
  %222 = add i256 %b1462, 32
  %swap.b1468 = load i256, ptr %sp1391, align 16
  store i256 %222, ptr %sp1391, align 16
  store i256 %swap.b1468, ptr %sp1389, align 16
  store i256 64, ptr %192, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !296)
  %ecx.memory.len.addr.i3447 = getelementptr inbounds i8, ptr %ecx.memory.i3446, i64 16
  %ecx.memory.len.i3448 = load i64, ptr %ecx.memory.len.addr.i3447, align 8, !noalias !301
  %ecx.memory.last_checkpoint.addr.i3449 = getelementptr inbounds i8, ptr %ecx.memory.i3446, i64 48
  %ecx.memory.last_checkpoint.i3450 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3449, align 8, !noalias !301
  %223 = sub i64 %ecx.memory.len.i3448, %ecx.memory.last_checkpoint.i3450
  %224 = icmp ult i64 %223, 96
  br i1 %224, label %resize.i3458, label %OP500.MLOAD.contd, !prof !5

resize.i3458:                                     ; preds = %OP493.PUSH1
  %225 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !299
  %.not.i3459 = icmp eq i8 %225, 0
  br i1 %.not.i3459, label %resize.i3458.OP500.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3458.OP500.MLOAD.contd_crit_edge:         ; preds = %resize.i3458
  %swap.b1488.pre = load i256, ptr %sp1391, align 16
  br label %OP500.MLOAD.contd

OP500.MLOAD.contd:                                ; preds = %resize.i3458.OP500.MLOAD.contd_crit_edge, %OP493.PUSH1
  %swap.b1488 = phi i256 [ %swap.b1488.pre, %resize.i3458.OP500.MLOAD.contd_crit_edge ], [ %222, %OP493.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i3452 = getelementptr inbounds i8, ptr %ecx.memory.i3446, i64 8
  %ecx.memory.buffer.ptr.shared.i3453 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3452, align 8, !noalias !301
  %ecx.memory.buffer.ptr.i3454 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3453, i64 %ecx.memory.last_checkpoint.i3450
  %slot.i3455 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3454, i64 64
  %slot.value.i3456 = load i256, ptr %slot.i3455, align 1, !noalias !301
  %226 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3456)
  store i256 %swap.b1488, ptr %sp1379, align 16
  %227 = sub i256 %swap.b1488, %226
  store i256 %227, ptr %sp1391, align 16
  store i256 %226, ptr %192, align 16
  %228 = add i64 %len.addr.37, -2
  %sp1501 = getelementptr i256, ptr %192, i64 -2
  %229 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr %sp1501, i8 1)
  %.not3233 = icmp eq i8 %229, 0
  br i1 %.not3233, label %OP506.PUSH2, label %return, !prof !6

OP506.PUSH2:                                      ; preds = %OP500.MLOAD.contd
  %sp1503 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %228
  store i256 1293, ptr %sp1503, align 16
  %dup21506 = load i256, ptr %sp1375, align 16
  store i256 %dup21506, ptr %sp1391, align 16
  br label %OP708.JUMPDEST

OP513.JUMPDEST:                                   ; preds = %dynamic_jump_table
  br label %OP246.JUMPDEST.sink.split

OP518.JUMPDEST:                                   ; preds = %dynamic_jump_table, %dynamic_jump_table, %dynamic_jump_table
  %230 = add i64 %len.addr.37, -2
  %sp1519 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %230
  %a1520 = load i256, ptr %sp1519, align 16
  br label %dynamic_jump_table.backedge

OP521.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP218.JUMPDEST
  %len.addr.23 = phi i64 [ %len.addr.9, %OP218.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %sp1523 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.23
  store i256 0, ptr %sp1523, align 16
  %231 = add i64 %len.addr.23, 2
  %sp1525 = getelementptr i256, ptr %sp1523, i64 1
  store i256 1320, ptr %sp1525, align 16
  br label %OP661.JUMPDEST

OP526.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %sp1529 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp1533 = getelementptr i256, ptr %sp1529, i64 -1
  %b1534 = load i256, ptr %sp1533, align 16
  %contract.caller1538 = load i160, ptr %contract.caller.addr1600, align 16
  %232 = tail call i160 @llvm.bswap.i160(i160 %contract.caller1538)
  %233 = zext i160 %232 to i256
  %sp1541 = getelementptr i256, ptr %sp1529, i64 1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1541, align 16
  store i256 %233, ptr %sp1529, align 16
  %234 = trunc i256 %b1534 to i160
  %235 = icmp ne i160 %232, %234
  %236 = add i64 %len.addr.37, -1
  %sp1555 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %236
  %237 = zext i1 %235 to i256
  store i256 %237, ptr %sp1555, align 16
  br i1 %235, label %OP246.JUMPDEST.sink.split, label %OP536.PUSH2

OP536.PUSH2:                                      ; preds = %OP526.JUMPDEST
  store i256 1379, ptr %sp1555, align 16
  br label %OP661.JUMPDEST

OP539.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %238 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp1566 = getelementptr i256, ptr %238, i64 -1
  %swap.a1567 = load i256, ptr %sp1566, align 16
  %sp1568 = getelementptr i256, ptr %238, i64 -2
  %swap.b1569 = load i256, ptr %sp1568, align 16
  store i256 %swap.a1567, ptr %sp1568, align 16
  store i256 %swap.b1569, ptr %sp1566, align 16
  %239 = add i64 %len.addr.37, -1
  br label %OP549.JUMPDEST

OP544.JUMPDEST:                                   ; preds = %dynamic_jump_table
  br label %OP246.JUMPDEST.sink.split

OP549.JUMPDEST:                                   ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP539.JUMPDEST
  %len.addr.25 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %239, %OP539.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %240 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.25
  %sp1579 = getelementptr i256, ptr %240, i64 -1
  %swap.a1580 = load i256, ptr %sp1579, align 16
  %sp1581 = getelementptr i256, ptr %240, i64 -2
  %swap.b1582 = load i256, ptr %sp1581, align 16
  store i256 %swap.a1580, ptr %sp1581, align 16
  store i256 %swap.b1582, ptr %sp1579, align 16
  %241 = add i64 %len.addr.25, -1
  br label %dynamic_jump_table.backedge

OP552.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP246.JUMPDEST
  %len.addr.26 = phi i64 [ %108, %OP246.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %242 = add i64 %len.addr.26, 1
  %sp1588 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.26
  store i256 1406, ptr %sp1588, align 16
  br label %OP661.JUMPDEST

OP556.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %243 = add i64 %len.addr.37, 1
  %sp1592 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %244 = add i64 %len.addr.37, -1
  %sp1596 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %244
  %b1597 = load i256, ptr %sp1596, align 16
  %contract.caller1601 = load i160, ptr %contract.caller.addr1600, align 16
  %245 = tail call i160 @llvm.bswap.i160(i160 %contract.caller1601)
  %246 = zext i160 %245 to i256
  %sp1604 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %243
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1604, align 16
  store i256 %246, ptr %sp1592, align 16
  %247 = trunc i256 %b1597 to i160
  %248 = icmp ne i160 %245, %247
  %249 = zext i1 %248 to i256
  store i256 %249, ptr %sp1596, align 16
  br i1 %248, label %OP611.JUMPDEST, label %OP568.PUSH1

OP568.PUSH1:                                      ; preds = %OP556.JUMPDEST
  %250 = add i64 %len.addr.37, 2
  store i256 64, ptr %sp1596, align 16
  %mload.out.slot1637 = alloca i256, align 16
  %251 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1637, ptr %arg.ecx.addr)
  %.not3221 = icmp eq i8 %251, 0
  br i1 %.not3221, label %OP569.MLOAD.contd, label %return, !prof !6

OP569.MLOAD.contd:                                ; preds = %OP568.PUSH1
  %mload.out1638 = load i256, ptr %mload.out.slot1637, align 16
  store i256 %mload.out1638, ptr %sp1596, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp1592, align 16
  %sp1643 = getelementptr i256, ptr %sp1592, i64 -1
  store i256 %mload.out1638, ptr %sp1604, align 16
  %252 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1638, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not3222 = icmp eq i8 %252, 0
  br i1 %.not3222, label %OP573.PUSH1, label %return, !prof !6

OP573.PUSH1:                                      ; preds = %OP569.MLOAD.contd
  %b1657 = load i256, ptr %sp1596, align 16
  %253 = add i256 %b1657, 4
  store i256 %253, ptr %sp1596, align 16
  store i256 %253, ptr %sp1592, align 16
  %254 = add i64 %len.addr.37, 3
  %sp1668 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %250
  %255 = add i256 %b1657, 36
  store i256 %255, ptr %sp1604, align 16
  %sp1682 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %254
  store i256 32, ptr %sp1668, align 16
  store i256 %253, ptr %sp1682, align 16
  %256 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %253, i256 32, ptr %arg.ecx.addr)
  %.not3223 = icmp eq i8 %256, 0
  br i1 %.not3223, label %OP584.PUSH1, label %return, !prof !6

OP584.PUSH1:                                      ; preds = %OP573.PUSH1
  store i256 50, ptr %sp1668, align 16
  %dup21702 = load i256, ptr %sp1604, align 16
  store i256 %dup21702, ptr %sp1682, align 16
  %257 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup21702, i256 50, ptr %arg.ecx.addr)
  %.not3224 = icmp eq i8 %257, 0
  br i1 %.not3224, label %OP587.PUSH1, label %return, !prof !6

OP587.PUSH1:                                      ; preds = %OP584.PUSH1
  %b1715 = load i256, ptr %sp1604, align 16
  %258 = add i256 %b1715, 32
  store i256 %258, ptr %sp1604, align 16
  store i256 %258, ptr %sp1668, align 16
  store i256 30477107189792067702780762495767234919454387104963894190797347037923520833138, ptr %sp1682, align 16
  %sp1726 = getelementptr i256, ptr %sp1592, i64 4
  store i256 %258, ptr %sp1726, align 16
  %259 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %258, i256 30477107189792067702780762495767234919454387104963894190797347037923520833138, ptr %arg.ecx.addr)
  %.not3225 = icmp eq i8 %259, 0
  br i1 %.not3225, label %OP593.PUSH1, label %return, !prof !6

OP593.PUSH1:                                      ; preds = %OP587.PUSH1
  %b1738 = load i256, ptr %sp1668, align 16
  %260 = add i256 %b1738, 32
  store i256 %260, ptr %sp1668, align 16
  store i256 50399536517034403140340042451109039295814801041356663333839303389922686140416, ptr %sp1682, align 16
  store i256 %260, ptr %sp1726, align 16
  %261 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %260, i256 50399536517034403140340042451109039295814801041356663333839303389922686140416, ptr %arg.ecx.addr)
  %.not3226 = icmp eq i8 %261, 0
  br i1 %.not3226, label %OP598.POP, label %return, !prof !6

OP598.POP:                                        ; preds = %OP593.PUSH1
  store i256 64, ptr %sp1668, align 16
  %b1758 = load i256, ptr %sp1604, align 16
  %262 = add i256 %b1758, 64
  %swap.b1764 = load i256, ptr %sp1643, align 16
  store i256 %262, ptr %sp1643, align 16
  store i256 %swap.b1764, ptr %sp1604, align 16
  store i256 64, ptr %sp1592, align 16
  %mload.out.slot1772 = alloca i256, align 16
  %263 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1772, ptr %arg.ecx.addr)
  %.not3227 = icmp eq i8 %263, 0
  br i1 %.not3227, label %OP605.MLOAD.contd, label %return, !prof !6

OP605.MLOAD.contd:                                ; preds = %OP598.POP
  %mload.out1773 = load i256, ptr %mload.out.slot1772, align 16
  %swap.b1783 = load i256, ptr %sp1643, align 16
  store i256 %swap.b1783, ptr %sp1604, align 16
  %264 = sub i256 %swap.b1783, %mload.out1773
  store i256 %264, ptr %sp1643, align 16
  store i256 %mload.out1773, ptr %sp1592, align 16
  %265 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1643, i8 16)
  %.not3228 = icmp eq i8 %265, 0
  %spec.select2398 = select i1 %.not3228, i8 16, i8 %265, !prof !6
  br label %return

OP611.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP556.JUMPDEST
  %len.addr.27 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %244, %OP556.JUMPDEST ]
  %266 = add i64 %len.addr.27, 1
  %sp1799 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.27
  store i256 1615, ptr %sp1799, align 16
  br label %OP721.JUMPDEST

OP615.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %267 = add i64 %len.addr.37, -1
  %sp1803 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %267
  %a1804 = load i256, ptr %sp1803, align 16
  br label %dynamic_jump_table.backedge

OP617.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP382.PUSH2, %OP250.JUMPDEST
  %len.addr.28 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %len.addr.37, %OP382.PUSH2 ], [ %109, %OP250.JUMPDEST ]
  %sp1807 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.28
  %sp1811 = getelementptr i256, ptr %sp1807, i64 1
  %268 = add i64 %len.addr.28, 3
  %sp1813 = getelementptr i256, ptr %sp1807, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp1807, i8 0, i64 32, i1 false)
  %sp1815 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %268
  store i256 1, ptr %sp1815, align 16
  store i256 50801780122331352337026042894847907698553222651959119521779622085092237899971, ptr %sp1811, align 16
  store i256 50801780122331352337026042894847907698553222651959119521779622085092237899971, ptr %sp1813, align 16
  %269 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1813, i8 17)
  %.not3251 = icmp eq i8 %269, 0
  br i1 %.not3251, label %OP627.SWAP2, label %return, !prof !6

OP627.SWAP2:                                      ; preds = %OP617.JUMPDEST
  %swap.a1836 = load i256, ptr %sp1813, align 16
  %swap.b1838 = load i256, ptr %sp1807, align 16
  store i256 %swap.b1838, ptr %sp1813, align 16
  %sp1844 = getelementptr i256, ptr %sp1807, i64 -1
  %swap.b1845 = load i256, ptr %sp1844, align 16
  store i256 %swap.a1836, ptr %sp1844, align 16
  store i256 %swap.b1845, ptr %sp1807, align 16
  br label %dynamic_jump_table.backedge

OP632.JUMPDEST:                                   ; preds = %dynamic_jump_table, %dynamic_jump_table
  %contract.input.len.addr1851 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len1852 = load i64, ptr %contract.input.len.addr1851, align 8
  %270 = zext i64 %contract.input.len1852 to i256
  %sp1853 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  store i256 %270, ptr %sp1853, align 16
  %sp1855 = getelementptr i256, ptr %sp1853, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1855, i8 0, i64 64, i1 false)
  %271 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1853)
  %.not3249 = icmp eq i8 %271, 0
  br i1 %.not3249, label %OP637.PUSH1, label %return, !prof !6

OP637.PUSH1:                                      ; preds = %OP632.JUMPDEST
  %sp1859 = getelementptr i256, ptr %sp1853, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1853, i8 0, i64 64, i1 false)
  store i256 %270, ptr %sp1859, align 16
  %sp1873 = getelementptr i256, ptr %sp1853, i64 3
  store i256 0, ptr %sp1873, align 16
  %sp1875 = getelementptr i256, ptr %sp1853, i64 -1
  %dup51876 = load i256, ptr %sp1875, align 16
  %sp1877 = getelementptr i256, ptr %sp1853, i64 4
  store i256 %dup51876, ptr %sp1877, align 16
  %gas.remaining1879 = load i64, ptr %gas.remaining.addr, align 8
  %272 = zext i64 %gas.remaining1879 to i256
  %sp1880 = getelementptr i256, ptr %sp1853, i64 5
  store i256 %272, ptr %sp1880, align 16
  %273 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1853, i8 17, i8 2)
  %.not3250 = icmp eq i8 %273, 0
  br i1 %.not3250, label %suspend, label %return, !prof !6

OP644.RETURNDATASIZE:                             ; preds = %resume
  %274 = add i64 %stack_len2388, 1
  %ecx.return_data.len.addr = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len = load i64, ptr %ecx.return_data.len.addr, align 8
  %275 = zext i64 %ecx.return_data.len to i256
  %sp1884 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %stack_len2388
  store i256 %275, ptr %sp1884, align 16
  %sp1886 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %274
  store i256 0, ptr %sp1886, align 16
  %sp1890 = getelementptr i256, ptr %sp1884, i64 2
  store i256 0, ptr %sp1890, align 16
  %276 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1884)
  %.not = icmp eq i8 %276, 0
  br i1 %.not, label %OP648.DUP1, label %return, !prof !6

OP648.DUP1:                                       ; preds = %OP644.RETURNDATASIZE
  %sp1894 = getelementptr i256, ptr %sp1884, i64 -1
  %dup11895 = load i256, ptr %sp1894, align 16
  store i256 %dup11895, ptr %sp1884, align 16
  store i256 %dup11895, ptr %sp1890, align 16
  %277 = icmp eq i256 %dup11895, 0
  %278 = zext i1 %277 to i256
  store i256 %278, ptr %sp1886, align 16
  br i1 %277, label %OP657.JUMPDEST, label %OP654.RETURNDATASIZE

OP654.RETURNDATASIZE:                             ; preds = %OP648.DUP1
  %ecx.return_data.len1914 = load i64, ptr %ecx.return_data.len.addr, align 8
  %279 = zext i64 %ecx.return_data.len1914 to i256
  store i256 %279, ptr %sp1886, align 16
  store i256 0, ptr %sp1890, align 16
  %280 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1886, i8 2)
  %.not3202 = icmp eq i8 %280, 0
  %spec.select2399 = select i1 %.not3202, i8 2, i8 %280, !prof !6
  br label %return

OP657.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP648.DUP1
  %len.addr.29 = phi i64 [ %274, %OP648.DUP1 ], [ %len.addr.37, %dynamic_jump_table ]
  %ecx.return_data.len.addr1922 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len1923 = load i64, ptr %ecx.return_data.len.addr1922, align 8
  %281 = zext i64 %ecx.return_data.len1923 to i256
  %sp1924 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.29
  store i256 %281, ptr %sp1924, align 16
  %sp1926 = getelementptr i256, ptr %sp1924, i64 1
  store i256 0, ptr %sp1926, align 16
  %282 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1924, i8 16)
  %.not3219 = icmp eq i8 %282, 0
  %spec.select2400 = select i1 %.not3219, i8 16, i8 %282, !prof !6
  br label %return

OP661.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP552.JUMPDEST, %OP536.PUSH2, %OP521.JUMPDEST, %OP467.JUMPDEST, %OP398.JUMPDEST, %OP367.JUMPDEST, %OP289.JUMPDEST, %OP260.JUMPDEST
  %len.addr.30 = phi i64 [ %242, %OP552.JUMPDEST ], [ %len.addr.37, %OP536.PUSH2 ], [ %231, %OP521.JUMPDEST ], [ %190, %OP467.JUMPDEST ], [ %163, %OP398.JUMPDEST ], [ %152, %OP367.JUMPDEST ], [ %120, %OP289.JUMPDEST ], [ %111, %OP260.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %sp1931 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.30
  %sp1935 = getelementptr i256, ptr %sp1931, i64 1
  %283 = add i64 %len.addr.30, 3
  %sp1937 = getelementptr i256, ptr %sp1931, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp1931, i8 0, i64 32, i1 false)
  %sp1939 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %283
  store i256 1, ptr %sp1939, align 16
  store i256 7616251639890160809447714111544359812065171195189364993079081710756264753419, ptr %sp1935, align 16
  store i256 7616251639890160809447714111544359812065171195189364993079081710756264753419, ptr %sp1937, align 16
  %284 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1937, i8 17)
  %.not3205 = icmp eq i8 %284, 0
  br i1 %.not3205, label %OP671.SWAP2, label %return, !prof !6

OP671.SWAP2:                                      ; preds = %OP661.JUMPDEST
  %swap.a1960 = load i256, ptr %sp1937, align 16
  %swap.b1962 = load i256, ptr %sp1931, align 16
  store i256 %swap.b1962, ptr %sp1937, align 16
  %sp1968 = getelementptr i256, ptr %sp1931, i64 -1
  %swap.b1969 = load i256, ptr %sp1968, align 16
  store i256 %swap.a1960, ptr %sp1968, align 16
  store i256 %swap.b1969, ptr %sp1931, align 16
  br label %dynamic_jump_table.preheader

dynamic_jump_table.preheader:                     ; preds = %OP362.JUMPDEST, %OP671.SWAP2
  %len.addr.37.ph = phi i64 [ %151, %OP362.JUMPDEST ], [ %len.addr.30, %OP671.SWAP2 ]
  %.ph = phi i256 [ %a1055, %OP362.JUMPDEST ], [ %swap.b1969, %OP671.SWAP2 ]
  %ecx.memory.addr.i3461 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %contract.caller.addr1600 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %invariant.gep = getelementptr i256, ptr %arg.stack.addr, i64 -1
  br label %dynamic_jump_table

OP676.JUMPDEST.sink.split:                        ; preds = %OP274.PUSH2, %OP303.PUSH2
  %sp893.sink = phi ptr [ %sp893, %OP303.PUSH2 ], [ %sp836, %OP274.PUSH2 ]
  %sp858.sink = phi ptr [ %sp858, %OP303.PUSH2 ], [ %sp803, %OP274.PUSH2 ]
  %len.addr.31.ph = phi i64 [ %121, %OP303.PUSH2 ], [ %112, %OP274.PUSH2 ]
  %dup4 = load i256, ptr %sp893.sink, align 16
  store i256 %dup4, ptr %sp858.sink, align 16
  br label %OP676.JUMPDEST

OP676.JUMPDEST:                                   ; preds = %OP676.JUMPDEST.sink.split, %dynamic_jump_table
  %len.addr.31 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %len.addr.31.ph, %OP676.JUMPDEST.sink.split ]
  %sp1975 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.31
  store i256 1762, ptr %sp1975, align 16
  %285 = add i64 %len.addr.31, 2
  %sp1977 = getelementptr i256, ptr %sp1975, i64 -1
  %dup21978 = load i256, ptr %sp1977, align 16
  %sp1979 = getelementptr i256, ptr %sp1975, i64 1
  store i256 %dup21978, ptr %sp1979, align 16
  br label %OP723.JUMPDEST

OP681.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %sp1983 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  store i256 -30536698362301869620703524882028299911890425965968411027149867401609008632517, ptr %sp1983, align 16
  %sp1985 = getelementptr i256, ptr %sp1983, i64 -1
  %dup21986 = load i256, ptr %sp1985, align 16
  %sp1987 = getelementptr i256, ptr %sp1983, i64 1
  store i256 %dup21986, ptr %sp1987, align 16
  %286 = add i64 %len.addr.37, 3
  %sp1989 = getelementptr i256, ptr %sp1983, i64 2
  store i256 64, ptr %sp1989, align 16
  %ecx.memory.i3462 = load ptr, ptr %ecx.memory.addr.i3461, align 8
  %ecx.memory.len.addr.i3463 = getelementptr inbounds i8, ptr %ecx.memory.i3462, i64 16
  %ecx.memory.len.i3464 = load i64, ptr %ecx.memory.len.addr.i3463, align 8, !noalias !302
  %ecx.memory.last_checkpoint.addr.i3465 = getelementptr inbounds i8, ptr %ecx.memory.i3462, i64 48
  %ecx.memory.last_checkpoint.i3466 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3465, align 8, !noalias !302
  %287 = sub i64 %ecx.memory.len.i3464, %ecx.memory.last_checkpoint.i3466
  %288 = icmp ult i64 %287, 96
  br i1 %288, label %resize.i3474, label %OP685.MLOAD.contd, !prof !5

resize.i3474:                                     ; preds = %OP681.JUMPDEST
  %289 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !306
  %.not.i3475 = icmp eq i8 %289, 0
  br i1 %.not.i3475, label %resize.i3474.OP685.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3474.OP685.MLOAD.contd_crit_edge:         ; preds = %resize.i3474
  %dup32002.pre = load i256, ptr %sp1987, align 16
  %ecx.memory.i3478.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8
  br label %OP685.MLOAD.contd

OP685.MLOAD.contd:                                ; preds = %resize.i3474.OP685.MLOAD.contd_crit_edge, %OP681.JUMPDEST
  %ecx.memory.i3478 = phi ptr [ %ecx.memory.i3478.pre, %resize.i3474.OP685.MLOAD.contd_crit_edge ], [ %ecx.memory.i3462, %OP681.JUMPDEST ]
  %dup32002 = phi i256 [ %dup32002.pre, %resize.i3474.OP685.MLOAD.contd_crit_edge ], [ %dup21986, %OP681.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i3468 = getelementptr inbounds i8, ptr %ecx.memory.i3462, i64 8
  %ecx.memory.buffer.ptr.shared.i3469 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3468, align 8, !noalias !302
  %ecx.memory.buffer.ptr.i3470 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3469, i64 %ecx.memory.last_checkpoint.i3466
  %slot.i3471 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3470, i64 64
  %slot.value.i3472 = load i256, ptr %slot.i3471, align 1, !noalias !302
  %290 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3472)
  store i256 %290, ptr %sp1989, align 16
  %291 = add i64 %len.addr.37, 4
  %sp1999 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %286
  store i256 %290, ptr %sp1999, align 16
  %sp2003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %291
  %sp2005 = getelementptr i256, ptr %sp1983, i64 5
  %292 = and i256 %dup32002, 1461501637330902918203684832716283019655932542975
  store i256 %292, ptr %sp2003, align 16
  store i256 %290, ptr %sp2005, align 16
  %ecx.memory.len.addr.i3479 = getelementptr inbounds i8, ptr %ecx.memory.i3478, i64 16
  %ecx.memory.len.i3480 = load i64, ptr %ecx.memory.len.addr.i3479, align 8, !noalias !307
  %ecx.memory.last_checkpoint.addr.i3481 = getelementptr inbounds i8, ptr %ecx.memory.i3478, i64 48
  %ecx.memory.last_checkpoint.i3482 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3481, align 8, !noalias !307
  %293 = sub i64 %ecx.memory.len.i3480, %ecx.memory.last_checkpoint.i3482
  %294 = icmp ugt i256 %290, 18446744073709551615
  %295 = trunc i256 %290 to i64
  %296 = add i64 %295, 32
  %297 = icmp ugt i64 %295, -33
  %298 = or i1 %294, %297
  %299 = select i1 %298, i64 -1, i64 %296
  %300 = icmp ugt i64 %299, %293
  br i1 %300, label %resize.i3489, label %OP694.PUSH1, !prof !5

resize.i3489:                                     ; preds = %OP685.MLOAD.contd
  %301 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %299)
  %.not.i3490 = icmp eq i8 %301, 0
  br i1 %.not.i3490, label %resize.i3489.OP694.PUSH1_crit_edge, label %return, !prof !6

resize.i3489.OP694.PUSH1_crit_edge:               ; preds = %resize.i3489
  %ecx.memory.i3493.pre = load ptr, ptr %ecx.memory.addr.i3461, align 8, !alias.scope !310, !noalias !313
  br label %OP694.PUSH1

OP694.PUSH1:                                      ; preds = %resize.i3489.OP694.PUSH1_crit_edge, %OP685.MLOAD.contd
  %ecx.memory.i3493 = phi ptr [ %ecx.memory.i3493.pre, %resize.i3489.OP694.PUSH1_crit_edge ], [ %ecx.memory.i3478, %OP685.MLOAD.contd ]
  %ecx.memory.buffer.ptr.shared.addr.i3484 = getelementptr inbounds i8, ptr %ecx.memory.i3478, i64 8
  %ecx.memory.buffer.ptr.shared.i3485 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3484, align 8, !noalias !307
  %ecx.memory.buffer.ptr.i3486 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3485, i64 %ecx.memory.last_checkpoint.i3482
  %slot.i3487 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3486, i64 %295
  %302 = tail call i256 @llvm.bswap.i256(i256 %292)
  store i256 %302, ptr %slot.i3487, align 1, !noalias !307
  store i256 32, ptr %sp2003, align 16
  %b2035 = load i256, ptr %sp1999, align 16
  %303 = add i256 %b2035, 32
  %swap.b2041 = load i256, ptr %sp1987, align 16
  store i256 %303, ptr %sp1987, align 16
  store i256 %swap.b2041, ptr %sp1999, align 16
  store i256 64, ptr %sp1989, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !310)
  %ecx.memory.len.addr.i3494 = getelementptr inbounds i8, ptr %ecx.memory.i3493, i64 16
  %ecx.memory.len.i3495 = load i64, ptr %ecx.memory.len.addr.i3494, align 8, !noalias !315
  %ecx.memory.last_checkpoint.addr.i3496 = getelementptr inbounds i8, ptr %ecx.memory.i3493, i64 48
  %ecx.memory.last_checkpoint.i3497 = load i64, ptr %ecx.memory.last_checkpoint.addr.i3496, align 8, !noalias !315
  %304 = sub i64 %ecx.memory.len.i3495, %ecx.memory.last_checkpoint.i3497
  %305 = icmp ult i64 %304, 96
  br i1 %305, label %resize.i3505, label %OP700.MLOAD.contd, !prof !5

resize.i3505:                                     ; preds = %OP694.PUSH1
  %306 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !313
  %.not.i3506 = icmp eq i8 %306, 0
  br i1 %.not.i3506, label %resize.i3505.OP700.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i3505.OP700.MLOAD.contd_crit_edge:         ; preds = %resize.i3505
  %swap.b2060.pre = load i256, ptr %sp1987, align 16
  br label %OP700.MLOAD.contd

OP700.MLOAD.contd:                                ; preds = %resize.i3505.OP700.MLOAD.contd_crit_edge, %OP694.PUSH1
  %swap.b2060 = phi i256 [ %swap.b2060.pre, %resize.i3505.OP700.MLOAD.contd_crit_edge ], [ %303, %OP694.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i3499 = getelementptr inbounds i8, ptr %ecx.memory.i3493, i64 8
  %ecx.memory.buffer.ptr.shared.i3500 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i3499, align 8, !noalias !315
  %ecx.memory.buffer.ptr.i3501 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i3500, i64 %ecx.memory.last_checkpoint.i3497
  %slot.i3502 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i3501, i64 64
  %slot.value.i3503 = load i256, ptr %slot.i3502, align 1, !noalias !315
  %307 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i3503)
  store i256 %swap.b2060, ptr %sp1999, align 16
  %308 = sub i256 %swap.b2060, %307
  store i256 %308, ptr %sp1987, align 16
  store i256 %307, ptr %sp1989, align 16
  %309 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1983, i8 1)
  %.not3218 = icmp eq i8 %309, 0
  br i1 %.not3218, label %OP706.POP, label %return, !prof !6

OP706.POP:                                        ; preds = %OP700.MLOAD.contd
  %310 = add i64 %len.addr.37, -2
  %sp2076 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %310
  %a2077 = load i256, ptr %sp2076, align 16
  br label %dynamic_jump_table.backedge

OP708.JUMPDEST:                                   ; preds = %dynamic_jump_table.OP708.JUMPDEST_crit_edge, %OP506.PUSH2
  %.pre-phi3642 = phi i64 [ %.pre3641, %dynamic_jump_table.OP708.JUMPDEST_crit_edge ], [ %191, %OP506.PUSH2 ]
  %dup22099 = phi i256 [ %dup22099.pre, %dynamic_jump_table.OP708.JUMPDEST_crit_edge ], [ %dup21506, %OP506.PUSH2 ]
  %sp2080 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp2082 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi3642
  %sp2084 = getelementptr i256, ptr %sp2080, i64 2
  store i256 7616251639890160809447714111544359812065171195189364993079081710756264753419, ptr %sp2080, align 16
  store i256 %dup22099, ptr %sp2082, align 16
  store i256 7616251639890160809447714111544359812065171195189364993079081710756264753419, ptr %sp2084, align 16
  %311 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2082, i8 17)
  %.not3234 = icmp eq i8 %311, 0
  br i1 %.not3234, label %OP718.POP, label %return, !prof !6

OP718.POP:                                        ; preds = %OP708.JUMPDEST
  %312 = add i64 %len.addr.37, -2
  %sp2110 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %312
  %a2111 = load i256, ptr %sp2110, align 16
  br label %dynamic_jump_table.backedge

OP721.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP611.JUMPDEST
  %len.addr.33 = phi i64 [ %266, %OP611.JUMPDEST ], [ %len.addr.37, %dynamic_jump_table ]
  %313 = add i64 %len.addr.33, -1
  %sp2114 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %313
  %a2115 = load i256, ptr %sp2114, align 16
  br label %dynamic_jump_table.backedge

OP723.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP676.JUMPDEST
  %len.addr.34 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %285, %OP676.JUMPDEST ]
  %sp2118 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.34
  store i256 0, ptr %sp2118, align 16
  %sp2120 = getelementptr i256, ptr %sp2118, i64 1
  store i256 1924, ptr %sp2120, align 16
  %314 = add i64 %len.addr.34, 3
  %sp2122 = getelementptr i256, ptr %sp2118, i64 -1
  %dup32123 = load i256, ptr %sp2122, align 16
  %sp2124 = getelementptr i256, ptr %sp2118, i64 2
  store i256 %dup32123, ptr %sp2124, align 16
  br label %OP789.JUMPDEST

OP729.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %315 = add i64 %len.addr.37, -1
  %sp2128 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %315
  %a2129 = load i256, ptr %sp2128, align 16
  %316 = icmp ne i256 %a2129, 0
  %317 = zext i1 %316 to i256
  store i256 %317, ptr %sp2128, align 16
  br i1 %316, label %OP777.JUMPDEST, label %OP734.PUSH1

OP734.PUSH1:                                      ; preds = %OP729.JUMPDEST
  store i256 64, ptr %sp2128, align 16
  %mload.out.slot2143 = alloca i256, align 16
  %318 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2143, ptr %arg.ecx.addr)
  %.not3206 = icmp eq i8 %318, 0
  br i1 %.not3206, label %OP735.MLOAD.contd, label %return, !prof !6

OP735.MLOAD.contd:                                ; preds = %OP734.PUSH1
  %mload.out2144 = load i256, ptr %mload.out.slot2143, align 16
  store i256 %mload.out2144, ptr %sp2128, align 16
  %319 = add i64 %len.addr.37, 1
  %sp2147 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.37
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp2147, align 16
  %320 = add i64 %len.addr.37, 2
  %sp2149 = getelementptr i256, ptr %sp2147, i64 -1
  %sp2151 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %319
  store i256 %mload.out2144, ptr %sp2151, align 16
  %321 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out2144, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not3207 = icmp eq i8 %321, 0
  br i1 %.not3207, label %OP739.PUSH1, label %return, !prof !6

OP739.PUSH1:                                      ; preds = %OP735.MLOAD.contd
  %b2163 = load i256, ptr %sp2128, align 16
  %322 = add i256 %b2163, 4
  store i256 %322, ptr %sp2128, align 16
  store i256 %322, ptr %sp2147, align 16
  %323 = add i64 %len.addr.37, 3
  %sp2174 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %320
  %324 = add i256 %b2163, 36
  store i256 %324, ptr %sp2151, align 16
  %sp2188 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %323
  store i256 32, ptr %sp2174, align 16
  store i256 %322, ptr %sp2188, align 16
  %325 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %322, i256 32, ptr %arg.ecx.addr)
  %.not3208 = icmp eq i8 %325, 0
  br i1 %.not3208, label %OP750.PUSH1, label %return, !prof !6

OP750.PUSH1:                                      ; preds = %OP739.PUSH1
  store i256 59, ptr %sp2174, align 16
  %dup22208 = load i256, ptr %sp2151, align 16
  store i256 %dup22208, ptr %sp2188, align 16
  %326 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup22208, i256 59, ptr %arg.ecx.addr)
  %.not3209 = icmp eq i8 %326, 0
  br i1 %.not3209, label %OP753.PUSH1, label %return, !prof !6

OP753.PUSH1:                                      ; preds = %OP750.PUSH1
  %b2221 = load i256, ptr %sp2151, align 16
  %327 = add i256 %b2221, 32
  store i256 %327, ptr %sp2151, align 16
  store i256 %327, ptr %sp2174, align 16
  store i256 30477107189792067803313207883962433169596882527836074431520519040280728725871, ptr %sp2188, align 16
  %sp2232 = getelementptr i256, ptr %sp2147, i64 4
  store i256 %327, ptr %sp2232, align 16
  %328 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %327, i256 30477107189792067803313207883962433169596882527836074431520519040280728725871, ptr %arg.ecx.addr)
  %.not3210 = icmp eq i8 %328, 0
  br i1 %.not3210, label %OP759.PUSH1, label %return, !prof !6

OP759.PUSH1:                                      ; preds = %OP753.PUSH1
  %b2244 = load i256, ptr %sp2174, align 16
  %329 = add i256 %b2244, 32
  store i256 %329, ptr %sp2174, align 16
  store i256 49811756048772467712872424150987350793204914718939124196940272834337719713792, ptr %sp2188, align 16
  store i256 %329, ptr %sp2232, align 16
  %330 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %329, i256 49811756048772467712872424150987350793204914718939124196940272834337719713792, ptr %arg.ecx.addr)
  %.not3211 = icmp eq i8 %330, 0
  br i1 %.not3211, label %OP764.POP, label %return, !prof !6

OP764.POP:                                        ; preds = %OP759.PUSH1
  store i256 64, ptr %sp2174, align 16
  %b2264 = load i256, ptr %sp2151, align 16
  %331 = add i256 %b2264, 64
  %swap.b2270 = load i256, ptr %sp2149, align 16
  store i256 %331, ptr %sp2149, align 16
  store i256 %swap.b2270, ptr %sp2151, align 16
  store i256 64, ptr %sp2147, align 16
  %mload.out.slot2278 = alloca i256, align 16
  %332 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2278, ptr %arg.ecx.addr)
  %.not3212 = icmp eq i8 %332, 0
  br i1 %.not3212, label %OP771.MLOAD.contd, label %return, !prof !6

OP771.MLOAD.contd:                                ; preds = %OP764.POP
  %mload.out2279 = load i256, ptr %mload.out.slot2278, align 16
  %swap.b2289 = load i256, ptr %sp2149, align 16
  store i256 %swap.b2289, ptr %sp2151, align 16
  %333 = sub i256 %swap.b2289, %mload.out2279
  store i256 %333, ptr %sp2149, align 16
  store i256 %mload.out2279, ptr %sp2147, align 16
  %334 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2149, i8 16)
  %.not3213 = icmp eq i8 %334, 0
  %spec.select2401 = select i1 %.not3213, i8 16, i8 %334, !prof !6
  br label %return

OP777.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP729.JUMPDEST
  %len.addr.35 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %315, %OP729.JUMPDEST ]
  %sp2305 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.35
  %sp2307 = getelementptr i256, ptr %sp2305, i64 1
  %sp2317 = getelementptr i256, ptr %sp2305, i64 -1
  store i256 50801780122331352337026042894847907698553222651959119521779622085092237899971, ptr %sp2317, align 16
  %sp2321 = getelementptr i256, ptr %sp2305, i64 -2
  %dup22322 = load i256, ptr %sp2321, align 16
  store i256 %dup22322, ptr %sp2305, align 16
  store i256 50801780122331352337026042894847907698553222651959119521779622085092237899971, ptr %sp2307, align 16
  %335 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2305, i8 17)
  %.not3214 = icmp eq i8 %335, 0
  br i1 %.not3214, label %OP786.POP, label %return, !prof !6

OP786.POP:                                        ; preds = %OP777.JUMPDEST
  %336 = add i64 %len.addr.35, -3
  %sp2333 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %336
  %a2334 = load i256, ptr %sp2333, align 16
  br label %dynamic_jump_table.backedge

OP789.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP723.JUMPDEST
  %len.addr.36 = phi i64 [ %len.addr.37, %dynamic_jump_table ], [ %314, %OP723.JUMPDEST ]
  %sp2337 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.36
  %337 = add i64 %len.addr.36, 3
  %sp2343 = getelementptr i256, ptr %sp2337, i64 -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp2337, i8 0, i64 64, i1 false)
  %dup32344 = load i256, ptr %sp2343, align 16
  %sp2345 = getelementptr i256, ptr %sp2337, i64 2
  store i256 %dup32344, ptr %sp2345, align 16
  %338 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2345, i8 17)
  %.not3248 = icmp eq i8 %338, 0
  br i1 %.not3248, label %OP794.SWAP1, label %return, !prof !6

OP794.SWAP1:                                      ; preds = %OP789.JUMPDEST
  %sp2341 = getelementptr i256, ptr %sp2337, i64 1
  %swap.a2350 = load i256, ptr %sp2345, align 16
  store i256 %swap.a2350, ptr %sp2341, align 16
  %sp2359 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %337
  store i256 %swap.a2350, ptr %sp2359, align 16
  %339 = icmp ne i256 %swap.a2350, 0
  %340 = zext i1 %339 to i256
  %swap.b2370 = load i256, ptr %sp2337, align 16
  store i256 %swap.b2370, ptr %sp2345, align 16
  %sp2376 = getelementptr i256, ptr %sp2337, i64 -2
  %swap.b2377 = load i256, ptr %sp2376, align 16
  store i256 %340, ptr %sp2376, align 16
  %swap.b2382 = load i256, ptr %sp2343, align 16
  store i256 %swap.b2377, ptr %sp2343, align 16
  store i256 %swap.b2382, ptr %sp2337, align 16
  %341 = add i64 %len.addr.36, -1
  br label %dynamic_jump_table.backedge

dynamic_jump_table:                               ; preds = %dynamic_jump_table.backedge, %dynamic_jump_table.preheader
  %len.addr.37 = phi i64 [ %len.addr.37.ph, %dynamic_jump_table.preheader ], [ %len.addr.37.be, %dynamic_jump_table.backedge ]
  %342 = phi i256 [ %.ph, %dynamic_jump_table.preheader ], [ %.be, %dynamic_jump_table.backedge ]
  switch i256 %342, label %return.loopexit [
    i256 109, label %OP246.JUMPDEST.sink.split.loopexit3722
    i256 117, label %return
    i256 119, label %OP46.JUMPDEST
    i256 131, label %OP55.JUMPDEST
    i256 184, label %return
    i256 186, label %OP84.JUMPDEST.loopexit
    i256 262, label %return
    i256 264, label %OP134.JUMPDEST
    i256 276, label %OP143.JUMPDEST
    i256 285, label %OP148.JUMPDEST
    i256 351, label %OP171.JUMPDEST
    i256 363, label %OP180.JUMPDEST
    i256 416, label %return
    i256 418, label %OP209.JUMPDEST
    i256 430, label %OP218.JUMPDEST
    i256 439, label %OP223.JUMPDEST
    i256 505, label %OP246.JUMPDEST
    i256 513, label %OP250.JUMPDEST
    i256 524, label %OP632.JUMPDEST
    i256 529, label %OP258.JUMPDEST
    i256 531, label %OP260.JUMPDEST
    i256 539, label %OP264.JUMPDEST
    i256 599, label %OP286.JUMPDEST
    i256 604, label %OP246.JUMPDEST.sink.split
    i256 612, label %OP286.JUMPDEST
    i256 613, label %OP286.JUMPDEST
    i256 616, label %OP289.JUMPDEST
    i256 624, label %OP293.JUMPDEST
    i256 684, label %OP307.JUMPDEST
    i256 757, label %OP362.JUMPDEST
    i256 762, label %OP357.JUMPDEST
    i256 770, label %OP362.JUMPDEST
    i256 771, label %OP362.JUMPDEST
    i256 776, label %OP367.JUMPDEST
    i256 786, label %OP372.JUMPDEST
    i256 845, label %OP385.JUMPDEST
    i256 852, label %OP390.JUMPDEST
    i256 860, label %OP395.JUMPDEST
    i256 861, label %OP395.JUMPDEST
    i256 864, label %OP398.JUMPDEST
    i256 872, label %OP402.JUMPDEST
    i256 1126, label %OP467.JUMPDEST
    i256 1167, label %OP472.JUMPDEST
    i256 1293, label %OP518.JUMPDEST
    i256 1298, label %OP513.JUMPDEST
    i256 1306, label %OP518.JUMPDEST
    i256 1307, label %OP518.JUMPDEST
    i256 1310, label %OP521.JUMPDEST
    i256 1320, label %OP526.JUMPDEST
    i256 1379, label %OP539.JUMPDEST
    i256 1386, label %OP544.JUMPDEST
    i256 1394, label %OP549.JUMPDEST
    i256 1395, label %OP549.JUMPDEST
    i256 1398, label %OP552.JUMPDEST
    i256 1406, label %OP556.JUMPDEST
    i256 1607, label %OP611.JUMPDEST
    i256 1615, label %OP615.JUMPDEST
    i256 1617, label %OP617.JUMPDEST
    i256 1666, label %OP632.JUMPDEST
    i256 1699, label %OP657.JUMPDEST
    i256 1704, label %OP661.JUMPDEST
    i256 1753, label %OP676.JUMPDEST
    i256 1762, label %OP681.JUMPDEST
    i256 1864, label %dynamic_jump_table.OP708.JUMPDEST_crit_edge
    i256 1911, label %OP721.JUMPDEST
    i256 1913, label %OP723.JUMPDEST
    i256 1924, label %OP729.JUMPDEST
    i256 2078, label %OP777.JUMPDEST
    i256 2123, label %OP789.JUMPDEST
  ], !prof !316

dynamic_jump_table.OP708.JUMPDEST_crit_edge:      ; preds = %dynamic_jump_table
  %gep = getelementptr i256, ptr %invariant.gep, i64 %len.addr.37
  %dup22099.pre = load i256, ptr %gep, align 16
  %.pre3641 = add i64 %len.addr.37, 1
  br label %OP708.JUMPDEST

suspend:                                          ; preds = %OP637.PUSH1, %OP334.MLOAD.contd
  %len.addr.38 = phi i64 [ %len.addr.37, %OP637.PUSH1 ], [ %144, %OP334.MLOAD.contd ]
  %343 = phi ptr [ blockaddress(@usdc, %OP644.RETURNDATASIZE), %OP637.PUSH1 ], [ blockaddress(@usdc, %OP343.SWAP3), %OP334.MLOAD.contd ]
  store ptr %343, ptr %ecx.resume_at.addr, align 8
  br label %return, !annotation !241

return.loopexit:                                  ; preds = %dynamic_jump_table
  br label %return

return:                                           ; preds = %resize.i3505, %resize.i3489, %resize.i3474, %resize.i3458, %resize.i3442, %resize.i3427, %resize.i3412, %OP789.JUMPDEST, %OP777.JUMPDEST, %OP708.JUMPDEST, %OP700.MLOAD.contd, %OP617.JUMPDEST, %OP500.MLOAD.contd, %dynamic_jump_table, %dynamic_jump_table, %dynamic_jump_table, %dynamic_jump_table, %return.loopexit, %resize.i3396, %resize.i3380, %resize.i3364, %resize.i3348, %resize.i3333, %resize.i3317, %resize.i3301, %resize.i3287, %resize.i, %OP771.MLOAD.contd, %OP657.JUMPDEST, %OP654.RETURNDATASIZE, %OP605.MLOAD.contd, %OP461.MLOAD.contd, %OP351.PUSH1, %OP240.MLOAD.contd, %OP215.PUSH1, %OP177.PUSH1, %OP165.MLOAD.contd, %OP140.PUSH1, %OP52.PUSH1, %suspend, %OP764.POP, %OP759.PUSH1, %OP753.PUSH1, %OP750.PUSH1, %OP739.PUSH1, %OP735.MLOAD.contd, %OP734.PUSH1, %OP661.JUMPDEST, %OP644.RETURNDATASIZE, %OP637.PUSH1, %OP632.JUMPDEST, %OP598.POP, %OP593.PUSH1, %OP587.PUSH1, %OP584.PUSH1, %OP573.PUSH1, %OP569.MLOAD.contd, %OP568.PUSH1, %OP454.POP, %OP449.PUSH1, %OP443.PUSH1, %OP440.PUSH1, %OP429.PUSH1, %OP425.MLOAD.contd, %OP424.PUSH1, %OP334.MLOAD.contd, %OP315.MLOAD.contd
  %len.addr.39 = phi i64 [ %283, %OP661.JUMPDEST ], [ %len.addr.37, %OP734.PUSH1 ], [ %len.addr.37, %OP735.MLOAD.contd ], [ %320, %OP739.PUSH1 ], [ %320, %OP750.PUSH1 ], [ %323, %OP753.PUSH1 ], [ %323, %OP759.PUSH1 ], [ %319, %OP764.POP ], [ %315, %OP771.MLOAD.contd ], [ %len.addr.29, %OP657.JUMPDEST ], [ %len.addr.37, %OP632.JUMPDEST ], [ %len.addr.37, %OP637.PUSH1 ], [ %len.addr.38, %suspend ], [ %len.addr.37, %OP568.PUSH1 ], [ %len.addr.37, %OP569.MLOAD.contd ], [ %250, %OP573.PUSH1 ], [ %250, %OP584.PUSH1 ], [ %254, %OP587.PUSH1 ], [ %254, %OP593.PUSH1 ], [ %243, %OP598.POP ], [ %244, %OP605.MLOAD.contd ], [ %len.addr.37, %OP424.PUSH1 ], [ %len.addr.37, %OP425.MLOAD.contd ], [ %168, %OP429.PUSH1 ], [ %168, %OP440.PUSH1 ], [ %178, %OP443.PUSH1 ], [ %178, %OP449.PUSH1 ], [ %164, %OP454.POP ], [ %165, %OP461.MLOAD.contd ], [ %135, %OP315.MLOAD.contd ], [ %144, %OP334.MLOAD.contd ], [ %105, %OP240.MLOAD.contd ], [ %77, %OP215.PUSH1 ], [ %67, %OP177.PUSH1 ], [ %65, %OP165.MLOAD.contd ], [ %37, %OP140.PUSH1 ], [ %20, %OP52.PUSH1 ], [ %147, %OP351.PUSH1 ], [ %stack_len2388, %OP644.RETURNDATASIZE ], [ %274, %OP654.RETURNDATASIZE ], [ 0, %resize.i ], [ %42, %resize.i3287 ], [ %47, %resize.i3301 ], [ %42, %resize.i3317 ], [ %82, %resize.i3333 ], [ %87, %resize.i3348 ], [ %82, %resize.i3364 ], [ %130, %resize.i3380 ], [ %130, %resize.i3396 ], [ %len.addr.37, %dynamic_jump_table ], [ %len.addr.37, %dynamic_jump_table ], [ %len.addr.37, %dynamic_jump_table ], [ %len.addr.37, %dynamic_jump_table ], [ %286, %resize.i3505 ], [ %291, %resize.i3489 ], [ %286, %resize.i3474 ], [ %191, %resize.i3458 ], [ %198, %resize.i3442 ], [ %198, %resize.i3427 ], [ %193, %resize.i3412 ], [ %228, %OP500.MLOAD.contd ], [ %268, %OP617.JUMPDEST ], [ %len.addr.37, %OP700.MLOAD.contd ], [ %.pre-phi3642, %OP708.JUMPDEST ], [ %len.addr.35, %OP777.JUMPDEST ], [ %337, %OP789.JUMPDEST ], [ %len.addr.37, %return.loopexit ]
  %344 = phi i8 [ %284, %OP661.JUMPDEST ], [ %318, %OP734.PUSH1 ], [ %321, %OP735.MLOAD.contd ], [ %325, %OP739.PUSH1 ], [ %326, %OP750.PUSH1 ], [ %328, %OP753.PUSH1 ], [ %330, %OP759.PUSH1 ], [ %332, %OP764.POP ], [ %spec.select2401, %OP771.MLOAD.contd ], [ %spec.select2400, %OP657.JUMPDEST ], [ %271, %OP632.JUMPDEST ], [ %273, %OP637.PUSH1 ], [ 32, %suspend ], [ %251, %OP568.PUSH1 ], [ %252, %OP569.MLOAD.contd ], [ %256, %OP573.PUSH1 ], [ %257, %OP584.PUSH1 ], [ %259, %OP587.PUSH1 ], [ %261, %OP593.PUSH1 ], [ %263, %OP598.POP ], [ %spec.select2398, %OP605.MLOAD.contd ], [ %175, %OP424.PUSH1 ], [ %176, %OP425.MLOAD.contd ], [ %180, %OP429.PUSH1 ], [ %181, %OP440.PUSH1 ], [ %183, %OP443.PUSH1 ], [ %185, %OP449.PUSH1 ], [ %187, %OP454.POP ], [ %spec.select2397, %OP461.MLOAD.contd ], [ %136, %OP315.MLOAD.contd ], [ %145, %OP334.MLOAD.contd ], [ %spec.select2395, %OP240.MLOAD.contd ], [ %spec.select2394, %OP215.PUSH1 ], [ %spec.select2393, %OP177.PUSH1 ], [ %spec.select2392, %OP165.MLOAD.contd ], [ %spec.select2391, %OP140.PUSH1 ], [ %spec.select, %OP52.PUSH1 ], [ %spec.select2396, %OP351.PUSH1 ], [ %276, %OP644.RETURNDATASIZE ], [ %spec.select2399, %OP654.RETURNDATASIZE ], [ %3, %resize.i ], [ %45, %resize.i3287 ], [ %57, %resize.i3301 ], [ %62, %resize.i3317 ], [ %85, %resize.i3333 ], [ %97, %resize.i3348 ], [ %102, %resize.i3364 ], [ %133, %resize.i3380 ], [ %140, %resize.i3396 ], [ 1, %dynamic_jump_table ], [ 1, %dynamic_jump_table ], [ 1, %dynamic_jump_table ], [ 1, %dynamic_jump_table ], [ %306, %resize.i3505 ], [ %301, %resize.i3489 ], [ %289, %resize.i3474 ], [ %225, %resize.i3458 ], [ %220, %resize.i3442 ], [ %208, %resize.i3427 ], [ %196, %resize.i3412 ], [ %229, %OP500.MLOAD.contd ], [ %269, %OP617.JUMPDEST ], [ %309, %OP700.MLOAD.contd ], [ %311, %OP708.JUMPDEST ], [ %335, %OP777.JUMPDEST ], [ %338, %OP789.JUMPDEST ], [ 89, %return.loopexit ]
  store i64 %len.addr.39, ptr %arg.stack_len.addr, align 8
  ret i8 %344
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
define i8 @weth(ptr nocapture noundef readonly align 8 dereferenceable(24) %arg.gas.addr, ptr noalias nocapture noundef align 8 dereferenceable(32768) %arg.stack.addr, ptr noalias nocapture noundef align 8 dereferenceable(8) %arg.stack_len.addr, ptr noalias nocapture noundef readonly align 16 dereferenceable(672) %arg.env.addr, ptr noalias nocapture noundef readonly align 8 dereferenceable(224) %arg.contract.addr, ptr noalias nocapture noundef align 8 dereferenceable(88) %arg.ecx.addr) #0 {
entry:
  %gas.remaining.addr = getelementptr inbounds i8, ptr %arg.gas.addr, i64 8
  %ecx.resume_at.addr = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 32
  %ecx.resume_at = load ptr, ptr %ecx.resume_at.addr, align 8
  %0 = icmp eq ptr %ecx.resume_at, null
  br i1 %0, label %no_resume, label %resume

resume:                                           ; preds = %entry
  %stack_len36507 = load i64, ptr %arg.stack_len.addr, align 8
  indirectbr ptr %ecx.resume_at, [label %OP8616.ISZERO, label %OP9558.ISZERO, label %OP10118.SWAP3]

no_resume:                                        ; preds = %entry
  store i256 128, ptr %arg.stack.addr, align 16
  %sp2 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 1
  store i256 64, ptr %sp2, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !317)
  %ecx.memory.addr.i = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i = load ptr, ptr %ecx.memory.addr.i, align 8, !alias.scope !317
  %ecx.memory.len.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 16
  %ecx.memory.len.i = load i64, ptr %ecx.memory.len.addr.i, align 8, !noalias !317
  %ecx.memory.last_checkpoint.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 48
  %ecx.memory.last_checkpoint.i = load i64, ptr %ecx.memory.last_checkpoint.addr.i, align 8, !noalias !317
  %1 = sub i64 %ecx.memory.len.i, %ecx.memory.last_checkpoint.i
  %2 = icmp ult i64 %1, 96
  br i1 %2, label %resize.i, label %OP3.CALLVALUE, !prof !5

resize.i:                                         ; preds = %no_resume
  %3 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i = icmp eq i8 %3, 0
  br i1 %.not.i, label %OP3.CALLVALUE, label %return, !prof !6

OP3.CALLVALUE:                                    ; preds = %no_resume, %resize.i
  %ecx.memory.buffer.ptr.shared.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 8
  %ecx.memory.buffer.ptr.shared.i = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i, align 8, !noalias !317
  %ecx.memory.buffer.ptr.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i, i64 %ecx.memory.last_checkpoint.i
  %slot.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i, i64 64
  store i256 -57896044618658097711785492504343953926634992332820282019728792003956564819968, ptr %slot.i, align 1, !noalias !317
  %contract.call_value.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value = load i256, ptr %contract.call_value.addr, align 16
  store i256 %contract.call_value, ptr %arg.stack.addr, align 16
  %4 = icmp eq i256 %contract.call_value, 0
  %5 = zext i1 %4 to i256
  store i256 %5, ptr %sp2, align 16
  br i1 %4, label %OP11.JUMPDEST, label %OP8.PUSH1

OP8.PUSH1:                                        ; preds = %OP3.CALLVALUE
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp2, i8 0, i64 64, i1 false)
  %6 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2, i8 16)
  %.not47792 = icmp eq i8 %6, 0
  %spec.select = select i1 %.not47792, i8 16, i8 %6, !prof !6
  br label %return

OP11.JUMPDEST:                                    ; preds = %dynamic_jump_table, %OP3.CALLVALUE
  %len.addr.0 = phi i64 [ 1, %OP3.CALLVALUE ], [ %len.addr.357, %dynamic_jump_table ]
  %7 = add i64 %len.addr.0, -1
  %sp29 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %7
  store i256 4, ptr %sp29, align 16
  %contract.input.len.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len = load i64, ptr %contract.input.len.addr, align 8
  %8 = zext i64 %contract.input.len to i256
  %sp31 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.0
  store i256 %8, ptr %sp31, align 16
  %sp35 = getelementptr i256, ptr %sp31, i64 -1
  %9 = icmp ult i64 %contract.input.len, 4
  %10 = zext i1 %9 to i256
  store i256 %10, ptr %sp35, align 16
  br i1 %9, label %OP417.JUMPDEST, label %OP18.PUSH1

OP18.PUSH1:                                       ; preds = %OP11.JUMPDEST
  store i256 0, ptr %sp29, align 16
  %11 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49299 = load ptr, ptr %11, align 8
  %12 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 0, ptr %arg.contract.addr.val49299, i64 %contract.input.len)
  store i256 %12, ptr %sp29, align 16
  store i256 224, ptr %sp31, align 16
  %13 = lshr i256 %12, 224
  store i256 %13, ptr %sp35, align 16
  store i256 %13, ptr %sp31, align 16
  %sp60 = getelementptr i256, ptr %sp31, i64 1
  store i256 2220280665, ptr %sp60, align 16
  %14 = icmp ult i256 %12, -55933440922810439245092241297714929393152507678461140781632160309883013431296
  %15 = zext i1 %14 to i256
  store i256 %15, ptr %sp31, align 16
  br i1 %14, label %OP225.JUMPDEST, label %OP27.DUP1

OP27.DUP1:                                        ; preds = %OP18.PUSH1
  store i256 %13, ptr %sp31, align 16
  store i256 3082234009, ptr %sp60, align 16
  %16 = icmp ult i256 %12, -32695224738998290322339534276959907740365998400841345355870526645098608852992
  %17 = zext i1 %16 to i256
  store i256 %17, ptr %sp31, align 16
  br i1 %16, label %OP128.JUMPDEST, label %OP32.DUP1

OP32.DUP1:                                        ; preds = %OP27.DUP1
  store i256 %13, ptr %sp31, align 16
  store i256 3824031246, ptr %sp60, align 16
  %18 = icmp ult i256 %12, -12696410791638587059873295150371431141901515927630788168989633851505298636800
  %19 = zext i1 %18 to i256
  store i256 %19, ptr %sp31, align 16
  br i1 %18, label %OP82.JUMPDEST, label %OP37.DUP1

OP37.DUP1:                                        ; preds = %OP32.DUP1
  store i256 %13, ptr %sp31, align 16
  store i256 4015374022, ptr %sp60, align 16
  %20 = icmp ult i256 %12, -7537819755534035631385638487987213442313034697108958057826061522798257373184
  %21 = zext i1 %20 to i256
  store i256 %21, ptr %sp31, align 16
  br i1 %20, label %OP64.JUMPDEST, label %OP42.DUP1

OP42.DUP1:                                        ; preds = %OP37.DUP1
  store i256 %13, ptr %sp31, align 16
  store i256 4015374022, ptr %sp60, align 16
  %22 = icmp eq i256 %13, 4015374022
  %23 = zext i1 %22 to i256
  store i256 %23, ptr %sp31, align 16
  br i1 %22, label %OP2597.JUMPDEST, label %OP47.DUP1

OP47.DUP1:                                        ; preds = %OP42.DUP1
  store i256 %13, ptr %sp31, align 16
  store i256 4076725131, ptr %sp60, align 16
  %24 = icmp eq i256 %13, 4076725131
  %25 = zext i1 %24 to i256
  store i256 %25, ptr %sp31, align 16
  br i1 %24, label %OP2665.JUMPDEST, label %OP52.DUP1

OP52.DUP1:                                        ; preds = %OP47.DUP1
  store i256 %13, ptr %sp31, align 16
  store i256 4193856484, ptr %sp60, align 16
  %26 = icmp eq i256 %13, 4193856484
  %27 = zext i1 %26 to i256
  store i256 %27, ptr %sp31, align 16
  br i1 %26, label %OP2687.JUMPDEST, label %OP57.DUP1

OP57.DUP1:                                        ; preds = %OP52.DUP1
  store i256 %13, ptr %sp31, align 16
  store i256 4267137671, ptr %sp60, align 16
  %28 = icmp eq i256 %13, 4267137671
  %29 = zext i1 %28 to i256
  store i256 %29, ptr %sp31, align 16
  br i1 %28, label %OP2709.JUMPDEST, label %OP417.JUMPDEST

OP64.JUMPDEST.loopexit:                           ; preds = %dynamic_jump_table
  %.phi.trans.insert54202 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp178.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54202, i64 -1
  %dup1179.pre = load i256, ptr %sp178.phi.trans.insert, align 16
  br label %OP64.JUMPDEST

OP64.JUMPDEST:                                    ; preds = %OP64.JUMPDEST.loopexit, %OP37.DUP1
  %dup1209 = phi i256 [ %13, %OP37.DUP1 ], [ %dup1179.pre, %OP64.JUMPDEST.loopexit ]
  %len.addr.1 = phi i64 [ %len.addr.0, %OP37.DUP1 ], [ %len.addr.357, %OP64.JUMPDEST.loopexit ]
  %30 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.1
  %sp182 = getelementptr i256, ptr %30, i64 1
  store i256 3824031246, ptr %sp182, align 16
  %31 = icmp eq i256 %dup1209, 3824031246
  %32 = zext i1 %31 to i256
  store i256 %32, ptr %30, align 16
  br i1 %31, label %OP2498.JUMPDEST, label %OP70.DUP1

OP70.DUP1:                                        ; preds = %OP64.JUMPDEST
  store i256 3852906767, ptr %sp182, align 16
  %33 = icmp eq i256 %dup1209, 3852906767
  %34 = zext i1 %33 to i256
  store i256 %34, ptr %30, align 16
  br i1 %33, label %OP2566.JUMPDEST, label %OP75.DUP1

OP75.DUP1:                                        ; preds = %OP70.DUP1
  store i256 3913941250, ptr %sp182, align 16
  %35 = icmp eq i256 %dup1209, 3913941250
  %36 = zext i1 %35 to i256
  store i256 %36, ptr %30, align 16
  br i1 %35, label %OP2570.JUMPDEST, label %OP417.JUMPDEST

OP82.JUMPDEST.loopexit:                           ; preds = %dynamic_jump_table
  %.phi.trans.insert54158 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp225.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54158, i64 -1
  %dup1226.pre = load i256, ptr %sp225.phi.trans.insert, align 16
  br label %OP82.JUMPDEST

OP82.JUMPDEST:                                    ; preds = %OP82.JUMPDEST.loopexit, %OP32.DUP1
  %dup1286 = phi i256 [ %13, %OP32.DUP1 ], [ %dup1226.pre, %OP82.JUMPDEST.loopexit ]
  %len.addr.2 = phi i64 [ %len.addr.0, %OP32.DUP1 ], [ %len.addr.357, %OP82.JUMPDEST.loopexit ]
  %37 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.2
  %sp229 = getelementptr i256, ptr %37, i64 1
  store i256 3573918927, ptr %sp229, align 16
  %38 = icmp ult i256 %dup1286, 3573918927
  %39 = zext i1 %38 to i256
  store i256 %39, ptr %37, align 16
  br i1 %38, label %OP110.JUMPDEST, label %OP88.DUP1

OP88.DUP1:                                        ; preds = %OP82.JUMPDEST
  store i256 3573918927, ptr %sp229, align 16
  %40 = icmp eq i256 %dup1286, 3573918927
  %41 = zext i1 %40 to i256
  store i256 %41, ptr %37, align 16
  br i1 %40, label %OP2327.JUMPDEST, label %OP93.DUP1

OP93.DUP1:                                        ; preds = %OP88.DUP1
  store i256 3590908516, ptr %sp229, align 16
  %42 = icmp eq i256 %dup1286, 3590908516
  %43 = zext i1 %42 to i256
  store i256 %43, ptr %37, align 16
  br i1 %42, label %OP2385.JUMPDEST, label %OP98.DUP1

OP98.DUP1:                                        ; preds = %OP93.DUP1
  store i256 3642135687, ptr %sp229, align 16
  %44 = icmp eq i256 %dup1286, 3642135687
  %45 = zext i1 %44 to i256
  store i256 %45, ptr %37, align 16
  br i1 %44, label %OP2465.JUMPDEST, label %OP103.DUP1

OP103.DUP1:                                       ; preds = %OP98.DUP1
  store i256 3714247998, ptr %sp229, align 16
  %46 = icmp eq i256 %dup1286, 3714247998
  %47 = zext i1 %46 to i256
  store i256 %47, ptr %37, align 16
  br i1 %46, label %OP2469.JUMPDEST, label %OP417.JUMPDEST

OP110.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54186 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp302.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54186, i64 -1
  %dup1303.pre = load i256, ptr %sp302.phi.trans.insert, align 16
  br label %OP110.JUMPDEST

OP110.JUMPDEST:                                   ; preds = %OP110.JUMPDEST.loopexit, %OP82.JUMPDEST
  %dup1333 = phi i256 [ %dup1286, %OP82.JUMPDEST ], [ %dup1303.pre, %OP110.JUMPDEST.loopexit ]
  %len.addr.3 = phi i64 [ %len.addr.2, %OP82.JUMPDEST ], [ %len.addr.357, %OP110.JUMPDEST.loopexit ]
  %48 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.3
  %sp306 = getelementptr i256, ptr %48, i64 1
  store i256 3082234009, ptr %sp306, align 16
  %49 = icmp eq i256 %dup1333, 3082234009
  %50 = zext i1 %49 to i256
  store i256 %50, ptr %48, align 16
  br i1 %49, label %OP2021.JUMPDEST, label %OP116.DUP1

OP116.DUP1:                                       ; preds = %OP110.JUMPDEST
  store i256 3171951664, ptr %sp306, align 16
  %51 = icmp eq i256 %dup1333, 3171951664
  %52 = zext i1 %51 to i256
  store i256 %52, ptr %48, align 16
  br i1 %51, label %OP2160.JUMPDEST, label %OP121.DUP1

OP121.DUP1:                                       ; preds = %OP116.DUP1
  store i256 3473484181, ptr %sp306, align 16
  %53 = icmp eq i256 %dup1333, 3473484181
  %54 = zext i1 %53 to i256
  store i256 %54, ptr %48, align 16
  br i1 %53, label %OP2164.JUMPDEST, label %OP417.JUMPDEST

OP128.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54112 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp349.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54112, i64 -1
  %dup1350.pre = load i256, ptr %sp349.phi.trans.insert, align 16
  br label %OP128.JUMPDEST

OP128.JUMPDEST:                                   ; preds = %OP128.JUMPDEST.loopexit, %OP27.DUP1
  %dup1425 = phi i256 [ %13, %OP27.DUP1 ], [ %dup1350.pre, %OP128.JUMPDEST.loopexit ]
  %len.addr.4 = phi i64 [ %len.addr.0, %OP27.DUP1 ], [ %len.addr.357, %OP128.JUMPDEST.loopexit ]
  %55 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.4
  %sp353 = getelementptr i256, ptr %55, i64 1
  store i256 2697751144, ptr %sp353, align 16
  %56 = icmp ult i256 %dup1425, 2697751144
  %57 = zext i1 %56 to i256
  store i256 %57, ptr %55, align 16
  br i1 %56, label %OP179.JUMPDEST, label %OP134.DUP1

OP134.DUP1:                                       ; preds = %OP128.JUMPDEST
  store i256 2854281700, ptr %sp353, align 16
  %58 = icmp ult i256 %dup1425, 2854281700
  %59 = zext i1 %58 to i256
  store i256 %59, ptr %55, align 16
  br i1 %58, label %OP161.JUMPDEST, label %OP139.DUP1

OP139.DUP1:                                       ; preds = %OP134.DUP1
  store i256 2854281700, ptr %sp353, align 16
  %60 = icmp eq i256 %dup1425, 2854281700
  %61 = zext i1 %60 to i256
  store i256 %61, ptr %55, align 16
  br i1 %60, label %OP1919.JUMPDEST, label %OP144.DUP1

OP144.DUP1:                                       ; preds = %OP139.DUP1
  store i256 2854690330, ptr %sp353, align 16
  %62 = icmp eq i256 %dup1425, 2854690330
  %63 = zext i1 %62 to i256
  store i256 %63, ptr %55, align 16
  br i1 %62, label %OP1941.JUMPDEST, label %OP149.DUP1

OP149.DUP1:                                       ; preds = %OP144.DUP1
  store i256 2906177314, ptr %sp353, align 16
  %64 = icmp eq i256 %dup1425, 2906177314
  %65 = zext i1 %64 to i256
  store i256 %65, ptr %55, align 16
  br i1 %64, label %OP1963.JUMPDEST, label %OP154.DUP1

OP154.DUP1:                                       ; preds = %OP149.DUP1
  store i256 2987494029, ptr %sp353, align 16
  %66 = icmp eq i256 %dup1425, 2987494029
  %67 = zext i1 %66 to i256
  store i256 %67, ptr %55, align 16
  br i1 %66, label %OP1985.JUMPDEST, label %OP417.JUMPDEST

OP161.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54127 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp441.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54127, i64 -1
  %dup1442.pre = load i256, ptr %sp441.phi.trans.insert, align 16
  br label %OP161.JUMPDEST

OP161.JUMPDEST:                                   ; preds = %OP161.JUMPDEST.loopexit, %OP134.DUP1
  %dup1472 = phi i256 [ %dup1425, %OP134.DUP1 ], [ %dup1442.pre, %OP161.JUMPDEST.loopexit ]
  %len.addr.5 = phi i64 [ %len.addr.4, %OP134.DUP1 ], [ %len.addr.357, %OP161.JUMPDEST.loopexit ]
  %68 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.5
  %sp445 = getelementptr i256, ptr %68, i64 1
  store i256 2697751144, ptr %sp445, align 16
  %69 = icmp eq i256 %dup1472, 2697751144
  %70 = zext i1 %69 to i256
  store i256 %70, ptr %68, align 16
  br i1 %69, label %OP1861.JUMPDEST, label %OP167.DUP1

OP167.DUP1:                                       ; preds = %OP161.JUMPDEST
  store i256 2757214935, ptr %sp445, align 16
  %71 = icmp eq i256 %dup1472, 2757214935
  %72 = zext i1 %71 to i256
  store i256 %72, ptr %68, align 16
  br i1 %71, label %OP1865.JUMPDEST, label %OP172.DUP1

OP172.DUP1:                                       ; preds = %OP167.DUP1
  store i256 2835717307, ptr %sp445, align 16
  %73 = icmp eq i256 %dup1472, 2835717307
  %74 = zext i1 %73 to i256
  store i256 %74, ptr %68, align 16
  br i1 %73, label %OP1892.JUMPDEST, label %OP417.JUMPDEST

OP179.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54138 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp488.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54138, i64 -1
  %dup1489.pre = load i256, ptr %sp488.phi.trans.insert, align 16
  br label %OP179.JUMPDEST

OP179.JUMPDEST:                                   ; preds = %OP179.JUMPDEST.loopexit, %OP128.JUMPDEST
  %dup1549 = phi i256 [ %dup1425, %OP128.JUMPDEST ], [ %dup1489.pre, %OP179.JUMPDEST.loopexit ]
  %len.addr.6 = phi i64 [ %len.addr.4, %OP128.JUMPDEST ], [ %len.addr.357, %OP179.JUMPDEST.loopexit ]
  %75 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.6
  %sp492 = getelementptr i256, ptr %75, i64 1
  store i256 2376452955, ptr %sp492, align 16
  %76 = icmp ult i256 %dup1549, 2376452955
  %77 = zext i1 %76 to i256
  store i256 %77, ptr %75, align 16
  br i1 %76, label %OP207.JUMPDEST, label %OP185.DUP1

OP185.DUP1:                                       ; preds = %OP179.JUMPDEST
  store i256 2376452955, ptr %sp492, align 16
  %78 = icmp eq i256 %dup1549, 2376452955
  %79 = zext i1 %78 to i256
  store i256 %79, ptr %75, align 16
  br i1 %78, label %OP1696.JUMPDEST, label %OP190.DUP1

OP190.DUP1:                                       ; preds = %OP185.DUP1
  store i256 2514000705, ptr %sp492, align 16
  %80 = icmp eq i256 %dup1549, 2514000705
  %81 = zext i1 %80 to i256
  store i256 %81, ptr %75, align 16
  br i1 %80, label %OP1700.JUMPDEST, label %OP195.DUP1

OP195.DUP1:                                       ; preds = %OP190.DUP1
  store i256 2681229421, ptr %sp492, align 16
  %82 = icmp eq i256 %dup1549, 2681229421
  %83 = zext i1 %82 to i256
  store i256 %83, ptr %75, align 16
  br i1 %82, label %OP1704.JUMPDEST, label %OP200.DUP1

OP200.DUP1:                                       ; preds = %OP195.DUP1
  store i256 2681579215, ptr %sp492, align 16
  %84 = icmp eq i256 %dup1549, 2681579215
  %85 = zext i1 %84 to i256
  store i256 %85, ptr %75, align 16
  br i1 %84, label %OP1708.JUMPDEST, label %OP417.JUMPDEST

OP207.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54145 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp565.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54145, i64 -1
  %dup1566.pre = load i256, ptr %sp565.phi.trans.insert, align 16
  br label %OP207.JUMPDEST

OP207.JUMPDEST:                                   ; preds = %OP207.JUMPDEST.loopexit, %OP179.JUMPDEST
  %dup1596 = phi i256 [ %dup1549, %OP179.JUMPDEST ], [ %dup1566.pre, %OP207.JUMPDEST.loopexit ]
  %len.addr.7 = phi i64 [ %len.addr.6, %OP179.JUMPDEST ], [ %len.addr.357, %OP207.JUMPDEST.loopexit ]
  %86 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.7
  %sp569 = getelementptr i256, ptr %86, i64 1
  store i256 2220280665, ptr %sp569, align 16
  %87 = icmp eq i256 %dup1596, 2220280665
  %88 = zext i1 %87 to i256
  store i256 %88, ptr %86, align 16
  br i1 %87, label %OP1507.JUMPDEST, label %OP213.DUP1

OP213.DUP1:                                       ; preds = %OP207.JUMPDEST
  store i256 2293738339, ptr %sp569, align 16
  %89 = icmp eq i256 %dup1596, 2293738339
  %90 = zext i1 %89 to i256
  store i256 %90, ptr %86, align 16
  br i1 %89, label %OP1511.JUMPDEST, label %OP218.DUP1

OP218.DUP1:                                       ; preds = %OP213.DUP1
  store i256 2322446787, ptr %sp569, align 16
  %91 = icmp eq i256 %dup1596, 2322446787
  %92 = zext i1 %91 to i256
  store i256 %92, ptr %86, align 16
  br i1 %91, label %OP1674.JUMPDEST, label %OP417.JUMPDEST

OP225.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp612.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert, i64 -1
  %dup1613.pre = load i256, ptr %sp612.phi.trans.insert, align 16
  br label %OP225.JUMPDEST

OP225.JUMPDEST:                                   ; preds = %OP225.JUMPDEST.loopexit, %OP18.PUSH1
  %dup1613 = phi i256 [ %13, %OP18.PUSH1 ], [ %dup1613.pre, %OP225.JUMPDEST.loopexit ]
  %len.addr.8 = phi i64 [ %len.addr.0, %OP18.PUSH1 ], [ %len.addr.357, %OP225.JUMPDEST.loopexit ]
  %93 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.8
  store i256 %dup1613, ptr %93, align 16
  %sp616 = getelementptr i256, ptr %93, i64 1
  store i256 950415747, ptr %sp616, align 16
  %94 = icmp ult i256 %dup1613, 950415747
  %95 = zext i1 %94 to i256
  store i256 %95, ptr %93, align 16
  br i1 %94, label %OP327.JUMPDEST, label %OP231.DUP1

OP231.DUP1:                                       ; preds = %OP225.JUMPDEST
  store i256 %dup1613, ptr %93, align 16
  store i256 1425886544, ptr %sp616, align 16
  %96 = icmp ult i256 %dup1613, 1425886544
  %97 = zext i1 %96 to i256
  store i256 %97, ptr %93, align 16
  br i1 %96, label %OP281.JUMPDEST, label %OP236.DUP1

OP236.DUP1:                                       ; preds = %OP231.DUP1
  store i256 %dup1613, ptr %93, align 16
  store i256 1553423035, ptr %sp616, align 16
  %98 = icmp ult i256 %dup1613, 1553423035
  %99 = zext i1 %98 to i256
  store i256 %99, ptr %93, align 16
  br i1 %98, label %OP263.JUMPDEST, label %OP241.DUP1

OP241.DUP1:                                       ; preds = %OP236.DUP1
  store i256 %dup1613, ptr %93, align 16
  store i256 1553423035, ptr %sp616, align 16
  %100 = icmp eq i256 %dup1613, 1553423035
  %101 = zext i1 %100 to i256
  store i256 %101, ptr %93, align 16
  br i1 %100, label %OP1455.JUMPDEST, label %OP246.DUP1

OP246.DUP1:                                       ; preds = %OP241.DUP1
  store i256 %dup1613, ptr %93, align 16
  store i256 1889567281, ptr %sp616, align 16
  %102 = icmp eq i256 %dup1613, 1889567281
  %103 = zext i1 %102 to i256
  store i256 %103, ptr %93, align 16
  br i1 %102, label %OP1459.JUMPDEST, label %OP251.DUP1

OP251.DUP1:                                       ; preds = %OP246.DUP1
  store i256 %dup1613, ptr %93, align 16
  store i256 2127478272, ptr %sp616, align 16
  %104 = icmp eq i256 %dup1613, 2127478272
  %105 = zext i1 %104 to i256
  store i256 %105, ptr %93, align 16
  br i1 %104, label %OP1481.JUMPDEST, label %OP256.DUP1

OP256.DUP1:                                       ; preds = %OP251.DUP1
  store i256 %dup1613, ptr %93, align 16
  store i256 2133781699, ptr %sp616, align 16
  %106 = icmp eq i256 %dup1613, 2133781699
  %107 = zext i1 %106 to i256
  store i256 %107, ptr %93, align 16
  br i1 %106, label %OP1503.JUMPDEST, label %OP417.JUMPDEST

OP263.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54098 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp719.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54098, i64 -1
  %dup1720.pre = load i256, ptr %sp719.phi.trans.insert, align 16
  br label %OP263.JUMPDEST

OP263.JUMPDEST:                                   ; preds = %OP263.JUMPDEST.loopexit, %OP236.DUP1
  %dup1750 = phi i256 [ %dup1613, %OP236.DUP1 ], [ %dup1720.pre, %OP263.JUMPDEST.loopexit ]
  %len.addr.9 = phi i64 [ %len.addr.8, %OP236.DUP1 ], [ %len.addr.357, %OP263.JUMPDEST.loopexit ]
  %108 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.9
  %sp723 = getelementptr i256, ptr %108, i64 1
  store i256 1425886544, ptr %sp723, align 16
  %109 = icmp eq i256 %dup1750, 1425886544
  %110 = zext i1 %109 to i256
  store i256 %110, ptr %108, align 16
  br i1 %109, label %OP1385.JUMPDEST, label %OP269.DUP1

OP269.DUP1:                                       ; preds = %OP263.JUMPDEST
  store i256 1431022396, ptr %sp723, align 16
  %111 = icmp eq i256 %dup1750, 1431022396
  %112 = zext i1 %111 to i256
  store i256 %112, ptr %108, align 16
  br i1 %111, label %OP1389.JUMPDEST, label %OP274.DUP1

OP274.DUP1:                                       ; preds = %OP269.DUP1
  store i256 1510251120, ptr %sp723, align 16
  %113 = icmp eq i256 %dup1750, 1510251120
  %114 = zext i1 %113 to i256
  store i256 %114, ptr %108, align 16
  br i1 %113, label %OP1411.JUMPDEST, label %OP417.JUMPDEST

OP281.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54064 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp766.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54064, i64 -1
  %dup1767.pre = load i256, ptr %sp766.phi.trans.insert, align 16
  br label %OP281.JUMPDEST

OP281.JUMPDEST:                                   ; preds = %OP281.JUMPDEST.loopexit, %OP231.DUP1
  %dup1827 = phi i256 [ %dup1613, %OP231.DUP1 ], [ %dup1767.pre, %OP281.JUMPDEST.loopexit ]
  %len.addr.10 = phi i64 [ %len.addr.8, %OP231.DUP1 ], [ %len.addr.357, %OP281.JUMPDEST.loopexit ]
  %115 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.10
  %sp770 = getelementptr i256, ptr %115, i64 1
  store i256 1086394137, ptr %sp770, align 16
  %116 = icmp ult i256 %dup1827, 1086394137
  %117 = zext i1 %116 to i256
  store i256 %117, ptr %115, align 16
  br i1 %116, label %OP309.JUMPDEST, label %OP287.DUP1

OP287.DUP1:                                       ; preds = %OP281.JUMPDEST
  store i256 1086394137, ptr %sp770, align 16
  %118 = icmp eq i256 %dup1827, 1086394137
  %119 = zext i1 %118 to i256
  store i256 %119, ptr %115, align 16
  br i1 %118, label %OP1172.JUMPDEST, label %OP292.DUP1

OP292.DUP1:                                       ; preds = %OP287.DUP1
  store i256 1117154408, ptr %sp770, align 16
  %120 = icmp eq i256 %dup1827, 1117154408
  %121 = zext i1 %120 to i256
  store i256 %121, ptr %115, align 16
  br i1 %120, label %OP1199.JUMPDEST, label %OP297.DUP1

OP297.DUP1:                                       ; preds = %OP292.DUP1
  store i256 1124219316, ptr %sp770, align 16
  %122 = icmp eq i256 %dup1827, 1124219316
  %123 = zext i1 %122 to i256
  store i256 %123, ptr %115, align 16
  br i1 %122, label %OP1219.JUMPDEST, label %OP302.DUP1

OP302.DUP1:                                       ; preds = %OP297.DUP1
  store i256 1313134934, ptr %sp770, align 16
  %124 = icmp eq i256 %dup1827, 1313134934
  %125 = zext i1 %124 to i256
  store i256 %125, ptr %115, align 16
  br i1 %124, label %OP1358.JUMPDEST, label %OP417.JUMPDEST

OP309.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54092 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp843.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54092, i64 -1
  %dup1844.pre = load i256, ptr %sp843.phi.trans.insert, align 16
  br label %OP309.JUMPDEST

OP309.JUMPDEST:                                   ; preds = %OP309.JUMPDEST.loopexit, %OP281.JUMPDEST
  %dup1874 = phi i256 [ %dup1827, %OP281.JUMPDEST ], [ %dup1844.pre, %OP309.JUMPDEST.loopexit ]
  %len.addr.11 = phi i64 [ %len.addr.10, %OP281.JUMPDEST ], [ %len.addr.357, %OP309.JUMPDEST.loopexit ]
  %126 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.11
  %sp847 = getelementptr i256, ptr %126, i64 1
  store i256 950415747, ptr %sp847, align 16
  %127 = icmp eq i256 %dup1874, 950415747
  %128 = zext i1 %127 to i256
  store i256 %128, ptr %126, align 16
  br i1 %127, label %OP1137.JUMPDEST, label %OP315.DUP1

OP315.DUP1:                                       ; preds = %OP309.JUMPDEST
  store i256 961581905, ptr %sp847, align 16
  %129 = icmp eq i256 %dup1874, 961581905
  %130 = zext i1 %129 to i256
  store i256 %130, ptr %126, align 16
  br i1 %129, label %OP1141.JUMPDEST, label %OP320.DUP1

OP320.DUP1:                                       ; preds = %OP315.DUP1
  store i256 1061922874, ptr %sp847, align 16
  %131 = icmp eq i256 %dup1874, 1061922874
  %132 = zext i1 %131 to i256
  store i256 %132, ptr %126, align 16
  br i1 %131, label %OP1168.JUMPDEST, label %OP417.JUMPDEST

OP327.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert53938 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp890.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert53938, i64 -1
  %dup1891.pre = load i256, ptr %sp890.phi.trans.insert, align 16
  br label %OP327.JUMPDEST

OP327.JUMPDEST:                                   ; preds = %OP327.JUMPDEST.loopexit, %OP225.JUMPDEST
  %dup1891 = phi i256 [ %dup1613, %OP225.JUMPDEST ], [ %dup1891.pre, %OP327.JUMPDEST.loopexit ]
  %len.addr.12 = phi i64 [ %len.addr.8, %OP225.JUMPDEST ], [ %len.addr.357, %OP327.JUMPDEST.loopexit ]
  %133 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.12
  store i256 %dup1891, ptr %133, align 16
  %sp894 = getelementptr i256, ptr %133, i64 1
  store i256 801644041, ptr %sp894, align 16
  %134 = icmp ult i256 %dup1891, 801644041
  %135 = zext i1 %134 to i256
  store i256 %135, ptr %133, align 16
  br i1 %134, label %OP378.JUMPDEST, label %OP333.DUP1

OP333.DUP1:                                       ; preds = %OP327.JUMPDEST
  store i256 %dup1891, ptr %133, align 16
  store i256 826074471, ptr %sp894, align 16
  %136 = icmp ult i256 %dup1891, 826074471
  %137 = zext i1 %136 to i256
  store i256 %137, ptr %133, align 16
  br i1 %136, label %OP360.JUMPDEST, label %OP338.DUP1

OP338.DUP1:                                       ; preds = %OP333.DUP1
  store i256 %dup1891, ptr %133, align 16
  store i256 826074471, ptr %sp894, align 16
  %138 = icmp eq i256 %dup1891, 826074471
  %139 = zext i1 %138 to i256
  store i256 %139, ptr %133, align 16
  br i1 %138, label %OP720.JUMPDEST, label %OP343.DUP1

OP343.DUP1:                                       ; preds = %OP338.DUP1
  store i256 %dup1891, ptr %133, align 16
  store i256 861345323, ptr %sp894, align 16
  %140 = icmp eq i256 %dup1891, 861345323
  %141 = zext i1 %140 to i256
  store i256 %141, ptr %133, align 16
  br i1 %140, label %OP743.JUMPDEST, label %OP348.DUP1

OP348.DUP1:                                       ; preds = %OP343.DUP1
  store i256 %dup1891, ptr %133, align 16
  store i256 903454517, ptr %sp894, align 16
  %142 = icmp eq i256 %dup1891, 903454517
  %143 = zext i1 %142 to i256
  store i256 %143, ptr %133, align 16
  br i1 %142, label %OP1110.JUMPDEST, label %OP353.DUP1

OP353.DUP1:                                       ; preds = %OP348.DUP1
  store i256 %dup1891, ptr %133, align 16
  store i256 910484757, ptr %sp894, align 16
  %144 = icmp eq i256 %dup1891, 910484757
  %145 = zext i1 %144 to i256
  store i256 %145, ptr %133, align 16
  br i1 %144, label %OP1133.JUMPDEST, label %OP417.JUMPDEST

OP360.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54058 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp982.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54058, i64 -1
  %dup1983.pre = load i256, ptr %sp982.phi.trans.insert, align 16
  br label %OP360.JUMPDEST

OP360.JUMPDEST:                                   ; preds = %OP360.JUMPDEST.loopexit, %OP333.DUP1
  %dup11013 = phi i256 [ %dup1891, %OP333.DUP1 ], [ %dup1983.pre, %OP360.JUMPDEST.loopexit ]
  %len.addr.13 = phi i64 [ %len.addr.12, %OP333.DUP1 ], [ %len.addr.357, %OP360.JUMPDEST.loopexit ]
  %146 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.13
  %sp986 = getelementptr i256, ptr %146, i64 1
  store i256 801644041, ptr %sp986, align 16
  %147 = icmp eq i256 %dup11013, 801644041
  %148 = zext i1 %147 to i256
  store i256 %148, ptr %146, align 16
  br i1 %147, label %OP672.JUMPDEST, label %OP366.DUP1

OP366.DUP1:                                       ; preds = %OP360.JUMPDEST
  store i256 814919637, ptr %sp986, align 16
  %149 = icmp eq i256 %dup11013, 814919637
  %150 = zext i1 %149 to i256
  store i256 %150, ptr %146, align 16
  br i1 %149, label %OP694.JUMPDEST, label %OP371.DUP1

OP371.DUP1:                                       ; preds = %OP366.DUP1
  store i256 816707615, ptr %sp986, align 16
  %151 = icmp eq i256 %dup11013, 816707615
  %152 = zext i1 %151 to i256
  store i256 %152, ptr %146, align 16
  br i1 %151, label %OP716.JUMPDEST, label %OP417.JUMPDEST

OP378.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert53940 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp1029.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert53940, i64 -1
  %dup11030.pre = load i256, ptr %sp1029.phi.trans.insert, align 16
  br label %OP378.JUMPDEST

OP378.JUMPDEST:                                   ; preds = %OP378.JUMPDEST.loopexit, %OP327.JUMPDEST
  %dup11030 = phi i256 [ %dup1891, %OP327.JUMPDEST ], [ %dup11030.pre, %OP378.JUMPDEST.loopexit ]
  %len.addr.14 = phi i64 [ %len.addr.12, %OP327.JUMPDEST ], [ %len.addr.357, %OP378.JUMPDEST.loopexit ]
  %153 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.14
  store i256 %dup11030, ptr %153, align 16
  %sp1033 = getelementptr i256, ptr %153, i64 1
  store i256 445207142, ptr %sp1033, align 16
  %154 = icmp ult i256 %dup11030, 445207142
  %155 = zext i1 %154 to i256
  store i256 %155, ptr %153, align 16
  br i1 %154, label %OP401.JUMPDEST, label %OP384.DUP1

OP384.DUP1:                                       ; preds = %OP378.JUMPDEST
  store i256 %dup11030, ptr %153, align 16
  store i256 445207142, ptr %sp1033, align 16
  %156 = icmp eq i256 %dup11030, 445207142
  %157 = zext i1 %156 to i256
  store i256 %157, ptr %153, align 16
  br i1 %156, label %OP590.JUMPDEST, label %OP389.DUP1

OP389.DUP1:                                       ; preds = %OP384.DUP1
  store i256 %dup11030, ptr %153, align 16
  store i256 599290589, ptr %sp1033, align 16
  %158 = icmp eq i256 %dup11030, 599290589
  %159 = zext i1 %158 to i256
  store i256 %159, ptr %153, align 16
  br i1 %158, label %OP614.JUMPDEST, label %OP394.DUP1

OP394.DUP1:                                       ; preds = %OP389.DUP1
  store i256 %dup11030, ptr %153, align 16
  store i256 716570693, ptr %sp1033, align 16
  %160 = icmp eq i256 %dup11030, 716570693
  %161 = zext i1 %160 to i256
  store i256 %161, ptr %153, align 16
  br i1 %160, label %OP650.JUMPDEST, label %OP417.JUMPDEST

OP401.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert53942 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp1091.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert53942, i64 -1
  %dup11092.pre = load i256, ptr %sp1091.phi.trans.insert, align 16
  br label %OP401.JUMPDEST

OP401.JUMPDEST:                                   ; preds = %OP401.JUMPDEST.loopexit, %OP378.JUMPDEST
  %dup11092 = phi i256 [ %dup11030, %OP378.JUMPDEST ], [ %dup11092.pre, %OP401.JUMPDEST.loopexit ]
  %len.addr.15 = phi i64 [ %len.addr.14, %OP378.JUMPDEST ], [ %len.addr.357, %OP401.JUMPDEST.loopexit ]
  %162 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.15
  store i256 %dup11092, ptr %162, align 16
  %sp1095 = getelementptr i256, ptr %162, i64 1
  store i256 117300739, ptr %sp1095, align 16
  %163 = icmp eq i256 %dup11092, 117300739
  %164 = zext i1 %163 to i256
  store i256 %164, ptr %162, align 16
  br i1 %163, label %OP421.JUMPDEST, label %OP407.DUP1

OP407.DUP1:                                       ; preds = %OP401.JUMPDEST
  store i256 %dup11092, ptr %162, align 16
  store i256 157198259, ptr %sp1095, align 16
  %165 = icmp eq i256 %dup11092, 157198259
  %166 = zext i1 %165 to i256
  store i256 %166, ptr %162, align 16
  br i1 %165, label %OP525.JUMPDEST, label %OP412.DUP1

OP412.DUP1:                                       ; preds = %OP407.DUP1
  store i256 %dup11092, ptr %162, align 16
  store i256 404098525, ptr %sp1095, align 16
  %167 = icmp eq i256 %dup11092, 404098525
  %168 = zext i1 %167 to i256
  store i256 %168, ptr %162, align 16
  br i1 %167, label %OP570.JUMPDEST, label %OP417.JUMPDEST

OP417.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP394.DUP1, %OP371.DUP1, %OP353.DUP1, %OP320.DUP1, %OP302.DUP1, %OP274.DUP1, %OP256.DUP1, %OP218.DUP1, %OP200.DUP1, %OP172.DUP1, %OP154.DUP1, %OP121.DUP1, %OP103.DUP1, %OP75.DUP1, %OP57.DUP1, %OP412.DUP1, %OP11.JUMPDEST
  %len.addr.16 = phi i64 [ %7, %OP11.JUMPDEST ], [ %len.addr.15, %OP412.DUP1 ], [ %len.addr.0, %OP57.DUP1 ], [ %len.addr.1, %OP75.DUP1 ], [ %len.addr.2, %OP103.DUP1 ], [ %len.addr.3, %OP121.DUP1 ], [ %len.addr.4, %OP154.DUP1 ], [ %len.addr.5, %OP172.DUP1 ], [ %len.addr.6, %OP200.DUP1 ], [ %len.addr.7, %OP218.DUP1 ], [ %len.addr.8, %OP256.DUP1 ], [ %len.addr.9, %OP274.DUP1 ], [ %len.addr.10, %OP302.DUP1 ], [ %len.addr.11, %OP320.DUP1 ], [ %len.addr.12, %OP353.DUP1 ], [ %len.addr.13, %OP371.DUP1 ], [ %len.addr.14, %OP394.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp1137 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.16
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1137, i8 0, i64 64, i1 false)
  %169 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1137, i8 16)
  %.not49069 = icmp eq i8 %169, 0
  %spec.select36510 = select i1 %.not49069, i8 16, i8 %169, !prof !6
  br label %return

OP421.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP401.JUMPDEST
  %len.addr.17 = phi i64 [ %len.addr.15, %OP401.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %170 = add i64 %len.addr.17, 1
  %sp1146 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.17
  store i256 890, ptr %sp1146, align 16
  br label %OP2731.JUMPDEST

OP425.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %sp1150 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp1150, align 16
  %171 = add i64 %len.addr.357, 2
  %sp1154 = getelementptr i256, ptr %sp1150, i64 1
  store i256 64, ptr %sp1154, align 16
  %mload.out.slot = alloca i256, align 16
  %172 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot, ptr %arg.ecx.addr)
  %.not48596 = icmp eq i8 %172, 0
  br i1 %.not48596, label %OP428.MLOAD.contd, label %return, !prof !6

OP428.MLOAD.contd:                                ; preds = %OP425.JUMPDEST
  %mload.out = load i256, ptr %mload.out.slot, align 16
  store i256 %mload.out, ptr %sp1154, align 16
  %173 = add i64 %len.addr.357, 3
  %sp1160 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %171
  store i256 32, ptr %sp1160, align 16
  %174 = add i64 %len.addr.357, 4
  %sp1164 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %173
  store i256 32, ptr %sp1164, align 16
  %sp1167 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %174
  store i256 %mload.out, ptr %sp1167, align 16
  %175 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out, i256 32, ptr %arg.ecx.addr)
  %.not48597 = icmp eq i8 %175, 0
  br i1 %.not48597, label %OP433.DUP4, label %return, !prof !6

OP433.DUP4:                                       ; preds = %OP428.MLOAD.contd
  %sp1174 = getelementptr i256, ptr %sp1150, i64 -1
  %dup4 = load i256, ptr %sp1174, align 16
  store i256 %dup4, ptr %sp1164, align 16
  %mload.out.slot1179 = alloca i256, align 16
  %176 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup4, ptr %mload.out.slot1179, ptr %arg.ecx.addr)
  %.not48598 = icmp eq i8 %176, 0
  br i1 %.not48598, label %OP434.MLOAD.contd, label %return, !prof !6

OP434.MLOAD.contd:                                ; preds = %OP433.DUP4
  %mload.out1180 = load i256, ptr %mload.out.slot1179, align 16
  store i256 %mload.out1180, ptr %sp1164, align 16
  %dup2 = load i256, ptr %sp1160, align 16
  %dup41187 = load i256, ptr %sp1154, align 16
  %sp1188 = getelementptr i256, ptr %sp1150, i64 5
  store i256 %dup41187, ptr %sp1188, align 16
  %177 = add i256 %dup41187, %dup2
  store i256 %177, ptr %sp1167, align 16
  %178 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %177, i256 %mload.out1180, ptr %arg.ecx.addr)
  %.not48599 = icmp eq i8 %178, 0
  br i1 %.not48599, label %OP439.DUP4, label %return, !prof !6

OP439.DUP4:                                       ; preds = %OP434.MLOAD.contd
  %dup41202 = load i256, ptr %sp1174, align 16
  store i256 %dup41202, ptr %sp1164, align 16
  %mload.out.slot1207 = alloca i256, align 16
  %179 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup41202, ptr %mload.out.slot1207, ptr %arg.ecx.addr)
  %.not48600 = icmp eq i8 %179, 0
  br i1 %.not48600, label %OP440.MLOAD.contd, label %return, !prof !6

OP440.MLOAD.contd:                                ; preds = %OP439.DUP4
  %mload.out1208 = load i256, ptr %mload.out.slot1207, align 16
  %swap.b = load i256, ptr %sp1154, align 16
  %swap.b1217 = load i256, ptr %sp1150, align 16
  store i256 %swap.b, ptr %sp1150, align 16
  %180 = add i256 %swap.b1217, %swap.b
  %swap.b1246 = load i256, ptr %sp1160, align 16
  store i256 %180, ptr %sp1160, align 16
  %dup6 = load i256, ptr %sp1174, align 16
  %181 = add i256 %dup6, %swap.b1246
  store i256 %181, ptr %sp1164, align 16
  store i256 %mload.out1208, ptr %sp1167, align 16
  store i256 %mload.out1208, ptr %sp1188, align 16
  %sp1268 = getelementptr i256, ptr %sp1150, i64 6
  store i256 %180, ptr %sp1268, align 16
  %sp1272 = getelementptr i256, ptr %sp1150, i64 7
  store i256 %181, ptr %sp1272, align 16
  %182 = add i64 %len.addr.357, 9
  %sp1274 = getelementptr i256, ptr %sp1150, i64 8
  store i256 0, ptr %sp1274, align 16
  br label %OP456.JUMPDEST.preheader, !annotation !7

OP456.JUMPDEST.preheader:                         ; preds = %dynamic_jump_table, %OP440.MLOAD.contd
  %len.addr.18.ph = phi i64 [ %182, %OP440.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %183 = add i64 %len.addr.18.ph, 1
  %184 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.18.ph
  %sp1277 = getelementptr i256, ptr %184, i64 -4
  %sp1281 = getelementptr i256, ptr %184, i64 -1
  %sp1283 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %183
  %dup4127853467 = load i256, ptr %sp1277, align 16
  %dup2128253468 = load i256, ptr %sp1281, align 16
  store i256 %dup2128253468, ptr %sp1283, align 16
  %185 = icmp uge i256 %dup2128253468, %dup4127853467
  %186 = zext i1 %185 to i256
  store i256 %186, ptr %184, align 16
  br i1 %185, label %OP475.JUMPDEST, label %OP463.DUP2.lr.ph

OP463.DUP2.lr.ph:                                 ; preds = %OP456.JUMPDEST.preheader
  %sp1298 = getelementptr i256, ptr %184, i64 -2
  %sp1318 = getelementptr i256, ptr %184, i64 -3
  %sp1324 = getelementptr i256, ptr %184, i64 2
  br label %OP463.DUP2

OP463.DUP2:                                       ; preds = %OP463.DUP2.lr.ph, %OP471.PUSH1
  %dup2128253469 = phi i256 [ %dup2128253468, %OP463.DUP2.lr.ph ], [ %208, %OP471.PUSH1 ]
  %dup21299 = load i256, ptr %sp1298, align 16
  store i256 %dup2128253469, ptr %sp1283, align 16
  %187 = add i256 %dup21299, %dup2128253469
  store i256 %187, ptr %184, align 16
  %ecx.memory.i49302 = load ptr, ptr %ecx.memory.addr.i51832, align 8
  %ecx.memory.len.addr.i49303 = getelementptr inbounds i8, ptr %ecx.memory.i49302, i64 16
  %ecx.memory.len.i49304 = load i64, ptr %ecx.memory.len.addr.i49303, align 8, !noalias !320
  %ecx.memory.last_checkpoint.addr.i49305 = getelementptr inbounds i8, ptr %ecx.memory.i49302, i64 48
  %ecx.memory.last_checkpoint.i49306 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49305, align 8, !noalias !320
  %188 = sub i64 %ecx.memory.len.i49304, %ecx.memory.last_checkpoint.i49306
  %189 = icmp ugt i256 %187, 18446744073709551615
  %190 = trunc i256 %187 to i64
  %191 = add i64 %190, 32
  %192 = icmp ugt i64 %190, -33
  %193 = or i1 %189, %192
  %194 = select i1 %193, i64 -1, i64 %191
  %195 = icmp ugt i64 %194, %188
  br i1 %195, label %resize.i49313, label %OP466.MLOAD.contd, !prof !5

resize.i49313:                                    ; preds = %OP463.DUP2
  %196 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %194), !noalias !324
  %.not.i49314 = icmp eq i8 %196, 0
  br i1 %.not.i49314, label %resize.i49313.OP466.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49313.OP466.MLOAD.contd_crit_edge:        ; preds = %resize.i49313
  %dup31323.pre = load i256, ptr %sp1281, align 16
  %ecx.memory.i49316.pre = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !325
  br label %OP466.MLOAD.contd

OP466.MLOAD.contd:                                ; preds = %resize.i49313.OP466.MLOAD.contd_crit_edge, %OP463.DUP2
  %ecx.memory.i49316 = phi ptr [ %ecx.memory.i49316.pre, %resize.i49313.OP466.MLOAD.contd_crit_edge ], [ %ecx.memory.i49302, %OP463.DUP2 ]
  %dup31323 = phi i256 [ %dup31323.pre, %resize.i49313.OP466.MLOAD.contd_crit_edge ], [ %dup2128253469, %OP463.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i49308 = getelementptr inbounds i8, ptr %ecx.memory.i49302, i64 8
  %ecx.memory.buffer.ptr.shared.i49309 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49308, align 8, !noalias !320
  %ecx.memory.buffer.ptr.i49310 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49309, i64 %ecx.memory.last_checkpoint.i49306
  %slot.i49311 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49310, i64 %190
  %slot.value.i = load i256, ptr %slot.i49311, align 1, !noalias !320
  %197 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i)
  store i256 %197, ptr %184, align 16
  %dup41319 = load i256, ptr %sp1318, align 16
  store i256 %dup31323, ptr %sp1324, align 16
  %198 = add i256 %dup31323, %dup41319
  store i256 %198, ptr %sp1283, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !325)
  %ecx.memory.len.addr.i49317 = getelementptr inbounds i8, ptr %ecx.memory.i49316, i64 16
  %ecx.memory.len.i49318 = load i64, ptr %ecx.memory.len.addr.i49317, align 8, !noalias !325
  %ecx.memory.last_checkpoint.addr.i49319 = getelementptr inbounds i8, ptr %ecx.memory.i49316, i64 48
  %ecx.memory.last_checkpoint.i49320 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49319, align 8, !noalias !325
  %199 = sub i64 %ecx.memory.len.i49318, %ecx.memory.last_checkpoint.i49320
  %200 = icmp ugt i256 %198, 18446744073709551615
  %201 = trunc i256 %198 to i64
  %202 = add i64 %201, 32
  %203 = icmp ugt i64 %201, -33
  %204 = or i1 %200, %203
  %205 = select i1 %204, i64 -1, i64 %202
  %206 = icmp ugt i64 %205, %199
  br i1 %206, label %resize.i49327, label %OP471.PUSH1, !prof !5

resize.i49327:                                    ; preds = %OP466.MLOAD.contd
  %207 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %205)
  %.not.i49328 = icmp eq i8 %207, 0
  br i1 %.not.i49328, label %OP471.PUSH1, label %return, !prof !6

OP471.PUSH1:                                      ; preds = %OP466.MLOAD.contd, %resize.i49327
  %ecx.memory.buffer.ptr.shared.addr.i49322 = getelementptr inbounds i8, ptr %ecx.memory.i49316, i64 8
  %ecx.memory.buffer.ptr.shared.i49323 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49322, align 8, !noalias !325
  %ecx.memory.buffer.ptr.i49324 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49323, i64 %ecx.memory.last_checkpoint.i49320
  %slot.i49325 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49324, i64 %201
  store i256 %slot.value.i, ptr %slot.i49325, align 1, !noalias !325
  %b1342 = load i256, ptr %sp1281, align 16
  %208 = add i256 %b1342, 32
  store i256 %208, ptr %sp1281, align 16
  %dup41278 = load i256, ptr %sp1277, align 16
  store i256 %208, ptr %sp1283, align 16
  %209 = icmp uge i256 %208, %dup41278
  %210 = zext i1 %209 to i256
  store i256 %210, ptr %184, align 16
  br i1 %209, label %OP475.JUMPDEST, label %OP463.DUP2

OP475.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP471.PUSH1, %OP456.JUMPDEST.preheader
  %len.addr.19 = phi i64 [ %len.addr.18.ph, %OP456.JUMPDEST.preheader ], [ %len.addr.18.ph, %OP471.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %211 = add i64 %len.addr.19, -1
  %212 = add i64 %len.addr.19, -3
  %213 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.19
  %sp1351 = getelementptr i256, ptr %213, i64 -5
  %swap.a1352 = load i256, ptr %sp1351, align 16
  %sp1353 = getelementptr i256, ptr %213, i64 -6
  %214 = add i64 %len.addr.19, -5
  %sp1359 = getelementptr i256, ptr %213, i64 -7
  %swap.b1360 = load i256, ptr %sp1359, align 16
  %sp1364 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %214
  %215 = add i256 %swap.b1360, %swap.a1352
  store i256 %215, ptr %sp1359, align 16
  %216 = and i256 %swap.a1352, 31
  store i256 %216, ptr %sp1353, align 16
  %217 = icmp eq i256 %216, 0
  %218 = zext i1 %217 to i256
  store i256 %218, ptr %sp1364, align 16
  br i1 %217, label %OP512.JUMPDEST, label %OP492.DUP1

OP492.DUP1:                                       ; preds = %OP475.JUMPDEST
  %sp1402 = getelementptr i256, ptr %213, i64 -4
  %219 = sub i256 %215, %216
  store i256 %219, ptr %sp1351, align 16
  store i256 %219, ptr %sp1402, align 16
  %mload.out.slot1416 = alloca i256, align 16
  %220 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %219, ptr %mload.out.slot1416, ptr %arg.ecx.addr)
  %.not48603 = icmp eq i8 %220, 0
  br i1 %.not48603, label %OP496.MLOAD.contd, label %return, !prof !6

OP496.MLOAD.contd:                                ; preds = %OP492.DUP1
  %mload.out1417 = load i256, ptr %mload.out.slot1416, align 16
  store i256 %mload.out1417, ptr %sp1402, align 16
  %sp1420 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %212
  store i256 1, ptr %sp1420, align 16
  %dup41423 = load i256, ptr %sp1353, align 16
  %sp1424 = getelementptr i256, ptr %213, i64 -2
  %sp1426 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %211
  %221 = sub i256 32, %dup41423
  store i256 %221, ptr %sp1424, align 16
  store i256 256, ptr %sp1426, align 16
  %222 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1424, i8 17)
  %.not48604 = icmp eq i8 %222, 0
  br i1 %.not48604, label %OP503.SUB, label %return, !prof !6

OP503.SUB:                                        ; preds = %OP496.MLOAD.contd
  %a1439 = load i256, ptr %sp1424, align 16
  %sp1440 = getelementptr i256, ptr %213, i64 -3
  %b1441 = load i256, ptr %sp1440, align 16
  %223 = xor i256 %a1439, -1
  %224 = add i256 %b1441, %223
  %225 = add i64 %len.addr.19, -4
  %sp1450 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %225
  %b1451 = load i256, ptr %sp1450, align 16
  %226 = and i256 %b1451, %224
  store i256 %226, ptr %sp1450, align 16
  %dup21455 = load i256, ptr %sp1351, align 16
  store i256 %dup21455, ptr %sp1420, align 16
  %227 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup21455, i256 %226, ptr %arg.ecx.addr)
  %.not48605 = icmp eq i8 %227, 0
  br i1 %.not48605, label %OP508.PUSH1, label %return, !prof !6

OP508.PUSH1:                                      ; preds = %OP503.SUB
  store i256 32, ptr %sp1450, align 16
  %b1468 = load i256, ptr %sp1351, align 16
  %228 = add i256 %b1468, 32
  %swap.b1474 = load i256, ptr %sp1359, align 16
  store i256 %228, ptr %sp1359, align 16
  store i256 %swap.b1474, ptr %sp1351, align 16
  br label %OP512.JUMPDEST, !annotation !7

OP512.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP508.PUSH1, %OP475.JUMPDEST
  %len.addr.20 = phi i64 [ %214, %OP475.JUMPDEST ], [ %214, %OP508.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %229 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.20
  %sp1479 = getelementptr i256, ptr %229, i64 -2
  %swap.a1480 = load i256, ptr %sp1479, align 16
  %sp1481 = getelementptr i256, ptr %229, i64 -5
  %swap.b1482 = load i256, ptr %sp1481, align 16
  store i256 %swap.a1480, ptr %sp1481, align 16
  store i256 %swap.b1482, ptr %sp1479, align 16
  %230 = add i64 %len.addr.20, -3
  %sp1487 = getelementptr i256, ptr %229, i64 -4
  store i256 64, ptr %sp1487, align 16
  %mload.out.slot1491 = alloca i256, align 16
  %231 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1491, ptr %arg.ecx.addr)
  %.not48606 = icmp eq i8 %231, 0
  br i1 %.not48606, label %OP519.MLOAD.contd, label %return, !prof !6

OP519.MLOAD.contd:                                ; preds = %OP512.JUMPDEST
  %mload.out1492 = load i256, ptr %mload.out.slot1491, align 16
  %sp1499 = getelementptr i256, ptr %229, i64 -3
  %swap.b1502 = load i256, ptr %sp1481, align 16
  store i256 %swap.b1502, ptr %sp1499, align 16
  %232 = sub i256 %swap.b1502, %mload.out1492
  store i256 %232, ptr %sp1481, align 16
  store i256 %mload.out1492, ptr %sp1487, align 16
  %233 = add i64 %len.addr.20, -5
  %234 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1481, i8 2)
  %.not48607 = icmp eq i8 %234, 0
  %spec.select36511 = select i1 %.not48607, i8 2, i8 %234, !prof !6
  br label %return

OP525.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP407.DUP1
  %len.addr.21 = phi i64 [ %len.addr.15, %OP407.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp1518 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.21
  store i256 1064, ptr %sp1518, align 16
  %sp1520 = getelementptr i256, ptr %sp1518, i64 1
  store i256 4, ptr %sp1520, align 16
  %235 = add i64 %len.addr.21, 3
  %sp1524 = getelementptr i256, ptr %sp1518, i64 2
  %contract.input.len.addr1526 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len1527 = load i64, ptr %contract.input.len.addr1526, align 8
  %236 = zext i64 %contract.input.len1527 to i256
  %sp1528 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %235
  %237 = add nsw i256 %236, -4
  store i256 %237, ptr %sp1524, align 16
  %sp1540 = getelementptr i256, ptr %sp1518, i64 4
  store i256 %237, ptr %sp1540, align 16
  %238 = icmp ugt i256 %237, 63
  %239 = zext i1 %238 to i256
  store i256 %239, ptr %sp1528, align 16
  br i1 %238, label %OP540.JUMPDEST, label %OP537.PUSH1

OP537.PUSH1:                                      ; preds = %OP525.JUMPDEST
  store i256 0, ptr %sp1528, align 16
  store i256 0, ptr %sp1540, align 16
  %240 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1528, i8 16)
  %.not48560 = icmp eq i8 %240, 0
  %spec.select36512 = select i1 %.not48560, i8 16, i8 %240, !prof !6
  br label %return

OP540.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54047 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49298.pre = load i64, ptr %.phi.trans.insert54047, align 8
  br label %OP540.JUMPDEST

OP540.JUMPDEST:                                   ; preds = %OP540.JUMPDEST.loopexit, %OP525.JUMPDEST
  %arg.contract.addr.val49298 = phi i64 [ %contract.input.len1527, %OP525.JUMPDEST ], [ %arg.contract.addr.val49298.pre, %OP540.JUMPDEST.loopexit ]
  %len.addr.22 = phi i64 [ %235, %OP525.JUMPDEST ], [ %len.addr.357, %OP540.JUMPDEST.loopexit ]
  %241 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.22
  %sp1565 = getelementptr i256, ptr %241, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1565, align 16
  %sp1567 = getelementptr i256, ptr %241, i64 -2
  %dup21568 = load i256, ptr %sp1567, align 16
  store i256 %dup21568, ptr %241, align 16
  %242 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49297 = load ptr, ptr %242, align 8
  %243 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup21568, ptr %arg.contract.addr.val49297, i64 %arg.contract.addr.val49298)
  %244 = and i256 %243, 1461501637330902918203684832716283019655932542975
  store i256 %244, ptr %sp1567, align 16
  store i256 32, ptr %241, align 16
  %245 = add i256 %dup21568, 32
  store i256 %245, ptr %sp1565, align 16
  %246 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %245, ptr %arg.contract.addr.val49297, i64 %arg.contract.addr.val49298)
  store i256 %246, ptr %sp1565, align 16
  br label %OP2845.JUMPDEST

OP552.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %247 = add i64 %len.addr.357, 1
  %sp1600 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp1600, align 16
  %248 = add i64 %len.addr.357, 2
  %sp1604 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %247
  store i256 64, ptr %sp1604, align 16
  %mload.out.slot1608 = alloca i256, align 16
  %249 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1608, ptr %arg.ecx.addr)
  %.not48556 = icmp eq i8 %249, 0
  br i1 %.not48556, label %OP555.MLOAD.contd, label %return, !prof !6

OP555.MLOAD.contd:                                ; preds = %OP552.JUMPDEST
  %mload.out1609 = load i256, ptr %mload.out.slot1608, align 16
  %sp1614 = getelementptr i256, ptr %sp1600, i64 -1
  %swap.b1615 = load i256, ptr %sp1614, align 16
  store i256 %mload.out1609, ptr %sp1614, align 16
  %250 = icmp ne i256 %swap.b1615, 0
  %251 = zext i1 %250 to i256
  store i256 %251, ptr %sp1604, align 16
  %sp1627 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %248
  store i256 %mload.out1609, ptr %sp1627, align 16
  %252 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1609, i256 %251, ptr %arg.ecx.addr)
  %.not48557 = icmp eq i8 %252, 0
  br i1 %.not48557, label %OP561.MLOAD, label %return, !prof !6

OP561.MLOAD:                                      ; preds = %OP555.MLOAD.contd
  %a1635 = load i256, ptr %sp1600, align 16
  %mload.out.slot1636 = alloca i256, align 16
  %253 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a1635, ptr %mload.out.slot1636, ptr %arg.ecx.addr)
  %.not48558 = icmp eq i8 %253, 0
  br i1 %.not48558, label %OP561.MLOAD.contd, label %return, !prof !6

OP561.MLOAD.contd:                                ; preds = %OP561.MLOAD
  %mload.out1637 = load i256, ptr %mload.out.slot1636, align 16
  %swap.b1643 = load i256, ptr %sp1614, align 16
  %254 = sub i256 %swap.b1643, %mload.out1637
  store i256 32, ptr %sp1604, align 16
  %255 = add i256 %254, 32
  store i256 %255, ptr %sp1614, align 16
  store i256 %mload.out1637, ptr %sp1600, align 16
  %256 = add i64 %len.addr.357, -1
  %257 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1614, i8 2)
  %.not48559 = icmp eq i8 %257, 0
  %spec.select36513 = select i1 %.not48559, i8 2, i8 %257, !prof !6
  br label %return

OP570.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP412.DUP1
  %len.addr.23 = phi i64 [ %len.addr.15, %OP412.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %258 = add i64 %len.addr.23, 1
  %sp1676 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.23
  store i256 1092, ptr %sp1676, align 16
  br label %OP2904.JUMPDEST

OP574.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %259 = add i64 %len.addr.357, 1
  %sp1680 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp1680, align 16
  %260 = add i64 %len.addr.357, 2
  %sp1684 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %259
  store i256 64, ptr %sp1684, align 16
  %mload.out.slot1688 = alloca i256, align 16
  %261 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1688, ptr %arg.ecx.addr)
  %.not48551 = icmp eq i8 %261, 0
  br i1 %.not48551, label %OP577.MLOAD.contd, label %return, !prof !6

OP577.MLOAD.contd:                                ; preds = %OP574.JUMPDEST
  %mload.out1689 = load i256, ptr %mload.out.slot1688, align 16
  %sp1694 = getelementptr i256, ptr %sp1680, i64 -1
  %swap.b1695 = load i256, ptr %sp1694, align 16
  store i256 %mload.out1689, ptr %sp1694, align 16
  store i256 %swap.b1695, ptr %sp1684, align 16
  %sp1699 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %260
  store i256 %mload.out1689, ptr %sp1699, align 16
  %262 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1689, i256 %swap.b1695, ptr %arg.ecx.addr)
  %.not48552 = icmp eq i8 %262, 0
  br i1 %.not48552, label %OP581.MLOAD, label %return, !prof !6

OP581.MLOAD:                                      ; preds = %OP577.MLOAD.contd
  %a1707 = load i256, ptr %sp1680, align 16
  %mload.out.slot1708 = alloca i256, align 16
  %263 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a1707, ptr %mload.out.slot1708, ptr %arg.ecx.addr)
  %.not48553 = icmp eq i8 %263, 0
  br i1 %.not48553, label %OP581.MLOAD.contd, label %return, !prof !6

OP581.MLOAD.contd:                                ; preds = %OP581.MLOAD
  %mload.out1709 = load i256, ptr %mload.out.slot1708, align 16
  %swap.b1715 = load i256, ptr %sp1694, align 16
  %264 = sub i256 %swap.b1715, %mload.out1709
  store i256 32, ptr %sp1684, align 16
  %265 = add i256 %264, 32
  store i256 %265, ptr %sp1694, align 16
  store i256 %mload.out1709, ptr %sp1680, align 16
  %266 = add i64 %len.addr.357, -1
  %267 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1694, i8 2)
  %.not48554 = icmp eq i8 %267, 0
  %spec.select36514 = select i1 %.not48554, i8 2, i8 %267, !prof !6
  br label %return

OP590.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP384.DUP1
  %len.addr.24 = phi i64 [ %len.addr.14, %OP384.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp1748 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.24
  store i256 1161, ptr %sp1748, align 16
  %sp1750 = getelementptr i256, ptr %sp1748, i64 1
  store i256 4, ptr %sp1750, align 16
  %268 = add i64 %len.addr.24, 3
  %sp1754 = getelementptr i256, ptr %sp1748, i64 2
  %contract.input.len.addr1756 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len1757 = load i64, ptr %contract.input.len.addr1756, align 8
  %269 = zext i64 %contract.input.len1757 to i256
  %sp1758 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %268
  %270 = add nsw i256 %269, -4
  store i256 %270, ptr %sp1754, align 16
  %sp1770 = getelementptr i256, ptr %sp1748, i64 4
  store i256 %270, ptr %sp1770, align 16
  %271 = icmp ugt i256 %270, 31
  %272 = zext i1 %271 to i256
  store i256 %272, ptr %sp1758, align 16
  br i1 %271, label %OP605.JUMPDEST, label %OP602.PUSH1

OP602.PUSH1:                                      ; preds = %OP590.JUMPDEST
  store i256 0, ptr %sp1758, align 16
  store i256 0, ptr %sp1770, align 16
  %273 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1758, i8 16)
  %.not48533 = icmp eq i8 %273, 0
  %spec.select36515 = select i1 %.not48533, i8 16, i8 %273, !prof !6
  br label %return

OP605.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54045 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49294.pre = load i64, ptr %.phi.trans.insert54045, align 8
  br label %OP605.JUMPDEST

OP605.JUMPDEST:                                   ; preds = %OP605.JUMPDEST.loopexit, %OP590.JUMPDEST
  %arg.contract.addr.val49294 = phi i64 [ %contract.input.len1757, %OP590.JUMPDEST ], [ %arg.contract.addr.val49294.pre, %OP605.JUMPDEST.loopexit ]
  %len.addr.25 = phi i64 [ %268, %OP590.JUMPDEST ], [ %len.addr.357, %OP605.JUMPDEST.loopexit ]
  %274 = add i64 %len.addr.25, -1
  %275 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.25
  %sp1795 = getelementptr i256, ptr %275, i64 -2
  %a1796 = load i256, ptr %sp1795, align 16
  %276 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49293 = load ptr, ptr %276, align 8
  %277 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a1796, ptr %arg.contract.addr.val49293, i64 %arg.contract.addr.val49294)
  %sp1799 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %274
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1799, align 16
  %278 = and i256 %277, 1461501637330902918203684832716283019655932542975
  store i256 %278, ptr %sp1795, align 16
  br label %OP2909.JUMPDEST

OP614.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP389.DUP1
  %len.addr.26 = phi i64 [ %len.addr.14, %OP389.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp1811 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.26
  store i256 1064, ptr %sp1811, align 16
  %sp1813 = getelementptr i256, ptr %sp1811, i64 1
  store i256 4, ptr %sp1813, align 16
  %279 = add i64 %len.addr.26, 3
  %sp1817 = getelementptr i256, ptr %sp1811, i64 2
  %contract.input.len.addr1819 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len1820 = load i64, ptr %contract.input.len.addr1819, align 8
  %280 = zext i64 %contract.input.len1820 to i256
  %sp1821 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %279
  %281 = add nsw i256 %280, -4
  store i256 %281, ptr %sp1817, align 16
  %sp1833 = getelementptr i256, ptr %sp1811, i64 4
  store i256 %281, ptr %sp1833, align 16
  %282 = icmp ugt i256 %281, 95
  %283 = zext i1 %282 to i256
  store i256 %283, ptr %sp1821, align 16
  br i1 %282, label %OP629.JUMPDEST, label %OP626.PUSH1

OP626.PUSH1:                                      ; preds = %OP614.JUMPDEST
  store i256 0, ptr %sp1821, align 16
  store i256 0, ptr %sp1833, align 16
  %284 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1821, i8 16)
  %.not48524 = icmp eq i8 %284, 0
  %spec.select36516 = select i1 %.not48524, i8 16, i8 %284, !prof !6
  br label %return

OP629.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54043 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49292.pre = load i64, ptr %.phi.trans.insert54043, align 8
  br label %OP629.JUMPDEST

OP629.JUMPDEST:                                   ; preds = %OP629.JUMPDEST.loopexit, %OP614.JUMPDEST
  %arg.contract.addr.val49292 = phi i64 [ %contract.input.len1820, %OP614.JUMPDEST ], [ %arg.contract.addr.val49292.pre, %OP629.JUMPDEST.loopexit ]
  %len.addr.27 = phi i64 [ %279, %OP614.JUMPDEST ], [ %len.addr.357, %OP629.JUMPDEST.loopexit ]
  %285 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.27
  %sp1858 = getelementptr i256, ptr %285, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1858, align 16
  %286 = add i64 %len.addr.27, 1
  %sp1860 = getelementptr i256, ptr %285, i64 -2
  %dup21861 = load i256, ptr %sp1860, align 16
  store i256 %dup21861, ptr %285, align 16
  %287 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49291 = load ptr, ptr %287, align 8
  %288 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup21861, ptr %arg.contract.addr.val49291, i64 %arg.contract.addr.val49292)
  %sp1870 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %286
  %289 = and i256 %288, 1461501637330902918203684832716283019655932542975
  store i256 %289, ptr %sp1860, align 16
  store i256 %dup21861, ptr %285, align 16
  %sp1887 = getelementptr i256, ptr %285, i64 2
  store i256 %dup21861, ptr %sp1887, align 16
  %290 = add i256 %dup21861, 32
  store i256 %290, ptr %sp1870, align 16
  %291 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %290, ptr %arg.contract.addr.val49291, i64 %arg.contract.addr.val49292)
  %292 = and i256 %291, 1461501637330902918203684832716283019655932542975
  store i256 %292, ptr %sp1858, align 16
  store i256 64, ptr %sp1870, align 16
  %293 = add i256 %dup21861, 64
  store i256 %293, ptr %285, align 16
  %294 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %293, ptr %arg.contract.addr.val49291, i64 %arg.contract.addr.val49292)
  store i256 %294, ptr %285, align 16
  br label %OP2975.JUMPDEST

OP650.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP394.DUP1
  %len.addr.28 = phi i64 [ %len.addr.14, %OP394.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp1934 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.28
  store i256 1161, ptr %sp1934, align 16
  %sp1936 = getelementptr i256, ptr %sp1934, i64 1
  store i256 4, ptr %sp1936, align 16
  %295 = add i64 %len.addr.28, 3
  %sp1940 = getelementptr i256, ptr %sp1934, i64 2
  %contract.input.len.addr1942 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len1943 = load i64, ptr %contract.input.len.addr1942, align 8
  %296 = zext i64 %contract.input.len1943 to i256
  %sp1944 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %295
  %297 = add nsw i256 %296, -4
  store i256 %297, ptr %sp1940, align 16
  %sp1956 = getelementptr i256, ptr %sp1934, i64 4
  store i256 %297, ptr %sp1956, align 16
  %298 = icmp ugt i256 %297, 31
  %299 = zext i1 %298 to i256
  store i256 %299, ptr %sp1944, align 16
  br i1 %298, label %OP665.JUMPDEST, label %OP662.PUSH1

OP662.PUSH1:                                      ; preds = %OP650.JUMPDEST
  store i256 0, ptr %sp1944, align 16
  store i256 0, ptr %sp1956, align 16
  %300 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1944, i8 16)
  %.not48503 = icmp eq i8 %300, 0
  %spec.select36517 = select i1 %.not48503, i8 16, i8 %300, !prof !6
  br label %return

OP665.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54037 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49286.pre = load i64, ptr %.phi.trans.insert54037, align 8
  br label %OP665.JUMPDEST

OP665.JUMPDEST:                                   ; preds = %OP665.JUMPDEST.loopexit, %OP650.JUMPDEST
  %arg.contract.addr.val49286 = phi i64 [ %contract.input.len1943, %OP650.JUMPDEST ], [ %arg.contract.addr.val49286.pre, %OP665.JUMPDEST.loopexit ]
  %len.addr.29 = phi i64 [ %295, %OP650.JUMPDEST ], [ %len.addr.357, %OP665.JUMPDEST.loopexit ]
  %301 = add i64 %len.addr.29, -1
  %302 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.29
  %sp1981 = getelementptr i256, ptr %302, i64 -2
  %a1982 = load i256, ptr %sp1981, align 16
  %303 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49285 = load ptr, ptr %303, align 8
  %304 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a1982, ptr %arg.contract.addr.val49285, i64 %arg.contract.addr.val49286)
  %sp1985 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %301
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp1985, align 16
  %305 = and i256 %304, 1461501637330902918203684832716283019655932542975
  store i256 %305, ptr %sp1981, align 16
  br label %OP3308.JUMPDEST

OP672.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP360.JUMPDEST
  %len.addr.30 = phi i64 [ %len.addr.13, %OP360.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp1995 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.30
  store i256 1161, ptr %sp1995, align 16
  %sp1997 = getelementptr i256, ptr %sp1995, i64 1
  store i256 4, ptr %sp1997, align 16
  %306 = add i64 %len.addr.30, 3
  %sp2001 = getelementptr i256, ptr %sp1995, i64 2
  %contract.input.len.addr2003 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2004 = load i64, ptr %contract.input.len.addr2003, align 8
  %307 = zext i64 %contract.input.len2004 to i256
  %sp2005 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %306
  %308 = add nsw i256 %307, -4
  store i256 %308, ptr %sp2001, align 16
  %sp2017 = getelementptr i256, ptr %sp1995, i64 4
  store i256 %308, ptr %sp2017, align 16
  %309 = icmp ugt i256 %308, 31
  %310 = zext i1 %309 to i256
  store i256 %310, ptr %sp2005, align 16
  br i1 %309, label %OP687.JUMPDEST, label %OP684.PUSH1

OP684.PUSH1:                                      ; preds = %OP672.JUMPDEST
  store i256 0, ptr %sp2005, align 16
  store i256 0, ptr %sp2017, align 16
  %311 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2005, i8 16)
  %.not48627 = icmp eq i8 %311, 0
  %spec.select36518 = select i1 %.not48627, i8 16, i8 %311, !prof !6
  br label %return

OP687.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54062 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49284.pre = load i64, ptr %.phi.trans.insert54062, align 8
  br label %OP687.JUMPDEST

OP687.JUMPDEST:                                   ; preds = %OP687.JUMPDEST.loopexit, %OP672.JUMPDEST
  %arg.contract.addr.val49284 = phi i64 [ %contract.input.len2004, %OP672.JUMPDEST ], [ %arg.contract.addr.val49284.pre, %OP687.JUMPDEST.loopexit ]
  %len.addr.31 = phi i64 [ %306, %OP672.JUMPDEST ], [ %len.addr.357, %OP687.JUMPDEST.loopexit ]
  %312 = add i64 %len.addr.31, -1
  %313 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.31
  %sp2042 = getelementptr i256, ptr %313, i64 -2
  %a2043 = load i256, ptr %sp2042, align 16
  %314 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49283 = load ptr, ptr %314, align 8
  %315 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a2043, ptr %arg.contract.addr.val49283, i64 %arg.contract.addr.val49284)
  %sp2046 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %312
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2046, align 16
  %316 = and i256 %315, 1461501637330902918203684832716283019655932542975
  store i256 %316, ptr %sp2042, align 16
  br label %OP3417.JUMPDEST

OP694.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP366.DUP1
  %len.addr.32 = phi i64 [ %len.addr.13, %OP366.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp2056 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.32
  store i256 1064, ptr %sp2056, align 16
  %sp2058 = getelementptr i256, ptr %sp2056, i64 1
  store i256 4, ptr %sp2058, align 16
  %317 = add i64 %len.addr.32, 3
  %sp2062 = getelementptr i256, ptr %sp2056, i64 2
  %contract.input.len.addr2064 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2065 = load i64, ptr %contract.input.len.addr2064, align 8
  %318 = zext i64 %contract.input.len2065 to i256
  %sp2066 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %317
  %319 = add nsw i256 %318, -4
  store i256 %319, ptr %sp2062, align 16
  %sp2078 = getelementptr i256, ptr %sp2056, i64 4
  store i256 %319, ptr %sp2078, align 16
  %320 = icmp ugt i256 %319, 31
  %321 = zext i1 %320 to i256
  store i256 %321, ptr %sp2066, align 16
  br i1 %320, label %OP709.JUMPDEST, label %OP706.PUSH1

OP706.PUSH1:                                      ; preds = %OP694.JUMPDEST
  store i256 0, ptr %sp2066, align 16
  store i256 0, ptr %sp2078, align 16
  %322 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2066, i8 16)
  %.not48608 = icmp eq i8 %322, 0
  %spec.select36519 = select i1 %.not48608, i8 16, i8 %322, !prof !6
  br label %return

OP709.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54060 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49282.pre = load i64, ptr %.phi.trans.insert54060, align 8
  br label %OP709.JUMPDEST

OP709.JUMPDEST:                                   ; preds = %OP709.JUMPDEST.loopexit, %OP694.JUMPDEST
  %arg.contract.addr.val49282 = phi i64 [ %contract.input.len2065, %OP694.JUMPDEST ], [ %arg.contract.addr.val49282.pre, %OP709.JUMPDEST.loopexit ]
  %len.addr.33 = phi i64 [ %317, %OP694.JUMPDEST ], [ %len.addr.357, %OP709.JUMPDEST.loopexit ]
  %323 = add i64 %len.addr.33, -1
  %324 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.33
  %sp2103 = getelementptr i256, ptr %324, i64 -2
  %a2104 = load i256, ptr %sp2103, align 16
  %325 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49281 = load ptr, ptr %325, align 8
  %326 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a2104, ptr %arg.contract.addr.val49281, i64 %arg.contract.addr.val49282)
  %sp2107 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %323
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp2107, align 16
  %327 = and i256 %326, 1461501637330902918203684832716283019655932542975
  store i256 %327, ptr %sp2103, align 16
  br label %OP3466.JUMPDEST

OP716.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP371.DUP1
  %len.addr.34 = phi i64 [ %len.addr.13, %OP371.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %328 = add i64 %len.addr.34, 1
  %sp2117 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.34
  store i256 1092, ptr %sp2117, align 16
  br label %OP3559.JUMPDEST

OP720.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP338.DUP1
  %len.addr.35 = phi i64 [ %len.addr.12, %OP338.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %329 = add i64 %len.addr.35, 1
  %sp2121 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.35
  store i256 1399, ptr %sp2121, align 16
  br label %OP3563.JUMPDEST

OP724.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %330 = add i64 %len.addr.357, 1
  %sp2125 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp2125, align 16
  %331 = add i64 %len.addr.357, 2
  %sp2129 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %330
  store i256 64, ptr %sp2129, align 16
  %mload.out.slot2133 = alloca i256, align 16
  %332 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2133, ptr %arg.ecx.addr)
  %.not48498 = icmp eq i8 %332, 0
  br i1 %.not48498, label %OP727.MLOAD.contd, label %return, !prof !6

OP727.MLOAD.contd:                                ; preds = %OP724.JUMPDEST
  %mload.out2134 = load i256, ptr %mload.out.slot2133, align 16
  %sp2137 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %331
  %sp2146 = getelementptr i256, ptr %sp2125, i64 -1
  %swap.b2147 = load i256, ptr %sp2146, align 16
  store i256 %mload.out2134, ptr %sp2146, align 16
  %333 = and i256 %swap.b2147, 255
  store i256 %333, ptr %sp2129, align 16
  store i256 %mload.out2134, ptr %sp2137, align 16
  %334 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out2134, i256 %333, ptr %arg.ecx.addr)
  %.not48499 = icmp eq i8 %334, 0
  br i1 %.not48499, label %OP734.MLOAD, label %return, !prof !6

OP734.MLOAD:                                      ; preds = %OP727.MLOAD.contd
  %a2165 = load i256, ptr %sp2125, align 16
  %mload.out.slot2166 = alloca i256, align 16
  %335 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a2165, ptr %mload.out.slot2166, ptr %arg.ecx.addr)
  %.not48500 = icmp eq i8 %335, 0
  br i1 %.not48500, label %OP734.MLOAD.contd, label %return, !prof !6

OP734.MLOAD.contd:                                ; preds = %OP734.MLOAD
  %mload.out2167 = load i256, ptr %mload.out.slot2166, align 16
  %swap.b2173 = load i256, ptr %sp2146, align 16
  %336 = sub i256 %swap.b2173, %mload.out2167
  store i256 32, ptr %sp2129, align 16
  %337 = add i256 %336, 32
  store i256 %337, ptr %sp2146, align 16
  store i256 %mload.out2167, ptr %sp2125, align 16
  %338 = add i64 %len.addr.357, -1
  %339 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2146, i8 2)
  %.not48501 = icmp eq i8 %339, 0
  %spec.select36520 = select i1 %.not48501, i8 2, i8 %339, !prof !6
  br label %return

OP743.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP343.DUP1
  %len.addr.36 = phi i64 [ %len.addr.12, %OP343.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp2206 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.36
  store i256 1161, ptr %sp2206, align 16
  %sp2208 = getelementptr i256, ptr %sp2206, i64 1
  store i256 4, ptr %sp2208, align 16
  %340 = add i64 %len.addr.36, 3
  %sp2212 = getelementptr i256, ptr %sp2206, i64 2
  %contract.input.len.addr2214 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len2215 = load i64, ptr %contract.input.len.addr2214, align 8
  %341 = zext i64 %contract.input.len2215 to i256
  %sp2216 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %340
  %342 = add nsw i256 %341, -4
  store i256 %342, ptr %sp2212, align 16
  %sp2228 = getelementptr i256, ptr %sp2206, i64 4
  store i256 %342, ptr %sp2228, align 16
  %343 = icmp ugt i256 %342, 255
  %344 = zext i1 %343 to i256
  store i256 %344, ptr %sp2216, align 16
  br i1 %343, label %OP758.JUMPDEST, label %OP755.PUSH1

OP755.PUSH1:                                      ; preds = %OP743.JUMPDEST
  store i256 0, ptr %sp2216, align 16
  store i256 0, ptr %sp2228, align 16
  %345 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2216, i8 16)
  %.not48424 = icmp eq i8 %345, 0
  %spec.select36521 = select i1 %.not48424, i8 16, i8 %345, !prof !6
  br label %return

OP758.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert53998 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49280.pre = load i64, ptr %.phi.trans.insert53998, align 8
  br label %OP758.JUMPDEST

OP758.JUMPDEST:                                   ; preds = %OP758.JUMPDEST.loopexit, %OP743.JUMPDEST
  %arg.contract.addr.val49280 = phi i64 [ %contract.input.len2215, %OP743.JUMPDEST ], [ %arg.contract.addr.val49280.pre, %OP758.JUMPDEST.loopexit ]
  %len.addr.37 = phi i64 [ %340, %OP743.JUMPDEST ], [ %len.addr.357, %OP758.JUMPDEST.loopexit ]
  %346 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp2252 = getelementptr i256, ptr %346, i64 -2
  %dup22253 = load i256, ptr %sp2252, align 16
  %sp2258 = getelementptr i256, ptr %346, i64 -1
  %b2259 = load i256, ptr %sp2258, align 16
  %347 = add i256 %b2259, %dup22253
  store i256 %347, ptr %sp2252, align 16
  store i256 %dup22253, ptr %sp2258, align 16
  %348 = add i64 %len.addr.37, 2
  %sp2271 = getelementptr i256, ptr %346, i64 1
  %349 = add i256 %dup22253, 32
  store i256 %349, ptr %346, align 16
  store i256 %dup22253, ptr %sp2271, align 16
  %350 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49279 = load ptr, ptr %350, align 8
  %351 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup22253, ptr %arg.contract.addr.val49279, i64 %arg.contract.addr.val49280)
  store i256 %351, ptr %sp2271, align 16
  %sp2287 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %348
  %sp2291 = getelementptr i256, ptr %346, i64 3
  store i256 %351, ptr %sp2291, align 16
  %352 = icmp ult i256 %351, 4294967297
  %353 = zext i1 %352 to i256
  store i256 %353, ptr %sp2287, align 16
  br i1 %352, label %OP776.JUMPDEST, label %OP773.PUSH1

OP773.PUSH1:                                      ; preds = %OP758.JUMPDEST
  store i256 0, ptr %sp2287, align 16
  store i256 0, ptr %sp2291, align 16
  %354 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2287, i8 16)
  %.not48425 = icmp eq i8 %354, 0
  %spec.select36522 = select i1 %.not48425, i8 16, i8 %354, !prof !6
  br label %return

OP776.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP758.JUMPDEST
  %len.addr.38 = phi i64 [ %348, %OP758.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %355 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.38
  %sp2315 = getelementptr i256, ptr %355, i64 -3
  %dup32316 = load i256, ptr %sp2315, align 16
  %sp2321 = getelementptr i256, ptr %355, i64 -1
  %b2322 = load i256, ptr %sp2321, align 16
  %356 = add i256 %b2322, %dup32316
  store i256 %356, ptr %sp2321, align 16
  %sp2325 = getelementptr i256, ptr %355, i64 -4
  %dup42326 = load i256, ptr %sp2325, align 16
  %sp2329 = getelementptr i256, ptr %355, i64 1
  %sp2333 = getelementptr i256, ptr %355, i64 2
  store i256 %356, ptr %sp2333, align 16
  %357 = add i256 %356, 32
  store i256 %357, ptr %sp2329, align 16
  %358 = icmp ule i256 %357, %dup42326
  %359 = zext i1 %358 to i256
  store i256 %359, ptr %355, align 16
  br i1 %358, label %OP790.JUMPDEST, label %OP787.PUSH1

OP787.PUSH1:                                      ; preds = %OP776.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %355, i8 0, i64 64, i1 false)
  %360 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %355, i8 16)
  %.not48426 = icmp eq i8 %360, 0
  %spec.select36523 = select i1 %.not48426, i8 16, i8 %360, !prof !6
  br label %return

OP790.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54000 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp2363.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54000, i64 -1
  %dup12364.pre = load i256, ptr %sp2363.phi.trans.insert, align 16
  %sp2389.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54000, i64 -4
  %dup5.pre = load i256, ptr %sp2389.phi.trans.insert, align 16
  %.pre54259 = add i256 %dup12364.pre, 32
  br label %OP790.JUMPDEST

OP790.JUMPDEST:                                   ; preds = %OP790.JUMPDEST.loopexit, %OP776.JUMPDEST
  %.pre-phi54260 = phi i256 [ %.pre54259, %OP790.JUMPDEST.loopexit ], [ %357, %OP776.JUMPDEST ]
  %dup5 = phi i256 [ %dup5.pre, %OP790.JUMPDEST.loopexit ], [ %dup42326, %OP776.JUMPDEST ]
  %swap.b2374 = phi i256 [ %dup12364.pre, %OP790.JUMPDEST.loopexit ], [ %356, %OP776.JUMPDEST ]
  %len.addr.39 = phi i64 [ %len.addr.357, %OP790.JUMPDEST.loopexit ], [ %len.addr.38, %OP776.JUMPDEST ]
  %361 = add i64 %len.addr.39, 1
  %362 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.39
  %sp2363 = getelementptr i256, ptr %362, i64 -1
  store i256 %swap.b2374, ptr %362, align 16
  %363 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49277 = load ptr, ptr %363, align 8
  %364 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49278 = load i64, ptr %364, align 8
  %365 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b2374, ptr %arg.contract.addr.val49277, i64 %arg.contract.addr.val49278)
  store i256 %365, ptr %sp2363, align 16
  %sp2376 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %361
  %sp2386 = getelementptr i256, ptr %362, i64 -2
  %swap.b2387 = load i256, ptr %sp2386, align 16
  store i256 %.pre-phi54260, ptr %sp2386, align 16
  store i256 %swap.b2387, ptr %362, align 16
  %sp2392 = getelementptr i256, ptr %362, i64 2
  %sp2396 = getelementptr i256, ptr %362, i64 3
  %366 = add i256 %.pre-phi54260, %365
  %367 = icmp ugt i256 %366, %dup5
  store i256 %365, ptr %sp2396, align 16
  %368 = icmp ugt i256 %365, 4294967296
  %369 = zext i1 %368 to i256
  store i256 %369, ptr %sp2392, align 16
  %370 = or i1 %367, %368
  %371 = xor i1 %370, true
  %372 = zext i1 %371 to i256
  store i256 %372, ptr %sp2376, align 16
  br i1 %370, label %OP811.PUSH1, label %OP814.JUMPDEST

OP811.PUSH1:                                      ; preds = %OP790.JUMPDEST
  store i256 0, ptr %sp2376, align 16
  store i256 0, ptr %sp2392, align 16
  %373 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2376, i8 16)
  %.not48427 = icmp eq i8 %373, 0
  %spec.select36524 = select i1 %.not48427, i8 16, i8 %373, !prof !6
  br label %return

OP814.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP790.JUMPDEST
  %len.addr.40 = phi i64 [ %361, %OP790.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %374 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.40
  %sp2454 = getelementptr i256, ptr %374, i64 -1
  %swap.a2455 = load i256, ptr %sp2454, align 16
  %sp2456 = getelementptr i256, ptr %374, i64 -3
  %swap.b2457 = load i256, ptr %sp2456, align 16
  store i256 %swap.a2455, ptr %sp2456, align 16
  %sp2461 = getelementptr i256, ptr %374, i64 -2
  %swap.b2462 = load i256, ptr %sp2461, align 16
  store i256 %swap.b2457, ptr %sp2461, align 16
  store i256 %swap.b2462, ptr %sp2454, align 16
  store i256 %swap.b2462, ptr %374, align 16
  %375 = add i64 %len.addr.40, 2
  %sp2470 = getelementptr i256, ptr %374, i64 1
  %376 = add i64 %len.addr.40, 3
  %sp2472 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %375
  %377 = add i256 %swap.b2462, 31
  %sp2484 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %376
  store i256 %377, ptr %sp2484, align 16
  %378 = and i256 %377, -32
  %379 = add i256 %378, 32
  store i256 %379, ptr %sp2470, align 16
  store i256 64, ptr %sp2472, align 16
  %ecx.memory.addr.i49330 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49331 = load ptr, ptr %ecx.memory.addr.i49330, align 8
  %ecx.memory.len.addr.i49332 = getelementptr inbounds i8, ptr %ecx.memory.i49331, i64 16
  %ecx.memory.len.i49333 = load i64, ptr %ecx.memory.len.addr.i49332, align 8, !noalias !328
  %ecx.memory.last_checkpoint.addr.i49334 = getelementptr inbounds i8, ptr %ecx.memory.i49331, i64 48
  %ecx.memory.last_checkpoint.i49335 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49334, align 8, !noalias !328
  %380 = sub i64 %ecx.memory.len.i49333, %ecx.memory.last_checkpoint.i49335
  %381 = icmp ult i64 %380, 96
  br i1 %381, label %resize.i49343, label %OP829.MLOAD.contd, !prof !5

resize.i49343:                                    ; preds = %OP814.JUMPDEST
  %382 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !332
  %.not.i49344 = icmp eq i8 %382, 0
  br i1 %.not.i49344, label %resize.i49343.OP829.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49343.OP829.MLOAD.contd_crit_edge:        ; preds = %resize.i49343
  %swap.b2522.pre = load i256, ptr %sp2470, align 16
  %ecx.memory.i49347.pre = load ptr, ptr %ecx.memory.addr.i49330, align 8, !alias.scope !333
  br label %OP829.MLOAD.contd

OP829.MLOAD.contd:                                ; preds = %resize.i49343.OP829.MLOAD.contd_crit_edge, %OP814.JUMPDEST
  %ecx.memory.i49347 = phi ptr [ %ecx.memory.i49347.pre, %resize.i49343.OP829.MLOAD.contd_crit_edge ], [ %ecx.memory.i49331, %OP814.JUMPDEST ]
  %swap.b2522 = phi i256 [ %swap.b2522.pre, %resize.i49343.OP829.MLOAD.contd_crit_edge ], [ %379, %OP814.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i49337 = getelementptr inbounds i8, ptr %ecx.memory.i49331, i64 8
  %ecx.memory.buffer.ptr.shared.i49338 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49337, align 8, !noalias !328
  %ecx.memory.buffer.ptr.i49339 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49338, i64 %ecx.memory.last_checkpoint.i49335
  %slot.i49340 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49339, i64 64
  %slot.value.i49341 = load i256, ptr %slot.i49340, align 1, !noalias !328
  %383 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49341)
  store i256 %383, ptr %sp2470, align 16
  %384 = add i256 %swap.b2522, %383
  store i256 %384, ptr %sp2472, align 16
  store i256 64, ptr %sp2484, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !333)
  %ecx.memory.len.addr.i49348 = getelementptr inbounds i8, ptr %ecx.memory.i49347, i64 16
  %ecx.memory.len.i49349 = load i64, ptr %ecx.memory.len.addr.i49348, align 8, !noalias !333
  %ecx.memory.last_checkpoint.addr.i49350 = getelementptr inbounds i8, ptr %ecx.memory.i49347, i64 48
  %ecx.memory.last_checkpoint.i49351 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49350, align 8, !noalias !333
  %385 = sub i64 %ecx.memory.len.i49349, %ecx.memory.last_checkpoint.i49351
  %386 = icmp ult i64 %385, 96
  br i1 %386, label %resize.i49358, label %OP835.DUP1, !prof !5

resize.i49358:                                    ; preds = %OP829.MLOAD.contd
  %387 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i49359 = icmp eq i8 %387, 0
  br i1 %.not.i49359, label %OP835.DUP1, label %return, !prof !6

OP835.DUP1:                                       ; preds = %OP829.MLOAD.contd, %resize.i49358
  %ecx.memory.buffer.ptr.shared.addr.i49353 = getelementptr inbounds i8, ptr %ecx.memory.i49347, i64 8
  %ecx.memory.buffer.ptr.shared.i49354 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49353, align 8, !noalias !333
  %ecx.memory.buffer.ptr.i49355 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49354, i64 %ecx.memory.last_checkpoint.i49351
  %slot.i49356 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49355, i64 64
  %388 = tail call i256 @llvm.bswap.i256(i256 %384)
  store i256 %388, ptr %slot.i49356, align 1, !noalias !333
  %dup12542 = load i256, ptr %sp2470, align 16
  %swap.b2548 = load i256, ptr %sp2461, align 16
  store i256 %dup12542, ptr %sp2461, align 16
  %swap.b2553 = load i256, ptr %sp2454, align 16
  store i256 %swap.b2548, ptr %sp2454, align 16
  %swap.b2558 = load i256, ptr %374, align 16
  store i256 %swap.b2553, ptr %374, align 16
  store i256 %swap.b2558, ptr %sp2470, align 16
  store i256 %dup12542, ptr %sp2472, align 16
  store i256 %swap.b2558, ptr %sp2484, align 16
  %sp2571 = getelementptr i256, ptr %374, i64 4
  store i256 %dup12542, ptr %sp2571, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !336)
  %ecx.memory.i49362 = load ptr, ptr %ecx.memory.addr.i49330, align 8, !alias.scope !336
  %ecx.memory.len.addr.i49363 = getelementptr inbounds i8, ptr %ecx.memory.i49362, i64 16
  %ecx.memory.len.i49364 = load i64, ptr %ecx.memory.len.addr.i49363, align 8, !noalias !336
  %ecx.memory.last_checkpoint.addr.i49365 = getelementptr inbounds i8, ptr %ecx.memory.i49362, i64 48
  %ecx.memory.last_checkpoint.i49366 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49365, align 8, !noalias !336
  %389 = sub i64 %ecx.memory.len.i49364, %ecx.memory.last_checkpoint.i49366
  %390 = icmp ugt i256 %dup12542, 18446744073709551615
  %391 = trunc i256 %dup12542 to i64
  %392 = add i64 %391, 32
  %393 = icmp ugt i64 %391, -33
  %394 = or i1 %390, %393
  %395 = select i1 %394, i64 -1, i64 %392
  %396 = icmp ugt i64 %395, %389
  br i1 %396, label %resize.i49373, label %OP843.PUSH1, !prof !5

resize.i49373:                                    ; preds = %OP835.DUP1
  %397 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %395)
  %.not.i49374 = icmp eq i8 %397, 0
  br i1 %.not.i49374, label %OP843.PUSH1, label %return, !prof !6

OP843.PUSH1:                                      ; preds = %OP835.DUP1, %resize.i49373
  %ecx.memory.buffer.ptr.shared.addr.i49368 = getelementptr inbounds i8, ptr %ecx.memory.i49362, i64 8
  %ecx.memory.buffer.ptr.shared.i49369 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49368, align 8, !noalias !336
  %ecx.memory.buffer.ptr.i49370 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49369, i64 %ecx.memory.last_checkpoint.i49366
  %slot.i49371 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49370, i64 %391
  %398 = tail call i256 @llvm.bswap.i256(i256 %swap.b2558)
  store i256 %398, ptr %slot.i49371, align 1, !noalias !336
  %399 = add i64 %len.addr.40, 5
  %b2583 = load i256, ptr %sp2472, align 16
  %400 = add i256 %b2583, 32
  store i256 %400, ptr %sp2472, align 16
  %dup42587 = load i256, ptr %sp2454, align 16
  store i256 %dup42587, ptr %sp2484, align 16
  %dup42591 = load i256, ptr %374, align 16
  store i256 %dup42591, ptr %sp2571, align 16
  %sp2596 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %399
  store i256 %dup42591, ptr %sp2596, align 16
  %sp2600 = getelementptr i256, ptr %374, i64 6
  store i256 %dup42587, ptr %sp2600, align 16
  %sp2604 = getelementptr i256, ptr %374, i64 7
  store i256 %400, ptr %sp2604, align 16
  %401 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2596)
  %.not48431 = icmp eq i8 %401, 0
  br i1 %.not48431, label %OP851.PUSH1, label %return, !prof !6

OP851.PUSH1:                                      ; preds = %OP843.PUSH1
  %sp2602 = getelementptr i256, ptr %374, i64 2
  %swap.b2613 = load i256, ptr %sp2602, align 16
  store i256 %swap.b2613, ptr %sp2596, align 16
  %b2618 = load i256, ptr %sp2571, align 16
  %402 = add i256 %b2618, %swap.b2613
  %swap.b2629 = load i256, ptr %sp2484, align 16
  store i256 0, ptr %sp2484, align 16
  store i256 %swap.b2629, ptr %sp2472, align 16
  store i256 %402, ptr %sp2571, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !339)
  %ecx.memory.i49377 = load ptr, ptr %ecx.memory.addr.i49330, align 8, !alias.scope !339
  %ecx.memory.len.addr.i49378 = getelementptr inbounds i8, ptr %ecx.memory.i49377, i64 16
  %ecx.memory.len.i49379 = load i64, ptr %ecx.memory.len.addr.i49378, align 8, !noalias !339
  %ecx.memory.last_checkpoint.addr.i49380 = getelementptr inbounds i8, ptr %ecx.memory.i49377, i64 48
  %ecx.memory.last_checkpoint.i49381 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49380, align 8, !noalias !339
  %403 = sub i64 %ecx.memory.len.i49379, %ecx.memory.last_checkpoint.i49381
  %404 = icmp ugt i256 %402, 18446744073709551615
  %405 = trunc i256 %402 to i64
  %406 = add i64 %405, 32
  %407 = icmp ugt i64 %405, -33
  %408 = or i1 %404, %407
  %409 = select i1 %408, i64 -1, i64 %406
  %410 = icmp ugt i64 %409, %403
  br i1 %410, label %resize.i49388, label %OP858.POP, !prof !5

resize.i49388:                                    ; preds = %OP851.PUSH1
  %411 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %409)
  %.not.i49389 = icmp eq i8 %411, 0
  br i1 %.not.i49389, label %OP858.POP, label %return, !prof !6

OP858.POP:                                        ; preds = %OP851.PUSH1, %resize.i49388
  %ecx.memory.buffer.ptr.shared.addr.i49383 = getelementptr inbounds i8, ptr %ecx.memory.i49377, i64 8
  %ecx.memory.buffer.ptr.shared.i49384 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49383, align 8, !noalias !339
  %ecx.memory.buffer.ptr.i49385 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49384, i64 %ecx.memory.last_checkpoint.i49381
  %slot.i49386 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49385, i64 %405
  store i256 0, ptr %slot.i49386, align 1, !noalias !339
  %swap.a2643 = load i256, ptr %sp2470, align 16
  %swap.b2645 = load i256, ptr %sp2461, align 16
  %sp2649 = getelementptr i256, ptr %374, i64 -5
  %swap.b2650 = load i256, ptr %sp2649, align 16
  store i256 %swap.b2645, ptr %sp2649, align 16
  %sp2654 = getelementptr i256, ptr %374, i64 -4
  %swap.b2655 = load i256, ptr %sp2654, align 16
  store i256 %swap.b2650, ptr %sp2654, align 16
  %swap.b2660 = load i256, ptr %sp2456, align 16
  store i256 %swap.b2655, ptr %sp2456, align 16
  store i256 %swap.b2660, ptr %sp2470, align 16
  store i256 %swap.b2660, ptr %sp2484, align 16
  %412 = add i256 %swap.b2660, 32
  store i256 %412, ptr %sp2461, align 16
  store i256 %swap.a2643, ptr %sp2472, align 16
  %413 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49275 = load ptr, ptr %413, align 8
  %414 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49276 = load i64, ptr %414, align 8
  %415 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b2660, ptr %arg.contract.addr.val49275, i64 %arg.contract.addr.val49276)
  store i256 %415, ptr %sp2454, align 16
  store i256 %415, ptr %sp2470, align 16
  %416 = icmp ult i256 %415, 4294967297
  %417 = zext i1 %416 to i256
  store i256 %417, ptr %374, align 16
  br i1 %416, label %OP881.JUMPDEST, label %OP878.PUSH1

OP878.PUSH1:                                      ; preds = %OP858.POP
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %374, i8 0, i64 64, i1 false)
  %418 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %374, i8 16)
  %.not48433 = icmp eq i8 %418, 0
  %spec.select36525 = select i1 %.not48433, i8 16, i8 %418, !prof !6
  br label %return

OP881.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54005 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp2719.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54005, i64 -3
  %dup32720.pre = load i256, ptr %sp2719.phi.trans.insert, align 16
  %sp2725.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54005, i64 -1
  %b2726.pre = load i256, ptr %sp2725.phi.trans.insert, align 16
  %sp2729.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54005, i64 -4
  %dup42730.pre = load i256, ptr %sp2729.phi.trans.insert, align 16
  br label %OP881.JUMPDEST

OP881.JUMPDEST:                                   ; preds = %OP881.JUMPDEST.loopexit, %OP858.POP
  %dup42730 = phi i256 [ %swap.b2650, %OP858.POP ], [ %dup42730.pre, %OP881.JUMPDEST.loopexit ]
  %b2726 = phi i256 [ %415, %OP858.POP ], [ %b2726.pre, %OP881.JUMPDEST.loopexit ]
  %dup32720 = phi i256 [ %swap.b2655, %OP858.POP ], [ %dup32720.pre, %OP881.JUMPDEST.loopexit ]
  %len.addr.41 = phi i64 [ %len.addr.40, %OP858.POP ], [ %len.addr.357, %OP881.JUMPDEST.loopexit ]
  %419 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.41
  %sp2725 = getelementptr i256, ptr %419, i64 -1
  %420 = add i256 %b2726, %dup32720
  store i256 %420, ptr %sp2725, align 16
  %sp2733 = getelementptr i256, ptr %419, i64 1
  %sp2737 = getelementptr i256, ptr %419, i64 2
  store i256 %420, ptr %sp2737, align 16
  %421 = add i256 %420, 32
  store i256 %421, ptr %sp2733, align 16
  %422 = icmp ule i256 %421, %dup42730
  %423 = zext i1 %422 to i256
  store i256 %423, ptr %419, align 16
  br i1 %422, label %OP895.JUMPDEST, label %OP892.PUSH1

OP892.PUSH1:                                      ; preds = %OP881.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %419, i8 0, i64 64, i1 false)
  %424 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %419, i8 16)
  %.not48434 = icmp eq i8 %424, 0
  %spec.select36526 = select i1 %.not48434, i8 16, i8 %424, !prof !6
  br label %return

OP895.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54009 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp2767.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54009, i64 -1
  %dup12768.pre = load i256, ptr %sp2767.phi.trans.insert, align 16
  %sp2793.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54009, i64 -4
  %dup52794.pre = load i256, ptr %sp2793.phi.trans.insert, align 16
  %.pre54261 = add i256 %dup12768.pre, 32
  br label %OP895.JUMPDEST

OP895.JUMPDEST:                                   ; preds = %OP895.JUMPDEST.loopexit, %OP881.JUMPDEST
  %.pre-phi54262 = phi i256 [ %.pre54261, %OP895.JUMPDEST.loopexit ], [ %421, %OP881.JUMPDEST ]
  %dup52794 = phi i256 [ %dup52794.pre, %OP895.JUMPDEST.loopexit ], [ %dup42730, %OP881.JUMPDEST ]
  %swap.b2778 = phi i256 [ %dup12768.pre, %OP895.JUMPDEST.loopexit ], [ %420, %OP881.JUMPDEST ]
  %len.addr.42 = phi i64 [ %len.addr.357, %OP895.JUMPDEST.loopexit ], [ %len.addr.41, %OP881.JUMPDEST ]
  %425 = add i64 %len.addr.42, 1
  %426 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.42
  %sp2767 = getelementptr i256, ptr %426, i64 -1
  store i256 %swap.b2778, ptr %426, align 16
  %427 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49273 = load ptr, ptr %427, align 8
  %428 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49274 = load i64, ptr %428, align 8
  %429 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b2778, ptr %arg.contract.addr.val49273, i64 %arg.contract.addr.val49274)
  store i256 %429, ptr %sp2767, align 16
  %sp2780 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %425
  %sp2790 = getelementptr i256, ptr %426, i64 -2
  %swap.b2791 = load i256, ptr %sp2790, align 16
  store i256 %.pre-phi54262, ptr %sp2790, align 16
  store i256 %swap.b2791, ptr %426, align 16
  %sp2797 = getelementptr i256, ptr %426, i64 2
  %sp2801 = getelementptr i256, ptr %426, i64 3
  %430 = add i256 %.pre-phi54262, %429
  %431 = icmp ugt i256 %430, %dup52794
  store i256 %429, ptr %sp2801, align 16
  %432 = icmp ugt i256 %429, 4294967296
  %433 = zext i1 %432 to i256
  store i256 %433, ptr %sp2797, align 16
  %434 = or i1 %431, %432
  %435 = xor i1 %434, true
  %436 = zext i1 %435 to i256
  store i256 %436, ptr %sp2780, align 16
  br i1 %434, label %OP916.PUSH1, label %OP919.JUMPDEST

OP916.PUSH1:                                      ; preds = %OP895.JUMPDEST
  store i256 0, ptr %sp2780, align 16
  store i256 0, ptr %sp2797, align 16
  %437 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2780, i8 16)
  %.not48435 = icmp eq i8 %437, 0
  %spec.select36527 = select i1 %.not48435, i8 16, i8 %437, !prof !6
  br label %return

OP919.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP895.JUMPDEST
  %len.addr.43 = phi i64 [ %425, %OP895.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %438 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.43
  %sp2859 = getelementptr i256, ptr %438, i64 -1
  %swap.a2860 = load i256, ptr %sp2859, align 16
  %sp2861 = getelementptr i256, ptr %438, i64 -3
  %swap.b2862 = load i256, ptr %sp2861, align 16
  store i256 %swap.a2860, ptr %sp2861, align 16
  %sp2866 = getelementptr i256, ptr %438, i64 -2
  %swap.b2867 = load i256, ptr %sp2866, align 16
  store i256 %swap.b2862, ptr %sp2866, align 16
  store i256 %swap.b2867, ptr %sp2859, align 16
  store i256 %swap.b2867, ptr %438, align 16
  %439 = add i64 %len.addr.43, 2
  %sp2875 = getelementptr i256, ptr %438, i64 1
  %440 = add i64 %len.addr.43, 3
  %sp2877 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %439
  %441 = add i256 %swap.b2867, 31
  %sp2889 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %440
  store i256 %441, ptr %sp2889, align 16
  %442 = and i256 %441, -32
  %443 = add i256 %442, 32
  store i256 %443, ptr %sp2875, align 16
  store i256 64, ptr %sp2877, align 16
  %ecx.memory.addr.i49391 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49392 = load ptr, ptr %ecx.memory.addr.i49391, align 8
  %ecx.memory.len.addr.i49393 = getelementptr inbounds i8, ptr %ecx.memory.i49392, i64 16
  %ecx.memory.len.i49394 = load i64, ptr %ecx.memory.len.addr.i49393, align 8, !noalias !342
  %ecx.memory.last_checkpoint.addr.i49395 = getelementptr inbounds i8, ptr %ecx.memory.i49392, i64 48
  %ecx.memory.last_checkpoint.i49396 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49395, align 8, !noalias !342
  %444 = sub i64 %ecx.memory.len.i49394, %ecx.memory.last_checkpoint.i49396
  %445 = icmp ult i64 %444, 96
  br i1 %445, label %resize.i49404, label %OP934.MLOAD.contd, !prof !5

resize.i49404:                                    ; preds = %OP919.JUMPDEST
  %446 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !346
  %.not.i49405 = icmp eq i8 %446, 0
  br i1 %.not.i49405, label %resize.i49404.OP934.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49404.OP934.MLOAD.contd_crit_edge:        ; preds = %resize.i49404
  %swap.b2927.pre = load i256, ptr %sp2875, align 16
  %ecx.memory.i49408.pre = load ptr, ptr %ecx.memory.addr.i49391, align 8, !alias.scope !347
  br label %OP934.MLOAD.contd

OP934.MLOAD.contd:                                ; preds = %resize.i49404.OP934.MLOAD.contd_crit_edge, %OP919.JUMPDEST
  %ecx.memory.i49408 = phi ptr [ %ecx.memory.i49408.pre, %resize.i49404.OP934.MLOAD.contd_crit_edge ], [ %ecx.memory.i49392, %OP919.JUMPDEST ]
  %swap.b2927 = phi i256 [ %swap.b2927.pre, %resize.i49404.OP934.MLOAD.contd_crit_edge ], [ %443, %OP919.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i49398 = getelementptr inbounds i8, ptr %ecx.memory.i49392, i64 8
  %ecx.memory.buffer.ptr.shared.i49399 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49398, align 8, !noalias !342
  %ecx.memory.buffer.ptr.i49400 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49399, i64 %ecx.memory.last_checkpoint.i49396
  %slot.i49401 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49400, i64 64
  %slot.value.i49402 = load i256, ptr %slot.i49401, align 1, !noalias !342
  %447 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49402)
  store i256 %447, ptr %sp2875, align 16
  %448 = add i256 %swap.b2927, %447
  store i256 %448, ptr %sp2877, align 16
  store i256 64, ptr %sp2889, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !347)
  %ecx.memory.len.addr.i49409 = getelementptr inbounds i8, ptr %ecx.memory.i49408, i64 16
  %ecx.memory.len.i49410 = load i64, ptr %ecx.memory.len.addr.i49409, align 8, !noalias !347
  %ecx.memory.last_checkpoint.addr.i49411 = getelementptr inbounds i8, ptr %ecx.memory.i49408, i64 48
  %ecx.memory.last_checkpoint.i49412 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49411, align 8, !noalias !347
  %449 = sub i64 %ecx.memory.len.i49410, %ecx.memory.last_checkpoint.i49412
  %450 = icmp ult i64 %449, 96
  br i1 %450, label %resize.i49419, label %OP940.DUP1, !prof !5

resize.i49419:                                    ; preds = %OP934.MLOAD.contd
  %451 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i49420 = icmp eq i8 %451, 0
  br i1 %.not.i49420, label %OP940.DUP1, label %return, !prof !6

OP940.DUP1:                                       ; preds = %OP934.MLOAD.contd, %resize.i49419
  %ecx.memory.buffer.ptr.shared.addr.i49414 = getelementptr inbounds i8, ptr %ecx.memory.i49408, i64 8
  %ecx.memory.buffer.ptr.shared.i49415 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49414, align 8, !noalias !347
  %ecx.memory.buffer.ptr.i49416 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49415, i64 %ecx.memory.last_checkpoint.i49412
  %slot.i49417 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49416, i64 64
  %452 = tail call i256 @llvm.bswap.i256(i256 %448)
  store i256 %452, ptr %slot.i49417, align 1, !noalias !347
  %dup12947 = load i256, ptr %sp2875, align 16
  %swap.b2953 = load i256, ptr %sp2866, align 16
  store i256 %dup12947, ptr %sp2866, align 16
  %swap.b2958 = load i256, ptr %sp2859, align 16
  store i256 %swap.b2953, ptr %sp2859, align 16
  %swap.b2963 = load i256, ptr %438, align 16
  store i256 %swap.b2958, ptr %438, align 16
  store i256 %swap.b2963, ptr %sp2875, align 16
  store i256 %dup12947, ptr %sp2877, align 16
  store i256 %swap.b2963, ptr %sp2889, align 16
  %sp2976 = getelementptr i256, ptr %438, i64 4
  store i256 %dup12947, ptr %sp2976, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !350)
  %ecx.memory.i49423 = load ptr, ptr %ecx.memory.addr.i49391, align 8, !alias.scope !350
  %ecx.memory.len.addr.i49424 = getelementptr inbounds i8, ptr %ecx.memory.i49423, i64 16
  %ecx.memory.len.i49425 = load i64, ptr %ecx.memory.len.addr.i49424, align 8, !noalias !350
  %ecx.memory.last_checkpoint.addr.i49426 = getelementptr inbounds i8, ptr %ecx.memory.i49423, i64 48
  %ecx.memory.last_checkpoint.i49427 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49426, align 8, !noalias !350
  %453 = sub i64 %ecx.memory.len.i49425, %ecx.memory.last_checkpoint.i49427
  %454 = icmp ugt i256 %dup12947, 18446744073709551615
  %455 = trunc i256 %dup12947 to i64
  %456 = add i64 %455, 32
  %457 = icmp ugt i64 %455, -33
  %458 = or i1 %454, %457
  %459 = select i1 %458, i64 -1, i64 %456
  %460 = icmp ugt i64 %459, %453
  br i1 %460, label %resize.i49434, label %OP948.PUSH1, !prof !5

resize.i49434:                                    ; preds = %OP940.DUP1
  %461 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %459)
  %.not.i49435 = icmp eq i8 %461, 0
  br i1 %.not.i49435, label %OP948.PUSH1, label %return, !prof !6

OP948.PUSH1:                                      ; preds = %OP940.DUP1, %resize.i49434
  %ecx.memory.buffer.ptr.shared.addr.i49429 = getelementptr inbounds i8, ptr %ecx.memory.i49423, i64 8
  %ecx.memory.buffer.ptr.shared.i49430 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49429, align 8, !noalias !350
  %ecx.memory.buffer.ptr.i49431 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49430, i64 %ecx.memory.last_checkpoint.i49427
  %slot.i49432 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49431, i64 %455
  %462 = tail call i256 @llvm.bswap.i256(i256 %swap.b2963)
  store i256 %462, ptr %slot.i49432, align 1, !noalias !350
  %463 = add i64 %len.addr.43, 5
  %b2988 = load i256, ptr %sp2877, align 16
  %464 = add i256 %b2988, 32
  store i256 %464, ptr %sp2877, align 16
  %dup42992 = load i256, ptr %sp2859, align 16
  store i256 %dup42992, ptr %sp2889, align 16
  %dup42996 = load i256, ptr %438, align 16
  store i256 %dup42996, ptr %sp2976, align 16
  %sp3001 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %463
  store i256 %dup42996, ptr %sp3001, align 16
  %sp3005 = getelementptr i256, ptr %438, i64 6
  store i256 %dup42992, ptr %sp3005, align 16
  %sp3009 = getelementptr i256, ptr %438, i64 7
  store i256 %464, ptr %sp3009, align 16
  %465 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3001)
  %.not48439 = icmp eq i8 %465, 0
  br i1 %.not48439, label %OP956.PUSH1, label %return, !prof !6

OP956.PUSH1:                                      ; preds = %OP948.PUSH1
  %sp3007 = getelementptr i256, ptr %438, i64 2
  %swap.b3018 = load i256, ptr %sp3007, align 16
  store i256 %swap.b3018, ptr %sp3001, align 16
  %b3023 = load i256, ptr %sp2976, align 16
  %466 = add i256 %b3023, %swap.b3018
  %swap.b3034 = load i256, ptr %sp2889, align 16
  store i256 0, ptr %sp2889, align 16
  store i256 %swap.b3034, ptr %sp2877, align 16
  store i256 %466, ptr %sp2976, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !353)
  %ecx.memory.i49438 = load ptr, ptr %ecx.memory.addr.i49391, align 8, !alias.scope !353
  %ecx.memory.len.addr.i49439 = getelementptr inbounds i8, ptr %ecx.memory.i49438, i64 16
  %ecx.memory.len.i49440 = load i64, ptr %ecx.memory.len.addr.i49439, align 8, !noalias !353
  %ecx.memory.last_checkpoint.addr.i49441 = getelementptr inbounds i8, ptr %ecx.memory.i49438, i64 48
  %ecx.memory.last_checkpoint.i49442 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49441, align 8, !noalias !353
  %467 = sub i64 %ecx.memory.len.i49440, %ecx.memory.last_checkpoint.i49442
  %468 = icmp ugt i256 %466, 18446744073709551615
  %469 = trunc i256 %466 to i64
  %470 = add i64 %469, 32
  %471 = icmp ugt i64 %469, -33
  %472 = or i1 %468, %471
  %473 = select i1 %472, i64 -1, i64 %470
  %474 = icmp ugt i64 %473, %467
  br i1 %474, label %resize.i49449, label %OP963.POP, !prof !5

resize.i49449:                                    ; preds = %OP956.PUSH1
  %475 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %473)
  %.not.i49450 = icmp eq i8 %475, 0
  br i1 %.not.i49450, label %OP963.POP, label %return, !prof !6

OP963.POP:                                        ; preds = %OP956.PUSH1, %resize.i49449
  %ecx.memory.buffer.ptr.shared.addr.i49444 = getelementptr inbounds i8, ptr %ecx.memory.i49438, i64 8
  %ecx.memory.buffer.ptr.shared.i49445 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49444, align 8, !noalias !353
  %ecx.memory.buffer.ptr.i49446 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49445, i64 %ecx.memory.last_checkpoint.i49442
  %slot.i49447 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49446, i64 %469
  store i256 0, ptr %slot.i49447, align 1, !noalias !353
  %swap.a3048 = load i256, ptr %sp2875, align 16
  %swap.b3050 = load i256, ptr %sp2866, align 16
  %sp3054 = getelementptr i256, ptr %438, i64 -5
  %swap.b3055 = load i256, ptr %sp3054, align 16
  store i256 %swap.b3050, ptr %sp3054, align 16
  %sp3059 = getelementptr i256, ptr %438, i64 -4
  %swap.b3060 = load i256, ptr %sp3059, align 16
  store i256 %swap.b3055, ptr %sp3059, align 16
  %swap.b3065 = load i256, ptr %sp2861, align 16
  store i256 %swap.b3060, ptr %sp2861, align 16
  store i256 %swap.b3065, ptr %sp2875, align 16
  store i256 %swap.b3065, ptr %sp2889, align 16
  %476 = add i256 %swap.b3065, 32
  store i256 %476, ptr %sp2866, align 16
  store i256 %swap.a3048, ptr %sp2877, align 16
  %477 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49271 = load ptr, ptr %477, align 8
  %478 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49272 = load i64, ptr %478, align 8
  %479 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b3065, ptr %arg.contract.addr.val49271, i64 %arg.contract.addr.val49272)
  store i256 %479, ptr %sp2859, align 16
  store i256 %479, ptr %sp2875, align 16
  %480 = icmp ult i256 %479, 4294967297
  %481 = zext i1 %480 to i256
  store i256 %481, ptr %438, align 16
  br i1 %480, label %OP986.JUMPDEST, label %OP983.PUSH1

OP983.PUSH1:                                      ; preds = %OP963.POP
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %438, i8 0, i64 64, i1 false)
  %482 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %438, i8 16)
  %.not48441 = icmp eq i8 %482, 0
  %spec.select36528 = select i1 %.not48441, i8 16, i8 %482, !prof !6
  br label %return

OP986.JUMPDEST.loopexit:                          ; preds = %dynamic_jump_table
  %.phi.trans.insert54014 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp3124.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54014, i64 -3
  %dup33125.pre = load i256, ptr %sp3124.phi.trans.insert, align 16
  %sp3130.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54014, i64 -1
  %b3131.pre = load i256, ptr %sp3130.phi.trans.insert, align 16
  %sp3134.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54014, i64 -4
  %dup43135.pre = load i256, ptr %sp3134.phi.trans.insert, align 16
  br label %OP986.JUMPDEST

OP986.JUMPDEST:                                   ; preds = %OP986.JUMPDEST.loopexit, %OP963.POP
  %dup43135 = phi i256 [ %swap.b3055, %OP963.POP ], [ %dup43135.pre, %OP986.JUMPDEST.loopexit ]
  %b3131 = phi i256 [ %479, %OP963.POP ], [ %b3131.pre, %OP986.JUMPDEST.loopexit ]
  %dup33125 = phi i256 [ %swap.b3060, %OP963.POP ], [ %dup33125.pre, %OP986.JUMPDEST.loopexit ]
  %len.addr.44 = phi i64 [ %len.addr.43, %OP963.POP ], [ %len.addr.357, %OP986.JUMPDEST.loopexit ]
  %483 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.44
  %sp3130 = getelementptr i256, ptr %483, i64 -1
  %484 = add i256 %b3131, %dup33125
  store i256 %484, ptr %sp3130, align 16
  %sp3138 = getelementptr i256, ptr %483, i64 1
  %sp3142 = getelementptr i256, ptr %483, i64 2
  store i256 %484, ptr %sp3142, align 16
  %485 = add i256 %484, 32
  store i256 %485, ptr %sp3138, align 16
  %486 = icmp ule i256 %485, %dup43135
  %487 = zext i1 %486 to i256
  store i256 %487, ptr %483, align 16
  br i1 %486, label %OP1000.JUMPDEST, label %OP997.PUSH1

OP997.PUSH1:                                      ; preds = %OP986.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %483, i8 0, i64 64, i1 false)
  %488 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %483, i8 16)
  %.not48442 = icmp eq i8 %488, 0
  %spec.select36529 = select i1 %.not48442, i8 16, i8 %488, !prof !6
  br label %return

OP1000.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54018 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp3172.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54018, i64 -1
  %dup13173.pre = load i256, ptr %sp3172.phi.trans.insert, align 16
  %sp3198.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54018, i64 -4
  %dup53199.pre = load i256, ptr %sp3198.phi.trans.insert, align 16
  %.pre54263 = add i256 %dup13173.pre, 32
  br label %OP1000.JUMPDEST

OP1000.JUMPDEST:                                  ; preds = %OP1000.JUMPDEST.loopexit, %OP986.JUMPDEST
  %.pre-phi54264 = phi i256 [ %.pre54263, %OP1000.JUMPDEST.loopexit ], [ %485, %OP986.JUMPDEST ]
  %dup53199 = phi i256 [ %dup53199.pre, %OP1000.JUMPDEST.loopexit ], [ %dup43135, %OP986.JUMPDEST ]
  %swap.b3183 = phi i256 [ %dup13173.pre, %OP1000.JUMPDEST.loopexit ], [ %484, %OP986.JUMPDEST ]
  %len.addr.45 = phi i64 [ %len.addr.357, %OP1000.JUMPDEST.loopexit ], [ %len.addr.44, %OP986.JUMPDEST ]
  %489 = add i64 %len.addr.45, 1
  %490 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.45
  %sp3172 = getelementptr i256, ptr %490, i64 -1
  store i256 %swap.b3183, ptr %490, align 16
  %491 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49269 = load ptr, ptr %491, align 8
  %492 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49270 = load i64, ptr %492, align 8
  %493 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b3183, ptr %arg.contract.addr.val49269, i64 %arg.contract.addr.val49270)
  store i256 %493, ptr %sp3172, align 16
  %sp3185 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %489
  %sp3195 = getelementptr i256, ptr %490, i64 -2
  %swap.b3196 = load i256, ptr %sp3195, align 16
  store i256 %.pre-phi54264, ptr %sp3195, align 16
  store i256 %swap.b3196, ptr %490, align 16
  %sp3202 = getelementptr i256, ptr %490, i64 2
  %sp3206 = getelementptr i256, ptr %490, i64 3
  %494 = add i256 %.pre-phi54264, %493
  %495 = icmp ugt i256 %494, %dup53199
  store i256 %493, ptr %sp3206, align 16
  %496 = icmp ugt i256 %493, 4294967296
  %497 = zext i1 %496 to i256
  store i256 %497, ptr %sp3202, align 16
  %498 = or i1 %495, %496
  %499 = xor i1 %498, true
  %500 = zext i1 %499 to i256
  store i256 %500, ptr %sp3185, align 16
  br i1 %498, label %OP1021.PUSH1, label %OP1024.JUMPDEST

OP1021.PUSH1:                                     ; preds = %OP1000.JUMPDEST
  store i256 0, ptr %sp3185, align 16
  store i256 0, ptr %sp3202, align 16
  %501 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3185, i8 16)
  %.not48443 = icmp eq i8 %501, 0
  %spec.select36530 = select i1 %.not48443, i8 16, i8 %501, !prof !6
  br label %return

OP1024.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1000.JUMPDEST
  %len.addr.46 = phi i64 [ %489, %OP1000.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %502 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.46
  %sp3264 = getelementptr i256, ptr %502, i64 -1
  %swap.a3265 = load i256, ptr %sp3264, align 16
  %sp3266 = getelementptr i256, ptr %502, i64 -3
  %swap.b3267 = load i256, ptr %sp3266, align 16
  store i256 %swap.a3265, ptr %sp3266, align 16
  %sp3271 = getelementptr i256, ptr %502, i64 -2
  %swap.b3272 = load i256, ptr %sp3271, align 16
  store i256 %swap.b3267, ptr %sp3271, align 16
  store i256 %swap.b3272, ptr %sp3264, align 16
  %503 = add i64 %len.addr.46, 1
  store i256 %swap.b3272, ptr %502, align 16
  %504 = add i64 %len.addr.46, 2
  %sp3280 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %503
  %505 = add i64 %len.addr.46, 3
  %sp3282 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %504
  %506 = add i256 %swap.b3272, 31
  %sp3294 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %505
  store i256 %506, ptr %sp3294, align 16
  %507 = and i256 %506, -32
  %508 = add i256 %507, 32
  store i256 %508, ptr %sp3280, align 16
  store i256 64, ptr %sp3282, align 16
  %ecx.memory.addr.i49452 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49453 = load ptr, ptr %ecx.memory.addr.i49452, align 8
  %ecx.memory.len.addr.i49454 = getelementptr inbounds i8, ptr %ecx.memory.i49453, i64 16
  %ecx.memory.len.i49455 = load i64, ptr %ecx.memory.len.addr.i49454, align 8, !noalias !356
  %ecx.memory.last_checkpoint.addr.i49456 = getelementptr inbounds i8, ptr %ecx.memory.i49453, i64 48
  %ecx.memory.last_checkpoint.i49457 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49456, align 8, !noalias !356
  %509 = sub i64 %ecx.memory.len.i49455, %ecx.memory.last_checkpoint.i49457
  %510 = icmp ult i64 %509, 96
  br i1 %510, label %resize.i49465, label %OP1039.MLOAD.contd, !prof !5

resize.i49465:                                    ; preds = %OP1024.JUMPDEST
  %511 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !360
  %.not.i49466 = icmp eq i8 %511, 0
  br i1 %.not.i49466, label %resize.i49465.OP1039.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49465.OP1039.MLOAD.contd_crit_edge:       ; preds = %resize.i49465
  %swap.b3332.pre = load i256, ptr %sp3280, align 16
  %ecx.memory.i49469.pre = load ptr, ptr %ecx.memory.addr.i49452, align 8, !alias.scope !361
  br label %OP1039.MLOAD.contd

OP1039.MLOAD.contd:                               ; preds = %resize.i49465.OP1039.MLOAD.contd_crit_edge, %OP1024.JUMPDEST
  %ecx.memory.i49469 = phi ptr [ %ecx.memory.i49469.pre, %resize.i49465.OP1039.MLOAD.contd_crit_edge ], [ %ecx.memory.i49453, %OP1024.JUMPDEST ]
  %swap.b3332 = phi i256 [ %swap.b3332.pre, %resize.i49465.OP1039.MLOAD.contd_crit_edge ], [ %508, %OP1024.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i49459 = getelementptr inbounds i8, ptr %ecx.memory.i49453, i64 8
  %ecx.memory.buffer.ptr.shared.i49460 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49459, align 8, !noalias !356
  %ecx.memory.buffer.ptr.i49461 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49460, i64 %ecx.memory.last_checkpoint.i49457
  %slot.i49462 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49461, i64 64
  %slot.value.i49463 = load i256, ptr %slot.i49462, align 1, !noalias !356
  %512 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49463)
  store i256 %512, ptr %sp3280, align 16
  %513 = add i256 %swap.b3332, %512
  store i256 %513, ptr %sp3282, align 16
  store i256 64, ptr %sp3294, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !361)
  %ecx.memory.len.addr.i49470 = getelementptr inbounds i8, ptr %ecx.memory.i49469, i64 16
  %ecx.memory.len.i49471 = load i64, ptr %ecx.memory.len.addr.i49470, align 8, !noalias !361
  %ecx.memory.last_checkpoint.addr.i49472 = getelementptr inbounds i8, ptr %ecx.memory.i49469, i64 48
  %ecx.memory.last_checkpoint.i49473 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49472, align 8, !noalias !361
  %514 = sub i64 %ecx.memory.len.i49471, %ecx.memory.last_checkpoint.i49473
  %515 = icmp ult i64 %514, 96
  br i1 %515, label %resize.i49480, label %OP1045.DUP1, !prof !5

resize.i49480:                                    ; preds = %OP1039.MLOAD.contd
  %516 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i49481 = icmp eq i8 %516, 0
  br i1 %.not.i49481, label %OP1045.DUP1, label %return, !prof !6

OP1045.DUP1:                                      ; preds = %OP1039.MLOAD.contd, %resize.i49480
  %ecx.memory.buffer.ptr.shared.addr.i49475 = getelementptr inbounds i8, ptr %ecx.memory.i49469, i64 8
  %ecx.memory.buffer.ptr.shared.i49476 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49475, align 8, !noalias !361
  %ecx.memory.buffer.ptr.i49477 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49476, i64 %ecx.memory.last_checkpoint.i49473
  %slot.i49478 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49477, i64 64
  %517 = tail call i256 @llvm.bswap.i256(i256 %513)
  store i256 %517, ptr %slot.i49478, align 1, !noalias !361
  %dup13352 = load i256, ptr %sp3280, align 16
  %swap.b3358 = load i256, ptr %sp3271, align 16
  store i256 %dup13352, ptr %sp3271, align 16
  %swap.b3363 = load i256, ptr %sp3264, align 16
  store i256 %swap.b3358, ptr %sp3264, align 16
  %swap.b3368 = load i256, ptr %502, align 16
  store i256 %swap.b3363, ptr %502, align 16
  store i256 %swap.b3368, ptr %sp3280, align 16
  store i256 %dup13352, ptr %sp3282, align 16
  store i256 %swap.b3368, ptr %sp3294, align 16
  %sp3381 = getelementptr i256, ptr %502, i64 4
  store i256 %dup13352, ptr %sp3381, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !364)
  %ecx.memory.i49484 = load ptr, ptr %ecx.memory.addr.i49452, align 8, !alias.scope !364
  %ecx.memory.len.addr.i49485 = getelementptr inbounds i8, ptr %ecx.memory.i49484, i64 16
  %ecx.memory.len.i49486 = load i64, ptr %ecx.memory.len.addr.i49485, align 8, !noalias !364
  %ecx.memory.last_checkpoint.addr.i49487 = getelementptr inbounds i8, ptr %ecx.memory.i49484, i64 48
  %ecx.memory.last_checkpoint.i49488 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49487, align 8, !noalias !364
  %518 = sub i64 %ecx.memory.len.i49486, %ecx.memory.last_checkpoint.i49488
  %519 = icmp ugt i256 %dup13352, 18446744073709551615
  %520 = trunc i256 %dup13352 to i64
  %521 = add i64 %520, 32
  %522 = icmp ugt i64 %520, -33
  %523 = or i1 %519, %522
  %524 = select i1 %523, i64 -1, i64 %521
  %525 = icmp ugt i64 %524, %518
  br i1 %525, label %resize.i49495, label %OP1053.PUSH1, !prof !5

resize.i49495:                                    ; preds = %OP1045.DUP1
  %526 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %524)
  %.not.i49496 = icmp eq i8 %526, 0
  br i1 %.not.i49496, label %OP1053.PUSH1, label %return, !prof !6

OP1053.PUSH1:                                     ; preds = %OP1045.DUP1, %resize.i49495
  %ecx.memory.buffer.ptr.shared.addr.i49490 = getelementptr inbounds i8, ptr %ecx.memory.i49484, i64 8
  %ecx.memory.buffer.ptr.shared.i49491 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49490, align 8, !noalias !364
  %ecx.memory.buffer.ptr.i49492 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49491, i64 %ecx.memory.last_checkpoint.i49488
  %slot.i49493 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49492, i64 %520
  %527 = tail call i256 @llvm.bswap.i256(i256 %swap.b3368)
  store i256 %527, ptr %slot.i49493, align 1, !noalias !364
  %528 = add i64 %len.addr.46, 5
  %b3393 = load i256, ptr %sp3282, align 16
  %529 = add i256 %b3393, 32
  store i256 %529, ptr %sp3282, align 16
  %dup43397 = load i256, ptr %sp3264, align 16
  store i256 %dup43397, ptr %sp3294, align 16
  %dup43401 = load i256, ptr %502, align 16
  store i256 %dup43401, ptr %sp3381, align 16
  %sp3406 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %528
  store i256 %dup43401, ptr %sp3406, align 16
  %sp3410 = getelementptr i256, ptr %502, i64 6
  store i256 %dup43397, ptr %sp3410, align 16
  %sp3414 = getelementptr i256, ptr %502, i64 7
  store i256 %529, ptr %sp3414, align 16
  %530 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3406)
  %.not48447 = icmp eq i8 %530, 0
  br i1 %.not48447, label %OP1061.PUSH1, label %return, !prof !6

OP1061.PUSH1:                                     ; preds = %OP1053.PUSH1
  %sp3412 = getelementptr i256, ptr %502, i64 2
  %swap.b3423 = load i256, ptr %sp3412, align 16
  store i256 %swap.b3423, ptr %sp3406, align 16
  %b3428 = load i256, ptr %sp3381, align 16
  %531 = add i256 %b3428, %swap.b3423
  %swap.b3439 = load i256, ptr %sp3294, align 16
  store i256 0, ptr %sp3294, align 16
  store i256 %swap.b3439, ptr %sp3282, align 16
  store i256 %531, ptr %sp3381, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !367)
  %ecx.memory.i49499 = load ptr, ptr %ecx.memory.addr.i49452, align 8, !alias.scope !367
  %ecx.memory.len.addr.i49500 = getelementptr inbounds i8, ptr %ecx.memory.i49499, i64 16
  %ecx.memory.len.i49501 = load i64, ptr %ecx.memory.len.addr.i49500, align 8, !noalias !367
  %ecx.memory.last_checkpoint.addr.i49502 = getelementptr inbounds i8, ptr %ecx.memory.i49499, i64 48
  %ecx.memory.last_checkpoint.i49503 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49502, align 8, !noalias !367
  %532 = sub i64 %ecx.memory.len.i49501, %ecx.memory.last_checkpoint.i49503
  %533 = icmp ugt i256 %531, 18446744073709551615
  %534 = trunc i256 %531 to i64
  %535 = add i64 %534, 32
  %536 = icmp ugt i64 %534, -33
  %537 = or i1 %533, %536
  %538 = select i1 %537, i64 -1, i64 %535
  %539 = icmp ugt i64 %538, %532
  br i1 %539, label %resize.i49510, label %OP1068.POP, !prof !5

resize.i49510:                                    ; preds = %OP1061.PUSH1
  %540 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %538)
  %.not.i49511 = icmp eq i8 %540, 0
  br i1 %.not.i49511, label %OP1068.POP, label %return, !prof !6

OP1068.POP:                                       ; preds = %OP1061.PUSH1, %resize.i49510
  %ecx.memory.buffer.ptr.shared.addr.i49505 = getelementptr inbounds i8, ptr %ecx.memory.i49499, i64 8
  %ecx.memory.buffer.ptr.shared.i49506 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49505, align 8, !noalias !367
  %ecx.memory.buffer.ptr.i49507 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49506, i64 %ecx.memory.last_checkpoint.i49503
  %slot.i49508 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49507, i64 %534
  store i256 0, ptr %slot.i49508, align 1, !noalias !367
  %swap.a3453 = load i256, ptr %sp3280, align 16
  %swap.b3455 = load i256, ptr %sp3271, align 16
  store i256 %swap.a3453, ptr %sp3271, align 16
  %sp3459 = getelementptr i256, ptr %502, i64 -5
  %swap.b3460 = load i256, ptr %sp3459, align 16
  store i256 %swap.b3455, ptr %sp3459, align 16
  store i256 %swap.b3460, ptr %sp3280, align 16
  %dup23466 = load i256, ptr %sp3266, align 16
  store i256 %dup23466, ptr %sp3264, align 16
  %541 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49267 = load ptr, ptr %541, align 8
  %542 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49268 = load i64, ptr %542, align 8
  %543 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup23466, ptr %arg.contract.addr.val49267, i64 %arg.contract.addr.val49268)
  store i256 255, ptr %502, align 16
  %544 = and i256 %543, 255
  %sp3483 = getelementptr i256, ptr %502, i64 -4
  store i256 %544, ptr %sp3483, align 16
  store i256 %dup23466, ptr %sp3264, align 16
  %545 = add i256 %dup23466, 32
  store i256 %545, ptr %sp3271, align 16
  %546 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %545, ptr %arg.contract.addr.val49267, i64 %arg.contract.addr.val49268)
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp3271, align 16
  %547 = and i256 %546, 1461501637330902918203684832716283019655932542975
  store i256 %547, ptr %sp3266, align 16
  store i256 %dup23466, ptr %sp3264, align 16
  store i256 %dup23466, ptr %sp3280, align 16
  %548 = add i256 %dup23466, 64
  store i256 %548, ptr %502, align 16
  %549 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %548, ptr %arg.contract.addr.val49267, i64 %arg.contract.addr.val49268)
  %550 = and i256 %549, 1461501637330902918203684832716283019655932542975
  store i256 %550, ptr %sp3271, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %502, align 16
  store i256 %dup23466, ptr %sp3282, align 16
  %551 = add i256 %dup23466, 96
  store i256 %551, ptr %sp3280, align 16
  %552 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %551, ptr %arg.contract.addr.val49267, i64 %arg.contract.addr.val49268)
  %553 = and i256 %552, 1461501637330902918203684832716283019655932542975
  store i256 %553, ptr %sp3264, align 16
  store i256 128, ptr %sp3282, align 16
  %554 = add i256 %dup23466, 128
  store i256 %554, ptr %sp3280, align 16
  %555 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %554, ptr %arg.contract.addr.val49267, i64 %arg.contract.addr.val49268)
  store i256 %555, ptr %sp3280, align 16
  %556 = and i256 %555, 1461501637330902918203684832716283019655932542975
  store i256 %556, ptr %502, align 16
  br label %OP3570.JUMPDEST

OP1110.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP348.DUP1
  %len.addr.47 = phi i64 [ %len.addr.12, %OP348.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %557 = add i64 %len.addr.47, 1
  %sp3608 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.47
  store i256 1921, ptr %sp3608, align 16
  br label %OP3916.JUMPDEST

OP1114.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %558 = add i64 %len.addr.357, 1
  %sp3612 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp3612, align 16
  %559 = add i64 %len.addr.357, 2
  %sp3616 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %558
  store i256 64, ptr %sp3616, align 16
  %mload.out.slot3620 = alloca i256, align 16
  %560 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot3620, ptr %arg.ecx.addr)
  %.not48419 = icmp eq i8 %560, 0
  br i1 %.not48419, label %OP1117.MLOAD.contd, label %return, !prof !6

OP1117.MLOAD.contd:                               ; preds = %OP1114.JUMPDEST
  %mload.out3621 = load i256, ptr %mload.out.slot3620, align 16
  %sp3624 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %559
  %sp3633 = getelementptr i256, ptr %sp3612, i64 -1
  %swap.b3634 = load i256, ptr %sp3633, align 16
  store i256 %mload.out3621, ptr %sp3633, align 16
  %561 = and i256 %swap.b3634, 1461501637330902918203684832716283019655932542975
  store i256 %561, ptr %sp3616, align 16
  store i256 %mload.out3621, ptr %sp3624, align 16
  %562 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out3621, i256 %561, ptr %arg.ecx.addr)
  %.not48420 = icmp eq i8 %562, 0
  br i1 %.not48420, label %OP1124.MLOAD, label %return, !prof !6

OP1124.MLOAD:                                     ; preds = %OP1117.MLOAD.contd
  %a3652 = load i256, ptr %sp3612, align 16
  %mload.out.slot3653 = alloca i256, align 16
  %563 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a3652, ptr %mload.out.slot3653, ptr %arg.ecx.addr)
  %.not48421 = icmp eq i8 %563, 0
  br i1 %.not48421, label %OP1124.MLOAD.contd, label %return, !prof !6

OP1124.MLOAD.contd:                               ; preds = %OP1124.MLOAD
  %mload.out3654 = load i256, ptr %mload.out.slot3653, align 16
  %swap.b3660 = load i256, ptr %sp3633, align 16
  %564 = sub i256 %swap.b3660, %mload.out3654
  store i256 32, ptr %sp3616, align 16
  %565 = add i256 %564, 32
  store i256 %565, ptr %sp3633, align 16
  store i256 %mload.out3654, ptr %sp3612, align 16
  %566 = add i64 %len.addr.357, -1
  %567 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3633, i8 2)
  %.not48422 = icmp eq i8 %567, 0
  %spec.select36531 = select i1 %.not48422, i8 2, i8 %567, !prof !6
  br label %return

OP1133.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP353.DUP1
  %len.addr.48 = phi i64 [ %len.addr.12, %OP353.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %568 = add i64 %len.addr.48, 1
  %sp3693 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.48
  store i256 1092, ptr %sp3693, align 16
  br label %OP3923.JUMPDEST

OP1137.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP309.JUMPDEST
  %len.addr.49 = phi i64 [ %len.addr.11, %OP309.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %569 = add i64 %len.addr.49, 1
  %sp3697 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.49
  store i256 1921, ptr %sp3697, align 16
  br label %OP3933.JUMPDEST

OP1141.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP315.DUP1
  %len.addr.50 = phi i64 [ %len.addr.11, %OP315.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp3701 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.50
  store i256 1064, ptr %sp3701, align 16
  %sp3703 = getelementptr i256, ptr %sp3701, i64 1
  store i256 4, ptr %sp3703, align 16
  %570 = add i64 %len.addr.50, 3
  %sp3707 = getelementptr i256, ptr %sp3701, i64 2
  %contract.input.len.addr3709 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len3710 = load i64, ptr %contract.input.len.addr3709, align 8
  %571 = zext i64 %contract.input.len3710 to i256
  %sp3711 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %570
  %572 = add nsw i256 %571, -4
  store i256 %572, ptr %sp3707, align 16
  %sp3723 = getelementptr i256, ptr %sp3701, i64 4
  store i256 %572, ptr %sp3723, align 16
  %573 = icmp ugt i256 %572, 63
  %574 = zext i1 %573 to i256
  store i256 %574, ptr %sp3711, align 16
  br i1 %573, label %OP1156.JUMPDEST, label %OP1153.PUSH1

OP1153.PUSH1:                                     ; preds = %OP1141.JUMPDEST
  store i256 0, ptr %sp3711, align 16
  store i256 0, ptr %sp3723, align 16
  %575 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3711, i8 16)
  %.not48726 = icmp eq i8 %575, 0
  %spec.select36532 = select i1 %.not48726, i8 16, i8 %575, !prof !6
  br label %return

OP1156.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54096 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49258.pre = load i64, ptr %.phi.trans.insert54096, align 8
  br label %OP1156.JUMPDEST

OP1156.JUMPDEST:                                  ; preds = %OP1156.JUMPDEST.loopexit, %OP1141.JUMPDEST
  %arg.contract.addr.val49258 = phi i64 [ %contract.input.len3710, %OP1141.JUMPDEST ], [ %arg.contract.addr.val49258.pre, %OP1156.JUMPDEST.loopexit ]
  %len.addr.51 = phi i64 [ %570, %OP1141.JUMPDEST ], [ %len.addr.357, %OP1156.JUMPDEST.loopexit ]
  %576 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.51
  %sp3748 = getelementptr i256, ptr %576, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp3748, align 16
  %sp3750 = getelementptr i256, ptr %576, i64 -2
  %dup23751 = load i256, ptr %sp3750, align 16
  store i256 %dup23751, ptr %576, align 16
  %577 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49257 = load ptr, ptr %577, align 8
  %578 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup23751, ptr %arg.contract.addr.val49257, i64 %arg.contract.addr.val49258)
  %579 = and i256 %578, 1461501637330902918203684832716283019655932542975
  store i256 %579, ptr %sp3750, align 16
  store i256 32, ptr %576, align 16
  %580 = add i256 %dup23751, 32
  store i256 %580, ptr %sp3748, align 16
  %581 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %580, ptr %arg.contract.addr.val49257, i64 %arg.contract.addr.val49258)
  store i256 %581, ptr %sp3748, align 16
  br label %OP3940.JUMPDEST

OP1168.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP320.DUP1
  %len.addr.52 = phi i64 [ %len.addr.11, %OP320.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %582 = add i64 %len.addr.52, 1
  %sp3783 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.52
  store i256 1161, ptr %sp3783, align 16
  br label %OP3991.JUMPDEST

OP1172.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP287.DUP1
  %len.addr.53 = phi i64 [ %len.addr.10, %OP287.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp3787 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.53
  store i256 1064, ptr %sp3787, align 16
  %sp3789 = getelementptr i256, ptr %sp3787, i64 1
  store i256 4, ptr %sp3789, align 16
  %583 = add i64 %len.addr.53, 3
  %sp3793 = getelementptr i256, ptr %sp3787, i64 2
  %contract.input.len.addr3795 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len3796 = load i64, ptr %contract.input.len.addr3795, align 8
  %584 = zext i64 %contract.input.len3796 to i256
  %sp3797 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %583
  %585 = add nsw i256 %584, -4
  store i256 %585, ptr %sp3793, align 16
  %sp3809 = getelementptr i256, ptr %sp3787, i64 4
  store i256 %585, ptr %sp3809, align 16
  %586 = icmp ugt i256 %585, 63
  %587 = zext i1 %586 to i256
  store i256 %587, ptr %sp3797, align 16
  br i1 %586, label %OP1187.JUMPDEST, label %OP1184.PUSH1

OP1184.PUSH1:                                     ; preds = %OP1172.JUMPDEST
  store i256 0, ptr %sp3797, align 16
  store i256 0, ptr %sp3809, align 16
  %588 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3797, i8 16)
  %.not48693 = icmp eq i8 %588, 0
  %spec.select36533 = select i1 %.not48693, i8 16, i8 %588, !prof !6
  br label %return

OP1187.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54089 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49254.pre = load i64, ptr %.phi.trans.insert54089, align 8
  br label %OP1187.JUMPDEST

OP1187.JUMPDEST:                                  ; preds = %OP1187.JUMPDEST.loopexit, %OP1172.JUMPDEST
  %arg.contract.addr.val49254 = phi i64 [ %contract.input.len3796, %OP1172.JUMPDEST ], [ %arg.contract.addr.val49254.pre, %OP1187.JUMPDEST.loopexit ]
  %len.addr.54 = phi i64 [ %583, %OP1172.JUMPDEST ], [ %len.addr.357, %OP1187.JUMPDEST.loopexit ]
  %589 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.54
  %sp3834 = getelementptr i256, ptr %589, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp3834, align 16
  %sp3836 = getelementptr i256, ptr %589, i64 -2
  %dup23837 = load i256, ptr %sp3836, align 16
  store i256 %dup23837, ptr %589, align 16
  %590 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49253 = load ptr, ptr %590, align 8
  %591 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup23837, ptr %arg.contract.addr.val49253, i64 %arg.contract.addr.val49254)
  %592 = and i256 %591, 1461501637330902918203684832716283019655932542975
  store i256 %592, ptr %sp3836, align 16
  store i256 32, ptr %589, align 16
  %593 = add i256 %dup23837, 32
  store i256 %593, ptr %sp3834, align 16
  %594 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %593, ptr %arg.contract.addr.val49253, i64 %arg.contract.addr.val49254)
  store i256 %594, ptr %sp3834, align 16
  br label %OP4054.JUMPDEST

OP1199.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP292.DUP1
  %len.addr.55 = phi i64 [ %len.addr.10, %OP292.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp3869 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.55
  store i256 1161, ptr %sp3869, align 16
  %sp3871 = getelementptr i256, ptr %sp3869, i64 1
  store i256 4, ptr %sp3871, align 16
  %595 = add i64 %len.addr.55, 3
  %sp3875 = getelementptr i256, ptr %sp3869, i64 2
  %contract.input.len.addr3877 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len3878 = load i64, ptr %contract.input.len.addr3877, align 8
  %596 = zext i64 %contract.input.len3878 to i256
  %sp3879 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %595
  %597 = add nsw i256 %596, -4
  store i256 %597, ptr %sp3875, align 16
  %sp3891 = getelementptr i256, ptr %sp3869, i64 4
  store i256 %597, ptr %sp3891, align 16
  %598 = icmp ugt i256 %597, 31
  %599 = zext i1 %598 to i256
  store i256 %599, ptr %sp3879, align 16
  br i1 %598, label %OP1214.JUMPDEST, label %OP1211.PUSH1

OP1211.PUSH1:                                     ; preds = %OP1199.JUMPDEST
  store i256 0, ptr %sp3879, align 16
  store i256 0, ptr %sp3891, align 16
  %600 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3879, i8 16)
  %.not48672 = icmp eq i8 %600, 0
  %spec.select36534 = select i1 %.not48672, i8 16, i8 %600, !prof !6
  br label %return

OP1214.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54084 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49250.pre = load i64, ptr %.phi.trans.insert54084, align 8
  br label %OP1214.JUMPDEST

OP1214.JUMPDEST:                                  ; preds = %OP1214.JUMPDEST.loopexit, %OP1199.JUMPDEST
  %arg.contract.addr.val49250 = phi i64 [ %contract.input.len3878, %OP1199.JUMPDEST ], [ %arg.contract.addr.val49250.pre, %OP1214.JUMPDEST.loopexit ]
  %len.addr.56 = phi i64 [ %595, %OP1199.JUMPDEST ], [ %len.addr.357, %OP1214.JUMPDEST.loopexit ]
  %601 = add i64 %len.addr.56, -1
  %602 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.56
  %sp3916 = getelementptr i256, ptr %602, i64 -2
  %a3917 = load i256, ptr %sp3916, align 16
  %603 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49249 = load ptr, ptr %603, align 8
  %604 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a3917, ptr %arg.contract.addr.val49249, i64 %arg.contract.addr.val49250)
  store i256 %604, ptr %sp3916, align 16
  br label %OP4498.JUMPDEST

OP1219.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP297.DUP1
  %len.addr.57 = phi i64 [ %len.addr.10, %OP297.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp3922 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.57
  store i256 1161, ptr %sp3922, align 16
  %sp3924 = getelementptr i256, ptr %sp3922, i64 1
  store i256 4, ptr %sp3924, align 16
  %605 = add i64 %len.addr.57, 3
  %sp3928 = getelementptr i256, ptr %sp3922, i64 2
  %contract.input.len.addr3930 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len3931 = load i64, ptr %contract.input.len.addr3930, align 8
  %606 = zext i64 %contract.input.len3931 to i256
  %sp3932 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %605
  %607 = add nsw i256 %606, -4
  store i256 %607, ptr %sp3928, align 16
  %sp3944 = getelementptr i256, ptr %sp3922, i64 4
  store i256 %607, ptr %sp3944, align 16
  %608 = icmp ugt i256 %607, 63
  %609 = zext i1 %608 to i256
  store i256 %609, ptr %sp3932, align 16
  br i1 %608, label %OP1234.JUMPDEST, label %OP1231.PUSH1

OP1231.PUSH1:                                     ; preds = %OP1219.JUMPDEST
  store i256 0, ptr %sp3932, align 16
  store i256 0, ptr %sp3944, align 16
  %610 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3932, i8 16)
  %.not48663 = icmp eq i8 %610, 0
  %spec.select36535 = select i1 %.not48663, i8 16, i8 %610, !prof !6
  br label %return

OP1234.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54072 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49248.pre = load i64, ptr %.phi.trans.insert54072, align 8
  br label %OP1234.JUMPDEST

OP1234.JUMPDEST:                                  ; preds = %OP1234.JUMPDEST.loopexit, %OP1219.JUMPDEST
  %arg.contract.addr.val49248 = phi i64 [ %contract.input.len3931, %OP1219.JUMPDEST ], [ %arg.contract.addr.val49248.pre, %OP1234.JUMPDEST.loopexit ]
  %len.addr.58 = phi i64 [ %605, %OP1219.JUMPDEST ], [ %len.addr.357, %OP1234.JUMPDEST.loopexit ]
  %611 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.58
  %sp3968 = getelementptr i256, ptr %611, i64 -2
  %dup23969 = load i256, ptr %sp3968, align 16
  %sp3974 = getelementptr i256, ptr %611, i64 -1
  %b3975 = load i256, ptr %sp3974, align 16
  %612 = add i256 %b3975, %dup23969
  store i256 %612, ptr %sp3968, align 16
  store i256 %dup23969, ptr %sp3974, align 16
  %613 = add i64 %len.addr.58, 2
  %sp3987 = getelementptr i256, ptr %611, i64 1
  %614 = add i256 %dup23969, 32
  store i256 %614, ptr %611, align 16
  store i256 %dup23969, ptr %sp3987, align 16
  %615 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49247 = load ptr, ptr %615, align 8
  %616 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup23969, ptr %arg.contract.addr.val49247, i64 %arg.contract.addr.val49248)
  store i256 %616, ptr %sp3987, align 16
  %sp4003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %613
  %sp4007 = getelementptr i256, ptr %611, i64 3
  store i256 %616, ptr %sp4007, align 16
  %617 = icmp ult i256 %616, 4294967297
  %618 = zext i1 %617 to i256
  store i256 %618, ptr %sp4003, align 16
  br i1 %617, label %OP1252.JUMPDEST, label %OP1249.PUSH1

OP1249.PUSH1:                                     ; preds = %OP1234.JUMPDEST
  store i256 0, ptr %sp4003, align 16
  store i256 0, ptr %sp4007, align 16
  %619 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4003, i8 16)
  %.not48664 = icmp eq i8 %619, 0
  %spec.select36536 = select i1 %.not48664, i8 16, i8 %619, !prof !6
  br label %return

OP1252.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1234.JUMPDEST
  %len.addr.59 = phi i64 [ %613, %OP1234.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %620 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.59
  %sp4031 = getelementptr i256, ptr %620, i64 -3
  %dup34032 = load i256, ptr %sp4031, align 16
  %sp4037 = getelementptr i256, ptr %620, i64 -1
  %b4038 = load i256, ptr %sp4037, align 16
  %621 = add i256 %b4038, %dup34032
  store i256 %621, ptr %sp4037, align 16
  %sp4041 = getelementptr i256, ptr %620, i64 -4
  %dup44042 = load i256, ptr %sp4041, align 16
  %sp4045 = getelementptr i256, ptr %620, i64 1
  %sp4049 = getelementptr i256, ptr %620, i64 2
  store i256 %621, ptr %sp4049, align 16
  %622 = add i256 %621, 32
  store i256 %622, ptr %sp4045, align 16
  %623 = icmp ule i256 %622, %dup44042
  %624 = zext i1 %623 to i256
  store i256 %624, ptr %620, align 16
  br i1 %623, label %OP1266.JUMPDEST, label %OP1263.PUSH1

OP1263.PUSH1:                                     ; preds = %OP1252.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %620, i8 0, i64 64, i1 false)
  %625 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %620, i8 16)
  %.not48665 = icmp eq i8 %625, 0
  %spec.select36537 = select i1 %.not48665, i8 16, i8 %625, !prof !6
  br label %return

OP1266.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54074 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp4079.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54074, i64 -1
  %dup14080.pre = load i256, ptr %sp4079.phi.trans.insert, align 16
  %sp4105.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54074, i64 -4
  %dup54106.pre = load i256, ptr %sp4105.phi.trans.insert, align 16
  %.pre54249 = add i256 %dup14080.pre, 32
  br label %OP1266.JUMPDEST

OP1266.JUMPDEST:                                  ; preds = %OP1266.JUMPDEST.loopexit, %OP1252.JUMPDEST
  %.pre-phi54250 = phi i256 [ %.pre54249, %OP1266.JUMPDEST.loopexit ], [ %622, %OP1252.JUMPDEST ]
  %dup54106 = phi i256 [ %dup54106.pre, %OP1266.JUMPDEST.loopexit ], [ %dup44042, %OP1252.JUMPDEST ]
  %swap.b4090 = phi i256 [ %dup14080.pre, %OP1266.JUMPDEST.loopexit ], [ %621, %OP1252.JUMPDEST ]
  %len.addr.60 = phi i64 [ %len.addr.357, %OP1266.JUMPDEST.loopexit ], [ %len.addr.59, %OP1252.JUMPDEST ]
  %626 = add i64 %len.addr.60, 1
  %627 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.60
  %sp4079 = getelementptr i256, ptr %627, i64 -1
  store i256 %swap.b4090, ptr %627, align 16
  %628 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49245 = load ptr, ptr %628, align 8
  %629 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49246 = load i64, ptr %629, align 8
  %630 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b4090, ptr %arg.contract.addr.val49245, i64 %arg.contract.addr.val49246)
  store i256 %630, ptr %sp4079, align 16
  %sp4092 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %626
  %sp4102 = getelementptr i256, ptr %627, i64 -2
  %swap.b4103 = load i256, ptr %sp4102, align 16
  store i256 %.pre-phi54250, ptr %sp4102, align 16
  store i256 %swap.b4103, ptr %627, align 16
  %sp4109 = getelementptr i256, ptr %627, i64 2
  %sp4113 = getelementptr i256, ptr %627, i64 3
  %631 = shl i256 %630, 5
  %632 = add i256 %.pre-phi54250, %631
  %633 = icmp ugt i256 %632, %dup54106
  store i256 %630, ptr %sp4113, align 16
  %634 = icmp ugt i256 %630, 4294967296
  %635 = zext i1 %634 to i256
  store i256 %635, ptr %sp4109, align 16
  %636 = or i1 %633, %634
  %637 = xor i1 %636, true
  %638 = zext i1 %637 to i256
  store i256 %638, ptr %sp4092, align 16
  br i1 %636, label %OP1287.PUSH1, label %OP1290.JUMPDEST

OP1287.PUSH1:                                     ; preds = %OP1266.JUMPDEST
  store i256 0, ptr %sp4092, align 16
  store i256 0, ptr %sp4109, align 16
  %639 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4092, i8 16)
  %.not48666 = icmp eq i8 %639, 0
  %spec.select36538 = select i1 %.not48666, i8 16, i8 %639, !prof !6
  br label %return

OP1290.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54077 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49243.pre = load ptr, ptr %.phi.trans.insert54077, align 8
  %.phi.trans.insert54079 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49244.pre = load i64, ptr %.phi.trans.insert54079, align 8
  br label %OP1290.JUMPDEST

OP1290.JUMPDEST:                                  ; preds = %OP1290.JUMPDEST.loopexit, %OP1266.JUMPDEST
  %arg.contract.addr.val49244 = phi i64 [ %arg.contract.addr.val49246, %OP1266.JUMPDEST ], [ %arg.contract.addr.val49244.pre, %OP1290.JUMPDEST.loopexit ]
  %arg.contract.addr.val49243 = phi ptr [ %arg.contract.addr.val49245, %OP1266.JUMPDEST ], [ %arg.contract.addr.val49243.pre, %OP1290.JUMPDEST.loopexit ]
  %len.addr.61 = phi i64 [ %626, %OP1266.JUMPDEST ], [ %len.addr.357, %OP1290.JUMPDEST.loopexit ]
  %640 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.61
  %sp4171 = getelementptr i256, ptr %640, i64 -1
  %swap.a4172 = load i256, ptr %sp4171, align 16
  %sp4173 = getelementptr i256, ptr %640, i64 -3
  %swap.b4174 = load i256, ptr %sp4173, align 16
  %sp4178 = getelementptr i256, ptr %640, i64 -5
  %swap.b4179 = load i256, ptr %sp4178, align 16
  store i256 %swap.b4174, ptr %sp4178, align 16
  %sp4183 = getelementptr i256, ptr %640, i64 -2
  %swap.b4184 = load i256, ptr %sp4183, align 16
  %sp4188 = getelementptr i256, ptr %640, i64 -4
  %swap.b4189 = load i256, ptr %sp4188, align 16
  store i256 %swap.b4184, ptr %sp4188, align 16
  store i256 %swap.b4189, ptr %sp4183, align 16
  store i256 %swap.b4179, ptr %sp4173, align 16
  %641 = add i64 %len.addr.61, 1
  %sp4205 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %641
  store i256 %swap.a4172, ptr %sp4205, align 16
  %642 = add i256 %swap.a4172, 32
  store i256 %642, ptr %sp4171, align 16
  store i256 %swap.a4172, ptr %640, align 16
  %643 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.a4172, ptr %arg.contract.addr.val49243, i64 %arg.contract.addr.val49244)
  store i256 %643, ptr %640, align 16
  %sp4226 = getelementptr i256, ptr %640, i64 2
  store i256 %643, ptr %sp4226, align 16
  %644 = icmp ult i256 %643, 4294967297
  %645 = zext i1 %644 to i256
  store i256 %645, ptr %sp4205, align 16
  br i1 %644, label %OP1311.JUMPDEST, label %OP1308.PUSH1

OP1308.PUSH1:                                     ; preds = %OP1290.JUMPDEST
  store i256 0, ptr %sp4205, align 16
  store i256 0, ptr %sp4226, align 16
  %646 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4205, i8 16)
  %.not48667 = icmp eq i8 %646, 0
  %spec.select36539 = select i1 %.not48667, i8 16, i8 %646, !prof !6
  br label %return

OP1311.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1290.JUMPDEST
  %len.addr.62 = phi i64 [ %641, %OP1290.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %647 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.62
  %sp4250 = getelementptr i256, ptr %647, i64 -3
  %dup34251 = load i256, ptr %sp4250, align 16
  %sp4256 = getelementptr i256, ptr %647, i64 -1
  %b4257 = load i256, ptr %sp4256, align 16
  %648 = add i256 %b4257, %dup34251
  store i256 %648, ptr %sp4256, align 16
  %sp4260 = getelementptr i256, ptr %647, i64 -4
  %dup44261 = load i256, ptr %sp4260, align 16
  %sp4264 = getelementptr i256, ptr %647, i64 1
  %sp4268 = getelementptr i256, ptr %647, i64 2
  store i256 %648, ptr %sp4268, align 16
  %649 = add i256 %648, 32
  store i256 %649, ptr %sp4264, align 16
  %650 = icmp ule i256 %649, %dup44261
  %651 = zext i1 %650 to i256
  store i256 %651, ptr %647, align 16
  br i1 %650, label %OP1325.JUMPDEST, label %OP1322.PUSH1

OP1322.PUSH1:                                     ; preds = %OP1311.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %647, i8 0, i64 64, i1 false)
  %652 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %647, i8 16)
  %.not48668 = icmp eq i8 %652, 0
  %spec.select36540 = select i1 %.not48668, i8 16, i8 %652, !prof !6
  br label %return

OP1325.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54081 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp4298.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54081, i64 -1
  %dup14299.pre = load i256, ptr %sp4298.phi.trans.insert, align 16
  %sp4324.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54081, i64 -4
  %dup54325.pre = load i256, ptr %sp4324.phi.trans.insert, align 16
  %.pre54251 = add i256 %dup14299.pre, 32
  br label %OP1325.JUMPDEST

OP1325.JUMPDEST:                                  ; preds = %OP1325.JUMPDEST.loopexit, %OP1311.JUMPDEST
  %.pre-phi54252 = phi i256 [ %.pre54251, %OP1325.JUMPDEST.loopexit ], [ %649, %OP1311.JUMPDEST ]
  %dup54325 = phi i256 [ %dup54325.pre, %OP1325.JUMPDEST.loopexit ], [ %dup44261, %OP1311.JUMPDEST ]
  %swap.b4309 = phi i256 [ %dup14299.pre, %OP1325.JUMPDEST.loopexit ], [ %648, %OP1311.JUMPDEST ]
  %len.addr.63 = phi i64 [ %len.addr.357, %OP1325.JUMPDEST.loopexit ], [ %len.addr.62, %OP1311.JUMPDEST ]
  %653 = add i64 %len.addr.63, 1
  %654 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.63
  %sp4298 = getelementptr i256, ptr %654, i64 -1
  store i256 %swap.b4309, ptr %654, align 16
  %655 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49241 = load ptr, ptr %655, align 8
  %656 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49242 = load i64, ptr %656, align 8
  %657 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b4309, ptr %arg.contract.addr.val49241, i64 %arg.contract.addr.val49242)
  store i256 %657, ptr %sp4298, align 16
  %sp4311 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %653
  %sp4321 = getelementptr i256, ptr %654, i64 -2
  %swap.b4322 = load i256, ptr %sp4321, align 16
  store i256 %.pre-phi54252, ptr %sp4321, align 16
  store i256 %swap.b4322, ptr %654, align 16
  %sp4328 = getelementptr i256, ptr %654, i64 2
  %sp4332 = getelementptr i256, ptr %654, i64 3
  %658 = add i256 %.pre-phi54252, %657
  %659 = icmp ugt i256 %658, %dup54325
  store i256 %657, ptr %sp4332, align 16
  %660 = icmp ugt i256 %657, 4294967296
  %661 = zext i1 %660 to i256
  store i256 %661, ptr %sp4328, align 16
  %662 = or i1 %659, %660
  %663 = xor i1 %662, true
  %664 = zext i1 %663 to i256
  store i256 %664, ptr %sp4311, align 16
  br i1 %662, label %OP1346.PUSH1, label %OP1349.JUMPDEST

OP1346.PUSH1:                                     ; preds = %OP1325.JUMPDEST
  store i256 0, ptr %sp4311, align 16
  store i256 0, ptr %sp4328, align 16
  %665 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4311, i8 16)
  %.not48669 = icmp eq i8 %665, 0
  %spec.select36541 = select i1 %.not48669, i8 16, i8 %665, !prof !6
  br label %return

OP1349.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1325.JUMPDEST
  %len.addr.64 = phi i64 [ %653, %OP1325.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %666 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.64
  %sp4391 = getelementptr i256, ptr %666, i64 -2
  %swap.a4392 = load i256, ptr %sp4391, align 16
  %sp4393 = getelementptr i256, ptr %666, i64 -3
  %swap.b4394 = load i256, ptr %sp4393, align 16
  %sp4398 = getelementptr i256, ptr %666, i64 -5
  %swap.b4399 = load i256, ptr %sp4398, align 16
  store i256 %swap.b4394, ptr %sp4398, align 16
  store i256 %swap.b4399, ptr %sp4391, align 16
  %sp4404 = getelementptr i256, ptr %666, i64 -4
  %swap.b4405 = load i256, ptr %sp4404, align 16
  store i256 %swap.a4392, ptr %sp4404, align 16
  store i256 %swap.b4405, ptr %sp4393, align 16
  %667 = add i64 %len.addr.64, -3
  br label %OP4804.JUMPDEST

OP1358.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP302.DUP1
  %len.addr.65 = phi i64 [ %len.addr.10, %OP302.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp4410 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.65
  store i256 1064, ptr %sp4410, align 16
  %sp4412 = getelementptr i256, ptr %sp4410, i64 1
  store i256 4, ptr %sp4412, align 16
  %668 = add i64 %len.addr.65, 3
  %sp4416 = getelementptr i256, ptr %sp4410, i64 2
  %contract.input.len.addr4418 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len4419 = load i64, ptr %contract.input.len.addr4418, align 8
  %669 = zext i64 %contract.input.len4419 to i256
  %sp4420 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %668
  %670 = add nsw i256 %669, -4
  store i256 %670, ptr %sp4416, align 16
  %sp4432 = getelementptr i256, ptr %sp4410, i64 4
  store i256 %670, ptr %sp4432, align 16
  %671 = icmp ugt i256 %670, 63
  %672 = zext i1 %671 to i256
  store i256 %672, ptr %sp4420, align 16
  br i1 %671, label %OP1373.JUMPDEST, label %OP1370.PUSH1

OP1370.PUSH1:                                     ; preds = %OP1358.JUMPDEST
  store i256 0, ptr %sp4420, align 16
  store i256 0, ptr %sp4432, align 16
  %673 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4420, i8 16)
  %.not48634 = icmp eq i8 %673, 0
  %spec.select36542 = select i1 %.not48634, i8 16, i8 %673, !prof !6
  br label %return

OP1373.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54066 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49240.pre = load i64, ptr %.phi.trans.insert54066, align 8
  br label %OP1373.JUMPDEST

OP1373.JUMPDEST:                                  ; preds = %OP1373.JUMPDEST.loopexit, %OP1358.JUMPDEST
  %arg.contract.addr.val49240 = phi i64 [ %contract.input.len4419, %OP1358.JUMPDEST ], [ %arg.contract.addr.val49240.pre, %OP1373.JUMPDEST.loopexit ]
  %len.addr.66 = phi i64 [ %668, %OP1358.JUMPDEST ], [ %len.addr.357, %OP1373.JUMPDEST.loopexit ]
  %674 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.66
  %sp4457 = getelementptr i256, ptr %674, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp4457, align 16
  %sp4459 = getelementptr i256, ptr %674, i64 -2
  %dup24460 = load i256, ptr %sp4459, align 16
  store i256 %dup24460, ptr %674, align 16
  %675 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49239 = load ptr, ptr %675, align 8
  %676 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup24460, ptr %arg.contract.addr.val49239, i64 %arg.contract.addr.val49240)
  %677 = and i256 %676, 1461501637330902918203684832716283019655932542975
  store i256 %677, ptr %sp4459, align 16
  store i256 32, ptr %674, align 16
  %678 = add i256 %dup24460, 32
  store i256 %678, ptr %sp4457, align 16
  %679 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %678, ptr %arg.contract.addr.val49239, i64 %arg.contract.addr.val49240)
  store i256 %679, ptr %sp4457, align 16
  br label %OP5027.JUMPDEST

OP1385.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP263.JUMPDEST
  %len.addr.67 = phi i64 [ %len.addr.9, %OP263.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %680 = add i64 %len.addr.67, 1
  %sp4492 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.67
  store i256 890, ptr %sp4492, align 16
  br label %OP5177.JUMPDEST

OP1389.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP269.DUP1
  %len.addr.68 = phi i64 [ %len.addr.9, %OP269.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp4496 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.68
  store i256 1161, ptr %sp4496, align 16
  %sp4498 = getelementptr i256, ptr %sp4496, i64 1
  store i256 4, ptr %sp4498, align 16
  %681 = add i64 %len.addr.68, 3
  %sp4502 = getelementptr i256, ptr %sp4496, i64 2
  %contract.input.len.addr4504 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len4505 = load i64, ptr %contract.input.len.addr4504, align 8
  %682 = zext i64 %contract.input.len4505 to i256
  %sp4506 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %681
  %683 = add nsw i256 %682, -4
  store i256 %683, ptr %sp4502, align 16
  %sp4518 = getelementptr i256, ptr %sp4496, i64 4
  store i256 %683, ptr %sp4518, align 16
  %684 = icmp ugt i256 %683, 31
  %685 = zext i1 %684 to i256
  store i256 %685, ptr %sp4506, align 16
  br i1 %684, label %OP1404.JUMPDEST, label %OP1401.PUSH1

OP1401.PUSH1:                                     ; preds = %OP1389.JUMPDEST
  store i256 0, ptr %sp4506, align 16
  store i256 0, ptr %sp4518, align 16
  %686 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4506, i8 16)
  %.not48780 = icmp eq i8 %686, 0
  %spec.select36543 = select i1 %.not48780, i8 16, i8 %686, !prof !6
  br label %return

OP1404.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54106 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49236.pre = load i64, ptr %.phi.trans.insert54106, align 8
  br label %OP1404.JUMPDEST

OP1404.JUMPDEST:                                  ; preds = %OP1404.JUMPDEST.loopexit, %OP1389.JUMPDEST
  %arg.contract.addr.val49236 = phi i64 [ %contract.input.len4505, %OP1389.JUMPDEST ], [ %arg.contract.addr.val49236.pre, %OP1404.JUMPDEST.loopexit ]
  %len.addr.69 = phi i64 [ %681, %OP1389.JUMPDEST ], [ %len.addr.357, %OP1404.JUMPDEST.loopexit ]
  %687 = add i64 %len.addr.69, -1
  %688 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.69
  %sp4543 = getelementptr i256, ptr %688, i64 -2
  %a4544 = load i256, ptr %sp4543, align 16
  %689 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49235 = load ptr, ptr %689, align 8
  %690 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a4544, ptr %arg.contract.addr.val49235, i64 %arg.contract.addr.val49236)
  %sp4547 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %687
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp4547, align 16
  %691 = and i256 %690, 1461501637330902918203684832716283019655932542975
  store i256 %691, ptr %sp4543, align 16
  br label %OP5197.JUMPDEST

OP1411.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP274.DUP1
  %len.addr.70 = phi i64 [ %len.addr.9, %OP274.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp4557 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.70
  store i256 1161, ptr %sp4557, align 16
  %sp4559 = getelementptr i256, ptr %sp4557, i64 1
  store i256 4, ptr %sp4559, align 16
  %692 = add i64 %len.addr.70, 3
  %sp4563 = getelementptr i256, ptr %sp4557, i64 2
  %contract.input.len.addr4565 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len4566 = load i64, ptr %contract.input.len.addr4565, align 8
  %693 = zext i64 %contract.input.len4566 to i256
  %sp4567 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %692
  %694 = add nsw i256 %693, -4
  store i256 %694, ptr %sp4563, align 16
  %sp4579 = getelementptr i256, ptr %sp4557, i64 4
  store i256 %694, ptr %sp4579, align 16
  %695 = icmp ugt i256 %694, 159
  %696 = zext i1 %695 to i256
  store i256 %696, ptr %sp4567, align 16
  br i1 %695, label %OP1426.JUMPDEST, label %OP1423.PUSH1

OP1423.PUSH1:                                     ; preds = %OP1411.JUMPDEST
  store i256 0, ptr %sp4567, align 16
  store i256 0, ptr %sp4579, align 16
  %697 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4567, i8 16)
  %.not48750 = icmp eq i8 %697, 0
  %spec.select36544 = select i1 %.not48750, i8 16, i8 %697, !prof !6
  br label %return

OP1426.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54100 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49234.pre = load i64, ptr %.phi.trans.insert54100, align 8
  br label %OP1426.JUMPDEST

OP1426.JUMPDEST:                                  ; preds = %OP1426.JUMPDEST.loopexit, %OP1411.JUMPDEST
  %arg.contract.addr.val49234 = phi i64 [ %contract.input.len4566, %OP1411.JUMPDEST ], [ %arg.contract.addr.val49234.pre, %OP1426.JUMPDEST.loopexit ]
  %len.addr.71 = phi i64 [ %692, %OP1411.JUMPDEST ], [ %len.addr.357, %OP1426.JUMPDEST.loopexit ]
  %698 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.71
  %sp4604 = getelementptr i256, ptr %698, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp4604, align 16
  %sp4606 = getelementptr i256, ptr %698, i64 -2
  %dup24607 = load i256, ptr %sp4606, align 16
  store i256 %dup24607, ptr %698, align 16
  %699 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49233 = load ptr, ptr %699, align 8
  %700 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup24607, ptr %arg.contract.addr.val49233, i64 %arg.contract.addr.val49234)
  %701 = and i256 %700, 1461501637330902918203684832716283019655932542975
  store i256 %701, ptr %sp4606, align 16
  store i256 %dup24607, ptr %sp4604, align 16
  %sp4629 = getelementptr i256, ptr %698, i64 1
  store i256 %dup24607, ptr %sp4629, align 16
  %702 = add i256 %dup24607, 32
  store i256 %702, ptr %698, align 16
  %703 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %702, ptr %arg.contract.addr.val49233, i64 %arg.contract.addr.val49234)
  store i256 %703, ptr %sp4604, align 16
  store i256 %dup24607, ptr %698, align 16
  store i256 255, ptr %sp4629, align 16
  %704 = add i64 %len.addr.71, 3
  %sp4648 = getelementptr i256, ptr %698, i64 2
  %sp4652 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %704
  store i256 %dup24607, ptr %sp4652, align 16
  %705 = add i256 %dup24607, 64
  store i256 %705, ptr %sp4648, align 16
  %706 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %705, ptr %arg.contract.addr.val49233, i64 %arg.contract.addr.val49234)
  %707 = and i256 %706, 255
  store i256 %707, ptr %698, align 16
  store i256 %dup24607, ptr %sp4629, align 16
  store i256 %dup24607, ptr %sp4652, align 16
  %708 = add i256 %dup24607, 96
  store i256 %708, ptr %sp4648, align 16
  %709 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %708, ptr %arg.contract.addr.val49233, i64 %arg.contract.addr.val49234)
  store i256 %709, ptr %sp4629, align 16
  store i256 128, ptr %sp4652, align 16
  %710 = add i256 %dup24607, 128
  store i256 %710, ptr %sp4648, align 16
  %711 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %710, ptr %arg.contract.addr.val49233, i64 %arg.contract.addr.val49234)
  store i256 %711, ptr %sp4648, align 16
  br label %OP5312.JUMPDEST

OP1455.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP241.DUP1
  %len.addr.72 = phi i64 [ %len.addr.8, %OP241.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %712 = add i64 %len.addr.72, 1
  %sp4710 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.72
  store i256 1064, ptr %sp4710, align 16
  br label %OP5370.JUMPDEST

OP1459.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP246.DUP1
  %len.addr.73 = phi i64 [ %len.addr.8, %OP246.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp4714 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.73
  store i256 1092, ptr %sp4714, align 16
  %sp4716 = getelementptr i256, ptr %sp4714, i64 1
  store i256 4, ptr %sp4716, align 16
  %713 = add i64 %len.addr.73, 3
  %sp4720 = getelementptr i256, ptr %sp4714, i64 2
  %contract.input.len.addr4722 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len4723 = load i64, ptr %contract.input.len.addr4722, align 8
  %714 = zext i64 %contract.input.len4723 to i256
  %sp4724 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %713
  %715 = add nsw i256 %714, -4
  store i256 %715, ptr %sp4720, align 16
  %sp4736 = getelementptr i256, ptr %sp4714, i64 4
  store i256 %715, ptr %sp4736, align 16
  %716 = icmp ugt i256 %715, 31
  %717 = zext i1 %716 to i256
  store i256 %717, ptr %sp4724, align 16
  br i1 %716, label %OP1474.JUMPDEST, label %OP1471.PUSH1

OP1471.PUSH1:                                     ; preds = %OP1459.JUMPDEST
  store i256 0, ptr %sp4724, align 16
  store i256 0, ptr %sp4736, align 16
  %718 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4724, i8 16)
  %.not48417 = icmp eq i8 %718, 0
  %spec.select36545 = select i1 %.not48417, i8 16, i8 %718, !prof !6
  br label %return

OP1474.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert53996 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49224.pre = load i64, ptr %.phi.trans.insert53996, align 8
  br label %OP1474.JUMPDEST

OP1474.JUMPDEST:                                  ; preds = %OP1474.JUMPDEST.loopexit, %OP1459.JUMPDEST
  %arg.contract.addr.val49224 = phi i64 [ %contract.input.len4723, %OP1459.JUMPDEST ], [ %arg.contract.addr.val49224.pre, %OP1474.JUMPDEST.loopexit ]
  %len.addr.74 = phi i64 [ %713, %OP1459.JUMPDEST ], [ %len.addr.357, %OP1474.JUMPDEST.loopexit ]
  %719 = add i64 %len.addr.74, -1
  %720 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.74
  %sp4761 = getelementptr i256, ptr %720, i64 -2
  %a4762 = load i256, ptr %sp4761, align 16
  %721 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49223 = load ptr, ptr %721, align 8
  %722 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a4762, ptr %arg.contract.addr.val49223, i64 %arg.contract.addr.val49224)
  %sp4765 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %719
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp4765, align 16
  %723 = and i256 %722, 1461501637330902918203684832716283019655932542975
  store i256 %723, ptr %sp4761, align 16
  br label %OP5380.JUMPDEST

OP1481.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP251.DUP1
  %len.addr.75 = phi i64 [ %len.addr.8, %OP251.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp4775 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.75
  store i256 1092, ptr %sp4775, align 16
  %sp4777 = getelementptr i256, ptr %sp4775, i64 1
  store i256 4, ptr %sp4777, align 16
  %724 = add i64 %len.addr.75, 3
  %sp4781 = getelementptr i256, ptr %sp4775, i64 2
  %contract.input.len.addr4783 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len4784 = load i64, ptr %contract.input.len.addr4783, align 8
  %725 = zext i64 %contract.input.len4784 to i256
  %sp4785 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %724
  %726 = add nsw i256 %725, -4
  store i256 %726, ptr %sp4781, align 16
  %sp4797 = getelementptr i256, ptr %sp4775, i64 4
  store i256 %726, ptr %sp4797, align 16
  %727 = icmp ugt i256 %726, 31
  %728 = zext i1 %727 to i256
  store i256 %728, ptr %sp4785, align 16
  br i1 %727, label %OP1496.JUMPDEST, label %OP1493.PUSH1

OP1493.PUSH1:                                     ; preds = %OP1481.JUMPDEST
  store i256 0, ptr %sp4785, align 16
  store i256 0, ptr %sp4797, align 16
  %729 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4785, i8 16)
  %.not48412 = icmp eq i8 %729, 0
  %spec.select36546 = select i1 %.not48412, i8 16, i8 %729, !prof !6
  br label %return

OP1496.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert53994 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49222.pre = load i64, ptr %.phi.trans.insert53994, align 8
  br label %OP1496.JUMPDEST

OP1496.JUMPDEST:                                  ; preds = %OP1496.JUMPDEST.loopexit, %OP1481.JUMPDEST
  %arg.contract.addr.val49222 = phi i64 [ %contract.input.len4784, %OP1481.JUMPDEST ], [ %arg.contract.addr.val49222.pre, %OP1496.JUMPDEST.loopexit ]
  %len.addr.76 = phi i64 [ %724, %OP1481.JUMPDEST ], [ %len.addr.357, %OP1496.JUMPDEST.loopexit ]
  %730 = add i64 %len.addr.76, -1
  %731 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.76
  %sp4822 = getelementptr i256, ptr %731, i64 -2
  %a4823 = load i256, ptr %sp4822, align 16
  %732 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49221 = load ptr, ptr %732, align 8
  %733 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a4823, ptr %arg.contract.addr.val49221, i64 %arg.contract.addr.val49222)
  %sp4826 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %730
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp4826, align 16
  %734 = and i256 %733, 1461501637330902918203684832716283019655932542975
  store i256 %734, ptr %sp4822, align 16
  br label %OP5392.JUMPDEST

OP1503.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP256.DUP1
  %len.addr.77 = phi i64 [ %len.addr.8, %OP256.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %735 = add i64 %len.addr.77, 1
  %sp4836 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.77
  store i256 1092, ptr %sp4836, align 16
  br label %OP5408.JUMPDEST

OP1507.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP207.JUMPDEST
  %len.addr.78 = phi i64 [ %len.addr.7, %OP207.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %736 = add i64 %len.addr.78, 1
  %sp4840 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.78
  store i256 1161, ptr %sp4840, align 16
  br label %OP5412.JUMPDEST

OP1511.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP213.DUP1
  %len.addr.79 = phi i64 [ %len.addr.7, %OP213.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp4844 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.79
  store i256 1161, ptr %sp4844, align 16
  %sp4846 = getelementptr i256, ptr %sp4844, i64 1
  store i256 4, ptr %sp4846, align 16
  %737 = add i64 %len.addr.79, 3
  %sp4850 = getelementptr i256, ptr %sp4844, i64 2
  %contract.input.len.addr4852 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len4853 = load i64, ptr %contract.input.len.addr4852, align 8
  %738 = zext i64 %contract.input.len4853 to i256
  %sp4854 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %737
  %739 = add nsw i256 %738, -4
  store i256 %739, ptr %sp4850, align 16
  %sp4866 = getelementptr i256, ptr %sp4844, i64 4
  store i256 %739, ptr %sp4866, align 16
  %740 = icmp ugt i256 %739, 223
  %741 = zext i1 %740 to i256
  store i256 %741, ptr %sp4854, align 16
  br i1 %740, label %OP1526.JUMPDEST, label %OP1523.PUSH1

OP1523.PUSH1:                                     ; preds = %OP1511.JUMPDEST
  store i256 0, ptr %sp4854, align 16
  store i256 0, ptr %sp4866, align 16
  %742 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4854, i8 16)
  %.not48937 = icmp eq i8 %742, 0
  %spec.select36547 = select i1 %.not48937, i8 16, i8 %742, !prof !6
  br label %return

OP1526.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54149 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49220.pre = load i64, ptr %.phi.trans.insert54149, align 8
  br label %OP1526.JUMPDEST

OP1526.JUMPDEST:                                  ; preds = %OP1526.JUMPDEST.loopexit, %OP1511.JUMPDEST
  %arg.contract.addr.val49220 = phi i64 [ %contract.input.len4853, %OP1511.JUMPDEST ], [ %arg.contract.addr.val49220.pre, %OP1526.JUMPDEST.loopexit ]
  %len.addr.80 = phi i64 [ %737, %OP1511.JUMPDEST ], [ %len.addr.357, %OP1526.JUMPDEST.loopexit ]
  %sp4890 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.80
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp4890, align 16
  %sp4892 = getelementptr i256, ptr %sp4890, i64 -2
  %dup34893 = load i256, ptr %sp4892, align 16
  %sp4894 = getelementptr i256, ptr %sp4890, i64 1
  store i256 %dup34893, ptr %sp4894, align 16
  %743 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49219 = load ptr, ptr %743, align 8
  %744 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup34893, ptr %arg.contract.addr.val49219, i64 %arg.contract.addr.val49220)
  %sp4902 = getelementptr i256, ptr %sp4890, i64 2
  %745 = and i256 %744, 1461501637330902918203684832716283019655932542975
  store i256 %745, ptr %sp4892, align 16
  store i256 %dup34893, ptr %sp4894, align 16
  %sp4919 = getelementptr i256, ptr %sp4890, i64 3
  store i256 %dup34893, ptr %sp4919, align 16
  %746 = add i256 %dup34893, 32
  store i256 %746, ptr %sp4902, align 16
  %747 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %746, ptr %arg.contract.addr.val49219, i64 %arg.contract.addr.val49220)
  store i256 %dup34893, ptr %sp4890, align 16
  %748 = and i256 %747, 1461501637330902918203684832716283019655932542975
  %sp4949 = getelementptr i256, ptr %sp4890, i64 -1
  %swap.b4950 = load i256, ptr %sp4949, align 16
  store i256 %748, ptr %sp4949, align 16
  store i256 %swap.b4950, ptr %sp4894, align 16
  store i256 %dup34893, ptr %sp4919, align 16
  %749 = add i256 %dup34893, 64
  store i256 %749, ptr %sp4902, align 16
  %750 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %749, ptr %arg.contract.addr.val49219, i64 %arg.contract.addr.val49220)
  store i256 %750, ptr %sp4890, align 16
  store i256 %dup34893, ptr %sp4902, align 16
  %sp4977 = getelementptr i256, ptr %sp4890, i64 4
  store i256 %dup34893, ptr %sp4977, align 16
  %751 = add i256 %dup34893, 96
  store i256 %751, ptr %sp4919, align 16
  %752 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %751, ptr %arg.contract.addr.val49219, i64 %arg.contract.addr.val49220)
  store i256 %752, ptr %sp4894, align 16
  store i256 %swap.b4950, ptr %sp4919, align 16
  %sp4998 = getelementptr i256, ptr %sp4890, i64 5
  store i256 %dup34893, ptr %sp4998, align 16
  %753 = add i256 %dup34893, 128
  store i256 %753, ptr %sp4977, align 16
  %754 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %753, ptr %arg.contract.addr.val49219, i64 %arg.contract.addr.val49220)
  store i256 %754, ptr %sp4902, align 16
  store i256 %dup34893, ptr %sp4977, align 16
  %sp5019 = getelementptr i256, ptr %sp4890, i64 6
  store i256 %dup34893, ptr %sp5019, align 16
  %755 = add i256 %dup34893, 160
  store i256 %755, ptr %sp4998, align 16
  %756 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %755, ptr %arg.contract.addr.val49219, i64 %arg.contract.addr.val49220)
  store i256 %756, ptr %sp4919, align 16
  %757 = add i256 %dup34893, %swap.b4950
  store i256 %757, ptr %sp4977, align 16
  store i256 %dup34893, ptr %sp4998, align 16
  %758 = add i64 %len.addr.80, 8
  %sp5055 = getelementptr i256, ptr %sp4890, i64 7
  %759 = add i256 %dup34893, 224
  store i256 %759, ptr %sp5019, align 16
  %sp5067 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %758
  store i256 %dup34893, ptr %sp5067, align 16
  %760 = add i256 %dup34893, 192
  store i256 %760, ptr %sp5055, align 16
  %761 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %760, ptr %arg.contract.addr.val49219, i64 %arg.contract.addr.val49220)
  store i256 %761, ptr %sp5055, align 16
  %sp5083 = getelementptr i256, ptr %sp4890, i64 9
  store i256 %761, ptr %sp5083, align 16
  %762 = icmp ult i256 %761, 4294967297
  %763 = zext i1 %762 to i256
  store i256 %763, ptr %sp5067, align 16
  br i1 %762, label %OP1580.JUMPDEST, label %OP1577.PUSH1

OP1577.PUSH1:                                     ; preds = %OP1526.JUMPDEST
  store i256 0, ptr %sp5067, align 16
  store i256 0, ptr %sp5083, align 16
  %764 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5067, i8 16)
  %.not48938 = icmp eq i8 %764, 0
  %spec.select36548 = select i1 %.not48938, i8 16, i8 %764, !prof !6
  br label %return

OP1580.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1526.JUMPDEST
  %len.addr.81 = phi i64 [ %758, %OP1526.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %765 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.81
  %sp5107 = getelementptr i256, ptr %765, i64 -3
  %dup35108 = load i256, ptr %sp5107, align 16
  %sp5113 = getelementptr i256, ptr %765, i64 -1
  %b5114 = load i256, ptr %sp5113, align 16
  %766 = add i256 %b5114, %dup35108
  store i256 %766, ptr %sp5113, align 16
  %sp5117 = getelementptr i256, ptr %765, i64 -4
  %dup45118 = load i256, ptr %sp5117, align 16
  %sp5121 = getelementptr i256, ptr %765, i64 1
  %sp5125 = getelementptr i256, ptr %765, i64 2
  store i256 %766, ptr %sp5125, align 16
  %767 = add i256 %766, 32
  store i256 %767, ptr %sp5121, align 16
  %768 = icmp ule i256 %767, %dup45118
  %769 = zext i1 %768 to i256
  store i256 %769, ptr %765, align 16
  br i1 %768, label %OP1594.JUMPDEST, label %OP1591.PUSH1

OP1591.PUSH1:                                     ; preds = %OP1580.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %765, i8 0, i64 64, i1 false)
  %770 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %765, i8 16)
  %.not48939 = icmp eq i8 %770, 0
  %spec.select36549 = select i1 %.not48939, i8 16, i8 %770, !prof !6
  br label %return

OP1594.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54151 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp5155.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54151, i64 -1
  %dup15156.pre = load i256, ptr %sp5155.phi.trans.insert, align 16
  %sp5181.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54151, i64 -4
  %dup55182.pre = load i256, ptr %sp5181.phi.trans.insert, align 16
  %.pre54223 = add i256 %dup15156.pre, 32
  br label %OP1594.JUMPDEST

OP1594.JUMPDEST:                                  ; preds = %OP1594.JUMPDEST.loopexit, %OP1580.JUMPDEST
  %.pre-phi54224 = phi i256 [ %.pre54223, %OP1594.JUMPDEST.loopexit ], [ %767, %OP1580.JUMPDEST ]
  %dup55182 = phi i256 [ %dup55182.pre, %OP1594.JUMPDEST.loopexit ], [ %dup45118, %OP1580.JUMPDEST ]
  %swap.b5166 = phi i256 [ %dup15156.pre, %OP1594.JUMPDEST.loopexit ], [ %766, %OP1580.JUMPDEST ]
  %len.addr.82 = phi i64 [ %len.addr.357, %OP1594.JUMPDEST.loopexit ], [ %len.addr.81, %OP1580.JUMPDEST ]
  %771 = add i64 %len.addr.82, 1
  %772 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.82
  %sp5155 = getelementptr i256, ptr %772, i64 -1
  store i256 %swap.b5166, ptr %772, align 16
  %773 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49205 = load ptr, ptr %773, align 8
  %774 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49206 = load i64, ptr %774, align 8
  %775 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b5166, ptr %arg.contract.addr.val49205, i64 %arg.contract.addr.val49206)
  store i256 %775, ptr %sp5155, align 16
  %sp5168 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %771
  %sp5178 = getelementptr i256, ptr %772, i64 -2
  %swap.b5179 = load i256, ptr %sp5178, align 16
  store i256 %.pre-phi54224, ptr %sp5178, align 16
  store i256 %swap.b5179, ptr %772, align 16
  %sp5185 = getelementptr i256, ptr %772, i64 2
  %sp5189 = getelementptr i256, ptr %772, i64 3
  %776 = add i256 %.pre-phi54224, %775
  %777 = icmp ugt i256 %776, %dup55182
  store i256 %775, ptr %sp5189, align 16
  %778 = icmp ugt i256 %775, 4294967296
  %779 = zext i1 %778 to i256
  store i256 %779, ptr %sp5185, align 16
  %780 = or i1 %777, %778
  %781 = xor i1 %780, true
  %782 = zext i1 %781 to i256
  store i256 %782, ptr %sp5168, align 16
  br i1 %780, label %OP1615.PUSH1, label %OP1618.JUMPDEST

OP1615.PUSH1:                                     ; preds = %OP1594.JUMPDEST
  store i256 0, ptr %sp5168, align 16
  store i256 0, ptr %sp5185, align 16
  %783 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5168, i8 16)
  %.not48940 = icmp eq i8 %783, 0
  %spec.select36550 = select i1 %.not48940, i8 16, i8 %783, !prof !6
  br label %return

OP1618.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1594.JUMPDEST
  %len.addr.83 = phi i64 [ %771, %OP1594.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %784 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.83
  %sp5247 = getelementptr i256, ptr %784, i64 -1
  %swap.a5248 = load i256, ptr %sp5247, align 16
  %sp5249 = getelementptr i256, ptr %784, i64 -3
  %swap.b5250 = load i256, ptr %sp5249, align 16
  store i256 %swap.a5248, ptr %sp5249, align 16
  %sp5254 = getelementptr i256, ptr %784, i64 -2
  %swap.b5255 = load i256, ptr %sp5254, align 16
  store i256 %swap.b5250, ptr %sp5254, align 16
  store i256 %swap.b5255, ptr %sp5247, align 16
  store i256 %swap.b5255, ptr %784, align 16
  %785 = add i64 %len.addr.83, 2
  %sp5263 = getelementptr i256, ptr %784, i64 1
  %786 = add i64 %len.addr.83, 3
  %sp5265 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %785
  %787 = add i256 %swap.b5255, 31
  %sp5277 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %786
  store i256 %787, ptr %sp5277, align 16
  %788 = and i256 %787, -32
  %789 = add i256 %788, 32
  store i256 %789, ptr %sp5263, align 16
  store i256 64, ptr %sp5265, align 16
  %ecx.memory.addr.i49513 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49514 = load ptr, ptr %ecx.memory.addr.i49513, align 8
  %ecx.memory.len.addr.i49515 = getelementptr inbounds i8, ptr %ecx.memory.i49514, i64 16
  %ecx.memory.len.i49516 = load i64, ptr %ecx.memory.len.addr.i49515, align 8, !noalias !370
  %ecx.memory.last_checkpoint.addr.i49517 = getelementptr inbounds i8, ptr %ecx.memory.i49514, i64 48
  %ecx.memory.last_checkpoint.i49518 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49517, align 8, !noalias !370
  %790 = sub i64 %ecx.memory.len.i49516, %ecx.memory.last_checkpoint.i49518
  %791 = icmp ult i64 %790, 96
  br i1 %791, label %resize.i49526, label %OP1633.MLOAD.contd, !prof !5

resize.i49526:                                    ; preds = %OP1618.JUMPDEST
  %792 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !374
  %.not.i49527 = icmp eq i8 %792, 0
  br i1 %.not.i49527, label %resize.i49526.OP1633.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49526.OP1633.MLOAD.contd_crit_edge:       ; preds = %resize.i49526
  %swap.b5315.pre = load i256, ptr %sp5263, align 16
  %ecx.memory.i49530.pre = load ptr, ptr %ecx.memory.addr.i49513, align 8, !alias.scope !375
  br label %OP1633.MLOAD.contd

OP1633.MLOAD.contd:                               ; preds = %resize.i49526.OP1633.MLOAD.contd_crit_edge, %OP1618.JUMPDEST
  %ecx.memory.i49530 = phi ptr [ %ecx.memory.i49530.pre, %resize.i49526.OP1633.MLOAD.contd_crit_edge ], [ %ecx.memory.i49514, %OP1618.JUMPDEST ]
  %swap.b5315 = phi i256 [ %swap.b5315.pre, %resize.i49526.OP1633.MLOAD.contd_crit_edge ], [ %789, %OP1618.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i49520 = getelementptr inbounds i8, ptr %ecx.memory.i49514, i64 8
  %ecx.memory.buffer.ptr.shared.i49521 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49520, align 8, !noalias !370
  %ecx.memory.buffer.ptr.i49522 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49521, i64 %ecx.memory.last_checkpoint.i49518
  %slot.i49523 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49522, i64 64
  %slot.value.i49524 = load i256, ptr %slot.i49523, align 1, !noalias !370
  %793 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49524)
  store i256 %793, ptr %sp5263, align 16
  %794 = add i256 %swap.b5315, %793
  store i256 %794, ptr %sp5265, align 16
  store i256 64, ptr %sp5277, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !375)
  %ecx.memory.len.addr.i49531 = getelementptr inbounds i8, ptr %ecx.memory.i49530, i64 16
  %ecx.memory.len.i49532 = load i64, ptr %ecx.memory.len.addr.i49531, align 8, !noalias !375
  %ecx.memory.last_checkpoint.addr.i49533 = getelementptr inbounds i8, ptr %ecx.memory.i49530, i64 48
  %ecx.memory.last_checkpoint.i49534 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49533, align 8, !noalias !375
  %795 = sub i64 %ecx.memory.len.i49532, %ecx.memory.last_checkpoint.i49534
  %796 = icmp ult i64 %795, 96
  br i1 %796, label %resize.i49541, label %OP1639.DUP1, !prof !5

resize.i49541:                                    ; preds = %OP1633.MLOAD.contd
  %797 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i49542 = icmp eq i8 %797, 0
  br i1 %.not.i49542, label %OP1639.DUP1, label %return, !prof !6

OP1639.DUP1:                                      ; preds = %OP1633.MLOAD.contd, %resize.i49541
  %ecx.memory.buffer.ptr.shared.addr.i49536 = getelementptr inbounds i8, ptr %ecx.memory.i49530, i64 8
  %ecx.memory.buffer.ptr.shared.i49537 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49536, align 8, !noalias !375
  %ecx.memory.buffer.ptr.i49538 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49537, i64 %ecx.memory.last_checkpoint.i49534
  %slot.i49539 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49538, i64 64
  %798 = tail call i256 @llvm.bswap.i256(i256 %794)
  store i256 %798, ptr %slot.i49539, align 1, !noalias !375
  %dup15335 = load i256, ptr %sp5263, align 16
  %swap.b5341 = load i256, ptr %sp5254, align 16
  store i256 %dup15335, ptr %sp5254, align 16
  %swap.b5346 = load i256, ptr %sp5247, align 16
  store i256 %swap.b5341, ptr %sp5247, align 16
  %swap.b5351 = load i256, ptr %784, align 16
  store i256 %swap.b5346, ptr %784, align 16
  store i256 %swap.b5351, ptr %sp5263, align 16
  store i256 %dup15335, ptr %sp5265, align 16
  store i256 %swap.b5351, ptr %sp5277, align 16
  %sp5364 = getelementptr i256, ptr %784, i64 4
  store i256 %dup15335, ptr %sp5364, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !378)
  %ecx.memory.i49545 = load ptr, ptr %ecx.memory.addr.i49513, align 8, !alias.scope !378
  %ecx.memory.len.addr.i49546 = getelementptr inbounds i8, ptr %ecx.memory.i49545, i64 16
  %ecx.memory.len.i49547 = load i64, ptr %ecx.memory.len.addr.i49546, align 8, !noalias !378
  %ecx.memory.last_checkpoint.addr.i49548 = getelementptr inbounds i8, ptr %ecx.memory.i49545, i64 48
  %ecx.memory.last_checkpoint.i49549 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49548, align 8, !noalias !378
  %799 = sub i64 %ecx.memory.len.i49547, %ecx.memory.last_checkpoint.i49549
  %800 = icmp ugt i256 %dup15335, 18446744073709551615
  %801 = trunc i256 %dup15335 to i64
  %802 = add i64 %801, 32
  %803 = icmp ugt i64 %801, -33
  %804 = or i1 %800, %803
  %805 = select i1 %804, i64 -1, i64 %802
  %806 = icmp ugt i64 %805, %799
  br i1 %806, label %resize.i49556, label %OP1647.PUSH1, !prof !5

resize.i49556:                                    ; preds = %OP1639.DUP1
  %807 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %805)
  %.not.i49557 = icmp eq i8 %807, 0
  br i1 %.not.i49557, label %OP1647.PUSH1, label %return, !prof !6

OP1647.PUSH1:                                     ; preds = %OP1639.DUP1, %resize.i49556
  %ecx.memory.buffer.ptr.shared.addr.i49551 = getelementptr inbounds i8, ptr %ecx.memory.i49545, i64 8
  %ecx.memory.buffer.ptr.shared.i49552 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49551, align 8, !noalias !378
  %ecx.memory.buffer.ptr.i49553 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49552, i64 %ecx.memory.last_checkpoint.i49549
  %slot.i49554 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49553, i64 %801
  %808 = tail call i256 @llvm.bswap.i256(i256 %swap.b5351)
  store i256 %808, ptr %slot.i49554, align 1, !noalias !378
  %809 = add i64 %len.addr.83, 5
  %b5376 = load i256, ptr %sp5265, align 16
  %810 = add i256 %b5376, 32
  store i256 %810, ptr %sp5265, align 16
  %dup45380 = load i256, ptr %sp5247, align 16
  store i256 %dup45380, ptr %sp5277, align 16
  %dup45384 = load i256, ptr %784, align 16
  store i256 %dup45384, ptr %sp5364, align 16
  %sp5389 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %809
  store i256 %dup45384, ptr %sp5389, align 16
  %sp5393 = getelementptr i256, ptr %784, i64 6
  store i256 %dup45380, ptr %sp5393, align 16
  %sp5397 = getelementptr i256, ptr %784, i64 7
  store i256 %810, ptr %sp5397, align 16
  %811 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5389)
  %.not48944 = icmp eq i8 %811, 0
  br i1 %.not48944, label %OP1655.PUSH1, label %return, !prof !6

OP1655.PUSH1:                                     ; preds = %OP1647.PUSH1
  %sp5395 = getelementptr i256, ptr %784, i64 2
  %swap.b5406 = load i256, ptr %sp5395, align 16
  store i256 %swap.b5406, ptr %sp5389, align 16
  %b5411 = load i256, ptr %sp5364, align 16
  %812 = add i256 %b5411, %swap.b5406
  %swap.b5422 = load i256, ptr %sp5277, align 16
  store i256 0, ptr %sp5277, align 16
  store i256 %swap.b5422, ptr %sp5265, align 16
  store i256 %812, ptr %sp5364, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !381)
  %ecx.memory.i49560 = load ptr, ptr %ecx.memory.addr.i49513, align 8, !alias.scope !381
  %ecx.memory.len.addr.i49561 = getelementptr inbounds i8, ptr %ecx.memory.i49560, i64 16
  %ecx.memory.len.i49562 = load i64, ptr %ecx.memory.len.addr.i49561, align 8, !noalias !381
  %ecx.memory.last_checkpoint.addr.i49563 = getelementptr inbounds i8, ptr %ecx.memory.i49560, i64 48
  %ecx.memory.last_checkpoint.i49564 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49563, align 8, !noalias !381
  %813 = sub i64 %ecx.memory.len.i49562, %ecx.memory.last_checkpoint.i49564
  %814 = icmp ugt i256 %812, 18446744073709551615
  %815 = trunc i256 %812 to i64
  %816 = add i64 %815, 32
  %817 = icmp ugt i64 %815, -33
  %818 = or i1 %814, %817
  %819 = select i1 %818, i64 -1, i64 %816
  %820 = icmp ugt i64 %819, %813
  br i1 %820, label %resize.i49571, label %OP1662.POP, !prof !5

resize.i49571:                                    ; preds = %OP1655.PUSH1
  %821 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %819)
  %.not.i49572 = icmp eq i8 %821, 0
  br i1 %.not.i49572, label %OP1662.POP, label %return, !prof !6

OP1662.POP:                                       ; preds = %OP1655.PUSH1, %resize.i49571
  %ecx.memory.buffer.ptr.shared.addr.i49566 = getelementptr inbounds i8, ptr %ecx.memory.i49560, i64 8
  %ecx.memory.buffer.ptr.shared.i49567 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49566, align 8, !noalias !381
  %ecx.memory.buffer.ptr.i49568 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49567, i64 %ecx.memory.last_checkpoint.i49564
  %slot.i49569 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49568, i64 %815
  store i256 0, ptr %slot.i49569, align 1, !noalias !381
  %swap.a5436 = load i256, ptr %sp5263, align 16
  %swap.b5438 = load i256, ptr %sp5254, align 16
  store i256 %swap.a5436, ptr %sp5254, align 16
  %sp5442 = getelementptr i256, ptr %784, i64 -5
  store i256 %swap.b5438, ptr %sp5442, align 16
  %sp5450 = getelementptr i256, ptr %784, i64 -4
  %swap.b5451 = load i256, ptr %sp5450, align 16
  store i256 11286, ptr %sp5450, align 16
  store i256 %swap.b5451, ptr %sp5263, align 16
  %822 = add i64 %len.addr.83, -4
  br label %dynamic_jump_table.preheader

OP1674.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP218.DUP1
  %len.addr.84 = phi i64 [ %len.addr.7, %OP218.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp5462 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.84
  store i256 1092, ptr %sp5462, align 16
  %sp5464 = getelementptr i256, ptr %sp5462, i64 1
  store i256 4, ptr %sp5464, align 16
  %823 = add i64 %len.addr.84, 3
  %sp5468 = getelementptr i256, ptr %sp5462, i64 2
  %contract.input.len.addr5470 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len5471 = load i64, ptr %contract.input.len.addr5470, align 8
  %824 = zext i64 %contract.input.len5471 to i256
  %sp5472 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %823
  %825 = add nsw i256 %824, -4
  store i256 %825, ptr %sp5468, align 16
  %sp5484 = getelementptr i256, ptr %sp5462, i64 4
  store i256 %825, ptr %sp5484, align 16
  %826 = icmp ugt i256 %825, 31
  %827 = zext i1 %826 to i256
  store i256 %827, ptr %sp5472, align 16
  br i1 %826, label %OP1689.JUMPDEST, label %OP1686.PUSH1

OP1686.PUSH1:                                     ; preds = %OP1674.JUMPDEST
  store i256 0, ptr %sp5472, align 16
  store i256 0, ptr %sp5484, align 16
  %828 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5472, i8 16)
  %.not48932 = icmp eq i8 %828, 0
  %spec.select36551 = select i1 %.not48932, i8 16, i8 %828, !prof !6
  br label %return

OP1689.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54147 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49204.pre = load i64, ptr %.phi.trans.insert54147, align 8
  br label %OP1689.JUMPDEST

OP1689.JUMPDEST:                                  ; preds = %OP1689.JUMPDEST.loopexit, %OP1674.JUMPDEST
  %arg.contract.addr.val49204 = phi i64 [ %contract.input.len5471, %OP1674.JUMPDEST ], [ %arg.contract.addr.val49204.pre, %OP1689.JUMPDEST.loopexit ]
  %len.addr.85 = phi i64 [ %823, %OP1674.JUMPDEST ], [ %len.addr.357, %OP1689.JUMPDEST.loopexit ]
  %829 = add i64 %len.addr.85, -1
  %830 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.85
  %sp5509 = getelementptr i256, ptr %830, i64 -2
  %a5510 = load i256, ptr %sp5509, align 16
  %831 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49203 = load ptr, ptr %831, align 8
  %832 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a5510, ptr %arg.contract.addr.val49203, i64 %arg.contract.addr.val49204)
  %sp5513 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %829
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp5513, align 16
  %833 = and i256 %832, 1461501637330902918203684832716283019655932542975
  store i256 %833, ptr %sp5509, align 16
  br label %OP5637.JUMPDEST

OP1696.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP185.DUP1
  %len.addr.86 = phi i64 [ %len.addr.6, %OP185.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %834 = add i64 %len.addr.86, 1
  %sp5523 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.86
  store i256 1921, ptr %sp5523, align 16
  br label %OP5653.JUMPDEST

OP1700.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP190.DUP1
  %len.addr.87 = phi i64 [ %len.addr.6, %OP190.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %835 = add i64 %len.addr.87, 1
  %sp5527 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.87
  store i256 890, ptr %sp5527, align 16
  br label %OP5660.JUMPDEST

OP1704.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP195.DUP1
  %len.addr.88 = phi i64 [ %len.addr.6, %OP195.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %836 = add i64 %len.addr.88, 1
  %sp5531 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.88
  store i256 1921, ptr %sp5531, align 16
  br label %OP5731.JUMPDEST

OP1708.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP200.DUP1
  %len.addr.89 = phi i64 [ %len.addr.6, %OP200.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp5535 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.89
  store i256 1161, ptr %sp5535, align 16
  %sp5537 = getelementptr i256, ptr %sp5535, i64 1
  store i256 4, ptr %sp5537, align 16
  %837 = add i64 %len.addr.89, 3
  %sp5541 = getelementptr i256, ptr %sp5535, i64 2
  %contract.input.len.addr5543 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len5544 = load i64, ptr %contract.input.len.addr5543, align 8
  %838 = zext i64 %contract.input.len5544 to i256
  %sp5545 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %837
  %839 = add nsw i256 %838, -4
  store i256 %839, ptr %sp5541, align 16
  %sp5557 = getelementptr i256, ptr %sp5535, i64 4
  store i256 %839, ptr %sp5557, align 16
  %840 = icmp ugt i256 %839, 159
  %841 = zext i1 %840 to i256
  store i256 %841, ptr %sp5545, align 16
  br i1 %840, label %OP1723.JUMPDEST, label %OP1720.PUSH1

OP1720.PUSH1:                                     ; preds = %OP1708.JUMPDEST
  store i256 0, ptr %sp5545, align 16
  store i256 0, ptr %sp5557, align 16
  %842 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5545, i8 16)
  %.not48915 = icmp eq i8 %842, 0
  %spec.select36552 = select i1 %.not48915, i8 16, i8 %842, !prof !6
  br label %return

OP1723.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54140 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49202.pre = load i64, ptr %.phi.trans.insert54140, align 8
  br label %OP1723.JUMPDEST

OP1723.JUMPDEST:                                  ; preds = %OP1723.JUMPDEST.loopexit, %OP1708.JUMPDEST
  %arg.contract.addr.val49202 = phi i64 [ %contract.input.len5544, %OP1708.JUMPDEST ], [ %arg.contract.addr.val49202.pre, %OP1723.JUMPDEST.loopexit ]
  %len.addr.90 = phi i64 [ %837, %OP1708.JUMPDEST ], [ %len.addr.357, %OP1723.JUMPDEST.loopexit ]
  %sp5581 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.90
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp5581, align 16
  %sp5583 = getelementptr i256, ptr %sp5581, i64 -2
  %dup35584 = load i256, ptr %sp5583, align 16
  %sp5585 = getelementptr i256, ptr %sp5581, i64 1
  store i256 %dup35584, ptr %sp5585, align 16
  %843 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49201 = load ptr, ptr %843, align 8
  %844 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup35584, ptr %arg.contract.addr.val49201, i64 %arg.contract.addr.val49202)
  %sp5593 = getelementptr i256, ptr %sp5581, i64 2
  %845 = and i256 %844, 1461501637330902918203684832716283019655932542975
  store i256 %845, ptr %sp5583, align 16
  store i256 %dup35584, ptr %sp5585, align 16
  %sp5610 = getelementptr i256, ptr %sp5581, i64 3
  store i256 %dup35584, ptr %sp5610, align 16
  %846 = add i256 %dup35584, 32
  store i256 %846, ptr %sp5593, align 16
  %847 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %846, ptr %arg.contract.addr.val49201, i64 %arg.contract.addr.val49202)
  store i256 %dup35584, ptr %sp5581, align 16
  %848 = and i256 %847, 1461501637330902918203684832716283019655932542975
  %sp5640 = getelementptr i256, ptr %sp5581, i64 -1
  %swap.b5641 = load i256, ptr %sp5640, align 16
  store i256 %848, ptr %sp5640, align 16
  store i256 %swap.b5641, ptr %sp5585, align 16
  store i256 %dup35584, ptr %sp5610, align 16
  %849 = add i256 %dup35584, 64
  store i256 %849, ptr %sp5593, align 16
  %850 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %849, ptr %arg.contract.addr.val49201, i64 %arg.contract.addr.val49202)
  store i256 %850, ptr %sp5581, align 16
  store i256 %dup35584, ptr %sp5593, align 16
  %sp5668 = getelementptr i256, ptr %sp5581, i64 4
  store i256 %dup35584, ptr %sp5668, align 16
  %851 = add i256 %dup35584, 96
  store i256 %851, ptr %sp5610, align 16
  %852 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %851, ptr %arg.contract.addr.val49201, i64 %arg.contract.addr.val49202)
  store i256 %852, ptr %sp5585, align 16
  %853 = add i256 %dup35584, %swap.b5641
  store i256 %853, ptr %sp5593, align 16
  store i256 %dup35584, ptr %sp5610, align 16
  %854 = add i64 %len.addr.90, 6
  %sp5704 = getelementptr i256, ptr %sp5581, i64 5
  %855 = add i256 %dup35584, 160
  store i256 %855, ptr %sp5668, align 16
  %sp5716 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %854
  store i256 %dup35584, ptr %sp5716, align 16
  %856 = add i256 %dup35584, 128
  store i256 %856, ptr %sp5704, align 16
  %857 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %856, ptr %arg.contract.addr.val49201, i64 %arg.contract.addr.val49202)
  store i256 %857, ptr %sp5704, align 16
  %sp5732 = getelementptr i256, ptr %sp5581, i64 7
  store i256 %857, ptr %sp5732, align 16
  %858 = icmp ult i256 %857, 4294967297
  %859 = zext i1 %858 to i256
  store i256 %859, ptr %sp5716, align 16
  br i1 %858, label %OP1767.JUMPDEST, label %OP1764.PUSH1

OP1764.PUSH1:                                     ; preds = %OP1723.JUMPDEST
  store i256 0, ptr %sp5716, align 16
  store i256 0, ptr %sp5732, align 16
  %860 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5716, i8 16)
  %.not48916 = icmp eq i8 %860, 0
  %spec.select36553 = select i1 %.not48916, i8 16, i8 %860, !prof !6
  br label %return

OP1767.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1723.JUMPDEST
  %len.addr.91 = phi i64 [ %854, %OP1723.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %861 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.91
  %sp5756 = getelementptr i256, ptr %861, i64 -3
  %dup35757 = load i256, ptr %sp5756, align 16
  %sp5762 = getelementptr i256, ptr %861, i64 -1
  %b5763 = load i256, ptr %sp5762, align 16
  %862 = add i256 %b5763, %dup35757
  store i256 %862, ptr %sp5762, align 16
  %sp5766 = getelementptr i256, ptr %861, i64 -4
  %dup45767 = load i256, ptr %sp5766, align 16
  %sp5770 = getelementptr i256, ptr %861, i64 1
  %sp5774 = getelementptr i256, ptr %861, i64 2
  store i256 %862, ptr %sp5774, align 16
  %863 = add i256 %862, 32
  store i256 %863, ptr %sp5770, align 16
  %864 = icmp ule i256 %863, %dup45767
  %865 = zext i1 %864 to i256
  store i256 %865, ptr %861, align 16
  br i1 %864, label %OP1781.JUMPDEST, label %OP1778.PUSH1

OP1778.PUSH1:                                     ; preds = %OP1767.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %861, i8 0, i64 64, i1 false)
  %866 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %861, i8 16)
  %.not48917 = icmp eq i8 %866, 0
  %spec.select36554 = select i1 %.not48917, i8 16, i8 %866, !prof !6
  br label %return

OP1781.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54142 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp5804.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54142, i64 -1
  %dup15805.pre = load i256, ptr %sp5804.phi.trans.insert, align 16
  %sp5830.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54142, i64 -4
  %dup55831.pre = load i256, ptr %sp5830.phi.trans.insert, align 16
  %.pre54225 = add i256 %dup15805.pre, 32
  br label %OP1781.JUMPDEST

OP1781.JUMPDEST:                                  ; preds = %OP1781.JUMPDEST.loopexit, %OP1767.JUMPDEST
  %.pre-phi54226 = phi i256 [ %.pre54225, %OP1781.JUMPDEST.loopexit ], [ %863, %OP1767.JUMPDEST ]
  %dup55831 = phi i256 [ %dup55831.pre, %OP1781.JUMPDEST.loopexit ], [ %dup45767, %OP1767.JUMPDEST ]
  %swap.b5815 = phi i256 [ %dup15805.pre, %OP1781.JUMPDEST.loopexit ], [ %862, %OP1767.JUMPDEST ]
  %len.addr.92 = phi i64 [ %len.addr.357, %OP1781.JUMPDEST.loopexit ], [ %len.addr.91, %OP1767.JUMPDEST ]
  %867 = add i64 %len.addr.92, 1
  %868 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.92
  %sp5804 = getelementptr i256, ptr %868, i64 -1
  store i256 %swap.b5815, ptr %868, align 16
  %869 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49191 = load ptr, ptr %869, align 8
  %870 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49192 = load i64, ptr %870, align 8
  %871 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b5815, ptr %arg.contract.addr.val49191, i64 %arg.contract.addr.val49192)
  store i256 %871, ptr %sp5804, align 16
  %sp5817 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %867
  %sp5827 = getelementptr i256, ptr %868, i64 -2
  %swap.b5828 = load i256, ptr %sp5827, align 16
  store i256 %.pre-phi54226, ptr %sp5827, align 16
  store i256 %swap.b5828, ptr %868, align 16
  %sp5834 = getelementptr i256, ptr %868, i64 2
  %sp5838 = getelementptr i256, ptr %868, i64 3
  %872 = add i256 %.pre-phi54226, %871
  %873 = icmp ugt i256 %872, %dup55831
  store i256 %871, ptr %sp5838, align 16
  %874 = icmp ugt i256 %871, 4294967296
  %875 = zext i1 %874 to i256
  store i256 %875, ptr %sp5834, align 16
  %876 = or i1 %873, %874
  %877 = xor i1 %876, true
  %878 = zext i1 %877 to i256
  store i256 %878, ptr %sp5817, align 16
  br i1 %876, label %OP1802.PUSH1, label %OP1805.JUMPDEST

OP1802.PUSH1:                                     ; preds = %OP1781.JUMPDEST
  store i256 0, ptr %sp5817, align 16
  store i256 0, ptr %sp5834, align 16
  %879 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5817, i8 16)
  %.not48918 = icmp eq i8 %879, 0
  %spec.select36555 = select i1 %.not48918, i8 16, i8 %879, !prof !6
  br label %return

OP1805.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1781.JUMPDEST
  %len.addr.93 = phi i64 [ %867, %OP1781.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %880 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.93
  %sp5896 = getelementptr i256, ptr %880, i64 -1
  %swap.a5897 = load i256, ptr %sp5896, align 16
  %sp5898 = getelementptr i256, ptr %880, i64 -3
  %swap.b5899 = load i256, ptr %sp5898, align 16
  store i256 %swap.a5897, ptr %sp5898, align 16
  %sp5903 = getelementptr i256, ptr %880, i64 -2
  %swap.b5904 = load i256, ptr %sp5903, align 16
  store i256 %swap.b5899, ptr %sp5903, align 16
  store i256 %swap.b5904, ptr %sp5896, align 16
  store i256 %swap.b5904, ptr %880, align 16
  %881 = add i64 %len.addr.93, 2
  %sp5912 = getelementptr i256, ptr %880, i64 1
  %882 = add i64 %len.addr.93, 3
  %sp5914 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %881
  %883 = add i256 %swap.b5904, 31
  %sp5926 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %882
  store i256 %883, ptr %sp5926, align 16
  %884 = and i256 %883, -32
  %885 = add i256 %884, 32
  store i256 %885, ptr %sp5912, align 16
  store i256 64, ptr %sp5914, align 16
  %mload.out.slot5957 = alloca i256, align 16
  %886 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot5957, ptr %arg.ecx.addr)
  %.not48919 = icmp eq i8 %886, 0
  br i1 %.not48919, label %OP1820.MLOAD.contd, label %return, !prof !6

OP1820.MLOAD.contd:                               ; preds = %OP1805.JUMPDEST
  %mload.out5958 = load i256, ptr %mload.out.slot5957, align 16
  %swap.b5964 = load i256, ptr %sp5912, align 16
  store i256 %mload.out5958, ptr %sp5912, align 16
  %887 = add i256 %swap.b5964, %mload.out5958
  store i256 %887, ptr %sp5914, align 16
  store i256 64, ptr %sp5926, align 16
  %888 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 64, i256 %887, ptr %arg.ecx.addr)
  %.not48920 = icmp eq i8 %888, 0
  br i1 %.not48920, label %OP1826.DUP1, label %return, !prof !6

OP1826.DUP1:                                      ; preds = %OP1820.MLOAD.contd
  %dup15984 = load i256, ptr %sp5912, align 16
  %swap.b5990 = load i256, ptr %sp5903, align 16
  store i256 %dup15984, ptr %sp5903, align 16
  %swap.b5995 = load i256, ptr %sp5896, align 16
  store i256 %swap.b5990, ptr %sp5896, align 16
  %swap.b6000 = load i256, ptr %880, align 16
  store i256 %swap.b5995, ptr %880, align 16
  store i256 %swap.b6000, ptr %sp5912, align 16
  store i256 %dup15984, ptr %sp5914, align 16
  store i256 %swap.b6000, ptr %sp5926, align 16
  %sp6013 = getelementptr i256, ptr %880, i64 4
  store i256 %dup15984, ptr %sp6013, align 16
  %889 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup15984, i256 %swap.b6000, ptr %arg.ecx.addr)
  %.not48921 = icmp eq i8 %889, 0
  br i1 %.not48921, label %OP1834.PUSH1, label %return, !prof !6

OP1834.PUSH1:                                     ; preds = %OP1826.DUP1
  %890 = add i64 %len.addr.93, 5
  %b6025 = load i256, ptr %sp5914, align 16
  %891 = add i256 %b6025, 32
  store i256 %891, ptr %sp5914, align 16
  %dup46029 = load i256, ptr %sp5896, align 16
  store i256 %dup46029, ptr %sp5926, align 16
  %dup46033 = load i256, ptr %880, align 16
  store i256 %dup46033, ptr %sp6013, align 16
  %sp6038 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %890
  store i256 %dup46033, ptr %sp6038, align 16
  %sp6042 = getelementptr i256, ptr %880, i64 6
  store i256 %dup46029, ptr %sp6042, align 16
  %sp6046 = getelementptr i256, ptr %880, i64 7
  store i256 %891, ptr %sp6046, align 16
  %892 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6038)
  %.not48922 = icmp eq i8 %892, 0
  br i1 %.not48922, label %OP1842.PUSH1, label %return, !prof !6

OP1842.PUSH1:                                     ; preds = %OP1834.PUSH1
  %sp6044 = getelementptr i256, ptr %880, i64 2
  %swap.b6055 = load i256, ptr %sp6044, align 16
  store i256 %swap.b6055, ptr %sp6038, align 16
  %b6060 = load i256, ptr %sp6013, align 16
  %893 = add i256 %b6060, %swap.b6055
  %swap.b6071 = load i256, ptr %sp5926, align 16
  store i256 0, ptr %sp5926, align 16
  store i256 %swap.b6071, ptr %sp5914, align 16
  store i256 %893, ptr %sp6013, align 16
  %894 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %893, i256 0, ptr %arg.ecx.addr)
  %.not48923 = icmp eq i8 %894, 0
  br i1 %.not48923, label %OP1849.POP, label %return, !prof !6

OP1849.POP:                                       ; preds = %OP1842.PUSH1
  %swap.a6085 = load i256, ptr %sp5912, align 16
  %swap.b6087 = load i256, ptr %sp5903, align 16
  store i256 %swap.a6085, ptr %sp5903, align 16
  %sp6091 = getelementptr i256, ptr %880, i64 -5
  store i256 %swap.b6087, ptr %sp6091, align 16
  %sp6099 = getelementptr i256, ptr %880, i64 -4
  %swap.b6100 = load i256, ptr %sp6099, align 16
  store i256 11859, ptr %sp6099, align 16
  store i256 %swap.b6100, ptr %sp5912, align 16
  %895 = add i64 %len.addr.93, -4
  br label %dynamic_jump_table.preheader

OP1861.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP161.JUMPDEST
  %len.addr.94 = phi i64 [ %len.addr.5, %OP161.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %896 = add i64 %len.addr.94, 1
  %sp6111 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.94
  store i256 1092, ptr %sp6111, align 16
  br label %OP5789.JUMPDEST

OP1865.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP167.DUP1
  %len.addr.95 = phi i64 [ %len.addr.5, %OP167.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp6115 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.95
  store i256 1064, ptr %sp6115, align 16
  %sp6117 = getelementptr i256, ptr %sp6115, i64 1
  store i256 4, ptr %sp6117, align 16
  %897 = add i64 %len.addr.95, 3
  %sp6121 = getelementptr i256, ptr %sp6115, i64 2
  %contract.input.len.addr6123 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len6124 = load i64, ptr %contract.input.len.addr6123, align 8
  %898 = zext i64 %contract.input.len6124 to i256
  %sp6125 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %897
  %899 = add nsw i256 %898, -4
  store i256 %899, ptr %sp6121, align 16
  %sp6137 = getelementptr i256, ptr %sp6115, i64 4
  store i256 %899, ptr %sp6137, align 16
  %900 = icmp ugt i256 %899, 63
  %901 = zext i1 %900 to i256
  store i256 %901, ptr %sp6125, align 16
  br i1 %900, label %OP1880.JUMPDEST, label %OP1877.PUSH1

OP1877.PUSH1:                                     ; preds = %OP1865.JUMPDEST
  store i256 0, ptr %sp6125, align 16
  store i256 0, ptr %sp6137, align 16
  %902 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6125, i8 16)
  %.not48882 = icmp eq i8 %902, 0
  %spec.select36556 = select i1 %.not48882, i8 16, i8 %902, !prof !6
  br label %return

OP1880.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54131 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49190.pre = load i64, ptr %.phi.trans.insert54131, align 8
  br label %OP1880.JUMPDEST

OP1880.JUMPDEST:                                  ; preds = %OP1880.JUMPDEST.loopexit, %OP1865.JUMPDEST
  %arg.contract.addr.val49190 = phi i64 [ %contract.input.len6124, %OP1865.JUMPDEST ], [ %arg.contract.addr.val49190.pre, %OP1880.JUMPDEST.loopexit ]
  %len.addr.96 = phi i64 [ %897, %OP1865.JUMPDEST ], [ %len.addr.357, %OP1880.JUMPDEST.loopexit ]
  %903 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.96
  %sp6162 = getelementptr i256, ptr %903, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6162, align 16
  %sp6164 = getelementptr i256, ptr %903, i64 -2
  %dup26165 = load i256, ptr %sp6164, align 16
  store i256 %dup26165, ptr %903, align 16
  %904 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49189 = load ptr, ptr %904, align 8
  %905 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup26165, ptr %arg.contract.addr.val49189, i64 %arg.contract.addr.val49190)
  %906 = and i256 %905, 1461501637330902918203684832716283019655932542975
  store i256 %906, ptr %sp6164, align 16
  store i256 32, ptr %903, align 16
  %907 = add i256 %dup26165, 32
  store i256 %907, ptr %sp6162, align 16
  %908 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %907, ptr %arg.contract.addr.val49189, i64 %arg.contract.addr.val49190)
  store i256 %908, ptr %sp6162, align 16
  br label %OP5793.JUMPDEST

OP1892.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP172.DUP1
  %len.addr.97 = phi i64 [ %len.addr.5, %OP172.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp6197 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.97
  store i256 1064, ptr %sp6197, align 16
  %sp6199 = getelementptr i256, ptr %sp6197, i64 1
  store i256 4, ptr %sp6199, align 16
  %909 = add i64 %len.addr.97, 3
  %sp6203 = getelementptr i256, ptr %sp6197, i64 2
  %contract.input.len.addr6205 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len6206 = load i64, ptr %contract.input.len.addr6205, align 8
  %910 = zext i64 %contract.input.len6206 to i256
  %sp6207 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %909
  %911 = add nsw i256 %910, -4
  store i256 %911, ptr %sp6203, align 16
  %sp6219 = getelementptr i256, ptr %sp6197, i64 4
  store i256 %911, ptr %sp6219, align 16
  %912 = icmp ugt i256 %911, 63
  %913 = zext i1 %912 to i256
  store i256 %913, ptr %sp6207, align 16
  br i1 %912, label %OP1907.JUMPDEST, label %OP1904.PUSH1

OP1904.PUSH1:                                     ; preds = %OP1892.JUMPDEST
  store i256 0, ptr %sp6207, align 16
  store i256 0, ptr %sp6219, align 16
  %914 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6207, i8 16)
  %.not48873 = icmp eq i8 %914, 0
  %spec.select36557 = select i1 %.not48873, i8 16, i8 %914, !prof !6
  br label %return

OP1907.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54129 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49186.pre = load i64, ptr %.phi.trans.insert54129, align 8
  br label %OP1907.JUMPDEST

OP1907.JUMPDEST:                                  ; preds = %OP1907.JUMPDEST.loopexit, %OP1892.JUMPDEST
  %arg.contract.addr.val49186 = phi i64 [ %contract.input.len6206, %OP1892.JUMPDEST ], [ %arg.contract.addr.val49186.pre, %OP1907.JUMPDEST.loopexit ]
  %len.addr.98 = phi i64 [ %909, %OP1892.JUMPDEST ], [ %len.addr.357, %OP1907.JUMPDEST.loopexit ]
  %915 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.98
  %sp6244 = getelementptr i256, ptr %915, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6244, align 16
  %sp6246 = getelementptr i256, ptr %915, i64 -2
  %dup26247 = load i256, ptr %sp6246, align 16
  store i256 %dup26247, ptr %915, align 16
  %916 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49185 = load ptr, ptr %916, align 8
  %917 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup26247, ptr %arg.contract.addr.val49185, i64 %arg.contract.addr.val49186)
  %918 = and i256 %917, 1461501637330902918203684832716283019655932542975
  store i256 %918, ptr %sp6246, align 16
  store i256 32, ptr %915, align 16
  %919 = add i256 %dup26247, 32
  store i256 %919, ptr %sp6244, align 16
  %920 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %919, ptr %arg.contract.addr.val49185, i64 %arg.contract.addr.val49186)
  store i256 %920, ptr %sp6244, align 16
  br label %OP5844.JUMPDEST

OP1919.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP139.DUP1
  %len.addr.99 = phi i64 [ %len.addr.4, %OP139.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp6279 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.99
  store i256 1161, ptr %sp6279, align 16
  %sp6281 = getelementptr i256, ptr %sp6279, i64 1
  store i256 4, ptr %sp6281, align 16
  %921 = add i64 %len.addr.99, 3
  %sp6285 = getelementptr i256, ptr %sp6279, i64 2
  %contract.input.len.addr6287 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len6288 = load i64, ptr %contract.input.len.addr6287, align 8
  %922 = zext i64 %contract.input.len6288 to i256
  %sp6289 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %921
  %923 = add nsw i256 %922, -4
  store i256 %923, ptr %sp6285, align 16
  %sp6301 = getelementptr i256, ptr %sp6279, i64 4
  store i256 %923, ptr %sp6301, align 16
  %924 = icmp ugt i256 %923, 31
  %925 = zext i1 %924 to i256
  store i256 %925, ptr %sp6289, align 16
  br i1 %924, label %OP1934.JUMPDEST, label %OP1931.PUSH1

OP1931.PUSH1:                                     ; preds = %OP1919.JUMPDEST
  store i256 0, ptr %sp6289, align 16
  store i256 0, ptr %sp6301, align 16
  %926 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6289, i8 16)
  %.not48852 = icmp eq i8 %926, 0
  %spec.select36558 = select i1 %.not48852, i8 16, i8 %926, !prof !6
  br label %return

OP1934.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54123 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49182.pre = load i64, ptr %.phi.trans.insert54123, align 8
  br label %OP1934.JUMPDEST

OP1934.JUMPDEST:                                  ; preds = %OP1934.JUMPDEST.loopexit, %OP1919.JUMPDEST
  %arg.contract.addr.val49182 = phi i64 [ %contract.input.len6288, %OP1919.JUMPDEST ], [ %arg.contract.addr.val49182.pre, %OP1934.JUMPDEST.loopexit ]
  %len.addr.100 = phi i64 [ %921, %OP1919.JUMPDEST ], [ %len.addr.357, %OP1934.JUMPDEST.loopexit ]
  %927 = add i64 %len.addr.100, -1
  %928 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.100
  %sp6326 = getelementptr i256, ptr %928, i64 -2
  %a6327 = load i256, ptr %sp6326, align 16
  %929 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49181 = load ptr, ptr %929, align 8
  %930 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a6327, ptr %arg.contract.addr.val49181, i64 %arg.contract.addr.val49182)
  %sp6330 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %927
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6330, align 16
  %931 = and i256 %930, 1461501637330902918203684832716283019655932542975
  store i256 %931, ptr %sp6326, align 16
  br label %OP6001.JUMPDEST

OP1941.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP144.DUP1
  %len.addr.101 = phi i64 [ %len.addr.4, %OP144.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp6340 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.101
  store i256 1064, ptr %sp6340, align 16
  %sp6342 = getelementptr i256, ptr %sp6340, i64 1
  store i256 4, ptr %sp6342, align 16
  %932 = add i64 %len.addr.101, 3
  %sp6346 = getelementptr i256, ptr %sp6340, i64 2
  %contract.input.len.addr6348 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len6349 = load i64, ptr %contract.input.len.addr6348, align 8
  %933 = zext i64 %contract.input.len6349 to i256
  %sp6350 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %932
  %934 = add nsw i256 %933, -4
  store i256 %934, ptr %sp6346, align 16
  %sp6362 = getelementptr i256, ptr %sp6340, i64 4
  store i256 %934, ptr %sp6362, align 16
  %935 = icmp ugt i256 %934, 31
  %936 = zext i1 %935 to i256
  store i256 %936, ptr %sp6350, align 16
  br i1 %935, label %OP1956.JUMPDEST, label %OP1953.PUSH1

OP1953.PUSH1:                                     ; preds = %OP1941.JUMPDEST
  store i256 0, ptr %sp6350, align 16
  store i256 0, ptr %sp6362, align 16
  %937 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6350, i8 16)
  %.not48847 = icmp eq i8 %937, 0
  %spec.select36559 = select i1 %.not48847, i8 16, i8 %937, !prof !6
  br label %return

OP1956.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54121 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49180.pre = load i64, ptr %.phi.trans.insert54121, align 8
  br label %OP1956.JUMPDEST

OP1956.JUMPDEST:                                  ; preds = %OP1956.JUMPDEST.loopexit, %OP1941.JUMPDEST
  %arg.contract.addr.val49180 = phi i64 [ %contract.input.len6349, %OP1941.JUMPDEST ], [ %arg.contract.addr.val49180.pre, %OP1956.JUMPDEST.loopexit ]
  %len.addr.102 = phi i64 [ %932, %OP1941.JUMPDEST ], [ %len.addr.357, %OP1956.JUMPDEST.loopexit ]
  %938 = add i64 %len.addr.102, -1
  %939 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.102
  %sp6387 = getelementptr i256, ptr %939, i64 -2
  %a6388 = load i256, ptr %sp6387, align 16
  %940 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49179 = load ptr, ptr %940, align 8
  %941 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a6388, ptr %arg.contract.addr.val49179, i64 %arg.contract.addr.val49180)
  %sp6391 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %938
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6391, align 16
  %942 = and i256 %941, 1461501637330902918203684832716283019655932542975
  store i256 %942, ptr %sp6387, align 16
  br label %OP6116.JUMPDEST

OP1963.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP149.DUP1
  %len.addr.103 = phi i64 [ %len.addr.4, %OP149.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp6401 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.103
  store i256 1161, ptr %sp6401, align 16
  %sp6403 = getelementptr i256, ptr %sp6401, i64 1
  store i256 4, ptr %sp6403, align 16
  %943 = add i64 %len.addr.103, 3
  %sp6407 = getelementptr i256, ptr %sp6401, i64 2
  %contract.input.len.addr6409 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len6410 = load i64, ptr %contract.input.len.addr6409, align 8
  %944 = zext i64 %contract.input.len6410 to i256
  %sp6411 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %943
  %945 = add nsw i256 %944, -4
  store i256 %945, ptr %sp6407, align 16
  %sp6423 = getelementptr i256, ptr %sp6401, i64 4
  store i256 %945, ptr %sp6423, align 16
  %946 = icmp ugt i256 %945, 31
  %947 = zext i1 %946 to i256
  store i256 %947, ptr %sp6411, align 16
  br i1 %946, label %OP1978.JUMPDEST, label %OP1975.PUSH1

OP1975.PUSH1:                                     ; preds = %OP1963.JUMPDEST
  store i256 0, ptr %sp6411, align 16
  store i256 0, ptr %sp6423, align 16
  %948 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6411, i8 16)
  %.not48826 = icmp eq i8 %948, 0
  %spec.select36560 = select i1 %.not48826, i8 16, i8 %948, !prof !6
  br label %return

OP1978.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54117 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49178.pre = load i64, ptr %.phi.trans.insert54117, align 8
  br label %OP1978.JUMPDEST

OP1978.JUMPDEST:                                  ; preds = %OP1978.JUMPDEST.loopexit, %OP1963.JUMPDEST
  %arg.contract.addr.val49178 = phi i64 [ %contract.input.len6410, %OP1963.JUMPDEST ], [ %arg.contract.addr.val49178.pre, %OP1978.JUMPDEST.loopexit ]
  %len.addr.104 = phi i64 [ %943, %OP1963.JUMPDEST ], [ %len.addr.357, %OP1978.JUMPDEST.loopexit ]
  %949 = add i64 %len.addr.104, -1
  %950 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.104
  %sp6448 = getelementptr i256, ptr %950, i64 -2
  %a6449 = load i256, ptr %sp6448, align 16
  %951 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49177 = load ptr, ptr %951, align 8
  %952 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a6449, ptr %arg.contract.addr.val49177, i64 %arg.contract.addr.val49178)
  %sp6452 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %949
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6452, align 16
  %953 = and i256 %952, 1461501637330902918203684832716283019655932542975
  store i256 %953, ptr %sp6448, align 16
  br label %OP6134.JUMPDEST

OP1985.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP154.DUP1
  %len.addr.105 = phi i64 [ %len.addr.4, %OP154.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp6462 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.105
  store i256 1161, ptr %sp6462, align 16
  %sp6464 = getelementptr i256, ptr %sp6462, i64 1
  store i256 4, ptr %sp6464, align 16
  %954 = add i64 %len.addr.105, 3
  %sp6468 = getelementptr i256, ptr %sp6462, i64 2
  %contract.input.len.addr6470 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len6471 = load i64, ptr %contract.input.len.addr6470, align 8
  %955 = zext i64 %contract.input.len6471 to i256
  %sp6472 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %954
  %956 = add nsw i256 %955, -4
  store i256 %956, ptr %sp6468, align 16
  %sp6484 = getelementptr i256, ptr %sp6462, i64 4
  store i256 %956, ptr %sp6484, align 16
  %957 = icmp ugt i256 %956, 95
  %958 = zext i1 %957 to i256
  store i256 %958, ptr %sp6472, align 16
  br i1 %957, label %OP2000.JUMPDEST, label %OP1997.PUSH1

OP1997.PUSH1:                                     ; preds = %OP1985.JUMPDEST
  store i256 0, ptr %sp6472, align 16
  store i256 0, ptr %sp6484, align 16
  %959 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6472, i8 16)
  %.not48805 = icmp eq i8 %959, 0
  %spec.select36561 = select i1 %.not48805, i8 16, i8 %959, !prof !6
  br label %return

OP2000.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54114 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49176.pre = load i64, ptr %.phi.trans.insert54114, align 8
  br label %OP2000.JUMPDEST

OP2000.JUMPDEST:                                  ; preds = %OP2000.JUMPDEST.loopexit, %OP1985.JUMPDEST
  %arg.contract.addr.val49176 = phi i64 [ %contract.input.len6471, %OP1985.JUMPDEST ], [ %arg.contract.addr.val49176.pre, %OP2000.JUMPDEST.loopexit ]
  %len.addr.106 = phi i64 [ %954, %OP1985.JUMPDEST ], [ %len.addr.357, %OP2000.JUMPDEST.loopexit ]
  %960 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.106
  %sp6509 = getelementptr i256, ptr %960, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6509, align 16
  %961 = add i64 %len.addr.106, 1
  %sp6511 = getelementptr i256, ptr %960, i64 -2
  %dup26512 = load i256, ptr %sp6511, align 16
  store i256 %dup26512, ptr %960, align 16
  %962 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49175 = load ptr, ptr %962, align 8
  %963 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup26512, ptr %arg.contract.addr.val49175, i64 %arg.contract.addr.val49176)
  %sp6521 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %961
  %964 = and i256 %963, 1461501637330902918203684832716283019655932542975
  store i256 %964, ptr %sp6511, align 16
  store i256 %dup26512, ptr %960, align 16
  %sp6538 = getelementptr i256, ptr %960, i64 2
  store i256 %dup26512, ptr %sp6538, align 16
  %965 = add i256 %dup26512, 32
  store i256 %965, ptr %sp6521, align 16
  %966 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %965, ptr %arg.contract.addr.val49175, i64 %arg.contract.addr.val49176)
  %967 = and i256 %966, 1461501637330902918203684832716283019655932542975
  store i256 %967, ptr %sp6509, align 16
  store i256 64, ptr %sp6521, align 16
  %968 = add i256 %dup26512, 64
  store i256 %968, ptr %960, align 16
  %969 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %968, ptr %arg.contract.addr.val49175, i64 %arg.contract.addr.val49176)
  store i256 %969, ptr %960, align 16
  br label %OP6249.JUMPDEST

OP2021.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP110.JUMPDEST
  %len.addr.107 = phi i64 [ %len.addr.3, %OP110.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp6585 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.107
  store i256 1161, ptr %sp6585, align 16
  %sp6587 = getelementptr i256, ptr %sp6585, i64 1
  store i256 4, ptr %sp6587, align 16
  %970 = add i64 %len.addr.107, 3
  %sp6591 = getelementptr i256, ptr %sp6585, i64 2
  %contract.input.len.addr6593 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len6594 = load i64, ptr %contract.input.len.addr6593, align 8
  %971 = zext i64 %contract.input.len6594 to i256
  %sp6595 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %970
  %972 = add nsw i256 %971, -4
  store i256 %972, ptr %sp6591, align 16
  %sp6607 = getelementptr i256, ptr %sp6585, i64 4
  store i256 %972, ptr %sp6607, align 16
  %973 = icmp ugt i256 %972, 95
  %974 = zext i1 %973 to i256
  store i256 %974, ptr %sp6595, align 16
  br i1 %973, label %OP2036.JUMPDEST, label %OP2033.PUSH1

OP2033.PUSH1:                                     ; preds = %OP2021.JUMPDEST
  store i256 0, ptr %sp6595, align 16
  store i256 0, ptr %sp6607, align 16
  %975 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6595, i8 16)
  %.not49029 = icmp eq i8 %975, 0
  %spec.select36562 = select i1 %.not49029, i8 16, i8 %975, !prof !6
  br label %return

OP2036.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54195 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49170.pre = load i64, ptr %.phi.trans.insert54195, align 8
  br label %OP2036.JUMPDEST

OP2036.JUMPDEST:                                  ; preds = %OP2036.JUMPDEST.loopexit, %OP2021.JUMPDEST
  %arg.contract.addr.val49170 = phi i64 [ %contract.input.len6594, %OP2021.JUMPDEST ], [ %arg.contract.addr.val49170.pre, %OP2036.JUMPDEST.loopexit ]
  %len.addr.108 = phi i64 [ %970, %OP2021.JUMPDEST ], [ %len.addr.357, %OP2036.JUMPDEST.loopexit ]
  %sp6631 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.108
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp6631, align 16
  %sp6633 = getelementptr i256, ptr %sp6631, i64 -2
  %dup36634 = load i256, ptr %sp6633, align 16
  %sp6635 = getelementptr i256, ptr %sp6631, i64 1
  store i256 %dup36634, ptr %sp6635, align 16
  %976 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49169 = load ptr, ptr %976, align 8
  %977 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup36634, ptr %arg.contract.addr.val49169, i64 %arg.contract.addr.val49170)
  %978 = and i256 %977, 1461501637330902918203684832716283019655932542975
  store i256 %978, ptr %sp6633, align 16
  store i256 %dup36634, ptr %sp6631, align 16
  %sp6656 = getelementptr i256, ptr %sp6631, i64 2
  store i256 %dup36634, ptr %sp6656, align 16
  %979 = add i256 %dup36634, 32
  store i256 %979, ptr %sp6635, align 16
  %980 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %979, ptr %arg.contract.addr.val49169, i64 %arg.contract.addr.val49170)
  %sp6670 = getelementptr i256, ptr %sp6631, i64 -1
  %swap.b6671 = load i256, ptr %sp6670, align 16
  store i256 %980, ptr %sp6670, align 16
  %981 = add i256 %dup36634, %swap.b6671
  store i256 %981, ptr %sp6631, align 16
  store i256 %dup36634, ptr %sp6635, align 16
  %982 = add i64 %len.addr.108, 4
  %sp6692 = getelementptr i256, ptr %sp6631, i64 3
  %983 = add i256 %dup36634, 96
  store i256 %983, ptr %sp6656, align 16
  %sp6704 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %982
  store i256 %dup36634, ptr %sp6704, align 16
  %984 = add i256 %dup36634, 64
  store i256 %984, ptr %sp6692, align 16
  %985 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %984, ptr %arg.contract.addr.val49169, i64 %arg.contract.addr.val49170)
  store i256 %985, ptr %sp6692, align 16
  %sp6720 = getelementptr i256, ptr %sp6631, i64 5
  store i256 %985, ptr %sp6720, align 16
  %986 = icmp ult i256 %985, 4294967297
  %987 = zext i1 %986 to i256
  store i256 %987, ptr %sp6704, align 16
  br i1 %986, label %OP2066.JUMPDEST, label %OP2063.PUSH1

OP2063.PUSH1:                                     ; preds = %OP2036.JUMPDEST
  store i256 0, ptr %sp6704, align 16
  store i256 0, ptr %sp6720, align 16
  %988 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6704, i8 16)
  %.not49030 = icmp eq i8 %988, 0
  %spec.select36563 = select i1 %.not49030, i8 16, i8 %988, !prof !6
  br label %return

OP2066.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2036.JUMPDEST
  %len.addr.109 = phi i64 [ %982, %OP2036.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %989 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.109
  %sp6744 = getelementptr i256, ptr %989, i64 -3
  %dup36745 = load i256, ptr %sp6744, align 16
  %sp6750 = getelementptr i256, ptr %989, i64 -1
  %b6751 = load i256, ptr %sp6750, align 16
  %990 = add i256 %b6751, %dup36745
  store i256 %990, ptr %sp6750, align 16
  %sp6754 = getelementptr i256, ptr %989, i64 -4
  %dup46755 = load i256, ptr %sp6754, align 16
  %sp6758 = getelementptr i256, ptr %989, i64 1
  %sp6762 = getelementptr i256, ptr %989, i64 2
  store i256 %990, ptr %sp6762, align 16
  %991 = add i256 %990, 32
  store i256 %991, ptr %sp6758, align 16
  %992 = icmp ule i256 %991, %dup46755
  %993 = zext i1 %992 to i256
  store i256 %993, ptr %989, align 16
  br i1 %992, label %OP2080.JUMPDEST, label %OP2077.PUSH1

OP2077.PUSH1:                                     ; preds = %OP2066.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %989, i8 0, i64 64, i1 false)
  %994 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %989, i8 16)
  %.not49031 = icmp eq i8 %994, 0
  %spec.select36564 = select i1 %.not49031, i8 16, i8 %994, !prof !6
  br label %return

OP2080.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54197 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp6792.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54197, i64 -1
  %dup16793.pre = load i256, ptr %sp6792.phi.trans.insert, align 16
  %sp6818.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54197, i64 -4
  %dup56819.pre = load i256, ptr %sp6818.phi.trans.insert, align 16
  %.pre54215 = add i256 %dup16793.pre, 32
  br label %OP2080.JUMPDEST

OP2080.JUMPDEST:                                  ; preds = %OP2080.JUMPDEST.loopexit, %OP2066.JUMPDEST
  %.pre-phi54216 = phi i256 [ %.pre54215, %OP2080.JUMPDEST.loopexit ], [ %991, %OP2066.JUMPDEST ]
  %dup56819 = phi i256 [ %dup56819.pre, %OP2080.JUMPDEST.loopexit ], [ %dup46755, %OP2066.JUMPDEST ]
  %swap.b6803 = phi i256 [ %dup16793.pre, %OP2080.JUMPDEST.loopexit ], [ %990, %OP2066.JUMPDEST ]
  %len.addr.110 = phi i64 [ %len.addr.357, %OP2080.JUMPDEST.loopexit ], [ %len.addr.109, %OP2066.JUMPDEST ]
  %995 = add i64 %len.addr.110, 1
  %996 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.110
  %sp6792 = getelementptr i256, ptr %996, i64 -1
  store i256 %swap.b6803, ptr %996, align 16
  %997 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49163 = load ptr, ptr %997, align 8
  %998 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49164 = load i64, ptr %998, align 8
  %999 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b6803, ptr %arg.contract.addr.val49163, i64 %arg.contract.addr.val49164)
  store i256 %999, ptr %sp6792, align 16
  %sp6805 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %995
  %sp6815 = getelementptr i256, ptr %996, i64 -2
  %swap.b6816 = load i256, ptr %sp6815, align 16
  store i256 %.pre-phi54216, ptr %sp6815, align 16
  store i256 %swap.b6816, ptr %996, align 16
  %sp6822 = getelementptr i256, ptr %996, i64 2
  %sp6826 = getelementptr i256, ptr %996, i64 3
  %1000 = add i256 %.pre-phi54216, %999
  %1001 = icmp ugt i256 %1000, %dup56819
  store i256 %999, ptr %sp6826, align 16
  %1002 = icmp ugt i256 %999, 4294967296
  %1003 = zext i1 %1002 to i256
  store i256 %1003, ptr %sp6822, align 16
  %1004 = or i1 %1001, %1002
  %1005 = xor i1 %1004, true
  %1006 = zext i1 %1005 to i256
  store i256 %1006, ptr %sp6805, align 16
  br i1 %1004, label %OP2101.PUSH1, label %OP2104.JUMPDEST

OP2101.PUSH1:                                     ; preds = %OP2080.JUMPDEST
  store i256 0, ptr %sp6805, align 16
  store i256 0, ptr %sp6822, align 16
  %1007 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp6805, i8 16)
  %.not49032 = icmp eq i8 %1007, 0
  %spec.select36565 = select i1 %.not49032, i8 16, i8 %1007, !prof !6
  br label %return

OP2104.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2080.JUMPDEST
  %len.addr.111 = phi i64 [ %995, %OP2080.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1008 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.111
  %sp6884 = getelementptr i256, ptr %1008, i64 -1
  %swap.a6885 = load i256, ptr %sp6884, align 16
  %sp6886 = getelementptr i256, ptr %1008, i64 -3
  %swap.b6887 = load i256, ptr %sp6886, align 16
  store i256 %swap.a6885, ptr %sp6886, align 16
  %sp6891 = getelementptr i256, ptr %1008, i64 -2
  %swap.b6892 = load i256, ptr %sp6891, align 16
  store i256 %swap.b6887, ptr %sp6891, align 16
  store i256 %swap.b6892, ptr %sp6884, align 16
  store i256 %swap.b6892, ptr %1008, align 16
  %1009 = add i64 %len.addr.111, 2
  %sp6900 = getelementptr i256, ptr %1008, i64 1
  %1010 = add i64 %len.addr.111, 3
  %sp6902 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1009
  %1011 = add i256 %swap.b6892, 31
  %sp6914 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1010
  store i256 %1011, ptr %sp6914, align 16
  %1012 = and i256 %1011, -32
  %1013 = add i256 %1012, 32
  store i256 %1013, ptr %sp6900, align 16
  store i256 64, ptr %sp6902, align 16
  %ecx.memory.addr.i49574 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49575 = load ptr, ptr %ecx.memory.addr.i49574, align 8
  %ecx.memory.len.addr.i49576 = getelementptr inbounds i8, ptr %ecx.memory.i49575, i64 16
  %ecx.memory.len.i49577 = load i64, ptr %ecx.memory.len.addr.i49576, align 8, !noalias !384
  %ecx.memory.last_checkpoint.addr.i49578 = getelementptr inbounds i8, ptr %ecx.memory.i49575, i64 48
  %ecx.memory.last_checkpoint.i49579 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49578, align 8, !noalias !384
  %1014 = sub i64 %ecx.memory.len.i49577, %ecx.memory.last_checkpoint.i49579
  %1015 = icmp ult i64 %1014, 96
  br i1 %1015, label %resize.i49587, label %OP2119.MLOAD.contd, !prof !5

resize.i49587:                                    ; preds = %OP2104.JUMPDEST
  %1016 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !388
  %.not.i49588 = icmp eq i8 %1016, 0
  br i1 %.not.i49588, label %resize.i49587.OP2119.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49587.OP2119.MLOAD.contd_crit_edge:       ; preds = %resize.i49587
  %swap.b6952.pre = load i256, ptr %sp6900, align 16
  %ecx.memory.i49591.pre = load ptr, ptr %ecx.memory.addr.i49574, align 8, !alias.scope !389
  br label %OP2119.MLOAD.contd

OP2119.MLOAD.contd:                               ; preds = %resize.i49587.OP2119.MLOAD.contd_crit_edge, %OP2104.JUMPDEST
  %ecx.memory.i49591 = phi ptr [ %ecx.memory.i49591.pre, %resize.i49587.OP2119.MLOAD.contd_crit_edge ], [ %ecx.memory.i49575, %OP2104.JUMPDEST ]
  %swap.b6952 = phi i256 [ %swap.b6952.pre, %resize.i49587.OP2119.MLOAD.contd_crit_edge ], [ %1013, %OP2104.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i49581 = getelementptr inbounds i8, ptr %ecx.memory.i49575, i64 8
  %ecx.memory.buffer.ptr.shared.i49582 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49581, align 8, !noalias !384
  %ecx.memory.buffer.ptr.i49583 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49582, i64 %ecx.memory.last_checkpoint.i49579
  %slot.i49584 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49583, i64 64
  %slot.value.i49585 = load i256, ptr %slot.i49584, align 1, !noalias !384
  %1017 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49585)
  store i256 %1017, ptr %sp6900, align 16
  %1018 = add i256 %swap.b6952, %1017
  store i256 %1018, ptr %sp6902, align 16
  store i256 64, ptr %sp6914, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !389)
  %ecx.memory.len.addr.i49592 = getelementptr inbounds i8, ptr %ecx.memory.i49591, i64 16
  %ecx.memory.len.i49593 = load i64, ptr %ecx.memory.len.addr.i49592, align 8, !noalias !389
  %ecx.memory.last_checkpoint.addr.i49594 = getelementptr inbounds i8, ptr %ecx.memory.i49591, i64 48
  %ecx.memory.last_checkpoint.i49595 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49594, align 8, !noalias !389
  %1019 = sub i64 %ecx.memory.len.i49593, %ecx.memory.last_checkpoint.i49595
  %1020 = icmp ult i64 %1019, 96
  br i1 %1020, label %resize.i49602, label %OP2125.DUP1, !prof !5

resize.i49602:                                    ; preds = %OP2119.MLOAD.contd
  %1021 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i49603 = icmp eq i8 %1021, 0
  br i1 %.not.i49603, label %OP2125.DUP1, label %return, !prof !6

OP2125.DUP1:                                      ; preds = %OP2119.MLOAD.contd, %resize.i49602
  %ecx.memory.buffer.ptr.shared.addr.i49597 = getelementptr inbounds i8, ptr %ecx.memory.i49591, i64 8
  %ecx.memory.buffer.ptr.shared.i49598 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49597, align 8, !noalias !389
  %ecx.memory.buffer.ptr.i49599 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49598, i64 %ecx.memory.last_checkpoint.i49595
  %slot.i49600 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49599, i64 64
  %1022 = tail call i256 @llvm.bswap.i256(i256 %1018)
  store i256 %1022, ptr %slot.i49600, align 1, !noalias !389
  %dup16972 = load i256, ptr %sp6900, align 16
  %swap.b6978 = load i256, ptr %sp6891, align 16
  store i256 %dup16972, ptr %sp6891, align 16
  %swap.b6983 = load i256, ptr %sp6884, align 16
  store i256 %swap.b6978, ptr %sp6884, align 16
  %swap.b6988 = load i256, ptr %1008, align 16
  store i256 %swap.b6983, ptr %1008, align 16
  store i256 %swap.b6988, ptr %sp6900, align 16
  store i256 %dup16972, ptr %sp6902, align 16
  store i256 %swap.b6988, ptr %sp6914, align 16
  %sp7001 = getelementptr i256, ptr %1008, i64 4
  store i256 %dup16972, ptr %sp7001, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !392)
  %ecx.memory.i49606 = load ptr, ptr %ecx.memory.addr.i49574, align 8, !alias.scope !392
  %ecx.memory.len.addr.i49607 = getelementptr inbounds i8, ptr %ecx.memory.i49606, i64 16
  %ecx.memory.len.i49608 = load i64, ptr %ecx.memory.len.addr.i49607, align 8, !noalias !392
  %ecx.memory.last_checkpoint.addr.i49609 = getelementptr inbounds i8, ptr %ecx.memory.i49606, i64 48
  %ecx.memory.last_checkpoint.i49610 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49609, align 8, !noalias !392
  %1023 = sub i64 %ecx.memory.len.i49608, %ecx.memory.last_checkpoint.i49610
  %1024 = icmp ugt i256 %dup16972, 18446744073709551615
  %1025 = trunc i256 %dup16972 to i64
  %1026 = add i64 %1025, 32
  %1027 = icmp ugt i64 %1025, -33
  %1028 = or i1 %1024, %1027
  %1029 = select i1 %1028, i64 -1, i64 %1026
  %1030 = icmp ugt i64 %1029, %1023
  br i1 %1030, label %resize.i49617, label %OP2133.PUSH1, !prof !5

resize.i49617:                                    ; preds = %OP2125.DUP1
  %1031 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1029)
  %.not.i49618 = icmp eq i8 %1031, 0
  br i1 %.not.i49618, label %OP2133.PUSH1, label %return, !prof !6

OP2133.PUSH1:                                     ; preds = %OP2125.DUP1, %resize.i49617
  %ecx.memory.buffer.ptr.shared.addr.i49612 = getelementptr inbounds i8, ptr %ecx.memory.i49606, i64 8
  %ecx.memory.buffer.ptr.shared.i49613 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49612, align 8, !noalias !392
  %ecx.memory.buffer.ptr.i49614 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49613, i64 %ecx.memory.last_checkpoint.i49610
  %slot.i49615 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49614, i64 %1025
  %1032 = tail call i256 @llvm.bswap.i256(i256 %swap.b6988)
  store i256 %1032, ptr %slot.i49615, align 1, !noalias !392
  %1033 = add i64 %len.addr.111, 5
  %b7013 = load i256, ptr %sp6902, align 16
  %1034 = add i256 %b7013, 32
  store i256 %1034, ptr %sp6902, align 16
  %dup47017 = load i256, ptr %sp6884, align 16
  store i256 %dup47017, ptr %sp6914, align 16
  %dup47021 = load i256, ptr %1008, align 16
  store i256 %dup47021, ptr %sp7001, align 16
  %sp7026 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1033
  store i256 %dup47021, ptr %sp7026, align 16
  %sp7030 = getelementptr i256, ptr %1008, i64 6
  store i256 %dup47017, ptr %sp7030, align 16
  %sp7034 = getelementptr i256, ptr %1008, i64 7
  store i256 %1034, ptr %sp7034, align 16
  %1035 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7026)
  %.not49036 = icmp eq i8 %1035, 0
  br i1 %.not49036, label %OP2141.PUSH1, label %return, !prof !6

OP2141.PUSH1:                                     ; preds = %OP2133.PUSH1
  %sp7032 = getelementptr i256, ptr %1008, i64 2
  %swap.b7043 = load i256, ptr %sp7032, align 16
  store i256 %swap.b7043, ptr %sp7026, align 16
  %b7048 = load i256, ptr %sp7001, align 16
  %1036 = add i256 %b7048, %swap.b7043
  %swap.b7059 = load i256, ptr %sp6914, align 16
  store i256 0, ptr %sp6914, align 16
  store i256 %swap.b7059, ptr %sp6902, align 16
  store i256 %1036, ptr %sp7001, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !395)
  %ecx.memory.i49621 = load ptr, ptr %ecx.memory.addr.i49574, align 8, !alias.scope !395
  %ecx.memory.len.addr.i49622 = getelementptr inbounds i8, ptr %ecx.memory.i49621, i64 16
  %ecx.memory.len.i49623 = load i64, ptr %ecx.memory.len.addr.i49622, align 8, !noalias !395
  %ecx.memory.last_checkpoint.addr.i49624 = getelementptr inbounds i8, ptr %ecx.memory.i49621, i64 48
  %ecx.memory.last_checkpoint.i49625 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49624, align 8, !noalias !395
  %1037 = sub i64 %ecx.memory.len.i49623, %ecx.memory.last_checkpoint.i49625
  %1038 = icmp ugt i256 %1036, 18446744073709551615
  %1039 = trunc i256 %1036 to i64
  %1040 = add i64 %1039, 32
  %1041 = icmp ugt i64 %1039, -33
  %1042 = or i1 %1038, %1041
  %1043 = select i1 %1042, i64 -1, i64 %1040
  %1044 = icmp ugt i64 %1043, %1037
  br i1 %1044, label %resize.i49632, label %OP2148.POP, !prof !5

resize.i49632:                                    ; preds = %OP2141.PUSH1
  %1045 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1043)
  %.not.i49633 = icmp eq i8 %1045, 0
  br i1 %.not.i49633, label %OP2148.POP, label %return, !prof !6

OP2148.POP:                                       ; preds = %OP2141.PUSH1, %resize.i49632
  %ecx.memory.buffer.ptr.shared.addr.i49627 = getelementptr inbounds i8, ptr %ecx.memory.i49621, i64 8
  %ecx.memory.buffer.ptr.shared.i49628 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49627, align 8, !noalias !395
  %ecx.memory.buffer.ptr.i49629 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49628, i64 %ecx.memory.last_checkpoint.i49625
  %slot.i49630 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49629, i64 %1039
  store i256 0, ptr %slot.i49630, align 1, !noalias !395
  %swap.a7073 = load i256, ptr %sp6900, align 16
  %swap.b7075 = load i256, ptr %sp6891, align 16
  store i256 %swap.a7073, ptr %sp6891, align 16
  %sp7079 = getelementptr i256, ptr %1008, i64 -5
  store i256 %swap.b7075, ptr %sp7079, align 16
  %sp7087 = getelementptr i256, ptr %1008, i64 -4
  %swap.b7088 = load i256, ptr %sp7087, align 16
  store i256 13464, ptr %sp7087, align 16
  store i256 %swap.b7088, ptr %sp6900, align 16
  %1046 = add i64 %len.addr.111, -4
  br label %dynamic_jump_table.preheader

OP2160.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP116.DUP1
  %len.addr.112 = phi i64 [ %len.addr.3, %OP116.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %1047 = add i64 %len.addr.112, 1
  %sp7099 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.112
  store i256 1921, ptr %sp7099, align 16
  br label %OP6359.JUMPDEST

OP2164.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP121.DUP1
  %len.addr.113 = phi i64 [ %len.addr.3, %OP121.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp7103 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.113
  store i256 1161, ptr %sp7103, align 16
  %sp7105 = getelementptr i256, ptr %sp7103, i64 1
  store i256 4, ptr %sp7105, align 16
  %1048 = add i64 %len.addr.113, 3
  %sp7109 = getelementptr i256, ptr %sp7103, i64 2
  %contract.input.len.addr7111 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len7112 = load i64, ptr %contract.input.len.addr7111, align 8
  %1049 = zext i64 %contract.input.len7112 to i256
  %sp7113 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1048
  %1050 = add nsw i256 %1049, -4
  store i256 %1050, ptr %sp7109, align 16
  %sp7125 = getelementptr i256, ptr %sp7103, i64 4
  store i256 %1050, ptr %sp7125, align 16
  %1051 = icmp ugt i256 %1050, 223
  %1052 = zext i1 %1051 to i256
  store i256 %1052, ptr %sp7113, align 16
  br i1 %1051, label %OP2179.JUMPDEST, label %OP2176.PUSH1

OP2176.PUSH1:                                     ; preds = %OP2164.JUMPDEST
  store i256 0, ptr %sp7113, align 16
  store i256 0, ptr %sp7125, align 16
  %1053 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7113, i8 16)
  %.not49019 = icmp eq i8 %1053, 0
  %spec.select36566 = select i1 %.not49019, i8 16, i8 %1053, !prof !6
  br label %return

OP2179.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54188 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49162.pre = load i64, ptr %.phi.trans.insert54188, align 8
  br label %OP2179.JUMPDEST

OP2179.JUMPDEST:                                  ; preds = %OP2179.JUMPDEST.loopexit, %OP2164.JUMPDEST
  %arg.contract.addr.val49162 = phi i64 [ %contract.input.len7112, %OP2164.JUMPDEST ], [ %arg.contract.addr.val49162.pre, %OP2179.JUMPDEST.loopexit ]
  %len.addr.114 = phi i64 [ %1048, %OP2164.JUMPDEST ], [ %len.addr.357, %OP2179.JUMPDEST.loopexit ]
  %sp7149 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.114
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp7149, align 16
  %sp7151 = getelementptr i256, ptr %sp7149, i64 -2
  %dup37152 = load i256, ptr %sp7151, align 16
  %sp7153 = getelementptr i256, ptr %sp7149, i64 1
  store i256 %dup37152, ptr %sp7153, align 16
  %1054 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49161 = load ptr, ptr %1054, align 8
  %1055 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup37152, ptr %arg.contract.addr.val49161, i64 %arg.contract.addr.val49162)
  %sp7161 = getelementptr i256, ptr %sp7149, i64 2
  %1056 = and i256 %1055, 1461501637330902918203684832716283019655932542975
  store i256 %1056, ptr %sp7151, align 16
  store i256 %dup37152, ptr %sp7153, align 16
  %sp7178 = getelementptr i256, ptr %sp7149, i64 3
  store i256 %dup37152, ptr %sp7178, align 16
  %1057 = add i256 %dup37152, 32
  store i256 %1057, ptr %sp7161, align 16
  %1058 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1057, ptr %arg.contract.addr.val49161, i64 %arg.contract.addr.val49162)
  store i256 %dup37152, ptr %sp7149, align 16
  %1059 = and i256 %1058, 1461501637330902918203684832716283019655932542975
  %sp7208 = getelementptr i256, ptr %sp7149, i64 -1
  %swap.b7209 = load i256, ptr %sp7208, align 16
  store i256 %1059, ptr %sp7208, align 16
  store i256 %swap.b7209, ptr %sp7153, align 16
  store i256 %dup37152, ptr %sp7178, align 16
  %1060 = add i256 %dup37152, 64
  store i256 %1060, ptr %sp7161, align 16
  %1061 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1060, ptr %arg.contract.addr.val49161, i64 %arg.contract.addr.val49162)
  store i256 %1061, ptr %sp7149, align 16
  store i256 %dup37152, ptr %sp7161, align 16
  %sp7236 = getelementptr i256, ptr %sp7149, i64 4
  store i256 %dup37152, ptr %sp7236, align 16
  %1062 = add i256 %dup37152, 96
  store i256 %1062, ptr %sp7178, align 16
  %1063 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1062, ptr %arg.contract.addr.val49161, i64 %arg.contract.addr.val49162)
  store i256 %1063, ptr %sp7153, align 16
  store i256 %swap.b7209, ptr %sp7178, align 16
  %sp7257 = getelementptr i256, ptr %sp7149, i64 5
  store i256 %dup37152, ptr %sp7257, align 16
  %1064 = add i256 %dup37152, 128
  store i256 %1064, ptr %sp7236, align 16
  %1065 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1064, ptr %arg.contract.addr.val49161, i64 %arg.contract.addr.val49162)
  store i256 %1065, ptr %sp7161, align 16
  store i256 %dup37152, ptr %sp7236, align 16
  %sp7278 = getelementptr i256, ptr %sp7149, i64 6
  store i256 %dup37152, ptr %sp7278, align 16
  %1066 = add i256 %dup37152, 160
  store i256 %1066, ptr %sp7257, align 16
  %1067 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1066, ptr %arg.contract.addr.val49161, i64 %arg.contract.addr.val49162)
  store i256 %1067, ptr %sp7178, align 16
  %1068 = add i256 %dup37152, %swap.b7209
  store i256 %1068, ptr %sp7236, align 16
  store i256 %dup37152, ptr %sp7257, align 16
  %1069 = add i64 %len.addr.114, 8
  %sp7314 = getelementptr i256, ptr %sp7149, i64 7
  %1070 = add i256 %dup37152, 224
  store i256 %1070, ptr %sp7278, align 16
  %sp7326 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1069
  store i256 %dup37152, ptr %sp7326, align 16
  %1071 = add i256 %dup37152, 192
  store i256 %1071, ptr %sp7314, align 16
  %1072 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1071, ptr %arg.contract.addr.val49161, i64 %arg.contract.addr.val49162)
  store i256 %1072, ptr %sp7314, align 16
  %sp7342 = getelementptr i256, ptr %sp7149, i64 9
  store i256 %1072, ptr %sp7342, align 16
  %1073 = icmp ult i256 %1072, 4294967297
  %1074 = zext i1 %1073 to i256
  store i256 %1074, ptr %sp7326, align 16
  br i1 %1073, label %OP2233.JUMPDEST, label %OP2230.PUSH1

OP2230.PUSH1:                                     ; preds = %OP2179.JUMPDEST
  store i256 0, ptr %sp7326, align 16
  store i256 0, ptr %sp7342, align 16
  %1075 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7326, i8 16)
  %.not49020 = icmp eq i8 %1075, 0
  %spec.select36567 = select i1 %.not49020, i8 16, i8 %1075, !prof !6
  br label %return

OP2233.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2179.JUMPDEST
  %len.addr.115 = phi i64 [ %1069, %OP2179.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1076 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.115
  %sp7366 = getelementptr i256, ptr %1076, i64 -3
  %dup37367 = load i256, ptr %sp7366, align 16
  %sp7372 = getelementptr i256, ptr %1076, i64 -1
  %b7373 = load i256, ptr %sp7372, align 16
  %1077 = add i256 %b7373, %dup37367
  store i256 %1077, ptr %sp7372, align 16
  %sp7376 = getelementptr i256, ptr %1076, i64 -4
  %dup47377 = load i256, ptr %sp7376, align 16
  %sp7380 = getelementptr i256, ptr %1076, i64 1
  %sp7384 = getelementptr i256, ptr %1076, i64 2
  store i256 %1077, ptr %sp7384, align 16
  %1078 = add i256 %1077, 32
  store i256 %1078, ptr %sp7380, align 16
  %1079 = icmp ule i256 %1078, %dup47377
  %1080 = zext i1 %1079 to i256
  store i256 %1080, ptr %1076, align 16
  br i1 %1079, label %OP2247.JUMPDEST, label %OP2244.PUSH1

OP2244.PUSH1:                                     ; preds = %OP2233.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %1076, i8 0, i64 64, i1 false)
  %1081 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1076, i8 16)
  %.not49021 = icmp eq i8 %1081, 0
  %spec.select36568 = select i1 %.not49021, i8 16, i8 %1081, !prof !6
  br label %return

OP2247.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54190 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp7414.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54190, i64 -1
  %dup17415.pre = load i256, ptr %sp7414.phi.trans.insert, align 16
  %sp7440.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54190, i64 -4
  %dup57441.pre = load i256, ptr %sp7440.phi.trans.insert, align 16
  %.pre54217 = add i256 %dup17415.pre, 32
  br label %OP2247.JUMPDEST

OP2247.JUMPDEST:                                  ; preds = %OP2247.JUMPDEST.loopexit, %OP2233.JUMPDEST
  %.pre-phi54218 = phi i256 [ %.pre54217, %OP2247.JUMPDEST.loopexit ], [ %1078, %OP2233.JUMPDEST ]
  %dup57441 = phi i256 [ %dup57441.pre, %OP2247.JUMPDEST.loopexit ], [ %dup47377, %OP2233.JUMPDEST ]
  %swap.b7425 = phi i256 [ %dup17415.pre, %OP2247.JUMPDEST.loopexit ], [ %1077, %OP2233.JUMPDEST ]
  %len.addr.116 = phi i64 [ %len.addr.357, %OP2247.JUMPDEST.loopexit ], [ %len.addr.115, %OP2233.JUMPDEST ]
  %1082 = add i64 %len.addr.116, 1
  %1083 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.116
  %sp7414 = getelementptr i256, ptr %1083, i64 -1
  store i256 %swap.b7425, ptr %1083, align 16
  %1084 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49147 = load ptr, ptr %1084, align 8
  %1085 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49148 = load i64, ptr %1085, align 8
  %1086 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b7425, ptr %arg.contract.addr.val49147, i64 %arg.contract.addr.val49148)
  store i256 %1086, ptr %sp7414, align 16
  %sp7427 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1082
  %sp7437 = getelementptr i256, ptr %1083, i64 -2
  %swap.b7438 = load i256, ptr %sp7437, align 16
  store i256 %.pre-phi54218, ptr %sp7437, align 16
  store i256 %swap.b7438, ptr %1083, align 16
  %sp7444 = getelementptr i256, ptr %1083, i64 2
  %sp7448 = getelementptr i256, ptr %1083, i64 3
  %1087 = add i256 %.pre-phi54218, %1086
  %1088 = icmp ugt i256 %1087, %dup57441
  store i256 %1086, ptr %sp7448, align 16
  %1089 = icmp ugt i256 %1086, 4294967296
  %1090 = zext i1 %1089 to i256
  store i256 %1090, ptr %sp7444, align 16
  %1091 = or i1 %1088, %1089
  %1092 = xor i1 %1091, true
  %1093 = zext i1 %1092 to i256
  store i256 %1093, ptr %sp7427, align 16
  br i1 %1091, label %OP2268.PUSH1, label %OP2271.JUMPDEST

OP2268.PUSH1:                                     ; preds = %OP2247.JUMPDEST
  store i256 0, ptr %sp7427, align 16
  store i256 0, ptr %sp7444, align 16
  %1094 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7427, i8 16)
  %.not49022 = icmp eq i8 %1094, 0
  %spec.select36569 = select i1 %.not49022, i8 16, i8 %1094, !prof !6
  br label %return

OP2271.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2247.JUMPDEST
  %len.addr.117 = phi i64 [ %1082, %OP2247.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1095 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.117
  %sp7506 = getelementptr i256, ptr %1095, i64 -1
  %swap.a7507 = load i256, ptr %sp7506, align 16
  %sp7508 = getelementptr i256, ptr %1095, i64 -3
  %swap.b7509 = load i256, ptr %sp7508, align 16
  store i256 %swap.a7507, ptr %sp7508, align 16
  %sp7513 = getelementptr i256, ptr %1095, i64 -2
  %swap.b7514 = load i256, ptr %sp7513, align 16
  store i256 %swap.b7509, ptr %sp7513, align 16
  store i256 %swap.b7514, ptr %sp7506, align 16
  store i256 %swap.b7514, ptr %1095, align 16
  %1096 = add i64 %len.addr.117, 2
  %sp7522 = getelementptr i256, ptr %1095, i64 1
  %1097 = add i64 %len.addr.117, 3
  %sp7524 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1096
  %1098 = add i256 %swap.b7514, 31
  %sp7536 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1097
  store i256 %1098, ptr %sp7536, align 16
  %1099 = and i256 %1098, -32
  %1100 = add i256 %1099, 32
  store i256 %1100, ptr %sp7522, align 16
  store i256 64, ptr %sp7524, align 16
  %ecx.memory.addr.i49635 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49636 = load ptr, ptr %ecx.memory.addr.i49635, align 8
  %ecx.memory.len.addr.i49637 = getelementptr inbounds i8, ptr %ecx.memory.i49636, i64 16
  %ecx.memory.len.i49638 = load i64, ptr %ecx.memory.len.addr.i49637, align 8, !noalias !398
  %ecx.memory.last_checkpoint.addr.i49639 = getelementptr inbounds i8, ptr %ecx.memory.i49636, i64 48
  %ecx.memory.last_checkpoint.i49640 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49639, align 8, !noalias !398
  %1101 = sub i64 %ecx.memory.len.i49638, %ecx.memory.last_checkpoint.i49640
  %1102 = icmp ult i64 %1101, 96
  br i1 %1102, label %resize.i49648, label %OP2286.MLOAD.contd, !prof !5

resize.i49648:                                    ; preds = %OP2271.JUMPDEST
  %1103 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !402
  %.not.i49649 = icmp eq i8 %1103, 0
  br i1 %.not.i49649, label %resize.i49648.OP2286.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49648.OP2286.MLOAD.contd_crit_edge:       ; preds = %resize.i49648
  %swap.b7574.pre = load i256, ptr %sp7522, align 16
  %ecx.memory.i49652.pre = load ptr, ptr %ecx.memory.addr.i49635, align 8, !alias.scope !403
  br label %OP2286.MLOAD.contd

OP2286.MLOAD.contd:                               ; preds = %resize.i49648.OP2286.MLOAD.contd_crit_edge, %OP2271.JUMPDEST
  %ecx.memory.i49652 = phi ptr [ %ecx.memory.i49652.pre, %resize.i49648.OP2286.MLOAD.contd_crit_edge ], [ %ecx.memory.i49636, %OP2271.JUMPDEST ]
  %swap.b7574 = phi i256 [ %swap.b7574.pre, %resize.i49648.OP2286.MLOAD.contd_crit_edge ], [ %1100, %OP2271.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i49642 = getelementptr inbounds i8, ptr %ecx.memory.i49636, i64 8
  %ecx.memory.buffer.ptr.shared.i49643 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49642, align 8, !noalias !398
  %ecx.memory.buffer.ptr.i49644 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49643, i64 %ecx.memory.last_checkpoint.i49640
  %slot.i49645 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49644, i64 64
  %slot.value.i49646 = load i256, ptr %slot.i49645, align 1, !noalias !398
  %1104 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49646)
  store i256 %1104, ptr %sp7522, align 16
  %1105 = add i256 %swap.b7574, %1104
  store i256 %1105, ptr %sp7524, align 16
  store i256 64, ptr %sp7536, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !403)
  %ecx.memory.len.addr.i49653 = getelementptr inbounds i8, ptr %ecx.memory.i49652, i64 16
  %ecx.memory.len.i49654 = load i64, ptr %ecx.memory.len.addr.i49653, align 8, !noalias !403
  %ecx.memory.last_checkpoint.addr.i49655 = getelementptr inbounds i8, ptr %ecx.memory.i49652, i64 48
  %ecx.memory.last_checkpoint.i49656 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49655, align 8, !noalias !403
  %1106 = sub i64 %ecx.memory.len.i49654, %ecx.memory.last_checkpoint.i49656
  %1107 = icmp ult i64 %1106, 96
  br i1 %1107, label %resize.i49663, label %OP2292.DUP1, !prof !5

resize.i49663:                                    ; preds = %OP2286.MLOAD.contd
  %1108 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i49664 = icmp eq i8 %1108, 0
  br i1 %.not.i49664, label %OP2292.DUP1, label %return, !prof !6

OP2292.DUP1:                                      ; preds = %OP2286.MLOAD.contd, %resize.i49663
  %ecx.memory.buffer.ptr.shared.addr.i49658 = getelementptr inbounds i8, ptr %ecx.memory.i49652, i64 8
  %ecx.memory.buffer.ptr.shared.i49659 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49658, align 8, !noalias !403
  %ecx.memory.buffer.ptr.i49660 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49659, i64 %ecx.memory.last_checkpoint.i49656
  %slot.i49661 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49660, i64 64
  %1109 = tail call i256 @llvm.bswap.i256(i256 %1105)
  store i256 %1109, ptr %slot.i49661, align 1, !noalias !403
  %dup17594 = load i256, ptr %sp7522, align 16
  %swap.b7600 = load i256, ptr %sp7513, align 16
  store i256 %dup17594, ptr %sp7513, align 16
  %swap.b7605 = load i256, ptr %sp7506, align 16
  store i256 %swap.b7600, ptr %sp7506, align 16
  %swap.b7610 = load i256, ptr %1095, align 16
  store i256 %swap.b7605, ptr %1095, align 16
  store i256 %swap.b7610, ptr %sp7522, align 16
  store i256 %dup17594, ptr %sp7524, align 16
  store i256 %swap.b7610, ptr %sp7536, align 16
  %sp7623 = getelementptr i256, ptr %1095, i64 4
  store i256 %dup17594, ptr %sp7623, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !406)
  %ecx.memory.i49667 = load ptr, ptr %ecx.memory.addr.i49635, align 8, !alias.scope !406
  %ecx.memory.len.addr.i49668 = getelementptr inbounds i8, ptr %ecx.memory.i49667, i64 16
  %ecx.memory.len.i49669 = load i64, ptr %ecx.memory.len.addr.i49668, align 8, !noalias !406
  %ecx.memory.last_checkpoint.addr.i49670 = getelementptr inbounds i8, ptr %ecx.memory.i49667, i64 48
  %ecx.memory.last_checkpoint.i49671 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49670, align 8, !noalias !406
  %1110 = sub i64 %ecx.memory.len.i49669, %ecx.memory.last_checkpoint.i49671
  %1111 = icmp ugt i256 %dup17594, 18446744073709551615
  %1112 = trunc i256 %dup17594 to i64
  %1113 = add i64 %1112, 32
  %1114 = icmp ugt i64 %1112, -33
  %1115 = or i1 %1111, %1114
  %1116 = select i1 %1115, i64 -1, i64 %1113
  %1117 = icmp ugt i64 %1116, %1110
  br i1 %1117, label %resize.i49678, label %OP2300.PUSH1, !prof !5

resize.i49678:                                    ; preds = %OP2292.DUP1
  %1118 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1116)
  %.not.i49679 = icmp eq i8 %1118, 0
  br i1 %.not.i49679, label %OP2300.PUSH1, label %return, !prof !6

OP2300.PUSH1:                                     ; preds = %OP2292.DUP1, %resize.i49678
  %ecx.memory.buffer.ptr.shared.addr.i49673 = getelementptr inbounds i8, ptr %ecx.memory.i49667, i64 8
  %ecx.memory.buffer.ptr.shared.i49674 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49673, align 8, !noalias !406
  %ecx.memory.buffer.ptr.i49675 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49674, i64 %ecx.memory.last_checkpoint.i49671
  %slot.i49676 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49675, i64 %1112
  %1119 = tail call i256 @llvm.bswap.i256(i256 %swap.b7610)
  store i256 %1119, ptr %slot.i49676, align 1, !noalias !406
  %1120 = add i64 %len.addr.117, 5
  %b7635 = load i256, ptr %sp7524, align 16
  %1121 = add i256 %b7635, 32
  store i256 %1121, ptr %sp7524, align 16
  %dup47639 = load i256, ptr %sp7506, align 16
  store i256 %dup47639, ptr %sp7536, align 16
  %dup47643 = load i256, ptr %1095, align 16
  store i256 %dup47643, ptr %sp7623, align 16
  %sp7648 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1120
  store i256 %dup47643, ptr %sp7648, align 16
  %sp7652 = getelementptr i256, ptr %1095, i64 6
  store i256 %dup47639, ptr %sp7652, align 16
  %sp7656 = getelementptr i256, ptr %1095, i64 7
  store i256 %1121, ptr %sp7656, align 16
  %1122 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7648)
  %.not49026 = icmp eq i8 %1122, 0
  br i1 %.not49026, label %OP2308.PUSH1, label %return, !prof !6

OP2308.PUSH1:                                     ; preds = %OP2300.PUSH1
  %sp7654 = getelementptr i256, ptr %1095, i64 2
  %swap.b7665 = load i256, ptr %sp7654, align 16
  store i256 %swap.b7665, ptr %sp7648, align 16
  %b7670 = load i256, ptr %sp7623, align 16
  %1123 = add i256 %b7670, %swap.b7665
  %swap.b7681 = load i256, ptr %sp7536, align 16
  store i256 0, ptr %sp7536, align 16
  store i256 %swap.b7681, ptr %sp7524, align 16
  store i256 %1123, ptr %sp7623, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !409)
  %ecx.memory.i49682 = load ptr, ptr %ecx.memory.addr.i49635, align 8, !alias.scope !409
  %ecx.memory.len.addr.i49683 = getelementptr inbounds i8, ptr %ecx.memory.i49682, i64 16
  %ecx.memory.len.i49684 = load i64, ptr %ecx.memory.len.addr.i49683, align 8, !noalias !409
  %ecx.memory.last_checkpoint.addr.i49685 = getelementptr inbounds i8, ptr %ecx.memory.i49682, i64 48
  %ecx.memory.last_checkpoint.i49686 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49685, align 8, !noalias !409
  %1124 = sub i64 %ecx.memory.len.i49684, %ecx.memory.last_checkpoint.i49686
  %1125 = icmp ugt i256 %1123, 18446744073709551615
  %1126 = trunc i256 %1123 to i64
  %1127 = add i64 %1126, 32
  %1128 = icmp ugt i64 %1126, -33
  %1129 = or i1 %1125, %1128
  %1130 = select i1 %1129, i64 -1, i64 %1127
  %1131 = icmp ugt i64 %1130, %1124
  br i1 %1131, label %resize.i49693, label %OP2315.POP, !prof !5

resize.i49693:                                    ; preds = %OP2308.PUSH1
  %1132 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1130)
  %.not.i49694 = icmp eq i8 %1132, 0
  br i1 %.not.i49694, label %OP2315.POP, label %return, !prof !6

OP2315.POP:                                       ; preds = %OP2308.PUSH1, %resize.i49693
  %ecx.memory.buffer.ptr.shared.addr.i49688 = getelementptr inbounds i8, ptr %ecx.memory.i49682, i64 8
  %ecx.memory.buffer.ptr.shared.i49689 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49688, align 8, !noalias !409
  %ecx.memory.buffer.ptr.i49690 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49689, i64 %ecx.memory.last_checkpoint.i49686
  %slot.i49691 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49690, i64 %1126
  store i256 0, ptr %slot.i49691, align 1, !noalias !409
  %swap.a7695 = load i256, ptr %sp7522, align 16
  %swap.b7697 = load i256, ptr %sp7513, align 16
  store i256 %swap.a7695, ptr %sp7513, align 16
  %sp7701 = getelementptr i256, ptr %1095, i64 -5
  store i256 %swap.b7697, ptr %sp7701, align 16
  %sp7709 = getelementptr i256, ptr %1095, i64 -4
  %swap.b7710 = load i256, ptr %sp7709, align 16
  store i256 13641, ptr %sp7709, align 16
  store i256 %swap.b7710, ptr %sp7522, align 16
  %1133 = add i64 %len.addr.117, -4
  br label %dynamic_jump_table.preheader

OP2327.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP88.DUP1
  %len.addr.118 = phi i64 [ %len.addr.2, %OP88.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp7721 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.118
  store i256 1161, ptr %sp7721, align 16
  %sp7723 = getelementptr i256, ptr %sp7721, i64 1
  store i256 4, ptr %sp7723, align 16
  %1134 = add i64 %len.addr.118, 3
  %sp7727 = getelementptr i256, ptr %sp7721, i64 2
  %contract.input.len.addr7729 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len7730 = load i64, ptr %contract.input.len.addr7729, align 8
  %1135 = zext i64 %contract.input.len7730 to i256
  %sp7731 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1134
  %1136 = add nsw i256 %1135, -4
  store i256 %1136, ptr %sp7727, align 16
  %sp7743 = getelementptr i256, ptr %sp7721, i64 4
  store i256 %1136, ptr %sp7743, align 16
  %1137 = icmp ugt i256 %1136, 223
  %1138 = zext i1 %1137 to i256
  store i256 %1138, ptr %sp7731, align 16
  br i1 %1137, label %OP2342.JUMPDEST, label %OP2339.PUSH1

OP2339.PUSH1:                                     ; preds = %OP2327.JUMPDEST
  store i256 0, ptr %sp7731, align 16
  store i256 0, ptr %sp7743, align 16
  %1139 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7731, i8 16)
  %.not48981 = icmp eq i8 %1139, 0
  %spec.select36570 = select i1 %.not48981, i8 16, i8 %1139, !prof !6
  br label %return

OP2342.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54176 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49146.pre = load i64, ptr %.phi.trans.insert54176, align 8
  br label %OP2342.JUMPDEST

OP2342.JUMPDEST:                                  ; preds = %OP2342.JUMPDEST.loopexit, %OP2327.JUMPDEST
  %arg.contract.addr.val49146 = phi i64 [ %contract.input.len7730, %OP2327.JUMPDEST ], [ %arg.contract.addr.val49146.pre, %OP2342.JUMPDEST.loopexit ]
  %len.addr.119 = phi i64 [ %1134, %OP2327.JUMPDEST ], [ %len.addr.357, %OP2342.JUMPDEST.loopexit ]
  %1140 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.119
  %sp7768 = getelementptr i256, ptr %1140, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp7768, align 16
  %sp7770 = getelementptr i256, ptr %1140, i64 -2
  %dup27771 = load i256, ptr %sp7770, align 16
  store i256 %dup27771, ptr %1140, align 16
  %1141 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49145 = load ptr, ptr %1141, align 8
  %1142 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup27771, ptr %arg.contract.addr.val49145, i64 %arg.contract.addr.val49146)
  %sp7780 = getelementptr i256, ptr %1140, i64 1
  %1143 = and i256 %1142, 1461501637330902918203684832716283019655932542975
  store i256 %1143, ptr %sp7770, align 16
  store i256 %dup27771, ptr %1140, align 16
  %sp7797 = getelementptr i256, ptr %1140, i64 2
  store i256 %dup27771, ptr %sp7797, align 16
  %1144 = add i256 %dup27771, 32
  store i256 %1144, ptr %sp7780, align 16
  %1145 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1144, ptr %arg.contract.addr.val49145, i64 %arg.contract.addr.val49146)
  %1146 = and i256 %1145, 1461501637330902918203684832716283019655932542975
  store i256 %1146, ptr %sp7768, align 16
  store i256 %dup27771, ptr %1140, align 16
  store i256 %dup27771, ptr %sp7797, align 16
  %1147 = add i256 %dup27771, 64
  store i256 %1147, ptr %sp7780, align 16
  %1148 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1147, ptr %arg.contract.addr.val49145, i64 %arg.contract.addr.val49146)
  store i256 %1148, ptr %1140, align 16
  store i256 %dup27771, ptr %sp7780, align 16
  %sp7855 = getelementptr i256, ptr %1140, i64 3
  store i256 %dup27771, ptr %sp7855, align 16
  %1149 = add i256 %dup27771, 96
  store i256 %1149, ptr %sp7797, align 16
  %1150 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1149, ptr %arg.contract.addr.val49145, i64 %arg.contract.addr.val49146)
  store i256 %1150, ptr %sp7780, align 16
  store i256 %dup27771, ptr %sp7797, align 16
  store i256 255, ptr %sp7855, align 16
  %1151 = add i64 %len.addr.119, 5
  %sp7874 = getelementptr i256, ptr %1140, i64 4
  %sp7878 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1151
  store i256 %dup27771, ptr %sp7878, align 16
  %1152 = add i256 %dup27771, 128
  store i256 %1152, ptr %sp7874, align 16
  %1153 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1152, ptr %arg.contract.addr.val49145, i64 %arg.contract.addr.val49146)
  %1154 = and i256 %1153, 255
  store i256 %1154, ptr %sp7797, align 16
  store i256 %dup27771, ptr %sp7855, align 16
  store i256 %dup27771, ptr %sp7878, align 16
  %1155 = add i256 %dup27771, 160
  store i256 %1155, ptr %sp7874, align 16
  %1156 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1155, ptr %arg.contract.addr.val49145, i64 %arg.contract.addr.val49146)
  store i256 %1156, ptr %sp7855, align 16
  store i256 192, ptr %sp7878, align 16
  %1157 = add i256 %dup27771, 192
  store i256 %1157, ptr %sp7874, align 16
  %1158 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1157, ptr %arg.contract.addr.val49145, i64 %arg.contract.addr.val49146)
  store i256 %1158, ptr %sp7874, align 16
  br label %OP6515.JUMPDEST

OP2385.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP93.DUP1
  %len.addr.120 = phi i64 [ %len.addr.2, %OP93.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp7936 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.120
  store i256 1161, ptr %sp7936, align 16
  %sp7938 = getelementptr i256, ptr %sp7936, i64 1
  store i256 4, ptr %sp7938, align 16
  %1159 = add i64 %len.addr.120, 3
  %sp7942 = getelementptr i256, ptr %sp7936, i64 2
  %contract.input.len.addr7944 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len7945 = load i64, ptr %contract.input.len.addr7944, align 8
  %1160 = zext i64 %contract.input.len7945 to i256
  %sp7946 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1159
  %1161 = add nsw i256 %1160, -4
  store i256 %1161, ptr %sp7942, align 16
  %sp7958 = getelementptr i256, ptr %sp7936, i64 4
  store i256 %1161, ptr %sp7958, align 16
  %1162 = icmp ugt i256 %1161, 31
  %1163 = zext i1 %1162 to i256
  store i256 %1163, ptr %sp7946, align 16
  br i1 %1162, label %OP2400.JUMPDEST, label %OP2397.PUSH1

OP2397.PUSH1:                                     ; preds = %OP2385.JUMPDEST
  store i256 0, ptr %sp7946, align 16
  store i256 0, ptr %sp7958, align 16
  %1164 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp7946, i8 16)
  %.not48966 = icmp eq i8 %1164, 0
  %spec.select36571 = select i1 %.not48966, i8 16, i8 %1164, !prof !6
  br label %return

OP2400.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54163 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49132.pre = load i64, ptr %.phi.trans.insert54163, align 8
  br label %OP2400.JUMPDEST

OP2400.JUMPDEST:                                  ; preds = %OP2400.JUMPDEST.loopexit, %OP2385.JUMPDEST
  %arg.contract.addr.val49132 = phi i64 [ %contract.input.len7945, %OP2385.JUMPDEST ], [ %arg.contract.addr.val49132.pre, %OP2400.JUMPDEST.loopexit ]
  %len.addr.121 = phi i64 [ %1159, %OP2385.JUMPDEST ], [ %len.addr.357, %OP2400.JUMPDEST.loopexit ]
  %1165 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.121
  %sp7982 = getelementptr i256, ptr %1165, i64 -2
  %dup27983 = load i256, ptr %sp7982, align 16
  %sp7988 = getelementptr i256, ptr %1165, i64 -1
  %b7989 = load i256, ptr %sp7988, align 16
  %1166 = add i256 %b7989, %dup27983
  store i256 %1166, ptr %sp7982, align 16
  store i256 %dup27983, ptr %sp7988, align 16
  %1167 = add i64 %len.addr.121, 2
  %sp8001 = getelementptr i256, ptr %1165, i64 1
  %1168 = add i256 %dup27983, 32
  store i256 %1168, ptr %1165, align 16
  store i256 %dup27983, ptr %sp8001, align 16
  %1169 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49131 = load ptr, ptr %1169, align 8
  %1170 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup27983, ptr %arg.contract.addr.val49131, i64 %arg.contract.addr.val49132)
  store i256 %1170, ptr %sp8001, align 16
  %sp8017 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1167
  %sp8021 = getelementptr i256, ptr %1165, i64 3
  store i256 %1170, ptr %sp8021, align 16
  %1171 = icmp ult i256 %1170, 4294967297
  %1172 = zext i1 %1171 to i256
  store i256 %1172, ptr %sp8017, align 16
  br i1 %1171, label %OP2418.JUMPDEST, label %OP2415.PUSH1

OP2415.PUSH1:                                     ; preds = %OP2400.JUMPDEST
  store i256 0, ptr %sp8017, align 16
  store i256 0, ptr %sp8021, align 16
  %1173 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8017, i8 16)
  %.not48967 = icmp eq i8 %1173, 0
  %spec.select36572 = select i1 %.not48967, i8 16, i8 %1173, !prof !6
  br label %return

OP2418.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2400.JUMPDEST
  %len.addr.122 = phi i64 [ %1167, %OP2400.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1174 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.122
  %sp8045 = getelementptr i256, ptr %1174, i64 -3
  %dup38046 = load i256, ptr %sp8045, align 16
  %sp8051 = getelementptr i256, ptr %1174, i64 -1
  %b8052 = load i256, ptr %sp8051, align 16
  %1175 = add i256 %b8052, %dup38046
  store i256 %1175, ptr %sp8051, align 16
  %sp8055 = getelementptr i256, ptr %1174, i64 -4
  %dup48056 = load i256, ptr %sp8055, align 16
  %sp8059 = getelementptr i256, ptr %1174, i64 1
  %sp8063 = getelementptr i256, ptr %1174, i64 2
  store i256 %1175, ptr %sp8063, align 16
  %1176 = add i256 %1175, 32
  store i256 %1176, ptr %sp8059, align 16
  %1177 = icmp ule i256 %1176, %dup48056
  %1178 = zext i1 %1177 to i256
  store i256 %1178, ptr %1174, align 16
  br i1 %1177, label %OP2432.JUMPDEST, label %OP2429.PUSH1

OP2429.PUSH1:                                     ; preds = %OP2418.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %1174, i8 0, i64 64, i1 false)
  %1179 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %1174, i8 16)
  %.not48968 = icmp eq i8 %1179, 0
  %spec.select36573 = select i1 %.not48968, i8 16, i8 %1179, !prof !6
  br label %return

OP2432.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54165 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp8093.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54165, i64 -1
  %dup18094.pre = load i256, ptr %sp8093.phi.trans.insert, align 16
  %sp8119.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54165, i64 -4
  %dup58120.pre = load i256, ptr %sp8119.phi.trans.insert, align 16
  %.pre54219 = add i256 %dup18094.pre, 32
  br label %OP2432.JUMPDEST

OP2432.JUMPDEST:                                  ; preds = %OP2432.JUMPDEST.loopexit, %OP2418.JUMPDEST
  %.pre-phi54220 = phi i256 [ %.pre54219, %OP2432.JUMPDEST.loopexit ], [ %1176, %OP2418.JUMPDEST ]
  %dup58120 = phi i256 [ %dup58120.pre, %OP2432.JUMPDEST.loopexit ], [ %dup48056, %OP2418.JUMPDEST ]
  %swap.b8104 = phi i256 [ %dup18094.pre, %OP2432.JUMPDEST.loopexit ], [ %1175, %OP2418.JUMPDEST ]
  %len.addr.123 = phi i64 [ %len.addr.357, %OP2432.JUMPDEST.loopexit ], [ %len.addr.122, %OP2418.JUMPDEST ]
  %1180 = add i64 %len.addr.123, 1
  %1181 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.123
  %sp8093 = getelementptr i256, ptr %1181, i64 -1
  store i256 %swap.b8104, ptr %1181, align 16
  %1182 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49129 = load ptr, ptr %1182, align 8
  %1183 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49130 = load i64, ptr %1183, align 8
  %1184 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b8104, ptr %arg.contract.addr.val49129, i64 %arg.contract.addr.val49130)
  store i256 %1184, ptr %sp8093, align 16
  %sp8106 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1180
  %sp8116 = getelementptr i256, ptr %1181, i64 -2
  %swap.b8117 = load i256, ptr %sp8116, align 16
  store i256 %.pre-phi54220, ptr %sp8116, align 16
  store i256 %swap.b8117, ptr %1181, align 16
  %sp8123 = getelementptr i256, ptr %1181, i64 2
  %sp8127 = getelementptr i256, ptr %1181, i64 3
  %1185 = add i256 %.pre-phi54220, %1184
  %1186 = icmp ugt i256 %1185, %dup58120
  store i256 %1184, ptr %sp8127, align 16
  %1187 = icmp ugt i256 %1184, 4294967296
  %1188 = zext i1 %1187 to i256
  store i256 %1188, ptr %sp8123, align 16
  %1189 = or i1 %1186, %1187
  %1190 = xor i1 %1189, true
  %1191 = zext i1 %1190 to i256
  store i256 %1191, ptr %sp8106, align 16
  br i1 %1189, label %OP2453.PUSH1, label %OP2456.JUMPDEST

OP2453.PUSH1:                                     ; preds = %OP2432.JUMPDEST
  store i256 0, ptr %sp8106, align 16
  store i256 0, ptr %sp8123, align 16
  %1192 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8106, i8 16)
  %.not48969 = icmp eq i8 %1192, 0
  %spec.select36574 = select i1 %.not48969, i8 16, i8 %1192, !prof !6
  br label %return

OP2456.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2432.JUMPDEST
  %len.addr.124 = phi i64 [ %1180, %OP2432.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1193 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.124
  %sp8186 = getelementptr i256, ptr %1193, i64 -2
  %swap.a8187 = load i256, ptr %sp8186, align 16
  %sp8188 = getelementptr i256, ptr %1193, i64 -3
  %swap.b8189 = load i256, ptr %sp8188, align 16
  %sp8193 = getelementptr i256, ptr %1193, i64 -5
  %swap.b8194 = load i256, ptr %sp8193, align 16
  store i256 %swap.b8189, ptr %sp8193, align 16
  store i256 %swap.b8194, ptr %sp8186, align 16
  %sp8199 = getelementptr i256, ptr %1193, i64 -4
  %swap.b8200 = load i256, ptr %sp8199, align 16
  store i256 %swap.a8187, ptr %sp8199, align 16
  store i256 %swap.b8200, ptr %sp8188, align 16
  %1194 = add i64 %len.addr.124, -3
  br label %OP6577.JUMPDEST

OP2465.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP98.DUP1
  %len.addr.125 = phi i64 [ %len.addr.2, %OP98.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %1195 = add i64 %len.addr.125, 1
  %sp8205 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.125
  store i256 1092, ptr %sp8205, align 16
  br label %OP6694.JUMPDEST

OP2469.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP103.DUP1
  %len.addr.126 = phi i64 [ %len.addr.2, %OP103.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp8209 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.126
  store i256 1092, ptr %sp8209, align 16
  %sp8211 = getelementptr i256, ptr %sp8209, i64 1
  store i256 4, ptr %sp8211, align 16
  %1196 = add i64 %len.addr.126, 3
  %sp8215 = getelementptr i256, ptr %sp8209, i64 2
  %contract.input.len.addr8217 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len8218 = load i64, ptr %contract.input.len.addr8217, align 8
  %1197 = zext i64 %contract.input.len8218 to i256
  %sp8219 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1196
  %1198 = add nsw i256 %1197, -4
  store i256 %1198, ptr %sp8215, align 16
  %sp8231 = getelementptr i256, ptr %sp8209, i64 4
  store i256 %1198, ptr %sp8231, align 16
  %1199 = icmp ugt i256 %1198, 63
  %1200 = zext i1 %1199 to i256
  store i256 %1200, ptr %sp8219, align 16
  br i1 %1199, label %OP2484.JUMPDEST, label %OP2481.PUSH1

OP2481.PUSH1:                                     ; preds = %OP2469.JUMPDEST
  store i256 0, ptr %sp8219, align 16
  store i256 0, ptr %sp8231, align 16
  %1201 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8219, i8 16)
  %.not48958 = icmp eq i8 %1201, 0
  %spec.select36575 = select i1 %.not48958, i8 16, i8 %1201, !prof !6
  br label %return

OP2484.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54160 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49128.pre = load i64, ptr %.phi.trans.insert54160, align 8
  br label %OP2484.JUMPDEST

OP2484.JUMPDEST:                                  ; preds = %OP2484.JUMPDEST.loopexit, %OP2469.JUMPDEST
  %arg.contract.addr.val49128 = phi i64 [ %contract.input.len8218, %OP2469.JUMPDEST ], [ %arg.contract.addr.val49128.pre, %OP2484.JUMPDEST.loopexit ]
  %len.addr.127 = phi i64 [ %1196, %OP2469.JUMPDEST ], [ %len.addr.357, %OP2484.JUMPDEST.loopexit ]
  %1202 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.127
  %sp8256 = getelementptr i256, ptr %1202, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp8256, align 16
  %sp8258 = getelementptr i256, ptr %1202, i64 -2
  %dup28259 = load i256, ptr %sp8258, align 16
  store i256 %dup28259, ptr %1202, align 16
  %1203 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49127 = load ptr, ptr %1203, align 8
  %1204 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup28259, ptr %arg.contract.addr.val49127, i64 %arg.contract.addr.val49128)
  %sp8268 = getelementptr i256, ptr %1202, i64 1
  %1205 = and i256 %1204, 1461501637330902918203684832716283019655932542975
  store i256 %1205, ptr %sp8258, align 16
  store i256 32, ptr %sp8268, align 16
  %1206 = add i256 %dup28259, 32
  store i256 %1206, ptr %1202, align 16
  %1207 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1206, ptr %arg.contract.addr.val49127, i64 %arg.contract.addr.val49128)
  store i256 %1207, ptr %1202, align 16
  %1208 = and i256 %1207, 1461501637330902918203684832716283019655932542975
  store i256 %1208, ptr %sp8256, align 16
  br label %OP6698.JUMPDEST

OP2498.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP64.JUMPDEST
  %len.addr.128 = phi i64 [ %len.addr.1, %OP64.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp8301 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.128
  store i256 1161, ptr %sp8301, align 16
  %sp8303 = getelementptr i256, ptr %sp8301, i64 1
  store i256 4, ptr %sp8303, align 16
  %1209 = add i64 %len.addr.128, 3
  %sp8307 = getelementptr i256, ptr %sp8301, i64 2
  %contract.input.len.addr8309 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len8310 = load i64, ptr %contract.input.len.addr8309, align 8
  %1210 = zext i64 %contract.input.len8310 to i256
  %sp8311 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1209
  %1211 = add nsw i256 %1210, -4
  store i256 %1211, ptr %sp8307, align 16
  %sp8323 = getelementptr i256, ptr %sp8301, i64 4
  store i256 %1211, ptr %sp8323, align 16
  %1212 = icmp ugt i256 %1211, 287
  %1213 = zext i1 %1212 to i256
  store i256 %1213, ptr %sp8311, align 16
  br i1 %1212, label %OP2513.JUMPDEST, label %OP2510.PUSH1

OP2510.PUSH1:                                     ; preds = %OP2498.JUMPDEST
  store i256 0, ptr %sp8311, align 16
  store i256 0, ptr %sp8323, align 16
  %1214 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8311, i8 16)
  %.not49056 = icmp eq i8 %1214, 0
  %spec.select36576 = select i1 %.not49056, i8 16, i8 %1214, !prof !6
  br label %return

OP2513.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54209 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49124.pre = load i64, ptr %.phi.trans.insert54209, align 8
  br label %OP2513.JUMPDEST

OP2513.JUMPDEST:                                  ; preds = %OP2513.JUMPDEST.loopexit, %OP2498.JUMPDEST
  %arg.contract.addr.val49124 = phi i64 [ %contract.input.len8310, %OP2498.JUMPDEST ], [ %arg.contract.addr.val49124.pre, %OP2513.JUMPDEST.loopexit ]
  %len.addr.129 = phi i64 [ %1209, %OP2498.JUMPDEST ], [ %len.addr.357, %OP2513.JUMPDEST.loopexit ]
  %1215 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.129
  %sp8348 = getelementptr i256, ptr %1215, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp8348, align 16
  %sp8350 = getelementptr i256, ptr %1215, i64 -2
  %dup28351 = load i256, ptr %sp8350, align 16
  store i256 %dup28351, ptr %1215, align 16
  %1216 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49123 = load ptr, ptr %1216, align 8
  %1217 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup28351, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  %sp8360 = getelementptr i256, ptr %1215, i64 1
  %1218 = and i256 %1217, 1461501637330902918203684832716283019655932542975
  store i256 %1218, ptr %sp8350, align 16
  store i256 %dup28351, ptr %1215, align 16
  %sp8377 = getelementptr i256, ptr %1215, i64 2
  store i256 %dup28351, ptr %sp8377, align 16
  %1219 = add i256 %dup28351, 32
  store i256 %1219, ptr %sp8360, align 16
  %1220 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1219, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  %1221 = and i256 %1220, 1461501637330902918203684832716283019655932542975
  store i256 %1221, ptr %sp8348, align 16
  store i256 %dup28351, ptr %1215, align 16
  store i256 %dup28351, ptr %sp8377, align 16
  %1222 = add i256 %dup28351, 64
  store i256 %1222, ptr %sp8360, align 16
  %1223 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1222, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  store i256 %1223, ptr %1215, align 16
  store i256 %dup28351, ptr %sp8360, align 16
  %sp8435 = getelementptr i256, ptr %1215, i64 3
  store i256 %dup28351, ptr %sp8435, align 16
  %1224 = add i256 %dup28351, 96
  store i256 %1224, ptr %sp8377, align 16
  %1225 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1224, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  store i256 %1225, ptr %sp8360, align 16
  store i256 %dup28351, ptr %sp8377, align 16
  %sp8456 = getelementptr i256, ptr %1215, i64 4
  store i256 %dup28351, ptr %sp8456, align 16
  %1226 = add i256 %dup28351, 128
  store i256 %1226, ptr %sp8435, align 16
  %1227 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1226, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  store i256 %1227, ptr %sp8377, align 16
  store i256 %dup28351, ptr %sp8435, align 16
  %sp8477 = getelementptr i256, ptr %1215, i64 5
  store i256 %dup28351, ptr %sp8477, align 16
  %1228 = add i256 %dup28351, 160
  store i256 %1228, ptr %sp8456, align 16
  %1229 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1228, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  store i256 %1229, ptr %sp8435, align 16
  store i256 %dup28351, ptr %sp8456, align 16
  store i256 255, ptr %sp8477, align 16
  %1230 = add i64 %len.addr.129, 7
  %sp8496 = getelementptr i256, ptr %1215, i64 6
  %sp8500 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1230
  store i256 %dup28351, ptr %sp8500, align 16
  %1231 = add i256 %dup28351, 192
  store i256 %1231, ptr %sp8496, align 16
  %1232 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1231, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  %1233 = and i256 %1232, 255
  store i256 %1233, ptr %sp8456, align 16
  store i256 %dup28351, ptr %sp8477, align 16
  store i256 %dup28351, ptr %sp8500, align 16
  %1234 = add i256 %dup28351, 224
  store i256 %1234, ptr %sp8496, align 16
  %1235 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1234, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  store i256 %1235, ptr %sp8477, align 16
  store i256 256, ptr %sp8500, align 16
  %1236 = add i256 %dup28351, 256
  store i256 %1236, ptr %sp8496, align 16
  %1237 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1236, ptr %arg.contract.addr.val49123, i64 %arg.contract.addr.val49124)
  store i256 %1237, ptr %sp8496, align 16
  br label %OP6730.JUMPDEST

OP2566.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP70.DUP1
  %len.addr.130 = phi i64 [ %len.addr.1, %OP70.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %1238 = add i64 %len.addr.130, 1
  %sp8558 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.130
  store i256 890, ptr %sp8558, align 16
  br label %OP6894.JUMPDEST

OP2570.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP75.DUP1
  %len.addr.131 = phi i64 [ %len.addr.1, %OP75.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp8562 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.131
  store i256 1064, ptr %sp8562, align 16
  %sp8564 = getelementptr i256, ptr %sp8562, i64 1
  store i256 4, ptr %sp8564, align 16
  %1239 = add i64 %len.addr.131, 3
  %sp8568 = getelementptr i256, ptr %sp8562, i64 2
  %contract.input.len.addr8570 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len8571 = load i64, ptr %contract.input.len.addr8570, align 8
  %1240 = zext i64 %contract.input.len8571 to i256
  %sp8572 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1239
  %1241 = add nsw i256 %1240, -4
  store i256 %1241, ptr %sp8568, align 16
  %sp8584 = getelementptr i256, ptr %sp8562, i64 4
  store i256 %1241, ptr %sp8584, align 16
  %1242 = icmp ugt i256 %1241, 63
  %1243 = zext i1 %1242 to i256
  store i256 %1243, ptr %sp8572, align 16
  br i1 %1242, label %OP2585.JUMPDEST, label %OP2582.PUSH1

OP2582.PUSH1:                                     ; preds = %OP2570.JUMPDEST
  store i256 0, ptr %sp8572, align 16
  store i256 0, ptr %sp8584, align 16
  %1244 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8572, i8 16)
  %.not49038 = icmp eq i8 %1244, 0
  %spec.select36577 = select i1 %.not49038, i8 16, i8 %1244, !prof !6
  br label %return

OP2585.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert54204 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49106.pre = load i64, ptr %.phi.trans.insert54204, align 8
  br label %OP2585.JUMPDEST

OP2585.JUMPDEST:                                  ; preds = %OP2585.JUMPDEST.loopexit, %OP2570.JUMPDEST
  %arg.contract.addr.val49106 = phi i64 [ %contract.input.len8571, %OP2570.JUMPDEST ], [ %arg.contract.addr.val49106.pre, %OP2585.JUMPDEST.loopexit ]
  %len.addr.132 = phi i64 [ %1239, %OP2570.JUMPDEST ], [ %len.addr.357, %OP2585.JUMPDEST.loopexit ]
  %1245 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.132
  %sp8609 = getelementptr i256, ptr %1245, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp8609, align 16
  %sp8611 = getelementptr i256, ptr %1245, i64 -2
  %dup28612 = load i256, ptr %sp8611, align 16
  store i256 %dup28612, ptr %1245, align 16
  %1246 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49105 = load ptr, ptr %1246, align 8
  %1247 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup28612, ptr %arg.contract.addr.val49105, i64 %arg.contract.addr.val49106)
  %1248 = and i256 %1247, 1461501637330902918203684832716283019655932542975
  store i256 %1248, ptr %sp8611, align 16
  store i256 32, ptr %1245, align 16
  %1249 = add i256 %dup28612, 32
  store i256 %1249, ptr %sp8609, align 16
  %1250 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1249, ptr %arg.contract.addr.val49105, i64 %arg.contract.addr.val49106)
  store i256 %1250, ptr %sp8609, align 16
  br label %OP6965.JUMPDEST

OP2597.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.input.len.addr8652.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len8653.pre = load i64, ptr %contract.input.len.addr8652.phi.trans.insert, align 8
  %.pre54275 = zext i64 %contract.input.len8653.pre to i256
  br label %OP2597.JUMPDEST

OP2597.JUMPDEST:                                  ; preds = %OP2597.JUMPDEST.loopexit, %OP42.DUP1
  %.pre-phi54276 = phi i256 [ %.pre54275, %OP2597.JUMPDEST.loopexit ], [ %8, %OP42.DUP1 ]
  %contract.input.len8653 = phi i64 [ %contract.input.len8653.pre, %OP2597.JUMPDEST.loopexit ], [ %contract.input.len, %OP42.DUP1 ]
  %len.addr.133 = phi i64 [ %len.addr.357, %OP2597.JUMPDEST.loopexit ], [ %len.addr.0, %OP42.DUP1 ]
  %sp8644 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.133
  store i256 1161, ptr %sp8644, align 16
  %sp8646 = getelementptr i256, ptr %sp8644, i64 1
  store i256 4, ptr %sp8646, align 16
  %1251 = add i64 %len.addr.133, 3
  %sp8650 = getelementptr i256, ptr %sp8644, i64 2
  store i256 4, ptr %sp8650, align 16
  %sp8654 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1251
  store i256 %.pre-phi54276, ptr %sp8654, align 16
  %1252 = add nsw i256 %.pre-phi54276, -4
  store i256 %1252, ptr %sp8650, align 16
  store i256 288, ptr %sp8654, align 16
  %sp8666 = getelementptr i256, ptr %sp8644, i64 4
  store i256 %1252, ptr %sp8666, align 16
  %1253 = icmp ugt i256 %1252, 287
  %1254 = zext i1 %1253 to i256
  store i256 %1254, ptr %sp8654, align 16
  br i1 %1253, label %OP2612.JUMPDEST, label %OP2609.PUSH1

OP2609.PUSH1:                                     ; preds = %OP2597.JUMPDEST
  store i256 0, ptr %sp8654, align 16
  store i256 0, ptr %sp8666, align 16
  %1255 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8654, i8 16)
  %.not48403 = icmp eq i8 %1255, 0
  %spec.select36578 = select i1 %.not48403, i8 16, i8 %1255, !prof !6
  br label %return

OP2612.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert53992 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49102.pre = load i64, ptr %.phi.trans.insert53992, align 8
  br label %OP2612.JUMPDEST

OP2612.JUMPDEST:                                  ; preds = %OP2612.JUMPDEST.loopexit, %OP2597.JUMPDEST
  %arg.contract.addr.val49102 = phi i64 [ %contract.input.len8653, %OP2597.JUMPDEST ], [ %arg.contract.addr.val49102.pre, %OP2612.JUMPDEST.loopexit ]
  %len.addr.134 = phi i64 [ %1251, %OP2597.JUMPDEST ], [ %len.addr.357, %OP2612.JUMPDEST.loopexit ]
  %1256 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.134
  %sp8691 = getelementptr i256, ptr %1256, i64 -1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp8691, align 16
  %sp8693 = getelementptr i256, ptr %1256, i64 -2
  %dup28694 = load i256, ptr %sp8693, align 16
  store i256 %dup28694, ptr %1256, align 16
  %1257 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49101 = load ptr, ptr %1257, align 8
  %1258 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup28694, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1258, ptr %1256, align 16
  %sp8703 = getelementptr i256, ptr %1256, i64 1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp8703, align 16
  %1259 = and i256 %1258, 1461501637330902918203684832716283019655932542975
  store i256 %1259, ptr %1256, align 16
  store i256 %1259, ptr %sp8693, align 16
  store i256 %dup28694, ptr %1256, align 16
  store i256 32, ptr %sp8703, align 16
  %sp8720 = getelementptr i256, ptr %1256, i64 2
  store i256 %dup28694, ptr %sp8720, align 16
  %1260 = add i256 %dup28694, 32
  store i256 %1260, ptr %sp8703, align 16
  %1261 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1260, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1261, ptr %sp8703, align 16
  store i256 %1261, ptr %1256, align 16
  store i256 %dup28694, ptr %sp8703, align 16
  store i256 %dup28694, ptr %sp8691, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp8703, align 16
  %1262 = and i256 %1261, 1461501637330902918203684832716283019655932542975
  store i256 %1262, ptr %1256, align 16
  store i256 %1262, ptr %sp8691, align 16
  store i256 %dup28694, ptr %1256, align 16
  store i256 64, ptr %sp8703, align 16
  store i256 %dup28694, ptr %sp8720, align 16
  %1263 = add i256 %dup28694, 64
  store i256 %1263, ptr %sp8703, align 16
  %1264 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1263, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1264, ptr %sp8703, align 16
  store i256 %1264, ptr %1256, align 16
  store i256 %dup28694, ptr %sp8703, align 16
  store i256 96, ptr %sp8720, align 16
  %sp8778 = getelementptr i256, ptr %1256, i64 3
  store i256 %dup28694, ptr %sp8778, align 16
  %1265 = add i256 %dup28694, 96
  store i256 %1265, ptr %sp8720, align 16
  %1266 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1265, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1266, ptr %sp8720, align 16
  store i256 %1266, ptr %sp8703, align 16
  store i256 %dup28694, ptr %sp8720, align 16
  store i256 128, ptr %sp8778, align 16
  %sp8799 = getelementptr i256, ptr %1256, i64 4
  store i256 %dup28694, ptr %sp8799, align 16
  %1267 = add i256 %dup28694, 128
  store i256 %1267, ptr %sp8778, align 16
  %1268 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1267, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1268, ptr %sp8778, align 16
  store i256 %1268, ptr %sp8720, align 16
  store i256 %dup28694, ptr %sp8778, align 16
  store i256 160, ptr %sp8799, align 16
  %sp8820 = getelementptr i256, ptr %1256, i64 5
  store i256 %dup28694, ptr %sp8820, align 16
  %1269 = add i256 %dup28694, 160
  store i256 %1269, ptr %sp8799, align 16
  %1270 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1269, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1270, ptr %sp8799, align 16
  store i256 %1270, ptr %sp8778, align 16
  store i256 %dup28694, ptr %sp8799, align 16
  store i256 255, ptr %sp8820, align 16
  %1271 = add i64 %len.addr.134, 7
  %sp8839 = getelementptr i256, ptr %1256, i64 6
  store i256 192, ptr %sp8839, align 16
  %sp8843 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1271
  store i256 %dup28694, ptr %sp8843, align 16
  %1272 = add i256 %dup28694, 192
  store i256 %1272, ptr %sp8839, align 16
  %1273 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1272, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1273, ptr %sp8839, align 16
  %1274 = and i256 %1273, 255
  store i256 %1274, ptr %sp8820, align 16
  store i256 %1274, ptr %sp8799, align 16
  store i256 %dup28694, ptr %sp8820, align 16
  store i256 224, ptr %sp8839, align 16
  store i256 %dup28694, ptr %sp8843, align 16
  %1275 = add i256 %dup28694, 224
  store i256 %1275, ptr %sp8839, align 16
  %1276 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1275, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1276, ptr %sp8839, align 16
  store i256 %1276, ptr %sp8820, align 16
  store i256 %dup28694, ptr %sp8839, align 16
  store i256 256, ptr %sp8843, align 16
  %1277 = add i256 %dup28694, 256
  store i256 %1277, ptr %sp8839, align 16
  %1278 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %1277, ptr %arg.contract.addr.val49101, i64 %arg.contract.addr.val49102)
  store i256 %1278, ptr %sp8839, align 16
  br label %OP6996.JUMPDEST

OP2665.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.input.len.addr8909.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len8910.pre = load i64, ptr %contract.input.len.addr8909.phi.trans.insert, align 8
  %.pre54277 = zext i64 %contract.input.len8910.pre to i256
  br label %OP2665.JUMPDEST

OP2665.JUMPDEST:                                  ; preds = %OP2665.JUMPDEST.loopexit, %OP47.DUP1
  %.pre-phi54278 = phi i256 [ %.pre54277, %OP2665.JUMPDEST.loopexit ], [ %8, %OP47.DUP1 ]
  %contract.input.len8910 = phi i64 [ %contract.input.len8910.pre, %OP2665.JUMPDEST.loopexit ], [ %contract.input.len, %OP47.DUP1 ]
  %len.addr.135 = phi i64 [ %len.addr.357, %OP2665.JUMPDEST.loopexit ], [ %len.addr.0, %OP47.DUP1 ]
  %sp8901 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.135
  store i256 1161, ptr %sp8901, align 16
  %sp8903 = getelementptr i256, ptr %sp8901, i64 1
  store i256 4, ptr %sp8903, align 16
  %1279 = add i64 %len.addr.135, 3
  %sp8907 = getelementptr i256, ptr %sp8901, i64 2
  store i256 4, ptr %sp8907, align 16
  %sp8911 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1279
  store i256 %.pre-phi54278, ptr %sp8911, align 16
  %1280 = add nsw i256 %.pre-phi54278, -4
  store i256 %1280, ptr %sp8907, align 16
  store i256 32, ptr %sp8911, align 16
  %sp8923 = getelementptr i256, ptr %sp8901, i64 4
  store i256 %1280, ptr %sp8923, align 16
  %1281 = icmp ugt i256 %1280, 31
  %1282 = zext i1 %1281 to i256
  store i256 %1282, ptr %sp8911, align 16
  br i1 %1281, label %OP2680.JUMPDEST, label %OP2677.PUSH1

OP2677.PUSH1:                                     ; preds = %OP2665.JUMPDEST
  store i256 0, ptr %sp8911, align 16
  store i256 0, ptr %sp8923, align 16
  %1283 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8911, i8 16)
  %.not48378 = icmp eq i8 %1283, 0
  %spec.select36579 = select i1 %.not48378, i8 16, i8 %1283, !prof !6
  br label %return

OP2680.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert53983 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49084.pre = load i64, ptr %.phi.trans.insert53983, align 8
  br label %OP2680.JUMPDEST

OP2680.JUMPDEST:                                  ; preds = %OP2680.JUMPDEST.loopexit, %OP2665.JUMPDEST
  %arg.contract.addr.val49084 = phi i64 [ %contract.input.len8910, %OP2665.JUMPDEST ], [ %arg.contract.addr.val49084.pre, %OP2680.JUMPDEST.loopexit ]
  %len.addr.136 = phi i64 [ %1279, %OP2665.JUMPDEST ], [ %len.addr.357, %OP2680.JUMPDEST.loopexit ]
  %1284 = add i64 %len.addr.136, -1
  %1285 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.136
  %sp8948 = getelementptr i256, ptr %1285, i64 -2
  %a8949 = load i256, ptr %sp8948, align 16
  %1286 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49083 = load ptr, ptr %1286, align 8
  %1287 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a8949, ptr %arg.contract.addr.val49083, i64 %arg.contract.addr.val49084)
  store i256 %1287, ptr %sp8948, align 16
  %sp8952 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1284
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp8952, align 16
  %1288 = and i256 %1287, 1461501637330902918203684832716283019655932542975
  store i256 %1288, ptr %sp8948, align 16
  br label %OP7147.JUMPDEST

OP2687.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.input.len.addr8970.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len8971.pre = load i64, ptr %contract.input.len.addr8970.phi.trans.insert, align 8
  %.pre54281 = zext i64 %contract.input.len8971.pre to i256
  br label %OP2687.JUMPDEST

OP2687.JUMPDEST:                                  ; preds = %OP2687.JUMPDEST.loopexit, %OP52.DUP1
  %.pre-phi54282 = phi i256 [ %.pre54281, %OP2687.JUMPDEST.loopexit ], [ %8, %OP52.DUP1 ]
  %contract.input.len8971 = phi i64 [ %contract.input.len8971.pre, %OP2687.JUMPDEST.loopexit ], [ %contract.input.len, %OP52.DUP1 ]
  %len.addr.137 = phi i64 [ %len.addr.357, %OP2687.JUMPDEST.loopexit ], [ %len.addr.0, %OP52.DUP1 ]
  %sp8962 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.137
  store i256 1161, ptr %sp8962, align 16
  %sp8964 = getelementptr i256, ptr %sp8962, i64 1
  store i256 4, ptr %sp8964, align 16
  %1289 = add i64 %len.addr.137, 3
  %sp8968 = getelementptr i256, ptr %sp8962, i64 2
  store i256 4, ptr %sp8968, align 16
  %sp8972 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1289
  store i256 %.pre-phi54282, ptr %sp8972, align 16
  %1290 = add nsw i256 %.pre-phi54282, -4
  store i256 %1290, ptr %sp8968, align 16
  store i256 32, ptr %sp8972, align 16
  %sp8984 = getelementptr i256, ptr %sp8962, i64 4
  store i256 %1290, ptr %sp8984, align 16
  %1291 = icmp ugt i256 %1290, 31
  %1292 = zext i1 %1291 to i256
  store i256 %1292, ptr %sp8972, align 16
  br i1 %1291, label %OP2702.JUMPDEST, label %OP2699.PUSH1

OP2699.PUSH1:                                     ; preds = %OP2687.JUMPDEST
  store i256 0, ptr %sp8972, align 16
  store i256 0, ptr %sp8984, align 16
  %1293 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp8972, i8 16)
  %.not48369 = icmp eq i8 %1293, 0
  %spec.select36580 = select i1 %.not48369, i8 16, i8 %1293, !prof !6
  br label %return

OP2702.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert53980 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49082.pre = load i64, ptr %.phi.trans.insert53980, align 8
  br label %OP2702.JUMPDEST

OP2702.JUMPDEST:                                  ; preds = %OP2702.JUMPDEST.loopexit, %OP2687.JUMPDEST
  %arg.contract.addr.val49082 = phi i64 [ %contract.input.len8971, %OP2687.JUMPDEST ], [ %arg.contract.addr.val49082.pre, %OP2702.JUMPDEST.loopexit ]
  %len.addr.138 = phi i64 [ %1289, %OP2687.JUMPDEST ], [ %len.addr.357, %OP2702.JUMPDEST.loopexit ]
  %1294 = add i64 %len.addr.138, -1
  %1295 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.138
  %sp9009 = getelementptr i256, ptr %1295, i64 -2
  %a9010 = load i256, ptr %sp9009, align 16
  %1296 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49081 = load ptr, ptr %1296, align 8
  %1297 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a9010, ptr %arg.contract.addr.val49081, i64 %arg.contract.addr.val49082)
  store i256 %1297, ptr %sp9009, align 16
  %sp9013 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1294
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp9013, align 16
  %1298 = and i256 %1297, 1461501637330902918203684832716283019655932542975
  store i256 %1298, ptr %sp9009, align 16
  br label %OP7270.JUMPDEST

OP2709.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.input.len.addr9031.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len9032.pre = load i64, ptr %contract.input.len.addr9031.phi.trans.insert, align 8
  %.pre54285 = zext i64 %contract.input.len9032.pre to i256
  br label %OP2709.JUMPDEST

OP2709.JUMPDEST:                                  ; preds = %OP2709.JUMPDEST.loopexit, %OP57.DUP1
  %.pre-phi54286 = phi i256 [ %.pre54285, %OP2709.JUMPDEST.loopexit ], [ %8, %OP57.DUP1 ]
  %contract.input.len9032 = phi i64 [ %contract.input.len9032.pre, %OP2709.JUMPDEST.loopexit ], [ %contract.input.len, %OP57.DUP1 ]
  %len.addr.139 = phi i64 [ %len.addr.357, %OP2709.JUMPDEST.loopexit ], [ %len.addr.0, %OP57.DUP1 ]
  %sp9023 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.139
  store i256 1064, ptr %sp9023, align 16
  %sp9025 = getelementptr i256, ptr %sp9023, i64 1
  store i256 4, ptr %sp9025, align 16
  %1299 = add i64 %len.addr.139, 3
  %sp9029 = getelementptr i256, ptr %sp9023, i64 2
  store i256 4, ptr %sp9029, align 16
  %sp9033 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1299
  store i256 %.pre-phi54286, ptr %sp9033, align 16
  %1300 = add nsw i256 %.pre-phi54286, -4
  store i256 %1300, ptr %sp9029, align 16
  store i256 32, ptr %sp9033, align 16
  %sp9045 = getelementptr i256, ptr %sp9023, i64 4
  store i256 %1300, ptr %sp9045, align 16
  %1301 = icmp ugt i256 %1300, 31
  %1302 = zext i1 %1301 to i256
  store i256 %1302, ptr %sp9033, align 16
  br i1 %1301, label %OP2724.JUMPDEST, label %OP2721.PUSH1

OP2721.PUSH1:                                     ; preds = %OP2709.JUMPDEST
  store i256 0, ptr %sp9033, align 16
  store i256 0, ptr %sp9045, align 16
  %1303 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9033, i8 16)
  %.not48368 = icmp eq i8 %1303, 0
  %spec.select36581 = select i1 %.not48368, i8 16, i8 %1303, !prof !6
  br label %return

OP2724.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.phi.trans.insert53977 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49080.pre = load i64, ptr %.phi.trans.insert53977, align 8
  br label %OP2724.JUMPDEST

OP2724.JUMPDEST:                                  ; preds = %OP2724.JUMPDEST.loopexit, %OP2709.JUMPDEST
  %arg.contract.addr.val49080 = phi i64 [ %contract.input.len9032, %OP2709.JUMPDEST ], [ %arg.contract.addr.val49080.pre, %OP2724.JUMPDEST.loopexit ]
  %len.addr.140 = phi i64 [ %1299, %OP2709.JUMPDEST ], [ %len.addr.357, %OP2724.JUMPDEST.loopexit ]
  %1304 = add i64 %len.addr.140, -1
  %1305 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.140
  %sp9070 = getelementptr i256, ptr %1305, i64 -2
  %a9071 = load i256, ptr %sp9070, align 16
  %1306 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49079 = load ptr, ptr %1306, align 8
  %1307 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %a9071, ptr %arg.contract.addr.val49079, i64 %arg.contract.addr.val49080)
  store i256 %1307, ptr %sp9070, align 16
  %sp9074 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1304
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp9074, align 16
  %1308 = and i256 %1307, 1461501637330902918203684832716283019655932542975
  store i256 %1308, ptr %sp9070, align 16
  br label %OP7336.JUMPDEST

OP2731.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP421.JUMPDEST
  %len.addr.141 = phi i64 [ %170, %OP421.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp9084 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.141
  store i256 4, ptr %sp9084, align 16
  %1309 = add i64 %len.addr.141, 2
  %sp9088 = getelementptr i256, ptr %sp9084, i64 1
  store i256 4, ptr %sp9088, align 16
  %1310 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9088, i8 17)
  %.not47794 = icmp eq i8 %1310, 0
  br i1 %.not47794, label %OP2735.PUSH1, label %return, !prof !6

OP2735.PUSH1:                                     ; preds = %OP2731.JUMPDEST
  %sp9092 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1309
  store i256 64, ptr %sp9092, align 16
  %1311 = add i64 %len.addr.141, 4
  %sp9096 = getelementptr i256, ptr %sp9084, i64 3
  store i256 64, ptr %sp9096, align 16
  %ecx.memory.addr.i49696 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49697 = load ptr, ptr %ecx.memory.addr.i49696, align 8
  %ecx.memory.len.addr.i49698 = getelementptr inbounds i8, ptr %ecx.memory.i49697, i64 16
  %ecx.memory.len.i49699 = load i64, ptr %ecx.memory.len.addr.i49698, align 8, !noalias !412
  %ecx.memory.last_checkpoint.addr.i49700 = getelementptr inbounds i8, ptr %ecx.memory.i49697, i64 48
  %ecx.memory.last_checkpoint.i49701 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49700, align 8, !noalias !412
  %1312 = sub i64 %ecx.memory.len.i49699, %ecx.memory.last_checkpoint.i49701
  %1313 = icmp ult i64 %1312, 96
  br i1 %1313, label %resize.i49709, label %OP2737.MLOAD.contd, !prof !5

resize.i49709:                                    ; preds = %OP2735.PUSH1
  %1314 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !416
  %.not.i49710 = icmp eq i8 %1314, 0
  br i1 %.not.i49710, label %resize.i49709.OP2737.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49709.OP2737.MLOAD.contd_crit_edge:       ; preds = %resize.i49709
  %sp9241.phi.trans.insert = getelementptr i256, ptr %sp9084, i64 2
  %swap.b9242.pre = load i256, ptr %sp9241.phi.trans.insert, align 16
  %ecx.memory.i49713.pre = load ptr, ptr %ecx.memory.addr.i49696, align 8, !alias.scope !417
  br label %OP2737.MLOAD.contd

OP2737.MLOAD.contd:                               ; preds = %resize.i49709.OP2737.MLOAD.contd_crit_edge, %OP2735.PUSH1
  %ecx.memory.i49713 = phi ptr [ %ecx.memory.i49713.pre, %resize.i49709.OP2737.MLOAD.contd_crit_edge ], [ %ecx.memory.i49697, %OP2735.PUSH1 ]
  %swap.b9242 = phi i256 [ %swap.b9242.pre, %resize.i49709.OP2737.MLOAD.contd_crit_edge ], [ 64, %OP2735.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i49703 = getelementptr inbounds i8, ptr %ecx.memory.i49697, i64 8
  %ecx.memory.buffer.ptr.shared.i49704 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49703, align 8, !noalias !412
  %ecx.memory.buffer.ptr.i49705 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49704, i64 %ecx.memory.last_checkpoint.i49701
  %slot.i49706 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49705, i64 64
  %slot.value.i49707 = load i256, ptr %slot.i49706, align 1, !noalias !412
  %1315 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49707)
  store i256 %1315, ptr %sp9096, align 16
  %sp9104 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1311
  store i256 32, ptr %sp9104, align 16
  %1316 = add i64 %len.addr.141, 6
  %sp9106 = getelementptr i256, ptr %sp9084, i64 5
  store i256 2, ptr %sp9106, align 16
  %sp9108 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1316
  store i256 1, ptr %sp9108, align 16
  %dup69111 = load i256, ptr %sp9088, align 16
  %sp9112 = getelementptr i256, ptr %sp9084, i64 7
  store i256 %dup69111, ptr %sp9112, align 16
  %1317 = and i256 %dup69111, 1
  %1318 = xor i256 %1317, 1
  store i256 %1318, ptr %sp9108, align 16
  store i256 256, ptr %sp9112, align 16
  %1319 = shl nuw nsw i256 %1317, 8
  %1320 = xor i256 %1319, 256
  store i256 %1320, ptr %sp9108, align 16
  store i256 -1, ptr %sp9112, align 16
  %1321 = add nsw i256 %1320, -1
  store i256 %1321, ptr %sp9108, align 16
  store i256 %1321, ptr %sp9106, align 16
  store i256 2, ptr %sp9108, align 16
  store i256 2, ptr %sp9088, align 16
  store i256 %dup69111, ptr %sp9108, align 16
  %1322 = and i256 %1321, %dup69111
  store i256 %1322, ptr %sp9106, align 16
  store i256 %1322, ptr %sp9088, align 16
  store i256 2, ptr %sp9106, align 16
  store i256 2, ptr %sp9104, align 16
  store i256 32, ptr %sp9106, align 16
  store i256 32, ptr %sp9088, align 16
  store i256 %1322, ptr %sp9106, align 16
  %1323 = lshr i256 %1322, 1
  store i256 %1323, ptr %sp9104, align 16
  store i256 31, ptr %sp9106, align 16
  store i256 %1323, ptr %sp9108, align 16
  %1324 = add nuw i256 %1323, 31
  store i256 %1324, ptr %sp9106, align 16
  store i256 32, ptr %sp9108, align 16
  store i256 32, ptr %sp9106, align 16
  store i256 %1324, ptr %sp9108, align 16
  %1325 = lshr i256 %1324, 5
  store i256 %1325, ptr %sp9106, align 16
  store i256 32, ptr %sp9108, align 16
  %1326 = and i256 %1324, -32
  store i256 %1326, ptr %sp9106, align 16
  store i256 %1315, ptr %sp9108, align 16
  %1327 = add i256 %1326, %1315
  store i256 %1327, ptr %sp9106, align 16
  store i256 32, ptr %sp9108, align 16
  %1328 = add i256 %1327, 32
  store i256 %1328, ptr %sp9106, align 16
  store i256 %1328, ptr %sp9104, align 16
  store i256 %1323, ptr %sp9106, align 16
  %sp9241 = getelementptr i256, ptr %sp9084, i64 2
  store i256 %1323, ptr %sp9241, align 16
  store i256 %swap.b9242, ptr %sp9106, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !417)
  %ecx.memory.len.addr.i49714 = getelementptr inbounds i8, ptr %ecx.memory.i49713, i64 16
  %ecx.memory.len.i49715 = load i64, ptr %ecx.memory.len.addr.i49714, align 8, !noalias !417
  %ecx.memory.last_checkpoint.addr.i49716 = getelementptr inbounds i8, ptr %ecx.memory.i49713, i64 48
  %ecx.memory.last_checkpoint.i49717 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49716, align 8, !noalias !417
  %1329 = sub i64 %ecx.memory.len.i49715, %ecx.memory.last_checkpoint.i49717
  %1330 = icmp ugt i256 %swap.b9242, 18446744073709551615
  %1331 = trunc i256 %swap.b9242 to i64
  %1332 = add i64 %1331, 32
  %1333 = icmp ugt i64 %1331, -33
  %1334 = or i1 %1330, %1333
  %1335 = select i1 %1334, i64 -1, i64 %1332
  %1336 = icmp ugt i64 %1335, %1329
  br i1 %1336, label %resize.i49724, label %OP2770.DUP2, !prof !5

resize.i49724:                                    ; preds = %OP2737.MLOAD.contd
  %1337 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1335)
  %.not.i49725 = icmp eq i8 %1337, 0
  br i1 %.not.i49725, label %OP2770.DUP2, label %return, !prof !6

OP2770.DUP2:                                      ; preds = %OP2737.MLOAD.contd, %resize.i49724
  %ecx.memory.buffer.ptr.shared.addr.i49719 = getelementptr inbounds i8, ptr %ecx.memory.i49713, i64 8
  %ecx.memory.buffer.ptr.shared.i49720 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49719, align 8, !noalias !417
  %ecx.memory.buffer.ptr.i49721 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49720, i64 %ecx.memory.last_checkpoint.i49717
  %slot.i49722 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49721, i64 %1331
  %1338 = tail call i256 @llvm.bswap.i256(i256 %1328)
  store i256 %1338, ptr %slot.i49722, align 1, !noalias !417
  %dup29250 = load i256, ptr %sp9092, align 16
  store i256 %dup29250, ptr %sp9104, align 16
  %dup29254 = load i256, ptr %sp9096, align 16
  store i256 %dup29254, ptr %sp9106, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !420)
  %ecx.memory.i49728 = load ptr, ptr %ecx.memory.addr.i49696, align 8, !alias.scope !420
  %ecx.memory.len.addr.i49729 = getelementptr inbounds i8, ptr %ecx.memory.i49728, i64 16
  %ecx.memory.len.i49730 = load i64, ptr %ecx.memory.len.addr.i49729, align 8, !noalias !420
  %ecx.memory.last_checkpoint.addr.i49731 = getelementptr inbounds i8, ptr %ecx.memory.i49728, i64 48
  %ecx.memory.last_checkpoint.i49732 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49731, align 8, !noalias !420
  %1339 = sub i64 %ecx.memory.len.i49730, %ecx.memory.last_checkpoint.i49732
  %1340 = icmp ugt i256 %dup29254, 18446744073709551615
  %1341 = trunc i256 %dup29254 to i64
  %1342 = add i64 %1341, 32
  %1343 = icmp ugt i64 %1341, -33
  %1344 = or i1 %1340, %1343
  %1345 = select i1 %1344, i64 -1, i64 %1342
  %1346 = icmp ugt i64 %1345, %1339
  br i1 %1346, label %resize.i49739, label %OP2773.SWAP3, !prof !5

resize.i49739:                                    ; preds = %OP2770.DUP2
  %1347 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1345)
  %.not.i49740 = icmp eq i8 %1347, 0
  br i1 %.not.i49740, label %OP2773.SWAP3, label %return, !prof !6

OP2773.SWAP3:                                     ; preds = %OP2770.DUP2, %resize.i49739
  %ecx.memory.buffer.ptr.shared.addr.i49734 = getelementptr inbounds i8, ptr %ecx.memory.i49728, i64 8
  %ecx.memory.buffer.ptr.shared.i49735 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49734, align 8, !noalias !420
  %ecx.memory.buffer.ptr.i49736 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49735, i64 %ecx.memory.last_checkpoint.i49732
  %slot.i49737 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49736, i64 %1341
  %1348 = tail call i256 @llvm.bswap.i256(i256 %dup29250)
  store i256 %1348, ptr %slot.i49737, align 1, !noalias !420
  %swap.a9263 = load i256, ptr %sp9096, align 16
  %swap.b9265 = load i256, ptr %sp9084, align 16
  store i256 %swap.a9263, ptr %sp9084, align 16
  store i256 %swap.b9265, ptr %sp9096, align 16
  %swap.b9270 = load i256, ptr %sp9088, align 16
  store i256 %swap.b9265, ptr %sp9088, align 16
  store i256 %swap.b9270, ptr %sp9096, align 16
  store i256 %swap.a9263, ptr %sp9104, align 16
  %1349 = add i256 %swap.b9270, %swap.a9263
  store i256 %1349, ptr %sp9096, align 16
  store i256 %swap.b9265, ptr %sp9104, align 16
  %dup39287 = load i256, ptr %sp9092, align 16
  store i256 %dup39287, ptr %sp9106, align 16
  %1350 = icmp eq i256 %dup39287, 0
  %1351 = zext i1 %1350 to i256
  store i256 %1351, ptr %sp9108, align 16
  br i1 %1350, label %OP2837.JUMPDEST, label %OP2783.DUP1

OP2783.DUP1:                                      ; preds = %OP2773.SWAP3
  store i256 %dup39287, ptr %sp9108, align 16
  store i256 31, ptr %sp9112, align 16
  %1352 = icmp ugt i256 %dup39287, 31
  %1353 = zext i1 %1352 to i256
  store i256 %1353, ptr %sp9108, align 16
  br i1 %1352, label %OP2802.JUMPDEST, label %OP2788.PUSH2

OP2788.PUSH2:                                     ; preds = %OP2783.DUP1
  store i256 256, ptr %sp9108, align 16
  store i256 256, ptr %sp9112, align 16
  %1354 = add i64 %len.addr.141, 9
  %sp9324 = getelementptr i256, ptr %sp9084, i64 8
  store i256 %swap.b9265, ptr %sp9324, align 16
  %1355 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9324, i8 17)
  %.not47798 = icmp eq i8 %1355, 0
  br i1 %.not47798, label %OP2792.DIV, label %return, !prof !6

OP2792.DIV:                                       ; preds = %OP2788.PUSH2
  %a9329 = load i256, ptr %sp9324, align 16
  %b9331 = load i256, ptr %sp9112, align 16
  %1356 = udiv i256 %a9329, %b9331
  store i256 %1356, ptr %sp9112, align 16
  %b9337 = load i256, ptr %sp9108, align 16
  %1357 = mul i256 %b9337, %1356
  store i256 %1357, ptr %sp9108, align 16
  %dup49341 = load i256, ptr %sp9096, align 16
  store i256 %dup49341, ptr %sp9112, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !423)
  %ecx.memory.i49743 = load ptr, ptr %ecx.memory.addr.i49696, align 8, !alias.scope !423
  %ecx.memory.len.addr.i49744 = getelementptr inbounds i8, ptr %ecx.memory.i49743, i64 16
  %ecx.memory.len.i49745 = load i64, ptr %ecx.memory.len.addr.i49744, align 8, !noalias !423
  %ecx.memory.last_checkpoint.addr.i49746 = getelementptr inbounds i8, ptr %ecx.memory.i49743, i64 48
  %ecx.memory.last_checkpoint.i49747 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49746, align 8, !noalias !423
  %1358 = sub i64 %ecx.memory.len.i49745, %ecx.memory.last_checkpoint.i49747
  %1359 = icmp ugt i256 %dup49341, 18446744073709551615
  %1360 = trunc i256 %dup49341 to i64
  %1361 = add i64 %1360, 32
  %1362 = icmp ugt i64 %1360, -33
  %1363 = or i1 %1359, %1362
  %1364 = select i1 %1363, i64 -1, i64 %1361
  %1365 = icmp ugt i64 %1364, %1358
  br i1 %1365, label %resize.i49754, label %OP2796.SWAP2, !prof !5

resize.i49754:                                    ; preds = %OP2792.DIV
  %1366 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1364)
  %.not.i49755 = icmp eq i8 %1366, 0
  br i1 %.not.i49755, label %OP2796.SWAP2, label %return, !prof !6

OP2796.SWAP2:                                     ; preds = %OP2792.DIV, %resize.i49754
  %ecx.memory.buffer.ptr.shared.addr.i49749 = getelementptr inbounds i8, ptr %ecx.memory.i49743, i64 8
  %ecx.memory.buffer.ptr.shared.i49750 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49749, align 8, !noalias !423
  %ecx.memory.buffer.ptr.i49751 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49750, i64 %ecx.memory.last_checkpoint.i49747
  %slot.i49752 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49751, i64 %1360
  %1367 = tail call i256 @llvm.bswap.i256(i256 %1357)
  store i256 %1367, ptr %slot.i49752, align 1, !noalias !423
  %swap.a9350 = load i256, ptr %sp9106, align 16
  %swap.b9352 = load i256, ptr %sp9096, align 16
  store i256 %swap.a9350, ptr %sp9096, align 16
  store i256 %swap.b9352, ptr %sp9106, align 16
  store i256 32, ptr %sp9108, align 16
  %1368 = add i256 %swap.b9352, 32
  store i256 %1368, ptr %sp9106, align 16
  store i256 %1368, ptr %sp9096, align 16
  store i256 %swap.a9350, ptr %sp9106, align 16
  br label %OP2837.JUMPDEST

OP2802.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6946.DUP1, %OP5712.DUP1, %OP2783.DUP1
  %len.addr.142 = phi i64 [ %3108, %OP6946.DUP1 ], [ %2625, %OP5712.DUP1 ], [ %1316, %OP2783.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %1369 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.142
  %sp9369 = getelementptr i256, ptr %1369, i64 -3
  %dup39370 = load i256, ptr %sp9369, align 16
  %1370 = add i64 %len.addr.142, -1
  %sp9375 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1370
  %b9376 = load i256, ptr %sp9375, align 16
  %1371 = add i256 %b9376, %dup39370
  %sp9379 = getelementptr i256, ptr %1369, i64 -1
  store i256 %1371, ptr %sp9369, align 16
  %sp9386 = getelementptr i256, ptr %1369, i64 -2
  %swap.b9387 = load i256, ptr %sp9386, align 16
  store i256 %dup39370, ptr %sp9386, align 16
  store i256 %swap.b9387, ptr %sp9379, align 16
  store i256 0, ptr %1369, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !426)
  %ecx.memory.addr.i49757 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49758 = load ptr, ptr %ecx.memory.addr.i49757, align 8, !alias.scope !426
  %ecx.memory.len.addr.i49759 = getelementptr inbounds i8, ptr %ecx.memory.i49758, i64 16
  %ecx.memory.len.i49760 = load i64, ptr %ecx.memory.len.addr.i49759, align 8, !noalias !426
  %ecx.memory.last_checkpoint.addr.i49761 = getelementptr inbounds i8, ptr %ecx.memory.i49758, i64 48
  %ecx.memory.last_checkpoint.i49762 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49761, align 8, !noalias !426
  %1372 = sub i64 %ecx.memory.len.i49760, %ecx.memory.last_checkpoint.i49762
  %1373 = icmp ult i64 %1372, 32
  br i1 %1373, label %resize.i49768, label %OP2809.PUSH1, !prof !5

resize.i49768:                                    ; preds = %OP2802.JUMPDEST
  %1374 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i49769 = icmp eq i8 %1374, 0
  br i1 %.not.i49769, label %OP2809.PUSH1, label %return, !prof !6

OP2809.PUSH1:                                     ; preds = %OP2802.JUMPDEST, %resize.i49768
  %ecx.memory.buffer.ptr.shared.addr.i49764 = getelementptr inbounds i8, ptr %ecx.memory.i49758, i64 8
  %ecx.memory.buffer.ptr.shared.i49765 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49764, align 8, !noalias !426
  %ecx.memory.buffer.ptr.i49766 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49765, i64 %ecx.memory.last_checkpoint.i49762
  %1375 = tail call i256 @llvm.bswap.i256(i256 %swap.b9387)
  store i256 %1375, ptr %ecx.memory.buffer.ptr.i49766, align 1, !noalias !426
  store i256 32, ptr %sp9375, align 16
  store i256 0, ptr %1369, align 16
  %1376 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9379)
  %.not49053 = icmp eq i8 %1376, 0
  br i1 %.not49053, label %OP2812.SWAP1, label %return, !prof !6

OP2812.SWAP1:                                     ; preds = %OP2809.PUSH1
  %swap.a9403 = load i256, ptr %sp9379, align 16
  %swap.b9405 = load i256, ptr %sp9386, align 16
  store i256 %swap.a9403, ptr %sp9386, align 16
  store i256 %swap.b9405, ptr %sp9379, align 16
  br label %OP2813.JUMPDEST.preheader, !annotation !7

OP2813.JUMPDEST.preheader.loopexit:               ; preds = %dynamic_jump_table
  %.phi.trans.insert54213 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp9408.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54213, i64 -2
  %dup29409.pre.pre = load i256, ptr %sp9408.phi.trans.insert, align 16
  br label %OP2813.JUMPDEST.preheader

OP2813.JUMPDEST.preheader:                        ; preds = %OP2813.JUMPDEST.preheader.loopexit, %OP2812.SWAP1
  %dup29409.pre = phi i256 [ %swap.a9403, %OP2812.SWAP1 ], [ %dup29409.pre.pre, %OP2813.JUMPDEST.preheader.loopexit ]
  %len.addr.143.ph = phi i64 [ %len.addr.142, %OP2812.SWAP1 ], [ %len.addr.357, %OP2813.JUMPDEST.preheader.loopexit ]
  %1377 = add i64 %len.addr.143.ph, 1
  %1378 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.143.ph
  %sp9408 = getelementptr i256, ptr %1378, i64 -2
  %sp9414 = getelementptr i256, ptr %1378, i64 -1
  %sp9416 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1377
  %ecx.memory.addr.i49771 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp9453 = getelementptr i256, ptr %1378, i64 -3
  br label %OP2813.JUMPDEST

OP2813.JUMPDEST:                                  ; preds = %OP2813.JUMPDEST.preheader, %OP2818.SWAP1
  %dup29409 = phi i256 [ %dup29409.pre, %OP2813.JUMPDEST.preheader ], [ %1390, %OP2818.SWAP1 ]
  store i256 %dup29409, ptr %1378, align 16
  %1379 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %1378, i8 17)
  %.not49054 = icmp eq i8 %1379, 0
  br i1 %.not49054, label %OP2816.DUP2, label %return, !prof !6

OP2816.DUP2:                                      ; preds = %OP2813.JUMPDEST
  %dup29415 = load i256, ptr %sp9414, align 16
  store i256 %dup29415, ptr %sp9416, align 16
  %b9421 = load i256, ptr %1378, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !429)
  %ecx.memory.i49772 = load ptr, ptr %ecx.memory.addr.i49771, align 8, !alias.scope !429
  %ecx.memory.len.addr.i49773 = getelementptr inbounds i8, ptr %ecx.memory.i49772, i64 16
  %ecx.memory.len.i49774 = load i64, ptr %ecx.memory.len.addr.i49773, align 8, !noalias !429
  %ecx.memory.last_checkpoint.addr.i49775 = getelementptr inbounds i8, ptr %ecx.memory.i49772, i64 48
  %ecx.memory.last_checkpoint.i49776 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49775, align 8, !noalias !429
  %1380 = sub i64 %ecx.memory.len.i49774, %ecx.memory.last_checkpoint.i49776
  %1381 = icmp ugt i256 %dup29415, 18446744073709551615
  %1382 = trunc i256 %dup29415 to i64
  %1383 = add i64 %1382, 32
  %1384 = icmp ugt i64 %1382, -33
  %1385 = or i1 %1381, %1384
  %1386 = select i1 %1385, i64 -1, i64 %1383
  %1387 = icmp ugt i64 %1386, %1380
  br i1 %1387, label %resize.i49783, label %OP2818.SWAP1, !prof !5

resize.i49783:                                    ; preds = %OP2816.DUP2
  %1388 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1386)
  %.not.i49784 = icmp eq i8 %1388, 0
  br i1 %.not.i49784, label %OP2818.SWAP1, label %return, !prof !6

OP2818.SWAP1:                                     ; preds = %OP2816.DUP2, %resize.i49783
  %ecx.memory.buffer.ptr.shared.addr.i49778 = getelementptr inbounds i8, ptr %ecx.memory.i49772, i64 8
  %ecx.memory.buffer.ptr.shared.i49779 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49778, align 8, !noalias !429
  %ecx.memory.buffer.ptr.i49780 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49779, i64 %ecx.memory.last_checkpoint.i49776
  %slot.i49781 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49780, i64 %1382
  %1389 = tail call i256 @llvm.bswap.i256(i256 %b9421)
  store i256 %1389, ptr %slot.i49781, align 1, !noalias !429
  %swap.a9424 = load i256, ptr %sp9414, align 16
  %swap.b9426 = load i256, ptr %sp9408, align 16
  %1390 = add i256 %swap.b9426, 1
  store i256 %1390, ptr %sp9408, align 16
  %1391 = add i256 %swap.a9424, 32
  store i256 %1391, ptr %sp9414, align 16
  %dup49454 = load i256, ptr %sp9453, align 16
  store i256 %dup49454, ptr %sp9416, align 16
  %1392 = icmp ugt i256 %dup49454, %1391
  %1393 = zext i1 %1392 to i256
  store i256 %1393, ptr %1378, align 16
  br i1 %1392, label %OP2813.JUMPDEST, label %OP2829.DUP3

OP2829.DUP3:                                      ; preds = %OP2818.SWAP1
  %1394 = sub i256 %swap.a9424, %dup49454
  %1395 = and i256 %1394, 31
  store i256 %dup49454, ptr %1378, align 16
  %1396 = add i256 %dup49454, %1395
  store i256 %1396, ptr %sp9453, align 16
  store i256 %dup49454, ptr %sp9414, align 16
  br label %OP2837.JUMPDEST, !annotation !7

OP2837.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6959.SWAP2, %OP6936.SWAP3, %OP5725.SWAP2, %OP5702.SWAP3, %OP2829.DUP3, %OP2796.SWAP2, %OP2773.SWAP3
  %len.addr.144 = phi i64 [ %1316, %OP2773.SWAP3 ], [ %3108, %OP6936.SWAP3 ], [ %len.addr.143.ph, %OP2829.DUP3 ], [ %3108, %OP6959.SWAP2 ], [ %2625, %OP5702.SWAP3 ], [ %2625, %OP5725.SWAP2 ], [ %1316, %OP2796.SWAP2 ], [ %len.addr.357, %dynamic_jump_table ]
  %1397 = add i64 %len.addr.144, -5
  %1398 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.144
  %sp9510 = getelementptr i256, ptr %1398, i64 -7
  %dup29511 = load i256, ptr %sp9510, align 16
  %sp9512 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1397
  store i256 %dup29511, ptr %sp9512, align 16
  br label %dynamic_jump_table.preheader

OP2845.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP540.JUMPDEST
  %len.addr.145 = phi i64 [ %len.addr.22, %OP540.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1399 = add i64 %len.addr.145, 1
  %sp9518 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.145
  store i256 1, ptr %sp9518, align 16
  %1400 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9518, i8 17)
  %.not48561 = icmp eq i8 %1400, 0
  br i1 %.not48561, label %OP2848.PUSH1, label %return, !prof !6

OP2848.PUSH1:                                     ; preds = %OP2845.JUMPDEST
  %sp9522 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1399
  %swap.b9527 = load i256, ptr %sp9518, align 16
  store i256 0, ptr %sp9518, align 16
  %1401 = add i64 %len.addr.145, 3
  %sp9529 = getelementptr i256, ptr %sp9518, i64 2
  store i256 255, ptr %sp9529, align 16
  %1402 = and i256 %swap.b9527, 372682917519380244141939632342652170012262798458880
  %1403 = icmp eq i256 %1402, 0
  %1404 = zext i1 %1403 to i256
  store i256 %1404, ptr %sp9522, align 16
  br i1 %1403, label %OP2889.JUMPDEST, label %OP2858.PUSH1

OP2858.PUSH1:                                     ; preds = %OP2848.PUSH1
  store i256 64, ptr %sp9522, align 16
  store i256 64, ptr %sp9529, align 16
  %mload.out.slot9565 = alloca i256, align 16
  %1405 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9565, ptr %arg.ecx.addr)
  %.not48562 = icmp eq i8 %1405, 0
  br i1 %.not48562, label %OP2860.MLOAD.contd, label %return, !prof !6

OP2860.MLOAD.contd:                               ; preds = %OP2858.PUSH1
  %mload.out9566 = load i256, ptr %mload.out.slot9565, align 16
  store i256 %mload.out9566, ptr %sp9529, align 16
  %sp9569 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1401
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp9569, align 16
  %sp9573 = getelementptr i256, ptr %sp9518, i64 4
  store i256 %mload.out9566, ptr %sp9573, align 16
  %1406 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out9566, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48563 = icmp eq i8 %1406, 0
  br i1 %.not48563, label %OP2864.PUSH1, label %return, !prof !6

OP2864.PUSH1:                                     ; preds = %OP2860.MLOAD.contd
  store i256 32, ptr %sp9569, align 16
  %dup39585 = load i256, ptr %sp9529, align 16
  %sp9586 = getelementptr i256, ptr %sp9518, i64 5
  store i256 %dup39585, ptr %sp9586, align 16
  %1407 = add i256 %dup39585, 4
  store i256 %1407, ptr %sp9573, align 16
  %1408 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1407, i256 32, ptr %arg.ecx.addr)
  %.not48564 = icmp eq i8 %1408, 0
  br i1 %.not48564, label %OP2869.PUSH1, label %return, !prof !6

OP2869.PUSH1:                                     ; preds = %OP2864.PUSH1
  store i256 16, ptr %sp9569, align 16
  %dup39604 = load i256, ptr %sp9529, align 16
  store i256 %dup39604, ptr %sp9586, align 16
  %1409 = add i256 %dup39604, 36
  store i256 %1409, ptr %sp9573, align 16
  %1410 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1409, i256 16, ptr %arg.ecx.addr)
  %.not48565 = icmp eq i8 %1410, 0
  br i1 %.not48565, label %OP2874.PUSH32, label %return, !prof !6

OP2874.PUSH32:                                    ; preds = %OP2869.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp9569, align 16
  %dup39623 = load i256, ptr %sp9529, align 16
  store i256 %dup39623, ptr %sp9586, align 16
  %1411 = add i256 %dup39623, 68
  store i256 %1411, ptr %sp9573, align 16
  %1412 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1411, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48566 = icmp eq i8 %1412, 0
  br i1 %.not48566, label %OP2879.SWAP1, label %return, !prof !6

OP2879.SWAP1:                                     ; preds = %OP2874.PUSH32
  %swap.a9638 = load i256, ptr %sp9529, align 16
  %swap.b9640 = load i256, ptr %sp9522, align 16
  store i256 %swap.a9638, ptr %sp9522, align 16
  store i256 %swap.b9640, ptr %sp9529, align 16
  %mload.out.slot9644 = alloca i256, align 16
  %1413 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b9640, ptr %mload.out.slot9644, ptr %arg.ecx.addr)
  %.not48567 = icmp eq i8 %1413, 0
  br i1 %.not48567, label %OP2880.MLOAD.contd, label %return, !prof !6

OP2880.MLOAD.contd:                               ; preds = %OP2879.SWAP1
  %mload.out9645 = load i256, ptr %mload.out.slot9644, align 16
  %swap.b9651 = load i256, ptr %sp9522, align 16
  %1414 = sub i256 %swap.b9651, %mload.out9645
  store i256 100, ptr %sp9569, align 16
  %1415 = add i256 %1414, 100
  store i256 %1415, ptr %sp9522, align 16
  store i256 %mload.out9645, ptr %sp9529, align 16
  %1416 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9522, i8 16)
  %.not48568 = icmp eq i8 %1416, 0
  %spec.select36582 = select i1 %.not48568, i8 16, i8 %1416, !prof !6
  br label %return

OP2889.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2848.PUSH1
  %len.addr.146 = phi i64 [ %1399, %OP2848.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp9684 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.146
  store i256 4971, ptr %sp9684, align 16
  %contract.caller.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller = load i160, ptr %contract.caller.addr, align 16
  %1417 = tail call i160 @llvm.bswap.i160(i160 %contract.caller)
  %1418 = zext i160 %1417 to i256
  %sp9686 = getelementptr i256, ptr %sp9684, i64 1
  store i256 %1418, ptr %sp9686, align 16
  %sp9688 = getelementptr i256, ptr %sp9684, i64 -3
  %dup59689 = load i256, ptr %sp9688, align 16
  %sp9690 = getelementptr i256, ptr %sp9684, i64 2
  store i256 %dup59689, ptr %sp9690, align 16
  %sp9692 = getelementptr i256, ptr %sp9684, i64 -2
  br label %OP7342.JUMPDEST.sink.split

OP2896.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1419 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp9699 = getelementptr i256, ptr %1419, i64 -1
  store i256 1, ptr %sp9699, align 16
  %sp9703 = getelementptr i256, ptr %1419, i64 -4
  %swap.b9704 = load i256, ptr %sp9703, align 16
  store i256 1, ptr %sp9703, align 16
  store i256 %swap.b9704, ptr %sp9699, align 16
  %sp9708 = getelementptr i256, ptr %1419, i64 -3
  %swap.b9709 = load i256, ptr %sp9708, align 16
  store i256 %swap.b9704, ptr %sp9708, align 16
  store i256 %swap.b9709, ptr %sp9699, align 16
  %1420 = add i64 %len.addr.357, -3
  br label %dynamic_jump_table.backedge

dynamic_jump_table.backedge:                      ; preds = %OP2896.JUMPDEST, %OP2973.POP, %OP3296.PUSH1, %OP3465.JUMP, %OP3909.POP, %OP3928.JUMPDEST, %OP4488.POP, %OP4800.POP, %OP5024.POP, %OP5363.JUMPDEST, %OP5386.JUMPDEST, %OP5626.JUMPDEST, %OP5991.JUMPDEST, %OP6568.JUMPDEST, %OP6673.SWAP2, %OP6693.JUMP, %OP6881.JUMPDEST, %OP7267.JUMPDEST, %OP7334.POP, %OP7697.POP, %OP7740.JUMPDEST, %OP8128.JUMP, %OP8688.JUMPDEST, %OP8905.POP, %OP9059.JUMPDEST, %OP9304.SWAP1, %OP9400.JUMPDEST, %OP9664.POP, %OP9687.SWAP1, %OP10170.JUMPDEST, %OP10183.ISZERO
  %len.addr.357.be = phi i64 [ %5183, %OP10183.ISZERO ], [ %5180, %OP10170.JUMPDEST ], [ %4888, %OP9687.SWAP1 ], [ %4849, %OP9664.POP ], [ %4624, %OP9400.JUMPDEST ], [ %4588, %OP9304.SWAP1 ], [ %4387, %OP9059.JUMPDEST ], [ %4290, %OP8905.POP ], [ %4172, %OP8688.JUMPDEST ], [ %3827, %OP8128.JUMP ], [ %3588, %OP7740.JUMPDEST ], [ %3569, %OP7697.POP ], [ %3331, %OP7334.POP ], [ %3305, %OP7267.JUMPDEST ], [ %3103, %OP6881.JUMPDEST ], [ %3030, %OP6693.JUMP ], [ %3002, %OP6673.SWAP2 ], [ %2987, %OP6568.JUMPDEST ], [ %2755, %OP5991.JUMPDEST ], [ %2606, %OP5626.JUMPDEST ], [ %2504, %OP5386.JUMPDEST ], [ %2497, %OP5363.JUMPDEST ], [ %2291, %OP5024.POP ], [ %2196, %OP4800.POP ], [ %2074, %OP4488.POP ], [ %1851, %OP3928.JUMPDEST ], [ %1845, %OP3909.POP ], [ %1653, %OP3465.JUMP ], [ %1581, %OP3296.PUSH1 ], [ %1448, %OP2973.POP ], [ %1420, %OP2896.JUMPDEST ]
  %.be = phi i256 [ %swap.b35530, %OP10183.ISZERO ], [ %swap.b35499, %OP10170.JUMPDEST ], [ %swap.b33788, %OP9687.SWAP1 ], [ %a33705, %OP9664.POP ], [ %a32807, %OP9400.JUMPDEST ], [ %swap.b32458, %OP9304.SWAP1 ], [ %swap.b31539, %OP9059.JUMPDEST ], [ %a30955, %OP8905.POP ], [ %a30165, %OP8688.JUMPDEST ], [ %a28097, %OP8128.JUMP ], [ %swap.b26724, %OP7740.JUMPDEST ], [ %a26556, %OP7697.POP ], [ %a25282, %OP7334.POP ], [ %a25057, %OP7267.JUMPDEST ], [ %a23662, %OP6881.JUMPDEST ], [ %a22982, %OP6693.JUMP ], [ 19497, %OP6673.SWAP2 ], [ %a22582, %OP6568.JUMPDEST ], [ %swap.b20521, %OP5991.JUMPDEST ], [ %a19246, %OP5626.JUMPDEST ], [ %swap.b18409, %OP5386.JUMPDEST ], [ %a18360, %OP5363.JUMPDEST ], [ %a17095, %OP5024.POP ], [ %a16342, %OP4800.POP ], [ %swap.b15242, %OP4488.POP ], [ %swap.b13266, %OP3928.JUMPDEST ], [ %a13228, %OP3909.POP ], [ %a11637, %OP3465.JUMP ], [ %swap.b11104, %OP3296.PUSH1 ], [ %a9952, %OP2973.POP ], [ %swap.b9704, %OP2896.JUMPDEST ]
  br label %dynamic_jump_table

OP2904.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP570.JUMPDEST
  %len.addr.147 = phi i64 [ %258, %OP570.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1421 = add i64 %len.addr.147, 1
  %sp9717 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.147
  store i256 11, ptr %sp9717, align 16
  %1422 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9717, i8 17)
  %.not48555 = icmp eq i8 %1422, 0
  br i1 %.not48555, label %OP2907.SWAP1, label %return, !prof !6

OP2907.SWAP1:                                     ; preds = %OP2904.JUMPDEST
  %swap.a9722 = load i256, ptr %sp9717, align 16
  %sp9723 = getelementptr i256, ptr %sp9717, i64 -1
  %swap.b9724 = load i256, ptr %sp9723, align 16
  store i256 %swap.a9722, ptr %sp9723, align 16
  store i256 %swap.b9724, ptr %sp9717, align 16
  br label %dynamic_jump_table.preheader

OP2909.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP605.JUMPDEST
  %len.addr.148 = phi i64 [ %274, %OP605.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1423 = add i64 %len.addr.148, 1
  %sp9730 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.148
  store i256 2, ptr %sp9730, align 16
  %1424 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9730, i8 17)
  %.not48534 = icmp eq i8 %1424, 0
  br i1 %.not48534, label %OP2912.PUSH20, label %return, !prof !6

OP2912.PUSH20:                                    ; preds = %OP2909.JUMPDEST
  %1425 = add i64 %len.addr.148, 2
  %sp9734 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1423
  %b9739 = load i256, ptr %sp9730, align 16
  %contract.caller.addr9742 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller9743 = load i160, ptr %contract.caller.addr9742, align 16
  %1426 = tail call i160 @llvm.bswap.i160(i160 %contract.caller9743)
  %1427 = zext i160 %1426 to i256
  store i256 %1427, ptr %sp9734, align 16
  %1428 = trunc i256 %b9739 to i160
  %1429 = icmp eq i160 %1426, %1428
  %1430 = zext i1 %1429 to i256
  store i256 %1430, ptr %sp9730, align 16
  br i1 %1429, label %OP2956.JUMPDEST, label %OP2918.PUSH1

OP2918.PUSH1:                                     ; preds = %OP2912.PUSH20
  store i256 64, ptr %sp9730, align 16
  %mload.out.slot9759 = alloca i256, align 16
  %1431 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9759, ptr %arg.ecx.addr)
  %.not48535 = icmp eq i8 %1431, 0
  br i1 %.not48535, label %OP2919.MLOAD.contd, label %return, !prof !6

OP2919.MLOAD.contd:                               ; preds = %OP2918.PUSH1
  %mload.out9760 = load i256, ptr %mload.out.slot9759, align 16
  store i256 %mload.out9760, ptr %sp9730, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp9734, align 16
  %1432 = add i64 %len.addr.148, 3
  %sp9767 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1425
  store i256 %mload.out9760, ptr %sp9767, align 16
  %1433 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out9760, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48536 = icmp eq i8 %1433, 0
  br i1 %.not48536, label %OP2923.PUSH1, label %return, !prof !6

OP2923.PUSH1:                                     ; preds = %OP2919.MLOAD.contd
  %b9779 = load i256, ptr %sp9730, align 16
  %1434 = add i256 %b9779, 4
  store i256 %1434, ptr %sp9730, align 16
  store i256 %1434, ptr %sp9734, align 16
  %sp9790 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1432
  %1435 = add i256 %b9779, 36
  store i256 %1435, ptr %sp9767, align 16
  %sp9804 = getelementptr i256, ptr %sp9730, i64 4
  store i256 32, ptr %sp9790, align 16
  store i256 %1434, ptr %sp9804, align 16
  %1436 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1434, i256 32, ptr %arg.ecx.addr)
  %.not48537 = icmp eq i8 %1436, 0
  br i1 %.not48537, label %OP2934.PUSH1, label %return, !prof !6

OP2934.PUSH1:                                     ; preds = %OP2923.PUSH1
  store i256 44, ptr %sp9790, align 16
  %dup29824 = load i256, ptr %sp9767, align 16
  store i256 %dup29824, ptr %sp9804, align 16
  %1437 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup29824, i256 44, ptr %arg.ecx.addr)
  %.not48538 = icmp eq i8 %1437, 0
  br i1 %.not48538, label %OP2937.PUSH1, label %return, !prof !6

OP2937.PUSH1:                                     ; preds = %OP2934.PUSH1
  %b9837 = load i256, ptr %sp9767, align 16
  %1438 = add i256 %b9837, 32
  store i256 %1438, ptr %sp9767, align 16
  store i256 22564, ptr %sp9804, align 16
  %sp9846 = getelementptr i256, ptr %sp9730, i64 5
  store i256 44, ptr %sp9790, align 16
  store i256 %1438, ptr %sp9846, align 16
  %1439 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9790)
  %.not48539 = icmp eq i8 %1439, 0
  br i1 %.not48539, label %OP2944.PUSH1, label %return, !prof !6

OP2944.PUSH1:                                     ; preds = %OP2937.PUSH1
  store i256 64, ptr %sp9790, align 16
  %b9860 = load i256, ptr %sp9767, align 16
  %1440 = add i256 %b9860, 64
  %swap.b9866 = load i256, ptr %sp9730, align 16
  store i256 %1440, ptr %sp9730, align 16
  store i256 %swap.b9866, ptr %sp9767, align 16
  store i256 64, ptr %sp9734, align 16
  %mload.out.slot9874 = alloca i256, align 16
  %1441 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9874, ptr %arg.ecx.addr)
  %.not48540 = icmp eq i8 %1441, 0
  br i1 %.not48540, label %OP2950.MLOAD.contd, label %return, !prof !6

OP2950.MLOAD.contd:                               ; preds = %OP2944.PUSH1
  %mload.out9875 = load i256, ptr %mload.out.slot9874, align 16
  %swap.b9885 = load i256, ptr %sp9730, align 16
  store i256 %swap.b9885, ptr %sp9767, align 16
  %1442 = sub i256 %swap.b9885, %mload.out9875
  store i256 %1442, ptr %sp9730, align 16
  store i256 %mload.out9875, ptr %sp9734, align 16
  %1443 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9730, i8 16)
  %.not48541 = icmp eq i8 %1443, 0
  %spec.select36583 = select i1 %.not48541, i8 16, i8 %1443, !prof !6
  br label %return

OP2956.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54255 = add i64 %len.addr.357, 2
  br label %OP2956.JUMPDEST

OP2956.JUMPDEST:                                  ; preds = %OP2956.JUMPDEST.loopexit, %OP2912.PUSH20
  %.pre-phi54256 = phi i64 [ %.pre54255, %OP2956.JUMPDEST.loopexit ], [ %1425, %OP2912.PUSH20 ]
  %len.addr.149 = phi i64 [ %len.addr.357, %OP2956.JUMPDEST.loopexit ], [ %len.addr.148, %OP2912.PUSH20 ]
  %sp9901 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.149
  store i256 5107, ptr %sp9901, align 16
  %sp9903 = getelementptr i256, ptr %sp9901, i64 -1
  %dup29904 = load i256, ptr %sp9903, align 16
  %sp9905 = getelementptr i256, ptr %sp9901, i64 1
  store i256 %dup29904, ptr %sp9905, align 16
  br label %OP9175.JUMPDEST.sink.split

OP2961.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1444 = add i64 %len.addr.357, 1
  %sp9909 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp9909, align 16
  %mload.out.slot9913 = alloca i256, align 16
  %1445 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot9913, ptr %arg.ecx.addr)
  %.not48366 = icmp eq i8 %1445, 0
  br i1 %.not48366, label %OP2963.MLOAD.contd, label %return, !prof !6

OP2963.MLOAD.contd:                               ; preds = %OP2961.JUMPDEST
  %mload.out9914 = load i256, ptr %mload.out.slot9913, align 16
  store i256 %mload.out9914, ptr %sp9909, align 16
  %sp9917 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1444
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp9917, align 16
  %sp9919 = getelementptr i256, ptr %sp9909, i64 -1
  %dup39920 = load i256, ptr %sp9919, align 16
  %sp9921 = getelementptr i256, ptr %sp9909, i64 2
  store i256 %dup39920, ptr %sp9921, align 16
  %1446 = and i256 %dup39920, 1461501637330902918203684832716283019655932542975
  store i256 %1446, ptr %sp9917, align 16
  store i256 %1446, ptr %sp9909, align 16
  store i256 %mload.out9914, ptr %sp9917, align 16
  store i256 7912286694511111423320282365820492402552699885419826908507410027143348059214, ptr %sp9921, align 16
  store i256 7912286694511111423320282365820492402552699885419826908507410027143348059214, ptr %sp9917, align 16
  store i256 %mload.out9914, ptr %sp9921, align 16
  %sp9941 = getelementptr i256, ptr %sp9909, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp9921, i8 0, i64 64, i1 false)
  store i256 %mload.out9914, ptr %sp9941, align 16
  %1447 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9909, i8 2)
  %.not48367 = icmp eq i8 %1447, 0
  br i1 %.not48367, label %OP2973.POP, label %return, !prof !6

OP2973.POP:                                       ; preds = %OP2963.MLOAD.contd
  %1448 = add i64 %len.addr.357, -2
  %sp9951 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1448
  %a9952 = load i256, ptr %sp9951, align 16
  br label %dynamic_jump_table.backedge

OP2975.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP629.JUMPDEST
  %len.addr.150 = phi i64 [ %286, %OP629.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1449 = add i64 %len.addr.150, 1
  %sp9955 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.150
  store i256 1, ptr %sp9955, align 16
  %1450 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9955, i8 17)
  %.not48525 = icmp eq i8 %1450, 0
  br i1 %.not48525, label %OP2978.PUSH1, label %return, !prof !6

OP2978.PUSH1:                                     ; preds = %OP2975.JUMPDEST
  %sp9959 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1449
  %swap.b9964 = load i256, ptr %sp9955, align 16
  store i256 0, ptr %sp9955, align 16
  %1451 = add i64 %len.addr.150, 3
  %sp9966 = getelementptr i256, ptr %sp9955, i64 2
  store i256 255, ptr %sp9966, align 16
  %1452 = and i256 %swap.b9964, 372682917519380244141939632342652170012262798458880
  %1453 = icmp eq i256 %1452, 0
  %1454 = zext i1 %1453 to i256
  store i256 %1454, ptr %sp9959, align 16
  br i1 %1453, label %OP3019.JUMPDEST, label %OP2988.PUSH1

OP2988.PUSH1:                                     ; preds = %OP2978.PUSH1
  store i256 64, ptr %sp9959, align 16
  store i256 64, ptr %sp9966, align 16
  %mload.out.slot10002 = alloca i256, align 16
  %1455 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10002, ptr %arg.ecx.addr)
  %.not48526 = icmp eq i8 %1455, 0
  br i1 %.not48526, label %OP2990.MLOAD.contd, label %return, !prof !6

OP2990.MLOAD.contd:                               ; preds = %OP2988.PUSH1
  %mload.out10003 = load i256, ptr %mload.out.slot10002, align 16
  store i256 %mload.out10003, ptr %sp9966, align 16
  %sp10006 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1451
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp10006, align 16
  %sp10010 = getelementptr i256, ptr %sp9955, i64 4
  store i256 %mload.out10003, ptr %sp10010, align 16
  %1456 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10003, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48527 = icmp eq i8 %1456, 0
  br i1 %.not48527, label %OP2994.PUSH1, label %return, !prof !6

OP2994.PUSH1:                                     ; preds = %OP2990.MLOAD.contd
  store i256 32, ptr %sp10006, align 16
  %dup310022 = load i256, ptr %sp9966, align 16
  %sp10023 = getelementptr i256, ptr %sp9955, i64 5
  store i256 %dup310022, ptr %sp10023, align 16
  %1457 = add i256 %dup310022, 4
  store i256 %1457, ptr %sp10010, align 16
  %1458 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1457, i256 32, ptr %arg.ecx.addr)
  %.not48528 = icmp eq i8 %1458, 0
  br i1 %.not48528, label %OP2999.PUSH1, label %return, !prof !6

OP2999.PUSH1:                                     ; preds = %OP2994.PUSH1
  store i256 16, ptr %sp10006, align 16
  %dup310041 = load i256, ptr %sp9966, align 16
  store i256 %dup310041, ptr %sp10023, align 16
  %1459 = add i256 %dup310041, 36
  store i256 %1459, ptr %sp10010, align 16
  %1460 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1459, i256 16, ptr %arg.ecx.addr)
  %.not48529 = icmp eq i8 %1460, 0
  br i1 %.not48529, label %OP3004.PUSH32, label %return, !prof !6

OP3004.PUSH32:                                    ; preds = %OP2999.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp10006, align 16
  %dup310060 = load i256, ptr %sp9966, align 16
  store i256 %dup310060, ptr %sp10023, align 16
  %1461 = add i256 %dup310060, 68
  store i256 %1461, ptr %sp10010, align 16
  %1462 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1461, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48530 = icmp eq i8 %1462, 0
  br i1 %.not48530, label %OP3009.SWAP1, label %return, !prof !6

OP3009.SWAP1:                                     ; preds = %OP3004.PUSH32
  %swap.a10075 = load i256, ptr %sp9966, align 16
  %swap.b10077 = load i256, ptr %sp9959, align 16
  store i256 %swap.a10075, ptr %sp9959, align 16
  store i256 %swap.b10077, ptr %sp9966, align 16
  %mload.out.slot10081 = alloca i256, align 16
  %1463 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b10077, ptr %mload.out.slot10081, ptr %arg.ecx.addr)
  %.not48531 = icmp eq i8 %1463, 0
  br i1 %.not48531, label %OP3010.MLOAD.contd, label %return, !prof !6

OP3010.MLOAD.contd:                               ; preds = %OP3009.SWAP1
  %mload.out10082 = load i256, ptr %mload.out.slot10081, align 16
  %swap.b10088 = load i256, ptr %sp9959, align 16
  %1464 = sub i256 %swap.b10088, %mload.out10082
  store i256 100, ptr %sp10006, align 16
  %1465 = add i256 %1464, 100
  store i256 %1465, ptr %sp9959, align 16
  store i256 %mload.out10082, ptr %sp9966, align 16
  %1466 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp9959, i8 16)
  %.not48532 = icmp eq i8 %1466, 0
  %spec.select36584 = select i1 %.not48532, i8 16, i8 %1466, !prof !6
  br label %return

OP3019.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2978.PUSH1
  %len.addr.151 = phi i64 [ %1449, %OP2978.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %contract.caller.addr10121 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller10122 = load i160, ptr %contract.caller.addr10121, align 16
  %1467 = tail call i160 @llvm.bswap.i160(i160 %contract.caller10122)
  %1468 = zext i160 %1467 to i256
  %sp10123 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.151
  store i256 %1468, ptr %sp10123, align 16
  %sp10125 = getelementptr i256, ptr %sp10123, i64 1
  store i256 5326, ptr %sp10125, align 16
  %1469 = add i64 %len.addr.151, 3
  %sp10129 = getelementptr i256, ptr %sp10123, i64 2
  store i256 %1468, ptr %sp10129, align 16
  br label %OP7491.JUMPDEST

OP3025.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1470 = add i64 %len.addr.357, -1
  %sp10133 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1470
  %a10134 = load i256, ptr %sp10133, align 16
  %1471 = icmp eq i256 %a10134, 0
  %1472 = zext i1 %1471 to i256
  store i256 %1472, ptr %sp10133, align 16
  br i1 %1471, label %OP3067.JUMPDEST, label %OP3029.PUSH1

OP3029.PUSH1:                                     ; preds = %OP3025.JUMPDEST
  store i256 64, ptr %sp10133, align 16
  %mload.out.slot10144 = alloca i256, align 16
  %1473 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10144, ptr %arg.ecx.addr)
  %.not48359 = icmp eq i8 %1473, 0
  br i1 %.not48359, label %OP3030.MLOAD.contd, label %return, !prof !6

OP3030.MLOAD.contd:                               ; preds = %OP3029.PUSH1
  %mload.out10145 = load i256, ptr %mload.out.slot10144, align 16
  store i256 %mload.out10145, ptr %sp10133, align 16
  %1474 = add i64 %len.addr.357, 1
  %sp10148 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp10148, align 16
  %1475 = add i64 %len.addr.357, 2
  %sp10150 = getelementptr i256, ptr %sp10148, i64 -1
  %sp10152 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1474
  store i256 %mload.out10145, ptr %sp10152, align 16
  %1476 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10145, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48360 = icmp eq i8 %1476, 0
  br i1 %.not48360, label %OP3034.PUSH1, label %return, !prof !6

OP3034.PUSH1:                                     ; preds = %OP3030.MLOAD.contd
  store i256 4, ptr %sp10148, align 16
  %b10164 = load i256, ptr %sp10133, align 16
  %1477 = add i256 %b10164, 4
  store i256 %1477, ptr %sp10133, align 16
  store i256 %1477, ptr %sp10148, align 16
  store i256 %1477, ptr %sp10152, align 16
  %sp10175 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1475
  store i256 32, ptr %sp10175, align 16
  %1478 = add i256 %b10164, 36
  store i256 %1478, ptr %sp10152, align 16
  store i256 %1477, ptr %sp10175, align 16
  %sp10189 = getelementptr i256, ptr %sp10148, i64 3
  store i256 %1478, ptr %sp10189, align 16
  store i256 32, ptr %sp10175, align 16
  store i256 %1477, ptr %sp10189, align 16
  %1479 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1477, i256 32, ptr %arg.ecx.addr)
  %.not48361 = icmp eq i8 %1479, 0
  br i1 %.not48361, label %OP3045.PUSH1, label %return, !prof !6

OP3045.PUSH1:                                     ; preds = %OP3034.PUSH1
  store i256 37, ptr %sp10175, align 16
  %dup210209 = load i256, ptr %sp10152, align 16
  store i256 %dup210209, ptr %sp10189, align 16
  %1480 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup210209, i256 37, ptr %arg.ecx.addr)
  %.not48362 = icmp eq i8 %1480, 0
  br i1 %.not48362, label %OP3048.PUSH1, label %return, !prof !6

OP3048.PUSH1:                                     ; preds = %OP3045.PUSH1
  store i256 32, ptr %sp10175, align 16
  %b10222 = load i256, ptr %sp10152, align 16
  %1481 = add i256 %b10222, 32
  store i256 %1481, ptr %sp10152, align 16
  store i256 %1481, ptr %sp10175, align 16
  store i256 23300, ptr %sp10189, align 16
  %sp10231 = getelementptr i256, ptr %sp10148, i64 4
  store i256 37, ptr %sp10231, align 16
  store i256 37, ptr %sp10175, align 16
  store i256 %1481, ptr %sp10231, align 16
  %1482 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10175)
  %.not48363 = icmp eq i8 %1482, 0
  br i1 %.not48363, label %OP3055.PUSH1, label %return, !prof !6

OP3055.PUSH1:                                     ; preds = %OP3048.PUSH1
  store i256 64, ptr %sp10175, align 16
  %b10245 = load i256, ptr %sp10152, align 16
  %1483 = add i256 %b10245, 64
  store i256 %1483, ptr %sp10152, align 16
  %swap.b10251 = load i256, ptr %sp10150, align 16
  store i256 %1483, ptr %sp10150, align 16
  store i256 %swap.b10251, ptr %sp10152, align 16
  store i256 64, ptr %sp10148, align 16
  %mload.out.slot10259 = alloca i256, align 16
  %1484 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10259, ptr %arg.ecx.addr)
  %.not48364 = icmp eq i8 %1484, 0
  br i1 %.not48364, label %OP3061.MLOAD.contd, label %return, !prof !6

OP3061.MLOAD.contd:                               ; preds = %OP3055.PUSH1
  %mload.out10260 = load i256, ptr %mload.out.slot10259, align 16
  store i256 %mload.out10260, ptr %sp10148, align 16
  store i256 %mload.out10260, ptr %sp10152, align 16
  %swap.b10270 = load i256, ptr %sp10150, align 16
  store i256 %mload.out10260, ptr %sp10150, align 16
  store i256 %swap.b10270, ptr %sp10152, align 16
  %1485 = sub i256 %swap.b10270, %mload.out10260
  store i256 %1485, ptr %sp10148, align 16
  store i256 %1485, ptr %sp10150, align 16
  store i256 %mload.out10260, ptr %sp10148, align 16
  %1486 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10150, i8 16)
  %.not48365 = icmp eq i8 %1486, 0
  %spec.select36585 = select i1 %.not48365, i8 16, i8 %1486, !prof !6
  br label %return

OP3067.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3025.JUMPDEST
  %len.addr.152 = phi i64 [ %1470, %OP3025.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1487 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.152
  %sp10286 = getelementptr i256, ptr %1487, i64 -5
  %dup510287 = load i256, ptr %sp10286, align 16
  store i256 %dup510287, ptr %1487, align 16
  %sp10290 = getelementptr i256, ptr %1487, i64 1
  store i256 5422, ptr %sp10290, align 16
  %1488 = add i64 %len.addr.152, 3
  %sp10294 = getelementptr i256, ptr %1487, i64 2
  store i256 %dup510287, ptr %sp10294, align 16
  br label %OP7491.JUMPDEST

OP3073.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1489 = add i64 %len.addr.357, -1
  %sp10298 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1489
  %a10299 = load i256, ptr %sp10298, align 16
  %1490 = icmp eq i256 %a10299, 0
  %1491 = zext i1 %1490 to i256
  store i256 %1491, ptr %sp10298, align 16
  br i1 %1490, label %OP3115.JUMPDEST, label %OP3077.PUSH1

OP3077.PUSH1:                                     ; preds = %OP3073.JUMPDEST
  store i256 64, ptr %sp10298, align 16
  %mload.out.slot10309 = alloca i256, align 16
  %1492 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10309, ptr %arg.ecx.addr)
  %.not48352 = icmp eq i8 %1492, 0
  br i1 %.not48352, label %OP3078.MLOAD.contd, label %return, !prof !6

OP3078.MLOAD.contd:                               ; preds = %OP3077.PUSH1
  %mload.out10310 = load i256, ptr %mload.out.slot10309, align 16
  store i256 %mload.out10310, ptr %sp10298, align 16
  %1493 = add i64 %len.addr.357, 1
  %sp10313 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp10313, align 16
  %1494 = add i64 %len.addr.357, 2
  %sp10315 = getelementptr i256, ptr %sp10313, i64 -1
  %sp10317 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1493
  store i256 %mload.out10310, ptr %sp10317, align 16
  %1495 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10310, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48353 = icmp eq i8 %1495, 0
  br i1 %.not48353, label %OP3082.PUSH1, label %return, !prof !6

OP3082.PUSH1:                                     ; preds = %OP3078.MLOAD.contd
  store i256 4, ptr %sp10313, align 16
  %b10329 = load i256, ptr %sp10298, align 16
  %1496 = add i256 %b10329, 4
  store i256 %1496, ptr %sp10298, align 16
  store i256 %1496, ptr %sp10313, align 16
  store i256 %1496, ptr %sp10317, align 16
  %sp10340 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1494
  store i256 32, ptr %sp10340, align 16
  %1497 = add i256 %b10329, 36
  store i256 %1497, ptr %sp10317, align 16
  store i256 %1496, ptr %sp10340, align 16
  %sp10354 = getelementptr i256, ptr %sp10313, i64 3
  store i256 %1497, ptr %sp10354, align 16
  store i256 32, ptr %sp10340, align 16
  store i256 %1496, ptr %sp10354, align 16
  %1498 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1496, i256 32, ptr %arg.ecx.addr)
  %.not48354 = icmp eq i8 %1498, 0
  br i1 %.not48354, label %OP3093.PUSH1, label %return, !prof !6

OP3093.PUSH1:                                     ; preds = %OP3082.PUSH1
  store i256 37, ptr %sp10340, align 16
  %dup210374 = load i256, ptr %sp10317, align 16
  store i256 %dup210374, ptr %sp10354, align 16
  %1499 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup210374, i256 37, ptr %arg.ecx.addr)
  %.not48355 = icmp eq i8 %1499, 0
  br i1 %.not48355, label %OP3096.PUSH1, label %return, !prof !6

OP3096.PUSH1:                                     ; preds = %OP3093.PUSH1
  store i256 32, ptr %sp10340, align 16
  %b10387 = load i256, ptr %sp10317, align 16
  %1500 = add i256 %b10387, 32
  store i256 %1500, ptr %sp10317, align 16
  store i256 %1500, ptr %sp10340, align 16
  store i256 23300, ptr %sp10354, align 16
  %sp10396 = getelementptr i256, ptr %sp10313, i64 4
  store i256 37, ptr %sp10396, align 16
  store i256 37, ptr %sp10340, align 16
  store i256 %1500, ptr %sp10396, align 16
  %1501 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10340)
  %.not48356 = icmp eq i8 %1501, 0
  br i1 %.not48356, label %OP3103.PUSH1, label %return, !prof !6

OP3103.PUSH1:                                     ; preds = %OP3096.PUSH1
  store i256 64, ptr %sp10340, align 16
  %b10410 = load i256, ptr %sp10317, align 16
  %1502 = add i256 %b10410, 64
  store i256 %1502, ptr %sp10317, align 16
  %swap.b10416 = load i256, ptr %sp10315, align 16
  store i256 %1502, ptr %sp10315, align 16
  store i256 %swap.b10416, ptr %sp10317, align 16
  store i256 64, ptr %sp10313, align 16
  %mload.out.slot10424 = alloca i256, align 16
  %1503 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10424, ptr %arg.ecx.addr)
  %.not48357 = icmp eq i8 %1503, 0
  br i1 %.not48357, label %OP3109.MLOAD.contd, label %return, !prof !6

OP3109.MLOAD.contd:                               ; preds = %OP3103.PUSH1
  %mload.out10425 = load i256, ptr %mload.out.slot10424, align 16
  store i256 %mload.out10425, ptr %sp10313, align 16
  store i256 %mload.out10425, ptr %sp10317, align 16
  %swap.b10435 = load i256, ptr %sp10315, align 16
  store i256 %mload.out10425, ptr %sp10315, align 16
  store i256 %swap.b10435, ptr %sp10317, align 16
  %1504 = sub i256 %swap.b10435, %mload.out10425
  store i256 %1504, ptr %sp10313, align 16
  store i256 %1504, ptr %sp10315, align 16
  store i256 %mload.out10425, ptr %sp10313, align 16
  %1505 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10315, i8 16)
  %.not48358 = icmp eq i8 %1505, 0
  %spec.select36586 = select i1 %.not48358, i8 16, i8 %1505, !prof !6
  br label %return

OP3115.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3073.JUMPDEST
  %len.addr.153 = phi i64 [ %1489, %OP3073.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1506 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.153
  %sp10451 = getelementptr i256, ptr %1506, i64 -5
  %dup510452 = load i256, ptr %sp10451, align 16
  store i256 %dup510452, ptr %1506, align 16
  %sp10455 = getelementptr i256, ptr %1506, i64 1
  store i256 5518, ptr %sp10455, align 16
  %1507 = add i64 %len.addr.153, 3
  %sp10459 = getelementptr i256, ptr %1506, i64 2
  store i256 %dup510452, ptr %sp10459, align 16
  br label %OP7491.JUMPDEST

OP3121.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1508 = add i64 %len.addr.357, -1
  %sp10463 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1508
  %a10464 = load i256, ptr %sp10463, align 16
  %1509 = icmp eq i256 %a10464, 0
  %1510 = zext i1 %1509 to i256
  store i256 %1510, ptr %sp10463, align 16
  br i1 %1509, label %OP3163.JUMPDEST, label %OP3125.PUSH1

OP3125.PUSH1:                                     ; preds = %OP3121.JUMPDEST
  store i256 64, ptr %sp10463, align 16
  %mload.out.slot10474 = alloca i256, align 16
  %1511 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10474, ptr %arg.ecx.addr)
  %.not48315 = icmp eq i8 %1511, 0
  br i1 %.not48315, label %OP3126.MLOAD.contd, label %return, !prof !6

OP3126.MLOAD.contd:                               ; preds = %OP3125.PUSH1
  %mload.out10475 = load i256, ptr %mload.out.slot10474, align 16
  store i256 %mload.out10475, ptr %sp10463, align 16
  %1512 = add i64 %len.addr.357, 1
  %sp10478 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp10478, align 16
  %1513 = add i64 %len.addr.357, 2
  %sp10480 = getelementptr i256, ptr %sp10478, i64 -1
  %sp10482 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1512
  store i256 %mload.out10475, ptr %sp10482, align 16
  %1514 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10475, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48316 = icmp eq i8 %1514, 0
  br i1 %.not48316, label %OP3130.PUSH1, label %return, !prof !6

OP3130.PUSH1:                                     ; preds = %OP3126.MLOAD.contd
  store i256 4, ptr %sp10478, align 16
  %b10494 = load i256, ptr %sp10463, align 16
  %1515 = add i256 %b10494, 4
  store i256 %1515, ptr %sp10463, align 16
  store i256 %1515, ptr %sp10478, align 16
  store i256 %1515, ptr %sp10482, align 16
  %sp10505 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1513
  store i256 32, ptr %sp10505, align 16
  %1516 = add i256 %b10494, 36
  store i256 %1516, ptr %sp10482, align 16
  store i256 %1515, ptr %sp10505, align 16
  %sp10519 = getelementptr i256, ptr %sp10478, i64 3
  store i256 %1516, ptr %sp10519, align 16
  store i256 32, ptr %sp10505, align 16
  store i256 %1515, ptr %sp10519, align 16
  %1517 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1515, i256 32, ptr %arg.ecx.addr)
  %.not48317 = icmp eq i8 %1517, 0
  br i1 %.not48317, label %OP3141.PUSH1, label %return, !prof !6

OP3141.PUSH1:                                     ; preds = %OP3130.PUSH1
  store i256 37, ptr %sp10505, align 16
  %dup210539 = load i256, ptr %sp10482, align 16
  store i256 %dup210539, ptr %sp10519, align 16
  %1518 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup210539, i256 37, ptr %arg.ecx.addr)
  %.not48318 = icmp eq i8 %1518, 0
  br i1 %.not48318, label %OP3144.PUSH1, label %return, !prof !6

OP3144.PUSH1:                                     ; preds = %OP3141.PUSH1
  store i256 32, ptr %sp10505, align 16
  %b10552 = load i256, ptr %sp10482, align 16
  %1519 = add i256 %b10552, 32
  store i256 %1519, ptr %sp10482, align 16
  store i256 %1519, ptr %sp10505, align 16
  store i256 23300, ptr %sp10519, align 16
  %sp10561 = getelementptr i256, ptr %sp10478, i64 4
  store i256 37, ptr %sp10561, align 16
  store i256 37, ptr %sp10505, align 16
  store i256 %1519, ptr %sp10561, align 16
  %1520 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10505)
  %.not48319 = icmp eq i8 %1520, 0
  br i1 %.not48319, label %OP3151.PUSH1, label %return, !prof !6

OP3151.PUSH1:                                     ; preds = %OP3144.PUSH1
  store i256 64, ptr %sp10505, align 16
  %b10575 = load i256, ptr %sp10482, align 16
  %1521 = add i256 %b10575, 64
  store i256 %1521, ptr %sp10482, align 16
  %swap.b10581 = load i256, ptr %sp10480, align 16
  store i256 %1521, ptr %sp10480, align 16
  store i256 %swap.b10581, ptr %sp10482, align 16
  store i256 64, ptr %sp10478, align 16
  %mload.out.slot10589 = alloca i256, align 16
  %1522 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10589, ptr %arg.ecx.addr)
  %.not48320 = icmp eq i8 %1522, 0
  br i1 %.not48320, label %OP3157.MLOAD.contd, label %return, !prof !6

OP3157.MLOAD.contd:                               ; preds = %OP3151.PUSH1
  %mload.out10590 = load i256, ptr %mload.out.slot10589, align 16
  store i256 %mload.out10590, ptr %sp10478, align 16
  store i256 %mload.out10590, ptr %sp10482, align 16
  %swap.b10600 = load i256, ptr %sp10480, align 16
  store i256 %mload.out10590, ptr %sp10480, align 16
  store i256 %swap.b10600, ptr %sp10482, align 16
  %1523 = sub i256 %swap.b10600, %mload.out10590
  store i256 %1523, ptr %sp10478, align 16
  store i256 %1523, ptr %sp10480, align 16
  store i256 %mload.out10590, ptr %sp10478, align 16
  %1524 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10480, i8 16)
  %.not48321 = icmp eq i8 %1524, 0
  %spec.select36587 = select i1 %.not48321, i8 16, i8 %1524, !prof !6
  br label %return

OP3163.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3121.JUMPDEST
  %len.addr.154 = phi i64 [ %1508, %OP3121.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1525 = add i64 %len.addr.154, 1
  %sp10616 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.154
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp10616, align 16
  %1526 = add i64 %len.addr.154, 2
  %sp10618 = getelementptr i256, ptr %sp10616, i64 -7
  %dup8 = load i256, ptr %sp10618, align 16
  %sp10619 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1525
  store i256 %dup8, ptr %sp10619, align 16
  %1527 = and i256 %dup8, 1461501637330902918203684832716283019655932542975
  store i256 %1527, ptr %sp10616, align 16
  store i256 0, ptr %sp10619, align 16
  store i256 0, ptr %sp10616, align 16
  store i256 %1527, ptr %sp10619, align 16
  %1528 = add i64 %len.addr.154, 3
  %sp10636 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1526
  store i256 0, ptr %sp10636, align 16
  %1529 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %1527, ptr %arg.ecx.addr)
  %.not48322 = icmp eq i8 %1529, 0
  br i1 %.not48322, label %OP3171.PUSH1, label %return, !prof !6

OP3171.PUSH1:                                     ; preds = %OP3163.JUMPDEST
  store i256 10, ptr %sp10619, align 16
  store i256 32, ptr %sp10636, align 16
  store i256 32, ptr %sp10619, align 16
  store i256 10, ptr %sp10636, align 16
  %1530 = add i64 %len.addr.154, 4
  %sp10654 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1528
  store i256 32, ptr %sp10654, align 16
  %1531 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 10, ptr %arg.ecx.addr)
  %.not48323 = icmp eq i8 %1531, 0
  br i1 %.not48323, label %OP3176.PUSH1, label %return, !prof !6

OP3176.PUSH1:                                     ; preds = %OP3171.PUSH1
  store i256 64, ptr %sp10636, align 16
  store i256 64, ptr %sp10654, align 16
  %dup410668 = load i256, ptr %sp10616, align 16
  %sp10669 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1530
  store i256 %dup410668, ptr %sp10669, align 16
  %1532 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10654)
  %.not48324 = icmp eq i8 %1532, 0
  br i1 %.not48324, label %OP3180.CALLER, label %return, !prof !6

OP3180.CALLER:                                    ; preds = %OP3176.PUSH1
  %contract.caller10674 = load i160, ptr %contract.caller.addr16198, align 16
  %1533 = tail call i160 @llvm.bswap.i160(i160 %contract.caller10674)
  %1534 = zext i160 %1533 to i256
  store i256 %1534, ptr %sp10669, align 16
  %dup510678 = load i256, ptr %sp10616, align 16
  %sp10679 = getelementptr i256, ptr %sp10616, i64 5
  store i256 %dup510678, ptr %sp10679, align 16
  %1535 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup510678, i256 %1534, ptr %arg.ecx.addr)
  %.not48325 = icmp eq i8 %1535, 0
  br i1 %.not48325, label %OP3183.SWAP1, label %return, !prof !6

OP3183.SWAP1:                                     ; preds = %OP3180.CALLER
  %swap.a10687 = load i256, ptr %sp10654, align 16
  %swap.b10689 = load i256, ptr %sp10636, align 16
  store i256 %swap.a10687, ptr %sp10636, align 16
  store i256 %swap.b10689, ptr %sp10654, align 16
  %swap.b10694 = load i256, ptr %sp10619, align 16
  store i256 %swap.b10689, ptr %sp10619, align 16
  store i256 %swap.b10694, ptr %sp10654, align 16
  %1536 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b10694, i256 %swap.a10687, ptr %arg.ecx.addr)
  %.not48326 = icmp eq i8 %1536, 0
  br i1 %.not48326, label %OP3186.SWAP1, label %return, !prof !6

OP3186.SWAP1:                                     ; preds = %OP3183.SWAP1
  %swap.a10702 = load i256, ptr %sp10619, align 16
  %swap.b10704 = load i256, ptr %sp10616, align 16
  store i256 %swap.a10702, ptr %sp10616, align 16
  store i256 %swap.b10704, ptr %sp10619, align 16
  %1537 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10616)
  %.not48327 = icmp eq i8 %1537, 0
  br i1 %.not48327, label %OP3188.SLOAD, label %return, !prof !6

OP3188.SLOAD:                                     ; preds = %OP3186.SWAP1
  %1538 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10616, i8 17)
  %.not48328 = icmp eq i8 %1538, 0
  br i1 %.not48328, label %OP3189.DUP6, label %return, !prof !6

OP3189.DUP6:                                      ; preds = %OP3188.SLOAD
  %sp10710 = getelementptr i256, ptr %sp10616, i64 -5
  %dup610711 = load i256, ptr %sp10710, align 16
  store i256 %dup610711, ptr %sp10619, align 16
  %b10717 = load i256, ptr %sp10616, align 16
  %1539 = icmp ule i256 %dup610711, %b10717
  %1540 = zext i1 %1539 to i256
  store i256 %1540, ptr %sp10616, align 16
  br i1 %1539, label %OP3232.JUMPDEST, label %OP3194.PUSH1

OP3194.PUSH1:                                     ; preds = %OP3189.DUP6
  store i256 64, ptr %sp10616, align 16
  %mload.out.slot10731 = alloca i256, align 16
  %1541 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10731, ptr %arg.ecx.addr)
  %.not48329 = icmp eq i8 %1541, 0
  br i1 %.not48329, label %OP3195.MLOAD.contd, label %return, !prof !6

OP3195.MLOAD.contd:                               ; preds = %OP3194.PUSH1
  %mload.out10732 = load i256, ptr %mload.out.slot10731, align 16
  store i256 %mload.out10732, ptr %sp10616, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp10619, align 16
  store i256 %mload.out10732, ptr %sp10636, align 16
  %1542 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out10732, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48330 = icmp eq i8 %1542, 0
  br i1 %.not48330, label %OP3199.PUSH1, label %return, !prof !6

OP3199.PUSH1:                                     ; preds = %OP3195.MLOAD.contd
  store i256 4, ptr %sp10619, align 16
  %b10751 = load i256, ptr %sp10616, align 16
  %1543 = add i256 %b10751, 4
  store i256 %1543, ptr %sp10616, align 16
  store i256 %1543, ptr %sp10619, align 16
  store i256 %1543, ptr %sp10636, align 16
  store i256 32, ptr %sp10654, align 16
  %1544 = add i256 %b10751, 36
  store i256 %1544, ptr %sp10636, align 16
  store i256 %1543, ptr %sp10654, align 16
  store i256 %1544, ptr %sp10669, align 16
  store i256 32, ptr %sp10654, align 16
  store i256 %1543, ptr %sp10669, align 16
  %1545 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1543, i256 32, ptr %arg.ecx.addr)
  %.not48331 = icmp eq i8 %1545, 0
  br i1 %.not48331, label %OP3210.PUSH1, label %return, !prof !6

OP3210.PUSH1:                                     ; preds = %OP3199.PUSH1
  store i256 40, ptr %sp10654, align 16
  %dup210796 = load i256, ptr %sp10636, align 16
  store i256 %dup210796, ptr %sp10669, align 16
  %1546 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup210796, i256 40, ptr %arg.ecx.addr)
  %.not48332 = icmp eq i8 %1546, 0
  br i1 %.not48332, label %OP3213.PUSH1, label %return, !prof !6

OP3213.PUSH1:                                     ; preds = %OP3210.PUSH1
  store i256 32, ptr %sp10654, align 16
  %b10809 = load i256, ptr %sp10636, align 16
  %1547 = add i256 %b10809, 32
  store i256 %1547, ptr %sp10636, align 16
  store i256 %1547, ptr %sp10654, align 16
  store i256 22804, ptr %sp10669, align 16
  store i256 40, ptr %sp10679, align 16
  store i256 40, ptr %sp10654, align 16
  store i256 %1547, ptr %sp10679, align 16
  %1548 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10654)
  %.not48333 = icmp eq i8 %1548, 0
  br i1 %.not48333, label %OP3220.PUSH1, label %return, !prof !6

OP3220.PUSH1:                                     ; preds = %OP3213.PUSH1
  store i256 64, ptr %sp10654, align 16
  %b10832 = load i256, ptr %sp10636, align 16
  %1549 = add i256 %b10832, 64
  store i256 %1549, ptr %sp10636, align 16
  %swap.b10838 = load i256, ptr %sp10616, align 16
  store i256 %1549, ptr %sp10616, align 16
  store i256 %swap.b10838, ptr %sp10636, align 16
  store i256 64, ptr %sp10619, align 16
  %mload.out.slot10846 = alloca i256, align 16
  %1550 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot10846, ptr %arg.ecx.addr)
  %.not48334 = icmp eq i8 %1550, 0
  br i1 %.not48334, label %OP3226.MLOAD.contd, label %return, !prof !6

OP3226.MLOAD.contd:                               ; preds = %OP3220.PUSH1
  %mload.out10847 = load i256, ptr %mload.out.slot10846, align 16
  store i256 %mload.out10847, ptr %sp10619, align 16
  store i256 %mload.out10847, ptr %sp10636, align 16
  %swap.b10857 = load i256, ptr %sp10616, align 16
  store i256 %mload.out10847, ptr %sp10616, align 16
  store i256 %swap.b10857, ptr %sp10636, align 16
  %1551 = sub i256 %swap.b10857, %mload.out10847
  store i256 %1551, ptr %sp10619, align 16
  store i256 %1551, ptr %sp10616, align 16
  store i256 %mload.out10847, ptr %sp10619, align 16
  %1552 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10616, i8 16)
  %.not48335 = icmp eq i8 %1552, 0
  %spec.select36588 = select i1 %.not48335, i8 16, i8 %1552, !prof !6
  br label %return

OP3232.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %sp10873.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp10883.phi.trans.insert = getelementptr i256, ptr %sp10873.phi.trans.insert, i64 -5
  %dup810884.pre = load i256, ptr %sp10883.phi.trans.insert, align 16
  %.pre54287 = add i64 %len.addr.357, 4
  br label %OP3232.JUMPDEST

OP3232.JUMPDEST:                                  ; preds = %OP3232.JUMPDEST.loopexit, %OP3189.DUP6
  %.pre-phi54288 = phi i64 [ %.pre54287, %OP3232.JUMPDEST.loopexit ], [ %1530, %OP3189.DUP6 ]
  %dup810884 = phi i256 [ %dup810884.pre, %OP3232.JUMPDEST.loopexit ], [ %dup610711, %OP3189.DUP6 ]
  %len.addr.155 = phi i64 [ %len.addr.357, %OP3232.JUMPDEST.loopexit ], [ %len.addr.154, %OP3189.DUP6 ]
  %sp10873 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.155
  store i256 5752, ptr %sp10873, align 16
  %sp10875 = getelementptr i256, ptr %sp10873, i64 -7
  %dup810876 = load i256, ptr %sp10875, align 16
  %sp10877 = getelementptr i256, ptr %sp10873, i64 1
  store i256 %dup810876, ptr %sp10877, align 16
  %sp10879 = getelementptr i256, ptr %sp10873, i64 -6
  %dup810880 = load i256, ptr %sp10879, align 16
  %sp10881 = getelementptr i256, ptr %sp10873, i64 2
  store i256 %dup810880, ptr %sp10881, align 16
  %sp10885 = getelementptr i256, ptr %sp10873, i64 3
  store i256 %dup810884, ptr %sp10885, align 16
  br label %OP7511.JUMPDEST

OP3239.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1553 = add i64 %len.addr.357, 1
  %sp10889 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp10889, align 16
  %1554 = add i64 %len.addr.357, 2
  %sp10891 = getelementptr i256, ptr %sp10889, i64 -7
  %dup810892 = load i256, ptr %sp10891, align 16
  %sp10893 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1553
  store i256 %dup810892, ptr %sp10893, align 16
  %1555 = and i256 %dup810892, 1461501637330902918203684832716283019655932542975
  store i256 %1555, ptr %sp10889, align 16
  store i256 0, ptr %sp10893, align 16
  store i256 0, ptr %sp10889, align 16
  store i256 %1555, ptr %sp10893, align 16
  %1556 = add i64 %len.addr.357, 3
  %sp10910 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1554
  store i256 0, ptr %sp10910, align 16
  %1557 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %1555, ptr %arg.ecx.addr)
  %.not48301 = icmp eq i8 %1557, 0
  br i1 %.not48301, label %OP3247.PUSH1, label %return, !prof !6

OP3247.PUSH1:                                     ; preds = %OP3239.JUMPDEST
  store i256 10, ptr %sp10893, align 16
  store i256 32, ptr %sp10910, align 16
  store i256 32, ptr %sp10893, align 16
  store i256 10, ptr %sp10910, align 16
  %1558 = add i64 %len.addr.357, 4
  %sp10928 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1556
  store i256 32, ptr %sp10928, align 16
  %1559 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 10, ptr %arg.ecx.addr)
  %.not48302 = icmp eq i8 %1559, 0
  br i1 %.not48302, label %OP3252.PUSH1, label %return, !prof !6

OP3252.PUSH1:                                     ; preds = %OP3247.PUSH1
  store i256 64, ptr %sp10910, align 16
  store i256 64, ptr %sp10928, align 16
  %dup410942 = load i256, ptr %sp10889, align 16
  %sp10943 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1558
  store i256 %dup410942, ptr %sp10943, align 16
  %1560 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10928)
  %.not48303 = icmp eq i8 %1560, 0
  br i1 %.not48303, label %OP3256.CALLER, label %return, !prof !6

OP3256.CALLER:                                    ; preds = %OP3252.PUSH1
  %contract.caller10948 = load i160, ptr %contract.caller.addr16198, align 16
  %1561 = tail call i160 @llvm.bswap.i160(i160 %contract.caller10948)
  %1562 = zext i160 %1561 to i256
  store i256 %1562, ptr %sp10943, align 16
  %dup510952 = load i256, ptr %sp10889, align 16
  %sp10953 = getelementptr i256, ptr %sp10889, i64 5
  store i256 %dup510952, ptr %sp10953, align 16
  %1563 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup510952, i256 %1562, ptr %arg.ecx.addr)
  %.not48304 = icmp eq i8 %1563, 0
  br i1 %.not48304, label %OP3259.SWAP1, label %return, !prof !6

OP3259.SWAP1:                                     ; preds = %OP3256.CALLER
  %swap.a10961 = load i256, ptr %sp10928, align 16
  %swap.b10963 = load i256, ptr %sp10910, align 16
  store i256 %swap.a10961, ptr %sp10910, align 16
  store i256 %swap.b10963, ptr %sp10928, align 16
  %swap.b10968 = load i256, ptr %sp10893, align 16
  store i256 %swap.b10963, ptr %sp10893, align 16
  store i256 %swap.b10968, ptr %sp10928, align 16
  %1564 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b10968, i256 %swap.a10961, ptr %arg.ecx.addr)
  %.not48305 = icmp eq i8 %1564, 0
  br i1 %.not48305, label %OP3262.SWAP1, label %return, !prof !6

OP3262.SWAP1:                                     ; preds = %OP3259.SWAP1
  %swap.a10976 = load i256, ptr %sp10893, align 16
  %swap.b10978 = load i256, ptr %sp10889, align 16
  store i256 %swap.a10976, ptr %sp10889, align 16
  store i256 %swap.b10978, ptr %sp10893, align 16
  %1565 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10889)
  %.not48306 = icmp eq i8 %1565, 0
  br i1 %.not48306, label %OP3264.SLOAD, label %return, !prof !6

OP3264.SLOAD:                                     ; preds = %OP3262.SWAP1
  %1566 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10889, i8 17)
  %.not48307 = icmp eq i8 %1566, 0
  br i1 %.not48307, label %OP3265.PUSH2, label %return, !prof !6

OP3265.PUSH2:                                     ; preds = %OP3264.SLOAD
  store i256 5811, ptr %sp10893, align 16
  %swap.b10989 = load i256, ptr %sp10889, align 16
  store i256 5811, ptr %sp10889, align 16
  store i256 %swap.b10989, ptr %sp10893, align 16
  %sp10991 = getelementptr i256, ptr %sp10889, i64 -5
  %dup7 = load i256, ptr %sp10991, align 16
  store i256 %dup7, ptr %sp10910, align 16
  br label %OP7701.JUMPDEST

OP3270.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1567 = add i64 %len.addr.357, 1
  %sp10996 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp10996, align 16
  %1568 = add i64 %len.addr.357, 2
  %sp10998 = getelementptr i256, ptr %sp10996, i64 -8
  %dup9 = load i256, ptr %sp10998, align 16
  %sp10999 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1567
  store i256 %dup9, ptr %sp10999, align 16
  %1569 = and i256 %dup9, 1461501637330902918203684832716283019655932542975
  store i256 %1569, ptr %sp10996, align 16
  store i256 0, ptr %sp10999, align 16
  store i256 0, ptr %sp10996, align 16
  store i256 %1569, ptr %sp10999, align 16
  %sp11016 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1568
  store i256 0, ptr %sp11016, align 16
  %1570 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %1569, ptr %arg.ecx.addr)
  %.not48294 = icmp eq i8 %1570, 0
  br i1 %.not48294, label %OP3278.PUSH1, label %return, !prof !6

OP3278.PUSH1:                                     ; preds = %OP3270.JUMPDEST
  store i256 10, ptr %sp10999, align 16
  store i256 32, ptr %sp11016, align 16
  store i256 32, ptr %sp10999, align 16
  store i256 10, ptr %sp11016, align 16
  %1571 = add i64 %len.addr.357, 4
  %sp11034 = getelementptr i256, ptr %sp10996, i64 3
  store i256 32, ptr %sp11034, align 16
  %1572 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 10, ptr %arg.ecx.addr)
  %.not48295 = icmp eq i8 %1572, 0
  br i1 %.not48295, label %OP3283.PUSH1, label %return, !prof !6

OP3283.PUSH1:                                     ; preds = %OP3278.PUSH1
  store i256 64, ptr %sp11016, align 16
  store i256 64, ptr %sp11034, align 16
  %dup411048 = load i256, ptr %sp10996, align 16
  %sp11049 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1571
  store i256 %dup411048, ptr %sp11049, align 16
  %1573 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11034)
  %.not48296 = icmp eq i8 %1573, 0
  br i1 %.not48296, label %OP3287.CALLER, label %return, !prof !6

OP3287.CALLER:                                    ; preds = %OP3283.PUSH1
  %contract.caller11054 = load i160, ptr %contract.caller.addr16198, align 16
  %1574 = tail call i160 @llvm.bswap.i160(i160 %contract.caller11054)
  %1575 = zext i160 %1574 to i256
  store i256 %1575, ptr %sp11049, align 16
  %dup511058 = load i256, ptr %sp10996, align 16
  %sp11059 = getelementptr i256, ptr %sp10996, i64 5
  store i256 %dup511058, ptr %sp11059, align 16
  %1576 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup511058, i256 %1575, ptr %arg.ecx.addr)
  %.not48297 = icmp eq i8 %1576, 0
  br i1 %.not48297, label %OP3290.SWAP1, label %return, !prof !6

OP3290.SWAP1:                                     ; preds = %OP3287.CALLER
  %swap.a11067 = load i256, ptr %sp11034, align 16
  %swap.b11069 = load i256, ptr %sp11016, align 16
  store i256 %swap.a11067, ptr %sp11016, align 16
  store i256 %swap.b11069, ptr %sp11034, align 16
  %swap.b11074 = load i256, ptr %sp10999, align 16
  store i256 %swap.b11069, ptr %sp10999, align 16
  store i256 %swap.b11074, ptr %sp11034, align 16
  %1577 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b11074, i256 %swap.a11067, ptr %arg.ecx.addr)
  %.not48298 = icmp eq i8 %1577, 0
  br i1 %.not48298, label %OP3293.SWAP1, label %return, !prof !6

OP3293.SWAP1:                                     ; preds = %OP3290.SWAP1
  %swap.a11082 = load i256, ptr %sp10999, align 16
  %swap.b11084 = load i256, ptr %sp10996, align 16
  store i256 %swap.a11082, ptr %sp10996, align 16
  store i256 %swap.b11084, ptr %sp10999, align 16
  %1578 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp10996)
  %.not48299 = icmp eq i8 %1578, 0
  br i1 %.not48299, label %OP3295.SSTORE, label %return, !prof !6

OP3295.SSTORE:                                    ; preds = %OP3293.SWAP1
  %1579 = add i64 %len.addr.357, -1
  %sp11088 = getelementptr i256, ptr %sp10996, i64 -1
  %1580 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr %sp11088, i8 17)
  %.not48300 = icmp eq i8 %1580, 0
  br i1 %.not48300, label %OP3296.PUSH1, label %return, !prof !6

OP3296.PUSH1:                                     ; preds = %OP3295.SSTORE
  %sp11090 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1579
  store i256 1, ptr %sp11090, align 16
  %sp11094 = getelementptr i256, ptr %sp10996, i64 -5
  %swap.b11095 = load i256, ptr %sp11094, align 16
  store i256 1, ptr %sp11094, align 16
  store i256 %swap.b11095, ptr %sp11088, align 16
  %sp11103 = getelementptr i256, ptr %sp10996, i64 -9
  %swap.b11104 = load i256, ptr %sp11103, align 16
  store i256 1, ptr %sp11103, align 16
  store i256 %swap.b11104, ptr %sp11094, align 16
  %swap.b11109 = load i256, ptr %sp10998, align 16
  store i256 %swap.b11104, ptr %sp10998, align 16
  store i256 %swap.b11109, ptr %sp11094, align 16
  %1581 = add i64 %len.addr.357, -8
  br label %dynamic_jump_table.backedge

OP3308.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP665.JUMPDEST
  %len.addr.156 = phi i64 [ %301, %OP665.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1582 = add i64 %len.addr.156, 1
  %sp11118 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.156
  store i256 0, ptr %sp11118, align 16
  %1583 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11118, i8 17)
  %.not48504 = icmp eq i8 %1583, 0
  br i1 %.not48504, label %OP3311.PUSH20, label %return, !prof !6

OP3311.PUSH20:                                    ; preds = %OP3308.JUMPDEST
  %1584 = add i64 %len.addr.156, 2
  %sp11122 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1582
  %b11127 = load i256, ptr %sp11118, align 16
  %contract.caller.addr11130 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller11131 = load i160, ptr %contract.caller.addr11130, align 16
  %1585 = tail call i160 @llvm.bswap.i160(i160 %contract.caller11131)
  %1586 = zext i160 %1585 to i256
  store i256 %1586, ptr %sp11122, align 16
  %1587 = trunc i256 %b11127 to i160
  %1588 = icmp eq i160 %1585, %1587
  %1589 = zext i1 %1588 to i256
  store i256 %1589, ptr %sp11118, align 16
  br i1 %1588, label %OP3349.JUMPDEST, label %OP3317.PUSH1

OP3317.PUSH1:                                     ; preds = %OP3311.PUSH20
  store i256 64, ptr %sp11118, align 16
  store i256 64, ptr %sp11122, align 16
  %mload.out.slot11151 = alloca i256, align 16
  %1590 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot11151, ptr %arg.ecx.addr)
  %.not48505 = icmp eq i8 %1590, 0
  br i1 %.not48505, label %OP3319.MLOAD.contd, label %return, !prof !6

OP3319.MLOAD.contd:                               ; preds = %OP3317.PUSH1
  %mload.out11152 = load i256, ptr %mload.out.slot11151, align 16
  store i256 %mload.out11152, ptr %sp11122, align 16
  %1591 = add i64 %len.addr.156, 3
  %sp11155 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1584
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp11155, align 16
  %sp11159 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1591
  store i256 %mload.out11152, ptr %sp11159, align 16
  %1592 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out11152, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48506 = icmp eq i8 %1592, 0
  br i1 %.not48506, label %OP3323.PUSH1, label %return, !prof !6

OP3323.PUSH1:                                     ; preds = %OP3319.MLOAD.contd
  store i256 32, ptr %sp11155, align 16
  %dup311171 = load i256, ptr %sp11122, align 16
  %sp11172 = getelementptr i256, ptr %sp11118, i64 4
  %1593 = add i256 %dup311171, 4
  store i256 32, ptr %sp11159, align 16
  store i256 %1593, ptr %sp11172, align 16
  %1594 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1593, i256 32, ptr %arg.ecx.addr)
  %.not48507 = icmp eq i8 %1594, 0
  br i1 %.not48507, label %OP3330.PUSH1, label %return, !prof !6

OP3330.PUSH1:                                     ; preds = %OP3323.PUSH1
  %dup311197 = load i256, ptr %sp11122, align 16
  store i256 %dup311197, ptr %sp11172, align 16
  %1595 = add i256 %dup311197, 36
  store i256 %1595, ptr %sp11159, align 16
  %b11209 = load i256, ptr %sp11155, align 16
  %1596 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1595, i256 %b11209, ptr %arg.ecx.addr)
  %.not48508 = icmp eq i8 %1596, 0
  br i1 %.not48508, label %OP3334.PUSH32, label %return, !prof !6

OP3334.PUSH32:                                    ; preds = %OP3330.PUSH1
  store i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %sp11155, align 16
  %dup311216 = load i256, ptr %sp11122, align 16
  store i256 %dup311216, ptr %sp11172, align 16
  %1597 = add i256 %dup311216, 68
  store i256 %1597, ptr %sp11159, align 16
  %1598 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1597, i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %arg.ecx.addr)
  %.not48509 = icmp eq i8 %1598, 0
  br i1 %.not48509, label %OP3339.SWAP1, label %return, !prof !6

OP3339.SWAP1:                                     ; preds = %OP3334.PUSH32
  %swap.a11231 = load i256, ptr %sp11122, align 16
  %swap.b11233 = load i256, ptr %sp11118, align 16
  store i256 %swap.a11231, ptr %sp11118, align 16
  store i256 %swap.b11233, ptr %sp11122, align 16
  %mload.out.slot11237 = alloca i256, align 16
  %1599 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b11233, ptr %mload.out.slot11237, ptr %arg.ecx.addr)
  %.not48510 = icmp eq i8 %1599, 0
  br i1 %.not48510, label %OP3340.MLOAD.contd, label %return, !prof !6

OP3340.MLOAD.contd:                               ; preds = %OP3339.SWAP1
  %mload.out11238 = load i256, ptr %mload.out.slot11237, align 16
  %swap.b11244 = load i256, ptr %sp11118, align 16
  %1600 = sub i256 %swap.b11244, %mload.out11238
  store i256 100, ptr %sp11155, align 16
  %1601 = add i256 %1600, 100
  store i256 %1601, ptr %sp11118, align 16
  store i256 %mload.out11238, ptr %sp11122, align 16
  %1602 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11118, i8 16)
  %.not48511 = icmp eq i8 %1602, 0
  %spec.select36589 = select i1 %.not48511, i8 16, i8 %1602, !prof !6
  br label %return

OP3349.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54041 = add i64 %len.addr.357, 2
  %.pre54257 = add i64 %len.addr.357, 1
  br label %OP3349.JUMPDEST

OP3349.JUMPDEST:                                  ; preds = %OP3349.JUMPDEST.loopexit, %OP3311.PUSH20
  %.pre-phi54258 = phi i64 [ %.pre54257, %OP3349.JUMPDEST.loopexit ], [ %1582, %OP3311.PUSH20 ]
  %.pre-phi54042 = phi i64 [ %.pre54041, %OP3349.JUMPDEST.loopexit ], [ %1584, %OP3311.PUSH20 ]
  %len.addr.157 = phi i64 [ %len.addr.357, %OP3349.JUMPDEST.loopexit ], [ %len.addr.156, %OP3311.PUSH20 ]
  %sp11277 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.157
  %sp11279 = getelementptr i256, ptr %sp11277, i64 -1
  %dup211280 = load i256, ptr %sp11279, align 16
  %sp11281 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54258
  store i256 %dup211280, ptr %sp11281, align 16
  %1603 = and i256 %dup211280, 1461501637330902918203684832716283019655932542975
  store i256 %1603, ptr %sp11277, align 16
  %.not48512 = icmp eq i256 %1603, 0
  br i1 %.not48512, label %OP3355.PUSH1, label %OP3393.JUMPDEST

OP3355.PUSH1:                                     ; preds = %OP3349.JUMPDEST
  store i256 64, ptr %sp11277, align 16
  %mload.out.slot11296 = alloca i256, align 16
  %1604 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot11296, ptr %arg.ecx.addr)
  %.not48513 = icmp eq i8 %1604, 0
  br i1 %.not48513, label %OP3356.MLOAD.contd, label %return, !prof !6

OP3356.MLOAD.contd:                               ; preds = %OP3355.PUSH1
  %mload.out11297 = load i256, ptr %mload.out.slot11296, align 16
  store i256 %mload.out11297, ptr %sp11277, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp11281, align 16
  %1605 = add i64 %len.addr.157, 3
  %sp11304 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54042
  store i256 %mload.out11297, ptr %sp11304, align 16
  %1606 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out11297, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48514 = icmp eq i8 %1606, 0
  br i1 %.not48514, label %OP3360.PUSH1, label %return, !prof !6

OP3360.PUSH1:                                     ; preds = %OP3356.MLOAD.contd
  store i256 4, ptr %sp11281, align 16
  %b11316 = load i256, ptr %sp11277, align 16
  %1607 = add i256 %b11316, 4
  store i256 %1607, ptr %sp11277, align 16
  store i256 %1607, ptr %sp11281, align 16
  %sp11327 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1605
  %1608 = add i256 %b11316, 36
  store i256 %1608, ptr %sp11304, align 16
  %sp11341 = getelementptr i256, ptr %sp11277, i64 4
  store i256 32, ptr %sp11327, align 16
  store i256 %1607, ptr %sp11341, align 16
  %1609 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1607, i256 32, ptr %arg.ecx.addr)
  %.not48515 = icmp eq i8 %1609, 0
  br i1 %.not48515, label %OP3371.PUSH1, label %return, !prof !6

OP3371.PUSH1:                                     ; preds = %OP3360.PUSH1
  store i256 42, ptr %sp11327, align 16
  %dup211361 = load i256, ptr %sp11304, align 16
  store i256 %dup211361, ptr %sp11341, align 16
  %1610 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup211361, i256 42, ptr %arg.ecx.addr)
  %.not48516 = icmp eq i8 %1610, 0
  br i1 %.not48516, label %OP3374.PUSH1, label %return, !prof !6

OP3374.PUSH1:                                     ; preds = %OP3371.PUSH1
  store i256 32, ptr %sp11327, align 16
  %b11374 = load i256, ptr %sp11304, align 16
  %1611 = add i256 %b11374, 32
  store i256 %1611, ptr %sp11304, align 16
  store i256 22365, ptr %sp11341, align 16
  %sp11383 = getelementptr i256, ptr %sp11277, i64 5
  store i256 42, ptr %sp11327, align 16
  store i256 %1611, ptr %sp11383, align 16
  %1612 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11327)
  %.not48517 = icmp eq i8 %1612, 0
  br i1 %.not48517, label %OP3381.PUSH1, label %return, !prof !6

OP3381.PUSH1:                                     ; preds = %OP3374.PUSH1
  store i256 64, ptr %sp11327, align 16
  %b11397 = load i256, ptr %sp11304, align 16
  %1613 = add i256 %b11397, 64
  store i256 %1613, ptr %sp11304, align 16
  %swap.b11403 = load i256, ptr %sp11277, align 16
  store i256 %1613, ptr %sp11277, align 16
  store i256 %swap.b11403, ptr %sp11304, align 16
  store i256 64, ptr %sp11281, align 16
  %mload.out.slot11411 = alloca i256, align 16
  %1614 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot11411, ptr %arg.ecx.addr)
  %.not48518 = icmp eq i8 %1614, 0
  br i1 %.not48518, label %OP3387.MLOAD.contd, label %return, !prof !6

OP3387.MLOAD.contd:                               ; preds = %OP3381.PUSH1
  %mload.out11412 = load i256, ptr %mload.out.slot11411, align 16
  store i256 %mload.out11412, ptr %sp11281, align 16
  store i256 %mload.out11412, ptr %sp11304, align 16
  %swap.b11422 = load i256, ptr %sp11277, align 16
  store i256 %swap.b11422, ptr %sp11304, align 16
  %1615 = sub i256 %swap.b11422, %mload.out11412
  store i256 %1615, ptr %sp11277, align 16
  store i256 %mload.out11412, ptr %sp11281, align 16
  %1616 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11277, i8 16)
  %.not48519 = icmp eq i8 %1616, 0
  %spec.select36590 = select i1 %.not48519, i8 16, i8 %1616, !prof !6
  br label %return

OP3393.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54039 = add i64 %len.addr.357, 1
  br label %OP3393.JUMPDEST

OP3393.JUMPDEST:                                  ; preds = %OP3393.JUMPDEST.loopexit, %OP3349.JUMPDEST
  %.pre-phi54040 = phi i64 [ %.pre54039, %OP3393.JUMPDEST.loopexit ], [ %.pre-phi54258, %OP3349.JUMPDEST ]
  %len.addr.158 = phi i64 [ %len.addr.357, %OP3393.JUMPDEST.loopexit ], [ %len.addr.157, %OP3349.JUMPDEST ]
  %sp11438 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.158
  store i256 14, ptr %sp11438, align 16
  %1617 = add i64 %len.addr.158, 2
  %sp11442 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54040
  store i256 14, ptr %sp11442, align 16
  %1618 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11442, i8 17)
  %.not48520 = icmp eq i8 %1618, 0
  br i1 %.not48520, label %OP3397.PUSH32, label %return, !prof !6

OP3397.PUSH32:                                    ; preds = %OP3393.JUMPDEST
  %sp11446 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1617
  store i256 -1461501637330902918203684832716283019655932542976, ptr %sp11446, align 16
  %b11451 = load i256, ptr %sp11442, align 16
  %1619 = and i256 %b11451, -1461501637330902918203684832716283019655932542976
  store i256 %1619, ptr %sp11442, align 16
  %sp11456 = getelementptr i256, ptr %sp11438, i64 -1
  %dup411457 = load i256, ptr %sp11456, align 16
  %sp11458 = getelementptr i256, ptr %sp11438, i64 3
  store i256 %dup411457, ptr %sp11458, align 16
  %1620 = and i256 %dup411457, 1461501637330902918203684832716283019655932542975
  store i256 %1620, ptr %sp11446, align 16
  %swap.b11469 = load i256, ptr %sp11442, align 16
  store i256 %1620, ptr %sp11458, align 16
  %1621 = or i256 %swap.b11469, %1620
  store i256 %1621, ptr %sp11442, align 16
  %swap.b11489 = load i256, ptr %sp11438, align 16
  store i256 %1620, ptr %sp11438, align 16
  store i256 %swap.b11489, ptr %sp11446, align 16
  %1622 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11442, i8 17)
  %.not48521 = icmp eq i8 %1622, 0
  br i1 %.not48521, label %OP3408.PUSH1, label %return, !prof !6

OP3408.PUSH1:                                     ; preds = %OP3397.PUSH32
  store i256 64, ptr %sp11442, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !432)
  %ecx.memory.addr.i49786 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49787 = load ptr, ptr %ecx.memory.addr.i49786, align 8, !alias.scope !432, !noalias !435
  %ecx.memory.len.addr.i49788 = getelementptr inbounds i8, ptr %ecx.memory.i49787, i64 16
  %ecx.memory.len.i49789 = load i64, ptr %ecx.memory.len.addr.i49788, align 8, !noalias !437
  %ecx.memory.last_checkpoint.addr.i49790 = getelementptr inbounds i8, ptr %ecx.memory.i49787, i64 48
  %ecx.memory.last_checkpoint.i49791 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49790, align 8, !noalias !437
  %1623 = sub i64 %ecx.memory.len.i49789, %ecx.memory.last_checkpoint.i49791
  %1624 = icmp ult i64 %1623, 96
  br i1 %1624, label %resize.i49799, label %OP3409.MLOAD.contd, !prof !5

resize.i49799:                                    ; preds = %OP3408.PUSH1
  %1625 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !435
  %.not.i49800 = icmp eq i8 %1625, 0
  br i1 %.not.i49800, label %OP3409.MLOAD.contd, label %return, !prof !6

OP3409.MLOAD.contd:                               ; preds = %OP3408.PUSH1, %resize.i49799
  %ecx.memory.buffer.ptr.shared.addr.i49793 = getelementptr inbounds i8, ptr %ecx.memory.i49787, i64 8
  %ecx.memory.buffer.ptr.shared.i49794 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49793, align 8, !noalias !437
  %ecx.memory.buffer.ptr.i49795 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49794, i64 %ecx.memory.last_checkpoint.i49791
  %slot.i49796 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49795, i64 64
  %slot.value.i49797 = load i256, ptr %slot.i49796, align 1, !noalias !437
  %1626 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49797)
  store i256 -12456454680184995357964424047497484132132940538522560455291724061144281777574, ptr %sp11442, align 16
  store i256 0, ptr %sp11446, align 16
  store i256 %1626, ptr %sp11458, align 16
  %1627 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11438, i8 2)
  %.not48523 = icmp eq i8 %1627, 0
  br i1 %.not48523, label %OP3415.POP, label %return, !prof !6

OP3415.POP:                                       ; preds = %OP3409.MLOAD.contd
  %1628 = add i64 %len.addr.158, -2
  %sp11518 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1628
  %a11519 = load i256, ptr %sp11518, align 16
  br label %dynamic_jump_table.preheader

OP3417.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP687.JUMPDEST
  %len.addr.159 = phi i64 [ %312, %OP687.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1629 = add i64 %len.addr.159, 1
  %sp11522 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.159
  store i256 18, ptr %sp11522, align 16
  %1630 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11522, i8 17)
  %.not48628 = icmp eq i8 %1630, 0
  br i1 %.not48628, label %OP3420.PUSH1, label %return, !prof !6

OP3420.PUSH1:                                     ; preds = %OP3417.JUMPDEST
  %sp11526 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1629
  %b11531 = load i256, ptr %sp11522, align 16
  %1631 = and i256 %b11531, 255
  store i256 1, ptr %sp11526, align 16
  %1632 = icmp eq i256 %1631, 1
  %1633 = zext i1 %1632 to i256
  store i256 %1633, ptr %sp11522, align 16
  br i1 %1632, label %OP3429.JUMPDEST, label %OP3426.PUSH1

OP3426.PUSH1:                                     ; preds = %OP3420.PUSH1
  store i256 0, ptr %sp11522, align 16
  store i256 0, ptr %sp11526, align 16
  %1634 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11522, i8 16)
  %.not48629 = icmp eq i8 %1634, 0
  %spec.select36591 = select i1 %.not48629, i8 16, i8 %1634, !prof !6
  br label %return

OP3429.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3420.PUSH1
  %len.addr.160 = phi i64 [ %len.addr.159, %OP3420.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp11554 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.160
  store i256 0, ptr %sp11554, align 16
  %sp11556 = getelementptr i256, ptr %sp11554, i64 1
  store i256 6256, ptr %sp11556, align 16
  %1635 = add i64 %len.addr.160, 3
  %contract.target_address.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address = load i160, ptr %contract.target_address.addr, align 16
  %1636 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address)
  %1637 = zext i160 %1636 to i256
  %sp11558 = getelementptr i256, ptr %sp11554, i64 2
  store i256 %1637, ptr %sp11558, align 16
  br label %OP7746.JUMPDEST

OP3435.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1638 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp11562 = getelementptr i256, ptr %1638, i64 -1
  %swap.a11563 = load i256, ptr %sp11562, align 16
  %sp11564 = getelementptr i256, ptr %1638, i64 -2
  %swap.b11565 = load i256, ptr %sp11564, align 16
  store i256 %swap.a11563, ptr %sp11564, align 16
  store i256 %swap.b11565, ptr %sp11562, align 16
  %1639 = add i64 %len.addr.357, -1
  %sp11570 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1639
  %1640 = icmp eq i256 %swap.a11563, 0
  %1641 = zext i1 %1640 to i256
  store i256 %1641, ptr %sp11570, align 16
  %contract.target_address11598.pre53971 = load i160, ptr %contract.target_address.addr32315, align 16
  br i1 %1640, label %OP3448.JUMPDEST, label %OP3442.PUSH2

OP3442.PUSH2:                                     ; preds = %OP3435.JUMPDEST
  store i256 6275, ptr %sp11570, align 16
  %1642 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address11598.pre53971)
  %1643 = zext i160 %1642 to i256
  store i256 %1643, ptr %1638, align 16
  %sp11585 = getelementptr i256, ptr %1638, i64 -3
  %dup411586 = load i256, ptr %sp11585, align 16
  %sp11587 = getelementptr i256, ptr %1638, i64 1
  store i256 %dup411586, ptr %sp11587, align 16
  %1644 = add i64 %len.addr.357, 3
  %sp11591 = getelementptr i256, ptr %1638, i64 2
  store i256 %swap.a11563, ptr %sp11591, align 16
  br label %OP7511.JUMPDEST

OP3448.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.target_address11598.pre = load i160, ptr %contract.target_address.addr32315, align 16
  br label %OP3448.JUMPDEST

OP3448.JUMPDEST:                                  ; preds = %OP3448.JUMPDEST.loopexit, %OP3435.JUMPDEST
  %contract.target_address11598 = phi i160 [ %contract.target_address11598.pre53971, %OP3435.JUMPDEST ], [ %contract.target_address11598.pre, %OP3448.JUMPDEST.loopexit ]
  %len.addr.161 = phi i64 [ %1639, %OP3435.JUMPDEST ], [ %len.addr.357, %OP3448.JUMPDEST.loopexit ]
  %sp11595 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.161
  store i256 6284, ptr %sp11595, align 16
  %1645 = add i64 %len.addr.161, 2
  %1646 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address11598)
  %1647 = zext i160 %1646 to i256
  %sp11599 = getelementptr i256, ptr %sp11595, i64 1
  store i256 %1647, ptr %sp11599, align 16
  br label %OP9175.JUMPDEST.sink.split

OP3453.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1648 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp11605 = getelementptr i256, ptr %1648, i64 -2
  store i256 18, ptr %sp11605, align 16
  %sp11609 = getelementptr i256, ptr %1648, i64 -1
  store i256 18, ptr %sp11609, align 16
  %1649 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11609, i8 17)
  %.not48292 = icmp eq i8 %1649, 0
  br i1 %.not48292, label %OP3459.PUSH32, label %return, !prof !6

OP3459.PUSH32:                                    ; preds = %OP3453.JUMPDEST
  store i256 -256, ptr %1648, align 16
  %b11618 = load i256, ptr %sp11609, align 16
  %1650 = and i256 %b11618, -256
  store i256 %1650, ptr %sp11609, align 16
  store i256 2, ptr %1648, align 16
  %1651 = or disjoint i256 %1650, 2
  store i256 %1651, ptr %sp11609, align 16
  %swap.b11632 = load i256, ptr %sp11605, align 16
  store i256 %1651, ptr %sp11605, align 16
  store i256 %swap.b11632, ptr %sp11609, align 16
  %1652 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11605, i8 17)
  %.not48293 = icmp eq i8 %1652, 0
  br i1 %.not48293, label %OP3465.JUMP, label %return.loopexit52642.split.loop.exit53114, !prof !6

OP3465.JUMP:                                      ; preds = %OP3459.PUSH32
  %1653 = add i64 %len.addr.357, -3
  %sp11636 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1653
  %a11637 = load i256, ptr %sp11636, align 16
  br label %dynamic_jump_table.backedge

OP3466.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP709.JUMPDEST
  %len.addr.162 = phi i64 [ %323, %OP709.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1654 = add i64 %len.addr.162, 1
  %sp11640 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.162
  store i256 8, ptr %sp11640, align 16
  %1655 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11640, i8 17)
  %.not48609 = icmp eq i8 %1655, 0
  br i1 %.not48609, label %OP3469.PUSH1, label %return, !prof !6

OP3469.PUSH1:                                     ; preds = %OP3466.JUMPDEST
  %1656 = add i64 %len.addr.162, 2
  %sp11644 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1654
  %swap.b11649 = load i256, ptr %sp11640, align 16
  store i256 0, ptr %sp11640, align 16
  %1657 = add i64 %len.addr.162, 3
  %sp11651 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1656
  %contract.caller.addr11659 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller11660 = load i160, ptr %contract.caller.addr11659, align 16
  %1658 = tail call i160 @llvm.bswap.i160(i160 %contract.caller11660)
  %1659 = zext i160 %1658 to i256
  store i256 %1659, ptr %sp11651, align 16
  %1660 = trunc i256 %swap.b11649 to i160
  %1661 = icmp eq i160 %1658, %1660
  %1662 = zext i1 %1661 to i256
  store i256 %1662, ptr %sp11644, align 16
  br i1 %1661, label %OP3515.JUMPDEST, label %OP3477.PUSH1

OP3477.PUSH1:                                     ; preds = %OP3469.PUSH1
  store i256 64, ptr %sp11644, align 16
  %mload.out.slot11676 = alloca i256, align 16
  %1663 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot11676, ptr %arg.ecx.addr)
  %.not48610 = icmp eq i8 %1663, 0
  br i1 %.not48610, label %OP3478.MLOAD.contd, label %return, !prof !6

OP3478.MLOAD.contd:                               ; preds = %OP3477.PUSH1
  %mload.out11677 = load i256, ptr %mload.out.slot11676, align 16
  store i256 %mload.out11677, ptr %sp11644, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp11651, align 16
  %1664 = add i64 %len.addr.162, 4
  %sp11684 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1657
  store i256 %mload.out11677, ptr %sp11684, align 16
  %1665 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out11677, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48611 = icmp eq i8 %1665, 0
  br i1 %.not48611, label %OP3482.PUSH1, label %return, !prof !6

OP3482.PUSH1:                                     ; preds = %OP3478.MLOAD.contd
  %b11696 = load i256, ptr %sp11644, align 16
  %1666 = add i256 %b11696, 4
  store i256 %1666, ptr %sp11644, align 16
  store i256 %1666, ptr %sp11651, align 16
  %sp11707 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1664
  %1667 = add i256 %b11696, 36
  store i256 %1667, ptr %sp11684, align 16
  %sp11721 = getelementptr i256, ptr %sp11640, i64 5
  store i256 32, ptr %sp11707, align 16
  store i256 %1666, ptr %sp11721, align 16
  %1668 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1666, i256 32, ptr %arg.ecx.addr)
  %.not48612 = icmp eq i8 %1668, 0
  br i1 %.not48612, label %OP3493.PUSH1, label %return, !prof !6

OP3493.PUSH1:                                     ; preds = %OP3482.PUSH1
  store i256 41, ptr %sp11707, align 16
  %dup211741 = load i256, ptr %sp11684, align 16
  store i256 %dup211741, ptr %sp11721, align 16
  %1669 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup211741, i256 41, ptr %arg.ecx.addr)
  %.not48613 = icmp eq i8 %1669, 0
  br i1 %.not48613, label %OP3496.PUSH1, label %return, !prof !6

OP3496.PUSH1:                                     ; preds = %OP3493.PUSH1
  %b11754 = load i256, ptr %sp11684, align 16
  %1670 = add i256 %b11754, 32
  store i256 %1670, ptr %sp11684, align 16
  store i256 22523, ptr %sp11721, align 16
  %sp11763 = getelementptr i256, ptr %sp11640, i64 6
  store i256 41, ptr %sp11707, align 16
  store i256 %1670, ptr %sp11763, align 16
  %1671 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11707)
  %.not48614 = icmp eq i8 %1671, 0
  br i1 %.not48614, label %OP3503.PUSH1, label %return, !prof !6

OP3503.PUSH1:                                     ; preds = %OP3496.PUSH1
  store i256 64, ptr %sp11707, align 16
  %b11777 = load i256, ptr %sp11684, align 16
  %1672 = add i256 %b11777, 64
  %swap.b11783 = load i256, ptr %sp11644, align 16
  store i256 %1672, ptr %sp11644, align 16
  store i256 %swap.b11783, ptr %sp11684, align 16
  store i256 64, ptr %sp11651, align 16
  %mload.out.slot11791 = alloca i256, align 16
  %1673 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot11791, ptr %arg.ecx.addr)
  %.not48615 = icmp eq i8 %1673, 0
  br i1 %.not48615, label %OP3509.MLOAD.contd, label %return, !prof !6

OP3509.MLOAD.contd:                               ; preds = %OP3503.PUSH1
  %mload.out11792 = load i256, ptr %mload.out.slot11791, align 16
  %swap.b11802 = load i256, ptr %sp11644, align 16
  store i256 %swap.b11802, ptr %sp11684, align 16
  %1674 = sub i256 %swap.b11802, %mload.out11792
  store i256 %1674, ptr %sp11644, align 16
  store i256 %mload.out11792, ptr %sp11651, align 16
  %1675 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11644, i8 16)
  %.not48616 = icmp eq i8 %1675, 0
  %spec.select36592 = select i1 %.not48616, i8 16, i8 %1675, !prof !6
  br label %return

OP3515.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3469.PUSH1
  %len.addr.163 = phi i64 [ %1654, %OP3469.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp11818 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.163
  %1676 = add i64 %len.addr.163, 2
  %sp11820 = getelementptr i256, ptr %sp11818, i64 -2
  %dup311821 = load i256, ptr %sp11820, align 16
  %sp11822 = getelementptr i256, ptr %sp11818, i64 1
  %1677 = and i256 %dup311821, 1461501637330902918203684832716283019655932542975
  store i256 %1677, ptr %sp11818, align 16
  store i256 0, ptr %sp11822, align 16
  %1678 = add i64 %len.addr.163, 3
  %sp11834 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1676
  store i256 %1677, ptr %sp11834, align 16
  %1679 = add i64 %len.addr.163, 4
  %sp11838 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1678
  store i256 0, ptr %sp11838, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !438)
  %ecx.memory.addr.i49802 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49803 = load ptr, ptr %ecx.memory.addr.i49802, align 8, !alias.scope !438
  %ecx.memory.len.addr.i49804 = getelementptr inbounds i8, ptr %ecx.memory.i49803, i64 16
  %ecx.memory.len.i49805 = load i64, ptr %ecx.memory.len.addr.i49804, align 8, !noalias !438
  %ecx.memory.last_checkpoint.addr.i49806 = getelementptr inbounds i8, ptr %ecx.memory.i49803, i64 48
  %ecx.memory.last_checkpoint.i49807 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49806, align 8, !noalias !438
  %1680 = sub i64 %ecx.memory.len.i49805, %ecx.memory.last_checkpoint.i49807
  %1681 = icmp ult i64 %1680, 32
  br i1 %1681, label %resize.i49813, label %OP3523.PUSH1, !prof !5

resize.i49813:                                    ; preds = %OP3515.JUMPDEST
  %1682 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i49814 = icmp eq i8 %1682, 0
  br i1 %.not.i49814, label %OP3523.PUSH1, label %return, !prof !6

OP3523.PUSH1:                                     ; preds = %OP3515.JUMPDEST, %resize.i49813
  %ecx.memory.buffer.ptr.shared.addr.i49809 = getelementptr inbounds i8, ptr %ecx.memory.i49803, i64 8
  %ecx.memory.buffer.ptr.shared.i49810 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49809, align 8, !noalias !438
  %ecx.memory.buffer.ptr.i49811 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49810, i64 %ecx.memory.last_checkpoint.i49807
  %1683 = tail call i256 @llvm.bswap.i256(i256 %1677)
  store i256 %1683, ptr %ecx.memory.buffer.ptr.i49811, align 1, !noalias !438
  store i256 32, ptr %sp11834, align 16
  store i256 12, ptr %sp11838, align 16
  %sp11856 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1679
  store i256 32, ptr %sp11856, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !441)
  %ecx.memory.i49817 = load ptr, ptr %ecx.memory.addr.i49802, align 8, !alias.scope !441
  %ecx.memory.len.addr.i49818 = getelementptr inbounds i8, ptr %ecx.memory.i49817, i64 16
  %ecx.memory.len.i49819 = load i64, ptr %ecx.memory.len.addr.i49818, align 8, !noalias !441
  %ecx.memory.last_checkpoint.addr.i49820 = getelementptr inbounds i8, ptr %ecx.memory.i49817, i64 48
  %ecx.memory.last_checkpoint.i49821 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49820, align 8, !noalias !441
  %1684 = sub i64 %ecx.memory.len.i49819, %ecx.memory.last_checkpoint.i49821
  %1685 = icmp ult i64 %1684, 64
  br i1 %1685, label %resize.i49828, label %OP3528.PUSH1, !prof !5

resize.i49828:                                    ; preds = %OP3523.PUSH1
  %1686 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i49829 = icmp eq i8 %1686, 0
  br i1 %.not.i49829, label %OP3528.PUSH1, label %return, !prof !6

OP3528.PUSH1:                                     ; preds = %OP3523.PUSH1, %resize.i49828
  %ecx.memory.buffer.ptr.shared.addr.i49823 = getelementptr inbounds i8, ptr %ecx.memory.i49817, i64 8
  %ecx.memory.buffer.ptr.shared.i49824 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49823, align 8, !noalias !441
  %ecx.memory.buffer.ptr.i49825 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49824, i64 %ecx.memory.last_checkpoint.i49821
  %slot.i49826 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49825, i64 32
  store i256 5427754182999196660479889922282245680622030531201901439349574250370927951872, ptr %slot.i49826, align 1, !noalias !441
  %1687 = add i64 %len.addr.163, 5
  store i256 64, ptr %sp11838, align 16
  store i256 64, ptr %sp11856, align 16
  %1688 = add i64 %len.addr.163, 6
  %dup411870 = load i256, ptr %sp11822, align 16
  %sp11871 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1687
  store i256 %dup411870, ptr %sp11871, align 16
  %1689 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11856)
  %.not48619 = icmp eq i8 %1689, 0
  br i1 %.not48619, label %OP3532.DUP1, label %return, !prof !6

OP3532.DUP1:                                      ; preds = %OP3528.PUSH1
  %dup111876 = load i256, ptr %sp11856, align 16
  store i256 %dup111876, ptr %sp11871, align 16
  %1690 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11871, i8 17)
  %.not48620 = icmp eq i8 %1690, 0
  br i1 %.not48620, label %OP3534.PUSH32, label %return, !prof !6

OP3534.PUSH32:                                    ; preds = %OP3532.DUP1
  %sp11881 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1688
  store i256 -256, ptr %sp11881, align 16
  %b11886 = load i256, ptr %sp11871, align 16
  %1691 = and i256 %b11886, -256
  %swap.b11892 = load i256, ptr %sp11856, align 16
  store i256 %1691, ptr %sp11856, align 16
  store i256 %swap.b11892, ptr %sp11871, align 16
  %1692 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11856, i8 17)
  %.not48621 = icmp eq i8 %1692, 0
  br i1 %.not48621, label %OP3538.PUSH1, label %return, !prof !6

OP3538.PUSH1:                                     ; preds = %OP3534.PUSH32
  %swap.b11901 = load i256, ptr %sp11838, align 16
  store i256 13, ptr %sp11838, align 16
  %swap.b11906 = load i256, ptr %sp11834, align 16
  store i256 %swap.b11901, ptr %sp11834, align 16
  store i256 %swap.b11906, ptr %sp11856, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !444)
  %ecx.memory.i49832 = load ptr, ptr %ecx.memory.addr.i49802, align 8, !alias.scope !444
  %ecx.memory.len.addr.i49833 = getelementptr inbounds i8, ptr %ecx.memory.i49832, i64 16
  %ecx.memory.len.i49834 = load i64, ptr %ecx.memory.len.addr.i49833, align 8, !noalias !444
  %ecx.memory.last_checkpoint.addr.i49835 = getelementptr inbounds i8, ptr %ecx.memory.i49832, i64 48
  %ecx.memory.last_checkpoint.i49836 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49835, align 8, !noalias !444
  %1693 = sub i64 %ecx.memory.len.i49834, %ecx.memory.last_checkpoint.i49836
  %1694 = icmp ugt i256 %swap.b11906, 18446744073709551615
  %1695 = trunc i256 %swap.b11906 to i64
  %1696 = add i64 %1695, 32
  %1697 = icmp ugt i64 %1695, -33
  %1698 = or i1 %1694, %1697
  %1699 = select i1 %1698, i64 -1, i64 %1696
  %1700 = icmp ugt i64 %1699, %1693
  br i1 %1700, label %resize.i49843, label %OP3542.DUP1, !prof !5

resize.i49843:                                    ; preds = %OP3538.PUSH1
  %1701 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1699)
  %.not.i49844 = icmp eq i8 %1701, 0
  br i1 %.not.i49844, label %OP3542.DUP1, label %return, !prof !6

OP3542.DUP1:                                      ; preds = %OP3538.PUSH1, %resize.i49843
  %ecx.memory.buffer.ptr.shared.addr.i49838 = getelementptr inbounds i8, ptr %ecx.memory.i49832, i64 8
  %ecx.memory.buffer.ptr.shared.i49839 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49838, align 8, !noalias !444
  %ecx.memory.buffer.ptr.i49840 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49839, i64 %ecx.memory.last_checkpoint.i49836
  %slot.i49841 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49840, i64 %1695
  store i256 5880067031582463048853214082472432820673866408802059892628705437901838614528, ptr %slot.i49841, align 1, !noalias !444
  %dup111914 = load i256, ptr %sp11834, align 16
  store i256 %dup111914, ptr %sp11838, align 16
  %dup311918 = load i256, ptr %sp11822, align 16
  store i256 %dup311918, ptr %sp11856, align 16
  %1702 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11838)
  %.not48623 = icmp eq i8 %1702, 0
  br i1 %.not48623, label %OP3545.DUP3, label %return, !prof !6

OP3545.DUP3:                                      ; preds = %OP3542.DUP1
  %dup311924 = load i256, ptr %sp11822, align 16
  %swap.b11930 = load i256, ptr %sp11838, align 16
  store i256 %dup311924, ptr %sp11838, align 16
  store i256 %swap.b11930, ptr %sp11856, align 16
  %1703 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11838, i8 17)
  %.not48624 = icmp eq i8 %1703, 0
  br i1 %.not48624, label %OP3548.MLOAD, label %return, !prof !6

OP3548.MLOAD:                                     ; preds = %OP3545.DUP3
  %a11935 = load i256, ptr %sp11834, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !447)
  %ecx.memory.i49847 = load ptr, ptr %ecx.memory.addr.i49802, align 8, !alias.scope !447, !noalias !450
  %ecx.memory.len.addr.i49848 = getelementptr inbounds i8, ptr %ecx.memory.i49847, i64 16
  %ecx.memory.len.i49849 = load i64, ptr %ecx.memory.len.addr.i49848, align 8, !noalias !452
  %ecx.memory.last_checkpoint.addr.i49850 = getelementptr inbounds i8, ptr %ecx.memory.i49847, i64 48
  %ecx.memory.last_checkpoint.i49851 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49850, align 8, !noalias !452
  %1704 = sub i64 %ecx.memory.len.i49849, %ecx.memory.last_checkpoint.i49851
  %1705 = icmp ugt i256 %a11935, 18446744073709551615
  %1706 = trunc i256 %a11935 to i64
  %1707 = add i64 %1706, 32
  %1708 = icmp ugt i64 %1706, -33
  %1709 = or i1 %1705, %1708
  %1710 = select i1 %1709, i64 -1, i64 %1707
  %1711 = icmp ugt i64 %1710, %1704
  br i1 %1711, label %resize.i49859, label %OP3548.MLOAD.contd, !prof !5

resize.i49859:                                    ; preds = %OP3548.MLOAD
  %1712 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1710), !noalias !450
  %.not.i49860 = icmp eq i8 %1712, 0
  br i1 %.not.i49860, label %OP3548.MLOAD.contd, label %return, !prof !6

OP3548.MLOAD.contd:                               ; preds = %OP3548.MLOAD, %resize.i49859
  %ecx.memory.buffer.ptr.shared.addr.i49853 = getelementptr inbounds i8, ptr %ecx.memory.i49847, i64 8
  %ecx.memory.buffer.ptr.shared.i49854 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49853, align 8, !noalias !452
  %ecx.memory.buffer.ptr.i49855 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49854, i64 %ecx.memory.last_checkpoint.i49851
  %slot.i49856 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49855, i64 %1706
  %slot.value.i49857 = load i256, ptr %slot.i49856, align 1, !noalias !452
  %1713 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49857)
  %swap.b11945 = load i256, ptr %sp11822, align 16
  store i256 -10282210223366313003161193174449307387847059928671201988468612262478662441326, ptr %sp11822, align 16
  store i256 %swap.b11945, ptr %sp11834, align 16
  store i256 %1713, ptr %sp11838, align 16
  %1714 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11818, i8 2)
  %.not48626 = icmp eq i8 %1714, 0
  br i1 %.not48626, label %OP3553.POP, label %return, !prof !6

OP3553.POP:                                       ; preds = %OP3548.MLOAD.contd
  %sp11955 = getelementptr i256, ptr %sp11818, i64 -1
  %sp11959 = getelementptr i256, ptr %sp11818, i64 -3
  %swap.b11960 = load i256, ptr %sp11959, align 16
  store i256 1, ptr %sp11959, align 16
  %swap.b11965 = load i256, ptr %sp11820, align 16
  store i256 %swap.b11960, ptr %sp11820, align 16
  store i256 %swap.b11965, ptr %sp11955, align 16
  %1715 = add i64 %len.addr.163, -2
  br label %dynamic_jump_table.preheader

OP3559.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP716.JUMPDEST
  %len.addr.164 = phi i64 [ %328, %OP716.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1716 = add i64 %len.addr.164, 1
  %sp11972 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.164
  store i256 49955707469362902507454157297736832118868343942642399513960811609542965143241, ptr %sp11972, align 16
  %sp11974 = getelementptr i256, ptr %sp11972, i64 -1
  %dup211975 = load i256, ptr %sp11974, align 16
  %sp11976 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1716
  store i256 %dup211975, ptr %sp11976, align 16
  br label %dynamic_jump_table.preheader

OP3563.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP720.JUMPDEST
  %len.addr.165 = phi i64 [ %329, %OP720.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1717 = add i64 %len.addr.165, 1
  %sp11982 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.165
  store i256 6, ptr %sp11982, align 16
  %1718 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp11982, i8 17)
  %.not48502 = icmp eq i8 %1718, 0
  br i1 %.not48502, label %OP3566.PUSH1, label %return, !prof !6

OP3566.PUSH1:                                     ; preds = %OP3563.JUMPDEST
  %sp11986 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1717
  %b11991 = load i256, ptr %sp11982, align 16
  %1719 = and i256 %b11991, 255
  store i256 %1719, ptr %sp11982, align 16
  %sp11994 = getelementptr i256, ptr %sp11982, i64 -1
  %dup211995 = load i256, ptr %sp11994, align 16
  store i256 %dup211995, ptr %sp11986, align 16
  br label %dynamic_jump_table.preheader

OP3570.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1068.POP
  %len.addr.166 = phi i64 [ %503, %OP1068.POP ], [ %len.addr.357, %dynamic_jump_table ]
  %1720 = add i64 %len.addr.166, 1
  %sp12002 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.166
  store i256 8, ptr %sp12002, align 16
  %1721 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12002, i8 17)
  %.not48449 = icmp eq i8 %1721, 0
  br i1 %.not48449, label %OP3573.PUSH21, label %return, !prof !6

OP3573.PUSH21:                                    ; preds = %OP3570.JUMPDEST
  %1722 = add i64 %len.addr.166, 2
  %sp12006 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1720
  %swap.b12011 = load i256, ptr %sp12002, align 16
  store i256 255, ptr %sp12006, align 16
  %1723 = and i256 %swap.b12011, 372682917519380244141939632342652170012262798458880
  %1724 = icmp eq i256 %1723, 0
  %1725 = zext i1 %1724 to i256
  store i256 %1725, ptr %sp12002, align 16
  br i1 %1724, label %OP3619.JUMPDEST, label %OP3581.PUSH1

OP3581.PUSH1:                                     ; preds = %OP3573.PUSH21
  store i256 64, ptr %sp12002, align 16
  %mload.out.slot12038 = alloca i256, align 16
  %1726 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12038, ptr %arg.ecx.addr)
  %.not48450 = icmp eq i8 %1726, 0
  br i1 %.not48450, label %OP3582.MLOAD.contd, label %return, !prof !6

OP3582.MLOAD.contd:                               ; preds = %OP3581.PUSH1
  %mload.out12039 = load i256, ptr %mload.out.slot12038, align 16
  store i256 %mload.out12039, ptr %sp12002, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp12006, align 16
  %1727 = add i64 %len.addr.166, 3
  %sp12046 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1722
  store i256 %mload.out12039, ptr %sp12046, align 16
  %1728 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12039, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48451 = icmp eq i8 %1728, 0
  br i1 %.not48451, label %OP3586.PUSH1, label %return, !prof !6

OP3586.PUSH1:                                     ; preds = %OP3582.MLOAD.contd
  %b12058 = load i256, ptr %sp12002, align 16
  %1729 = add i256 %b12058, 4
  store i256 %1729, ptr %sp12002, align 16
  store i256 %1729, ptr %sp12006, align 16
  %sp12069 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1727
  %1730 = add i256 %b12058, 36
  store i256 %1730, ptr %sp12046, align 16
  %sp12083 = getelementptr i256, ptr %sp12002, i64 4
  store i256 32, ptr %sp12069, align 16
  store i256 %1729, ptr %sp12083, align 16
  %1731 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1729, i256 32, ptr %arg.ecx.addr)
  %.not48452 = icmp eq i8 %1731, 0
  br i1 %.not48452, label %OP3597.PUSH1, label %return, !prof !6

OP3597.PUSH1:                                     ; preds = %OP3586.PUSH1
  store i256 42, ptr %sp12069, align 16
  %dup212103 = load i256, ptr %sp12046, align 16
  store i256 %dup212103, ptr %sp12083, align 16
  %1732 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup212103, i256 42, ptr %arg.ecx.addr)
  %.not48453 = icmp eq i8 %1732, 0
  br i1 %.not48453, label %OP3600.PUSH1, label %return, !prof !6

OP3600.PUSH1:                                     ; preds = %OP3597.PUSH1
  %b12116 = load i256, ptr %sp12046, align 16
  %1733 = add i256 %b12116, 32
  store i256 %1733, ptr %sp12046, align 16
  store i256 22927, ptr %sp12083, align 16
  %sp12125 = getelementptr i256, ptr %sp12002, i64 5
  store i256 42, ptr %sp12069, align 16
  store i256 %1733, ptr %sp12125, align 16
  %1734 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12069)
  %.not48454 = icmp eq i8 %1734, 0
  br i1 %.not48454, label %OP3607.PUSH1, label %return, !prof !6

OP3607.PUSH1:                                     ; preds = %OP3600.PUSH1
  store i256 64, ptr %sp12069, align 16
  %b12139 = load i256, ptr %sp12046, align 16
  %1735 = add i256 %b12139, 64
  %swap.b12145 = load i256, ptr %sp12002, align 16
  store i256 %1735, ptr %sp12002, align 16
  store i256 %swap.b12145, ptr %sp12046, align 16
  store i256 64, ptr %sp12006, align 16
  %mload.out.slot12153 = alloca i256, align 16
  %1736 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12153, ptr %arg.ecx.addr)
  %.not48455 = icmp eq i8 %1736, 0
  br i1 %.not48455, label %OP3613.MLOAD.contd, label %return, !prof !6

OP3613.MLOAD.contd:                               ; preds = %OP3607.PUSH1
  %mload.out12154 = load i256, ptr %mload.out.slot12153, align 16
  %swap.b12164 = load i256, ptr %sp12002, align 16
  store i256 %swap.b12164, ptr %sp12046, align 16
  %1737 = sub i256 %swap.b12164, %mload.out12154
  store i256 %1737, ptr %sp12002, align 16
  store i256 %mload.out12154, ptr %sp12006, align 16
  %1738 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12002, i8 16)
  %.not48456 = icmp eq i8 %1738, 0
  %spec.select36593 = select i1 %.not48456, i8 16, i8 %1738, !prof !6
  br label %return

OP3619.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54035 = add i64 %len.addr.357, 2
  %.pre54265 = add i64 %len.addr.357, 1
  br label %OP3619.JUMPDEST

OP3619.JUMPDEST:                                  ; preds = %OP3619.JUMPDEST.loopexit, %OP3573.PUSH21
  %.pre-phi54266 = phi i64 [ %.pre54265, %OP3619.JUMPDEST.loopexit ], [ %1720, %OP3573.PUSH21 ]
  %.pre-phi54036 = phi i64 [ %.pre54035, %OP3619.JUMPDEST.loopexit ], [ %1722, %OP3573.PUSH21 ]
  %len.addr.167 = phi i64 [ %len.addr.357, %OP3619.JUMPDEST.loopexit ], [ %len.addr.166, %OP3573.PUSH21 ]
  %sp12180 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.167
  %sp12182 = getelementptr i256, ptr %sp12180, i64 -4
  %dup512183 = load i256, ptr %sp12182, align 16
  %sp12184 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54266
  store i256 %dup512183, ptr %sp12184, align 16
  %1739 = and i256 %dup512183, 1461501637330902918203684832716283019655932542975
  store i256 %1739, ptr %sp12180, align 16
  %.not48457 = icmp eq i256 %1739, 0
  br i1 %.not48457, label %OP3625.PUSH1, label %OP3663.JUMPDEST

OP3625.PUSH1:                                     ; preds = %OP3619.JUMPDEST
  store i256 64, ptr %sp12180, align 16
  %mload.out.slot12199 = alloca i256, align 16
  %1740 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12199, ptr %arg.ecx.addr)
  %.not48458 = icmp eq i8 %1740, 0
  br i1 %.not48458, label %OP3626.MLOAD.contd, label %return, !prof !6

OP3626.MLOAD.contd:                               ; preds = %OP3625.PUSH1
  %mload.out12200 = load i256, ptr %mload.out.slot12199, align 16
  store i256 %mload.out12200, ptr %sp12180, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp12184, align 16
  %1741 = add i64 %len.addr.167, 3
  %sp12207 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54036
  store i256 %mload.out12200, ptr %sp12207, align 16
  %1742 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12200, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48459 = icmp eq i8 %1742, 0
  br i1 %.not48459, label %OP3630.PUSH1, label %return, !prof !6

OP3630.PUSH1:                                     ; preds = %OP3626.MLOAD.contd
  store i256 4, ptr %sp12184, align 16
  %b12219 = load i256, ptr %sp12180, align 16
  %1743 = add i256 %b12219, 4
  store i256 %1743, ptr %sp12180, align 16
  store i256 %1743, ptr %sp12184, align 16
  %sp12230 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1741
  %1744 = add i256 %b12219, 36
  store i256 %1744, ptr %sp12207, align 16
  %sp12244 = getelementptr i256, ptr %sp12180, i64 4
  store i256 32, ptr %sp12230, align 16
  store i256 %1743, ptr %sp12244, align 16
  %1745 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1743, i256 32, ptr %arg.ecx.addr)
  %.not48460 = icmp eq i8 %1745, 0
  br i1 %.not48460, label %OP3641.PUSH1, label %return, !prof !6

OP3641.PUSH1:                                     ; preds = %OP3630.PUSH1
  store i256 47, ptr %sp12230, align 16
  %dup212264 = load i256, ptr %sp12207, align 16
  store i256 %dup212264, ptr %sp12244, align 16
  %1746 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup212264, i256 47, ptr %arg.ecx.addr)
  %.not48461 = icmp eq i8 %1746, 0
  br i1 %.not48461, label %OP3644.PUSH1, label %return, !prof !6

OP3644.PUSH1:                                     ; preds = %OP3641.PUSH1
  store i256 32, ptr %sp12230, align 16
  %b12277 = load i256, ptr %sp12207, align 16
  %1747 = add i256 %b12277, 32
  store i256 %1747, ptr %sp12207, align 16
  store i256 22721, ptr %sp12244, align 16
  %sp12286 = getelementptr i256, ptr %sp12180, i64 5
  store i256 47, ptr %sp12230, align 16
  store i256 %1747, ptr %sp12286, align 16
  %1748 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12230)
  %.not48462 = icmp eq i8 %1748, 0
  br i1 %.not48462, label %OP3651.PUSH1, label %return, !prof !6

OP3651.PUSH1:                                     ; preds = %OP3644.PUSH1
  store i256 64, ptr %sp12230, align 16
  %b12300 = load i256, ptr %sp12207, align 16
  %1749 = add i256 %b12300, 64
  store i256 %1749, ptr %sp12207, align 16
  %swap.b12306 = load i256, ptr %sp12180, align 16
  store i256 %1749, ptr %sp12180, align 16
  store i256 %swap.b12306, ptr %sp12207, align 16
  store i256 64, ptr %sp12184, align 16
  %mload.out.slot12314 = alloca i256, align 16
  %1750 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12314, ptr %arg.ecx.addr)
  %.not48463 = icmp eq i8 %1750, 0
  br i1 %.not48463, label %OP3657.MLOAD.contd, label %return, !prof !6

OP3657.MLOAD.contd:                               ; preds = %OP3651.PUSH1
  %mload.out12315 = load i256, ptr %mload.out.slot12314, align 16
  store i256 %mload.out12315, ptr %sp12184, align 16
  store i256 %mload.out12315, ptr %sp12207, align 16
  %swap.b12325 = load i256, ptr %sp12180, align 16
  store i256 %swap.b12325, ptr %sp12207, align 16
  %1751 = sub i256 %swap.b12325, %mload.out12315
  store i256 %1751, ptr %sp12180, align 16
  store i256 %mload.out12315, ptr %sp12184, align 16
  %1752 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12180, i8 16)
  %.not48464 = icmp eq i8 %1752, 0
  %spec.select36594 = select i1 %.not48464, i8 16, i8 %1752, !prof !6
  br label %return

OP3663.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54033 = add i64 %len.addr.357, 2
  %.pre54267 = add i64 %len.addr.357, 1
  br label %OP3663.JUMPDEST

OP3663.JUMPDEST:                                  ; preds = %OP3663.JUMPDEST.loopexit, %OP3619.JUMPDEST
  %.pre-phi54268 = phi i64 [ %.pre54267, %OP3663.JUMPDEST.loopexit ], [ %.pre-phi54266, %OP3619.JUMPDEST ]
  %.pre-phi54034 = phi i64 [ %.pre54033, %OP3663.JUMPDEST.loopexit ], [ %.pre-phi54036, %OP3619.JUMPDEST ]
  %len.addr.168 = phi i64 [ %len.addr.357, %OP3663.JUMPDEST.loopexit ], [ %len.addr.167, %OP3619.JUMPDEST ]
  %sp12341 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.168
  %sp12343 = getelementptr i256, ptr %sp12341, i64 -3
  %dup412344 = load i256, ptr %sp12343, align 16
  %sp12345 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54268
  store i256 %dup412344, ptr %sp12345, align 16
  %1753 = and i256 %dup412344, 1461501637330902918203684832716283019655932542975
  store i256 %1753, ptr %sp12341, align 16
  %.not48465 = icmp eq i256 %1753, 0
  br i1 %.not48465, label %OP3669.PUSH1, label %OP3707.JUMPDEST

OP3669.PUSH1:                                     ; preds = %OP3663.JUMPDEST
  store i256 64, ptr %sp12341, align 16
  %mload.out.slot12360 = alloca i256, align 16
  %1754 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12360, ptr %arg.ecx.addr)
  %.not48466 = icmp eq i8 %1754, 0
  br i1 %.not48466, label %OP3670.MLOAD.contd, label %return, !prof !6

OP3670.MLOAD.contd:                               ; preds = %OP3669.PUSH1
  %mload.out12361 = load i256, ptr %mload.out.slot12360, align 16
  store i256 %mload.out12361, ptr %sp12341, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp12345, align 16
  %1755 = add i64 %len.addr.168, 3
  %sp12368 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54034
  store i256 %mload.out12361, ptr %sp12368, align 16
  %1756 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12361, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48467 = icmp eq i8 %1756, 0
  br i1 %.not48467, label %OP3674.PUSH1, label %return, !prof !6

OP3674.PUSH1:                                     ; preds = %OP3670.MLOAD.contd
  store i256 4, ptr %sp12345, align 16
  %b12380 = load i256, ptr %sp12341, align 16
  %1757 = add i256 %b12380, 4
  store i256 %1757, ptr %sp12341, align 16
  store i256 %1757, ptr %sp12345, align 16
  %sp12391 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1755
  %1758 = add i256 %b12380, 36
  store i256 %1758, ptr %sp12368, align 16
  %sp12405 = getelementptr i256, ptr %sp12341, i64 4
  store i256 32, ptr %sp12391, align 16
  store i256 %1757, ptr %sp12405, align 16
  %1759 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1757, i256 32, ptr %arg.ecx.addr)
  %.not48468 = icmp eq i8 %1759, 0
  br i1 %.not48468, label %OP3685.PUSH1, label %return, !prof !6

OP3685.PUSH1:                                     ; preds = %OP3674.PUSH1
  store i256 41, ptr %sp12391, align 16
  %dup212425 = load i256, ptr %sp12368, align 16
  store i256 %dup212425, ptr %sp12405, align 16
  %1760 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup212425, i256 41, ptr %arg.ecx.addr)
  %.not48469 = icmp eq i8 %1760, 0
  br i1 %.not48469, label %OP3688.PUSH1, label %return, !prof !6

OP3688.PUSH1:                                     ; preds = %OP3685.PUSH1
  store i256 32, ptr %sp12391, align 16
  %b12438 = load i256, ptr %sp12368, align 16
  %1761 = add i256 %b12438, 32
  store i256 %1761, ptr %sp12368, align 16
  store i256 22324, ptr %sp12405, align 16
  %sp12447 = getelementptr i256, ptr %sp12341, i64 5
  store i256 41, ptr %sp12391, align 16
  store i256 %1761, ptr %sp12447, align 16
  %1762 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12391)
  %.not48470 = icmp eq i8 %1762, 0
  br i1 %.not48470, label %OP3695.PUSH1, label %return, !prof !6

OP3695.PUSH1:                                     ; preds = %OP3688.PUSH1
  store i256 64, ptr %sp12391, align 16
  %b12461 = load i256, ptr %sp12368, align 16
  %1763 = add i256 %b12461, 64
  store i256 %1763, ptr %sp12368, align 16
  %swap.b12467 = load i256, ptr %sp12341, align 16
  store i256 %1763, ptr %sp12341, align 16
  store i256 %swap.b12467, ptr %sp12368, align 16
  store i256 64, ptr %sp12345, align 16
  %mload.out.slot12475 = alloca i256, align 16
  %1764 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12475, ptr %arg.ecx.addr)
  %.not48471 = icmp eq i8 %1764, 0
  br i1 %.not48471, label %OP3701.MLOAD.contd, label %return, !prof !6

OP3701.MLOAD.contd:                               ; preds = %OP3695.PUSH1
  %mload.out12476 = load i256, ptr %mload.out.slot12475, align 16
  store i256 %mload.out12476, ptr %sp12345, align 16
  store i256 %mload.out12476, ptr %sp12368, align 16
  %swap.b12486 = load i256, ptr %sp12341, align 16
  store i256 %swap.b12486, ptr %sp12368, align 16
  %1765 = sub i256 %swap.b12486, %mload.out12476
  store i256 %1765, ptr %sp12341, align 16
  store i256 %mload.out12476, ptr %sp12345, align 16
  %1766 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12341, i8 16)
  %.not48472 = icmp eq i8 %1766, 0
  %spec.select36595 = select i1 %.not48472, i8 16, i8 %1766, !prof !6
  br label %return

OP3707.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54031 = add i64 %len.addr.357, 2
  %.pre54269 = add i64 %len.addr.357, 1
  br label %OP3707.JUMPDEST

OP3707.JUMPDEST:                                  ; preds = %OP3707.JUMPDEST.loopexit, %OP3663.JUMPDEST
  %.pre-phi54270 = phi i64 [ %.pre54269, %OP3707.JUMPDEST.loopexit ], [ %.pre-phi54268, %OP3663.JUMPDEST ]
  %.pre-phi54032 = phi i64 [ %.pre54031, %OP3707.JUMPDEST.loopexit ], [ %.pre-phi54034, %OP3663.JUMPDEST ]
  %len.addr.169 = phi i64 [ %len.addr.357, %OP3707.JUMPDEST.loopexit ], [ %len.addr.168, %OP3663.JUMPDEST ]
  %sp12502 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.169
  %sp12504 = getelementptr i256, ptr %sp12502, i64 -2
  %dup312505 = load i256, ptr %sp12504, align 16
  %sp12506 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54270
  store i256 %dup312505, ptr %sp12506, align 16
  %1767 = and i256 %dup312505, 1461501637330902918203684832716283019655932542975
  store i256 %1767, ptr %sp12502, align 16
  %.not48473 = icmp eq i256 %1767, 0
  br i1 %.not48473, label %OP3713.PUSH1, label %OP3751.JUMPDEST

OP3713.PUSH1:                                     ; preds = %OP3707.JUMPDEST
  store i256 64, ptr %sp12502, align 16
  %mload.out.slot12521 = alloca i256, align 16
  %1768 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12521, ptr %arg.ecx.addr)
  %.not48474 = icmp eq i8 %1768, 0
  br i1 %.not48474, label %OP3714.MLOAD.contd, label %return, !prof !6

OP3714.MLOAD.contd:                               ; preds = %OP3713.PUSH1
  %mload.out12522 = load i256, ptr %mload.out.slot12521, align 16
  store i256 %mload.out12522, ptr %sp12502, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp12506, align 16
  %1769 = add i64 %len.addr.169, 3
  %sp12529 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54032
  store i256 %mload.out12522, ptr %sp12529, align 16
  %1770 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12522, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48475 = icmp eq i8 %1770, 0
  br i1 %.not48475, label %OP3718.PUSH1, label %return, !prof !6

OP3718.PUSH1:                                     ; preds = %OP3714.MLOAD.contd
  store i256 4, ptr %sp12506, align 16
  %b12541 = load i256, ptr %sp12502, align 16
  %1771 = add i256 %b12541, 4
  store i256 %1771, ptr %sp12502, align 16
  store i256 %1771, ptr %sp12506, align 16
  %sp12552 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1769
  %1772 = add i256 %b12541, 36
  store i256 %1772, ptr %sp12529, align 16
  %sp12566 = getelementptr i256, ptr %sp12502, i64 4
  store i256 32, ptr %sp12552, align 16
  store i256 %1771, ptr %sp12566, align 16
  %1773 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1771, i256 32, ptr %arg.ecx.addr)
  %.not48476 = icmp eq i8 %1773, 0
  br i1 %.not48476, label %OP3729.PUSH1, label %return, !prof !6

OP3729.PUSH1:                                     ; preds = %OP3718.PUSH1
  store i256 46, ptr %sp12552, align 16
  %dup212586 = load i256, ptr %sp12529, align 16
  store i256 %dup212586, ptr %sp12566, align 16
  %1774 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup212586, i256 46, ptr %arg.ecx.addr)
  %.not48477 = icmp eq i8 %1774, 0
  br i1 %.not48477, label %OP3732.PUSH1, label %return, !prof !6

OP3732.PUSH1:                                     ; preds = %OP3729.PUSH1
  store i256 32, ptr %sp12552, align 16
  %b12599 = load i256, ptr %sp12529, align 16
  %1775 = add i256 %b12599, 32
  store i256 %1775, ptr %sp12529, align 16
  store i256 22844, ptr %sp12566, align 16
  %sp12608 = getelementptr i256, ptr %sp12502, i64 5
  store i256 46, ptr %sp12552, align 16
  store i256 %1775, ptr %sp12608, align 16
  %1776 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12552)
  %.not48478 = icmp eq i8 %1776, 0
  br i1 %.not48478, label %OP3739.PUSH1, label %return, !prof !6

OP3739.PUSH1:                                     ; preds = %OP3732.PUSH1
  store i256 64, ptr %sp12552, align 16
  %b12622 = load i256, ptr %sp12529, align 16
  %1777 = add i256 %b12622, 64
  store i256 %1777, ptr %sp12529, align 16
  %swap.b12628 = load i256, ptr %sp12502, align 16
  store i256 %1777, ptr %sp12502, align 16
  store i256 %swap.b12628, ptr %sp12529, align 16
  store i256 64, ptr %sp12506, align 16
  %mload.out.slot12636 = alloca i256, align 16
  %1778 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12636, ptr %arg.ecx.addr)
  %.not48479 = icmp eq i8 %1778, 0
  br i1 %.not48479, label %OP3745.MLOAD.contd, label %return, !prof !6

OP3745.MLOAD.contd:                               ; preds = %OP3739.PUSH1
  %mload.out12637 = load i256, ptr %mload.out.slot12636, align 16
  store i256 %mload.out12637, ptr %sp12506, align 16
  store i256 %mload.out12637, ptr %sp12529, align 16
  %swap.b12647 = load i256, ptr %sp12502, align 16
  store i256 %swap.b12647, ptr %sp12529, align 16
  %1779 = sub i256 %swap.b12647, %mload.out12637
  store i256 %1779, ptr %sp12502, align 16
  store i256 %mload.out12637, ptr %sp12506, align 16
  %1780 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12502, i8 16)
  %.not48480 = icmp eq i8 %1780, 0
  %spec.select36596 = select i1 %.not48480, i8 16, i8 %1780, !prof !6
  br label %return

OP3751.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54029 = add i64 %len.addr.357, 2
  %.pre54271 = add i64 %len.addr.357, 1
  br label %OP3751.JUMPDEST

OP3751.JUMPDEST:                                  ; preds = %OP3751.JUMPDEST.loopexit, %OP3707.JUMPDEST
  %.pre-phi54272 = phi i64 [ %.pre54271, %OP3751.JUMPDEST.loopexit ], [ %.pre-phi54270, %OP3707.JUMPDEST ]
  %.pre-phi54030 = phi i64 [ %.pre54029, %OP3751.JUMPDEST.loopexit ], [ %.pre-phi54032, %OP3707.JUMPDEST ]
  %len.addr.170 = phi i64 [ %len.addr.357, %OP3751.JUMPDEST.loopexit ], [ %len.addr.169, %OP3707.JUMPDEST ]
  %sp12663 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.170
  %sp12665 = getelementptr i256, ptr %sp12663, i64 -1
  %dup212666 = load i256, ptr %sp12665, align 16
  %sp12667 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54272
  store i256 %dup212666, ptr %sp12667, align 16
  %1781 = and i256 %dup212666, 1461501637330902918203684832716283019655932542975
  store i256 %1781, ptr %sp12663, align 16
  %.not48481 = icmp eq i256 %1781, 0
  br i1 %.not48481, label %OP3757.PUSH1, label %OP3795.JUMPDEST

OP3757.PUSH1:                                     ; preds = %OP3751.JUMPDEST
  store i256 64, ptr %sp12663, align 16
  %mload.out.slot12682 = alloca i256, align 16
  %1782 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12682, ptr %arg.ecx.addr)
  %.not48482 = icmp eq i8 %1782, 0
  br i1 %.not48482, label %OP3758.MLOAD.contd, label %return, !prof !6

OP3758.MLOAD.contd:                               ; preds = %OP3757.PUSH1
  %mload.out12683 = load i256, ptr %mload.out.slot12682, align 16
  store i256 %mload.out12683, ptr %sp12663, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp12667, align 16
  %1783 = add i64 %len.addr.170, 3
  %sp12690 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54030
  store i256 %mload.out12683, ptr %sp12690, align 16
  %1784 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out12683, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48483 = icmp eq i8 %1784, 0
  br i1 %.not48483, label %OP3762.PUSH1, label %return, !prof !6

OP3762.PUSH1:                                     ; preds = %OP3758.MLOAD.contd
  store i256 4, ptr %sp12667, align 16
  %b12702 = load i256, ptr %sp12663, align 16
  %1785 = add i256 %b12702, 4
  store i256 %1785, ptr %sp12663, align 16
  store i256 %1785, ptr %sp12667, align 16
  %sp12713 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1783
  %1786 = add i256 %b12702, 36
  store i256 %1786, ptr %sp12690, align 16
  %sp12727 = getelementptr i256, ptr %sp12663, i64 4
  store i256 32, ptr %sp12713, align 16
  store i256 %1785, ptr %sp12727, align 16
  %1787 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1785, i256 32, ptr %arg.ecx.addr)
  %.not48484 = icmp eq i8 %1787, 0
  br i1 %.not48484, label %OP3773.PUSH1, label %return, !prof !6

OP3773.PUSH1:                                     ; preds = %OP3762.PUSH1
  store i256 40, ptr %sp12713, align 16
  %dup212747 = load i256, ptr %sp12690, align 16
  store i256 %dup212747, ptr %sp12727, align 16
  %1788 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup212747, i256 40, ptr %arg.ecx.addr)
  %.not48485 = icmp eq i8 %1788, 0
  br i1 %.not48485, label %OP3776.PUSH1, label %return, !prof !6

OP3776.PUSH1:                                     ; preds = %OP3773.PUSH1
  store i256 32, ptr %sp12713, align 16
  %b12760 = load i256, ptr %sp12690, align 16
  %1789 = add i256 %b12760, 32
  store i256 %1789, ptr %sp12690, align 16
  store i256 23164, ptr %sp12727, align 16
  %sp12769 = getelementptr i256, ptr %sp12663, i64 5
  store i256 40, ptr %sp12713, align 16
  store i256 %1789, ptr %sp12769, align 16
  %1790 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12713)
  %.not48486 = icmp eq i8 %1790, 0
  br i1 %.not48486, label %OP3783.PUSH1, label %return, !prof !6

OP3783.PUSH1:                                     ; preds = %OP3776.PUSH1
  store i256 64, ptr %sp12713, align 16
  %b12783 = load i256, ptr %sp12690, align 16
  %1791 = add i256 %b12783, 64
  store i256 %1791, ptr %sp12690, align 16
  %swap.b12789 = load i256, ptr %sp12663, align 16
  store i256 %1791, ptr %sp12663, align 16
  store i256 %swap.b12789, ptr %sp12690, align 16
  store i256 64, ptr %sp12667, align 16
  %mload.out.slot12797 = alloca i256, align 16
  %1792 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot12797, ptr %arg.ecx.addr)
  %.not48487 = icmp eq i8 %1792, 0
  br i1 %.not48487, label %OP3789.MLOAD.contd, label %return, !prof !6

OP3789.MLOAD.contd:                               ; preds = %OP3783.PUSH1
  %mload.out12798 = load i256, ptr %mload.out.slot12797, align 16
  store i256 %mload.out12798, ptr %sp12667, align 16
  store i256 %mload.out12798, ptr %sp12690, align 16
  %swap.b12808 = load i256, ptr %sp12663, align 16
  store i256 %swap.b12808, ptr %sp12690, align 16
  %1793 = sub i256 %swap.b12808, %mload.out12798
  store i256 %1793, ptr %sp12663, align 16
  store i256 %mload.out12798, ptr %sp12667, align 16
  %1794 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12663, i8 16)
  %.not48488 = icmp eq i8 %1794, 0
  %spec.select36597 = select i1 %.not48488, i8 16, i8 %1794, !prof !6
  br label %return

OP3795.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54273 = add i64 %len.addr.357, 1
  br label %OP3795.JUMPDEST

OP3795.JUMPDEST:                                  ; preds = %OP3795.JUMPDEST.loopexit, %OP3751.JUMPDEST
  %.pre-phi54274 = phi i64 [ %.pre54273, %OP3795.JUMPDEST.loopexit ], [ %.pre-phi54272, %OP3751.JUMPDEST ]
  %len.addr.171 = phi i64 [ %len.addr.357, %OP3795.JUMPDEST.loopexit ], [ %len.addr.170, %OP3751.JUMPDEST ]
  %1795 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.171
  %sp12824 = getelementptr i256, ptr %1795, i64 -8
  %dup812825 = load i256, ptr %sp12824, align 16
  store i256 %dup812825, ptr %1795, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !453)
  %ecx.memory.addr.i49862 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49863 = load ptr, ptr %ecx.memory.addr.i49862, align 8, !alias.scope !453, !noalias !456
  %ecx.memory.len.addr.i49864 = getelementptr inbounds i8, ptr %ecx.memory.i49863, i64 16
  %ecx.memory.len.i49865 = load i64, ptr %ecx.memory.len.addr.i49864, align 8, !noalias !458
  %ecx.memory.last_checkpoint.addr.i49866 = getelementptr inbounds i8, ptr %ecx.memory.i49863, i64 48
  %ecx.memory.last_checkpoint.i49867 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49866, align 8, !noalias !458
  %1796 = sub i64 %ecx.memory.len.i49865, %ecx.memory.last_checkpoint.i49867
  %1797 = icmp ugt i256 %dup812825, 18446744073709551615
  %1798 = trunc i256 %dup812825 to i64
  %1799 = add i64 %1798, 32
  %1800 = icmp ugt i64 %1798, -33
  %1801 = or i1 %1797, %1800
  %1802 = select i1 %1801, i64 -1, i64 %1799
  %1803 = icmp ugt i64 %1802, %1796
  br i1 %1803, label %resize.i49875, label %OP3797.MLOAD.contd, !prof !5

resize.i49875:                                    ; preds = %OP3795.JUMPDEST
  %1804 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %1802), !noalias !456
  %.not.i49876 = icmp eq i8 %1804, 0
  br i1 %.not.i49876, label %resize.i49875.OP3797.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i49875.OP3797.MLOAD.contd_crit_edge:       ; preds = %resize.i49875
  %dup12.pre = load i256, ptr %sp12824, align 16
  br label %OP3797.MLOAD.contd

OP3797.MLOAD.contd:                               ; preds = %resize.i49875.OP3797.MLOAD.contd_crit_edge, %OP3795.JUMPDEST
  %dup12 = phi i256 [ %dup12.pre, %resize.i49875.OP3797.MLOAD.contd_crit_edge ], [ %dup812825, %OP3795.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i49869 = getelementptr inbounds i8, ptr %ecx.memory.i49863, i64 8
  %ecx.memory.buffer.ptr.shared.i49870 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49869, align 8, !noalias !458
  %ecx.memory.buffer.ptr.i49871 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49870, i64 %ecx.memory.last_checkpoint.i49867
  %slot.i49872 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49871, i64 %1798
  %slot.value.i49873 = load i256, ptr %slot.i49872, align 1, !noalias !458
  %1805 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49873)
  %sp12834 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54274
  store i256 7192, ptr %1795, align 16
  %sp12841 = getelementptr i256, ptr %1795, i64 2
  store i256 4, ptr %sp12834, align 16
  %1806 = add i64 %len.addr.171, 4
  %sp12848 = getelementptr i256, ptr %1795, i64 3
  %sp12851 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1806
  store i256 %dup12, ptr %sp12851, align 16
  %1807 = add i256 %dup12, 32
  store i256 %1807, ptr %sp12841, align 16
  store i256 %1805, ptr %sp12848, align 16
  br label %OP10264.JUMPDEST

OP3808.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1808 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp12867 = getelementptr i256, ptr %1808, i64 -8
  %dup712868 = load i256, ptr %sp12867, align 16
  %sp12869 = getelementptr i256, ptr %1808, i64 -1
  store i256 %dup712868, ptr %sp12869, align 16
  %mload.out.slot12873 = alloca i256, align 16
  %1809 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup712868, ptr %mload.out.slot12873, ptr %arg.ecx.addr)
  %.not48291 = icmp eq i8 %1809, 0
  br i1 %.not48291, label %OP3811.MLOAD.contd, label %return, !prof !6

OP3811.MLOAD.contd:                               ; preds = %OP3808.JUMPDEST
  %mload.out12874 = load i256, ptr %mload.out.slot12873, align 16
  store i256 %mload.out12874, ptr %sp12869, align 16
  store i256 7212, ptr %1808, align 16
  store i256 7212, ptr %sp12869, align 16
  store i256 %mload.out12874, ptr %1808, align 16
  %sp12884 = getelementptr i256, ptr %1808, i64 1
  store i256 5, ptr %sp12884, align 16
  store i256 5, ptr %1808, align 16
  store i256 %mload.out12874, ptr %sp12884, align 16
  %1810 = add i64 %len.addr.357, 3
  %sp12891 = getelementptr i256, ptr %1808, i64 2
  store i256 32, ptr %sp12891, align 16
  %dup11 = load i256, ptr %sp12867, align 16
  %sp12894 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1810
  store i256 %dup11, ptr %sp12894, align 16
  %1811 = add i256 %dup11, 32
  store i256 %1811, ptr %sp12891, align 16
  store i256 %1811, ptr %sp12884, align 16
  store i256 %mload.out12874, ptr %sp12891, align 16
  br label %OP10264.JUMPDEST

OP3822.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1812 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp12910 = getelementptr i256, ptr %1812, i64 -7
  %dup612911 = load i256, ptr %sp12910, align 16
  %sp12912 = getelementptr i256, ptr %1812, i64 -1
  store i256 %dup612911, ptr %sp12912, align 16
  %mload.out.slot12916 = alloca i256, align 16
  %1813 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup612911, ptr %mload.out.slot12916, ptr %arg.ecx.addr)
  %.not48290 = icmp eq i8 %1813, 0
  br i1 %.not48290, label %OP3825.MLOAD.contd, label %return, !prof !6

OP3825.MLOAD.contd:                               ; preds = %OP3822.JUMPDEST
  %mload.out12917 = load i256, ptr %mload.out.slot12916, align 16
  store i256 %mload.out12917, ptr %sp12912, align 16
  store i256 7232, ptr %1812, align 16
  store i256 7232, ptr %sp12912, align 16
  store i256 %mload.out12917, ptr %1812, align 16
  %sp12927 = getelementptr i256, ptr %1812, i64 1
  store i256 7, ptr %sp12927, align 16
  store i256 7, ptr %1812, align 16
  store i256 %mload.out12917, ptr %sp12927, align 16
  %1814 = add i64 %len.addr.357, 3
  %sp12934 = getelementptr i256, ptr %1812, i64 2
  store i256 32, ptr %sp12934, align 16
  %dup10 = load i256, ptr %sp12910, align 16
  %sp12937 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1814
  store i256 %dup10, ptr %sp12937, align 16
  %1815 = add i256 %dup10, 32
  store i256 %1815, ptr %sp12934, align 16
  store i256 %1815, ptr %sp12927, align 16
  store i256 %mload.out12917, ptr %sp12934, align 16
  br label %OP10264.JUMPDEST

OP3836.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1816 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp12953 = getelementptr i256, ptr %1816, i64 -1
  store i256 6, ptr %sp12953, align 16
  %1817 = add i64 %len.addr.357, 1
  store i256 6, ptr %1816, align 16
  %1818 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %1816, i8 17)
  %.not48282 = icmp eq i8 %1818, 0
  br i1 %.not48282, label %OP3841.PUSH32, label %return, !prof !6

OP3841.PUSH32:                                    ; preds = %OP3836.JUMPDEST
  %sp12961 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1817
  store i256 -256, ptr %sp12961, align 16
  %b12966 = load i256, ptr %1816, align 16
  %1819 = and i256 %b12966, -256
  store i256 %1819, ptr %1816, align 16
  store i256 255, ptr %sp12961, align 16
  %1820 = add i64 %len.addr.357, 3
  %sp12971 = getelementptr i256, ptr %1816, i64 -6
  %dup812972 = load i256, ptr %sp12971, align 16
  %sp12973 = getelementptr i256, ptr %1816, i64 2
  store i256 %dup812972, ptr %sp12973, align 16
  %1821 = and i256 %dup812972, 255
  store i256 %1821, ptr %sp12961, align 16
  %1822 = or disjoint i256 %1821, %1819
  store i256 %1822, ptr %1816, align 16
  %swap.b12990 = load i256, ptr %sp12953, align 16
  store i256 %1822, ptr %sp12953, align 16
  store i256 %swap.b12990, ptr %1816, align 16
  %1823 = add i64 %len.addr.357, -1
  %1824 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12953, i8 17)
  %.not48283 = icmp eq i8 %1824, 0
  br i1 %.not48283, label %OP3849.PUSH1, label %return, !prof !6

OP3849.PUSH1:                                     ; preds = %OP3841.PUSH32
  %sp12994 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1823
  store i256 8, ptr %sp12994, align 16
  store i256 8, ptr %1816, align 16
  %1825 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %1816, i8 17)
  %.not48284 = icmp eq i8 %1825, 0
  br i1 %.not48284, label %OP3852.PUSH32, label %return, !prof !6

OP3852.PUSH32:                                    ; preds = %OP3849.PUSH1
  store i256 -1461501637330902918203684832716283019655932542976, ptr %sp12961, align 16
  %swap.b13007 = load i256, ptr %1816, align 16
  store i256 -1461501637330902918203684832716283019655932542976, ptr %1816, align 16
  store i256 %swap.b13007, ptr %sp12961, align 16
  store i256 -1461501637330902918203684832716283019655932542976, ptr %sp12973, align 16
  %1826 = and i256 %swap.b13007, -1461501637330902918203684832716283019655932542976
  store i256 %1826, ptr %sp12961, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp12973, align 16
  %sp13021 = getelementptr i256, ptr %1816, i64 -5
  %dup813022 = load i256, ptr %sp13021, align 16
  %sp13023 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1820
  store i256 %dup813022, ptr %sp13023, align 16
  %sp13027 = getelementptr i256, ptr %1816, i64 4
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp13027, align 16
  %1827 = and i256 %dup813022, 1461501637330902918203684832716283019655932542975
  store i256 %1827, ptr %sp13023, align 16
  store i256 %1827, ptr %sp12961, align 16
  store i256 %1826, ptr %sp13023, align 16
  store i256 %1826, ptr %sp12973, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp13023, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp12961, align 16
  store i256 %1827, ptr %sp13023, align 16
  %1828 = or disjoint i256 %1827, %1826
  store i256 %1828, ptr %sp12973, align 16
  store i256 %1828, ptr %sp12961, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp12973, align 16
  %swap.b13064 = load i256, ptr %sp12953, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp12953, align 16
  store i256 %swap.b13064, ptr %sp12973, align 16
  %1829 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12961, i8 17)
  %.not48285 = icmp eq i8 %1829, 0
  br i1 %.not48285, label %OP3867.PUSH1, label %return, !prof !6

OP3867.PUSH1:                                     ; preds = %OP3852.PUSH32
  store i256 1, ptr %sp12961, align 16
  store i256 1, ptr %sp12973, align 16
  %1830 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12973, i8 17)
  %.not48286 = icmp eq i8 %1830, 0
  br i1 %.not48286, label %OP3870.DUP3, label %return, !prof !6

OP3870.DUP3:                                      ; preds = %OP3867.PUSH1
  %dup313077 = load i256, ptr %1816, align 16
  store i256 %dup313077, ptr %sp13023, align 16
  %b13083 = load i256, ptr %sp12973, align 16
  %1831 = and i256 %b13083, %dup313077
  store i256 %1831, ptr %sp12973, align 16
  %sp13086 = getelementptr i256, ptr %1816, i64 -4
  %dup713087 = load i256, ptr %sp13086, align 16
  store i256 %dup713087, ptr %sp13023, align 16
  %dup513091 = load i256, ptr %sp12953, align 16
  store i256 %dup513091, ptr %sp13027, align 16
  %1832 = and i256 %dup513091, %dup713087
  store i256 %1832, ptr %sp13023, align 16
  %1833 = or i256 %1832, %1831
  store i256 %1833, ptr %sp12973, align 16
  %swap.b13109 = load i256, ptr %sp12961, align 16
  store i256 %1833, ptr %sp12961, align 16
  store i256 %swap.b13109, ptr %sp12973, align 16
  %1834 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12961, i8 17)
  %.not48287 = icmp eq i8 %1834, 0
  br i1 %.not48287, label %OP3878.PUSH1, label %return, !prof !6

OP3878.PUSH1:                                     ; preds = %OP3870.DUP3
  store i256 2, ptr %sp12961, align 16
  store i256 2, ptr %sp12973, align 16
  %1835 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12973, i8 17)
  %.not48288 = icmp eq i8 %1835, 0
  br i1 %.not48288, label %OP3881.SWAP1, label %return, !prof !6

OP3881.SWAP1:                                     ; preds = %OP3878.PUSH1
  %swap.a13122 = load i256, ptr %sp12973, align 16
  %swap.b13124 = load i256, ptr %sp12961, align 16
  store i256 %swap.a13122, ptr %sp12961, align 16
  store i256 %swap.b13124, ptr %sp12973, align 16
  %swap.b13129 = load i256, ptr %1816, align 16
  store i256 %swap.b13124, ptr %1816, align 16
  store i256 %swap.b13129, ptr %sp12973, align 16
  %1836 = and i256 %swap.b13129, %swap.a13122
  store i256 %1836, ptr %sp12961, align 16
  %swap.b13140 = load i256, ptr %sp12953, align 16
  store i256 %1836, ptr %sp12953, align 16
  store i256 %swap.b13140, ptr %sp12961, align 16
  %sp13142 = getelementptr i256, ptr %1816, i64 -3
  %dup513143 = load i256, ptr %sp13142, align 16
  store i256 %dup513143, ptr %sp12973, align 16
  %1837 = and i256 %dup513143, %swap.b13140
  store i256 %1837, ptr %sp12961, align 16
  store i256 %1837, ptr %sp12953, align 16
  store i256 %1836, ptr %sp12961, align 16
  store i256 %1836, ptr %1816, align 16
  store i256 %swap.b13124, ptr %sp12961, align 16
  store i256 %swap.b13124, ptr %sp12953, align 16
  store i256 %1837, ptr %sp12961, align 16
  %1838 = or i256 %1837, %1836
  store i256 %1838, ptr %1816, align 16
  store i256 %1838, ptr %sp12953, align 16
  store i256 %swap.b13124, ptr %1816, align 16
  %1839 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp12953, i8 17)
  %.not48289 = icmp eq i8 %1839, 0
  br i1 %.not48289, label %OP3893.PUSH2, label %return, !prof !6

OP3893.PUSH2:                                     ; preds = %OP3881.SWAP1
  store i256 7386, ptr %sp12994, align 16
  %sp13182 = getelementptr i256, ptr %1816, i64 -2
  br label %OP7770.JUMPDEST.sink.split

OP3897.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1840 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp13190 = getelementptr i256, ptr %1840, i64 -2
  store i256 8, ptr %sp13190, align 16
  %sp13194 = getelementptr i256, ptr %1840, i64 -1
  store i256 8, ptr %sp13194, align 16
  %1841 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13194, i8 17)
  %.not48280 = icmp eq i8 %1841, 0
  br i1 %.not48280, label %OP3903.PUSH32, label %return, !prof !6

OP3903.PUSH32:                                    ; preds = %OP3897.JUMPDEST
  store i256 -372682917519380244141939632342652170012262798458881, ptr %1840, align 16
  %b13203 = load i256, ptr %sp13194, align 16
  %1842 = and i256 %b13203, -372682917519380244141939632342652170012262798458881
  store i256 %1842, ptr %sp13194, align 16
  store i256 1461501637330902918203684832716283019655932542976, ptr %1840, align 16
  %1843 = or disjoint i256 %1842, 1461501637330902918203684832716283019655932542976
  store i256 %1843, ptr %sp13194, align 16
  %swap.b13217 = load i256, ptr %sp13190, align 16
  store i256 %1843, ptr %sp13190, align 16
  store i256 %swap.b13217, ptr %sp13194, align 16
  %1844 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13190, i8 17)
  %.not48281 = icmp eq i8 %1844, 0
  br i1 %.not48281, label %OP3909.POP, label %return.loopexit52642.split.loop.exit53120, !prof !6

OP3909.POP:                                       ; preds = %OP3903.PUSH32
  %1845 = add i64 %len.addr.357, -9
  %sp13227 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1845
  %a13228 = load i256, ptr %sp13227, align 16
  br label %dynamic_jump_table.backedge

OP3916.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1110.JUMPDEST
  %len.addr.172 = phi i64 [ %557, %OP1110.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1846 = add i64 %len.addr.172, 1
  %sp13231 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.172
  store i256 8, ptr %sp13231, align 16
  %1847 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13231, i8 17)
  %.not48423 = icmp eq i8 %1847, 0
  br i1 %.not48423, label %OP3919.PUSH20, label %return, !prof !6

OP3919.PUSH20:                                    ; preds = %OP3916.JUMPDEST
  %sp13235 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1846
  %b13240 = load i256, ptr %sp13231, align 16
  %1848 = and i256 %b13240, 1461501637330902918203684832716283019655932542975
  store i256 %1848, ptr %sp13231, align 16
  %sp13243 = getelementptr i256, ptr %sp13231, i64 -1
  %dup213244 = load i256, ptr %sp13243, align 16
  store i256 %dup213244, ptr %sp13235, align 16
  br label %dynamic_jump_table.preheader

OP3923.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1133.JUMPDEST
  %len.addr.173 = phi i64 [ %568, %OP1133.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp13251 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.173
  store i256 0, ptr %sp13251, align 16
  %1849 = add i64 %len.addr.173, 2
  %sp13253 = getelementptr i256, ptr %sp13251, i64 1
  store i256 7497, ptr %sp13253, align 16
  br label %OP7788.JUMPDEST

OP3928.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1850 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp13257 = getelementptr i256, ptr %1850, i64 -1
  %swap.a13258 = load i256, ptr %sp13257, align 16
  %sp13259 = getelementptr i256, ptr %1850, i64 -2
  %swap.b13260 = load i256, ptr %sp13259, align 16
  store i256 %swap.a13258, ptr %sp13259, align 16
  store i256 %swap.b13260, ptr %sp13257, align 16
  %sp13265 = getelementptr i256, ptr %1850, i64 -3
  %swap.b13266 = load i256, ptr %sp13265, align 16
  store i256 %swap.a13258, ptr %sp13265, align 16
  store i256 %swap.b13266, ptr %sp13259, align 16
  %1851 = add i64 %len.addr.357, -2
  br label %dynamic_jump_table.backedge

OP3933.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1137.JUMPDEST
  %len.addr.174 = phi i64 [ %569, %OP1137.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1852 = add i64 %len.addr.174, 1
  %sp13272 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.174
  store i256 14, ptr %sp13272, align 16
  %1853 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13272, i8 17)
  %.not48749 = icmp eq i8 %1853, 0
  br i1 %.not48749, label %OP3936.PUSH20, label %return, !prof !6

OP3936.PUSH20:                                    ; preds = %OP3933.JUMPDEST
  %sp13276 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1852
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp13276, align 16
  %b13281 = load i256, ptr %sp13272, align 16
  %1854 = and i256 %b13281, 1461501637330902918203684832716283019655932542975
  %sp13286 = getelementptr i256, ptr %sp13272, i64 -1
  %swap.b13287 = load i256, ptr %sp13286, align 16
  store i256 %1854, ptr %sp13286, align 16
  store i256 %swap.b13287, ptr %sp13272, align 16
  br label %dynamic_jump_table.preheader

OP3940.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1156.JUMPDEST
  %len.addr.175 = phi i64 [ %len.addr.51, %OP1156.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1855 = add i64 %len.addr.175, 1
  %sp13293 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.175
  store i256 1, ptr %sp13293, align 16
  %1856 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13293, i8 17)
  %.not48727 = icmp eq i8 %1856, 0
  br i1 %.not48727, label %OP3943.PUSH1, label %return, !prof !6

OP3943.PUSH1:                                     ; preds = %OP3940.JUMPDEST
  %sp13297 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1855
  %swap.b13302 = load i256, ptr %sp13293, align 16
  store i256 0, ptr %sp13293, align 16
  %1857 = add i64 %len.addr.175, 3
  %sp13304 = getelementptr i256, ptr %sp13293, i64 2
  store i256 255, ptr %sp13304, align 16
  %1858 = and i256 %swap.b13302, 372682917519380244141939632342652170012262798458880
  %1859 = icmp eq i256 %1858, 0
  %1860 = zext i1 %1859 to i256
  store i256 %1860, ptr %sp13297, align 16
  br i1 %1859, label %OP3984.JUMPDEST, label %OP3953.PUSH1

OP3953.PUSH1:                                     ; preds = %OP3943.PUSH1
  store i256 64, ptr %sp13297, align 16
  store i256 64, ptr %sp13304, align 16
  %mload.out.slot13340 = alloca i256, align 16
  %1861 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13340, ptr %arg.ecx.addr)
  %.not48728 = icmp eq i8 %1861, 0
  br i1 %.not48728, label %OP3955.MLOAD.contd, label %return, !prof !6

OP3955.MLOAD.contd:                               ; preds = %OP3953.PUSH1
  %mload.out13341 = load i256, ptr %mload.out.slot13340, align 16
  store i256 %mload.out13341, ptr %sp13304, align 16
  %sp13344 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1857
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp13344, align 16
  %sp13348 = getelementptr i256, ptr %sp13293, i64 4
  store i256 %mload.out13341, ptr %sp13348, align 16
  %1862 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out13341, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48729 = icmp eq i8 %1862, 0
  br i1 %.not48729, label %OP3959.PUSH1, label %return, !prof !6

OP3959.PUSH1:                                     ; preds = %OP3955.MLOAD.contd
  store i256 32, ptr %sp13344, align 16
  %dup313360 = load i256, ptr %sp13304, align 16
  %sp13361 = getelementptr i256, ptr %sp13293, i64 5
  store i256 %dup313360, ptr %sp13361, align 16
  %1863 = add i256 %dup313360, 4
  store i256 %1863, ptr %sp13348, align 16
  %1864 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1863, i256 32, ptr %arg.ecx.addr)
  %.not48730 = icmp eq i8 %1864, 0
  br i1 %.not48730, label %OP3964.PUSH1, label %return, !prof !6

OP3964.PUSH1:                                     ; preds = %OP3959.PUSH1
  store i256 16, ptr %sp13344, align 16
  %dup313379 = load i256, ptr %sp13304, align 16
  store i256 %dup313379, ptr %sp13361, align 16
  %1865 = add i256 %dup313379, 36
  store i256 %1865, ptr %sp13348, align 16
  %1866 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1865, i256 16, ptr %arg.ecx.addr)
  %.not48731 = icmp eq i8 %1866, 0
  br i1 %.not48731, label %OP3969.PUSH32, label %return, !prof !6

OP3969.PUSH32:                                    ; preds = %OP3964.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp13344, align 16
  %dup313398 = load i256, ptr %sp13304, align 16
  store i256 %dup313398, ptr %sp13361, align 16
  %1867 = add i256 %dup313398, 68
  store i256 %1867, ptr %sp13348, align 16
  %1868 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1867, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48732 = icmp eq i8 %1868, 0
  br i1 %.not48732, label %OP3974.SWAP1, label %return, !prof !6

OP3974.SWAP1:                                     ; preds = %OP3969.PUSH32
  %swap.a13413 = load i256, ptr %sp13304, align 16
  %swap.b13415 = load i256, ptr %sp13297, align 16
  store i256 %swap.a13413, ptr %sp13297, align 16
  store i256 %swap.b13415, ptr %sp13304, align 16
  %mload.out.slot13419 = alloca i256, align 16
  %1869 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b13415, ptr %mload.out.slot13419, ptr %arg.ecx.addr)
  %.not48733 = icmp eq i8 %1869, 0
  br i1 %.not48733, label %OP3975.MLOAD.contd, label %return, !prof !6

OP3975.MLOAD.contd:                               ; preds = %OP3974.SWAP1
  %mload.out13420 = load i256, ptr %mload.out.slot13419, align 16
  %swap.b13426 = load i256, ptr %sp13297, align 16
  %1870 = sub i256 %swap.b13426, %mload.out13420
  store i256 100, ptr %sp13344, align 16
  %1871 = add i256 %1870, 100
  store i256 %1871, ptr %sp13297, align 16
  store i256 %mload.out13420, ptr %sp13304, align 16
  %1872 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13297, i8 16)
  %.not48734 = icmp eq i8 %1872, 0
  %spec.select36598 = select i1 %.not48734, i8 16, i8 %1872, !prof !6
  br label %return

OP3984.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3943.PUSH1
  %len.addr.176 = phi i64 [ %1855, %OP3943.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp13459 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.176
  store i256 4971, ptr %sp13459, align 16
  %contract.caller.addr13461 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller13462 = load i160, ptr %contract.caller.addr13461, align 16
  %1873 = tail call i160 @llvm.bswap.i160(i160 %contract.caller13462)
  %1874 = zext i160 %1873 to i256
  %sp13463 = getelementptr i256, ptr %sp13459, i64 1
  store i256 %1874, ptr %sp13463, align 16
  %sp13465 = getelementptr i256, ptr %sp13459, i64 -3
  %dup513466 = load i256, ptr %sp13465, align 16
  %sp13467 = getelementptr i256, ptr %sp13459, i64 2
  store i256 %dup513466, ptr %sp13467, align 16
  %1875 = add i64 %len.addr.176, 4
  %sp13469 = getelementptr i256, ptr %sp13459, i64 -2
  %dup513470 = load i256, ptr %sp13469, align 16
  %sp13471 = getelementptr i256, ptr %sp13459, i64 3
  store i256 %dup513470, ptr %sp13471, align 16
  br label %OP7929.JUMPDEST

OP3991.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1168.JUMPDEST
  %len.addr.177 = phi i64 [ %582, %OP1168.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1876 = add i64 %len.addr.177, 1
  %sp13475 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.177
  store i256 1, ptr %sp13475, align 16
  %1877 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13475, i8 17)
  %.not48714 = icmp eq i8 %1877, 0
  br i1 %.not48714, label %OP3994.PUSH20, label %return, !prof !6

OP3994.PUSH20:                                    ; preds = %OP3991.JUMPDEST
  %1878 = add i64 %len.addr.177, 2
  %sp13479 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1876
  %b13484 = load i256, ptr %sp13475, align 16
  %contract.caller.addr13487 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller13488 = load i160, ptr %contract.caller.addr13487, align 16
  %1879 = tail call i160 @llvm.bswap.i160(i160 %contract.caller13488)
  %1880 = zext i160 %1879 to i256
  store i256 %1880, ptr %sp13479, align 16
  %1881 = trunc i256 %b13484 to i160
  %1882 = icmp eq i160 %1879, %1881
  %1883 = zext i1 %1882 to i256
  store i256 %1883, ptr %sp13475, align 16
  br i1 %1882, label %OP4038.JUMPDEST, label %OP4000.PUSH1

OP4000.PUSH1:                                     ; preds = %OP3994.PUSH20
  store i256 64, ptr %sp13475, align 16
  %mload.out.slot13504 = alloca i256, align 16
  %1884 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13504, ptr %arg.ecx.addr)
  %.not48715 = icmp eq i8 %1884, 0
  br i1 %.not48715, label %OP4001.MLOAD.contd, label %return, !prof !6

OP4001.MLOAD.contd:                               ; preds = %OP4000.PUSH1
  %mload.out13505 = load i256, ptr %mload.out.slot13504, align 16
  store i256 %mload.out13505, ptr %sp13475, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp13479, align 16
  %1885 = add i64 %len.addr.177, 3
  %sp13512 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1878
  store i256 %mload.out13505, ptr %sp13512, align 16
  %1886 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out13505, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48716 = icmp eq i8 %1886, 0
  br i1 %.not48716, label %OP4005.PUSH1, label %return, !prof !6

OP4005.PUSH1:                                     ; preds = %OP4001.MLOAD.contd
  %b13524 = load i256, ptr %sp13475, align 16
  %1887 = add i256 %b13524, 4
  store i256 %1887, ptr %sp13475, align 16
  store i256 %1887, ptr %sp13479, align 16
  %sp13535 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1885
  %1888 = add i256 %b13524, 36
  store i256 %1888, ptr %sp13512, align 16
  %sp13549 = getelementptr i256, ptr %sp13475, i64 4
  store i256 32, ptr %sp13535, align 16
  store i256 %1887, ptr %sp13549, align 16
  %1889 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1887, i256 32, ptr %arg.ecx.addr)
  %.not48717 = icmp eq i8 %1889, 0
  br i1 %.not48717, label %OP4016.PUSH1, label %return, !prof !6

OP4016.PUSH1:                                     ; preds = %OP4005.PUSH1
  store i256 34, ptr %sp13535, align 16
  %dup213569 = load i256, ptr %sp13512, align 16
  store i256 %dup213569, ptr %sp13549, align 16
  %1890 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup213569, i256 34, ptr %arg.ecx.addr)
  %.not48718 = icmp eq i8 %1890, 0
  br i1 %.not48718, label %OP4019.PUSH1, label %return, !prof !6

OP4019.PUSH1:                                     ; preds = %OP4016.PUSH1
  %b13582 = load i256, ptr %sp13512, align 16
  %1891 = add i256 %b13582, 32
  store i256 %1891, ptr %sp13512, align 16
  store i256 23088, ptr %sp13549, align 16
  %sp13591 = getelementptr i256, ptr %sp13475, i64 5
  store i256 34, ptr %sp13535, align 16
  store i256 %1891, ptr %sp13591, align 16
  %1892 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13535)
  %.not48719 = icmp eq i8 %1892, 0
  br i1 %.not48719, label %OP4026.PUSH1, label %return, !prof !6

OP4026.PUSH1:                                     ; preds = %OP4019.PUSH1
  store i256 64, ptr %sp13535, align 16
  %b13605 = load i256, ptr %sp13512, align 16
  %1893 = add i256 %b13605, 64
  %swap.b13611 = load i256, ptr %sp13475, align 16
  store i256 %1893, ptr %sp13475, align 16
  store i256 %swap.b13611, ptr %sp13512, align 16
  store i256 64, ptr %sp13479, align 16
  %mload.out.slot13619 = alloca i256, align 16
  %1894 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13619, ptr %arg.ecx.addr)
  %.not48720 = icmp eq i8 %1894, 0
  br i1 %.not48720, label %OP4032.MLOAD.contd, label %return, !prof !6

OP4032.MLOAD.contd:                               ; preds = %OP4026.PUSH1
  %mload.out13620 = load i256, ptr %mload.out.slot13619, align 16
  %swap.b13630 = load i256, ptr %sp13475, align 16
  store i256 %swap.b13630, ptr %sp13512, align 16
  %1895 = sub i256 %swap.b13630, %mload.out13620
  store i256 %1895, ptr %sp13475, align 16
  store i256 %mload.out13620, ptr %sp13479, align 16
  %1896 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13475, i8 16)
  %.not48721 = icmp eq i8 %1896, 0
  %spec.select36599 = select i1 %.not48721, i8 16, i8 %1896, !prof !6
  br label %return

OP4038.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54094 = add i64 %len.addr.357, 1
  %.pre54233 = add i64 %len.addr.357, 2
  br label %OP4038.JUMPDEST

OP4038.JUMPDEST:                                  ; preds = %OP4038.JUMPDEST.loopexit, %OP3994.PUSH20
  %.pre-phi54234 = phi i64 [ %.pre54233, %OP4038.JUMPDEST.loopexit ], [ %1878, %OP3994.PUSH20 ]
  %.pre-phi54095 = phi i64 [ %.pre54094, %OP4038.JUMPDEST.loopexit ], [ %1876, %OP3994.PUSH20 ]
  %len.addr.178 = phi i64 [ %len.addr.357, %OP4038.JUMPDEST.loopexit ], [ %len.addr.177, %OP3994.PUSH20 ]
  %sp13646 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.178
  store i256 1, ptr %sp13646, align 16
  %sp13650 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54095
  store i256 1, ptr %sp13650, align 16
  %1897 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13650, i8 17)
  %.not48722 = icmp eq i8 %1897, 0
  br i1 %.not48722, label %OP4042.PUSH32, label %return, !prof !6

OP4042.PUSH32:                                    ; preds = %OP4038.JUMPDEST
  %sp13654 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54234
  store i256 -372682917519380244141939632342652170012262798458881, ptr %sp13654, align 16
  %b13659 = load i256, ptr %sp13650, align 16
  %1898 = and i256 %b13659, -372682917519380244141939632342652170012262798458881
  store i256 %1898, ptr %sp13650, align 16
  %swap.b13665 = load i256, ptr %sp13646, align 16
  store i256 %1898, ptr %sp13646, align 16
  store i256 %swap.b13665, ptr %sp13650, align 16
  %1899 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13646, i8 17)
  %.not48723 = icmp eq i8 %1899, 0
  br i1 %.not48723, label %OP4046.PUSH1, label %return, !prof !6

OP4046.PUSH1:                                     ; preds = %OP4042.PUSH32
  store i256 64, ptr %sp13646, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !459)
  %ecx.memory.addr.i49878 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49879 = load ptr, ptr %ecx.memory.addr.i49878, align 8, !alias.scope !459, !noalias !462
  %ecx.memory.len.addr.i49880 = getelementptr inbounds i8, ptr %ecx.memory.i49879, i64 16
  %ecx.memory.len.i49881 = load i64, ptr %ecx.memory.len.addr.i49880, align 8, !noalias !464
  %ecx.memory.last_checkpoint.addr.i49882 = getelementptr inbounds i8, ptr %ecx.memory.i49879, i64 48
  %ecx.memory.last_checkpoint.i49883 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49882, align 8, !noalias !464
  %1900 = sub i64 %ecx.memory.len.i49881, %ecx.memory.last_checkpoint.i49883
  %1901 = icmp ult i64 %1900, 96
  br i1 %1901, label %resize.i49891, label %OP4047.MLOAD.contd, !prof !5

resize.i49891:                                    ; preds = %OP4046.PUSH1
  %1902 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !462
  %.not.i49892 = icmp eq i8 %1902, 0
  br i1 %.not.i49892, label %OP4047.MLOAD.contd, label %return, !prof !6

OP4047.MLOAD.contd:                               ; preds = %OP4046.PUSH1, %resize.i49891
  %ecx.memory.buffer.ptr.shared.addr.i49885 = getelementptr inbounds i8, ptr %ecx.memory.i49879, i64 8
  %ecx.memory.buffer.ptr.shared.i49886 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49885, align 8, !noalias !464
  %ecx.memory.buffer.ptr.i49887 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49886, i64 %ecx.memory.last_checkpoint.i49883
  %slot.i49888 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49887, i64 64
  %slot.value.i49889 = load i256, ptr %slot.i49888, align 1, !noalias !464
  %1903 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i49889)
  store i256 54287302177461373232454726096299752804412204920993423797712548641952624696115, ptr %sp13646, align 16
  store i256 0, ptr %sp13650, align 16
  store i256 %1903, ptr %sp13654, align 16
  %1904 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13646, i8 1)
  %.not48725 = icmp eq i8 %1904, 0
  br i1 %.not48725, label %OP4053.JUMP, label %return, !prof !6

OP4053.JUMP:                                      ; preds = %OP4047.MLOAD.contd
  %1905 = add i64 %len.addr.178, -1
  %sp13693 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1905
  %a13694 = load i256, ptr %sp13693, align 16
  br label %dynamic_jump_table.preheader

OP4054.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1187.JUMPDEST
  %len.addr.179 = phi i64 [ %len.addr.54, %OP1187.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1906 = add i64 %len.addr.179, 1
  %sp13697 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.179
  store i256 1, ptr %sp13697, align 16
  %1907 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13697, i8 17)
  %.not48694 = icmp eq i8 %1907, 0
  br i1 %.not48694, label %OP4057.PUSH1, label %return, !prof !6

OP4057.PUSH1:                                     ; preds = %OP4054.JUMPDEST
  %sp13701 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1906
  %swap.b13706 = load i256, ptr %sp13697, align 16
  store i256 0, ptr %sp13697, align 16
  %1908 = add i64 %len.addr.179, 3
  %sp13708 = getelementptr i256, ptr %sp13697, i64 2
  store i256 255, ptr %sp13708, align 16
  %1909 = and i256 %swap.b13706, 372682917519380244141939632342652170012262798458880
  %1910 = icmp eq i256 %1909, 0
  %1911 = zext i1 %1910 to i256
  store i256 %1911, ptr %sp13701, align 16
  br i1 %1910, label %OP4098.JUMPDEST, label %OP4067.PUSH1

OP4067.PUSH1:                                     ; preds = %OP4057.PUSH1
  store i256 64, ptr %sp13701, align 16
  store i256 64, ptr %sp13708, align 16
  %mload.out.slot13744 = alloca i256, align 16
  %1912 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13744, ptr %arg.ecx.addr)
  %.not48695 = icmp eq i8 %1912, 0
  br i1 %.not48695, label %OP4069.MLOAD.contd, label %return, !prof !6

OP4069.MLOAD.contd:                               ; preds = %OP4067.PUSH1
  %mload.out13745 = load i256, ptr %mload.out.slot13744, align 16
  store i256 %mload.out13745, ptr %sp13708, align 16
  %sp13748 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1908
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp13748, align 16
  %sp13752 = getelementptr i256, ptr %sp13697, i64 4
  store i256 %mload.out13745, ptr %sp13752, align 16
  %1913 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out13745, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48696 = icmp eq i8 %1913, 0
  br i1 %.not48696, label %OP4073.PUSH1, label %return, !prof !6

OP4073.PUSH1:                                     ; preds = %OP4069.MLOAD.contd
  store i256 32, ptr %sp13748, align 16
  %dup313764 = load i256, ptr %sp13708, align 16
  %sp13765 = getelementptr i256, ptr %sp13697, i64 5
  store i256 %dup313764, ptr %sp13765, align 16
  %1914 = add i256 %dup313764, 4
  store i256 %1914, ptr %sp13752, align 16
  %1915 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1914, i256 32, ptr %arg.ecx.addr)
  %.not48697 = icmp eq i8 %1915, 0
  br i1 %.not48697, label %OP4078.PUSH1, label %return, !prof !6

OP4078.PUSH1:                                     ; preds = %OP4073.PUSH1
  store i256 16, ptr %sp13748, align 16
  %dup313783 = load i256, ptr %sp13708, align 16
  store i256 %dup313783, ptr %sp13765, align 16
  %1916 = add i256 %dup313783, 36
  store i256 %1916, ptr %sp13752, align 16
  %1917 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1916, i256 16, ptr %arg.ecx.addr)
  %.not48698 = icmp eq i8 %1917, 0
  br i1 %.not48698, label %OP4083.PUSH32, label %return, !prof !6

OP4083.PUSH32:                                    ; preds = %OP4078.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp13748, align 16
  %dup313802 = load i256, ptr %sp13708, align 16
  store i256 %dup313802, ptr %sp13765, align 16
  %1918 = add i256 %dup313802, 68
  store i256 %1918, ptr %sp13752, align 16
  %1919 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1918, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48699 = icmp eq i8 %1919, 0
  br i1 %.not48699, label %OP4088.SWAP1, label %return, !prof !6

OP4088.SWAP1:                                     ; preds = %OP4083.PUSH32
  %swap.a13817 = load i256, ptr %sp13708, align 16
  %swap.b13819 = load i256, ptr %sp13701, align 16
  store i256 %swap.a13817, ptr %sp13701, align 16
  store i256 %swap.b13819, ptr %sp13708, align 16
  %mload.out.slot13823 = alloca i256, align 16
  %1920 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b13819, ptr %mload.out.slot13823, ptr %arg.ecx.addr)
  %.not48700 = icmp eq i8 %1920, 0
  br i1 %.not48700, label %OP4089.MLOAD.contd, label %return, !prof !6

OP4089.MLOAD.contd:                               ; preds = %OP4088.SWAP1
  %mload.out13824 = load i256, ptr %mload.out.slot13823, align 16
  %swap.b13830 = load i256, ptr %sp13701, align 16
  %1921 = sub i256 %swap.b13830, %mload.out13824
  store i256 100, ptr %sp13748, align 16
  %1922 = add i256 %1921, 100
  store i256 %1922, ptr %sp13701, align 16
  store i256 %mload.out13824, ptr %sp13708, align 16
  %1923 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13701, i8 16)
  %.not48701 = icmp eq i8 %1923, 0
  %spec.select36600 = select i1 %.not48701, i8 16, i8 %1923, !prof !6
  br label %return

OP4098.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4057.PUSH1
  %len.addr.180 = phi i64 [ %1906, %OP4057.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %1924 = add i64 %len.addr.180, 1
  %contract.caller.addr13863 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller13864 = load i160, ptr %contract.caller.addr13863, align 16
  %1925 = tail call i160 @llvm.bswap.i160(i160 %contract.caller13864)
  %1926 = zext i160 %1925 to i256
  %sp13865 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.180
  %1927 = add i64 %len.addr.180, 2
  %sp13867 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1924
  store i256 0, ptr %sp13865, align 16
  store i256 %1926, ptr %sp13867, align 16
  %1928 = add i64 %len.addr.180, 3
  %sp13876 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1927
  store i256 0, ptr %sp13876, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !465)
  %ecx.memory.addr.i49894 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49895 = load ptr, ptr %ecx.memory.addr.i49894, align 8, !alias.scope !465
  %ecx.memory.len.addr.i49896 = getelementptr inbounds i8, ptr %ecx.memory.i49895, i64 16
  %ecx.memory.len.i49897 = load i64, ptr %ecx.memory.len.addr.i49896, align 8, !noalias !465
  %ecx.memory.last_checkpoint.addr.i49898 = getelementptr inbounds i8, ptr %ecx.memory.i49895, i64 48
  %ecx.memory.last_checkpoint.i49899 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49898, align 8, !noalias !465
  %1929 = sub i64 %ecx.memory.len.i49897, %ecx.memory.last_checkpoint.i49899
  %1930 = icmp ult i64 %1929, 32
  br i1 %1930, label %resize.i49905, label %OP4104.PUSH1, !prof !5

resize.i49905:                                    ; preds = %OP4098.JUMPDEST
  %1931 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i49906 = icmp eq i8 %1931, 0
  br i1 %.not.i49906, label %OP4104.PUSH1, label %return, !prof !6

OP4104.PUSH1:                                     ; preds = %OP4098.JUMPDEST, %resize.i49905
  %ecx.memory.buffer.ptr.shared.addr.i49901 = getelementptr inbounds i8, ptr %ecx.memory.i49895, i64 8
  %ecx.memory.buffer.ptr.shared.i49902 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49901, align 8, !noalias !465
  %ecx.memory.buffer.ptr.i49903 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49902, i64 %ecx.memory.last_checkpoint.i49899
  %1932 = tail call i256 @llvm.bswap.i256(i256 %1926)
  store i256 %1932, ptr %ecx.memory.buffer.ptr.i49903, align 1, !noalias !465
  store i256 12, ptr %sp13867, align 16
  store i256 32, ptr %sp13876, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !468)
  %ecx.memory.i49909 = load ptr, ptr %ecx.memory.addr.i49894, align 8, !alias.scope !468
  %ecx.memory.len.addr.i49910 = getelementptr inbounds i8, ptr %ecx.memory.i49909, i64 16
  %ecx.memory.len.i49911 = load i64, ptr %ecx.memory.len.addr.i49910, align 8, !noalias !468
  %ecx.memory.last_checkpoint.addr.i49912 = getelementptr inbounds i8, ptr %ecx.memory.i49909, i64 48
  %ecx.memory.last_checkpoint.i49913 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49912, align 8, !noalias !468
  %1933 = sub i64 %ecx.memory.len.i49911, %ecx.memory.last_checkpoint.i49913
  %1934 = icmp ult i64 %1933, 64
  br i1 %1934, label %resize.i49920, label %OP4107.PUSH1, !prof !5

resize.i49920:                                    ; preds = %OP4104.PUSH1
  %1935 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i49921 = icmp eq i8 %1935, 0
  br i1 %.not.i49921, label %OP4107.PUSH1, label %return, !prof !6

OP4107.PUSH1:                                     ; preds = %OP4104.PUSH1, %resize.i49920
  %ecx.memory.buffer.ptr.shared.addr.i49915 = getelementptr inbounds i8, ptr %ecx.memory.i49909, i64 8
  %ecx.memory.buffer.ptr.shared.i49916 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49915, align 8, !noalias !468
  %ecx.memory.buffer.ptr.i49917 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49916, i64 %ecx.memory.last_checkpoint.i49913
  %slot.i49918 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49917, i64 32
  store i256 5427754182999196660479889922282245680622030531201901439349574250370927951872, ptr %slot.i49918, align 1, !noalias !468
  %swap.b13897 = load i256, ptr %sp13865, align 16
  store i256 64, ptr %sp13865, align 16
  store i256 %swap.b13897, ptr %sp13867, align 16
  %1936 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13865)
  %.not48704 = icmp eq i8 %1936, 0
  br i1 %.not48704, label %OP4110.SLOAD, label %return, !prof !6

OP4110.SLOAD:                                     ; preds = %OP4107.PUSH1
  %1937 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13865, i8 17)
  %.not48705 = icmp eq i8 %1937, 0
  br i1 %.not48705, label %OP4111.PUSH1, label %return, !prof !6

OP4111.PUSH1:                                     ; preds = %OP4110.SLOAD
  store i256 255, ptr %sp13867, align 16
  %b13908 = load i256, ptr %sp13865, align 16
  %1938 = and i256 %b13908, 255
  store i256 %1938, ptr %sp13865, align 16
  %.not48706 = icmp eq i256 %1938, 0
  br i1 %.not48706, label %OP4115.PUSH1, label %OP4153.JUMPDEST

OP4115.PUSH1:                                     ; preds = %OP4111.PUSH1
  store i256 64, ptr %sp13865, align 16
  %mload.out.slot13918 = alloca i256, align 16
  %1939 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot13918, ptr %arg.ecx.addr)
  %.not48707 = icmp eq i8 %1939, 0
  br i1 %.not48707, label %OP4116.MLOAD.contd, label %return, !prof !6

OP4116.MLOAD.contd:                               ; preds = %OP4115.PUSH1
  %mload.out13919 = load i256, ptr %mload.out.slot13918, align 16
  store i256 %mload.out13919, ptr %sp13865, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp13867, align 16
  store i256 %mload.out13919, ptr %sp13876, align 16
  %1940 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out13919, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48708 = icmp eq i8 %1940, 0
  br i1 %.not48708, label %OP4120.PUSH1, label %return, !prof !6

OP4120.PUSH1:                                     ; preds = %OP4116.MLOAD.contd
  %b13938 = load i256, ptr %sp13865, align 16
  %1941 = add i256 %b13938, 4
  store i256 %1941, ptr %sp13865, align 16
  store i256 %1941, ptr %sp13867, align 16
  %sp13949 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1928
  %1942 = add i256 %b13938, 36
  store i256 %1942, ptr %sp13876, align 16
  %sp13963 = getelementptr i256, ptr %sp13865, i64 4
  store i256 32, ptr %sp13949, align 16
  store i256 %1941, ptr %sp13963, align 16
  %1943 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1941, i256 32, ptr %arg.ecx.addr)
  %.not48709 = icmp eq i8 %1943, 0
  br i1 %.not48709, label %OP4131.PUSH1, label %return, !prof !6

OP4131.PUSH1:                                     ; preds = %OP4120.PUSH1
  store i256 33, ptr %sp13949, align 16
  %dup213983 = load i256, ptr %sp13876, align 16
  store i256 %dup213983, ptr %sp13963, align 16
  %1944 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup213983, i256 33, ptr %arg.ecx.addr)
  %.not48710 = icmp eq i8 %1944, 0
  br i1 %.not48710, label %OP4134.PUSH1, label %return, !prof !6

OP4134.PUSH1:                                     ; preds = %OP4131.PUSH1
  %b13996 = load i256, ptr %sp13876, align 16
  %1945 = add i256 %b13996, 32
  store i256 %1945, ptr %sp13876, align 16
  store i256 22688, ptr %sp13963, align 16
  %sp14005 = getelementptr i256, ptr %sp13865, i64 5
  store i256 33, ptr %sp13949, align 16
  store i256 %1945, ptr %sp14005, align 16
  %1946 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13949)
  %.not48711 = icmp eq i8 %1946, 0
  br i1 %.not48711, label %OP4141.PUSH1, label %return, !prof !6

OP4141.PUSH1:                                     ; preds = %OP4134.PUSH1
  store i256 64, ptr %sp13949, align 16
  %b14019 = load i256, ptr %sp13876, align 16
  %1947 = add i256 %b14019, 64
  %swap.b14025 = load i256, ptr %sp13865, align 16
  store i256 %1947, ptr %sp13865, align 16
  store i256 %swap.b14025, ptr %sp13876, align 16
  store i256 64, ptr %sp13867, align 16
  %mload.out.slot14033 = alloca i256, align 16
  %1948 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14033, ptr %arg.ecx.addr)
  %.not48712 = icmp eq i8 %1948, 0
  br i1 %.not48712, label %OP4147.MLOAD.contd, label %return, !prof !6

OP4147.MLOAD.contd:                               ; preds = %OP4141.PUSH1
  %mload.out14034 = load i256, ptr %mload.out.slot14033, align 16
  %swap.b14044 = load i256, ptr %sp13865, align 16
  store i256 %swap.b14044, ptr %sp13876, align 16
  %1949 = sub i256 %swap.b14044, %mload.out14034
  store i256 %1949, ptr %sp13865, align 16
  store i256 %mload.out14034, ptr %sp13867, align 16
  %1950 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp13865, i8 16)
  %.not48713 = icmp eq i8 %1950, 0
  %spec.select36601 = select i1 %.not48713, i8 16, i8 %1950, !prof !6
  br label %return

OP4153.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.caller14061.pre = load i160, ptr %contract.caller.addr16198, align 16
  %.pre54235 = tail call i160 @llvm.bswap.i160(i160 %contract.caller14061.pre)
  %.pre54237 = zext i160 %.pre54235 to i256
  %.pre54239 = add i64 %len.addr.357, 3
  br label %OP4153.JUMPDEST

OP4153.JUMPDEST:                                  ; preds = %OP4153.JUMPDEST.loopexit, %OP4111.PUSH1
  %.pre-phi54240 = phi i64 [ %.pre54239, %OP4153.JUMPDEST.loopexit ], [ %1928, %OP4111.PUSH1 ]
  %.pre-phi54238 = phi i256 [ %.pre54237, %OP4153.JUMPDEST.loopexit ], [ %1926, %OP4111.PUSH1 ]
  %len.addr.181 = phi i64 [ %len.addr.357, %OP4153.JUMPDEST.loopexit ], [ %len.addr.180, %OP4111.PUSH1 ]
  %sp14062 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.181
  store i256 %.pre-phi54238, ptr %sp14062, align 16
  %sp14064 = getelementptr i256, ptr %sp14062, i64 1
  store i256 8132, ptr %sp14064, align 16
  %sp14068 = getelementptr i256, ptr %sp14062, i64 2
  store i256 %.pre-phi54238, ptr %sp14068, align 16
  br label %OP7491.JUMPDEST

OP4159.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1951 = add i64 %len.addr.357, -1
  %sp14072 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1951
  %a14073 = load i256, ptr %sp14072, align 16
  %1952 = icmp eq i256 %a14073, 0
  %1953 = zext i1 %1952 to i256
  store i256 %1953, ptr %sp14072, align 16
  br i1 %1952, label %OP4201.JUMPDEST, label %OP4163.PUSH1

OP4163.PUSH1:                                     ; preds = %OP4159.JUMPDEST
  store i256 64, ptr %sp14072, align 16
  %mload.out.slot14083 = alloca i256, align 16
  %1954 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14083, ptr %arg.ecx.addr)
  %.not48273 = icmp eq i8 %1954, 0
  br i1 %.not48273, label %OP4164.MLOAD.contd, label %return, !prof !6

OP4164.MLOAD.contd:                               ; preds = %OP4163.PUSH1
  %mload.out14084 = load i256, ptr %mload.out.slot14083, align 16
  store i256 %mload.out14084, ptr %sp14072, align 16
  %1955 = add i64 %len.addr.357, 1
  %sp14087 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14087, align 16
  %1956 = add i64 %len.addr.357, 2
  %sp14089 = getelementptr i256, ptr %sp14087, i64 -1
  %sp14091 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1955
  store i256 %mload.out14084, ptr %sp14091, align 16
  %1957 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14084, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48274 = icmp eq i8 %1957, 0
  br i1 %.not48274, label %OP4168.PUSH1, label %return, !prof !6

OP4168.PUSH1:                                     ; preds = %OP4164.MLOAD.contd
  store i256 4, ptr %sp14087, align 16
  %b14103 = load i256, ptr %sp14072, align 16
  %1958 = add i256 %b14103, 4
  store i256 %1958, ptr %sp14072, align 16
  store i256 %1958, ptr %sp14087, align 16
  store i256 %1958, ptr %sp14091, align 16
  %sp14114 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1956
  store i256 32, ptr %sp14114, align 16
  %1959 = add i256 %b14103, 36
  store i256 %1959, ptr %sp14091, align 16
  store i256 %1958, ptr %sp14114, align 16
  %sp14128 = getelementptr i256, ptr %sp14087, i64 3
  store i256 %1959, ptr %sp14128, align 16
  store i256 32, ptr %sp14114, align 16
  store i256 %1958, ptr %sp14128, align 16
  %1960 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1958, i256 32, ptr %arg.ecx.addr)
  %.not48275 = icmp eq i8 %1960, 0
  br i1 %.not48275, label %OP4179.PUSH1, label %return, !prof !6

OP4179.PUSH1:                                     ; preds = %OP4168.PUSH1
  store i256 37, ptr %sp14114, align 16
  %dup214148 = load i256, ptr %sp14091, align 16
  store i256 %dup214148, ptr %sp14128, align 16
  %1961 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup214148, i256 37, ptr %arg.ecx.addr)
  %.not48276 = icmp eq i8 %1961, 0
  br i1 %.not48276, label %OP4182.PUSH1, label %return, !prof !6

OP4182.PUSH1:                                     ; preds = %OP4179.PUSH1
  store i256 32, ptr %sp14114, align 16
  %b14161 = load i256, ptr %sp14091, align 16
  %1962 = add i256 %b14161, 32
  store i256 %1962, ptr %sp14091, align 16
  store i256 %1962, ptr %sp14114, align 16
  store i256 23300, ptr %sp14128, align 16
  %sp14170 = getelementptr i256, ptr %sp14087, i64 4
  store i256 37, ptr %sp14170, align 16
  store i256 37, ptr %sp14114, align 16
  store i256 %1962, ptr %sp14170, align 16
  %1963 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14114)
  %.not48277 = icmp eq i8 %1963, 0
  br i1 %.not48277, label %OP4189.PUSH1, label %return, !prof !6

OP4189.PUSH1:                                     ; preds = %OP4182.PUSH1
  store i256 64, ptr %sp14114, align 16
  %b14184 = load i256, ptr %sp14091, align 16
  %1964 = add i256 %b14184, 64
  store i256 %1964, ptr %sp14091, align 16
  %swap.b14190 = load i256, ptr %sp14089, align 16
  store i256 %1964, ptr %sp14089, align 16
  store i256 %swap.b14190, ptr %sp14091, align 16
  store i256 64, ptr %sp14087, align 16
  %mload.out.slot14198 = alloca i256, align 16
  %1965 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14198, ptr %arg.ecx.addr)
  %.not48278 = icmp eq i8 %1965, 0
  br i1 %.not48278, label %OP4195.MLOAD.contd, label %return, !prof !6

OP4195.MLOAD.contd:                               ; preds = %OP4189.PUSH1
  %mload.out14199 = load i256, ptr %mload.out.slot14198, align 16
  store i256 %mload.out14199, ptr %sp14087, align 16
  store i256 %mload.out14199, ptr %sp14091, align 16
  %swap.b14209 = load i256, ptr %sp14089, align 16
  store i256 %mload.out14199, ptr %sp14089, align 16
  store i256 %swap.b14209, ptr %sp14091, align 16
  %1966 = sub i256 %swap.b14209, %mload.out14199
  store i256 %1966, ptr %sp14087, align 16
  store i256 %1966, ptr %sp14089, align 16
  store i256 %mload.out14199, ptr %sp14087, align 16
  %1967 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14089, i8 16)
  %.not48279 = icmp eq i8 %1967, 0
  %spec.select36602 = select i1 %.not48279, i8 16, i8 %1967, !prof !6
  br label %return

OP4201.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4159.JUMPDEST
  %len.addr.182 = phi i64 [ %1951, %OP4159.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1968 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.182
  %sp14225 = getelementptr i256, ptr %1968, i64 -4
  %dup414226 = load i256, ptr %sp14225, align 16
  store i256 %dup414226, ptr %1968, align 16
  %sp14229 = getelementptr i256, ptr %1968, i64 1
  store i256 8228, ptr %sp14229, align 16
  %1969 = add i64 %len.addr.182, 3
  %sp14233 = getelementptr i256, ptr %1968, i64 2
  store i256 %dup414226, ptr %sp14233, align 16
  br label %OP7491.JUMPDEST

OP4207.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %1970 = add i64 %len.addr.357, -1
  %sp14237 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1970
  %a14238 = load i256, ptr %sp14237, align 16
  %1971 = icmp eq i256 %a14238, 0
  %1972 = zext i1 %1971 to i256
  store i256 %1972, ptr %sp14237, align 16
  br i1 %1971, label %OP4249.JUMPDEST, label %OP4211.PUSH1

OP4211.PUSH1:                                     ; preds = %OP4207.JUMPDEST
  store i256 64, ptr %sp14237, align 16
  %mload.out.slot14248 = alloca i256, align 16
  %1973 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14248, ptr %arg.ecx.addr)
  %.not48239 = icmp eq i8 %1973, 0
  br i1 %.not48239, label %OP4212.MLOAD.contd, label %return, !prof !6

OP4212.MLOAD.contd:                               ; preds = %OP4211.PUSH1
  %mload.out14249 = load i256, ptr %mload.out.slot14248, align 16
  store i256 %mload.out14249, ptr %sp14237, align 16
  %1974 = add i64 %len.addr.357, 1
  %sp14252 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14252, align 16
  %1975 = add i64 %len.addr.357, 2
  %sp14254 = getelementptr i256, ptr %sp14252, i64 -1
  %sp14256 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1974
  store i256 %mload.out14249, ptr %sp14256, align 16
  %1976 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14249, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48240 = icmp eq i8 %1976, 0
  br i1 %.not48240, label %OP4216.PUSH1, label %return, !prof !6

OP4216.PUSH1:                                     ; preds = %OP4212.MLOAD.contd
  store i256 4, ptr %sp14252, align 16
  %b14268 = load i256, ptr %sp14237, align 16
  %1977 = add i256 %b14268, 4
  store i256 %1977, ptr %sp14237, align 16
  store i256 %1977, ptr %sp14252, align 16
  store i256 %1977, ptr %sp14256, align 16
  %sp14279 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1975
  store i256 32, ptr %sp14279, align 16
  %1978 = add i256 %b14268, 36
  store i256 %1978, ptr %sp14256, align 16
  store i256 %1977, ptr %sp14279, align 16
  %sp14293 = getelementptr i256, ptr %sp14252, i64 3
  store i256 %1978, ptr %sp14293, align 16
  store i256 32, ptr %sp14279, align 16
  store i256 %1977, ptr %sp14293, align 16
  %1979 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1977, i256 32, ptr %arg.ecx.addr)
  %.not48241 = icmp eq i8 %1979, 0
  br i1 %.not48241, label %OP4227.PUSH1, label %return, !prof !6

OP4227.PUSH1:                                     ; preds = %OP4216.PUSH1
  store i256 37, ptr %sp14279, align 16
  %dup214313 = load i256, ptr %sp14256, align 16
  store i256 %dup214313, ptr %sp14293, align 16
  %1980 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup214313, i256 37, ptr %arg.ecx.addr)
  %.not48242 = icmp eq i8 %1980, 0
  br i1 %.not48242, label %OP4230.PUSH1, label %return, !prof !6

OP4230.PUSH1:                                     ; preds = %OP4227.PUSH1
  store i256 32, ptr %sp14279, align 16
  %b14326 = load i256, ptr %sp14256, align 16
  %1981 = add i256 %b14326, 32
  store i256 %1981, ptr %sp14256, align 16
  store i256 %1981, ptr %sp14279, align 16
  store i256 23300, ptr %sp14293, align 16
  %sp14335 = getelementptr i256, ptr %sp14252, i64 4
  store i256 37, ptr %sp14335, align 16
  store i256 37, ptr %sp14279, align 16
  store i256 %1981, ptr %sp14335, align 16
  %1982 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14279)
  %.not48243 = icmp eq i8 %1982, 0
  br i1 %.not48243, label %OP4237.PUSH1, label %return, !prof !6

OP4237.PUSH1:                                     ; preds = %OP4230.PUSH1
  store i256 64, ptr %sp14279, align 16
  %b14349 = load i256, ptr %sp14256, align 16
  %1983 = add i256 %b14349, 64
  store i256 %1983, ptr %sp14256, align 16
  %swap.b14355 = load i256, ptr %sp14254, align 16
  store i256 %1983, ptr %sp14254, align 16
  store i256 %swap.b14355, ptr %sp14256, align 16
  store i256 64, ptr %sp14252, align 16
  %mload.out.slot14363 = alloca i256, align 16
  %1984 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14363, ptr %arg.ecx.addr)
  %.not48244 = icmp eq i8 %1984, 0
  br i1 %.not48244, label %OP4243.MLOAD.contd, label %return, !prof !6

OP4243.MLOAD.contd:                               ; preds = %OP4237.PUSH1
  %mload.out14364 = load i256, ptr %mload.out.slot14363, align 16
  store i256 %mload.out14364, ptr %sp14252, align 16
  store i256 %mload.out14364, ptr %sp14256, align 16
  %swap.b14374 = load i256, ptr %sp14254, align 16
  store i256 %mload.out14364, ptr %sp14254, align 16
  store i256 %swap.b14374, ptr %sp14256, align 16
  %1985 = sub i256 %swap.b14374, %mload.out14364
  store i256 %1985, ptr %sp14252, align 16
  store i256 %1985, ptr %sp14254, align 16
  store i256 %mload.out14364, ptr %sp14252, align 16
  %1986 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14254, i8 16)
  %.not48245 = icmp eq i8 %1986, 0
  %spec.select36603 = select i1 %.not48245, i8 16, i8 %1986, !prof !6
  br label %return

OP4249.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4207.JUMPDEST
  %len.addr.183 = phi i64 [ %1970, %OP4207.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %1987 = add i64 %len.addr.183, 1
  %sp14390 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.183
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp14390, align 16
  %1988 = add i64 %len.addr.183, 2
  %sp14392 = getelementptr i256, ptr %sp14390, i64 -5
  %dup614393 = load i256, ptr %sp14392, align 16
  %sp14394 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1987
  store i256 %dup614393, ptr %sp14394, align 16
  %1989 = and i256 %dup614393, 1461501637330902918203684832716283019655932542975
  store i256 %1989, ptr %sp14390, align 16
  %.not48246 = icmp eq i256 %1989, 0
  br i1 %.not48246, label %OP4255.PUSH1, label %OP4293.JUMPDEST

OP4255.PUSH1:                                     ; preds = %OP4249.JUMPDEST
  store i256 64, ptr %sp14390, align 16
  %mload.out.slot14409 = alloca i256, align 16
  %1990 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14409, ptr %arg.ecx.addr)
  %.not48247 = icmp eq i8 %1990, 0
  br i1 %.not48247, label %OP4256.MLOAD.contd, label %return, !prof !6

OP4256.MLOAD.contd:                               ; preds = %OP4255.PUSH1
  %mload.out14410 = load i256, ptr %mload.out.slot14409, align 16
  store i256 %mload.out14410, ptr %sp14390, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14394, align 16
  %1991 = add i64 %len.addr.183, 3
  %sp14417 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1988
  store i256 %mload.out14410, ptr %sp14417, align 16
  %1992 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14410, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48248 = icmp eq i8 %1992, 0
  br i1 %.not48248, label %OP4260.PUSH1, label %return, !prof !6

OP4260.PUSH1:                                     ; preds = %OP4256.MLOAD.contd
  store i256 4, ptr %sp14394, align 16
  %b14429 = load i256, ptr %sp14390, align 16
  %1993 = add i256 %b14429, 4
  store i256 %1993, ptr %sp14390, align 16
  store i256 %1993, ptr %sp14394, align 16
  store i256 %1993, ptr %sp14417, align 16
  %sp14440 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1991
  store i256 32, ptr %sp14440, align 16
  %1994 = add i256 %b14429, 36
  store i256 %1994, ptr %sp14417, align 16
  store i256 %1993, ptr %sp14440, align 16
  %sp14454 = getelementptr i256, ptr %sp14390, i64 4
  store i256 %1994, ptr %sp14454, align 16
  store i256 32, ptr %sp14440, align 16
  store i256 %1993, ptr %sp14454, align 16
  %1995 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %1993, i256 32, ptr %arg.ecx.addr)
  %.not48249 = icmp eq i8 %1995, 0
  br i1 %.not48249, label %OP4271.PUSH1, label %return, !prof !6

OP4271.PUSH1:                                     ; preds = %OP4260.PUSH1
  store i256 35, ptr %sp14440, align 16
  %dup214474 = load i256, ptr %sp14417, align 16
  store i256 %dup214474, ptr %sp14454, align 16
  %1996 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup214474, i256 35, ptr %arg.ecx.addr)
  %.not48250 = icmp eq i8 %1996, 0
  br i1 %.not48250, label %OP4274.PUSH1, label %return, !prof !6

OP4274.PUSH1:                                     ; preds = %OP4271.PUSH1
  store i256 32, ptr %sp14440, align 16
  %b14487 = load i256, ptr %sp14417, align 16
  %1997 = add i256 %b14487, 32
  store i256 %1997, ptr %sp14417, align 16
  store i256 %1997, ptr %sp14440, align 16
  store i256 22217, ptr %sp14454, align 16
  %sp14496 = getelementptr i256, ptr %sp14390, i64 5
  store i256 35, ptr %sp14496, align 16
  store i256 35, ptr %sp14440, align 16
  store i256 %1997, ptr %sp14496, align 16
  %1998 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14440)
  %.not48251 = icmp eq i8 %1998, 0
  br i1 %.not48251, label %OP4281.PUSH1, label %return, !prof !6

OP4281.PUSH1:                                     ; preds = %OP4274.PUSH1
  store i256 64, ptr %sp14440, align 16
  %b14510 = load i256, ptr %sp14417, align 16
  %1999 = add i256 %b14510, 64
  store i256 %1999, ptr %sp14417, align 16
  %swap.b14516 = load i256, ptr %sp14390, align 16
  store i256 %1999, ptr %sp14390, align 16
  store i256 %swap.b14516, ptr %sp14417, align 16
  store i256 64, ptr %sp14394, align 16
  %mload.out.slot14524 = alloca i256, align 16
  %2000 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14524, ptr %arg.ecx.addr)
  %.not48252 = icmp eq i8 %2000, 0
  br i1 %.not48252, label %OP4287.MLOAD.contd, label %return, !prof !6

OP4287.MLOAD.contd:                               ; preds = %OP4281.PUSH1
  %mload.out14525 = load i256, ptr %mload.out.slot14524, align 16
  store i256 %mload.out14525, ptr %sp14394, align 16
  store i256 %mload.out14525, ptr %sp14417, align 16
  %swap.b14535 = load i256, ptr %sp14390, align 16
  store i256 %mload.out14525, ptr %sp14390, align 16
  store i256 %swap.b14535, ptr %sp14417, align 16
  %2001 = sub i256 %swap.b14535, %mload.out14525
  store i256 %2001, ptr %sp14394, align 16
  store i256 %2001, ptr %sp14390, align 16
  store i256 %mload.out14525, ptr %sp14394, align 16
  %2002 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14390, i8 16)
  %.not48253 = icmp eq i8 %2002, 0
  %spec.select36604 = select i1 %.not48253, i8 16, i8 %2002, !prof !6
  br label %return

OP4293.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre53967 = add i64 %len.addr.357, 2
  %.pre54291 = add i64 %len.addr.357, 1
  br label %OP4293.JUMPDEST

OP4293.JUMPDEST:                                  ; preds = %OP4293.JUMPDEST.loopexit, %OP4249.JUMPDEST
  %.pre-phi54292 = phi i64 [ %.pre54291, %OP4293.JUMPDEST.loopexit ], [ %1987, %OP4249.JUMPDEST ]
  %.pre-phi53968 = phi i64 [ %.pre53967, %OP4293.JUMPDEST.loopexit ], [ %1988, %OP4249.JUMPDEST ]
  %len.addr.184 = phi i64 [ %len.addr.357, %OP4293.JUMPDEST.loopexit ], [ %len.addr.183, %OP4249.JUMPDEST ]
  %sp14551 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.184
  store i256 0, ptr %sp14551, align 16
  %sp14553 = getelementptr i256, ptr %sp14551, i64 -4
  %dup514554 = load i256, ptr %sp14553, align 16
  %sp14555 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54292
  store i256 %dup514554, ptr %sp14555, align 16
  %2003 = icmp ne i256 %dup514554, 0
  %2004 = zext i1 %2003 to i256
  store i256 %2004, ptr %sp14551, align 16
  br i1 %2003, label %OP4337.JUMPDEST, label %OP4299.PUSH1

OP4299.PUSH1:                                     ; preds = %OP4293.JUMPDEST
  store i256 64, ptr %sp14551, align 16
  %mload.out.slot14570 = alloca i256, align 16
  %2005 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14570, ptr %arg.ecx.addr)
  %.not48254 = icmp eq i8 %2005, 0
  br i1 %.not48254, label %OP4300.MLOAD.contd, label %return, !prof !6

OP4300.MLOAD.contd:                               ; preds = %OP4299.PUSH1
  %mload.out14571 = load i256, ptr %mload.out.slot14570, align 16
  store i256 %mload.out14571, ptr %sp14551, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14555, align 16
  %2006 = add i64 %len.addr.184, 3
  %sp14578 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi53968
  store i256 %mload.out14571, ptr %sp14578, align 16
  %2007 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14571, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48255 = icmp eq i8 %2007, 0
  br i1 %.not48255, label %OP4304.PUSH1, label %return, !prof !6

OP4304.PUSH1:                                     ; preds = %OP4300.MLOAD.contd
  store i256 4, ptr %sp14555, align 16
  %b14590 = load i256, ptr %sp14551, align 16
  %2008 = add i256 %b14590, 4
  store i256 %2008, ptr %sp14551, align 16
  store i256 %2008, ptr %sp14555, align 16
  store i256 %2008, ptr %sp14578, align 16
  %sp14601 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2006
  store i256 32, ptr %sp14601, align 16
  %2009 = add i256 %b14590, 36
  store i256 %2009, ptr %sp14578, align 16
  store i256 %2008, ptr %sp14601, align 16
  %sp14615 = getelementptr i256, ptr %sp14551, i64 4
  store i256 %2009, ptr %sp14615, align 16
  store i256 32, ptr %sp14601, align 16
  store i256 %2008, ptr %sp14615, align 16
  %2010 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2008, i256 32, ptr %arg.ecx.addr)
  %.not48256 = icmp eq i8 %2010, 0
  br i1 %.not48256, label %OP4315.PUSH1, label %return, !prof !6

OP4315.PUSH1:                                     ; preds = %OP4304.PUSH1
  store i256 41, ptr %sp14601, align 16
  %dup214635 = load i256, ptr %sp14578, align 16
  store i256 %dup214635, ptr %sp14615, align 16
  %2011 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup214635, i256 41, ptr %arg.ecx.addr)
  %.not48257 = icmp eq i8 %2011, 0
  br i1 %.not48257, label %OP4318.PUSH1, label %return, !prof !6

OP4318.PUSH1:                                     ; preds = %OP4315.PUSH1
  store i256 32, ptr %sp14601, align 16
  %b14648 = load i256, ptr %sp14578, align 16
  %2012 = add i256 %b14648, 32
  store i256 %2012, ptr %sp14578, align 16
  store i256 %2012, ptr %sp14601, align 16
  store i256 22444, ptr %sp14615, align 16
  %sp14657 = getelementptr i256, ptr %sp14551, i64 5
  store i256 41, ptr %sp14657, align 16
  store i256 41, ptr %sp14601, align 16
  store i256 %2012, ptr %sp14657, align 16
  %2013 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14601)
  %.not48258 = icmp eq i8 %2013, 0
  br i1 %.not48258, label %OP4325.PUSH1, label %return, !prof !6

OP4325.PUSH1:                                     ; preds = %OP4318.PUSH1
  store i256 64, ptr %sp14601, align 16
  %b14671 = load i256, ptr %sp14578, align 16
  %2014 = add i256 %b14671, 64
  store i256 %2014, ptr %sp14578, align 16
  %swap.b14677 = load i256, ptr %sp14551, align 16
  store i256 %2014, ptr %sp14551, align 16
  store i256 %swap.b14677, ptr %sp14578, align 16
  store i256 64, ptr %sp14555, align 16
  %mload.out.slot14685 = alloca i256, align 16
  %2015 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14685, ptr %arg.ecx.addr)
  %.not48259 = icmp eq i8 %2015, 0
  br i1 %.not48259, label %OP4331.MLOAD.contd, label %return, !prof !6

OP4331.MLOAD.contd:                               ; preds = %OP4325.PUSH1
  %mload.out14686 = load i256, ptr %mload.out.slot14685, align 16
  store i256 %mload.out14686, ptr %sp14555, align 16
  store i256 %mload.out14686, ptr %sp14578, align 16
  %swap.b14696 = load i256, ptr %sp14551, align 16
  store i256 %mload.out14686, ptr %sp14551, align 16
  store i256 %swap.b14696, ptr %sp14578, align 16
  %2016 = sub i256 %swap.b14696, %mload.out14686
  store i256 %2016, ptr %sp14555, align 16
  store i256 %2016, ptr %sp14551, align 16
  store i256 %mload.out14686, ptr %sp14555, align 16
  %2017 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14551, i8 16)
  %.not48260 = icmp eq i8 %2017, 0
  %spec.select36605 = select i1 %.not48260, i8 16, i8 %2017, !prof !6
  br label %return

OP4337.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre53969 = add i64 %len.addr.357, 1
  br label %OP4337.JUMPDEST

OP4337.JUMPDEST:                                  ; preds = %OP4337.JUMPDEST.loopexit, %OP4293.JUMPDEST
  %.pre-phi53970 = phi i64 [ %.pre53969, %OP4337.JUMPDEST.loopexit ], [ %.pre-phi54292, %OP4293.JUMPDEST ]
  %len.addr.185 = phi i64 [ %len.addr.357, %OP4337.JUMPDEST.loopexit ], [ %len.addr.184, %OP4293.JUMPDEST ]
  %contract.caller14713 = load i160, ptr %contract.caller.addr16198, align 16
  %2018 = tail call i160 @llvm.bswap.i160(i160 %contract.caller14713)
  %2019 = zext i160 %2018 to i256
  %sp14714 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.185
  store i256 %2019, ptr %sp14714, align 16
  %2020 = add i64 %len.addr.185, 2
  %sp14716 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi53970
  store i256 0, ptr %sp14716, align 16
  store i256 0, ptr %sp14714, align 16
  store i256 %2019, ptr %sp14716, align 16
  %2021 = add i64 %len.addr.185, 3
  %sp14725 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2020
  store i256 0, ptr %sp14725, align 16
  %2022 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %2019, ptr %arg.ecx.addr)
  %.not48261 = icmp eq i8 %2022, 0
  br i1 %.not48261, label %OP4343.PUSH1, label %return, !prof !6

OP4343.PUSH1:                                     ; preds = %OP4337.JUMPDEST
  store i256 13, ptr %sp14716, align 16
  store i256 32, ptr %sp14725, align 16
  %2023 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 13, ptr %arg.ecx.addr)
  %.not48262 = icmp eq i8 %2023, 0
  br i1 %.not48262, label %OP4346.PUSH1, label %return, !prof !6

OP4346.PUSH1:                                     ; preds = %OP4343.PUSH1
  store i256 64, ptr %sp14716, align 16
  %swap.b14746 = load i256, ptr %sp14714, align 16
  store i256 64, ptr %sp14714, align 16
  store i256 %swap.b14746, ptr %sp14716, align 16
  %2024 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14714)
  %.not48263 = icmp eq i8 %2024, 0
  br i1 %.not48263, label %OP4349.SLOAD, label %return, !prof !6

OP4349.SLOAD:                                     ; preds = %OP4346.PUSH1
  %2025 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14714, i8 17)
  %.not48264 = icmp eq i8 %2025, 0
  br i1 %.not48264, label %OP4350.DUP1, label %return, !prof !6

OP4350.DUP1:                                      ; preds = %OP4349.SLOAD
  %dup114753 = load i256, ptr %sp14714, align 16
  store i256 %dup114753, ptr %sp14716, align 16
  %sp14756 = getelementptr i256, ptr %sp14714, i64 -4
  %dup614757 = load i256, ptr %sp14756, align 16
  store i256 %dup614757, ptr %sp14725, align 16
  %2026 = icmp ule i256 %dup614757, %dup114753
  %2027 = zext i1 %2026 to i256
  store i256 %2027, ptr %sp14716, align 16
  br i1 %2026, label %OP4394.JUMPDEST, label %OP4356.PUSH1

OP4356.PUSH1:                                     ; preds = %OP4350.DUP1
  store i256 64, ptr %sp14716, align 16
  %mload.out.slot14777 = alloca i256, align 16
  %2028 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14777, ptr %arg.ecx.addr)
  %.not48265 = icmp eq i8 %2028, 0
  br i1 %.not48265, label %OP4357.MLOAD.contd, label %return, !prof !6

OP4357.MLOAD.contd:                               ; preds = %OP4356.PUSH1
  %mload.out14778 = load i256, ptr %mload.out.slot14777, align 16
  store i256 %mload.out14778, ptr %sp14716, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp14725, align 16
  %2029 = add i64 %len.addr.185, 4
  %sp14785 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2021
  store i256 %mload.out14778, ptr %sp14785, align 16
  %2030 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out14778, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48266 = icmp eq i8 %2030, 0
  br i1 %.not48266, label %OP4361.PUSH1, label %return, !prof !6

OP4361.PUSH1:                                     ; preds = %OP4357.MLOAD.contd
  store i256 4, ptr %sp14725, align 16
  %b14797 = load i256, ptr %sp14716, align 16
  %2031 = add i256 %b14797, 4
  store i256 %2031, ptr %sp14716, align 16
  store i256 %2031, ptr %sp14725, align 16
  store i256 %2031, ptr %sp14785, align 16
  %sp14808 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2029
  store i256 32, ptr %sp14808, align 16
  %2032 = add i256 %b14797, 36
  store i256 %2032, ptr %sp14785, align 16
  store i256 %2031, ptr %sp14808, align 16
  %sp14822 = getelementptr i256, ptr %sp14714, i64 5
  store i256 %2032, ptr %sp14822, align 16
  store i256 32, ptr %sp14808, align 16
  store i256 %2031, ptr %sp14822, align 16
  %2033 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2031, i256 32, ptr %arg.ecx.addr)
  %.not48267 = icmp eq i8 %2033, 0
  br i1 %.not48267, label %OP4372.PUSH1, label %return, !prof !6

OP4372.PUSH1:                                     ; preds = %OP4361.PUSH1
  store i256 46, ptr %sp14808, align 16
  %dup214842 = load i256, ptr %sp14785, align 16
  store i256 %dup214842, ptr %sp14822, align 16
  %2034 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup214842, i256 46, ptr %arg.ecx.addr)
  %.not48268 = icmp eq i8 %2034, 0
  br i1 %.not48268, label %OP4375.PUSH1, label %return, !prof !6

OP4375.PUSH1:                                     ; preds = %OP4372.PUSH1
  store i256 32, ptr %sp14808, align 16
  %b14855 = load i256, ptr %sp14785, align 16
  %2035 = add i256 %b14855, 32
  store i256 %2035, ptr %sp14785, align 16
  store i256 %2035, ptr %sp14808, align 16
  store i256 23042, ptr %sp14822, align 16
  %sp14864 = getelementptr i256, ptr %sp14714, i64 6
  store i256 46, ptr %sp14864, align 16
  store i256 46, ptr %sp14808, align 16
  store i256 %2035, ptr %sp14864, align 16
  %2036 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14808)
  %.not48269 = icmp eq i8 %2036, 0
  br i1 %.not48269, label %OP4382.PUSH1, label %return, !prof !6

OP4382.PUSH1:                                     ; preds = %OP4375.PUSH1
  store i256 64, ptr %sp14808, align 16
  %b14878 = load i256, ptr %sp14785, align 16
  %2037 = add i256 %b14878, 64
  store i256 %2037, ptr %sp14785, align 16
  %swap.b14884 = load i256, ptr %sp14716, align 16
  store i256 %2037, ptr %sp14716, align 16
  store i256 %swap.b14884, ptr %sp14785, align 16
  store i256 64, ptr %sp14725, align 16
  %mload.out.slot14892 = alloca i256, align 16
  %2038 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot14892, ptr %arg.ecx.addr)
  %.not48270 = icmp eq i8 %2038, 0
  br i1 %.not48270, label %OP4388.MLOAD.contd, label %return, !prof !6

OP4388.MLOAD.contd:                               ; preds = %OP4382.PUSH1
  %mload.out14893 = load i256, ptr %mload.out.slot14892, align 16
  store i256 %mload.out14893, ptr %sp14725, align 16
  store i256 %mload.out14893, ptr %sp14785, align 16
  %swap.b14903 = load i256, ptr %sp14716, align 16
  store i256 %mload.out14893, ptr %sp14716, align 16
  store i256 %swap.b14903, ptr %sp14785, align 16
  %2039 = sub i256 %swap.b14903, %mload.out14893
  store i256 %2039, ptr %sp14725, align 16
  store i256 %2039, ptr %sp14716, align 16
  store i256 %mload.out14893, ptr %sp14725, align 16
  %2040 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14716, i8 16)
  %.not48271 = icmp eq i8 %2040, 0
  %spec.select36606 = select i1 %.not48271, i8 16, i8 %2040, !prof !6
  br label %return

OP4394.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4350.DUP1
  %len.addr.186 = phi i64 [ %.pre-phi53970, %OP4350.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %2041 = add i64 %len.addr.186, 1
  %sp14919 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.186
  store i256 11, ptr %sp14919, align 16
  %2042 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14919, i8 17)
  %.not48272 = icmp eq i8 %2042, 0
  br i1 %.not48272, label %OP4397.PUSH2, label %return, !prof !6

OP4397.PUSH2:                                     ; preds = %OP4394.JUMPDEST
  %sp14923 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2041
  store i256 8629, ptr %sp14923, align 16
  %swap.b14928 = load i256, ptr %sp14919, align 16
  store i256 8629, ptr %sp14919, align 16
  store i256 %swap.b14928, ptr %sp14923, align 16
  %2043 = add i64 %len.addr.186, 3
  %sp14930 = getelementptr i256, ptr %sp14919, i64 -5
  %dup714931 = load i256, ptr %sp14930, align 16
  %sp14932 = getelementptr i256, ptr %sp14919, i64 2
  store i256 %dup714931, ptr %sp14932, align 16
  br label %OP7971.JUMPDEST

OP4402.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp14936 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 11, ptr %sp14936, align 16
  %2044 = add i64 %len.addr.357, -1
  %sp14938 = getelementptr i256, ptr %sp14936, i64 -1
  %2045 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr %sp14938, i8 17)
  %.not48238 = icmp eq i8 %2045, 0
  br i1 %.not48238, label %OP4405.PUSH2, label %return, !prof !6

OP4405.PUSH2:                                     ; preds = %OP4402.JUMPDEST
  %sp14940 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2044
  store i256 8660, ptr %sp14940, align 16
  %sp14942 = getelementptr i256, ptr %sp14936, i64 -7
  %dup714943 = load i256, ptr %sp14942, align 16
  store i256 %dup714943, ptr %sp14936, align 16
  %sp14946 = getelementptr i256, ptr %sp14936, i64 1
  store i256 8655, ptr %sp14946, align 16
  %sp14948 = getelementptr i256, ptr %sp14936, i64 -6
  %dup814949 = load i256, ptr %sp14948, align 16
  %sp14950 = getelementptr i256, ptr %sp14936, i64 2
  store i256 %dup814949, ptr %sp14950, align 16
  %sp14952 = getelementptr i256, ptr %sp14936, i64 3
  store i256 8649, ptr %sp14952, align 16
  %2046 = add i64 %len.addr.357, 5
  %sp14956 = getelementptr i256, ptr %sp14936, i64 4
  store i256 %dup714943, ptr %sp14956, align 16
  br label %OP7746.JUMPDEST

OP4413.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2047 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp14960 = getelementptr i256, ptr %2047, i64 -1
  %swap.a14961 = load i256, ptr %sp14960, align 16
  %sp14962 = getelementptr i256, ptr %2047, i64 -2
  %swap.b14963 = load i256, ptr %sp14962, align 16
  store i256 %swap.a14961, ptr %sp14962, align 16
  store i256 %swap.b14963, ptr %sp14960, align 16
  br label %OP7971.JUMPDEST

OP4420.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp14969 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 8670, ptr %sp14969, align 16
  %sp14971 = getelementptr i256, ptr %sp14969, i64 -1
  %dup214972 = load i256, ptr %sp14971, align 16
  %sp14973 = getelementptr i256, ptr %sp14969, i64 1
  store i256 %dup214972, ptr %sp14973, align 16
  %2048 = add i64 %len.addr.357, 3
  %sp14975 = getelementptr i256, ptr %sp14969, i64 -5
  %dup714976 = load i256, ptr %sp14975, align 16
  %sp14977 = getelementptr i256, ptr %sp14969, i64 2
  store i256 %dup714976, ptr %sp14977, align 16
  br label %OP7701.JUMPDEST

OP4426.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %contract.caller14982 = load i160, ptr %contract.caller.addr16198, align 16
  %2049 = tail call i160 @llvm.bswap.i160(i160 %contract.caller14982)
  %2050 = zext i160 %2049 to i256
  %sp14983 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 %2050, ptr %sp14983, align 16
  %2051 = add i64 %len.addr.357, 2
  %sp14985 = getelementptr i256, ptr %sp14983, i64 1
  store i256 0, ptr %sp14985, align 16
  %2052 = add i64 %len.addr.357, 3
  %sp14989 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2051
  store i256 %2050, ptr %sp14989, align 16
  %2053 = add i64 %len.addr.357, 4
  %sp14993 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2052
  store i256 0, ptr %sp14993, align 16
  %2054 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %2050, ptr %arg.ecx.addr)
  %.not48219 = icmp eq i8 %2054, 0
  br i1 %.not48219, label %OP4432.PUSH1, label %return, !prof !6

OP4432.PUSH1:                                     ; preds = %OP4426.JUMPDEST
  store i256 13, ptr %sp14989, align 16
  store i256 32, ptr %sp14993, align 16
  store i256 32, ptr %sp14989, align 16
  store i256 13, ptr %sp14993, align 16
  %sp15011 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2053
  store i256 32, ptr %sp15011, align 16
  %2055 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 13, ptr %arg.ecx.addr)
  %.not48220 = icmp eq i8 %2055, 0
  br i1 %.not48220, label %OP4437.PUSH1, label %return, !prof !6

OP4437.PUSH1:                                     ; preds = %OP4432.PUSH1
  store i256 64, ptr %sp14993, align 16
  %swap.b15023 = load i256, ptr %sp14985, align 16
  store i256 64, ptr %sp14985, align 16
  store i256 %swap.b15023, ptr %sp14993, align 16
  store i256 64, ptr %sp15011, align 16
  store i256 64, ptr %sp14993, align 16
  store i256 %swap.b15023, ptr %sp15011, align 16
  %2056 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14993)
  %.not48221 = icmp eq i8 %2056, 0
  br i1 %.not48221, label %OP4442.SWAP4, label %return, !prof !6

OP4442.SWAP4:                                     ; preds = %OP4437.PUSH1
  %swap.a15037 = load i256, ptr %sp14993, align 16
  %sp15038 = getelementptr i256, ptr %sp14983, i64 -1
  %swap.b15039 = load i256, ptr %sp15038, align 16
  store i256 %swap.a15037, ptr %sp15038, align 16
  store i256 %swap.b15039, ptr %sp14993, align 16
  %swap.b15044 = load i256, ptr %sp14989, align 16
  store i256 %swap.b15039, ptr %sp14989, align 16
  store i256 %swap.b15044, ptr %sp14993, align 16
  store i256 %swap.b15044, ptr %sp15038, align 16
  store i256 %swap.a15037, ptr %sp14993, align 16
  %2057 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp14989, i8 17)
  %.not48222 = icmp eq i8 %2057, 0
  br i1 %.not48222, label %OP4446.DUP1, label %return, !prof !6

OP4446.DUP1:                                      ; preds = %OP4442.SWAP4
  %dup115054 = load i256, ptr %sp14985, align 16
  store i256 %dup115054, ptr %sp14989, align 16
  %mload.out.slot15059 = alloca i256, align 16
  %2058 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup115054, ptr %mload.out.slot15059, ptr %arg.ecx.addr)
  %.not48223 = icmp eq i8 %2058, 0
  br i1 %.not48223, label %OP4447.MLOAD.contd, label %return, !prof !6

OP4447.MLOAD.contd:                               ; preds = %OP4446.DUP1
  %mload.out15060 = load i256, ptr %mload.out.slot15059, align 16
  store i256 %mload.out15060, ptr %sp14989, align 16
  %sp15063 = getelementptr i256, ptr %sp14983, i64 -6
  %dup915064 = load i256, ptr %sp15063, align 16
  store i256 %dup915064, ptr %sp14993, align 16
  store i256 %mload.out15060, ptr %sp15011, align 16
  %2059 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15060, i256 %dup915064, ptr %arg.ecx.addr)
  %.not48224 = icmp eq i8 %2059, 0
  br i1 %.not48224, label %OP4451.SWAP1, label %return, !prof !6

OP4451.SWAP1:                                     ; preds = %OP4447.MLOAD.contd
  %swap.a15077 = load i256, ptr %sp14989, align 16
  %swap.b15079 = load i256, ptr %sp14985, align 16
  store i256 %swap.a15077, ptr %sp14985, align 16
  store i256 %swap.b15079, ptr %sp14989, align 16
  %mload.out.slot15083 = alloca i256, align 16
  %2060 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b15079, ptr %mload.out.slot15083, ptr %arg.ecx.addr)
  %.not48225 = icmp eq i8 %2060, 0
  br i1 %.not48225, label %OP4452.MLOAD.contd, label %return, !prof !6

OP4452.MLOAD.contd:                               ; preds = %OP4451.SWAP1
  %mload.out15084 = load i256, ptr %mload.out.slot15083, align 16
  store i256 %mload.out15084, ptr %sp14989, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp14993, align 16
  %sp15089 = getelementptr i256, ptr %sp14983, i64 -7
  %dup1115090 = load i256, ptr %sp15089, align 16
  store i256 %dup1115090, ptr %sp15011, align 16
  %2061 = and i256 %dup1115090, 1461501637330902918203684832716283019655932542975
  store i256 %2061, ptr %sp14993, align 16
  %swap.b15102 = load i256, ptr %sp15038, align 16
  store i256 %2061, ptr %sp15038, align 16
  store i256 %swap.b15102, ptr %sp14993, align 16
  store i256 -38211263486823683659365759804132907449130555001079181911608097270931587544584, ptr %sp15011, align 16
  %swap.b15109 = load i256, ptr %sp14985, align 16
  store i256 -38211263486823683659365759804132907449130555001079181911608097270931587544584, ptr %sp14985, align 16
  store i256 %swap.b15109, ptr %sp15011, align 16
  %sp15113 = getelementptr i256, ptr %sp14983, i64 5
  store i256 %mload.out15084, ptr %sp15113, align 16
  store i256 %mload.out15084, ptr %sp15011, align 16
  store i256 %swap.b15109, ptr %sp15113, align 16
  %2062 = sub i256 %swap.b15109, %mload.out15084
  store i256 %2062, ptr %sp15011, align 16
  %2063 = add i256 %2062, %swap.b15102
  store i256 %2063, ptr %sp14993, align 16
  store i256 %2063, ptr %sp14989, align 16
  store i256 %mload.out15084, ptr %sp14993, align 16
  %2064 = add i64 %len.addr.357, -1
  %2065 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15038, i8 3)
  %.not48226 = icmp eq i8 %2065, 0
  br i1 %.not48226, label %OP4465.PUSH1, label %return, !prof !6

OP4465.PUSH1:                                     ; preds = %OP4452.MLOAD.contd
  %sp15139 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2064
  store i256 64, ptr %sp15139, align 16
  %2066 = add i64 %len.addr.357, 1
  store i256 64, ptr %sp14983, align 16
  %mload.out.slot15147 = alloca i256, align 16
  %2067 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15147, ptr %arg.ecx.addr)
  %.not48227 = icmp eq i8 %2067, 0
  br i1 %.not48227, label %OP4467.MLOAD.contd, label %return, !prof !6

OP4467.MLOAD.contd:                               ; preds = %OP4465.PUSH1
  %mload.out15148 = load i256, ptr %mload.out.slot15147, align 16
  store i256 %mload.out15148, ptr %sp14983, align 16
  %dup715152 = load i256, ptr %sp15063, align 16
  %sp15153 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2066
  store i256 %dup715152, ptr %sp15153, align 16
  %sp15157 = getelementptr i256, ptr %sp14983, i64 2
  store i256 %mload.out15148, ptr %sp15157, align 16
  %2068 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15148, i256 %dup715152, ptr %arg.ecx.addr)
  %.not48228 = icmp eq i8 %2068, 0
  br i1 %.not48228, label %OP4471.SWAP1, label %return, !prof !6

OP4471.SWAP1:                                     ; preds = %OP4467.MLOAD.contd
  %swap.a15165 = load i256, ptr %sp14983, align 16
  %swap.b15167 = load i256, ptr %sp15139, align 16
  store i256 %swap.a15165, ptr %sp15139, align 16
  store i256 %swap.b15167, ptr %sp14983, align 16
  %mload.out.slot15171 = alloca i256, align 16
  %2069 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b15167, ptr %mload.out.slot15171, ptr %arg.ecx.addr)
  %.not48229 = icmp eq i8 %2069, 0
  br i1 %.not48229, label %OP4472.MLOAD.contd, label %return, !prof !6

OP4472.MLOAD.contd:                               ; preds = %OP4471.SWAP1
  %mload.out15172 = load i256, ptr %mload.out.slot15171, align 16
  store i256 %mload.out15172, ptr %sp14983, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp15153, align 16
  %dup915178 = load i256, ptr %sp15089, align 16
  store i256 %dup915178, ptr %sp15157, align 16
  %2070 = and i256 %dup915178, 1461501637330902918203684832716283019655932542975
  store i256 %2070, ptr %sp15153, align 16
  %swap.b15190 = load i256, ptr %sp15139, align 16
  store i256 %2070, ptr %sp15139, align 16
  store i256 %swap.b15190, ptr %sp15153, align 16
  store i256 0, ptr %sp15157, align 16
  store i256 0, ptr %sp14983, align 16
  store i256 %mload.out15172, ptr %sp15157, align 16
  %sp15199 = getelementptr i256, ptr %sp14983, i64 3
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp15199, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp15153, align 16
  store i256 %swap.b15190, ptr %sp15199, align 16
  %sp15208 = getelementptr i256, ptr %sp14983, i64 4
  store i256 %mload.out15172, ptr %sp15208, align 16
  store i256 %mload.out15172, ptr %sp15199, align 16
  store i256 %swap.b15190, ptr %sp15208, align 16
  %2071 = sub i256 %swap.b15190, %mload.out15172
  store i256 %2071, ptr %sp15199, align 16
  store i256 32, ptr %sp15208, align 16
  %2072 = add i256 %2071, 32
  store i256 %2072, ptr %sp15199, align 16
  store i256 %2072, ptr %sp15157, align 16
  store i256 %mload.out15172, ptr %sp15199, align 16
  %2073 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15038, i8 3)
  %.not48230 = icmp eq i8 %2073, 0
  br i1 %.not48230, label %OP4488.POP, label %return, !prof !6

OP4488.POP:                                       ; preds = %OP4472.MLOAD.contd
  %sp15237 = getelementptr i256, ptr %sp14983, i64 -2
  store i256 1, ptr %sp15237, align 16
  %sp15241 = getelementptr i256, ptr %sp14983, i64 -8
  %swap.b15242 = load i256, ptr %sp15241, align 16
  store i256 1, ptr %sp15241, align 16
  store i256 %swap.b15242, ptr %sp15237, align 16
  %swap.b15247 = load i256, ptr %sp15089, align 16
  store i256 %swap.b15242, ptr %sp15089, align 16
  store i256 %swap.b15247, ptr %sp15237, align 16
  %2074 = add i64 %len.addr.357, -7
  br label %dynamic_jump_table.backedge

OP4498.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1214.JUMPDEST
  %len.addr.187 = phi i64 [ %601, %OP1214.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2075 = add i64 %len.addr.187, 1
  %sp15258 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.187
  store i256 1, ptr %sp15258, align 16
  %2076 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15258, i8 17)
  %.not48673 = icmp eq i8 %2076, 0
  br i1 %.not48673, label %OP4501.PUSH21, label %return, !prof !6

OP4501.PUSH21:                                    ; preds = %OP4498.JUMPDEST
  %2077 = add i64 %len.addr.187, 2
  %sp15262 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2075
  %swap.b15267 = load i256, ptr %sp15258, align 16
  store i256 255, ptr %sp15262, align 16
  %2078 = and i256 %swap.b15267, 372682917519380244141939632342652170012262798458880
  %2079 = icmp eq i256 %2078, 0
  %2080 = zext i1 %2079 to i256
  store i256 %2080, ptr %sp15258, align 16
  br i1 %2079, label %OP4540.JUMPDEST, label %OP4509.PUSH1

OP4509.PUSH1:                                     ; preds = %OP4501.PUSH21
  store i256 64, ptr %sp15258, align 16
  store i256 64, ptr %sp15262, align 16
  %mload.out.slot15298 = alloca i256, align 16
  %2081 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15298, ptr %arg.ecx.addr)
  %.not48674 = icmp eq i8 %2081, 0
  br i1 %.not48674, label %OP4511.MLOAD.contd, label %return, !prof !6

OP4511.MLOAD.contd:                               ; preds = %OP4509.PUSH1
  %mload.out15299 = load i256, ptr %mload.out.slot15298, align 16
  store i256 %mload.out15299, ptr %sp15262, align 16
  %sp15302 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2077
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp15302, align 16
  %sp15306 = getelementptr i256, ptr %sp15258, i64 3
  store i256 %mload.out15299, ptr %sp15306, align 16
  %2082 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15299, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48675 = icmp eq i8 %2082, 0
  br i1 %.not48675, label %OP4515.PUSH1, label %return, !prof !6

OP4515.PUSH1:                                     ; preds = %OP4511.MLOAD.contd
  store i256 32, ptr %sp15302, align 16
  %dup315318 = load i256, ptr %sp15262, align 16
  %sp15319 = getelementptr i256, ptr %sp15258, i64 4
  store i256 %dup315318, ptr %sp15319, align 16
  %2083 = add i256 %dup315318, 4
  store i256 %2083, ptr %sp15306, align 16
  %2084 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2083, i256 32, ptr %arg.ecx.addr)
  %.not48676 = icmp eq i8 %2084, 0
  br i1 %.not48676, label %OP4520.PUSH1, label %return, !prof !6

OP4520.PUSH1:                                     ; preds = %OP4515.PUSH1
  store i256 16, ptr %sp15302, align 16
  %dup315337 = load i256, ptr %sp15262, align 16
  store i256 %dup315337, ptr %sp15319, align 16
  %2085 = add i256 %dup315337, 36
  store i256 %2085, ptr %sp15306, align 16
  %2086 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2085, i256 16, ptr %arg.ecx.addr)
  %.not48677 = icmp eq i8 %2086, 0
  br i1 %.not48677, label %OP4525.PUSH32, label %return, !prof !6

OP4525.PUSH32:                                    ; preds = %OP4520.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp15302, align 16
  %dup315356 = load i256, ptr %sp15262, align 16
  store i256 %dup315356, ptr %sp15319, align 16
  %2087 = add i256 %dup315356, 68
  store i256 %2087, ptr %sp15306, align 16
  %2088 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2087, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48678 = icmp eq i8 %2088, 0
  br i1 %.not48678, label %OP4530.SWAP1, label %return, !prof !6

OP4530.SWAP1:                                     ; preds = %OP4525.PUSH32
  %swap.a15371 = load i256, ptr %sp15262, align 16
  %swap.b15373 = load i256, ptr %sp15258, align 16
  store i256 %swap.a15371, ptr %sp15258, align 16
  store i256 %swap.b15373, ptr %sp15262, align 16
  %mload.out.slot15377 = alloca i256, align 16
  %2089 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b15373, ptr %mload.out.slot15377, ptr %arg.ecx.addr)
  %.not48679 = icmp eq i8 %2089, 0
  br i1 %.not48679, label %OP4531.MLOAD.contd, label %return, !prof !6

OP4531.MLOAD.contd:                               ; preds = %OP4530.SWAP1
  %mload.out15378 = load i256, ptr %mload.out.slot15377, align 16
  %swap.b15384 = load i256, ptr %sp15258, align 16
  %2090 = sub i256 %swap.b15384, %mload.out15378
  store i256 100, ptr %sp15302, align 16
  %2091 = add i256 %2090, 100
  store i256 %2091, ptr %sp15258, align 16
  store i256 %mload.out15378, ptr %sp15262, align 16
  %2092 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15258, i8 16)
  %.not48680 = icmp eq i8 %2092, 0
  %spec.select36607 = select i1 %.not48680, i8 16, i8 %2092, !prof !6
  br label %return

OP4540.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54087 = add i64 %len.addr.357, 2
  %.pre54241 = add i64 %len.addr.357, 1
  br label %OP4540.JUMPDEST

OP4540.JUMPDEST:                                  ; preds = %OP4540.JUMPDEST.loopexit, %OP4501.PUSH21
  %.pre-phi54242 = phi i64 [ %.pre54241, %OP4540.JUMPDEST.loopexit ], [ %2075, %OP4501.PUSH21 ]
  %.pre-phi54088 = phi i64 [ %.pre54087, %OP4540.JUMPDEST.loopexit ], [ %2077, %OP4501.PUSH21 ]
  %len.addr.188 = phi i64 [ %len.addr.357, %OP4540.JUMPDEST.loopexit ], [ %len.addr.187, %OP4501.PUSH21 ]
  %contract.caller.addr15417 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller15418 = load i160, ptr %contract.caller.addr15417, align 16
  %2093 = tail call i160 @llvm.bswap.i160(i160 %contract.caller15418)
  %2094 = zext i160 %2093 to i256
  %sp15419 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.188
  %sp15421 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54242
  store i256 0, ptr %sp15419, align 16
  store i256 %2094, ptr %sp15421, align 16
  %2095 = add i64 %len.addr.188, 3
  %sp15430 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54088
  store i256 0, ptr %sp15430, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !471)
  %ecx.memory.addr.i49923 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49924 = load ptr, ptr %ecx.memory.addr.i49923, align 8, !alias.scope !471
  %ecx.memory.len.addr.i49925 = getelementptr inbounds i8, ptr %ecx.memory.i49924, i64 16
  %ecx.memory.len.i49926 = load i64, ptr %ecx.memory.len.addr.i49925, align 8, !noalias !471
  %ecx.memory.last_checkpoint.addr.i49927 = getelementptr inbounds i8, ptr %ecx.memory.i49924, i64 48
  %ecx.memory.last_checkpoint.i49928 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49927, align 8, !noalias !471
  %2096 = sub i64 %ecx.memory.len.i49926, %ecx.memory.last_checkpoint.i49928
  %2097 = icmp ult i64 %2096, 32
  br i1 %2097, label %resize.i49934, label %OP4546.PUSH1, !prof !5

resize.i49934:                                    ; preds = %OP4540.JUMPDEST
  %2098 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i49935 = icmp eq i8 %2098, 0
  br i1 %.not.i49935, label %OP4546.PUSH1, label %return, !prof !6

OP4546.PUSH1:                                     ; preds = %OP4540.JUMPDEST, %resize.i49934
  %ecx.memory.buffer.ptr.shared.addr.i49930 = getelementptr inbounds i8, ptr %ecx.memory.i49924, i64 8
  %ecx.memory.buffer.ptr.shared.i49931 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49930, align 8, !noalias !471
  %ecx.memory.buffer.ptr.i49932 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49931, i64 %ecx.memory.last_checkpoint.i49928
  %2099 = tail call i256 @llvm.bswap.i256(i256 %2094)
  store i256 %2099, ptr %ecx.memory.buffer.ptr.i49932, align 1, !noalias !471
  store i256 12, ptr %sp15421, align 16
  store i256 32, ptr %sp15430, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !474)
  %ecx.memory.i49938 = load ptr, ptr %ecx.memory.addr.i49923, align 8, !alias.scope !474
  %ecx.memory.len.addr.i49939 = getelementptr inbounds i8, ptr %ecx.memory.i49938, i64 16
  %ecx.memory.len.i49940 = load i64, ptr %ecx.memory.len.addr.i49939, align 8, !noalias !474
  %ecx.memory.last_checkpoint.addr.i49941 = getelementptr inbounds i8, ptr %ecx.memory.i49938, i64 48
  %ecx.memory.last_checkpoint.i49942 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49941, align 8, !noalias !474
  %2100 = sub i64 %ecx.memory.len.i49940, %ecx.memory.last_checkpoint.i49942
  %2101 = icmp ult i64 %2100, 64
  br i1 %2101, label %resize.i49949, label %OP4549.PUSH1, !prof !5

resize.i49949:                                    ; preds = %OP4546.PUSH1
  %2102 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i49950 = icmp eq i8 %2102, 0
  br i1 %.not.i49950, label %OP4549.PUSH1, label %return, !prof !6

OP4549.PUSH1:                                     ; preds = %OP4546.PUSH1, %resize.i49949
  %ecx.memory.buffer.ptr.shared.addr.i49944 = getelementptr inbounds i8, ptr %ecx.memory.i49938, i64 8
  %ecx.memory.buffer.ptr.shared.i49945 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49944, align 8, !noalias !474
  %ecx.memory.buffer.ptr.i49946 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49945, i64 %ecx.memory.last_checkpoint.i49942
  %slot.i49947 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49946, i64 32
  store i256 5427754182999196660479889922282245680622030531201901439349574250370927951872, ptr %slot.i49947, align 1, !noalias !474
  store i256 64, ptr %sp15421, align 16
  %swap.b15451 = load i256, ptr %sp15419, align 16
  store i256 64, ptr %sp15419, align 16
  store i256 %swap.b15451, ptr %sp15421, align 16
  %2103 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15419)
  %.not48683 = icmp eq i8 %2103, 0
  br i1 %.not48683, label %OP4552.SLOAD, label %return, !prof !6

OP4552.SLOAD:                                     ; preds = %OP4549.PUSH1
  %2104 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15419, i8 17)
  %.not48684 = icmp eq i8 %2104, 0
  br i1 %.not48684, label %OP4553.PUSH1, label %return, !prof !6

OP4553.PUSH1:                                     ; preds = %OP4552.SLOAD
  store i256 255, ptr %sp15421, align 16
  %b15462 = load i256, ptr %sp15419, align 16
  %2105 = and i256 %b15462, 255
  store i256 %2105, ptr %sp15419, align 16
  %.not48685 = icmp eq i256 %2105, 0
  br i1 %.not48685, label %OP4557.PUSH1, label %OP4595.JUMPDEST

OP4557.PUSH1:                                     ; preds = %OP4553.PUSH1
  store i256 64, ptr %sp15419, align 16
  %mload.out.slot15472 = alloca i256, align 16
  %2106 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15472, ptr %arg.ecx.addr)
  %.not48686 = icmp eq i8 %2106, 0
  br i1 %.not48686, label %OP4558.MLOAD.contd, label %return, !prof !6

OP4558.MLOAD.contd:                               ; preds = %OP4557.PUSH1
  %mload.out15473 = load i256, ptr %mload.out.slot15472, align 16
  store i256 %mload.out15473, ptr %sp15419, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp15421, align 16
  store i256 %mload.out15473, ptr %sp15430, align 16
  %2107 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15473, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48687 = icmp eq i8 %2107, 0
  br i1 %.not48687, label %OP4562.PUSH1, label %return, !prof !6

OP4562.PUSH1:                                     ; preds = %OP4558.MLOAD.contd
  store i256 4, ptr %sp15421, align 16
  %b15492 = load i256, ptr %sp15419, align 16
  %2108 = add i256 %b15492, 4
  store i256 %2108, ptr %sp15419, align 16
  store i256 %2108, ptr %sp15421, align 16
  %sp15503 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2095
  %2109 = add i256 %b15492, 36
  store i256 %2109, ptr %sp15430, align 16
  %sp15517 = getelementptr i256, ptr %sp15419, i64 4
  store i256 32, ptr %sp15503, align 16
  store i256 %2108, ptr %sp15517, align 16
  %2110 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2108, i256 32, ptr %arg.ecx.addr)
  %.not48688 = icmp eq i8 %2110, 0
  br i1 %.not48688, label %OP4573.PUSH1, label %return, !prof !6

OP4573.PUSH1:                                     ; preds = %OP4562.PUSH1
  store i256 33, ptr %sp15503, align 16
  %dup215537 = load i256, ptr %sp15430, align 16
  store i256 %dup215537, ptr %sp15517, align 16
  %2111 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup215537, i256 33, ptr %arg.ecx.addr)
  %.not48689 = icmp eq i8 %2111, 0
  br i1 %.not48689, label %OP4576.PUSH1, label %return, !prof !6

OP4576.PUSH1:                                     ; preds = %OP4573.PUSH1
  store i256 32, ptr %sp15503, align 16
  %b15550 = load i256, ptr %sp15430, align 16
  %2112 = add i256 %b15550, 32
  store i256 %2112, ptr %sp15430, align 16
  store i256 22688, ptr %sp15517, align 16
  %sp15559 = getelementptr i256, ptr %sp15419, i64 5
  store i256 33, ptr %sp15503, align 16
  store i256 %2112, ptr %sp15559, align 16
  %2113 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15503)
  %.not48690 = icmp eq i8 %2113, 0
  br i1 %.not48690, label %OP4583.PUSH1, label %return, !prof !6

OP4583.PUSH1:                                     ; preds = %OP4576.PUSH1
  store i256 64, ptr %sp15503, align 16
  %b15573 = load i256, ptr %sp15430, align 16
  %2114 = add i256 %b15573, 64
  store i256 %2114, ptr %sp15430, align 16
  %swap.b15579 = load i256, ptr %sp15419, align 16
  store i256 %2114, ptr %sp15419, align 16
  store i256 %swap.b15579, ptr %sp15430, align 16
  store i256 64, ptr %sp15421, align 16
  %mload.out.slot15587 = alloca i256, align 16
  %2115 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15587, ptr %arg.ecx.addr)
  %.not48691 = icmp eq i8 %2115, 0
  br i1 %.not48691, label %OP4589.MLOAD.contd, label %return, !prof !6

OP4589.MLOAD.contd:                               ; preds = %OP4583.PUSH1
  %mload.out15588 = load i256, ptr %mload.out.slot15587, align 16
  store i256 %mload.out15588, ptr %sp15421, align 16
  store i256 %mload.out15588, ptr %sp15430, align 16
  %swap.b15598 = load i256, ptr %sp15419, align 16
  store i256 %swap.b15598, ptr %sp15430, align 16
  %2116 = sub i256 %swap.b15598, %mload.out15588
  store i256 %2116, ptr %sp15419, align 16
  store i256 %mload.out15588, ptr %sp15421, align 16
  %2117 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15419, i8 16)
  %.not48692 = icmp eq i8 %2117, 0
  %spec.select36608 = select i1 %.not48692, i8 16, i8 %2117, !prof !6
  br label %return

OP4595.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.caller15615.pre = load i160, ptr %contract.caller.addr16198, align 16
  %.pre54243 = tail call i160 @llvm.bswap.i160(i160 %contract.caller15615.pre)
  %.pre54245 = zext i160 %.pre54243 to i256
  %.pre54247 = add i64 %len.addr.357, 3
  br label %OP4595.JUMPDEST

OP4595.JUMPDEST:                                  ; preds = %OP4595.JUMPDEST.loopexit, %OP4553.PUSH1
  %.pre-phi54248 = phi i64 [ %.pre54247, %OP4595.JUMPDEST.loopexit ], [ %2095, %OP4553.PUSH1 ]
  %.pre-phi54246 = phi i256 [ %.pre54245, %OP4595.JUMPDEST.loopexit ], [ %2094, %OP4553.PUSH1 ]
  %len.addr.189 = phi i64 [ %len.addr.357, %OP4595.JUMPDEST.loopexit ], [ %len.addr.188, %OP4553.PUSH1 ]
  %sp15616 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.189
  store i256 %.pre-phi54246, ptr %sp15616, align 16
  %sp15618 = getelementptr i256, ptr %sp15616, i64 1
  store i256 9106, ptr %sp15618, align 16
  %sp15622 = getelementptr i256, ptr %sp15616, i64 2
  store i256 %.pre-phi54246, ptr %sp15622, align 16
  br label %OP7491.JUMPDEST

OP4601.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2118 = add i64 %len.addr.357, -1
  %sp15626 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2118
  %a15627 = load i256, ptr %sp15626, align 16
  %2119 = icmp eq i256 %a15627, 0
  %2120 = zext i1 %2119 to i256
  store i256 %2120, ptr %sp15626, align 16
  br i1 %2119, label %OP4643.JUMPDEST, label %OP4605.PUSH1

OP4605.PUSH1:                                     ; preds = %OP4601.JUMPDEST
  store i256 64, ptr %sp15626, align 16
  %mload.out.slot15637 = alloca i256, align 16
  %2121 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15637, ptr %arg.ecx.addr)
  %.not48212 = icmp eq i8 %2121, 0
  br i1 %.not48212, label %OP4606.MLOAD.contd, label %return, !prof !6

OP4606.MLOAD.contd:                               ; preds = %OP4605.PUSH1
  %mload.out15638 = load i256, ptr %mload.out.slot15637, align 16
  store i256 %mload.out15638, ptr %sp15626, align 16
  %2122 = add i64 %len.addr.357, 1
  %sp15641 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp15641, align 16
  %2123 = add i64 %len.addr.357, 2
  %sp15643 = getelementptr i256, ptr %sp15641, i64 -1
  %sp15645 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2122
  store i256 %mload.out15638, ptr %sp15645, align 16
  %2124 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15638, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48213 = icmp eq i8 %2124, 0
  br i1 %.not48213, label %OP4610.PUSH1, label %return, !prof !6

OP4610.PUSH1:                                     ; preds = %OP4606.MLOAD.contd
  store i256 4, ptr %sp15641, align 16
  %b15657 = load i256, ptr %sp15626, align 16
  %2125 = add i256 %b15657, 4
  store i256 %2125, ptr %sp15626, align 16
  store i256 %2125, ptr %sp15641, align 16
  store i256 %2125, ptr %sp15645, align 16
  %sp15668 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2123
  store i256 32, ptr %sp15668, align 16
  %2126 = add i256 %b15657, 36
  store i256 %2126, ptr %sp15645, align 16
  store i256 %2125, ptr %sp15668, align 16
  %sp15682 = getelementptr i256, ptr %sp15641, i64 3
  store i256 %2126, ptr %sp15682, align 16
  store i256 32, ptr %sp15668, align 16
  store i256 %2125, ptr %sp15682, align 16
  %2127 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2125, i256 32, ptr %arg.ecx.addr)
  %.not48214 = icmp eq i8 %2127, 0
  br i1 %.not48214, label %OP4621.PUSH1, label %return, !prof !6

OP4621.PUSH1:                                     ; preds = %OP4610.PUSH1
  store i256 37, ptr %sp15668, align 16
  %dup215702 = load i256, ptr %sp15645, align 16
  store i256 %dup215702, ptr %sp15682, align 16
  %2128 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup215702, i256 37, ptr %arg.ecx.addr)
  %.not48215 = icmp eq i8 %2128, 0
  br i1 %.not48215, label %OP4624.PUSH1, label %return, !prof !6

OP4624.PUSH1:                                     ; preds = %OP4621.PUSH1
  store i256 32, ptr %sp15668, align 16
  %b15715 = load i256, ptr %sp15645, align 16
  %2129 = add i256 %b15715, 32
  store i256 %2129, ptr %sp15645, align 16
  store i256 %2129, ptr %sp15668, align 16
  store i256 23300, ptr %sp15682, align 16
  %sp15724 = getelementptr i256, ptr %sp15641, i64 4
  store i256 37, ptr %sp15724, align 16
  store i256 37, ptr %sp15668, align 16
  store i256 %2129, ptr %sp15724, align 16
  %2130 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15668)
  %.not48216 = icmp eq i8 %2130, 0
  br i1 %.not48216, label %OP4631.PUSH1, label %return, !prof !6

OP4631.PUSH1:                                     ; preds = %OP4624.PUSH1
  store i256 64, ptr %sp15668, align 16
  %b15738 = load i256, ptr %sp15645, align 16
  %2131 = add i256 %b15738, 64
  store i256 %2131, ptr %sp15645, align 16
  %swap.b15744 = load i256, ptr %sp15643, align 16
  store i256 %2131, ptr %sp15643, align 16
  store i256 %swap.b15744, ptr %sp15645, align 16
  store i256 64, ptr %sp15641, align 16
  %mload.out.slot15752 = alloca i256, align 16
  %2132 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15752, ptr %arg.ecx.addr)
  %.not48217 = icmp eq i8 %2132, 0
  br i1 %.not48217, label %OP4637.MLOAD.contd, label %return, !prof !6

OP4637.MLOAD.contd:                               ; preds = %OP4631.PUSH1
  %mload.out15753 = load i256, ptr %mload.out.slot15752, align 16
  store i256 %mload.out15753, ptr %sp15641, align 16
  store i256 %mload.out15753, ptr %sp15645, align 16
  %swap.b15763 = load i256, ptr %sp15643, align 16
  store i256 %mload.out15753, ptr %sp15643, align 16
  store i256 %swap.b15763, ptr %sp15645, align 16
  %2133 = sub i256 %swap.b15763, %mload.out15753
  store i256 %2133, ptr %sp15641, align 16
  store i256 %2133, ptr %sp15643, align 16
  store i256 %mload.out15753, ptr %sp15641, align 16
  %2134 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15643, i8 16)
  %.not48218 = icmp eq i8 %2134, 0
  %spec.select36609 = select i1 %.not48218, i8 16, i8 %2134, !prof !6
  br label %return

OP4643.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4601.JUMPDEST
  %len.addr.190 = phi i64 [ %2118, %OP4601.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp15779 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.190
  store i256 0, ptr %sp15779, align 16
  %sp15781 = getelementptr i256, ptr %sp15779, i64 1
  store i256 9203, ptr %sp15781, align 16
  %2135 = add i64 %len.addr.190, 3
  %contract.caller15784 = load i160, ptr %contract.caller.addr16198, align 16
  %2136 = tail call i160 @llvm.bswap.i160(i160 %contract.caller15784)
  %2137 = zext i160 %2136 to i256
  %sp15785 = getelementptr i256, ptr %sp15779, i64 2
  store i256 %2137, ptr %sp15785, align 16
  br label %OP7746.JUMPDEST

OP4649.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2138 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp15789 = getelementptr i256, ptr %2138, i64 -1
  %swap.a15790 = load i256, ptr %sp15789, align 16
  %sp15791 = getelementptr i256, ptr %2138, i64 -2
  %swap.b15792 = load i256, ptr %sp15791, align 16
  store i256 %swap.a15790, ptr %sp15791, align 16
  store i256 %swap.b15792, ptr %sp15789, align 16
  %2139 = add i64 %len.addr.357, -1
  %sp15795 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2139
  store i256 0, ptr %sp15795, align 16
  %sp15797 = getelementptr i256, ptr %2138, i64 -4
  %dup415798 = load i256, ptr %sp15797, align 16
  store i256 %dup415798, ptr %2138, align 16
  %2140 = icmp ne i256 %dup415798, 0
  %2141 = zext i1 %2140 to i256
  store i256 %2141, ptr %sp15795, align 16
  br i1 %2140, label %OP4695.JUMPDEST, label %OP4657.PUSH1

OP4657.PUSH1:                                     ; preds = %OP4649.JUMPDEST
  %sp15789.le = getelementptr i256, ptr %2138, i64 -1
  %2142 = add i64 %len.addr.357, 1
  store i256 64, ptr %sp15795, align 16
  %mload.out.slot15814 = alloca i256, align 16
  %2143 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15814, ptr %arg.ecx.addr)
  %.not48197 = icmp eq i8 %2143, 0
  br i1 %.not48197, label %OP4658.MLOAD.contd, label %return, !prof !6

OP4658.MLOAD.contd:                               ; preds = %OP4657.PUSH1
  %mload.out15815 = load i256, ptr %mload.out.slot15814, align 16
  store i256 %mload.out15815, ptr %sp15795, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %2138, align 16
  %2144 = add i64 %len.addr.357, 2
  %sp15822 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2142
  store i256 %mload.out15815, ptr %sp15822, align 16
  %2145 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15815, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48198 = icmp eq i8 %2145, 0
  br i1 %.not48198, label %OP4662.PUSH1, label %return, !prof !6

OP4662.PUSH1:                                     ; preds = %OP4658.MLOAD.contd
  store i256 4, ptr %2138, align 16
  %b15834 = load i256, ptr %sp15795, align 16
  %2146 = add i256 %b15834, 4
  store i256 %2146, ptr %sp15795, align 16
  store i256 %2146, ptr %2138, align 16
  store i256 %2146, ptr %sp15822, align 16
  %sp15845 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2144
  store i256 32, ptr %sp15845, align 16
  %2147 = add i256 %b15834, 36
  store i256 %2147, ptr %sp15822, align 16
  store i256 %2146, ptr %sp15845, align 16
  %sp15859 = getelementptr i256, ptr %2138, i64 3
  store i256 %2147, ptr %sp15859, align 16
  store i256 32, ptr %sp15845, align 16
  store i256 %2146, ptr %sp15859, align 16
  %2148 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2146, i256 32, ptr %arg.ecx.addr)
  %.not48199 = icmp eq i8 %2148, 0
  br i1 %.not48199, label %OP4673.PUSH1, label %return, !prof !6

OP4673.PUSH1:                                     ; preds = %OP4662.PUSH1
  store i256 41, ptr %sp15845, align 16
  %dup215879 = load i256, ptr %sp15822, align 16
  store i256 %dup215879, ptr %sp15859, align 16
  %2149 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup215879, i256 41, ptr %arg.ecx.addr)
  %.not48200 = icmp eq i8 %2149, 0
  br i1 %.not48200, label %OP4676.PUSH1, label %return, !prof !6

OP4676.PUSH1:                                     ; preds = %OP4673.PUSH1
  store i256 32, ptr %sp15845, align 16
  %b15892 = load i256, ptr %sp15822, align 16
  %2150 = add i256 %b15892, 32
  store i256 %2150, ptr %sp15822, align 16
  store i256 %2150, ptr %sp15845, align 16
  store i256 22176, ptr %sp15859, align 16
  %sp15901 = getelementptr i256, ptr %2138, i64 4
  store i256 41, ptr %sp15901, align 16
  store i256 41, ptr %sp15845, align 16
  store i256 %2150, ptr %sp15901, align 16
  %2151 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15845)
  %.not48201 = icmp eq i8 %2151, 0
  br i1 %.not48201, label %OP4683.PUSH1, label %return, !prof !6

OP4683.PUSH1:                                     ; preds = %OP4676.PUSH1
  store i256 64, ptr %sp15845, align 16
  %b15915 = load i256, ptr %sp15822, align 16
  %2152 = add i256 %b15915, 64
  store i256 %2152, ptr %sp15822, align 16
  %swap.b15921 = load i256, ptr %sp15789.le, align 16
  store i256 %2152, ptr %sp15789.le, align 16
  store i256 %swap.b15921, ptr %sp15822, align 16
  store i256 64, ptr %2138, align 16
  %mload.out.slot15929 = alloca i256, align 16
  %2153 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15929, ptr %arg.ecx.addr)
  %.not48202 = icmp eq i8 %2153, 0
  br i1 %.not48202, label %OP4689.MLOAD.contd, label %return, !prof !6

OP4689.MLOAD.contd:                               ; preds = %OP4683.PUSH1
  %mload.out15930 = load i256, ptr %mload.out.slot15929, align 16
  store i256 %mload.out15930, ptr %2138, align 16
  store i256 %mload.out15930, ptr %sp15822, align 16
  %swap.b15940 = load i256, ptr %sp15789.le, align 16
  store i256 %mload.out15930, ptr %sp15789.le, align 16
  store i256 %swap.b15940, ptr %sp15822, align 16
  %2154 = sub i256 %swap.b15940, %mload.out15930
  store i256 %2154, ptr %2138, align 16
  store i256 %2154, ptr %sp15789.le, align 16
  store i256 %mload.out15930, ptr %2138, align 16
  %2155 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp15789.le, i8 16)
  %.not48203 = icmp eq i8 %2155, 0
  %spec.select36610 = select i1 %.not48203, i8 16, i8 %2155, !prof !6
  br label %return

OP4695.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4649.JUMPDEST
  %len.addr.191 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %2139, %OP4649.JUMPDEST ]
  %2156 = add i64 %len.addr.191, 1
  %2157 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.191
  %sp15956 = getelementptr i256, ptr %2157, i64 -3
  %dup315957 = load i256, ptr %sp15956, align 16
  store i256 %dup315957, ptr %2157, align 16
  %sp15960 = getelementptr i256, ptr %2157, i64 -1
  %dup215961 = load i256, ptr %sp15960, align 16
  %sp15962 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2156
  store i256 %dup215961, ptr %sp15962, align 16
  %2158 = icmp uge i256 %dup215961, %dup315957
  %2159 = zext i1 %2158 to i256
  store i256 %2159, ptr %2157, align 16
  br i1 %2158, label %OP4740.JUMPDEST, label %OP4702.PUSH1

OP4702.PUSH1:                                     ; preds = %OP4695.JUMPDEST
  %2160 = add i64 %len.addr.191, 2
  store i256 64, ptr %2157, align 16
  %mload.out.slot15981 = alloca i256, align 16
  %2161 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot15981, ptr %arg.ecx.addr)
  %.not48204 = icmp eq i8 %2161, 0
  br i1 %.not48204, label %OP4703.MLOAD.contd, label %return, !prof !6

OP4703.MLOAD.contd:                               ; preds = %OP4702.PUSH1
  %mload.out15982 = load i256, ptr %mload.out.slot15981, align 16
  store i256 %mload.out15982, ptr %2157, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp15962, align 16
  %2162 = add i64 %len.addr.191, 3
  %sp15989 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2160
  store i256 %mload.out15982, ptr %sp15989, align 16
  %2163 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out15982, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48205 = icmp eq i8 %2163, 0
  br i1 %.not48205, label %OP4707.PUSH1, label %return, !prof !6

OP4707.PUSH1:                                     ; preds = %OP4703.MLOAD.contd
  store i256 4, ptr %sp15962, align 16
  %b16001 = load i256, ptr %2157, align 16
  %2164 = add i256 %b16001, 4
  store i256 %2164, ptr %2157, align 16
  store i256 %2164, ptr %sp15962, align 16
  store i256 %2164, ptr %sp15989, align 16
  %sp16012 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2162
  store i256 32, ptr %sp16012, align 16
  %2165 = add i256 %b16001, 36
  store i256 %2165, ptr %sp15989, align 16
  store i256 %2164, ptr %sp16012, align 16
  %sp16026 = getelementptr i256, ptr %2157, i64 4
  store i256 %2165, ptr %sp16026, align 16
  store i256 32, ptr %sp16012, align 16
  store i256 %2164, ptr %sp16026, align 16
  %2166 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2164, i256 32, ptr %arg.ecx.addr)
  %.not48206 = icmp eq i8 %2166, 0
  br i1 %.not48206, label %OP4718.PUSH1, label %return, !prof !6

OP4718.PUSH1:                                     ; preds = %OP4707.PUSH1
  store i256 38, ptr %sp16012, align 16
  %dup216046 = load i256, ptr %sp15989, align 16
  store i256 %dup216046, ptr %sp16026, align 16
  %2167 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup216046, i256 38, ptr %arg.ecx.addr)
  %.not48207 = icmp eq i8 %2167, 0
  br i1 %.not48207, label %OP4721.PUSH1, label %return, !prof !6

OP4721.PUSH1:                                     ; preds = %OP4718.PUSH1
  store i256 32, ptr %sp16012, align 16
  %b16059 = load i256, ptr %sp15989, align 16
  %2168 = add i256 %b16059, 32
  store i256 %2168, ptr %sp15989, align 16
  store i256 %2168, ptr %sp16012, align 16
  store i256 22650, ptr %sp16026, align 16
  %sp16068 = getelementptr i256, ptr %2157, i64 5
  store i256 38, ptr %sp16068, align 16
  store i256 38, ptr %sp16012, align 16
  store i256 %2168, ptr %sp16068, align 16
  %2169 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16012)
  %.not48208 = icmp eq i8 %2169, 0
  br i1 %.not48208, label %OP4728.PUSH1, label %return, !prof !6

OP4728.PUSH1:                                     ; preds = %OP4721.PUSH1
  store i256 64, ptr %sp16012, align 16
  %b16082 = load i256, ptr %sp15989, align 16
  %2170 = add i256 %b16082, 64
  store i256 %2170, ptr %sp15989, align 16
  %swap.b16088 = load i256, ptr %2157, align 16
  store i256 %2170, ptr %2157, align 16
  store i256 %swap.b16088, ptr %sp15989, align 16
  store i256 64, ptr %sp15962, align 16
  %mload.out.slot16096 = alloca i256, align 16
  %2171 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16096, ptr %arg.ecx.addr)
  %.not48209 = icmp eq i8 %2171, 0
  br i1 %.not48209, label %OP4734.MLOAD.contd, label %return, !prof !6

OP4734.MLOAD.contd:                               ; preds = %OP4728.PUSH1
  %mload.out16097 = load i256, ptr %mload.out.slot16096, align 16
  store i256 %mload.out16097, ptr %sp15962, align 16
  store i256 %mload.out16097, ptr %sp15989, align 16
  %swap.b16107 = load i256, ptr %2157, align 16
  store i256 %mload.out16097, ptr %2157, align 16
  store i256 %swap.b16107, ptr %sp15989, align 16
  %2172 = sub i256 %swap.b16107, %mload.out16097
  store i256 %2172, ptr %sp15962, align 16
  store i256 %2172, ptr %2157, align 16
  store i256 %mload.out16097, ptr %sp15962, align 16
  %2173 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %2157, i8 16)
  %.not48210 = icmp eq i8 %2173, 0
  %spec.select36611 = select i1 %.not48210, i8 16, i8 %2173, !prof !6
  br label %return

OP4740.JUMPDEST:                                  ; preds = %dynamic_jump_table.OP4740.JUMPDEST_crit_edge, %OP4695.JUMPDEST
  %.pre-phi54302 = phi i64 [ %.pre54301, %dynamic_jump_table.OP4740.JUMPDEST_crit_edge ], [ %2156, %OP4695.JUMPDEST ]
  %len.addr.192 = phi i64 [ %len.addr.357, %dynamic_jump_table.OP4740.JUMPDEST_crit_edge ], [ %len.addr.191, %OP4695.JUMPDEST ]
  %sp16123 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.192
  store i256 11, ptr %sp16123, align 16
  %2174 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16123, i8 17)
  %.not48211 = icmp eq i8 %2174, 0
  br i1 %.not48211, label %OP4743.PUSH2, label %return, !prof !6

OP4743.PUSH2:                                     ; preds = %OP4740.JUMPDEST
  %sp16127 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54302
  store i256 9396, ptr %sp16127, align 16
  %swap.b16132 = load i256, ptr %sp16123, align 16
  store i256 9396, ptr %sp16123, align 16
  store i256 %swap.b16132, ptr %sp16127, align 16
  %2175 = add i64 %len.addr.192, 3
  %sp16134 = getelementptr i256, ptr %sp16123, i64 -3
  %dup516135 = load i256, ptr %sp16134, align 16
  %sp16136 = getelementptr i256, ptr %sp16123, i64 2
  store i256 %dup516135, ptr %sp16136, align 16
  br label %OP7701.JUMPDEST

OP4748.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp16140 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 11, ptr %sp16140, align 16
  %2176 = add i64 %len.addr.357, -1
  %sp16142 = getelementptr i256, ptr %sp16140, i64 -1
  %2177 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr %sp16142, i8 17)
  %.not48195 = icmp eq i8 %2177, 0
  br i1 %.not48195, label %OP4751.PUSH2, label %return, !prof !6

OP4751.PUSH2:                                     ; preds = %OP4748.JUMPDEST
  %sp16144 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2176
  store i256 9413, ptr %sp16144, align 16
  %contract.caller16147 = load i160, ptr %contract.caller.addr16198, align 16
  %2178 = tail call i160 @llvm.bswap.i160(i160 %contract.caller16147)
  %2179 = zext i160 %2178 to i256
  store i256 %2179, ptr %sp16140, align 16
  %sp16150 = getelementptr i256, ptr %sp16140, i64 1
  store i256 8655, ptr %sp16150, align 16
  %sp16152 = getelementptr i256, ptr %sp16140, i64 -2
  %dup416153 = load i256, ptr %sp16152, align 16
  %sp16154 = getelementptr i256, ptr %sp16140, i64 2
  store i256 %dup416153, ptr %sp16154, align 16
  %2180 = add i64 %len.addr.357, 4
  %sp16156 = getelementptr i256, ptr %sp16140, i64 -4
  %dup716157 = load i256, ptr %sp16156, align 16
  %sp16158 = getelementptr i256, ptr %sp16140, i64 3
  store i256 %dup716157, ptr %sp16158, align 16
  br label %OP7701.JUMPDEST

OP4758.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp16162 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp16162, align 16
  %2181 = add i64 %len.addr.357, 2
  %sp16166 = getelementptr i256, ptr %sp16162, i64 1
  store i256 64, ptr %sp16166, align 16
  %mload.out.slot16170 = alloca i256, align 16
  %2182 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16170, ptr %arg.ecx.addr)
  %.not48187 = icmp eq i8 %2182, 0
  br i1 %.not48187, label %OP4761.MLOAD.contd, label %return, !prof !6

OP4761.MLOAD.contd:                               ; preds = %OP4758.JUMPDEST
  %mload.out16171 = load i256, ptr %mload.out.slot16170, align 16
  store i256 %mload.out16171, ptr %sp16166, align 16
  %sp16174 = getelementptr i256, ptr %sp16162, i64 -3
  %dup516175 = load i256, ptr %sp16174, align 16
  %sp16176 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2181
  store i256 %dup516175, ptr %sp16176, align 16
  %sp16180 = getelementptr i256, ptr %sp16162, i64 3
  store i256 %mload.out16171, ptr %sp16180, align 16
  %2183 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out16171, i256 %dup516175, ptr %arg.ecx.addr)
  %.not48188 = icmp eq i8 %2183, 0
  br i1 %.not48188, label %OP4765.SWAP1, label %return, !prof !6

OP4765.SWAP1:                                     ; preds = %OP4761.MLOAD.contd
  %swap.a16188 = load i256, ptr %sp16166, align 16
  %swap.b16190 = load i256, ptr %sp16162, align 16
  store i256 %swap.a16188, ptr %sp16162, align 16
  store i256 %swap.b16190, ptr %sp16166, align 16
  %mload.out.slot16194 = alloca i256, align 16
  %2184 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b16190, ptr %mload.out.slot16194, ptr %arg.ecx.addr)
  %.not48189 = icmp eq i8 %2184, 0
  br i1 %.not48189, label %OP4766.MLOAD.contd, label %return, !prof !6

OP4766.MLOAD.contd:                               ; preds = %OP4765.SWAP1
  %mload.out16195 = load i256, ptr %mload.out.slot16194, align 16
  store i256 %mload.out16195, ptr %sp16166, align 16
  %contract.caller16199 = load i160, ptr %contract.caller.addr16198, align 16
  %2185 = tail call i160 @llvm.bswap.i160(i160 %contract.caller16199)
  %2186 = zext i160 %2185 to i256
  store i256 %2186, ptr %sp16176, align 16
  %swap.b16205 = load i256, ptr %sp16162, align 16
  store i256 %2186, ptr %sp16162, align 16
  store i256 %swap.b16205, ptr %sp16176, align 16
  store i256 -23479700639809614513350973650737293202897849395893626491911281734745980306267, ptr %sp16180, align 16
  store i256 -23479700639809614513350973650737293202897849395893626491911281734745980306267, ptr %sp16166, align 16
  store i256 %mload.out16195, ptr %sp16180, align 16
  store i256 %mload.out16195, ptr %sp16176, align 16
  store i256 %swap.b16205, ptr %sp16180, align 16
  %sp16221 = getelementptr i256, ptr %sp16162, i64 4
  store i256 %mload.out16195, ptr %sp16221, align 16
  store i256 %mload.out16195, ptr %sp16180, align 16
  store i256 %swap.b16205, ptr %sp16221, align 16
  %2187 = sub i256 %swap.b16205, %mload.out16195
  store i256 %2187, ptr %sp16180, align 16
  store i256 32, ptr %sp16221, align 16
  %2188 = add i256 %2187, 32
  store i256 %2188, ptr %sp16180, align 16
  store i256 %2188, ptr %sp16176, align 16
  store i256 %mload.out16195, ptr %sp16180, align 16
  %2189 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16162, i8 2)
  %.not48190 = icmp eq i8 %2189, 0
  br i1 %.not48190, label %OP4779.PUSH1, label %return, !prof !6

OP4779.PUSH1:                                     ; preds = %OP4766.MLOAD.contd
  store i256 64, ptr %sp16162, align 16
  store i256 64, ptr %sp16166, align 16
  %mload.out.slot16257 = alloca i256, align 16
  %2190 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16257, ptr %arg.ecx.addr)
  %.not48191 = icmp eq i8 %2190, 0
  br i1 %.not48191, label %OP4781.MLOAD.contd, label %return, !prof !6

OP4781.MLOAD.contd:                               ; preds = %OP4779.PUSH1
  %mload.out16258 = load i256, ptr %mload.out.slot16257, align 16
  store i256 %mload.out16258, ptr %sp16166, align 16
  %dup516262 = load i256, ptr %sp16174, align 16
  store i256 %dup516262, ptr %sp16176, align 16
  store i256 %mload.out16258, ptr %sp16180, align 16
  %2191 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out16258, i256 %dup516262, ptr %arg.ecx.addr)
  %.not48192 = icmp eq i8 %2191, 0
  br i1 %.not48192, label %OP4785.SWAP1, label %return, !prof !6

OP4785.SWAP1:                                     ; preds = %OP4781.MLOAD.contd
  %swap.a16275 = load i256, ptr %sp16166, align 16
  %swap.b16277 = load i256, ptr %sp16162, align 16
  store i256 %swap.a16275, ptr %sp16162, align 16
  store i256 %swap.b16277, ptr %sp16166, align 16
  %mload.out.slot16281 = alloca i256, align 16
  %2192 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b16277, ptr %mload.out.slot16281, ptr %arg.ecx.addr)
  %.not48193 = icmp eq i8 %2192, 0
  br i1 %.not48193, label %OP4786.MLOAD.contd, label %return, !prof !6

OP4786.MLOAD.contd:                               ; preds = %OP4785.SWAP1
  %mload.out16282 = load i256, ptr %mload.out.slot16281, align 16
  store i256 %mload.out16282, ptr %sp16166, align 16
  store i256 0, ptr %sp16176, align 16
  %swap.b16290 = load i256, ptr %sp16162, align 16
  store i256 0, ptr %sp16162, align 16
  store i256 %swap.b16290, ptr %sp16176, align 16
  store i256 %2186, ptr %sp16180, align 16
  store i256 %2186, ptr %sp16166, align 16
  store i256 %mload.out16282, ptr %sp16180, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp16221, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp16176, align 16
  store i256 %swap.b16290, ptr %sp16221, align 16
  %sp16310 = getelementptr i256, ptr %sp16162, i64 5
  store i256 %mload.out16282, ptr %sp16310, align 16
  store i256 %mload.out16282, ptr %sp16221, align 16
  store i256 %swap.b16290, ptr %sp16310, align 16
  %2193 = sub i256 %swap.b16290, %mload.out16282
  store i256 %2193, ptr %sp16221, align 16
  store i256 32, ptr %sp16310, align 16
  %2194 = add i256 %2193, 32
  store i256 %2194, ptr %sp16221, align 16
  store i256 %2194, ptr %sp16180, align 16
  store i256 %mload.out16282, ptr %sp16221, align 16
  %2195 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16162, i8 3)
  %.not48194 = icmp eq i8 %2195, 0
  br i1 %.not48194, label %OP4800.POP, label %return, !prof !6

OP4800.POP:                                       ; preds = %OP4786.MLOAD.contd
  %2196 = add i64 %len.addr.357, -4
  %sp16341 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2196
  %a16342 = load i256, ptr %sp16341, align 16
  br label %dynamic_jump_table.backedge

OP4804.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1349.JUMPDEST
  %len.addr.193 = phi i64 [ %667, %OP1349.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2197 = add i64 %len.addr.193, 1
  %sp16345 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.193
  store i256 18, ptr %sp16345, align 16
  %2198 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16345, i8 17)
  %.not48670 = icmp eq i8 %2198, 0
  br i1 %.not48670, label %OP4807.PUSH1, label %return, !prof !6

OP4807.PUSH1:                                     ; preds = %OP4804.JUMPDEST
  %sp16349 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2197
  %b16354 = load i256, ptr %sp16345, align 16
  %2199 = and i256 %b16354, 255
  store i256 2, ptr %sp16349, align 16
  %2200 = icmp eq i256 %2199, 2
  %2201 = zext i1 %2200 to i256
  store i256 %2201, ptr %sp16345, align 16
  br i1 %2200, label %OP4816.JUMPDEST, label %OP4813.PUSH1

OP4813.PUSH1:                                     ; preds = %OP4807.PUSH1
  store i256 0, ptr %sp16345, align 16
  store i256 0, ptr %sp16349, align 16
  %2202 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16345, i8 16)
  %.not48671 = icmp eq i8 %2202, 0
  %spec.select36612 = select i1 %.not48671, i8 16, i8 %2202, !prof !6
  br label %return

OP4816.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4807.PUSH1
  %len.addr.194 = phi i64 [ %len.addr.193, %OP4807.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp16377 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.194
  store i256 9558, ptr %sp16377, align 16
  br label %OP10361.JUMPDEST.sink.split

OP4823.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2203 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp16392 = getelementptr i256, ptr %2203, i64 -1
  store i256 0, ptr %sp16392, align 16
  br label %OP4826.JUMPDEST, !annotation !7

OP4826.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4977.PUSH1, %OP4823.JUMPDEST
  %len.addr.195 = phi i64 [ %2268, %OP4977.PUSH1 ], [ %len.addr.357, %OP4823.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2204 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.195
  %sp16395 = getelementptr i256, ptr %2204, i64 -4
  %dup416396 = load i256, ptr %sp16395, align 16
  store i256 %dup416396, ptr %2204, align 16
  %sp16399 = getelementptr i256, ptr %2204, i64 -1
  %dup216400 = load i256, ptr %sp16399, align 16
  %sp16401 = getelementptr i256, ptr %2204, i64 1
  store i256 %dup216400, ptr %sp16401, align 16
  %2205 = icmp uge i256 %dup216400, %dup416396
  %2206 = zext i1 %2205 to i256
  store i256 %2206, ptr %2204, align 16
  br i1 %2205, label %OP4981.JUMPDEST, label %OP4833.PUSH1

OP4833.PUSH1:                                     ; preds = %OP4826.JUMPDEST
  store i256 3, ptr %2204, align 16
  store i256 0, ptr %sp16401, align 16
  %sp16420 = getelementptr i256, ptr %2204, i64 -5
  %dup716421 = load i256, ptr %sp16420, align 16
  %sp16422 = getelementptr i256, ptr %2204, i64 2
  store i256 %dup716421, ptr %sp16422, align 16
  %sp16426 = getelementptr i256, ptr %2204, i64 3
  store i256 %dup416396, ptr %sp16426, align 16
  %2207 = add i64 %len.addr.195, 5
  %sp16430 = getelementptr i256, ptr %2204, i64 4
  store i256 %dup216400, ptr %sp16430, align 16
  %sp16434 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2207
  store i256 %dup416396, ptr %sp16434, align 16
  %sp16438 = getelementptr i256, ptr %2204, i64 6
  store i256 %dup216400, ptr %sp16438, align 16
  store i256 1, ptr %sp16434, align 16
  br label %OP4844.JUMPDEST

OP4844.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4833.PUSH1
  %len.addr.196 = phi i64 [ %2207, %OP4833.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp16451 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.196
  store i256 32, ptr %sp16451, align 16
  %sp16455 = getelementptr i256, ptr %sp16451, i64 -1
  %swap.b16456 = load i256, ptr %sp16455, align 16
  store i256 32, ptr %sp16455, align 16
  store i256 %swap.b16456, ptr %sp16451, align 16
  %sp16460 = getelementptr i256, ptr %sp16451, i64 1
  store i256 32, ptr %sp16460, align 16
  %2208 = shl i256 %swap.b16456, 5
  store i256 %2208, ptr %sp16451, align 16
  %sp16470 = getelementptr i256, ptr %sp16451, i64 -3
  %swap.b16471 = load i256, ptr %sp16470, align 16
  store i256 %2208, ptr %sp16470, align 16
  store i256 %swap.b16471, ptr %sp16451, align 16
  store i256 %swap.b16471, ptr %sp16455, align 16
  store i256 32, ptr %sp16451, align 16
  store i256 32, ptr %sp16470, align 16
  store i256 %2208, ptr %sp16451, align 16
  %2209 = add i64 %len.addr.196, -1
  %sp16485 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2209
  %2210 = add i256 %swap.b16471, %2208
  store i256 %2210, ptr %sp16485, align 16
  %2211 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49077 = load ptr, ptr %2211, align 8
  %2212 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49078 = load i64, ptr %2212, align 8
  %2213 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %2210, ptr %arg.contract.addr.val49077, i64 %arg.contract.addr.val49078)
  store i256 %2213, ptr %sp16455, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp16451, align 16
  %2214 = and i256 %2213, 1461501637330902918203684832716283019655932542975
  store i256 %2214, ptr %sp16485, align 16
  %sp16501 = getelementptr i256, ptr %sp16451, i64 -4
  %dup416502 = load i256, ptr %sp16501, align 16
  store i256 %dup416502, ptr %sp16451, align 16
  %2215 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup416502, i256 %2214, ptr %arg.ecx.addr)
  %.not48175 = icmp eq i8 %2215, 0
  br i1 %.not48175, label %OP4858.POP, label %return, !prof !6

OP4858.POP:                                       ; preds = %OP4844.JUMPDEST
  %dup216512 = load i256, ptr %sp16501, align 16
  %sp16513 = getelementptr i256, ptr %sp16451, i64 -2
  store i256 %dup216512, ptr %sp16513, align 16
  %b16518 = load i256, ptr %sp16470, align 16
  %2216 = add i256 %b16518, %dup216512
  store i256 %2216, ptr %sp16470, align 16
  %sp16523 = getelementptr i256, ptr %sp16451, i64 -5
  %swap.b16524 = load i256, ptr %sp16523, align 16
  store i256 %2216, ptr %sp16523, align 16
  store i256 %swap.b16524, ptr %sp16470, align 16
  store i256 %swap.b16524, ptr %sp16501, align 16
  store i256 %dup216512, ptr %sp16470, align 16
  store i256 %dup216512, ptr %sp16523, align 16
  store i256 %2216, ptr %sp16470, align 16
  %2217 = add i64 %len.addr.196, -4
  %sp16538 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2217
  %2218 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2216, i256 %swap.b16524, ptr %arg.ecx.addr)
  %.not48176 = icmp eq i8 %2218, 0
  br i1 %.not48176, label %OP4865.PUSH1, label %return, !prof !6

OP4865.PUSH1:                                     ; preds = %OP4858.POP
  store i256 64, ptr %sp16538, align 16
  %b16546 = load i256, ptr %sp16523, align 16
  %2219 = add i256 %b16546, 64
  store i256 %2219, ptr %sp16523, align 16
  store i256 0, ptr %sp16538, align 16
  %2220 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16523)
  %.not48177 = icmp eq i8 %2220, 0
  br i1 %.not48177, label %OP4869.SLOAD, label %return, !prof !6

OP4869.SLOAD:                                     ; preds = %OP4865.PUSH1
  %2221 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16523, i8 17)
  %.not48178 = icmp eq i8 %2221, 0
  br i1 %.not48178, label %OP4870.PUSH1, label %return, !prof !6

OP4870.PUSH1:                                     ; preds = %OP4869.SLOAD
  store i256 255, ptr %sp16538, align 16
  %b16560 = load i256, ptr %sp16523, align 16
  %2222 = and i256 %b16560, 255
  store i256 %2222, ptr %sp16523, align 16
  %2223 = add i64 %len.addr.196, -5
  %sp16563 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2223
  %.not48179 = icmp eq i256 %2222, 0
  br i1 %.not48179, label %OP4874.PUSH1, label %OP4912.JUMPDEST

OP4874.PUSH1:                                     ; preds = %OP4870.PUSH1
  store i256 64, ptr %sp16563, align 16
  %mload.out.slot16570 = alloca i256, align 16
  %2224 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16570, ptr %arg.ecx.addr)
  %.not48180 = icmp eq i8 %2224, 0
  br i1 %.not48180, label %OP4875.MLOAD.contd, label %return, !prof !6

OP4875.MLOAD.contd:                               ; preds = %OP4874.PUSH1
  %mload.out16571 = load i256, ptr %mload.out.slot16570, align 16
  store i256 %mload.out16571, ptr %sp16563, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp16538, align 16
  store i256 %mload.out16571, ptr %sp16470, align 16
  %2225 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out16571, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48181 = icmp eq i8 %2225, 0
  br i1 %.not48181, label %OP4879.PUSH1, label %return, !prof !6

OP4879.PUSH1:                                     ; preds = %OP4875.MLOAD.contd
  store i256 4, ptr %sp16538, align 16
  %b16590 = load i256, ptr %sp16523, align 16
  %2226 = add i256 %b16590, 4
  store i256 %2226, ptr %sp16523, align 16
  store i256 %2226, ptr %sp16538, align 16
  store i256 %2226, ptr %sp16470, align 16
  store i256 32, ptr %sp16513, align 16
  %2227 = add i256 %b16590, 36
  store i256 %2227, ptr %sp16470, align 16
  store i256 %2226, ptr %sp16513, align 16
  store i256 %2227, ptr %sp16485, align 16
  %2228 = add i64 %len.addr.196, -2
  %sp16619 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2228
  store i256 32, ptr %sp16619, align 16
  store i256 %2226, ptr %sp16455, align 16
  %2229 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2226, i256 32, ptr %arg.ecx.addr)
  %.not48182 = icmp eq i8 %2229, 0
  br i1 %.not48182, label %OP4890.PUSH1, label %return, !prof !6

OP4890.PUSH1:                                     ; preds = %OP4879.PUSH1
  store i256 61, ptr %sp16619, align 16
  %dup216635 = load i256, ptr %sp16470, align 16
  store i256 %dup216635, ptr %sp16455, align 16
  %2230 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup216635, i256 61, ptr %arg.ecx.addr)
  %.not48183 = icmp eq i8 %2230, 0
  br i1 %.not48183, label %OP4893.PUSH1, label %return, !prof !6

OP4893.PUSH1:                                     ; preds = %OP4890.PUSH1
  store i256 32, ptr %sp16619, align 16
  %b16648 = load i256, ptr %sp16470, align 16
  %2231 = add i256 %b16648, 32
  store i256 %2231, ptr %sp16470, align 16
  store i256 %2231, ptr %sp16619, align 16
  store i256 21997, ptr %sp16455, align 16
  store i256 61, ptr %sp16451, align 16
  store i256 61, ptr %sp16513, align 16
  store i256 %2231, ptr %sp16451, align 16
  %2232 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16513)
  %.not48184 = icmp eq i8 %2232, 0
  br i1 %.not48184, label %OP4900.PUSH1, label %return, !prof !6

OP4900.PUSH1:                                     ; preds = %OP4893.PUSH1
  store i256 64, ptr %sp16619, align 16
  %b16671 = load i256, ptr %sp16470, align 16
  %2233 = add i256 %b16671, 64
  store i256 %2233, ptr %sp16470, align 16
  %swap.b16677 = load i256, ptr %sp16523, align 16
  store i256 %2233, ptr %sp16523, align 16
  store i256 %swap.b16677, ptr %sp16470, align 16
  %2234 = add i64 %len.addr.196, -3
  store i256 64, ptr %sp16501, align 16
  %mload.out.slot16685 = alloca i256, align 16
  %2235 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot16685, ptr %arg.ecx.addr)
  %.not48185 = icmp eq i8 %2235, 0
  br i1 %.not48185, label %OP4906.MLOAD.contd, label %return, !prof !6

OP4906.MLOAD.contd:                               ; preds = %OP4900.PUSH1
  %mload.out16686 = load i256, ptr %mload.out.slot16685, align 16
  store i256 %mload.out16686, ptr %sp16501, align 16
  %sp16691 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2234
  store i256 %mload.out16686, ptr %sp16691, align 16
  %swap.b16696 = load i256, ptr %sp16523, align 16
  store i256 %mload.out16686, ptr %sp16523, align 16
  store i256 %swap.b16696, ptr %sp16470, align 16
  %2236 = sub i256 %swap.b16696, %mload.out16686
  store i256 %2236, ptr %sp16501, align 16
  store i256 %2236, ptr %sp16523, align 16
  store i256 %mload.out16686, ptr %sp16501, align 16
  %2237 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16523, i8 16)
  %.not48186 = icmp eq i8 %2237, 0
  %spec.select36613 = select i1 %.not48186, i8 16, i8 %2237, !prof !6
  br label %return

OP4912.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4870.PUSH1
  %len.addr.197 = phi i64 [ %2223, %OP4870.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp16712 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.197
  store i256 9771, ptr %sp16712, align 16
  %sp16714 = getelementptr i256, ptr %sp16712, i64 -5
  %dup616715 = load i256, ptr %sp16714, align 16
  %sp16716 = getelementptr i256, ptr %sp16712, i64 1
  store i256 %dup616715, ptr %sp16716, align 16
  %sp16718 = getelementptr i256, ptr %sp16712, i64 -4
  %dup616719 = load i256, ptr %sp16718, align 16
  %sp16720 = getelementptr i256, ptr %sp16712, i64 2
  store i256 %dup616719, ptr %sp16720, align 16
  %2238 = add i64 %len.addr.197, 4
  %sp16722 = getelementptr i256, ptr %sp16712, i64 -1
  %dup416723 = load i256, ptr %sp16722, align 16
  %sp16724 = getelementptr i256, ptr %sp16712, i64 3
  store i256 %dup416723, ptr %sp16724, align 16
  %sp16728 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2238
  store i256 %dup616719, ptr %sp16728, align 16
  %sp16732 = getelementptr i256, ptr %sp16712, i64 5
  store i256 %dup416723, ptr %sp16732, align 16
  %2239 = icmp ult i256 %dup416723, %dup616719
  %2240 = zext i1 %2239 to i256
  store i256 %2240, ptr %sp16728, align 16
  br i1 %2239, label %OP4923.JUMPDEST, label %return

OP4923.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4912.JUMPDEST
  %len.addr.198 = phi i64 [ %2238, %OP4912.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2241 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.198
  %sp16745 = getelementptr i256, ptr %2241, i64 -1
  %swap.a16746 = load i256, ptr %sp16745, align 16
  %sp16747 = getelementptr i256, ptr %2241, i64 -2
  store i256 %swap.a16746, ptr %sp16747, align 16
  store i256 32, ptr %sp16745, align 16
  %2242 = shl i256 %swap.a16746, 5
  store i256 %2242, ptr %sp16747, align 16
  %2243 = add i64 %len.addr.198, -2
  %sp16759 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2243
  %sp16761 = getelementptr i256, ptr %2241, i64 -3
  %b16762 = load i256, ptr %sp16761, align 16
  %2244 = add i256 %b16762, %2242
  store i256 %2244, ptr %sp16761, align 16
  %2245 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49075 = load ptr, ptr %2245, align 8
  %2246 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49076 = load i64, ptr %2246, align 8
  %2247 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %2244, ptr %arg.contract.addr.val49075, i64 %arg.contract.addr.val49076)
  store i256 %2247, ptr %sp16761, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp16759, align 16
  %2248 = and i256 %2247, 1461501637330902918203684832716283019655932542975
  store i256 %2248, ptr %sp16761, align 16
  br label %OP9175.JUMPDEST.sink.split

OP4934.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp16779 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3, ptr %sp16779, align 16
  %sp16781 = getelementptr i256, ptr %sp16779, i64 1
  store i256 0, ptr %sp16781, align 16
  %sp16783 = getelementptr i256, ptr %sp16779, i64 -5
  %dup716784 = load i256, ptr %sp16783, align 16
  %sp16785 = getelementptr i256, ptr %sp16779, i64 2
  store i256 %dup716784, ptr %sp16785, align 16
  %sp16787 = getelementptr i256, ptr %sp16779, i64 -4
  %dup716788 = load i256, ptr %sp16787, align 16
  %sp16789 = getelementptr i256, ptr %sp16779, i64 3
  store i256 %dup716788, ptr %sp16789, align 16
  %2249 = add i64 %len.addr.357, 5
  %sp16791 = getelementptr i256, ptr %sp16779, i64 -1
  %dup516792 = load i256, ptr %sp16791, align 16
  %sp16793 = getelementptr i256, ptr %sp16779, i64 4
  store i256 %dup516792, ptr %sp16793, align 16
  %sp16797 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2249
  store i256 %dup716788, ptr %sp16797, align 16
  %sp16801 = getelementptr i256, ptr %sp16779, i64 6
  store i256 %dup516792, ptr %sp16801, align 16
  %2250 = icmp ult i256 %dup516792, %dup716788
  %2251 = zext i1 %2250 to i256
  store i256 %2251, ptr %sp16797, align 16
  br i1 %2250, label %OP4946.JUMPDEST, label %return

OP4946.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4934.JUMPDEST
  %len.addr.199 = phi i64 [ %2249, %OP4934.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp16814 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.199
  store i256 32, ptr %sp16814, align 16
  %sp16818 = getelementptr i256, ptr %sp16814, i64 -1
  %swap.b16819 = load i256, ptr %sp16818, align 16
  store i256 32, ptr %sp16818, align 16
  store i256 %swap.b16819, ptr %sp16814, align 16
  %sp16823 = getelementptr i256, ptr %sp16814, i64 1
  store i256 32, ptr %sp16823, align 16
  %2252 = shl i256 %swap.b16819, 5
  store i256 %2252, ptr %sp16814, align 16
  %sp16833 = getelementptr i256, ptr %sp16814, i64 -3
  %swap.b16834 = load i256, ptr %sp16833, align 16
  store i256 %2252, ptr %sp16833, align 16
  store i256 %swap.b16834, ptr %sp16814, align 16
  store i256 %swap.b16834, ptr %sp16818, align 16
  store i256 32, ptr %sp16814, align 16
  store i256 32, ptr %sp16833, align 16
  store i256 %2252, ptr %sp16814, align 16
  %2253 = add i64 %len.addr.199, -1
  %sp16848 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2253
  %2254 = add i256 %swap.b16834, %2252
  store i256 %2254, ptr %sp16848, align 16
  %2255 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49073 = load ptr, ptr %2255, align 8
  %2256 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49074 = load i64, ptr %2256, align 8
  %2257 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %2254, ptr %arg.contract.addr.val49073, i64 %arg.contract.addr.val49074)
  store i256 %2257, ptr %sp16818, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp16814, align 16
  %2258 = and i256 %2257, 1461501637330902918203684832716283019655932542975
  store i256 %2258, ptr %sp16848, align 16
  %sp16864 = getelementptr i256, ptr %sp16814, i64 -4
  %dup416865 = load i256, ptr %sp16864, align 16
  store i256 %dup416865, ptr %sp16814, align 16
  %2259 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup416865, i256 %2258, ptr %arg.ecx.addr)
  %.not48170 = icmp eq i8 %2259, 0
  br i1 %.not48170, label %OP4960.POP, label %return, !prof !6

OP4960.POP:                                       ; preds = %OP4946.JUMPDEST
  %dup216875 = load i256, ptr %sp16864, align 16
  %sp16876 = getelementptr i256, ptr %sp16814, i64 -2
  store i256 %dup216875, ptr %sp16876, align 16
  %b16881 = load i256, ptr %sp16833, align 16
  %2260 = add i256 %b16881, %dup216875
  store i256 %2260, ptr %sp16833, align 16
  %sp16886 = getelementptr i256, ptr %sp16814, i64 -5
  %swap.b16887 = load i256, ptr %sp16886, align 16
  store i256 %2260, ptr %sp16886, align 16
  store i256 %swap.b16887, ptr %sp16833, align 16
  store i256 %swap.b16887, ptr %sp16864, align 16
  store i256 %dup216875, ptr %sp16833, align 16
  store i256 %dup216875, ptr %sp16886, align 16
  store i256 %2260, ptr %sp16833, align 16
  %2261 = add i64 %len.addr.199, -4
  %sp16901 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2261
  %2262 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2260, i256 %swap.b16887, ptr %arg.ecx.addr)
  %.not48171 = icmp eq i8 %2262, 0
  br i1 %.not48171, label %OP4967.PUSH1, label %return, !prof !6

OP4967.PUSH1:                                     ; preds = %OP4960.POP
  %2263 = add i64 %len.addr.199, -3
  store i256 64, ptr %sp16901, align 16
  %b16909 = load i256, ptr %sp16886, align 16
  %2264 = add i256 %b16909, 64
  store i256 %2264, ptr %sp16886, align 16
  store i256 0, ptr %sp16901, align 16
  %2265 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16886)
  %.not48172 = icmp eq i8 %2265, 0
  br i1 %.not48172, label %OP4971.DUP1, label %return, !prof !6

OP4971.DUP1:                                      ; preds = %OP4967.PUSH1
  %dup116917 = load i256, ptr %sp16886, align 16
  store i256 %dup116917, ptr %sp16901, align 16
  %2266 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16901, i8 17)
  %.not48173 = icmp eq i8 %2266, 0
  br i1 %.not48173, label %OP4973.PUSH32, label %return, !prof !6

OP4973.PUSH32:                                    ; preds = %OP4971.DUP1
  %sp16922 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2263
  store i256 -256, ptr %sp16922, align 16
  %b16927 = load i256, ptr %sp16901, align 16
  %2267 = and i256 %b16927, -256
  store i256 %2267, ptr %sp16901, align 16
  %swap.b16933 = load i256, ptr %sp16886, align 16
  store i256 %2267, ptr %sp16886, align 16
  store i256 %swap.b16933, ptr %sp16864, align 16
  %2268 = add i64 %len.addr.199, -5
  %2269 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16886, i8 17)
  %.not48174 = icmp eq i8 %2269, 0
  br i1 %.not48174, label %OP4977.PUSH1, label %return, !prof !6

OP4977.PUSH1:                                     ; preds = %OP4973.PUSH32
  %sp16937 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2268
  store i256 1, ptr %sp16937, align 16
  %sp16941 = getelementptr i256, ptr %sp16814, i64 -6
  %b16942 = load i256, ptr %sp16941, align 16
  %2270 = add i256 %b16942, 1
  store i256 %2270, ptr %sp16941, align 16
  br label %OP4826.JUMPDEST

OP4981.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP4826.JUMPDEST
  %len.addr.200 = phi i64 [ %len.addr.195, %OP4826.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2271 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.200
  %sp16948 = getelementptr i256, ptr %2271, i64 -1
  store i256 9890, ptr %sp16948, align 16
  %2272 = add i64 %len.addr.200, 1
  %contract.target_address16951 = load i160, ptr %contract.target_address.addr32315, align 16
  %2273 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address16951)
  %2274 = zext i160 %2273 to i256
  store i256 %2274, ptr %2271, align 16
  br label %OP9175.JUMPDEST.sink.split

OP4987.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %contract.target_address16959 = load i160, ptr %contract.target_address.addr32315, align 16
  %2275 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address16959)
  %2276 = zext i160 %2275 to i256
  %2277 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp16960 = getelementptr i256, ptr %2277, i64 -2
  store i256 %2276, ptr %sp16960, align 16
  %sp16962 = getelementptr i256, ptr %2277, i64 -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp16960, i8 0, i64 64, i1 false)
  store i256 %2276, ptr %sp16962, align 16
  %2278 = add i64 %len.addr.357, 1
  store i256 0, ptr %2277, align 16
  %2279 = add i64 %len.addr.357, -1
  %sp16975 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2279
  %2280 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %2276, ptr %arg.ecx.addr)
  %.not48163 = icmp eq i8 %2280, 0
  br i1 %.not48163, label %OP4995.PUSH1, label %return, !prof !6

OP4995.PUSH1:                                     ; preds = %OP4987.JUMPDEST
  store i256 3, ptr %sp16975, align 16
  store i256 32, ptr %2277, align 16
  %2281 = add i64 %len.addr.357, 2
  %sp16984 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2278
  store i256 3, ptr %sp16984, align 16
  store i256 3, ptr %2277, align 16
  store i256 32, ptr %sp16984, align 16
  %2282 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 3, ptr %arg.ecx.addr)
  %.not48164 = icmp eq i8 %2282, 0
  br i1 %.not48164, label %OP5000.PUSH1, label %return, !prof !6

OP5000.PUSH1:                                     ; preds = %OP4995.PUSH1
  store i256 64, ptr %2277, align 16
  %swap.b17001 = load i256, ptr %sp16962, align 16
  store i256 64, ptr %sp16962, align 16
  store i256 %swap.b17001, ptr %2277, align 16
  %swap.b17006 = load i256, ptr %sp16960, align 16
  store i256 %swap.b17001, ptr %sp16960, align 16
  store i256 %swap.b17006, ptr %2277, align 16
  %2283 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16962)
  %.not48165 = icmp eq i8 %2283, 0
  br i1 %.not48165, label %OP5004.DUP1, label %return, !prof !6

OP5004.DUP1:                                      ; preds = %OP5000.PUSH1
  %dup117011 = load i256, ptr %sp16962, align 16
  store i256 %dup117011, ptr %2277, align 16
  %2284 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %2277, i8 17)
  %.not48166 = icmp eq i8 %2284, 0
  br i1 %.not48166, label %OP5006.PUSH32, label %return, !prof !6

OP5006.PUSH32:                                    ; preds = %OP5004.DUP1
  store i256 -256, ptr %sp16984, align 16
  %swap.b17021 = load i256, ptr %2277, align 16
  store i256 -256, ptr %2277, align 16
  store i256 %swap.b17021, ptr %sp16984, align 16
  %sp17025 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2281
  store i256 -256, ptr %sp17025, align 16
  %2285 = and i256 %swap.b17021, -256
  store i256 %2285, ptr %sp16984, align 16
  store i256 %2285, ptr %2277, align 16
  store i256 -256, ptr %sp16984, align 16
  %swap.b17041 = load i256, ptr %sp16962, align 16
  store i256 -256, ptr %sp16962, align 16
  store i256 %swap.b17041, ptr %sp16984, align 16
  %2286 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %2277, i8 17)
  %.not48167 = icmp eq i8 %2286, 0
  br i1 %.not48167, label %OP5013.PUSH1, label %return, !prof !6

OP5013.PUSH1:                                     ; preds = %OP5006.PUSH32
  store i256 18, ptr %2277, align 16
  store i256 18, ptr %sp16984, align 16
  %2287 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16984, i8 17)
  %.not48168 = icmp eq i8 %2287, 0
  br i1 %.not48168, label %OP5016.SWAP1, label %return, !prof !6

OP5016.SWAP1:                                     ; preds = %OP5013.PUSH1
  %swap.a17054 = load i256, ptr %sp16984, align 16
  %swap.b17056 = load i256, ptr %2277, align 16
  store i256 %swap.a17054, ptr %2277, align 16
  store i256 %swap.b17056, ptr %sp16984, align 16
  %swap.b17061 = load i256, ptr %sp16962, align 16
  store i256 %swap.b17056, ptr %sp16962, align 16
  store i256 %swap.b17061, ptr %sp16984, align 16
  %2288 = and i256 %swap.b17061, %swap.a17054
  store i256 %2288, ptr %2277, align 16
  store i256 %2288, ptr %sp16962, align 16
  store i256 %swap.b17056, ptr %2277, align 16
  %swap.b17077 = load i256, ptr %sp16960, align 16
  store i256 %swap.b17056, ptr %sp16960, align 16
  store i256 %swap.b17077, ptr %2277, align 16
  %2289 = or i256 %2288, %swap.b17077
  store i256 %2289, ptr %sp16975, align 16
  store i256 %2289, ptr %sp16960, align 16
  store i256 %swap.b17056, ptr %sp16962, align 16
  %2290 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp16960, i8 17)
  %.not48169 = icmp eq i8 %2290, 0
  br i1 %.not48169, label %OP5024.POP, label %return.loopexit52642.split.loop.exit53207, !prof !6

OP5024.POP:                                       ; preds = %OP5016.SWAP1
  %2291 = add i64 %len.addr.357, -5
  %sp17094 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2291
  %a17095 = load i256, ptr %sp17094, align 16
  br label %dynamic_jump_table.backedge

OP5027.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1373.JUMPDEST
  %len.addr.201 = phi i64 [ %len.addr.66, %OP1373.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2292 = add i64 %len.addr.201, 1
  %sp17098 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.201
  store i256 1, ptr %sp17098, align 16
  %2293 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17098, i8 17)
  %.not48635 = icmp eq i8 %2293, 0
  br i1 %.not48635, label %OP5030.PUSH1, label %return, !prof !6

OP5030.PUSH1:                                     ; preds = %OP5027.JUMPDEST
  %sp17102 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2292
  %swap.b17107 = load i256, ptr %sp17098, align 16
  store i256 0, ptr %sp17098, align 16
  %2294 = add i64 %len.addr.201, 3
  %sp17109 = getelementptr i256, ptr %sp17098, i64 2
  store i256 255, ptr %sp17109, align 16
  %2295 = and i256 %swap.b17107, 372682917519380244141939632342652170012262798458880
  %2296 = icmp eq i256 %2295, 0
  %2297 = zext i1 %2296 to i256
  store i256 %2297, ptr %sp17102, align 16
  br i1 %2296, label %OP5071.JUMPDEST, label %OP5040.PUSH1

OP5040.PUSH1:                                     ; preds = %OP5030.PUSH1
  store i256 64, ptr %sp17102, align 16
  store i256 64, ptr %sp17109, align 16
  %mload.out.slot17145 = alloca i256, align 16
  %2298 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot17145, ptr %arg.ecx.addr)
  %.not48636 = icmp eq i8 %2298, 0
  br i1 %.not48636, label %OP5042.MLOAD.contd, label %return, !prof !6

OP5042.MLOAD.contd:                               ; preds = %OP5040.PUSH1
  %mload.out17146 = load i256, ptr %mload.out.slot17145, align 16
  store i256 %mload.out17146, ptr %sp17109, align 16
  %sp17149 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2294
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp17149, align 16
  %sp17153 = getelementptr i256, ptr %sp17098, i64 4
  store i256 %mload.out17146, ptr %sp17153, align 16
  %2299 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out17146, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48637 = icmp eq i8 %2299, 0
  br i1 %.not48637, label %OP5046.PUSH1, label %return, !prof !6

OP5046.PUSH1:                                     ; preds = %OP5042.MLOAD.contd
  store i256 32, ptr %sp17149, align 16
  %dup317165 = load i256, ptr %sp17109, align 16
  %sp17166 = getelementptr i256, ptr %sp17098, i64 5
  store i256 %dup317165, ptr %sp17166, align 16
  %2300 = add i256 %dup317165, 4
  store i256 %2300, ptr %sp17153, align 16
  %2301 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2300, i256 32, ptr %arg.ecx.addr)
  %.not48638 = icmp eq i8 %2301, 0
  br i1 %.not48638, label %OP5051.PUSH1, label %return, !prof !6

OP5051.PUSH1:                                     ; preds = %OP5046.PUSH1
  store i256 16, ptr %sp17149, align 16
  %dup317184 = load i256, ptr %sp17109, align 16
  store i256 %dup317184, ptr %sp17166, align 16
  %2302 = add i256 %dup317184, 36
  store i256 %2302, ptr %sp17153, align 16
  %2303 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2302, i256 16, ptr %arg.ecx.addr)
  %.not48639 = icmp eq i8 %2303, 0
  br i1 %.not48639, label %OP5056.PUSH32, label %return, !prof !6

OP5056.PUSH32:                                    ; preds = %OP5051.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp17149, align 16
  %dup317203 = load i256, ptr %sp17109, align 16
  store i256 %dup317203, ptr %sp17166, align 16
  %2304 = add i256 %dup317203, 68
  store i256 %2304, ptr %sp17153, align 16
  %2305 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2304, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48640 = icmp eq i8 %2305, 0
  br i1 %.not48640, label %OP5061.SWAP1, label %return, !prof !6

OP5061.SWAP1:                                     ; preds = %OP5056.PUSH32
  %swap.a17218 = load i256, ptr %sp17109, align 16
  %swap.b17220 = load i256, ptr %sp17102, align 16
  store i256 %swap.a17218, ptr %sp17102, align 16
  store i256 %swap.b17220, ptr %sp17109, align 16
  %mload.out.slot17224 = alloca i256, align 16
  %2306 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b17220, ptr %mload.out.slot17224, ptr %arg.ecx.addr)
  %.not48641 = icmp eq i8 %2306, 0
  br i1 %.not48641, label %OP5062.MLOAD.contd, label %return, !prof !6

OP5062.MLOAD.contd:                               ; preds = %OP5061.SWAP1
  %mload.out17225 = load i256, ptr %mload.out.slot17224, align 16
  %swap.b17231 = load i256, ptr %sp17102, align 16
  %2307 = sub i256 %swap.b17231, %mload.out17225
  store i256 100, ptr %sp17149, align 16
  %2308 = add i256 %2307, 100
  store i256 %2308, ptr %sp17102, align 16
  store i256 %mload.out17225, ptr %sp17109, align 16
  %2309 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17102, i8 16)
  %.not48642 = icmp eq i8 %2309, 0
  %spec.select36614 = select i1 %.not48642, i8 16, i8 %2309, !prof !6
  br label %return

OP5071.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5030.PUSH1
  %len.addr.202 = phi i64 [ %2292, %OP5030.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %2310 = add i64 %len.addr.202, 1
  %sp17264 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.202
  store i256 8, ptr %sp17264, align 16
  %2311 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17264, i8 17)
  %.not48643 = icmp eq i8 %2311, 0
  br i1 %.not48643, label %OP5074.PUSH20, label %return, !prof !6

OP5074.PUSH20:                                    ; preds = %OP5071.JUMPDEST
  %2312 = add i64 %len.addr.202, 2
  %sp17268 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2310
  %b17273 = load i256, ptr %sp17264, align 16
  %contract.caller.addr17276 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller17277 = load i160, ptr %contract.caller.addr17276, align 16
  %2313 = tail call i160 @llvm.bswap.i160(i160 %contract.caller17277)
  %2314 = zext i160 %2313 to i256
  store i256 %2314, ptr %sp17268, align 16
  %2315 = trunc i256 %b17273 to i160
  %2316 = icmp eq i160 %2313, %2315
  %2317 = zext i1 %2316 to i256
  store i256 %2317, ptr %sp17264, align 16
  br i1 %2316, label %OP5118.JUMPDEST, label %OP5080.PUSH1

OP5080.PUSH1:                                     ; preds = %OP5074.PUSH20
  store i256 64, ptr %sp17264, align 16
  %mload.out.slot17293 = alloca i256, align 16
  %2318 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot17293, ptr %arg.ecx.addr)
  %.not48644 = icmp eq i8 %2318, 0
  br i1 %.not48644, label %OP5081.MLOAD.contd, label %return, !prof !6

OP5081.MLOAD.contd:                               ; preds = %OP5080.PUSH1
  %mload.out17294 = load i256, ptr %mload.out.slot17293, align 16
  store i256 %mload.out17294, ptr %sp17264, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp17268, align 16
  %2319 = add i64 %len.addr.202, 3
  %sp17301 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2312
  store i256 %mload.out17294, ptr %sp17301, align 16
  %2320 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out17294, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48645 = icmp eq i8 %2320, 0
  br i1 %.not48645, label %OP5085.PUSH1, label %return, !prof !6

OP5085.PUSH1:                                     ; preds = %OP5081.MLOAD.contd
  %b17313 = load i256, ptr %sp17264, align 16
  %2321 = add i256 %b17313, 4
  store i256 %2321, ptr %sp17264, align 16
  store i256 %2321, ptr %sp17268, align 16
  %sp17324 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2319
  %2322 = add i256 %b17313, 36
  store i256 %2322, ptr %sp17301, align 16
  %sp17338 = getelementptr i256, ptr %sp17264, i64 4
  store i256 32, ptr %sp17324, align 16
  store i256 %2321, ptr %sp17338, align 16
  %2323 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2321, i256 32, ptr %arg.ecx.addr)
  %.not48646 = icmp eq i8 %2323, 0
  br i1 %.not48646, label %OP5096.PUSH1, label %return, !prof !6

OP5096.PUSH1:                                     ; preds = %OP5085.PUSH1
  store i256 41, ptr %sp17324, align 16
  %dup217358 = load i256, ptr %sp17301, align 16
  store i256 %dup217358, ptr %sp17338, align 16
  %2324 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup217358, i256 41, ptr %arg.ecx.addr)
  %.not48647 = icmp eq i8 %2324, 0
  br i1 %.not48647, label %OP5099.PUSH1, label %return, !prof !6

OP5099.PUSH1:                                     ; preds = %OP5096.PUSH1
  %b17371 = load i256, ptr %sp17301, align 16
  %2325 = add i256 %b17371, 32
  store i256 %2325, ptr %sp17301, align 16
  store i256 22523, ptr %sp17338, align 16
  %sp17380 = getelementptr i256, ptr %sp17264, i64 5
  store i256 41, ptr %sp17324, align 16
  store i256 %2325, ptr %sp17380, align 16
  %2326 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17324)
  %.not48648 = icmp eq i8 %2326, 0
  br i1 %.not48648, label %OP5106.PUSH1, label %return, !prof !6

OP5106.PUSH1:                                     ; preds = %OP5099.PUSH1
  store i256 64, ptr %sp17324, align 16
  %b17394 = load i256, ptr %sp17301, align 16
  %2327 = add i256 %b17394, 64
  %swap.b17400 = load i256, ptr %sp17264, align 16
  store i256 %2327, ptr %sp17264, align 16
  store i256 %swap.b17400, ptr %sp17301, align 16
  store i256 64, ptr %sp17268, align 16
  %mload.out.slot17408 = alloca i256, align 16
  %2328 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot17408, ptr %arg.ecx.addr)
  %.not48649 = icmp eq i8 %2328, 0
  br i1 %.not48649, label %OP5112.MLOAD.contd, label %return, !prof !6

OP5112.MLOAD.contd:                               ; preds = %OP5106.PUSH1
  %mload.out17409 = load i256, ptr %mload.out.slot17408, align 16
  %swap.b17419 = load i256, ptr %sp17264, align 16
  store i256 %swap.b17419, ptr %sp17301, align 16
  %2329 = sub i256 %swap.b17419, %mload.out17409
  store i256 %2329, ptr %sp17264, align 16
  store i256 %mload.out17409, ptr %sp17268, align 16
  %2330 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17264, i8 16)
  %.not48650 = icmp eq i8 %2330, 0
  %spec.select36615 = select i1 %.not48650, i8 16, i8 %2330, !prof !6
  br label %return

OP5118.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54068 = add i64 %len.addr.357, 2
  br label %OP5118.JUMPDEST

OP5118.JUMPDEST:                                  ; preds = %OP5118.JUMPDEST.loopexit, %OP5074.PUSH20
  %.pre-phi54069 = phi i64 [ %.pre54068, %OP5118.JUMPDEST.loopexit ], [ %2312, %OP5074.PUSH20 ]
  %len.addr.203 = phi i64 [ %len.addr.357, %OP5118.JUMPDEST.loopexit ], [ %len.addr.202, %OP5074.PUSH20 ]
  %sp17435 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.203
  %sp17437 = getelementptr i256, ptr %sp17435, i64 -3
  %dup417438 = load i256, ptr %sp17437, align 16
  %sp17439 = getelementptr i256, ptr %sp17435, i64 1
  %2331 = and i256 %dup417438, 1461501637330902918203684832716283019655932542975
  store i256 %2331, ptr %sp17435, align 16
  store i256 0, ptr %sp17439, align 16
  %2332 = add i64 %len.addr.203, 3
  %sp17451 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54069
  store i256 %2331, ptr %sp17451, align 16
  %2333 = add i64 %len.addr.203, 4
  %sp17455 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2332
  store i256 0, ptr %sp17455, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !477)
  %ecx.memory.addr.i49952 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i49953 = load ptr, ptr %ecx.memory.addr.i49952, align 8, !alias.scope !477
  %ecx.memory.len.addr.i49954 = getelementptr inbounds i8, ptr %ecx.memory.i49953, i64 16
  %ecx.memory.len.i49955 = load i64, ptr %ecx.memory.len.addr.i49954, align 8, !noalias !477
  %ecx.memory.last_checkpoint.addr.i49956 = getelementptr inbounds i8, ptr %ecx.memory.i49953, i64 48
  %ecx.memory.last_checkpoint.i49957 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49956, align 8, !noalias !477
  %2334 = sub i64 %ecx.memory.len.i49955, %ecx.memory.last_checkpoint.i49957
  %2335 = icmp ult i64 %2334, 32
  br i1 %2335, label %resize.i49963, label %OP5126.PUSH1, !prof !5

resize.i49963:                                    ; preds = %OP5118.JUMPDEST
  %2336 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i49964 = icmp eq i8 %2336, 0
  br i1 %.not.i49964, label %OP5126.PUSH1, label %return, !prof !6

OP5126.PUSH1:                                     ; preds = %OP5118.JUMPDEST, %resize.i49963
  %ecx.memory.buffer.ptr.shared.addr.i49959 = getelementptr inbounds i8, ptr %ecx.memory.i49953, i64 8
  %ecx.memory.buffer.ptr.shared.i49960 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49959, align 8, !noalias !477
  %ecx.memory.buffer.ptr.i49961 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49960, i64 %ecx.memory.last_checkpoint.i49957
  %2337 = tail call i256 @llvm.bswap.i256(i256 %2331)
  store i256 %2337, ptr %ecx.memory.buffer.ptr.i49961, align 1, !noalias !477
  store i256 32, ptr %sp17451, align 16
  store i256 12, ptr %sp17455, align 16
  %sp17473 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2333
  store i256 32, ptr %sp17473, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !480)
  %ecx.memory.i49967 = load ptr, ptr %ecx.memory.addr.i49952, align 8, !alias.scope !480
  %ecx.memory.len.addr.i49968 = getelementptr inbounds i8, ptr %ecx.memory.i49967, i64 16
  %ecx.memory.len.i49969 = load i64, ptr %ecx.memory.len.addr.i49968, align 8, !noalias !480
  %ecx.memory.last_checkpoint.addr.i49970 = getelementptr inbounds i8, ptr %ecx.memory.i49967, i64 48
  %ecx.memory.last_checkpoint.i49971 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49970, align 8, !noalias !480
  %2338 = sub i64 %ecx.memory.len.i49969, %ecx.memory.last_checkpoint.i49971
  %2339 = icmp ult i64 %2338, 64
  br i1 %2339, label %resize.i49978, label %OP5131.PUSH1, !prof !5

resize.i49978:                                    ; preds = %OP5126.PUSH1
  %2340 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i49979 = icmp eq i8 %2340, 0
  br i1 %.not.i49979, label %OP5131.PUSH1, label %return, !prof !6

OP5131.PUSH1:                                     ; preds = %OP5126.PUSH1, %resize.i49978
  %ecx.memory.buffer.ptr.shared.addr.i49973 = getelementptr inbounds i8, ptr %ecx.memory.i49967, i64 8
  %ecx.memory.buffer.ptr.shared.i49974 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49973, align 8, !noalias !480
  %ecx.memory.buffer.ptr.i49975 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49974, i64 %ecx.memory.last_checkpoint.i49971
  %slot.i49976 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49975, i64 32
  store i256 5427754182999196660479889922282245680622030531201901439349574250370927951872, ptr %slot.i49976, align 1, !noalias !480
  %2341 = add i64 %len.addr.203, 5
  store i256 64, ptr %sp17455, align 16
  store i256 64, ptr %sp17473, align 16
  %2342 = add i64 %len.addr.203, 6
  %dup417487 = load i256, ptr %sp17439, align 16
  %sp17488 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2341
  store i256 %dup417487, ptr %sp17488, align 16
  %2343 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17473)
  %.not48653 = icmp eq i8 %2343, 0
  br i1 %.not48653, label %OP5135.DUP1, label %return, !prof !6

OP5135.DUP1:                                      ; preds = %OP5131.PUSH1
  %dup117493 = load i256, ptr %sp17473, align 16
  store i256 %dup117493, ptr %sp17488, align 16
  %2344 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17488, i8 17)
  %.not48654 = icmp eq i8 %2344, 0
  br i1 %.not48654, label %OP5137.PUSH32, label %return, !prof !6

OP5137.PUSH32:                                    ; preds = %OP5135.DUP1
  %sp17498 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2342
  %b17503 = load i256, ptr %sp17488, align 16
  %2345 = and i256 %b17503, -256
  store i256 1, ptr %sp17498, align 16
  %2346 = or disjoint i256 %2345, 1
  %swap.b17517 = load i256, ptr %sp17473, align 16
  store i256 %2346, ptr %sp17473, align 16
  store i256 %swap.b17517, ptr %sp17488, align 16
  %2347 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17473, i8 17)
  %.not48655 = icmp eq i8 %2347, 0
  br i1 %.not48655, label %OP5143.PUSH1, label %return, !prof !6

OP5143.PUSH1:                                     ; preds = %OP5137.PUSH32
  store i256 13, ptr %sp17473, align 16
  %dup317524 = load i256, ptr %sp17451, align 16
  store i256 %dup317524, ptr %sp17488, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !483)
  %ecx.memory.i49982 = load ptr, ptr %ecx.memory.addr.i49952, align 8, !alias.scope !483
  %ecx.memory.len.addr.i49983 = getelementptr inbounds i8, ptr %ecx.memory.i49982, i64 16
  %ecx.memory.len.i49984 = load i64, ptr %ecx.memory.len.addr.i49983, align 8, !noalias !483
  %ecx.memory.last_checkpoint.addr.i49985 = getelementptr inbounds i8, ptr %ecx.memory.i49982, i64 48
  %ecx.memory.last_checkpoint.i49986 = load i64, ptr %ecx.memory.last_checkpoint.addr.i49985, align 8, !noalias !483
  %2348 = sub i64 %ecx.memory.len.i49984, %ecx.memory.last_checkpoint.i49986
  %2349 = icmp ugt i256 %dup317524, 18446744073709551615
  %2350 = trunc i256 %dup317524 to i64
  %2351 = add i64 %2350, 32
  %2352 = icmp ugt i64 %2350, -33
  %2353 = or i1 %2349, %2352
  %2354 = select i1 %2353, i64 -1, i64 %2351
  %2355 = icmp ugt i64 %2354, %2348
  br i1 %2355, label %resize.i49993, label %OP5146.SWAP2, !prof !5

resize.i49993:                                    ; preds = %OP5143.PUSH1
  %2356 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2354)
  %.not.i49994 = icmp eq i8 %2356, 0
  br i1 %.not.i49994, label %OP5146.SWAP2, label %return, !prof !6

OP5146.SWAP2:                                     ; preds = %OP5143.PUSH1, %resize.i49993
  %ecx.memory.buffer.ptr.shared.addr.i49988 = getelementptr inbounds i8, ptr %ecx.memory.i49982, i64 8
  %ecx.memory.buffer.ptr.shared.i49989 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i49988, align 8, !noalias !483
  %ecx.memory.buffer.ptr.i49990 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i49989, i64 %ecx.memory.last_checkpoint.i49986
  %slot.i49991 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i49990, i64 %2350
  store i256 5880067031582463048853214082472432820673866408802059892628705437901838614528, ptr %slot.i49991, align 1, !noalias !483
  %swap.a17533 = load i256, ptr %sp17455, align 16
  %swap.b17535 = load i256, ptr %sp17439, align 16
  store i256 %swap.a17533, ptr %sp17439, align 16
  store i256 %swap.b17535, ptr %sp17473, align 16
  %2357 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17455)
  %.not48657 = icmp eq i8 %2357, 0
  br i1 %.not48657, label %OP5150.DUP6, label %return, !prof !6

OP5150.DUP6:                                      ; preds = %OP5146.SWAP2
  %sp17548 = getelementptr i256, ptr %sp17435, i64 -2
  %dup617549 = load i256, ptr %sp17548, align 16
  %swap.b17555 = load i256, ptr %sp17455, align 16
  store i256 %dup617549, ptr %sp17455, align 16
  store i256 %swap.b17555, ptr %sp17473, align 16
  %2358 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17455, i8 17)
  %.not48658 = icmp eq i8 %2358, 0
  br i1 %.not48658, label %OP5153.DUP2, label %return, !prof !6

OP5153.DUP2:                                      ; preds = %OP5150.DUP6
  %dup217560 = load i256, ptr %sp17439, align 16
  store i256 %dup217560, ptr %sp17455, align 16
  %ecx.memory.i49997 = load ptr, ptr %ecx.memory.addr.i49952, align 8
  %ecx.memory.len.addr.i49998 = getelementptr inbounds i8, ptr %ecx.memory.i49997, i64 16
  %ecx.memory.len.i49999 = load i64, ptr %ecx.memory.len.addr.i49998, align 8, !noalias !486
  %ecx.memory.last_checkpoint.addr.i50000 = getelementptr inbounds i8, ptr %ecx.memory.i49997, i64 48
  %ecx.memory.last_checkpoint.i50001 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50000, align 8, !noalias !486
  %2359 = sub i64 %ecx.memory.len.i49999, %ecx.memory.last_checkpoint.i50001
  %2360 = icmp ugt i256 %dup217560, 18446744073709551615
  %2361 = trunc i256 %dup217560 to i64
  %2362 = add i64 %2361, 32
  %2363 = icmp ugt i64 %2361, -33
  %2364 = or i1 %2360, %2363
  %2365 = select i1 %2364, i64 -1, i64 %2362
  %2366 = icmp ugt i64 %2365, %2359
  br i1 %2366, label %resize.i50009, label %OP5154.MLOAD.contd, !prof !5

resize.i50009:                                    ; preds = %OP5153.DUP2
  %2367 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2365), !noalias !490
  %.not.i50010 = icmp eq i8 %2367, 0
  br i1 %.not.i50010, label %resize.i50009.OP5154.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50009.OP5154.MLOAD.contd_crit_edge:       ; preds = %resize.i50009
  %ecx.memory.i50013.pre = load ptr, ptr %ecx.memory.addr.i49952, align 8, !alias.scope !491
  br label %OP5154.MLOAD.contd

OP5154.MLOAD.contd:                               ; preds = %resize.i50009.OP5154.MLOAD.contd_crit_edge, %OP5153.DUP2
  %ecx.memory.i50013 = phi ptr [ %ecx.memory.i50013.pre, %resize.i50009.OP5154.MLOAD.contd_crit_edge ], [ %ecx.memory.i49997, %OP5153.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i50003 = getelementptr inbounds i8, ptr %ecx.memory.i49997, i64 8
  %ecx.memory.buffer.ptr.shared.i50004 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50003, align 8, !noalias !486
  %ecx.memory.buffer.ptr.i50005 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50004, i64 %ecx.memory.last_checkpoint.i50001
  %slot.i50006 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50005, i64 %2361
  %slot.value.i50007 = load i256, ptr %slot.i50006, align 1, !noalias !486
  %2368 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50007)
  store i256 %2368, ptr %sp17455, align 16
  %dup617570 = load i256, ptr %sp17548, align 16
  store i256 %dup617570, ptr %sp17473, align 16
  store i256 %2368, ptr %sp17488, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !491)
  %ecx.memory.len.addr.i50014 = getelementptr inbounds i8, ptr %ecx.memory.i50013, i64 16
  %ecx.memory.len.i50015 = load i64, ptr %ecx.memory.len.addr.i50014, align 8, !noalias !491
  %ecx.memory.last_checkpoint.addr.i50016 = getelementptr inbounds i8, ptr %ecx.memory.i50013, i64 48
  %ecx.memory.last_checkpoint.i50017 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50016, align 8, !noalias !491
  %2369 = sub i64 %ecx.memory.len.i50015, %ecx.memory.last_checkpoint.i50017
  %2370 = icmp ugt i256 %2368, 18446744073709551615
  %2371 = trunc i256 %2368 to i64
  %2372 = add i64 %2371, 32
  %2373 = icmp ugt i64 %2371, -33
  %2374 = or i1 %2370, %2373
  %2375 = select i1 %2374, i64 -1, i64 %2372
  %2376 = icmp ugt i64 %2375, %2369
  br i1 %2376, label %resize.i50024, label %OP5158.SWAP2, !prof !5

resize.i50024:                                    ; preds = %OP5154.MLOAD.contd
  %2377 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2375)
  %.not.i50025 = icmp eq i8 %2377, 0
  br i1 %.not.i50025, label %OP5158.SWAP2, label %return, !prof !6

OP5158.SWAP2:                                     ; preds = %OP5154.MLOAD.contd, %resize.i50024
  %ecx.memory.buffer.ptr.shared.addr.i50019 = getelementptr inbounds i8, ptr %ecx.memory.i50013, i64 8
  %ecx.memory.buffer.ptr.shared.i50020 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50019, align 8, !noalias !491
  %ecx.memory.buffer.ptr.i50021 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50020, i64 %ecx.memory.last_checkpoint.i50017
  %slot.i50022 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50021, i64 %2371
  %2378 = tail call i256 @llvm.bswap.i256(i256 %dup617570)
  store i256 %2378, ptr %slot.i50022, align 1, !noalias !491
  %swap.a17583 = load i256, ptr %sp17455, align 16
  %swap.b17585 = load i256, ptr %sp17439, align 16
  store i256 %swap.a17583, ptr %sp17439, align 16
  store i256 %swap.b17585, ptr %sp17455, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !494)
  %ecx.memory.i50028 = load ptr, ptr %ecx.memory.addr.i49952, align 8, !alias.scope !494, !noalias !497
  %ecx.memory.len.addr.i50029 = getelementptr inbounds i8, ptr %ecx.memory.i50028, i64 16
  %ecx.memory.len.i50030 = load i64, ptr %ecx.memory.len.addr.i50029, align 8, !noalias !499
  %ecx.memory.last_checkpoint.addr.i50031 = getelementptr inbounds i8, ptr %ecx.memory.i50028, i64 48
  %ecx.memory.last_checkpoint.i50032 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50031, align 8, !noalias !499
  %2379 = sub i64 %ecx.memory.len.i50030, %ecx.memory.last_checkpoint.i50032
  %2380 = icmp ugt i256 %swap.b17585, 18446744073709551615
  %2381 = trunc i256 %swap.b17585 to i64
  %2382 = add i64 %2381, 32
  %2383 = icmp ugt i64 %2381, -33
  %2384 = or i1 %2380, %2383
  %2385 = select i1 %2384, i64 -1, i64 %2382
  %2386 = icmp ugt i64 %2385, %2379
  br i1 %2386, label %resize.i50040, label %OP5159.MLOAD.contd, !prof !5

resize.i50040:                                    ; preds = %OP5158.SWAP2
  %2387 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2385), !noalias !497
  %.not.i50041 = icmp eq i8 %2387, 0
  br i1 %.not.i50041, label %resize.i50040.OP5159.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50040.OP5159.MLOAD.contd_crit_edge:       ; preds = %resize.i50040
  %swap.b17598.pre = load i256, ptr %sp17439, align 16
  br label %OP5159.MLOAD.contd

OP5159.MLOAD.contd:                               ; preds = %resize.i50040.OP5159.MLOAD.contd_crit_edge, %OP5158.SWAP2
  %swap.b17598 = phi i256 [ %swap.b17598.pre, %resize.i50040.OP5159.MLOAD.contd_crit_edge ], [ %swap.a17583, %OP5158.SWAP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i50034 = getelementptr inbounds i8, ptr %ecx.memory.i50028, i64 8
  %ecx.memory.buffer.ptr.shared.i50035 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50034, align 8, !noalias !499
  %ecx.memory.buffer.ptr.i50036 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50035, i64 %ecx.memory.last_checkpoint.i50032
  %slot.i50037 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50036, i64 %2381
  %slot.value.i50038 = load i256, ptr %slot.i50037, align 1, !noalias !499
  %2388 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50038)
  store i256 31930569142068997134523648404915571223004418732628318405882070766031985642784, ptr %sp17439, align 16
  store i256 %swap.b17598, ptr %sp17488, align 16
  %2389 = sub i256 %swap.b17598, %2388
  store i256 %2389, ptr %sp17455, align 16
  store i256 %2388, ptr %sp17473, align 16
  %swap.b17623 = load i256, ptr %sp17451, align 16
  store i256 %swap.b17623, ptr %sp17473, align 16
  %2390 = add i256 %swap.b17623, %2389
  store i256 %2390, ptr %sp17451, align 16
  store i256 %2388, ptr %sp17455, align 16
  %2391 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17435, i8 2)
  %.not48662 = icmp eq i8 %2391, 0
  br i1 %.not48662, label %OP5170.POP, label %return, !prof !6

OP5170.POP:                                       ; preds = %OP5159.MLOAD.contd
  %sp17639 = getelementptr i256, ptr %sp17435, i64 -1
  %sp17643 = getelementptr i256, ptr %sp17435, i64 -4
  %swap.b17644 = load i256, ptr %sp17643, align 16
  store i256 1, ptr %sp17643, align 16
  %swap.b17649 = load i256, ptr %sp17437, align 16
  store i256 %swap.b17644, ptr %sp17437, align 16
  store i256 %swap.b17649, ptr %sp17639, align 16
  %2392 = add i64 %len.addr.203, -3
  br label %dynamic_jump_table.preheader

OP5177.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1385.JUMPDEST
  %len.addr.204 = phi i64 [ %680, %OP1385.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2393 = add i64 %len.addr.204, 1
  %sp17657 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.204
  store i256 64, ptr %sp17657, align 16
  %2394 = add i64 %len.addr.204, 2
  %sp17661 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2393
  store i256 64, ptr %sp17661, align 16
  %ecx.memory.addr.i50043 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50044 = load ptr, ptr %ecx.memory.addr.i50043, align 8
  %ecx.memory.len.addr.i50045 = getelementptr inbounds i8, ptr %ecx.memory.i50044, i64 16
  %ecx.memory.len.i50046 = load i64, ptr %ecx.memory.len.addr.i50045, align 8, !noalias !500
  %ecx.memory.last_checkpoint.addr.i50047 = getelementptr inbounds i8, ptr %ecx.memory.i50044, i64 48
  %ecx.memory.last_checkpoint.i50048 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50047, align 8, !noalias !500
  %2395 = sub i64 %ecx.memory.len.i50046, %ecx.memory.last_checkpoint.i50048
  %2396 = icmp ult i64 %2395, 96
  br i1 %2396, label %resize.i50056, label %OP5180.MLOAD.contd, !prof !5

resize.i50056:                                    ; preds = %OP5177.JUMPDEST
  %2397 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !504
  %.not.i50057 = icmp eq i8 %2397, 0
  br i1 %.not.i50057, label %resize.i50056.OP5180.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50056.OP5180.MLOAD.contd_crit_edge:       ; preds = %resize.i50056
  %dup317674.pre = load i256, ptr %sp17657, align 16
  %ecx.memory.i50060.pre = load ptr, ptr %ecx.memory.addr.i50043, align 8, !alias.scope !505
  br label %OP5180.MLOAD.contd

OP5180.MLOAD.contd:                               ; preds = %resize.i50056.OP5180.MLOAD.contd_crit_edge, %OP5177.JUMPDEST
  %ecx.memory.i50060 = phi ptr [ %ecx.memory.i50060.pre, %resize.i50056.OP5180.MLOAD.contd_crit_edge ], [ %ecx.memory.i50044, %OP5177.JUMPDEST ]
  %swap.b17691 = phi i256 [ %dup317674.pre, %resize.i50056.OP5180.MLOAD.contd_crit_edge ], [ 64, %OP5177.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i50050 = getelementptr inbounds i8, ptr %ecx.memory.i50044, i64 8
  %ecx.memory.buffer.ptr.shared.i50051 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50050, align 8, !noalias !500
  %ecx.memory.buffer.ptr.i50052 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50051, i64 %ecx.memory.last_checkpoint.i50048
  %slot.i50053 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50052, i64 64
  %slot.value.i50054 = load i256, ptr %slot.i50053, align 1, !noalias !500
  %2398 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50054)
  %sp17671 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2394
  %sp17675 = getelementptr i256, ptr %sp17657, i64 3
  store i256 %swap.b17691, ptr %sp17675, align 16
  %2399 = add i256 %swap.b17691, %2398
  store i256 %2399, ptr %sp17661, align 16
  store i256 %2398, ptr %sp17657, align 16
  store i256 %swap.b17691, ptr %sp17671, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !505)
  %ecx.memory.len.addr.i50061 = getelementptr inbounds i8, ptr %ecx.memory.i50060, i64 16
  %ecx.memory.len.i50062 = load i64, ptr %ecx.memory.len.addr.i50061, align 8, !noalias !505
  %ecx.memory.last_checkpoint.addr.i50063 = getelementptr inbounds i8, ptr %ecx.memory.i50060, i64 48
  %ecx.memory.last_checkpoint.i50064 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50063, align 8, !noalias !505
  %2400 = sub i64 %ecx.memory.len.i50062, %ecx.memory.last_checkpoint.i50064
  %2401 = icmp ugt i256 %swap.b17691, 18446744073709551615
  %2402 = trunc i256 %swap.b17691 to i64
  %2403 = add i64 %2402, 32
  %2404 = icmp ugt i64 %2402, -33
  %2405 = or i1 %2401, %2404
  %2406 = select i1 %2405, i64 -1, i64 %2403
  %2407 = icmp ugt i64 %2406, %2400
  br i1 %2407, label %resize.i50071, label %OP5187.PUSH1, !prof !5

resize.i50071:                                    ; preds = %OP5180.MLOAD.contd
  %2408 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2406)
  %.not.i50072 = icmp eq i8 %2408, 0
  br i1 %.not.i50072, label %OP5187.PUSH1, label %return, !prof !6

OP5187.PUSH1:                                     ; preds = %OP5180.MLOAD.contd, %resize.i50071
  %ecx.memory.buffer.ptr.shared.addr.i50066 = getelementptr inbounds i8, ptr %ecx.memory.i50060, i64 8
  %ecx.memory.buffer.ptr.shared.i50067 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50066, align 8, !noalias !505
  %ecx.memory.buffer.ptr.i50068 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50067, i64 %ecx.memory.last_checkpoint.i50064
  %slot.i50069 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50068, i64 %2402
  %2409 = tail call i256 @llvm.bswap.i256(i256 %2399)
  store i256 %2409, ptr %slot.i50069, align 1, !noalias !505
  store i256 1, ptr %sp17661, align 16
  %dup217701 = load i256, ptr %sp17657, align 16
  store i256 %dup217701, ptr %sp17671, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !508)
  %ecx.memory.i50075 = load ptr, ptr %ecx.memory.addr.i50043, align 8, !alias.scope !508
  %ecx.memory.len.addr.i50076 = getelementptr inbounds i8, ptr %ecx.memory.i50075, i64 16
  %ecx.memory.len.i50077 = load i64, ptr %ecx.memory.len.addr.i50076, align 8, !noalias !508
  %ecx.memory.last_checkpoint.addr.i50078 = getelementptr inbounds i8, ptr %ecx.memory.i50075, i64 48
  %ecx.memory.last_checkpoint.i50079 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50078, align 8, !noalias !508
  %2410 = sub i64 %ecx.memory.len.i50077, %ecx.memory.last_checkpoint.i50079
  %2411 = icmp ugt i256 %dup217701, 18446744073709551615
  %2412 = trunc i256 %dup217701 to i64
  %2413 = add i64 %2412, 32
  %2414 = icmp ugt i64 %2412, -33
  %2415 = or i1 %2411, %2414
  %2416 = select i1 %2415, i64 -1, i64 %2413
  %2417 = icmp ugt i64 %2416, %2410
  br i1 %2417, label %resize.i50086, label %OP5190.PUSH32, !prof !5

resize.i50086:                                    ; preds = %OP5187.PUSH1
  %2418 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2416)
  %.not.i50087 = icmp eq i8 %2418, 0
  br i1 %.not.i50087, label %OP5190.PUSH32, label %return, !prof !6

OP5190.PUSH32:                                    ; preds = %OP5187.PUSH1, %resize.i50086
  %ecx.memory.buffer.ptr.shared.addr.i50081 = getelementptr inbounds i8, ptr %ecx.memory.i50075, i64 8
  %ecx.memory.buffer.ptr.shared.i50082 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50081, align 8, !noalias !508
  %ecx.memory.buffer.ptr.i50083 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50082, i64 %ecx.memory.last_checkpoint.i50079
  %slot.i50084 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50083, i64 %2412
  store i256 452312848583266388373324160190187140051835877600158453279131187530910662656, ptr %slot.i50084, align 1, !noalias !508
  store i256 22615642429163319418666208009509357002591793880007922663956559376545533132800, ptr %sp17661, align 16
  %dup317714 = load i256, ptr %sp17657, align 16
  store i256 %dup317714, ptr %sp17675, align 16
  %2419 = add i256 %dup317714, 32
  store i256 %2419, ptr %sp17671, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !511)
  %ecx.memory.i50090 = load ptr, ptr %ecx.memory.addr.i50043, align 8, !alias.scope !511
  %ecx.memory.len.addr.i50091 = getelementptr inbounds i8, ptr %ecx.memory.i50090, i64 16
  %ecx.memory.len.i50092 = load i64, ptr %ecx.memory.len.addr.i50091, align 8, !noalias !511
  %ecx.memory.last_checkpoint.addr.i50093 = getelementptr inbounds i8, ptr %ecx.memory.i50090, i64 48
  %ecx.memory.last_checkpoint.i50094 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50093, align 8, !noalias !511
  %2420 = sub i64 %ecx.memory.len.i50092, %ecx.memory.last_checkpoint.i50094
  %2421 = icmp ugt i256 %2419, 18446744073709551615
  %2422 = trunc i256 %2419 to i64
  %2423 = add i64 %2422, 32
  %2424 = icmp ugt i64 %2422, -33
  %2425 = or i1 %2421, %2424
  %2426 = select i1 %2425, i64 -1, i64 %2423
  %2427 = icmp ugt i64 %2426, %2420
  br i1 %2427, label %resize.i50101, label %OP5195.SWAP1, !prof !5

resize.i50101:                                    ; preds = %OP5190.PUSH32
  %2428 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %2426)
  %.not.i50102 = icmp eq i8 %2428, 0
  br i1 %.not.i50102, label %OP5195.SWAP1, label %return, !prof !6

OP5195.SWAP1:                                     ; preds = %OP5190.PUSH32, %resize.i50101
  %ecx.memory.buffer.ptr.shared.addr.i50096 = getelementptr inbounds i8, ptr %ecx.memory.i50090, i64 8
  %ecx.memory.buffer.ptr.shared.i50097 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50096, align 8, !noalias !511
  %ecx.memory.buffer.ptr.i50098 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50097, i64 %ecx.memory.last_checkpoint.i50094
  %slot.i50099 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50098, i64 %2422
  store i256 50, ptr %slot.i50099, align 1, !noalias !511
  %swap.a17729 = load i256, ptr %sp17657, align 16
  %sp17730 = getelementptr i256, ptr %sp17657, i64 -1
  %swap.b17731 = load i256, ptr %sp17730, align 16
  store i256 %swap.a17729, ptr %sp17730, align 16
  store i256 %swap.b17731, ptr %sp17657, align 16
  br label %dynamic_jump_table.preheader

OP5197.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1404.JUMPDEST
  %len.addr.205 = phi i64 [ %687, %OP1404.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2429 = add i64 %len.addr.205, 1
  %sp17737 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.205
  store i256 0, ptr %sp17737, align 16
  %2430 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17737, i8 17)
  %.not48781 = icmp eq i8 %2430, 0
  br i1 %.not48781, label %OP5200.PUSH20, label %return, !prof !6

OP5200.PUSH20:                                    ; preds = %OP5197.JUMPDEST
  %2431 = add i64 %len.addr.205, 2
  %sp17741 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2429
  %b17746 = load i256, ptr %sp17737, align 16
  %contract.caller.addr17749 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller17750 = load i160, ptr %contract.caller.addr17749, align 16
  %2432 = tail call i160 @llvm.bswap.i160(i160 %contract.caller17750)
  %2433 = zext i160 %2432 to i256
  store i256 %2433, ptr %sp17741, align 16
  %2434 = trunc i256 %b17746 to i160
  %2435 = icmp eq i160 %2432, %2434
  %2436 = zext i1 %2435 to i256
  store i256 %2436, ptr %sp17737, align 16
  br i1 %2435, label %OP5238.JUMPDEST, label %OP5206.PUSH1

OP5206.PUSH1:                                     ; preds = %OP5200.PUSH20
  store i256 64, ptr %sp17737, align 16
  store i256 64, ptr %sp17741, align 16
  %mload.out.slot17770 = alloca i256, align 16
  %2437 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot17770, ptr %arg.ecx.addr)
  %.not48782 = icmp eq i8 %2437, 0
  br i1 %.not48782, label %OP5208.MLOAD.contd, label %return, !prof !6

OP5208.MLOAD.contd:                               ; preds = %OP5206.PUSH1
  %mload.out17771 = load i256, ptr %mload.out.slot17770, align 16
  store i256 %mload.out17771, ptr %sp17741, align 16
  %2438 = add i64 %len.addr.205, 3
  %sp17774 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2431
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp17774, align 16
  %sp17778 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2438
  store i256 %mload.out17771, ptr %sp17778, align 16
  %2439 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out17771, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48783 = icmp eq i8 %2439, 0
  br i1 %.not48783, label %OP5212.PUSH1, label %return, !prof !6

OP5212.PUSH1:                                     ; preds = %OP5208.MLOAD.contd
  store i256 32, ptr %sp17774, align 16
  %dup317790 = load i256, ptr %sp17741, align 16
  %sp17791 = getelementptr i256, ptr %sp17737, i64 4
  %2440 = add i256 %dup317790, 4
  store i256 32, ptr %sp17778, align 16
  store i256 %2440, ptr %sp17791, align 16
  %2441 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2440, i256 32, ptr %arg.ecx.addr)
  %.not48784 = icmp eq i8 %2441, 0
  br i1 %.not48784, label %OP5219.PUSH1, label %return, !prof !6

OP5219.PUSH1:                                     ; preds = %OP5212.PUSH1
  %dup317816 = load i256, ptr %sp17741, align 16
  store i256 %dup317816, ptr %sp17791, align 16
  %2442 = add i256 %dup317816, 36
  store i256 %2442, ptr %sp17778, align 16
  %b17828 = load i256, ptr %sp17774, align 16
  %2443 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2442, i256 %b17828, ptr %arg.ecx.addr)
  %.not48785 = icmp eq i8 %2443, 0
  br i1 %.not48785, label %OP5223.PUSH32, label %return, !prof !6

OP5223.PUSH32:                                    ; preds = %OP5219.PUSH1
  store i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %sp17774, align 16
  %dup317835 = load i256, ptr %sp17741, align 16
  store i256 %dup317835, ptr %sp17791, align 16
  %2444 = add i256 %dup317835, 68
  store i256 %2444, ptr %sp17778, align 16
  %2445 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2444, i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %arg.ecx.addr)
  %.not48786 = icmp eq i8 %2445, 0
  br i1 %.not48786, label %OP5228.SWAP1, label %return, !prof !6

OP5228.SWAP1:                                     ; preds = %OP5223.PUSH32
  %swap.a17850 = load i256, ptr %sp17741, align 16
  %swap.b17852 = load i256, ptr %sp17737, align 16
  store i256 %swap.a17850, ptr %sp17737, align 16
  store i256 %swap.b17852, ptr %sp17741, align 16
  %mload.out.slot17856 = alloca i256, align 16
  %2446 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b17852, ptr %mload.out.slot17856, ptr %arg.ecx.addr)
  %.not48787 = icmp eq i8 %2446, 0
  br i1 %.not48787, label %OP5229.MLOAD.contd, label %return, !prof !6

OP5229.MLOAD.contd:                               ; preds = %OP5228.SWAP1
  %mload.out17857 = load i256, ptr %mload.out.slot17856, align 16
  %swap.b17863 = load i256, ptr %sp17737, align 16
  %2447 = sub i256 %swap.b17863, %mload.out17857
  store i256 100, ptr %sp17774, align 16
  %2448 = add i256 %2447, 100
  store i256 %2448, ptr %sp17737, align 16
  store i256 %mload.out17857, ptr %sp17741, align 16
  %2449 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17737, i8 16)
  %.not48788 = icmp eq i8 %2449, 0
  %spec.select36616 = select i1 %.not48788, i8 16, i8 %2449, !prof !6
  br label %return

OP5238.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54108 = add i64 %len.addr.357, 2
  %.pre54231 = add i64 %len.addr.357, 1
  br label %OP5238.JUMPDEST

OP5238.JUMPDEST:                                  ; preds = %OP5238.JUMPDEST.loopexit, %OP5200.PUSH20
  %.pre-phi54232 = phi i64 [ %.pre54231, %OP5238.JUMPDEST.loopexit ], [ %2429, %OP5200.PUSH20 ]
  %.pre-phi54109 = phi i64 [ %.pre54108, %OP5238.JUMPDEST.loopexit ], [ %2431, %OP5200.PUSH20 ]
  %len.addr.206 = phi i64 [ %len.addr.357, %OP5238.JUMPDEST.loopexit ], [ %len.addr.205, %OP5200.PUSH20 ]
  %sp17896 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.206
  %sp17898 = getelementptr i256, ptr %sp17896, i64 -1
  %dup217899 = load i256, ptr %sp17898, align 16
  %sp17900 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54232
  store i256 %dup217899, ptr %sp17900, align 16
  %2450 = and i256 %dup217899, 1461501637330902918203684832716283019655932542975
  store i256 %2450, ptr %sp17896, align 16
  %.not48789 = icmp eq i256 %2450, 0
  br i1 %.not48789, label %OP5244.PUSH1, label %OP5282.JUMPDEST

OP5244.PUSH1:                                     ; preds = %OP5238.JUMPDEST
  store i256 64, ptr %sp17896, align 16
  %mload.out.slot17915 = alloca i256, align 16
  %2451 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot17915, ptr %arg.ecx.addr)
  %.not48790 = icmp eq i8 %2451, 0
  br i1 %.not48790, label %OP5245.MLOAD.contd, label %return, !prof !6

OP5245.MLOAD.contd:                               ; preds = %OP5244.PUSH1
  %mload.out17916 = load i256, ptr %mload.out.slot17915, align 16
  store i256 %mload.out17916, ptr %sp17896, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp17900, align 16
  %2452 = add i64 %len.addr.206, 3
  %sp17923 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54109
  store i256 %mload.out17916, ptr %sp17923, align 16
  %2453 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out17916, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48791 = icmp eq i8 %2453, 0
  br i1 %.not48791, label %OP5249.PUSH1, label %return, !prof !6

OP5249.PUSH1:                                     ; preds = %OP5245.MLOAD.contd
  store i256 4, ptr %sp17900, align 16
  %b17935 = load i256, ptr %sp17896, align 16
  %2454 = add i256 %b17935, 4
  store i256 %2454, ptr %sp17896, align 16
  store i256 %2454, ptr %sp17900, align 16
  %sp17946 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2452
  %2455 = add i256 %b17935, 36
  store i256 %2455, ptr %sp17923, align 16
  %sp17960 = getelementptr i256, ptr %sp17896, i64 4
  store i256 32, ptr %sp17946, align 16
  store i256 %2454, ptr %sp17960, align 16
  %2456 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2454, i256 32, ptr %arg.ecx.addr)
  %.not48792 = icmp eq i8 %2456, 0
  br i1 %.not48792, label %OP5260.PUSH1, label %return, !prof !6

OP5260.PUSH1:                                     ; preds = %OP5249.PUSH1
  store i256 40, ptr %sp17946, align 16
  %dup217980 = load i256, ptr %sp17923, align 16
  store i256 %dup217980, ptr %sp17960, align 16
  %2457 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup217980, i256 40, ptr %arg.ecx.addr)
  %.not48793 = icmp eq i8 %2457, 0
  br i1 %.not48793, label %OP5263.PUSH1, label %return, !prof !6

OP5263.PUSH1:                                     ; preds = %OP5260.PUSH1
  store i256 32, ptr %sp17946, align 16
  %b17993 = load i256, ptr %sp17923, align 16
  %2458 = add i256 %b17993, 32
  store i256 %2458, ptr %sp17923, align 16
  store i256 22093, ptr %sp17960, align 16
  %sp18002 = getelementptr i256, ptr %sp17896, i64 5
  store i256 40, ptr %sp17946, align 16
  store i256 %2458, ptr %sp18002, align 16
  %2459 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17946)
  %.not48794 = icmp eq i8 %2459, 0
  br i1 %.not48794, label %OP5270.PUSH1, label %return, !prof !6

OP5270.PUSH1:                                     ; preds = %OP5263.PUSH1
  store i256 64, ptr %sp17946, align 16
  %b18016 = load i256, ptr %sp17923, align 16
  %2460 = add i256 %b18016, 64
  store i256 %2460, ptr %sp17923, align 16
  %swap.b18022 = load i256, ptr %sp17896, align 16
  store i256 %2460, ptr %sp17896, align 16
  store i256 %swap.b18022, ptr %sp17923, align 16
  store i256 64, ptr %sp17900, align 16
  %mload.out.slot18030 = alloca i256, align 16
  %2461 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot18030, ptr %arg.ecx.addr)
  %.not48795 = icmp eq i8 %2461, 0
  br i1 %.not48795, label %OP5276.MLOAD.contd, label %return, !prof !6

OP5276.MLOAD.contd:                               ; preds = %OP5270.PUSH1
  %mload.out18031 = load i256, ptr %mload.out.slot18030, align 16
  store i256 %mload.out18031, ptr %sp17900, align 16
  store i256 %mload.out18031, ptr %sp17923, align 16
  %swap.b18041 = load i256, ptr %sp17896, align 16
  store i256 %swap.b18041, ptr %sp17923, align 16
  %2462 = sub i256 %swap.b18041, %mload.out18031
  store i256 %2462, ptr %sp17896, align 16
  store i256 %mload.out18031, ptr %sp17900, align 16
  %2463 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp17896, i8 16)
  %.not48796 = icmp eq i8 %2463, 0
  %spec.select36617 = select i1 %.not48796, i8 16, i8 %2463, !prof !6
  br label %return

OP5282.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5238.JUMPDEST
  %len.addr.207 = phi i64 [ %len.addr.206, %OP5238.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp18057 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.207
  store i256 1, ptr %sp18057, align 16
  %2464 = add i64 %len.addr.207, 2
  %sp18061 = getelementptr i256, ptr %sp18057, i64 1
  store i256 1, ptr %sp18061, align 16
  %2465 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18061, i8 17)
  %.not48797 = icmp eq i8 %2465, 0
  br i1 %.not48797, label %OP5286.PUSH32, label %return, !prof !6

OP5286.PUSH32:                                    ; preds = %OP5282.JUMPDEST
  %2466 = add i64 %len.addr.207, 3
  %sp18065 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2464
  %b18070 = load i256, ptr %sp18061, align 16
  %2467 = and i256 %b18070, -1461501637330902918203684832716283019655932542976
  %sp18075 = getelementptr i256, ptr %sp18057, i64 -1
  %dup418076 = load i256, ptr %sp18075, align 16
  %sp18077 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2466
  %sp18081 = getelementptr i256, ptr %sp18057, i64 4
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp18081, align 16
  %2468 = and i256 %dup418076, 1461501637330902918203684832716283019655932542975
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp18061, align 16
  %2469 = or disjoint i256 %2467, %2468
  %swap.b18113 = load i256, ptr %sp18057, align 16
  store i256 %2469, ptr %sp18057, align 16
  store i256 %2469, ptr %sp18065, align 16
  store i256 %swap.b18113, ptr %sp18077, align 16
  %2470 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18065, i8 17)
  %.not48798 = icmp eq i8 %2470, 0
  br i1 %.not48798, label %OP5300.PUSH1, label %return, !prof !6

OP5300.PUSH1:                                     ; preds = %OP5286.PUSH32
  store i256 64, ptr %sp18065, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !514)
  %ecx.memory.addr.i50104 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50105 = load ptr, ptr %ecx.memory.addr.i50104, align 8, !alias.scope !514, !noalias !517
  %ecx.memory.len.addr.i50106 = getelementptr inbounds i8, ptr %ecx.memory.i50105, i64 16
  %ecx.memory.len.i50107 = load i64, ptr %ecx.memory.len.addr.i50106, align 8, !noalias !519
  %ecx.memory.last_checkpoint.addr.i50108 = getelementptr inbounds i8, ptr %ecx.memory.i50105, i64 48
  %ecx.memory.last_checkpoint.i50109 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50108, align 8, !noalias !519
  %2471 = sub i64 %ecx.memory.len.i50107, %ecx.memory.last_checkpoint.i50109
  %2472 = icmp ult i64 %2471, 96
  br i1 %2472, label %resize.i50117, label %OP5301.MLOAD.contd, !prof !5

resize.i50117:                                    ; preds = %OP5300.PUSH1
  %2473 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !517
  %.not.i50118 = icmp eq i8 %2473, 0
  br i1 %.not.i50118, label %OP5301.MLOAD.contd, label %return, !prof !6

OP5301.MLOAD.contd:                               ; preds = %OP5300.PUSH1, %resize.i50117
  %ecx.memory.buffer.ptr.shared.addr.i50111 = getelementptr inbounds i8, ptr %ecx.memory.i50105, i64 8
  %ecx.memory.buffer.ptr.shared.i50112 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50111, align 8, !noalias !519
  %ecx.memory.buffer.ptr.i50113 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50112, i64 %ecx.memory.last_checkpoint.i50109
  %slot.i50114 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50113, i64 64
  %slot.value.i50115 = load i256, ptr %slot.i50114, align 1, !noalias !519
  %2474 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50115)
  %swap.b18137 = load i256, ptr %sp18057, align 16
  %b18142 = load i256, ptr %sp18061, align 16
  %2475 = and i256 %b18142, %swap.b18137
  store i256 %2475, ptr %sp18057, align 16
  store i256 -32558556099635544791474061934465956501875877941325526567121169180540788365820, ptr %sp18061, align 16
  store i256 0, ptr %sp18065, align 16
  store i256 %2474, ptr %sp18077, align 16
  %2476 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18057, i8 2)
  %.not48800 = icmp eq i8 %2476, 0
  br i1 %.not48800, label %OP5310.POP, label %return, !prof !6

OP5310.POP:                                       ; preds = %OP5301.MLOAD.contd
  %2477 = add i64 %len.addr.207, -2
  %sp18167 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2477
  %a18168 = load i256, ptr %sp18167, align 16
  br label %dynamic_jump_table.preheader

OP5312.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1426.JUMPDEST
  %len.addr.208 = phi i64 [ %704, %OP1426.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2478 = add i64 %len.addr.208, 1
  %sp18171 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.208
  store i256 1, ptr %sp18171, align 16
  %2479 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18171, i8 17)
  %.not48751 = icmp eq i8 %2479, 0
  br i1 %.not48751, label %OP5315.PUSH21, label %return, !prof !6

OP5315.PUSH21:                                    ; preds = %OP5312.JUMPDEST
  %2480 = add i64 %len.addr.208, 2
  %sp18175 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2478
  %swap.b18180 = load i256, ptr %sp18171, align 16
  store i256 255, ptr %sp18175, align 16
  %2481 = and i256 %swap.b18180, 372682917519380244141939632342652170012262798458880
  %2482 = icmp eq i256 %2481, 0
  %2483 = zext i1 %2482 to i256
  store i256 %2483, ptr %sp18171, align 16
  br i1 %2482, label %OP5354.JUMPDEST, label %OP5323.PUSH1

OP5323.PUSH1:                                     ; preds = %OP5315.PUSH21
  store i256 64, ptr %sp18171, align 16
  store i256 64, ptr %sp18175, align 16
  %mload.out.slot18211 = alloca i256, align 16
  %2484 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot18211, ptr %arg.ecx.addr)
  %.not48752 = icmp eq i8 %2484, 0
  br i1 %.not48752, label %OP5325.MLOAD.contd, label %return, !prof !6

OP5325.MLOAD.contd:                               ; preds = %OP5323.PUSH1
  %mload.out18212 = load i256, ptr %mload.out.slot18211, align 16
  store i256 %mload.out18212, ptr %sp18175, align 16
  %sp18215 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2480
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp18215, align 16
  %sp18219 = getelementptr i256, ptr %sp18171, i64 3
  store i256 %mload.out18212, ptr %sp18219, align 16
  %2485 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out18212, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48753 = icmp eq i8 %2485, 0
  br i1 %.not48753, label %OP5329.PUSH1, label %return, !prof !6

OP5329.PUSH1:                                     ; preds = %OP5325.MLOAD.contd
  store i256 32, ptr %sp18215, align 16
  %dup318231 = load i256, ptr %sp18175, align 16
  %sp18232 = getelementptr i256, ptr %sp18171, i64 4
  store i256 %dup318231, ptr %sp18232, align 16
  %2486 = add i256 %dup318231, 4
  store i256 %2486, ptr %sp18219, align 16
  %2487 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2486, i256 32, ptr %arg.ecx.addr)
  %.not48754 = icmp eq i8 %2487, 0
  br i1 %.not48754, label %OP5334.PUSH1, label %return, !prof !6

OP5334.PUSH1:                                     ; preds = %OP5329.PUSH1
  store i256 16, ptr %sp18215, align 16
  %dup318250 = load i256, ptr %sp18175, align 16
  store i256 %dup318250, ptr %sp18232, align 16
  %2488 = add i256 %dup318250, 36
  store i256 %2488, ptr %sp18219, align 16
  %2489 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2488, i256 16, ptr %arg.ecx.addr)
  %.not48755 = icmp eq i8 %2489, 0
  br i1 %.not48755, label %OP5339.PUSH32, label %return, !prof !6

OP5339.PUSH32:                                    ; preds = %OP5334.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp18215, align 16
  %dup318269 = load i256, ptr %sp18175, align 16
  store i256 %dup318269, ptr %sp18232, align 16
  %2490 = add i256 %dup318269, 68
  store i256 %2490, ptr %sp18219, align 16
  %2491 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2490, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48756 = icmp eq i8 %2491, 0
  br i1 %.not48756, label %OP5344.SWAP1, label %return, !prof !6

OP5344.SWAP1:                                     ; preds = %OP5339.PUSH32
  %swap.a18284 = load i256, ptr %sp18175, align 16
  %swap.b18286 = load i256, ptr %sp18171, align 16
  store i256 %swap.a18284, ptr %sp18171, align 16
  store i256 %swap.b18286, ptr %sp18175, align 16
  %mload.out.slot18290 = alloca i256, align 16
  %2492 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b18286, ptr %mload.out.slot18290, ptr %arg.ecx.addr)
  %.not48757 = icmp eq i8 %2492, 0
  br i1 %.not48757, label %OP5345.MLOAD.contd, label %return, !prof !6

OP5345.MLOAD.contd:                               ; preds = %OP5344.SWAP1
  %mload.out18291 = load i256, ptr %mload.out.slot18290, align 16
  %swap.b18297 = load i256, ptr %sp18171, align 16
  %2493 = sub i256 %swap.b18297, %mload.out18291
  store i256 100, ptr %sp18215, align 16
  %2494 = add i256 %2493, 100
  store i256 %2494, ptr %sp18171, align 16
  store i256 %mload.out18291, ptr %sp18175, align 16
  %2495 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18171, i8 16)
  %.not48758 = icmp eq i8 %2495, 0
  %spec.select36618 = select i1 %.not48758, i8 16, i8 %2495, !prof !6
  br label %return

OP5354.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5315.PUSH21
  %len.addr.209 = phi i64 [ %len.addr.208, %OP5315.PUSH21 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp18330 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.209
  store i256 10935, ptr %sp18330, align 16
  %sp18332 = getelementptr i256, ptr %sp18330, i64 -5
  %dup618333 = load i256, ptr %sp18332, align 16
  %sp18334 = getelementptr i256, ptr %sp18330, i64 1
  store i256 %dup618333, ptr %sp18334, align 16
  %sp18336 = getelementptr i256, ptr %sp18330, i64 -4
  %dup618337 = load i256, ptr %sp18336, align 16
  %sp18338 = getelementptr i256, ptr %sp18330, i64 2
  store i256 %dup618337, ptr %sp18338, align 16
  %sp18340 = getelementptr i256, ptr %sp18330, i64 -3
  %dup618341 = load i256, ptr %sp18340, align 16
  %sp18342 = getelementptr i256, ptr %sp18330, i64 3
  store i256 %dup618341, ptr %sp18342, align 16
  %sp18344 = getelementptr i256, ptr %sp18330, i64 -2
  %dup618345 = load i256, ptr %sp18344, align 16
  %sp18346 = getelementptr i256, ptr %sp18330, i64 4
  store i256 %dup618345, ptr %sp18346, align 16
  %2496 = add i64 %len.addr.209, 6
  %sp18348 = getelementptr i256, ptr %sp18330, i64 -1
  %dup618349 = load i256, ptr %sp18348, align 16
  %sp18350 = getelementptr i256, ptr %sp18330, i64 5
  store i256 %dup618349, ptr %sp18350, align 16
  br label %OP8129.JUMPDEST

OP5363.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2497 = add i64 %len.addr.357, -6
  %sp18359 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2497
  %a18360 = load i256, ptr %sp18359, align 16
  br label %dynamic_jump_table.backedge

OP5370.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1455.JUMPDEST
  %len.addr.210 = phi i64 [ %712, %OP1455.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2498 = add i64 %len.addr.210, 1
  %sp18363 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.210
  store i256 1, ptr %sp18363, align 16
  %2499 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18363, i8 17)
  %.not48418 = icmp eq i8 %2499, 0
  br i1 %.not48418, label %OP5373.PUSH21, label %return, !prof !6

OP5373.PUSH21:                                    ; preds = %OP5370.JUMPDEST
  %sp18367 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2498
  %swap.b18372 = load i256, ptr %sp18363, align 16
  %2500 = lshr i256 %swap.b18372, 160
  %2501 = and i256 %2500, 255
  store i256 %2501, ptr %sp18363, align 16
  %sp18388 = getelementptr i256, ptr %sp18363, i64 -1
  %dup218389 = load i256, ptr %sp18388, align 16
  store i256 %dup218389, ptr %sp18367, align 16
  br label %dynamic_jump_table.preheader

OP5380.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1474.JUMPDEST
  %len.addr.211 = phi i64 [ %719, %OP1474.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp18396 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.211
  store i256 0, ptr %sp18396, align 16
  %sp18398 = getelementptr i256, ptr %sp18396, i64 1
  store i256 10986, ptr %sp18398, align 16
  %2502 = add i64 %len.addr.211, 3
  %sp18400 = getelementptr i256, ptr %sp18396, i64 -1
  %dup318401 = load i256, ptr %sp18400, align 16
  %sp18402 = getelementptr i256, ptr %sp18396, i64 2
  store i256 %dup318401, ptr %sp18402, align 16
  br label %OP7746.JUMPDEST

OP5386.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2503 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp18406 = getelementptr i256, ptr %2503, i64 -1
  %swap.a18407 = load i256, ptr %sp18406, align 16
  %sp18408 = getelementptr i256, ptr %2503, i64 -4
  %swap.b18409 = load i256, ptr %sp18408, align 16
  store i256 %swap.a18407, ptr %sp18408, align 16
  store i256 %swap.b18409, ptr %sp18406, align 16
  %sp18413 = getelementptr i256, ptr %2503, i64 -3
  %swap.b18414 = load i256, ptr %sp18413, align 16
  store i256 %swap.b18409, ptr %sp18413, align 16
  store i256 %swap.b18414, ptr %sp18406, align 16
  %2504 = add i64 %len.addr.357, -3
  br label %dynamic_jump_table.backedge

OP5392.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1496.JUMPDEST
  %len.addr.212 = phi i64 [ %730, %OP1496.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp18422 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.212
  %sp18426 = getelementptr i256, ptr %sp18422, i64 -1
  %b18427 = load i256, ptr %sp18426, align 16
  %2505 = and i256 %b18427, 1461501637330902918203684832716283019655932542975
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp18426, i8 0, i64 32, i1 false)
  store i256 %2505, ptr %sp18422, align 16
  %sp18439 = getelementptr i256, ptr %sp18422, i64 1
  store i256 0, ptr %sp18439, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !520)
  %ecx.memory.addr.i50120 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50121 = load ptr, ptr %ecx.memory.addr.i50120, align 8, !alias.scope !520
  %ecx.memory.len.addr.i50122 = getelementptr inbounds i8, ptr %ecx.memory.i50121, i64 16
  %ecx.memory.len.i50123 = load i64, ptr %ecx.memory.len.addr.i50122, align 8, !noalias !520
  %ecx.memory.last_checkpoint.addr.i50124 = getelementptr inbounds i8, ptr %ecx.memory.i50121, i64 48
  %ecx.memory.last_checkpoint.i50125 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50124, align 8, !noalias !520
  %2506 = sub i64 %ecx.memory.len.i50123, %ecx.memory.last_checkpoint.i50125
  %2507 = icmp ult i64 %2506, 32
  br i1 %2507, label %resize.i50131, label %OP5399.PUSH1, !prof !5

resize.i50131:                                    ; preds = %OP5392.JUMPDEST
  %2508 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50132 = icmp eq i8 %2508, 0
  br i1 %.not.i50132, label %OP5399.PUSH1, label %return, !prof !6

OP5399.PUSH1:                                     ; preds = %OP5392.JUMPDEST, %resize.i50131
  %ecx.memory.buffer.ptr.shared.addr.i50127 = getelementptr inbounds i8, ptr %ecx.memory.i50121, i64 8
  %ecx.memory.buffer.ptr.shared.i50128 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50127, align 8, !noalias !520
  %ecx.memory.buffer.ptr.i50129 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50128, i64 %ecx.memory.last_checkpoint.i50125
  %2509 = tail call i256 @llvm.bswap.i256(i256 %2505)
  store i256 %2509, ptr %ecx.memory.buffer.ptr.i50129, align 1, !noalias !520
  store i256 17, ptr %sp18422, align 16
  store i256 32, ptr %sp18439, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !523)
  %ecx.memory.i50135 = load ptr, ptr %ecx.memory.addr.i50120, align 8, !alias.scope !523
  %ecx.memory.len.addr.i50136 = getelementptr inbounds i8, ptr %ecx.memory.i50135, i64 16
  %ecx.memory.len.i50137 = load i64, ptr %ecx.memory.len.addr.i50136, align 8, !noalias !523
  %ecx.memory.last_checkpoint.addr.i50138 = getelementptr inbounds i8, ptr %ecx.memory.i50135, i64 48
  %ecx.memory.last_checkpoint.i50139 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50138, align 8, !noalias !523
  %2510 = sub i64 %ecx.memory.len.i50137, %ecx.memory.last_checkpoint.i50139
  %2511 = icmp ult i64 %2510, 64
  br i1 %2511, label %resize.i50146, label %OP5402.PUSH1, !prof !5

resize.i50146:                                    ; preds = %OP5399.PUSH1
  %2512 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50147 = icmp eq i8 %2512, 0
  br i1 %.not.i50147, label %OP5402.PUSH1, label %return, !prof !6

OP5402.PUSH1:                                     ; preds = %OP5399.PUSH1, %resize.i50146
  %ecx.memory.buffer.ptr.shared.addr.i50141 = getelementptr inbounds i8, ptr %ecx.memory.i50135, i64 8
  %ecx.memory.buffer.ptr.shared.i50142 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50141, align 8, !noalias !523
  %ecx.memory.buffer.ptr.i50143 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50142, i64 %ecx.memory.last_checkpoint.i50139
  %slot.i50144 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50143, i64 32
  store i256 7689318425915528602346510723233181380881209919202693705745230188025481265152, ptr %slot.i50144, align 1, !noalias !523
  %swap.b18460 = load i256, ptr %sp18426, align 16
  store i256 64, ptr %sp18426, align 16
  store i256 %swap.b18460, ptr %sp18422, align 16
  %2513 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18426)
  %.not48415 = icmp eq i8 %2513, 0
  br i1 %.not48415, label %OP5405.SLOAD, label %return, !prof !6

OP5405.SLOAD:                                     ; preds = %OP5402.PUSH1
  %2514 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18426, i8 17)
  %.not48416 = icmp eq i8 %2514, 0
  br i1 %.not48416, label %OP5406.SWAP1, label %return, !prof !6

OP5406.SWAP1:                                     ; preds = %OP5405.SLOAD
  %swap.a18467 = load i256, ptr %sp18426, align 16
  %sp18468 = getelementptr i256, ptr %sp18422, i64 -2
  %swap.b18469 = load i256, ptr %sp18468, align 16
  store i256 %swap.a18467, ptr %sp18468, align 16
  store i256 %swap.b18469, ptr %sp18426, align 16
  %2515 = add i64 %len.addr.212, -1
  br label %dynamic_jump_table.preheader

OP5408.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1503.JUMPDEST
  %len.addr.213 = phi i64 [ %735, %OP1503.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2516 = add i64 %len.addr.213, 1
  %sp18475 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.213
  store i256 -21439277051702905465850011134918405524082246296578451495697401171165405168152, ptr %sp18475, align 16
  %sp18477 = getelementptr i256, ptr %sp18475, i64 -1
  %dup218478 = load i256, ptr %sp18477, align 16
  %sp18479 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2516
  store i256 %dup218478, ptr %sp18479, align 16
  br label %dynamic_jump_table.preheader

OP5412.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1507.JUMPDEST
  %len.addr.214 = phi i64 [ %736, %OP1507.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2517 = add i64 %len.addr.214, 1
  %sp18485 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.214
  store i256 1, ptr %sp18485, align 16
  %2518 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18485, i8 17)
  %.not48946 = icmp eq i8 %2518, 0
  br i1 %.not48946, label %OP5415.PUSH20, label %return, !prof !6

OP5415.PUSH20:                                    ; preds = %OP5412.JUMPDEST
  %2519 = add i64 %len.addr.214, 2
  %sp18489 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2517
  %b18494 = load i256, ptr %sp18485, align 16
  %contract.caller.addr18497 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller18498 = load i160, ptr %contract.caller.addr18497, align 16
  %2520 = tail call i160 @llvm.bswap.i160(i160 %contract.caller18498)
  %2521 = zext i160 %2520 to i256
  store i256 %2521, ptr %sp18489, align 16
  %2522 = trunc i256 %b18494 to i160
  %2523 = icmp eq i160 %2520, %2522
  %2524 = zext i1 %2523 to i256
  store i256 %2524, ptr %sp18485, align 16
  br i1 %2523, label %OP5459.JUMPDEST, label %OP5421.PUSH1

OP5421.PUSH1:                                     ; preds = %OP5415.PUSH20
  store i256 64, ptr %sp18485, align 16
  %mload.out.slot18514 = alloca i256, align 16
  %2525 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot18514, ptr %arg.ecx.addr)
  %.not48947 = icmp eq i8 %2525, 0
  br i1 %.not48947, label %OP5422.MLOAD.contd, label %return, !prof !6

OP5422.MLOAD.contd:                               ; preds = %OP5421.PUSH1
  %mload.out18515 = load i256, ptr %mload.out.slot18514, align 16
  store i256 %mload.out18515, ptr %sp18485, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp18489, align 16
  %2526 = add i64 %len.addr.214, 3
  %sp18522 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2519
  store i256 %mload.out18515, ptr %sp18522, align 16
  %2527 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out18515, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48948 = icmp eq i8 %2527, 0
  br i1 %.not48948, label %OP5426.PUSH1, label %return, !prof !6

OP5426.PUSH1:                                     ; preds = %OP5422.MLOAD.contd
  %b18534 = load i256, ptr %sp18485, align 16
  %2528 = add i256 %b18534, 4
  store i256 %2528, ptr %sp18485, align 16
  store i256 %2528, ptr %sp18489, align 16
  %sp18545 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2526
  %2529 = add i256 %b18534, 36
  store i256 %2529, ptr %sp18522, align 16
  %sp18559 = getelementptr i256, ptr %sp18485, i64 4
  store i256 32, ptr %sp18545, align 16
  store i256 %2528, ptr %sp18559, align 16
  %2530 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2528, i256 32, ptr %arg.ecx.addr)
  %.not48949 = icmp eq i8 %2530, 0
  br i1 %.not48949, label %OP5437.PUSH1, label %return, !prof !6

OP5437.PUSH1:                                     ; preds = %OP5426.PUSH1
  store i256 34, ptr %sp18545, align 16
  %dup218579 = load i256, ptr %sp18522, align 16
  store i256 %dup218579, ptr %sp18559, align 16
  %2531 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup218579, i256 34, ptr %arg.ecx.addr)
  %.not48950 = icmp eq i8 %2531, 0
  br i1 %.not48950, label %OP5440.PUSH1, label %return, !prof !6

OP5440.PUSH1:                                     ; preds = %OP5437.PUSH1
  %b18592 = load i256, ptr %sp18522, align 16
  %2532 = add i256 %b18592, 32
  store i256 %2532, ptr %sp18522, align 16
  store i256 23088, ptr %sp18559, align 16
  %sp18601 = getelementptr i256, ptr %sp18485, i64 5
  store i256 34, ptr %sp18545, align 16
  store i256 %2532, ptr %sp18601, align 16
  %2533 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18545)
  %.not48951 = icmp eq i8 %2533, 0
  br i1 %.not48951, label %OP5447.PUSH1, label %return, !prof !6

OP5447.PUSH1:                                     ; preds = %OP5440.PUSH1
  store i256 64, ptr %sp18545, align 16
  %b18615 = load i256, ptr %sp18522, align 16
  %2534 = add i256 %b18615, 64
  %swap.b18621 = load i256, ptr %sp18485, align 16
  store i256 %2534, ptr %sp18485, align 16
  store i256 %swap.b18621, ptr %sp18522, align 16
  store i256 64, ptr %sp18489, align 16
  %mload.out.slot18629 = alloca i256, align 16
  %2535 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot18629, ptr %arg.ecx.addr)
  %.not48952 = icmp eq i8 %2535, 0
  br i1 %.not48952, label %OP5453.MLOAD.contd, label %return, !prof !6

OP5453.MLOAD.contd:                               ; preds = %OP5447.PUSH1
  %mload.out18630 = load i256, ptr %mload.out.slot18629, align 16
  %swap.b18640 = load i256, ptr %sp18485, align 16
  store i256 %swap.b18640, ptr %sp18522, align 16
  %2536 = sub i256 %swap.b18640, %mload.out18630
  store i256 %2536, ptr %sp18485, align 16
  store i256 %mload.out18630, ptr %sp18489, align 16
  %2537 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18485, i8 16)
  %.not48953 = icmp eq i8 %2537, 0
  %spec.select36619 = select i1 %.not48953, i8 16, i8 %2537, !prof !6
  br label %return

OP5459.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54156 = add i64 %len.addr.357, 1
  %.pre54221 = add i64 %len.addr.357, 2
  br label %OP5459.JUMPDEST

OP5459.JUMPDEST:                                  ; preds = %OP5459.JUMPDEST.loopexit, %OP5415.PUSH20
  %.pre-phi54222 = phi i64 [ %.pre54221, %OP5459.JUMPDEST.loopexit ], [ %2519, %OP5415.PUSH20 ]
  %.pre-phi54157 = phi i64 [ %.pre54156, %OP5459.JUMPDEST.loopexit ], [ %2517, %OP5415.PUSH20 ]
  %len.addr.215 = phi i64 [ %len.addr.357, %OP5459.JUMPDEST.loopexit ], [ %len.addr.214, %OP5415.PUSH20 ]
  %sp18656 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.215
  store i256 1, ptr %sp18656, align 16
  %sp18660 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54157
  store i256 1, ptr %sp18660, align 16
  %2538 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18660, i8 17)
  %.not48954 = icmp eq i8 %2538, 0
  br i1 %.not48954, label %OP5463.PUSH32, label %return, !prof !6

OP5463.PUSH32:                                    ; preds = %OP5459.JUMPDEST
  %sp18664 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54222
  store i256 -372682917519380244141939632342652170012262798458881, ptr %sp18664, align 16
  %b18669 = load i256, ptr %sp18660, align 16
  %2539 = and i256 %b18669, -372682917519380244141939632342652170012262798458881
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp18664, align 16
  %2540 = or disjoint i256 %2539, 1461501637330902918203684832716283019655932542976
  store i256 %2540, ptr %sp18660, align 16
  %swap.b18683 = load i256, ptr %sp18656, align 16
  store i256 %2540, ptr %sp18656, align 16
  store i256 %swap.b18683, ptr %sp18660, align 16
  %2541 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18656, i8 17)
  %.not48955 = icmp eq i8 %2541, 0
  br i1 %.not48955, label %OP5469.PUSH1, label %return, !prof !6

OP5469.PUSH1:                                     ; preds = %OP5463.PUSH32
  store i256 64, ptr %sp18656, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !526)
  %ecx.memory.addr.i50149 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50150 = load ptr, ptr %ecx.memory.addr.i50149, align 8, !alias.scope !526, !noalias !529
  %ecx.memory.len.addr.i50151 = getelementptr inbounds i8, ptr %ecx.memory.i50150, i64 16
  %ecx.memory.len.i50152 = load i64, ptr %ecx.memory.len.addr.i50151, align 8, !noalias !531
  %ecx.memory.last_checkpoint.addr.i50153 = getelementptr inbounds i8, ptr %ecx.memory.i50150, i64 48
  %ecx.memory.last_checkpoint.i50154 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50153, align 8, !noalias !531
  %2542 = sub i64 %ecx.memory.len.i50152, %ecx.memory.last_checkpoint.i50154
  %2543 = icmp ult i64 %2542, 96
  br i1 %2543, label %resize.i50162, label %OP5470.MLOAD.contd, !prof !5

resize.i50162:                                    ; preds = %OP5469.PUSH1
  %2544 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !529
  %.not.i50163 = icmp eq i8 %2544, 0
  br i1 %.not.i50163, label %OP5470.MLOAD.contd, label %return, !prof !6

OP5470.MLOAD.contd:                               ; preds = %OP5469.PUSH1, %resize.i50162
  %ecx.memory.buffer.ptr.shared.addr.i50156 = getelementptr inbounds i8, ptr %ecx.memory.i50150, i64 8
  %ecx.memory.buffer.ptr.shared.i50157 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50156, align 8, !noalias !531
  %ecx.memory.buffer.ptr.i50158 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50157, i64 %ecx.memory.last_checkpoint.i50154
  %slot.i50159 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50158, i64 64
  %slot.value.i50160 = load i256, ptr %slot.i50159, align 1, !noalias !531
  %2545 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50160)
  store i256 47728944958663565861281756852263636344241902946401093042769569385173621929509, ptr %sp18656, align 16
  store i256 0, ptr %sp18660, align 16
  store i256 %2545, ptr %sp18664, align 16
  %2546 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18656, i8 1)
  %.not48957 = icmp eq i8 %2546, 0
  br i1 %.not48957, label %OP5476.JUMP, label %return, !prof !6

OP5476.JUMP:                                      ; preds = %OP5470.MLOAD.contd
  %2547 = add i64 %len.addr.215, -1
  %sp18711 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2547
  %a18712 = load i256, ptr %sp18711, align 16
  br label %dynamic_jump_table.preheader

OP5477.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2548 = add i64 %len.addr.357, 1
  %sp18715 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1, ptr %sp18715, align 16
  %2549 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18715, i8 17)
  %.not48155 = icmp eq i8 %2549, 0
  br i1 %.not48155, label %OP5480.PUSH21, label %return, !prof !6

OP5480.PUSH21:                                    ; preds = %OP5477.JUMPDEST
  %2550 = add i64 %len.addr.357, 2
  %sp18719 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2548
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp18719, align 16
  %swap.b18724 = load i256, ptr %sp18715, align 16
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp18715, align 16
  store i256 %swap.b18724, ptr %sp18719, align 16
  %2551 = lshr i256 %swap.b18724, 160
  store i256 %2551, ptr %sp18715, align 16
  store i256 255, ptr %sp18719, align 16
  %2552 = and i256 %swap.b18724, 372682917519380244141939632342652170012262798458880
  %2553 = icmp eq i256 %2552, 0
  %2554 = zext i1 %2553 to i256
  store i256 %2554, ptr %sp18715, align 16
  br i1 %2553, label %OP5519.JUMPDEST, label %OP5488.PUSH1

OP5488.PUSH1:                                     ; preds = %OP5480.PUSH21
  store i256 64, ptr %sp18715, align 16
  store i256 64, ptr %sp18719, align 16
  %mload.out.slot18755 = alloca i256, align 16
  %2555 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot18755, ptr %arg.ecx.addr)
  %.not48156 = icmp eq i8 %2555, 0
  br i1 %.not48156, label %OP5490.MLOAD.contd, label %return, !prof !6

OP5490.MLOAD.contd:                               ; preds = %OP5488.PUSH1
  %mload.out18756 = load i256, ptr %mload.out.slot18755, align 16
  store i256 %mload.out18756, ptr %sp18719, align 16
  %sp18759 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2550
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp18759, align 16
  %sp18763 = getelementptr i256, ptr %sp18715, i64 3
  store i256 %mload.out18756, ptr %sp18763, align 16
  %2556 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out18756, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48157 = icmp eq i8 %2556, 0
  br i1 %.not48157, label %OP5494.PUSH1, label %return, !prof !6

OP5494.PUSH1:                                     ; preds = %OP5490.MLOAD.contd
  store i256 32, ptr %sp18759, align 16
  store i256 4, ptr %sp18763, align 16
  %dup318775 = load i256, ptr %sp18719, align 16
  %sp18776 = getelementptr i256, ptr %sp18715, i64 4
  store i256 %dup318775, ptr %sp18776, align 16
  %2557 = add i256 %dup318775, 4
  store i256 %2557, ptr %sp18763, align 16
  %2558 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2557, i256 32, ptr %arg.ecx.addr)
  %.not48158 = icmp eq i8 %2558, 0
  br i1 %.not48158, label %OP5499.PUSH1, label %return, !prof !6

OP5499.PUSH1:                                     ; preds = %OP5494.PUSH1
  store i256 16, ptr %sp18759, align 16
  store i256 36, ptr %sp18763, align 16
  %dup318794 = load i256, ptr %sp18719, align 16
  store i256 %dup318794, ptr %sp18776, align 16
  %2559 = add i256 %dup318794, 36
  store i256 %2559, ptr %sp18763, align 16
  %2560 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2559, i256 16, ptr %arg.ecx.addr)
  %.not48159 = icmp eq i8 %2560, 0
  br i1 %.not48159, label %OP5504.PUSH32, label %return, !prof !6

OP5504.PUSH32:                                    ; preds = %OP5499.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp18759, align 16
  store i256 68, ptr %sp18763, align 16
  %dup318813 = load i256, ptr %sp18719, align 16
  store i256 %dup318813, ptr %sp18776, align 16
  %2561 = add i256 %dup318813, 68
  store i256 %2561, ptr %sp18763, align 16
  %2562 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2561, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48160 = icmp eq i8 %2562, 0
  br i1 %.not48160, label %OP5509.SWAP1, label %return, !prof !6

OP5509.SWAP1:                                     ; preds = %OP5504.PUSH32
  %swap.a18828 = load i256, ptr %sp18719, align 16
  %swap.b18830 = load i256, ptr %sp18715, align 16
  store i256 %swap.a18828, ptr %sp18715, align 16
  store i256 %swap.b18830, ptr %sp18719, align 16
  %mload.out.slot18834 = alloca i256, align 16
  %2563 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b18830, ptr %mload.out.slot18834, ptr %arg.ecx.addr)
  %.not48161 = icmp eq i8 %2563, 0
  br i1 %.not48161, label %OP5510.MLOAD.contd, label %return, !prof !6

OP5510.MLOAD.contd:                               ; preds = %OP5509.SWAP1
  %mload.out18835 = load i256, ptr %mload.out.slot18834, align 16
  store i256 %mload.out18835, ptr %sp18719, align 16
  %swap.b18841 = load i256, ptr %sp18715, align 16
  store i256 %mload.out18835, ptr %sp18715, align 16
  store i256 %swap.b18841, ptr %sp18719, align 16
  store i256 %mload.out18835, ptr %sp18759, align 16
  store i256 %mload.out18835, ptr %sp18719, align 16
  store i256 %swap.b18841, ptr %sp18759, align 16
  %2564 = sub i256 %swap.b18841, %mload.out18835
  store i256 %2564, ptr %sp18719, align 16
  store i256 100, ptr %sp18759, align 16
  %2565 = add i256 %2564, 100
  store i256 %2565, ptr %sp18719, align 16
  store i256 %2565, ptr %sp18715, align 16
  store i256 %mload.out18835, ptr %sp18719, align 16
  %2566 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18715, i8 16)
  %.not48162 = icmp eq i8 %2566, 0
  %spec.select36620 = select i1 %.not48162, i8 16, i8 %2566, !prof !6
  br label %return

OP5519.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5480.PUSH21
  %2567 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp18874 = getelementptr i256, ptr %2567, i64 -7
  %dup718875 = load i256, ptr %sp18874, align 16
  store i256 %dup718875, ptr %2567, align 16
  %sp18878 = getelementptr i256, ptr %2567, i64 1
  store i256 11434, ptr %sp18878, align 16
  %2568 = add i64 %len.addr.357, 3
  %sp18882 = getelementptr i256, ptr %2567, i64 2
  store i256 %dup718875, ptr %sp18882, align 16
  br label %OP7491.JUMPDEST

OP5525.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2569 = add i64 %len.addr.357, -1
  %sp18886 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2569
  %a18887 = load i256, ptr %sp18886, align 16
  %2570 = icmp eq i256 %a18887, 0
  %2571 = zext i1 %2570 to i256
  store i256 %2571, ptr %sp18886, align 16
  br i1 %2570, label %OP5567.JUMPDEST, label %OP5529.PUSH1

OP5529.PUSH1:                                     ; preds = %OP5525.JUMPDEST
  store i256 64, ptr %sp18886, align 16
  %mload.out.slot18897 = alloca i256, align 16
  %2572 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot18897, ptr %arg.ecx.addr)
  %.not48148 = icmp eq i8 %2572, 0
  br i1 %.not48148, label %OP5530.MLOAD.contd, label %return, !prof !6

OP5530.MLOAD.contd:                               ; preds = %OP5529.PUSH1
  %mload.out18898 = load i256, ptr %mload.out.slot18897, align 16
  store i256 %mload.out18898, ptr %sp18886, align 16
  %2573 = add i64 %len.addr.357, 1
  %sp18901 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp18901, align 16
  %2574 = add i64 %len.addr.357, 2
  %sp18903 = getelementptr i256, ptr %sp18901, i64 -1
  %sp18905 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2573
  store i256 %mload.out18898, ptr %sp18905, align 16
  %2575 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out18898, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48149 = icmp eq i8 %2575, 0
  br i1 %.not48149, label %OP5534.PUSH1, label %return, !prof !6

OP5534.PUSH1:                                     ; preds = %OP5530.MLOAD.contd
  store i256 4, ptr %sp18901, align 16
  %b18917 = load i256, ptr %sp18886, align 16
  %2576 = add i256 %b18917, 4
  store i256 %2576, ptr %sp18886, align 16
  store i256 %2576, ptr %sp18901, align 16
  store i256 %2576, ptr %sp18905, align 16
  %sp18928 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2574
  store i256 32, ptr %sp18928, align 16
  %2577 = add i256 %b18917, 36
  store i256 %2577, ptr %sp18905, align 16
  store i256 %2576, ptr %sp18928, align 16
  %sp18942 = getelementptr i256, ptr %sp18901, i64 3
  store i256 %2577, ptr %sp18942, align 16
  store i256 32, ptr %sp18928, align 16
  store i256 %2576, ptr %sp18942, align 16
  %2578 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2576, i256 32, ptr %arg.ecx.addr)
  %.not48150 = icmp eq i8 %2578, 0
  br i1 %.not48150, label %OP5545.PUSH1, label %return, !prof !6

OP5545.PUSH1:                                     ; preds = %OP5534.PUSH1
  store i256 37, ptr %sp18928, align 16
  %dup218962 = load i256, ptr %sp18905, align 16
  store i256 %dup218962, ptr %sp18942, align 16
  %2579 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup218962, i256 37, ptr %arg.ecx.addr)
  %.not48151 = icmp eq i8 %2579, 0
  br i1 %.not48151, label %OP5548.PUSH1, label %return, !prof !6

OP5548.PUSH1:                                     ; preds = %OP5545.PUSH1
  store i256 32, ptr %sp18928, align 16
  %b18975 = load i256, ptr %sp18905, align 16
  %2580 = add i256 %b18975, 32
  store i256 %2580, ptr %sp18905, align 16
  store i256 %2580, ptr %sp18928, align 16
  store i256 23300, ptr %sp18942, align 16
  %sp18984 = getelementptr i256, ptr %sp18901, i64 4
  store i256 37, ptr %sp18984, align 16
  store i256 37, ptr %sp18928, align 16
  store i256 %2580, ptr %sp18984, align 16
  %2581 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18928)
  %.not48152 = icmp eq i8 %2581, 0
  br i1 %.not48152, label %OP5555.PUSH1, label %return, !prof !6

OP5555.PUSH1:                                     ; preds = %OP5548.PUSH1
  store i256 64, ptr %sp18928, align 16
  %b18998 = load i256, ptr %sp18905, align 16
  %2582 = add i256 %b18998, 64
  store i256 %2582, ptr %sp18905, align 16
  %swap.b19004 = load i256, ptr %sp18903, align 16
  store i256 %2582, ptr %sp18903, align 16
  store i256 %swap.b19004, ptr %sp18905, align 16
  store i256 64, ptr %sp18901, align 16
  %mload.out.slot19012 = alloca i256, align 16
  %2583 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot19012, ptr %arg.ecx.addr)
  %.not48153 = icmp eq i8 %2583, 0
  br i1 %.not48153, label %OP5561.MLOAD.contd, label %return, !prof !6

OP5561.MLOAD.contd:                               ; preds = %OP5555.PUSH1
  %mload.out19013 = load i256, ptr %mload.out.slot19012, align 16
  store i256 %mload.out19013, ptr %sp18901, align 16
  store i256 %mload.out19013, ptr %sp18905, align 16
  %swap.b19023 = load i256, ptr %sp18903, align 16
  store i256 %mload.out19013, ptr %sp18903, align 16
  store i256 %swap.b19023, ptr %sp18905, align 16
  %2584 = sub i256 %swap.b19023, %mload.out19013
  store i256 %2584, ptr %sp18901, align 16
  store i256 %2584, ptr %sp18903, align 16
  store i256 %mload.out19013, ptr %sp18901, align 16
  %2585 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp18903, i8 16)
  %.not48154 = icmp eq i8 %2585, 0
  %spec.select36621 = select i1 %.not48154, i8 16, i8 %2585, !prof !6
  br label %return

OP5567.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5525.JUMPDEST
  %len.addr.217 = phi i64 [ %2569, %OP5525.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2586 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.217
  %sp19039 = getelementptr i256, ptr %2586, i64 -7
  %dup719040 = load i256, ptr %sp19039, align 16
  store i256 %dup719040, ptr %2586, align 16
  %sp19043 = getelementptr i256, ptr %2586, i64 1
  store i256 11530, ptr %sp19043, align 16
  %2587 = add i64 %len.addr.217, 3
  %sp19047 = getelementptr i256, ptr %2586, i64 2
  store i256 %dup719040, ptr %sp19047, align 16
  br label %OP7491.JUMPDEST

OP5573.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2588 = add i64 %len.addr.357, -1
  %sp19051 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2588
  %a19052 = load i256, ptr %sp19051, align 16
  %2589 = icmp eq i256 %a19052, 0
  %2590 = zext i1 %2589 to i256
  store i256 %2590, ptr %sp19051, align 16
  br i1 %2589, label %OP5615.JUMPDEST, label %OP5577.PUSH1

OP5577.PUSH1:                                     ; preds = %OP5573.JUMPDEST
  store i256 64, ptr %sp19051, align 16
  %mload.out.slot19062 = alloca i256, align 16
  %2591 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot19062, ptr %arg.ecx.addr)
  %.not48120 = icmp eq i8 %2591, 0
  br i1 %.not48120, label %OP5578.MLOAD.contd, label %return, !prof !6

OP5578.MLOAD.contd:                               ; preds = %OP5577.PUSH1
  %mload.out19063 = load i256, ptr %mload.out.slot19062, align 16
  store i256 %mload.out19063, ptr %sp19051, align 16
  %2592 = add i64 %len.addr.357, 1
  %sp19066 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp19066, align 16
  %2593 = add i64 %len.addr.357, 2
  %sp19068 = getelementptr i256, ptr %sp19066, i64 -1
  %sp19070 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2592
  store i256 %mload.out19063, ptr %sp19070, align 16
  %2594 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out19063, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48121 = icmp eq i8 %2594, 0
  br i1 %.not48121, label %OP5582.PUSH1, label %return, !prof !6

OP5582.PUSH1:                                     ; preds = %OP5578.MLOAD.contd
  store i256 4, ptr %sp19066, align 16
  %b19082 = load i256, ptr %sp19051, align 16
  %2595 = add i256 %b19082, 4
  store i256 %2595, ptr %sp19051, align 16
  store i256 %2595, ptr %sp19066, align 16
  store i256 %2595, ptr %sp19070, align 16
  %sp19093 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2593
  store i256 32, ptr %sp19093, align 16
  %2596 = add i256 %b19082, 36
  store i256 %2596, ptr %sp19070, align 16
  store i256 %2595, ptr %sp19093, align 16
  %sp19107 = getelementptr i256, ptr %sp19066, i64 3
  store i256 %2596, ptr %sp19107, align 16
  store i256 32, ptr %sp19093, align 16
  store i256 %2595, ptr %sp19107, align 16
  %2597 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2595, i256 32, ptr %arg.ecx.addr)
  %.not48122 = icmp eq i8 %2597, 0
  br i1 %.not48122, label %OP5593.PUSH1, label %return, !prof !6

OP5593.PUSH1:                                     ; preds = %OP5582.PUSH1
  store i256 37, ptr %sp19093, align 16
  %dup219127 = load i256, ptr %sp19070, align 16
  store i256 %dup219127, ptr %sp19107, align 16
  %2598 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup219127, i256 37, ptr %arg.ecx.addr)
  %.not48123 = icmp eq i8 %2598, 0
  br i1 %.not48123, label %OP5596.PUSH1, label %return, !prof !6

OP5596.PUSH1:                                     ; preds = %OP5593.PUSH1
  store i256 32, ptr %sp19093, align 16
  %b19140 = load i256, ptr %sp19070, align 16
  %2599 = add i256 %b19140, 32
  store i256 %2599, ptr %sp19070, align 16
  store i256 %2599, ptr %sp19093, align 16
  store i256 23300, ptr %sp19107, align 16
  %sp19149 = getelementptr i256, ptr %sp19066, i64 4
  store i256 37, ptr %sp19149, align 16
  store i256 37, ptr %sp19093, align 16
  store i256 %2599, ptr %sp19149, align 16
  %2600 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19093)
  %.not48124 = icmp eq i8 %2600, 0
  br i1 %.not48124, label %OP5603.PUSH1, label %return, !prof !6

OP5603.PUSH1:                                     ; preds = %OP5596.PUSH1
  store i256 64, ptr %sp19093, align 16
  %b19163 = load i256, ptr %sp19070, align 16
  %2601 = add i256 %b19163, 64
  store i256 %2601, ptr %sp19070, align 16
  %swap.b19169 = load i256, ptr %sp19068, align 16
  store i256 %2601, ptr %sp19068, align 16
  store i256 %swap.b19169, ptr %sp19070, align 16
  store i256 64, ptr %sp19066, align 16
  %mload.out.slot19177 = alloca i256, align 16
  %2602 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot19177, ptr %arg.ecx.addr)
  %.not48125 = icmp eq i8 %2602, 0
  br i1 %.not48125, label %OP5609.MLOAD.contd, label %return, !prof !6

OP5609.MLOAD.contd:                               ; preds = %OP5603.PUSH1
  %mload.out19178 = load i256, ptr %mload.out.slot19177, align 16
  store i256 %mload.out19178, ptr %sp19066, align 16
  store i256 %mload.out19178, ptr %sp19070, align 16
  %swap.b19188 = load i256, ptr %sp19068, align 16
  store i256 %mload.out19178, ptr %sp19068, align 16
  store i256 %swap.b19188, ptr %sp19070, align 16
  %2603 = sub i256 %swap.b19188, %mload.out19178
  store i256 %2603, ptr %sp19066, align 16
  store i256 %2603, ptr %sp19068, align 16
  store i256 %mload.out19178, ptr %sp19066, align 16
  %2604 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19068, i8 16)
  %.not48126 = icmp eq i8 %2604, 0
  %spec.select36622 = select i1 %.not48126, i8 16, i8 %2604, !prof !6
  br label %return

OP5615.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5573.JUMPDEST
  %len.addr.218 = phi i64 [ %2588, %OP5573.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp19204 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.218
  store i256 11631, ptr %sp19204, align 16
  %sp19206 = getelementptr i256, ptr %sp19204, i64 -9
  %dup1019207 = load i256, ptr %sp19206, align 16
  %sp19208 = getelementptr i256, ptr %sp19204, i64 1
  store i256 %dup1019207, ptr %sp19208, align 16
  %sp19210 = getelementptr i256, ptr %sp19204, i64 -8
  %dup1019211 = load i256, ptr %sp19210, align 16
  %sp19212 = getelementptr i256, ptr %sp19204, i64 2
  store i256 %dup1019211, ptr %sp19212, align 16
  %sp19214 = getelementptr i256, ptr %sp19204, i64 -7
  %dup1019215 = load i256, ptr %sp19214, align 16
  %sp19216 = getelementptr i256, ptr %sp19204, i64 3
  store i256 %dup1019215, ptr %sp19216, align 16
  %sp19218 = getelementptr i256, ptr %sp19204, i64 -6
  %dup1019219 = load i256, ptr %sp19218, align 16
  %sp19220 = getelementptr i256, ptr %sp19204, i64 4
  store i256 %dup1019219, ptr %sp19220, align 16
  %sp19222 = getelementptr i256, ptr %sp19204, i64 -5
  %dup1019223 = load i256, ptr %sp19222, align 16
  %sp19224 = getelementptr i256, ptr %sp19204, i64 5
  store i256 %dup1019223, ptr %sp19224, align 16
  %sp19226 = getelementptr i256, ptr %sp19204, i64 -4
  %dup1019227 = load i256, ptr %sp19226, align 16
  %sp19228 = getelementptr i256, ptr %sp19204, i64 6
  store i256 %dup1019227, ptr %sp19228, align 16
  %2605 = add i64 %len.addr.218, 8
  %sp19230 = getelementptr i256, ptr %sp19204, i64 -3
  %dup1019231 = load i256, ptr %sp19230, align 16
  %sp19232 = getelementptr i256, ptr %sp19204, i64 7
  store i256 %dup1019231, ptr %sp19232, align 16
  br label %OP8179.JUMPDEST

OP5626.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2606 = add i64 %len.addr.357, -10
  %sp19245 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2606
  %a19246 = load i256, ptr %sp19245, align 16
  br label %dynamic_jump_table.backedge

OP5637.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1689.JUMPDEST
  %len.addr.219 = phi i64 [ %829, %OP1689.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp19249 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.219
  %sp19253 = getelementptr i256, ptr %sp19249, i64 -1
  %b19254 = load i256, ptr %sp19253, align 16
  %2607 = and i256 %b19254, 1461501637330902918203684832716283019655932542975
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp19253, i8 0, i64 32, i1 false)
  store i256 %2607, ptr %sp19249, align 16
  %sp19266 = getelementptr i256, ptr %sp19249, i64 1
  store i256 0, ptr %sp19266, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !532)
  %ecx.memory.addr.i50165 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50166 = load ptr, ptr %ecx.memory.addr.i50165, align 8, !alias.scope !532
  %ecx.memory.len.addr.i50167 = getelementptr inbounds i8, ptr %ecx.memory.i50166, i64 16
  %ecx.memory.len.i50168 = load i64, ptr %ecx.memory.len.addr.i50167, align 8, !noalias !532
  %ecx.memory.last_checkpoint.addr.i50169 = getelementptr inbounds i8, ptr %ecx.memory.i50166, i64 48
  %ecx.memory.last_checkpoint.i50170 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50169, align 8, !noalias !532
  %2608 = sub i64 %ecx.memory.len.i50168, %ecx.memory.last_checkpoint.i50170
  %2609 = icmp ult i64 %2608, 32
  br i1 %2609, label %resize.i50176, label %OP5644.PUSH1, !prof !5

resize.i50176:                                    ; preds = %OP5637.JUMPDEST
  %2610 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50177 = icmp eq i8 %2610, 0
  br i1 %.not.i50177, label %OP5644.PUSH1, label %return, !prof !6

OP5644.PUSH1:                                     ; preds = %OP5637.JUMPDEST, %resize.i50176
  %ecx.memory.buffer.ptr.shared.addr.i50172 = getelementptr inbounds i8, ptr %ecx.memory.i50166, i64 8
  %ecx.memory.buffer.ptr.shared.i50173 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50172, align 8, !noalias !532
  %ecx.memory.buffer.ptr.i50174 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50173, i64 %ecx.memory.last_checkpoint.i50170
  %2611 = tail call i256 @llvm.bswap.i256(i256 %2607)
  store i256 %2611, ptr %ecx.memory.buffer.ptr.i50174, align 1, !noalias !532
  store i256 13, ptr %sp19249, align 16
  store i256 32, ptr %sp19266, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !535)
  %ecx.memory.i50180 = load ptr, ptr %ecx.memory.addr.i50165, align 8, !alias.scope !535
  %ecx.memory.len.addr.i50181 = getelementptr inbounds i8, ptr %ecx.memory.i50180, i64 16
  %ecx.memory.len.i50182 = load i64, ptr %ecx.memory.len.addr.i50181, align 8, !noalias !535
  %ecx.memory.last_checkpoint.addr.i50183 = getelementptr inbounds i8, ptr %ecx.memory.i50180, i64 48
  %ecx.memory.last_checkpoint.i50184 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50183, align 8, !noalias !535
  %2612 = sub i64 %ecx.memory.len.i50182, %ecx.memory.last_checkpoint.i50184
  %2613 = icmp ult i64 %2612, 64
  br i1 %2613, label %resize.i50191, label %OP5647.PUSH1, !prof !5

resize.i50191:                                    ; preds = %OP5644.PUSH1
  %2614 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50192 = icmp eq i8 %2614, 0
  br i1 %.not.i50192, label %OP5647.PUSH1, label %return, !prof !6

OP5647.PUSH1:                                     ; preds = %OP5644.PUSH1, %resize.i50191
  %ecx.memory.buffer.ptr.shared.addr.i50186 = getelementptr inbounds i8, ptr %ecx.memory.i50180, i64 8
  %ecx.memory.buffer.ptr.shared.i50187 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50186, align 8, !noalias !535
  %ecx.memory.buffer.ptr.i50188 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50187, i64 %ecx.memory.last_checkpoint.i50184
  %slot.i50189 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50188, i64 32
  store i256 5880067031582463048853214082472432820673866408802059892628705437901838614528, ptr %slot.i50189, align 1, !noalias !535
  %swap.b19287 = load i256, ptr %sp19253, align 16
  store i256 64, ptr %sp19253, align 16
  store i256 %swap.b19287, ptr %sp19249, align 16
  %2615 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19253)
  %.not48935 = icmp eq i8 %2615, 0
  br i1 %.not48935, label %OP5650.SLOAD, label %return, !prof !6

OP5650.SLOAD:                                     ; preds = %OP5647.PUSH1
  %2616 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19253, i8 17)
  %.not48936 = icmp eq i8 %2616, 0
  br i1 %.not48936, label %OP5651.SWAP1, label %return, !prof !6

OP5651.SWAP1:                                     ; preds = %OP5650.SLOAD
  %swap.a19294 = load i256, ptr %sp19253, align 16
  %sp19295 = getelementptr i256, ptr %sp19249, i64 -2
  %swap.b19296 = load i256, ptr %sp19295, align 16
  store i256 %swap.a19294, ptr %sp19295, align 16
  store i256 %swap.b19296, ptr %sp19253, align 16
  %2617 = add i64 %len.addr.219, -1
  br label %dynamic_jump_table.preheader

OP5653.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1696.JUMPDEST
  %len.addr.220 = phi i64 [ %834, %OP1696.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2618 = add i64 %len.addr.220, 1
  %sp19302 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.220
  store i256 0, ptr %sp19302, align 16
  %2619 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19302, i8 17)
  %.not48931 = icmp eq i8 %2619, 0
  br i1 %.not48931, label %OP5656.PUSH20, label %return, !prof !6

OP5656.PUSH20:                                    ; preds = %OP5653.JUMPDEST
  %sp19306 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2618
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp19306, align 16
  %b19311 = load i256, ptr %sp19302, align 16
  %2620 = and i256 %b19311, 1461501637330902918203684832716283019655932542975
  %sp19316 = getelementptr i256, ptr %sp19302, i64 -1
  %swap.b19317 = load i256, ptr %sp19316, align 16
  store i256 %2620, ptr %sp19316, align 16
  store i256 %swap.b19317, ptr %sp19302, align 16
  br label %dynamic_jump_table.preheader

OP5660.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1700.JUMPDEST
  %len.addr.221 = phi i64 [ %835, %OP1700.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp19323 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.221
  store i256 5, ptr %sp19323, align 16
  %2621 = add i64 %len.addr.221, 2
  %sp19327 = getelementptr i256, ptr %sp19323, i64 1
  store i256 5, ptr %sp19327, align 16
  %2622 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19327, i8 17)
  %.not48925 = icmp eq i8 %2622, 0
  br i1 %.not48925, label %OP5664.PUSH1, label %return, !prof !6

OP5664.PUSH1:                                     ; preds = %OP5660.JUMPDEST
  %sp19331 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2621
  store i256 64, ptr %sp19331, align 16
  %2623 = add i64 %len.addr.221, 4
  %sp19335 = getelementptr i256, ptr %sp19323, i64 3
  store i256 64, ptr %sp19335, align 16
  %mload.out.slot19339 = alloca i256, align 16
  %2624 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot19339, ptr %arg.ecx.addr)
  %.not48926 = icmp eq i8 %2624, 0
  br i1 %.not48926, label %OP5666.MLOAD.contd, label %return, !prof !6

OP5666.MLOAD.contd:                               ; preds = %OP5664.PUSH1
  %mload.out19340 = load i256, ptr %mload.out.slot19339, align 16
  store i256 %mload.out19340, ptr %sp19335, align 16
  %sp19343 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2623
  %2625 = add i64 %len.addr.221, 6
  %sp19345 = getelementptr i256, ptr %sp19323, i64 5
  %sp19347 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2625
  %dup619350 = load i256, ptr %sp19327, align 16
  %sp19351 = getelementptr i256, ptr %sp19323, i64 7
  %2626 = shl i256 %dup619350, 8
  %2627 = and i256 %2626, 256
  %2628 = xor i256 %2627, 256
  store i256 -1, ptr %sp19351, align 16
  %2629 = add nsw i256 %2628, -1
  %2630 = and i256 %dup619350, %2629
  store i256 32, ptr %sp19327, align 16
  %2631 = lshr i256 %2630, 1
  %2632 = add nuw i256 %2631, 31
  %2633 = and i256 %2632, -32
  %2634 = add i256 %mload.out19340, %2633
  store i256 32, ptr %sp19347, align 16
  %2635 = add i256 %2634, 32
  store i256 %2635, ptr %sp19343, align 16
  %sp19480 = getelementptr i256, ptr %sp19323, i64 2
  %swap.b19481 = load i256, ptr %sp19480, align 16
  store i256 %2631, ptr %sp19480, align 16
  store i256 %swap.b19481, ptr %sp19345, align 16
  %2636 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b19481, i256 %2635, ptr %arg.ecx.addr)
  %.not48927 = icmp eq i8 %2636, 0
  br i1 %.not48927, label %OP5699.DUP2, label %return, !prof !6

OP5699.DUP2:                                      ; preds = %OP5666.MLOAD.contd
  %dup219489 = load i256, ptr %sp19331, align 16
  store i256 %dup219489, ptr %sp19343, align 16
  %dup219493 = load i256, ptr %sp19335, align 16
  store i256 %dup219493, ptr %sp19345, align 16
  %2637 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup219493, i256 %dup219489, ptr %arg.ecx.addr)
  %.not48928 = icmp eq i8 %2637, 0
  br i1 %.not48928, label %OP5702.SWAP3, label %return, !prof !6

OP5702.SWAP3:                                     ; preds = %OP5699.DUP2
  %swap.a19502 = load i256, ptr %sp19335, align 16
  %swap.b19504 = load i256, ptr %sp19323, align 16
  store i256 %swap.a19502, ptr %sp19323, align 16
  %swap.b19509 = load i256, ptr %sp19327, align 16
  store i256 %swap.b19504, ptr %sp19327, align 16
  %2638 = add i256 %swap.b19509, %swap.a19502
  store i256 %2638, ptr %sp19335, align 16
  store i256 %swap.b19504, ptr %sp19343, align 16
  %dup319526 = load i256, ptr %sp19331, align 16
  store i256 %dup319526, ptr %sp19345, align 16
  %2639 = icmp eq i256 %dup319526, 0
  %2640 = zext i1 %2639 to i256
  store i256 %2640, ptr %sp19347, align 16
  br i1 %2639, label %OP2837.JUMPDEST, label %OP5712.DUP1

OP5712.DUP1:                                      ; preds = %OP5702.SWAP3
  store i256 31, ptr %sp19351, align 16
  %2641 = icmp ugt i256 %dup319526, 31
  %2642 = zext i1 %2641 to i256
  store i256 %2642, ptr %sp19347, align 16
  br i1 %2641, label %OP2802.JUMPDEST, label %OP5717.PUSH2

OP5717.PUSH2:                                     ; preds = %OP5712.DUP1
  store i256 256, ptr %sp19347, align 16
  store i256 256, ptr %sp19351, align 16
  %2643 = add i64 %len.addr.221, 9
  %sp19563 = getelementptr i256, ptr %sp19323, i64 8
  store i256 %swap.b19504, ptr %sp19563, align 16
  %2644 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19563, i8 17)
  %.not48929 = icmp eq i8 %2644, 0
  br i1 %.not48929, label %OP5721.DIV, label %return, !prof !6

OP5721.DIV:                                       ; preds = %OP5717.PUSH2
  %a19568 = load i256, ptr %sp19563, align 16
  %b19570 = load i256, ptr %sp19351, align 16
  %2645 = udiv i256 %a19568, %b19570
  %b19576 = load i256, ptr %sp19347, align 16
  %2646 = mul i256 %b19576, %2645
  store i256 %2646, ptr %sp19347, align 16
  %dup419580 = load i256, ptr %sp19335, align 16
  store i256 %dup419580, ptr %sp19351, align 16
  %2647 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup419580, i256 %2646, ptr %arg.ecx.addr)
  %.not48930 = icmp eq i8 %2647, 0
  br i1 %.not48930, label %OP5725.SWAP2, label %return, !prof !6

OP5725.SWAP2:                                     ; preds = %OP5721.DIV
  %swap.b19591 = load i256, ptr %sp19335, align 16
  store i256 32, ptr %sp19347, align 16
  %2648 = add i256 %swap.b19591, 32
  store i256 %2648, ptr %sp19335, align 16
  br label %OP2837.JUMPDEST

OP5731.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1704.JUMPDEST
  %len.addr.222 = phi i64 [ %836, %OP1704.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2649 = add i64 %len.addr.222, 1
  %sp19608 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.222
  store i256 1, ptr %sp19608, align 16
  %2650 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19608, i8 17)
  %.not48924 = icmp eq i8 %2650, 0
  br i1 %.not48924, label %OP5734.PUSH20, label %return, !prof !6

OP5734.PUSH20:                                    ; preds = %OP5731.JUMPDEST
  %sp19612 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2649
  %b19617 = load i256, ptr %sp19608, align 16
  %2651 = and i256 %b19617, 1461501637330902918203684832716283019655932542975
  store i256 %2651, ptr %sp19608, align 16
  %sp19620 = getelementptr i256, ptr %sp19608, i64 -1
  %dup219621 = load i256, ptr %sp19620, align 16
  store i256 %dup219621, ptr %sp19612, align 16
  br label %dynamic_jump_table.preheader

OP5738.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2652 = add i64 %len.addr.357, 1
  %sp19628 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1, ptr %sp19628, align 16
  %2653 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19628, i8 17)
  %.not48112 = icmp eq i8 %2653, 0
  br i1 %.not48112, label %OP5741.PUSH21, label %return, !prof !6

OP5741.PUSH21:                                    ; preds = %OP5738.JUMPDEST
  %2654 = add i64 %len.addr.357, 2
  %sp19632 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2652
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp19632, align 16
  %swap.b19637 = load i256, ptr %sp19628, align 16
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp19628, align 16
  store i256 %swap.b19637, ptr %sp19632, align 16
  %2655 = lshr i256 %swap.b19637, 160
  store i256 %2655, ptr %sp19628, align 16
  store i256 255, ptr %sp19632, align 16
  %2656 = and i256 %swap.b19637, 372682917519380244141939632342652170012262798458880
  %2657 = icmp eq i256 %2656, 0
  %2658 = zext i1 %2657 to i256
  store i256 %2658, ptr %sp19628, align 16
  br i1 %2657, label %OP5780.JUMPDEST, label %OP5749.PUSH1

OP5749.PUSH1:                                     ; preds = %OP5741.PUSH21
  store i256 64, ptr %sp19628, align 16
  store i256 64, ptr %sp19632, align 16
  %mload.out.slot19668 = alloca i256, align 16
  %2659 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot19668, ptr %arg.ecx.addr)
  %.not48113 = icmp eq i8 %2659, 0
  br i1 %.not48113, label %OP5751.MLOAD.contd, label %return, !prof !6

OP5751.MLOAD.contd:                               ; preds = %OP5749.PUSH1
  %mload.out19669 = load i256, ptr %mload.out.slot19668, align 16
  store i256 %mload.out19669, ptr %sp19632, align 16
  %sp19672 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2654
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp19672, align 16
  %sp19676 = getelementptr i256, ptr %sp19628, i64 3
  store i256 %mload.out19669, ptr %sp19676, align 16
  %2660 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out19669, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48114 = icmp eq i8 %2660, 0
  br i1 %.not48114, label %OP5755.PUSH1, label %return, !prof !6

OP5755.PUSH1:                                     ; preds = %OP5751.MLOAD.contd
  store i256 32, ptr %sp19672, align 16
  store i256 4, ptr %sp19676, align 16
  %dup319688 = load i256, ptr %sp19632, align 16
  %sp19689 = getelementptr i256, ptr %sp19628, i64 4
  store i256 %dup319688, ptr %sp19689, align 16
  %2661 = add i256 %dup319688, 4
  store i256 %2661, ptr %sp19676, align 16
  %2662 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2661, i256 32, ptr %arg.ecx.addr)
  %.not48115 = icmp eq i8 %2662, 0
  br i1 %.not48115, label %OP5760.PUSH1, label %return, !prof !6

OP5760.PUSH1:                                     ; preds = %OP5755.PUSH1
  store i256 16, ptr %sp19672, align 16
  store i256 36, ptr %sp19676, align 16
  %dup319707 = load i256, ptr %sp19632, align 16
  store i256 %dup319707, ptr %sp19689, align 16
  %2663 = add i256 %dup319707, 36
  store i256 %2663, ptr %sp19676, align 16
  %2664 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2663, i256 16, ptr %arg.ecx.addr)
  %.not48116 = icmp eq i8 %2664, 0
  br i1 %.not48116, label %OP5765.PUSH32, label %return, !prof !6

OP5765.PUSH32:                                    ; preds = %OP5760.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp19672, align 16
  store i256 68, ptr %sp19676, align 16
  %dup319726 = load i256, ptr %sp19632, align 16
  store i256 %dup319726, ptr %sp19689, align 16
  %2665 = add i256 %dup319726, 68
  store i256 %2665, ptr %sp19676, align 16
  %2666 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2665, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48117 = icmp eq i8 %2666, 0
  br i1 %.not48117, label %OP5770.SWAP1, label %return, !prof !6

OP5770.SWAP1:                                     ; preds = %OP5765.PUSH32
  %swap.a19741 = load i256, ptr %sp19632, align 16
  %swap.b19743 = load i256, ptr %sp19628, align 16
  store i256 %swap.a19741, ptr %sp19628, align 16
  store i256 %swap.b19743, ptr %sp19632, align 16
  %mload.out.slot19747 = alloca i256, align 16
  %2667 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b19743, ptr %mload.out.slot19747, ptr %arg.ecx.addr)
  %.not48118 = icmp eq i8 %2667, 0
  br i1 %.not48118, label %OP5771.MLOAD.contd, label %return, !prof !6

OP5771.MLOAD.contd:                               ; preds = %OP5770.SWAP1
  %mload.out19748 = load i256, ptr %mload.out.slot19747, align 16
  store i256 %mload.out19748, ptr %sp19632, align 16
  %swap.b19754 = load i256, ptr %sp19628, align 16
  store i256 %mload.out19748, ptr %sp19628, align 16
  store i256 %swap.b19754, ptr %sp19632, align 16
  store i256 %mload.out19748, ptr %sp19672, align 16
  store i256 %mload.out19748, ptr %sp19632, align 16
  store i256 %swap.b19754, ptr %sp19672, align 16
  %2668 = sub i256 %swap.b19754, %mload.out19748
  store i256 %2668, ptr %sp19632, align 16
  store i256 100, ptr %sp19672, align 16
  %2669 = add i256 %2668, 100
  store i256 %2669, ptr %sp19632, align 16
  store i256 %2669, ptr %sp19628, align 16
  store i256 %mload.out19748, ptr %sp19632, align 16
  %2670 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19628, i8 16)
  %.not48119 = icmp eq i8 %2670, 0
  %spec.select36623 = select i1 %.not48119, i8 16, i8 %2670, !prof !6
  br label %return

OP5780.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5741.PUSH21
  %sp19787 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 10935, ptr %sp19787, align 16
  %sp19789 = getelementptr i256, ptr %sp19787, i64 -5
  %dup619790 = load i256, ptr %sp19789, align 16
  %sp19791 = getelementptr i256, ptr %sp19787, i64 1
  store i256 %dup619790, ptr %sp19791, align 16
  %sp19793 = getelementptr i256, ptr %sp19787, i64 -4
  %dup619794 = load i256, ptr %sp19793, align 16
  %sp19795 = getelementptr i256, ptr %sp19787, i64 2
  store i256 %dup619794, ptr %sp19795, align 16
  %sp19797 = getelementptr i256, ptr %sp19787, i64 -3
  %dup619798 = load i256, ptr %sp19797, align 16
  %sp19799 = getelementptr i256, ptr %sp19787, i64 3
  store i256 %dup619798, ptr %sp19799, align 16
  %sp19801 = getelementptr i256, ptr %sp19787, i64 -2
  %dup619802 = load i256, ptr %sp19801, align 16
  %sp19803 = getelementptr i256, ptr %sp19787, i64 4
  store i256 %dup619802, ptr %sp19803, align 16
  %2671 = add i64 %len.addr.357, 6
  %sp19805 = getelementptr i256, ptr %sp19787, i64 -1
  %dup619806 = load i256, ptr %sp19805, align 16
  %sp19807 = getelementptr i256, ptr %sp19787, i64 5
  store i256 %dup619806, ptr %sp19807, align 16
  br label %OP8327.JUMPDEST

OP5789.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1861.JUMPDEST
  %len.addr.224 = phi i64 [ %896, %OP1861.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2672 = add i64 %len.addr.224, 1
  %sp19811 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.224
  store i256 56306633564104940265533113178924840914391875988752422239815283474255924830823, ptr %sp19811, align 16
  %sp19813 = getelementptr i256, ptr %sp19811, i64 -1
  %dup219814 = load i256, ptr %sp19813, align 16
  %sp19815 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2672
  store i256 %dup219814, ptr %sp19815, align 16
  br label %dynamic_jump_table.preheader

OP5793.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1880.JUMPDEST
  %len.addr.225 = phi i64 [ %len.addr.96, %OP1880.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2673 = add i64 %len.addr.225, 1
  %sp19821 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.225
  store i256 1, ptr %sp19821, align 16
  %2674 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19821, i8 17)
  %.not48883 = icmp eq i8 %2674, 0
  br i1 %.not48883, label %OP5796.PUSH1, label %return, !prof !6

OP5796.PUSH1:                                     ; preds = %OP5793.JUMPDEST
  %sp19825 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2673
  %swap.b19830 = load i256, ptr %sp19821, align 16
  store i256 0, ptr %sp19821, align 16
  %2675 = add i64 %len.addr.225, 3
  %sp19832 = getelementptr i256, ptr %sp19821, i64 2
  store i256 255, ptr %sp19832, align 16
  %2676 = and i256 %swap.b19830, 372682917519380244141939632342652170012262798458880
  %2677 = icmp eq i256 %2676, 0
  %2678 = zext i1 %2677 to i256
  store i256 %2678, ptr %sp19825, align 16
  br i1 %2677, label %OP5837.JUMPDEST, label %OP5806.PUSH1

OP5806.PUSH1:                                     ; preds = %OP5796.PUSH1
  store i256 64, ptr %sp19825, align 16
  store i256 64, ptr %sp19832, align 16
  %mload.out.slot19868 = alloca i256, align 16
  %2679 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot19868, ptr %arg.ecx.addr)
  %.not48884 = icmp eq i8 %2679, 0
  br i1 %.not48884, label %OP5808.MLOAD.contd, label %return, !prof !6

OP5808.MLOAD.contd:                               ; preds = %OP5806.PUSH1
  %mload.out19869 = load i256, ptr %mload.out.slot19868, align 16
  store i256 %mload.out19869, ptr %sp19832, align 16
  %sp19872 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2675
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp19872, align 16
  %sp19876 = getelementptr i256, ptr %sp19821, i64 4
  store i256 %mload.out19869, ptr %sp19876, align 16
  %2680 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out19869, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48885 = icmp eq i8 %2680, 0
  br i1 %.not48885, label %OP5812.PUSH1, label %return, !prof !6

OP5812.PUSH1:                                     ; preds = %OP5808.MLOAD.contd
  store i256 32, ptr %sp19872, align 16
  %dup319888 = load i256, ptr %sp19832, align 16
  %sp19889 = getelementptr i256, ptr %sp19821, i64 5
  store i256 %dup319888, ptr %sp19889, align 16
  %2681 = add i256 %dup319888, 4
  store i256 %2681, ptr %sp19876, align 16
  %2682 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2681, i256 32, ptr %arg.ecx.addr)
  %.not48886 = icmp eq i8 %2682, 0
  br i1 %.not48886, label %OP5817.PUSH1, label %return, !prof !6

OP5817.PUSH1:                                     ; preds = %OP5812.PUSH1
  store i256 16, ptr %sp19872, align 16
  %dup319907 = load i256, ptr %sp19832, align 16
  store i256 %dup319907, ptr %sp19889, align 16
  %2683 = add i256 %dup319907, 36
  store i256 %2683, ptr %sp19876, align 16
  %2684 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2683, i256 16, ptr %arg.ecx.addr)
  %.not48887 = icmp eq i8 %2684, 0
  br i1 %.not48887, label %OP5822.PUSH32, label %return, !prof !6

OP5822.PUSH32:                                    ; preds = %OP5817.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp19872, align 16
  %dup319926 = load i256, ptr %sp19832, align 16
  store i256 %dup319926, ptr %sp19889, align 16
  %2685 = add i256 %dup319926, 68
  store i256 %2685, ptr %sp19876, align 16
  %2686 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2685, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48888 = icmp eq i8 %2686, 0
  br i1 %.not48888, label %OP5827.SWAP1, label %return, !prof !6

OP5827.SWAP1:                                     ; preds = %OP5822.PUSH32
  %swap.a19941 = load i256, ptr %sp19832, align 16
  %swap.b19943 = load i256, ptr %sp19825, align 16
  store i256 %swap.a19941, ptr %sp19825, align 16
  store i256 %swap.b19943, ptr %sp19832, align 16
  %mload.out.slot19947 = alloca i256, align 16
  %2687 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b19943, ptr %mload.out.slot19947, ptr %arg.ecx.addr)
  %.not48889 = icmp eq i8 %2687, 0
  br i1 %.not48889, label %OP5828.MLOAD.contd, label %return, !prof !6

OP5828.MLOAD.contd:                               ; preds = %OP5827.SWAP1
  %mload.out19948 = load i256, ptr %mload.out.slot19947, align 16
  %swap.b19954 = load i256, ptr %sp19825, align 16
  %2688 = sub i256 %swap.b19954, %mload.out19948
  store i256 100, ptr %sp19872, align 16
  %2689 = add i256 %2688, 100
  store i256 %2689, ptr %sp19825, align 16
  store i256 %mload.out19948, ptr %sp19832, align 16
  %2690 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp19825, i8 16)
  %.not48890 = icmp eq i8 %2690, 0
  %spec.select36624 = select i1 %.not48890, i8 16, i8 %2690, !prof !6
  br label %return

OP5837.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5796.PUSH1
  %len.addr.226 = phi i64 [ %2673, %OP5796.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp19987 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.226
  store i256 4971, ptr %sp19987, align 16
  %contract.caller.addr19989 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller19990 = load i160, ptr %contract.caller.addr19989, align 16
  %2691 = tail call i160 @llvm.bswap.i160(i160 %contract.caller19990)
  %2692 = zext i160 %2691 to i256
  %sp19991 = getelementptr i256, ptr %sp19987, i64 1
  store i256 %2692, ptr %sp19991, align 16
  %sp19993 = getelementptr i256, ptr %sp19987, i64 -3
  %dup519994 = load i256, ptr %sp19993, align 16
  %sp19995 = getelementptr i256, ptr %sp19987, i64 2
  store i256 %dup519994, ptr %sp19995, align 16
  %2693 = add i64 %len.addr.226, 4
  %sp19997 = getelementptr i256, ptr %sp19987, i64 -2
  %dup519998 = load i256, ptr %sp19997, align 16
  %sp19999 = getelementptr i256, ptr %sp19987, i64 3
  store i256 %dup519998, ptr %sp19999, align 16
  br label %OP8696.JUMPDEST

OP5844.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1907.JUMPDEST
  %len.addr.227 = phi i64 [ %len.addr.98, %OP1907.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2694 = add i64 %len.addr.227, 1
  %sp20003 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.227
  store i256 1, ptr %sp20003, align 16
  %2695 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20003, i8 17)
  %.not48874 = icmp eq i8 %2695, 0
  br i1 %.not48874, label %OP5847.PUSH1, label %return, !prof !6

OP5847.PUSH1:                                     ; preds = %OP5844.JUMPDEST
  %sp20007 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2694
  %swap.b20012 = load i256, ptr %sp20003, align 16
  store i256 0, ptr %sp20003, align 16
  %2696 = add i64 %len.addr.227, 3
  %sp20014 = getelementptr i256, ptr %sp20003, i64 2
  store i256 255, ptr %sp20014, align 16
  %2697 = and i256 %swap.b20012, 372682917519380244141939632342652170012262798458880
  %2698 = icmp eq i256 %2697, 0
  %2699 = zext i1 %2698 to i256
  store i256 %2699, ptr %sp20007, align 16
  br i1 %2698, label %OP5888.JUMPDEST, label %OP5857.PUSH1

OP5857.PUSH1:                                     ; preds = %OP5847.PUSH1
  store i256 64, ptr %sp20007, align 16
  store i256 64, ptr %sp20014, align 16
  %mload.out.slot20050 = alloca i256, align 16
  %2700 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20050, ptr %arg.ecx.addr)
  %.not48875 = icmp eq i8 %2700, 0
  br i1 %.not48875, label %OP5859.MLOAD.contd, label %return, !prof !6

OP5859.MLOAD.contd:                               ; preds = %OP5857.PUSH1
  %mload.out20051 = load i256, ptr %mload.out.slot20050, align 16
  store i256 %mload.out20051, ptr %sp20014, align 16
  %sp20054 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2696
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp20054, align 16
  %sp20058 = getelementptr i256, ptr %sp20003, i64 4
  store i256 %mload.out20051, ptr %sp20058, align 16
  %2701 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out20051, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48876 = icmp eq i8 %2701, 0
  br i1 %.not48876, label %OP5863.PUSH1, label %return, !prof !6

OP5863.PUSH1:                                     ; preds = %OP5859.MLOAD.contd
  store i256 32, ptr %sp20054, align 16
  %dup320070 = load i256, ptr %sp20014, align 16
  %sp20071 = getelementptr i256, ptr %sp20003, i64 5
  store i256 %dup320070, ptr %sp20071, align 16
  %2702 = add i256 %dup320070, 4
  store i256 %2702, ptr %sp20058, align 16
  %2703 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2702, i256 32, ptr %arg.ecx.addr)
  %.not48877 = icmp eq i8 %2703, 0
  br i1 %.not48877, label %OP5868.PUSH1, label %return, !prof !6

OP5868.PUSH1:                                     ; preds = %OP5863.PUSH1
  store i256 16, ptr %sp20054, align 16
  %dup320089 = load i256, ptr %sp20014, align 16
  store i256 %dup320089, ptr %sp20071, align 16
  %2704 = add i256 %dup320089, 36
  store i256 %2704, ptr %sp20058, align 16
  %2705 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2704, i256 16, ptr %arg.ecx.addr)
  %.not48878 = icmp eq i8 %2705, 0
  br i1 %.not48878, label %OP5873.PUSH32, label %return, !prof !6

OP5873.PUSH32:                                    ; preds = %OP5868.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp20054, align 16
  %dup320108 = load i256, ptr %sp20014, align 16
  store i256 %dup320108, ptr %sp20071, align 16
  %2706 = add i256 %dup320108, 68
  store i256 %2706, ptr %sp20058, align 16
  %2707 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2706, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48879 = icmp eq i8 %2707, 0
  br i1 %.not48879, label %OP5878.SWAP1, label %return, !prof !6

OP5878.SWAP1:                                     ; preds = %OP5873.PUSH32
  %swap.a20123 = load i256, ptr %sp20014, align 16
  %swap.b20125 = load i256, ptr %sp20007, align 16
  store i256 %swap.a20123, ptr %sp20007, align 16
  store i256 %swap.b20125, ptr %sp20014, align 16
  %mload.out.slot20129 = alloca i256, align 16
  %2708 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b20125, ptr %mload.out.slot20129, ptr %arg.ecx.addr)
  %.not48880 = icmp eq i8 %2708, 0
  br i1 %.not48880, label %OP5879.MLOAD.contd, label %return, !prof !6

OP5879.MLOAD.contd:                               ; preds = %OP5878.SWAP1
  %mload.out20130 = load i256, ptr %mload.out.slot20129, align 16
  %swap.b20136 = load i256, ptr %sp20007, align 16
  %2709 = sub i256 %swap.b20136, %mload.out20130
  store i256 100, ptr %sp20054, align 16
  %2710 = add i256 %2709, 100
  store i256 %2710, ptr %sp20007, align 16
  store i256 %mload.out20130, ptr %sp20014, align 16
  %2711 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20007, i8 16)
  %.not48881 = icmp eq i8 %2711, 0
  %spec.select36625 = select i1 %.not48881, i8 16, i8 %2711, !prof !6
  br label %return

OP5888.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5847.PUSH1
  %len.addr.228 = phi i64 [ %2694, %OP5847.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %contract.caller.addr20169 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller20170 = load i160, ptr %contract.caller.addr20169, align 16
  %2712 = tail call i160 @llvm.bswap.i160(i160 %contract.caller20170)
  %2713 = zext i160 %2712 to i256
  %sp20171 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.228
  store i256 %2713, ptr %sp20171, align 16
  %sp20173 = getelementptr i256, ptr %sp20171, i64 1
  store i256 12349, ptr %sp20173, align 16
  %2714 = add i64 %len.addr.228, 3
  %sp20177 = getelementptr i256, ptr %sp20171, i64 2
  store i256 %2713, ptr %sp20177, align 16
  br label %OP7491.JUMPDEST

OP5894.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2715 = add i64 %len.addr.357, -1
  %sp20181 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2715
  %a20182 = load i256, ptr %sp20181, align 16
  %2716 = icmp eq i256 %a20182, 0
  %2717 = zext i1 %2716 to i256
  store i256 %2717, ptr %sp20181, align 16
  br i1 %2716, label %OP5936.JUMPDEST, label %OP5898.PUSH1

OP5898.PUSH1:                                     ; preds = %OP5894.JUMPDEST
  store i256 64, ptr %sp20181, align 16
  %mload.out.slot20192 = alloca i256, align 16
  %2718 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20192, ptr %arg.ecx.addr)
  %.not48105 = icmp eq i8 %2718, 0
  br i1 %.not48105, label %OP5899.MLOAD.contd, label %return, !prof !6

OP5899.MLOAD.contd:                               ; preds = %OP5898.PUSH1
  %mload.out20193 = load i256, ptr %mload.out.slot20192, align 16
  store i256 %mload.out20193, ptr %sp20181, align 16
  %2719 = add i64 %len.addr.357, 1
  %sp20196 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp20196, align 16
  %2720 = add i64 %len.addr.357, 2
  %sp20198 = getelementptr i256, ptr %sp20196, i64 -1
  %sp20200 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2719
  store i256 %mload.out20193, ptr %sp20200, align 16
  %2721 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out20193, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48106 = icmp eq i8 %2721, 0
  br i1 %.not48106, label %OP5903.PUSH1, label %return, !prof !6

OP5903.PUSH1:                                     ; preds = %OP5899.MLOAD.contd
  store i256 4, ptr %sp20196, align 16
  %b20212 = load i256, ptr %sp20181, align 16
  %2722 = add i256 %b20212, 4
  store i256 %2722, ptr %sp20181, align 16
  store i256 %2722, ptr %sp20196, align 16
  store i256 %2722, ptr %sp20200, align 16
  %sp20223 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2720
  store i256 32, ptr %sp20223, align 16
  %2723 = add i256 %b20212, 36
  store i256 %2723, ptr %sp20200, align 16
  store i256 %2722, ptr %sp20223, align 16
  %sp20237 = getelementptr i256, ptr %sp20196, i64 3
  store i256 %2723, ptr %sp20237, align 16
  store i256 32, ptr %sp20223, align 16
  store i256 %2722, ptr %sp20237, align 16
  %2724 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2722, i256 32, ptr %arg.ecx.addr)
  %.not48107 = icmp eq i8 %2724, 0
  br i1 %.not48107, label %OP5914.PUSH1, label %return, !prof !6

OP5914.PUSH1:                                     ; preds = %OP5903.PUSH1
  store i256 37, ptr %sp20223, align 16
  %dup220257 = load i256, ptr %sp20200, align 16
  store i256 %dup220257, ptr %sp20237, align 16
  %2725 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup220257, i256 37, ptr %arg.ecx.addr)
  %.not48108 = icmp eq i8 %2725, 0
  br i1 %.not48108, label %OP5917.PUSH1, label %return, !prof !6

OP5917.PUSH1:                                     ; preds = %OP5914.PUSH1
  store i256 32, ptr %sp20223, align 16
  %b20270 = load i256, ptr %sp20200, align 16
  %2726 = add i256 %b20270, 32
  store i256 %2726, ptr %sp20200, align 16
  store i256 %2726, ptr %sp20223, align 16
  store i256 23300, ptr %sp20237, align 16
  %sp20279 = getelementptr i256, ptr %sp20196, i64 4
  store i256 37, ptr %sp20279, align 16
  store i256 37, ptr %sp20223, align 16
  store i256 %2726, ptr %sp20279, align 16
  %2727 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20223)
  %.not48109 = icmp eq i8 %2727, 0
  br i1 %.not48109, label %OP5924.PUSH1, label %return, !prof !6

OP5924.PUSH1:                                     ; preds = %OP5917.PUSH1
  store i256 64, ptr %sp20223, align 16
  %b20293 = load i256, ptr %sp20200, align 16
  %2728 = add i256 %b20293, 64
  store i256 %2728, ptr %sp20200, align 16
  %swap.b20299 = load i256, ptr %sp20198, align 16
  store i256 %2728, ptr %sp20198, align 16
  store i256 %swap.b20299, ptr %sp20200, align 16
  store i256 64, ptr %sp20196, align 16
  %mload.out.slot20307 = alloca i256, align 16
  %2729 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20307, ptr %arg.ecx.addr)
  %.not48110 = icmp eq i8 %2729, 0
  br i1 %.not48110, label %OP5930.MLOAD.contd, label %return, !prof !6

OP5930.MLOAD.contd:                               ; preds = %OP5924.PUSH1
  %mload.out20308 = load i256, ptr %mload.out.slot20307, align 16
  store i256 %mload.out20308, ptr %sp20196, align 16
  store i256 %mload.out20308, ptr %sp20200, align 16
  %swap.b20318 = load i256, ptr %sp20198, align 16
  store i256 %mload.out20308, ptr %sp20198, align 16
  store i256 %swap.b20318, ptr %sp20200, align 16
  %2730 = sub i256 %swap.b20318, %mload.out20308
  store i256 %2730, ptr %sp20196, align 16
  store i256 %2730, ptr %sp20198, align 16
  store i256 %mload.out20308, ptr %sp20196, align 16
  %2731 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20198, i8 16)
  %.not48111 = icmp eq i8 %2731, 0
  %spec.select36626 = select i1 %.not48111, i8 16, i8 %2731, !prof !6
  br label %return

OP5936.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5894.JUMPDEST
  %len.addr.229 = phi i64 [ %2715, %OP5894.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2732 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.229
  %sp20334 = getelementptr i256, ptr %2732, i64 -4
  %dup420335 = load i256, ptr %sp20334, align 16
  store i256 %dup420335, ptr %2732, align 16
  %sp20338 = getelementptr i256, ptr %2732, i64 1
  store i256 12445, ptr %sp20338, align 16
  %2733 = add i64 %len.addr.229, 3
  %sp20342 = getelementptr i256, ptr %2732, i64 2
  store i256 %dup420335, ptr %sp20342, align 16
  br label %OP7491.JUMPDEST

OP5942.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2734 = add i64 %len.addr.357, -1
  %sp20346 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2734
  %a20347 = load i256, ptr %sp20346, align 16
  %2735 = icmp eq i256 %a20347, 0
  %2736 = zext i1 %2735 to i256
  store i256 %2736, ptr %sp20346, align 16
  br i1 %2735, label %OP5984.JUMPDEST, label %OP5946.PUSH1

OP5946.PUSH1:                                     ; preds = %OP5942.JUMPDEST
  store i256 64, ptr %sp20346, align 16
  %mload.out.slot20357 = alloca i256, align 16
  %2737 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20357, ptr %arg.ecx.addr)
  %.not48098 = icmp eq i8 %2737, 0
  br i1 %.not48098, label %OP5947.MLOAD.contd, label %return, !prof !6

OP5947.MLOAD.contd:                               ; preds = %OP5946.PUSH1
  %mload.out20358 = load i256, ptr %mload.out.slot20357, align 16
  store i256 %mload.out20358, ptr %sp20346, align 16
  %2738 = add i64 %len.addr.357, 1
  %sp20361 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp20361, align 16
  %2739 = add i64 %len.addr.357, 2
  %sp20363 = getelementptr i256, ptr %sp20361, i64 -1
  %sp20365 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2738
  store i256 %mload.out20358, ptr %sp20365, align 16
  %2740 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out20358, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48099 = icmp eq i8 %2740, 0
  br i1 %.not48099, label %OP5951.PUSH1, label %return, !prof !6

OP5951.PUSH1:                                     ; preds = %OP5947.MLOAD.contd
  store i256 4, ptr %sp20361, align 16
  %b20377 = load i256, ptr %sp20346, align 16
  %2741 = add i256 %b20377, 4
  store i256 %2741, ptr %sp20346, align 16
  store i256 %2741, ptr %sp20361, align 16
  store i256 %2741, ptr %sp20365, align 16
  %sp20388 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2739
  store i256 32, ptr %sp20388, align 16
  %2742 = add i256 %b20377, 36
  store i256 %2742, ptr %sp20365, align 16
  store i256 %2741, ptr %sp20388, align 16
  %sp20402 = getelementptr i256, ptr %sp20361, i64 3
  store i256 %2742, ptr %sp20402, align 16
  store i256 32, ptr %sp20388, align 16
  store i256 %2741, ptr %sp20402, align 16
  %2743 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2741, i256 32, ptr %arg.ecx.addr)
  %.not48100 = icmp eq i8 %2743, 0
  br i1 %.not48100, label %OP5962.PUSH1, label %return, !prof !6

OP5962.PUSH1:                                     ; preds = %OP5951.PUSH1
  store i256 37, ptr %sp20388, align 16
  %dup220422 = load i256, ptr %sp20365, align 16
  store i256 %dup220422, ptr %sp20402, align 16
  %2744 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup220422, i256 37, ptr %arg.ecx.addr)
  %.not48101 = icmp eq i8 %2744, 0
  br i1 %.not48101, label %OP5965.PUSH1, label %return, !prof !6

OP5965.PUSH1:                                     ; preds = %OP5962.PUSH1
  store i256 32, ptr %sp20388, align 16
  %b20435 = load i256, ptr %sp20365, align 16
  %2745 = add i256 %b20435, 32
  store i256 %2745, ptr %sp20365, align 16
  store i256 %2745, ptr %sp20388, align 16
  store i256 23300, ptr %sp20402, align 16
  %sp20444 = getelementptr i256, ptr %sp20361, i64 4
  store i256 37, ptr %sp20444, align 16
  store i256 37, ptr %sp20388, align 16
  store i256 %2745, ptr %sp20444, align 16
  %2746 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20388)
  %.not48102 = icmp eq i8 %2746, 0
  br i1 %.not48102, label %OP5972.PUSH1, label %return, !prof !6

OP5972.PUSH1:                                     ; preds = %OP5965.PUSH1
  store i256 64, ptr %sp20388, align 16
  %b20458 = load i256, ptr %sp20365, align 16
  %2747 = add i256 %b20458, 64
  store i256 %2747, ptr %sp20365, align 16
  %swap.b20464 = load i256, ptr %sp20363, align 16
  store i256 %2747, ptr %sp20363, align 16
  store i256 %swap.b20464, ptr %sp20365, align 16
  store i256 64, ptr %sp20361, align 16
  %mload.out.slot20472 = alloca i256, align 16
  %2748 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20472, ptr %arg.ecx.addr)
  %.not48103 = icmp eq i8 %2748, 0
  br i1 %.not48103, label %OP5978.MLOAD.contd, label %return, !prof !6

OP5978.MLOAD.contd:                               ; preds = %OP5972.PUSH1
  %mload.out20473 = load i256, ptr %mload.out.slot20472, align 16
  store i256 %mload.out20473, ptr %sp20361, align 16
  store i256 %mload.out20473, ptr %sp20365, align 16
  %swap.b20483 = load i256, ptr %sp20363, align 16
  store i256 %mload.out20473, ptr %sp20363, align 16
  store i256 %swap.b20483, ptr %sp20365, align 16
  %2749 = sub i256 %swap.b20483, %mload.out20473
  store i256 %2749, ptr %sp20361, align 16
  store i256 %2749, ptr %sp20363, align 16
  store i256 %mload.out20473, ptr %sp20361, align 16
  %2750 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20363, i8 16)
  %.not48104 = icmp eq i8 %2750, 0
  %spec.select36627 = select i1 %.not48104, i8 16, i8 %2750, !prof !6
  br label %return

OP5984.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5942.JUMPDEST
  %len.addr.230 = phi i64 [ %2734, %OP5942.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp20499 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.230
  store i256 12542, ptr %sp20499, align 16
  %contract.caller20502 = load i160, ptr %contract.caller.addr16198, align 16
  %2751 = tail call i160 @llvm.bswap.i160(i160 %contract.caller20502)
  %2752 = zext i160 %2751 to i256
  %sp20503 = getelementptr i256, ptr %sp20499, i64 1
  store i256 %2752, ptr %sp20503, align 16
  %sp20505 = getelementptr i256, ptr %sp20499, i64 -5
  %dup720506 = load i256, ptr %sp20505, align 16
  %sp20507 = getelementptr i256, ptr %sp20499, i64 2
  store i256 %dup720506, ptr %sp20507, align 16
  %2753 = add i64 %len.addr.230, 4
  %sp20509 = getelementptr i256, ptr %sp20499, i64 -4
  %dup720510 = load i256, ptr %sp20509, align 16
  %sp20511 = getelementptr i256, ptr %sp20499, i64 3
  store i256 %dup720510, ptr %sp20511, align 16
  br label %OP7511.JUMPDEST

OP5991.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2754 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp20516 = getelementptr i256, ptr %2754, i64 -1
  store i256 1, ptr %sp20516, align 16
  %sp20520 = getelementptr i256, ptr %2754, i64 -6
  %swap.b20521 = load i256, ptr %sp20520, align 16
  store i256 1, ptr %sp20520, align 16
  store i256 %swap.b20521, ptr %sp20516, align 16
  %sp20525 = getelementptr i256, ptr %2754, i64 -5
  %swap.b20526 = load i256, ptr %sp20525, align 16
  store i256 %swap.b20521, ptr %sp20525, align 16
  store i256 %swap.b20526, ptr %sp20516, align 16
  %2755 = add i64 %len.addr.357, -5
  br label %dynamic_jump_table.backedge

OP6001.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1934.JUMPDEST
  %len.addr.231 = phi i64 [ %927, %OP1934.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2756 = add i64 %len.addr.231, 1
  %sp20536 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.231
  store i256 0, ptr %sp20536, align 16
  %2757 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20536, i8 17)
  %.not48853 = icmp eq i8 %2757, 0
  br i1 %.not48853, label %OP6004.PUSH20, label %return, !prof !6

OP6004.PUSH20:                                    ; preds = %OP6001.JUMPDEST
  %2758 = add i64 %len.addr.231, 2
  %sp20540 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2756
  %b20545 = load i256, ptr %sp20536, align 16
  %contract.caller.addr20548 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller20549 = load i160, ptr %contract.caller.addr20548, align 16
  %2759 = tail call i160 @llvm.bswap.i160(i160 %contract.caller20549)
  %2760 = zext i160 %2759 to i256
  store i256 %2760, ptr %sp20540, align 16
  %2761 = trunc i256 %b20545 to i160
  %2762 = icmp eq i160 %2759, %2761
  %2763 = zext i1 %2762 to i256
  store i256 %2763, ptr %sp20536, align 16
  br i1 %2762, label %OP6042.JUMPDEST, label %OP6010.PUSH1

OP6010.PUSH1:                                     ; preds = %OP6004.PUSH20
  store i256 64, ptr %sp20536, align 16
  store i256 64, ptr %sp20540, align 16
  %mload.out.slot20569 = alloca i256, align 16
  %2764 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20569, ptr %arg.ecx.addr)
  %.not48854 = icmp eq i8 %2764, 0
  br i1 %.not48854, label %OP6012.MLOAD.contd, label %return, !prof !6

OP6012.MLOAD.contd:                               ; preds = %OP6010.PUSH1
  %mload.out20570 = load i256, ptr %mload.out.slot20569, align 16
  store i256 %mload.out20570, ptr %sp20540, align 16
  %2765 = add i64 %len.addr.231, 3
  %sp20573 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2758
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp20573, align 16
  %sp20577 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2765
  store i256 %mload.out20570, ptr %sp20577, align 16
  %2766 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out20570, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48855 = icmp eq i8 %2766, 0
  br i1 %.not48855, label %OP6016.PUSH1, label %return, !prof !6

OP6016.PUSH1:                                     ; preds = %OP6012.MLOAD.contd
  store i256 32, ptr %sp20573, align 16
  %dup320589 = load i256, ptr %sp20540, align 16
  %sp20590 = getelementptr i256, ptr %sp20536, i64 4
  %2767 = add i256 %dup320589, 4
  store i256 32, ptr %sp20577, align 16
  store i256 %2767, ptr %sp20590, align 16
  %2768 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2767, i256 32, ptr %arg.ecx.addr)
  %.not48856 = icmp eq i8 %2768, 0
  br i1 %.not48856, label %OP6023.PUSH1, label %return, !prof !6

OP6023.PUSH1:                                     ; preds = %OP6016.PUSH1
  %dup320615 = load i256, ptr %sp20540, align 16
  store i256 %dup320615, ptr %sp20590, align 16
  %2769 = add i256 %dup320615, 36
  store i256 %2769, ptr %sp20577, align 16
  %b20627 = load i256, ptr %sp20573, align 16
  %2770 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2769, i256 %b20627, ptr %arg.ecx.addr)
  %.not48857 = icmp eq i8 %2770, 0
  br i1 %.not48857, label %OP6027.PUSH32, label %return, !prof !6

OP6027.PUSH32:                                    ; preds = %OP6023.PUSH1
  store i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %sp20573, align 16
  %dup320634 = load i256, ptr %sp20540, align 16
  store i256 %dup320634, ptr %sp20590, align 16
  %2771 = add i256 %dup320634, 68
  store i256 %2771, ptr %sp20577, align 16
  %2772 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2771, i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %arg.ecx.addr)
  %.not48858 = icmp eq i8 %2772, 0
  br i1 %.not48858, label %OP6032.SWAP1, label %return, !prof !6

OP6032.SWAP1:                                     ; preds = %OP6027.PUSH32
  %swap.a20649 = load i256, ptr %sp20540, align 16
  %swap.b20651 = load i256, ptr %sp20536, align 16
  store i256 %swap.a20649, ptr %sp20536, align 16
  store i256 %swap.b20651, ptr %sp20540, align 16
  %mload.out.slot20655 = alloca i256, align 16
  %2773 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b20651, ptr %mload.out.slot20655, ptr %arg.ecx.addr)
  %.not48859 = icmp eq i8 %2773, 0
  br i1 %.not48859, label %OP6033.MLOAD.contd, label %return, !prof !6

OP6033.MLOAD.contd:                               ; preds = %OP6032.SWAP1
  %mload.out20656 = load i256, ptr %mload.out.slot20655, align 16
  %swap.b20662 = load i256, ptr %sp20536, align 16
  %2774 = sub i256 %swap.b20662, %mload.out20656
  store i256 100, ptr %sp20573, align 16
  %2775 = add i256 %2774, 100
  store i256 %2775, ptr %sp20536, align 16
  store i256 %mload.out20656, ptr %sp20540, align 16
  %2776 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20536, i8 16)
  %.not48860 = icmp eq i8 %2776, 0
  %spec.select36628 = select i1 %.not48860, i8 16, i8 %2776, !prof !6
  br label %return

OP6042.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54125 = add i64 %len.addr.357, 2
  %.pre54227 = add i64 %len.addr.357, 1
  br label %OP6042.JUMPDEST

OP6042.JUMPDEST:                                  ; preds = %OP6042.JUMPDEST.loopexit, %OP6004.PUSH20
  %.pre-phi54228 = phi i64 [ %.pre54227, %OP6042.JUMPDEST.loopexit ], [ %2756, %OP6004.PUSH20 ]
  %.pre-phi54126 = phi i64 [ %.pre54125, %OP6042.JUMPDEST.loopexit ], [ %2758, %OP6004.PUSH20 ]
  %len.addr.232 = phi i64 [ %len.addr.357, %OP6042.JUMPDEST.loopexit ], [ %len.addr.231, %OP6004.PUSH20 ]
  %sp20695 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.232
  %sp20697 = getelementptr i256, ptr %sp20695, i64 -1
  %dup220698 = load i256, ptr %sp20697, align 16
  %sp20699 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54228
  store i256 %dup220698, ptr %sp20699, align 16
  %2777 = and i256 %dup220698, 1461501637330902918203684832716283019655932542975
  store i256 %2777, ptr %sp20695, align 16
  %.not48861 = icmp eq i256 %2777, 0
  br i1 %.not48861, label %OP6048.PUSH1, label %OP6086.JUMPDEST

OP6048.PUSH1:                                     ; preds = %OP6042.JUMPDEST
  store i256 64, ptr %sp20695, align 16
  %mload.out.slot20714 = alloca i256, align 16
  %2778 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20714, ptr %arg.ecx.addr)
  %.not48862 = icmp eq i8 %2778, 0
  br i1 %.not48862, label %OP6049.MLOAD.contd, label %return, !prof !6

OP6049.MLOAD.contd:                               ; preds = %OP6048.PUSH1
  %mload.out20715 = load i256, ptr %mload.out.slot20714, align 16
  store i256 %mload.out20715, ptr %sp20695, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp20699, align 16
  %2779 = add i64 %len.addr.232, 3
  %sp20722 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54126
  store i256 %mload.out20715, ptr %sp20722, align 16
  %2780 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out20715, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48863 = icmp eq i8 %2780, 0
  br i1 %.not48863, label %OP6053.PUSH1, label %return, !prof !6

OP6053.PUSH1:                                     ; preds = %OP6049.MLOAD.contd
  store i256 4, ptr %sp20699, align 16
  %b20734 = load i256, ptr %sp20695, align 16
  %2781 = add i256 %b20734, 4
  store i256 %2781, ptr %sp20695, align 16
  store i256 %2781, ptr %sp20699, align 16
  %sp20745 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2779
  %2782 = add i256 %b20734, 36
  store i256 %2782, ptr %sp20722, align 16
  %sp20759 = getelementptr i256, ptr %sp20695, i64 4
  store i256 32, ptr %sp20745, align 16
  store i256 %2781, ptr %sp20759, align 16
  %2783 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2781, i256 32, ptr %arg.ecx.addr)
  %.not48864 = icmp eq i8 %2783, 0
  br i1 %.not48864, label %OP6064.PUSH1, label %return, !prof !6

OP6064.PUSH1:                                     ; preds = %OP6053.PUSH1
  store i256 47, ptr %sp20745, align 16
  %dup220779 = load i256, ptr %sp20722, align 16
  store i256 %dup220779, ptr %sp20759, align 16
  %2784 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup220779, i256 47, ptr %arg.ecx.addr)
  %.not48865 = icmp eq i8 %2784, 0
  br i1 %.not48865, label %OP6067.PUSH1, label %return, !prof !6

OP6067.PUSH1:                                     ; preds = %OP6064.PUSH1
  store i256 32, ptr %sp20745, align 16
  %b20792 = load i256, ptr %sp20722, align 16
  %2785 = add i256 %b20792, 32
  store i256 %2785, ptr %sp20722, align 16
  store i256 22721, ptr %sp20759, align 16
  %sp20801 = getelementptr i256, ptr %sp20695, i64 5
  store i256 47, ptr %sp20745, align 16
  store i256 %2785, ptr %sp20801, align 16
  %2786 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20745)
  %.not48866 = icmp eq i8 %2786, 0
  br i1 %.not48866, label %OP6074.PUSH1, label %return, !prof !6

OP6074.PUSH1:                                     ; preds = %OP6067.PUSH1
  store i256 64, ptr %sp20745, align 16
  %b20815 = load i256, ptr %sp20722, align 16
  %2787 = add i256 %b20815, 64
  store i256 %2787, ptr %sp20722, align 16
  %swap.b20821 = load i256, ptr %sp20695, align 16
  store i256 %2787, ptr %sp20695, align 16
  store i256 %swap.b20821, ptr %sp20722, align 16
  store i256 64, ptr %sp20699, align 16
  %mload.out.slot20829 = alloca i256, align 16
  %2788 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot20829, ptr %arg.ecx.addr)
  %.not48867 = icmp eq i8 %2788, 0
  br i1 %.not48867, label %OP6080.MLOAD.contd, label %return, !prof !6

OP6080.MLOAD.contd:                               ; preds = %OP6074.PUSH1
  %mload.out20830 = load i256, ptr %mload.out.slot20829, align 16
  store i256 %mload.out20830, ptr %sp20699, align 16
  store i256 %mload.out20830, ptr %sp20722, align 16
  %swap.b20840 = load i256, ptr %sp20695, align 16
  store i256 %swap.b20840, ptr %sp20722, align 16
  %2789 = sub i256 %swap.b20840, %mload.out20830
  store i256 %2789, ptr %sp20695, align 16
  store i256 %mload.out20830, ptr %sp20699, align 16
  %2790 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20695, i8 16)
  %.not48868 = icmp eq i8 %2790, 0
  %spec.select36629 = select i1 %.not48868, i8 16, i8 %2790, !prof !6
  br label %return

OP6086.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6042.JUMPDEST
  %len.addr.233 = phi i64 [ %len.addr.232, %OP6042.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp20856 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.233
  store i256 8, ptr %sp20856, align 16
  %2791 = add i64 %len.addr.233, 2
  %sp20860 = getelementptr i256, ptr %sp20856, i64 1
  store i256 8, ptr %sp20860, align 16
  %2792 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20860, i8 17)
  %.not48869 = icmp eq i8 %2792, 0
  br i1 %.not48869, label %OP6090.PUSH32, label %return, !prof !6

OP6090.PUSH32:                                    ; preds = %OP6086.JUMPDEST
  %2793 = add i64 %len.addr.233, 3
  %sp20864 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2791
  %b20869 = load i256, ptr %sp20860, align 16
  %2794 = and i256 %b20869, -1461501637330902918203684832716283019655932542976
  %sp20874 = getelementptr i256, ptr %sp20856, i64 -1
  %dup420875 = load i256, ptr %sp20874, align 16
  %sp20876 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2793
  %sp20880 = getelementptr i256, ptr %sp20856, i64 4
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp20880, align 16
  %2795 = and i256 %dup420875, 1461501637330902918203684832716283019655932542975
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp20860, align 16
  %2796 = or disjoint i256 %2794, %2795
  %swap.b20912 = load i256, ptr %sp20856, align 16
  store i256 %2796, ptr %sp20856, align 16
  store i256 %2796, ptr %sp20864, align 16
  store i256 %swap.b20912, ptr %sp20876, align 16
  %2797 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20864, i8 17)
  %.not48870 = icmp eq i8 %2797, 0
  br i1 %.not48870, label %OP6104.PUSH1, label %return, !prof !6

OP6104.PUSH1:                                     ; preds = %OP6090.PUSH32
  store i256 64, ptr %sp20864, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !538)
  %ecx.memory.addr.i50194 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50195 = load ptr, ptr %ecx.memory.addr.i50194, align 8, !alias.scope !538, !noalias !541
  %ecx.memory.len.addr.i50196 = getelementptr inbounds i8, ptr %ecx.memory.i50195, i64 16
  %ecx.memory.len.i50197 = load i64, ptr %ecx.memory.len.addr.i50196, align 8, !noalias !543
  %ecx.memory.last_checkpoint.addr.i50198 = getelementptr inbounds i8, ptr %ecx.memory.i50195, i64 48
  %ecx.memory.last_checkpoint.i50199 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50198, align 8, !noalias !543
  %2798 = sub i64 %ecx.memory.len.i50197, %ecx.memory.last_checkpoint.i50199
  %2799 = icmp ult i64 %2798, 96
  br i1 %2799, label %resize.i50207, label %OP6105.MLOAD.contd, !prof !5

resize.i50207:                                    ; preds = %OP6104.PUSH1
  %2800 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !541
  %.not.i50208 = icmp eq i8 %2800, 0
  br i1 %.not.i50208, label %OP6105.MLOAD.contd, label %return, !prof !6

OP6105.MLOAD.contd:                               ; preds = %OP6104.PUSH1, %resize.i50207
  %ecx.memory.buffer.ptr.shared.addr.i50201 = getelementptr inbounds i8, ptr %ecx.memory.i50195, i64 8
  %ecx.memory.buffer.ptr.shared.i50202 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50201, align 8, !noalias !543
  %ecx.memory.buffer.ptr.i50203 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50202, i64 %ecx.memory.last_checkpoint.i50199
  %slot.i50204 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50203, i64 64
  %slot.value.i50205 = load i256, ptr %slot.i50204, align 1, !noalias !543
  %2801 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50205)
  %swap.b20936 = load i256, ptr %sp20856, align 16
  %b20941 = load i256, ptr %sp20860, align 16
  %2802 = and i256 %b20941, %swap.b20936
  store i256 %2802, ptr %sp20856, align 16
  store i256 -16553813330379219248015280489197089288969554056806772580702785786992289970202, ptr %sp20860, align 16
  store i256 0, ptr %sp20864, align 16
  store i256 %2801, ptr %sp20876, align 16
  %2803 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20856, i8 2)
  %.not48872 = icmp eq i8 %2803, 0
  br i1 %.not48872, label %OP6114.POP, label %return, !prof !6

OP6114.POP:                                       ; preds = %OP6105.MLOAD.contd
  %2804 = add i64 %len.addr.233, -2
  %sp20966 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2804
  %a20967 = load i256, ptr %sp20966, align 16
  br label %dynamic_jump_table.preheader

OP6116.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1956.JUMPDEST
  %len.addr.234 = phi i64 [ %938, %OP1956.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp20970 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.234
  %sp20974 = getelementptr i256, ptr %sp20970, i64 -1
  %b20975 = load i256, ptr %sp20974, align 16
  %2805 = and i256 %b20975, 1461501637330902918203684832716283019655932542975
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp20974, i8 0, i64 32, i1 false)
  store i256 %2805, ptr %sp20970, align 16
  %sp20987 = getelementptr i256, ptr %sp20970, i64 1
  store i256 0, ptr %sp20987, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !544)
  %ecx.memory.addr.i50210 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50211 = load ptr, ptr %ecx.memory.addr.i50210, align 8, !alias.scope !544
  %ecx.memory.len.addr.i50212 = getelementptr inbounds i8, ptr %ecx.memory.i50211, i64 16
  %ecx.memory.len.i50213 = load i64, ptr %ecx.memory.len.addr.i50212, align 8, !noalias !544
  %ecx.memory.last_checkpoint.addr.i50214 = getelementptr inbounds i8, ptr %ecx.memory.i50211, i64 48
  %ecx.memory.last_checkpoint.i50215 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50214, align 8, !noalias !544
  %2806 = sub i64 %ecx.memory.len.i50213, %ecx.memory.last_checkpoint.i50215
  %2807 = icmp ult i64 %2806, 32
  br i1 %2807, label %resize.i50221, label %OP6123.PUSH1, !prof !5

resize.i50221:                                    ; preds = %OP6116.JUMPDEST
  %2808 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50222 = icmp eq i8 %2808, 0
  br i1 %.not.i50222, label %OP6123.PUSH1, label %return, !prof !6

OP6123.PUSH1:                                     ; preds = %OP6116.JUMPDEST, %resize.i50221
  %ecx.memory.buffer.ptr.shared.addr.i50217 = getelementptr inbounds i8, ptr %ecx.memory.i50211, i64 8
  %ecx.memory.buffer.ptr.shared.i50218 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50217, align 8, !noalias !544
  %ecx.memory.buffer.ptr.i50219 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50218, i64 %ecx.memory.last_checkpoint.i50215
  %2809 = tail call i256 @llvm.bswap.i256(i256 %2805)
  store i256 %2809, ptr %ecx.memory.buffer.ptr.i50219, align 1, !noalias !544
  store i256 12, ptr %sp20970, align 16
  store i256 32, ptr %sp20987, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !547)
  %ecx.memory.i50225 = load ptr, ptr %ecx.memory.addr.i50210, align 8, !alias.scope !547
  %ecx.memory.len.addr.i50226 = getelementptr inbounds i8, ptr %ecx.memory.i50225, i64 16
  %ecx.memory.len.i50227 = load i64, ptr %ecx.memory.len.addr.i50226, align 8, !noalias !547
  %ecx.memory.last_checkpoint.addr.i50228 = getelementptr inbounds i8, ptr %ecx.memory.i50225, i64 48
  %ecx.memory.last_checkpoint.i50229 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50228, align 8, !noalias !547
  %2810 = sub i64 %ecx.memory.len.i50227, %ecx.memory.last_checkpoint.i50229
  %2811 = icmp ult i64 %2810, 64
  br i1 %2811, label %resize.i50236, label %OP6126.PUSH1, !prof !5

resize.i50236:                                    ; preds = %OP6123.PUSH1
  %2812 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50237 = icmp eq i8 %2812, 0
  br i1 %.not.i50237, label %OP6126.PUSH1, label %return, !prof !6

OP6126.PUSH1:                                     ; preds = %OP6123.PUSH1, %resize.i50236
  %ecx.memory.buffer.ptr.shared.addr.i50231 = getelementptr inbounds i8, ptr %ecx.memory.i50225, i64 8
  %ecx.memory.buffer.ptr.shared.i50232 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50231, align 8, !noalias !547
  %ecx.memory.buffer.ptr.i50233 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50232, i64 %ecx.memory.last_checkpoint.i50229
  %slot.i50234 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50233, i64 32
  store i256 5427754182999196660479889922282245680622030531201901439349574250370927951872, ptr %slot.i50234, align 1, !noalias !547
  %swap.b21008 = load i256, ptr %sp20974, align 16
  store i256 64, ptr %sp20974, align 16
  store i256 %swap.b21008, ptr %sp20970, align 16
  %2813 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20974)
  %.not48850 = icmp eq i8 %2813, 0
  br i1 %.not48850, label %OP6129.SLOAD, label %return, !prof !6

OP6129.SLOAD:                                     ; preds = %OP6126.PUSH1
  %2814 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp20974, i8 17)
  %.not48851 = icmp eq i8 %2814, 0
  br i1 %.not48851, label %OP6130.PUSH1, label %return, !prof !6

OP6130.PUSH1:                                     ; preds = %OP6129.SLOAD
  store i256 255, ptr %sp20970, align 16
  %b21019 = load i256, ptr %sp20974, align 16
  %2815 = and i256 %b21019, 255
  %sp21024 = getelementptr i256, ptr %sp20970, i64 -2
  %swap.b21025 = load i256, ptr %sp21024, align 16
  store i256 %2815, ptr %sp21024, align 16
  store i256 %swap.b21025, ptr %sp20974, align 16
  %2816 = add i64 %len.addr.234, -1
  br label %dynamic_jump_table.preheader

OP6134.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1978.JUMPDEST
  %len.addr.235 = phi i64 [ %949, %OP1978.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2817 = add i64 %len.addr.235, 1
  %sp21031 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.235
  store i256 0, ptr %sp21031, align 16
  %2818 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21031, i8 17)
  %.not48827 = icmp eq i8 %2818, 0
  br i1 %.not48827, label %OP6137.PUSH20, label %return, !prof !6

OP6137.PUSH20:                                    ; preds = %OP6134.JUMPDEST
  %2819 = add i64 %len.addr.235, 2
  %sp21035 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2817
  %b21040 = load i256, ptr %sp21031, align 16
  %contract.caller.addr21043 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller21044 = load i160, ptr %contract.caller.addr21043, align 16
  %2820 = tail call i160 @llvm.bswap.i160(i160 %contract.caller21044)
  %2821 = zext i160 %2820 to i256
  store i256 %2821, ptr %sp21035, align 16
  %2822 = trunc i256 %b21040 to i160
  %2823 = icmp eq i160 %2820, %2822
  %2824 = zext i1 %2823 to i256
  store i256 %2824, ptr %sp21031, align 16
  br i1 %2823, label %OP6175.JUMPDEST, label %OP6143.PUSH1

OP6143.PUSH1:                                     ; preds = %OP6137.PUSH20
  store i256 64, ptr %sp21031, align 16
  store i256 64, ptr %sp21035, align 16
  %mload.out.slot21064 = alloca i256, align 16
  %2825 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21064, ptr %arg.ecx.addr)
  %.not48828 = icmp eq i8 %2825, 0
  br i1 %.not48828, label %OP6145.MLOAD.contd, label %return, !prof !6

OP6145.MLOAD.contd:                               ; preds = %OP6143.PUSH1
  %mload.out21065 = load i256, ptr %mload.out.slot21064, align 16
  store i256 %mload.out21065, ptr %sp21035, align 16
  %2826 = add i64 %len.addr.235, 3
  %sp21068 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2819
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp21068, align 16
  %sp21072 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2826
  store i256 %mload.out21065, ptr %sp21072, align 16
  %2827 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out21065, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48829 = icmp eq i8 %2827, 0
  br i1 %.not48829, label %OP6149.PUSH1, label %return, !prof !6

OP6149.PUSH1:                                     ; preds = %OP6145.MLOAD.contd
  store i256 32, ptr %sp21068, align 16
  %dup321084 = load i256, ptr %sp21035, align 16
  %sp21085 = getelementptr i256, ptr %sp21031, i64 4
  %2828 = add i256 %dup321084, 4
  store i256 32, ptr %sp21072, align 16
  store i256 %2828, ptr %sp21085, align 16
  %2829 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2828, i256 32, ptr %arg.ecx.addr)
  %.not48830 = icmp eq i8 %2829, 0
  br i1 %.not48830, label %OP6156.PUSH1, label %return, !prof !6

OP6156.PUSH1:                                     ; preds = %OP6149.PUSH1
  %dup321110 = load i256, ptr %sp21035, align 16
  store i256 %dup321110, ptr %sp21085, align 16
  %2830 = add i256 %dup321110, 36
  store i256 %2830, ptr %sp21072, align 16
  %b21122 = load i256, ptr %sp21068, align 16
  %2831 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2830, i256 %b21122, ptr %arg.ecx.addr)
  %.not48831 = icmp eq i8 %2831, 0
  br i1 %.not48831, label %OP6160.PUSH32, label %return, !prof !6

OP6160.PUSH32:                                    ; preds = %OP6156.PUSH1
  store i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %sp21068, align 16
  %dup321129 = load i256, ptr %sp21035, align 16
  store i256 %dup321129, ptr %sp21085, align 16
  %2832 = add i256 %dup321129, 68
  store i256 %2832, ptr %sp21072, align 16
  %2833 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2832, i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %arg.ecx.addr)
  %.not48832 = icmp eq i8 %2833, 0
  br i1 %.not48832, label %OP6165.SWAP1, label %return, !prof !6

OP6165.SWAP1:                                     ; preds = %OP6160.PUSH32
  %swap.a21144 = load i256, ptr %sp21035, align 16
  %swap.b21146 = load i256, ptr %sp21031, align 16
  store i256 %swap.a21144, ptr %sp21031, align 16
  store i256 %swap.b21146, ptr %sp21035, align 16
  %mload.out.slot21150 = alloca i256, align 16
  %2834 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b21146, ptr %mload.out.slot21150, ptr %arg.ecx.addr)
  %.not48833 = icmp eq i8 %2834, 0
  br i1 %.not48833, label %OP6166.MLOAD.contd, label %return, !prof !6

OP6166.MLOAD.contd:                               ; preds = %OP6165.SWAP1
  %mload.out21151 = load i256, ptr %mload.out.slot21150, align 16
  %swap.b21157 = load i256, ptr %sp21031, align 16
  %2835 = sub i256 %swap.b21157, %mload.out21151
  store i256 100, ptr %sp21068, align 16
  %2836 = add i256 %2835, 100
  store i256 %2836, ptr %sp21031, align 16
  store i256 %mload.out21151, ptr %sp21035, align 16
  %2837 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21031, i8 16)
  %.not48834 = icmp eq i8 %2837, 0
  %spec.select36630 = select i1 %.not48834, i8 16, i8 %2837, !prof !6
  br label %return

OP6175.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54119 = add i64 %len.addr.357, 2
  %.pre54229 = add i64 %len.addr.357, 1
  br label %OP6175.JUMPDEST

OP6175.JUMPDEST:                                  ; preds = %OP6175.JUMPDEST.loopexit, %OP6137.PUSH20
  %.pre-phi54230 = phi i64 [ %.pre54229, %OP6175.JUMPDEST.loopexit ], [ %2817, %OP6137.PUSH20 ]
  %.pre-phi54120 = phi i64 [ %.pre54119, %OP6175.JUMPDEST.loopexit ], [ %2819, %OP6137.PUSH20 ]
  %len.addr.236 = phi i64 [ %len.addr.357, %OP6175.JUMPDEST.loopexit ], [ %len.addr.235, %OP6137.PUSH20 ]
  %sp21190 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.236
  %sp21192 = getelementptr i256, ptr %sp21190, i64 -1
  %dup221193 = load i256, ptr %sp21192, align 16
  %sp21194 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54230
  store i256 %dup221193, ptr %sp21194, align 16
  %2838 = and i256 %dup221193, 1461501637330902918203684832716283019655932542975
  store i256 %2838, ptr %sp21190, align 16
  %.not48835 = icmp eq i256 %2838, 0
  br i1 %.not48835, label %OP6181.PUSH1, label %OP6219.JUMPDEST

OP6181.PUSH1:                                     ; preds = %OP6175.JUMPDEST
  store i256 64, ptr %sp21190, align 16
  %mload.out.slot21209 = alloca i256, align 16
  %2839 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21209, ptr %arg.ecx.addr)
  %.not48836 = icmp eq i8 %2839, 0
  br i1 %.not48836, label %OP6182.MLOAD.contd, label %return, !prof !6

OP6182.MLOAD.contd:                               ; preds = %OP6181.PUSH1
  %mload.out21210 = load i256, ptr %mload.out.slot21209, align 16
  store i256 %mload.out21210, ptr %sp21190, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp21194, align 16
  %2840 = add i64 %len.addr.236, 3
  %sp21217 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54120
  store i256 %mload.out21210, ptr %sp21217, align 16
  %2841 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out21210, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48837 = icmp eq i8 %2841, 0
  br i1 %.not48837, label %OP6186.PUSH1, label %return, !prof !6

OP6186.PUSH1:                                     ; preds = %OP6182.MLOAD.contd
  store i256 4, ptr %sp21194, align 16
  %b21229 = load i256, ptr %sp21190, align 16
  %2842 = add i256 %b21229, 4
  store i256 %2842, ptr %sp21190, align 16
  store i256 %2842, ptr %sp21194, align 16
  %sp21240 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2840
  %2843 = add i256 %b21229, 36
  store i256 %2843, ptr %sp21217, align 16
  %sp21254 = getelementptr i256, ptr %sp21190, i64 4
  store i256 32, ptr %sp21240, align 16
  store i256 %2842, ptr %sp21254, align 16
  %2844 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2842, i256 32, ptr %arg.ecx.addr)
  %.not48838 = icmp eq i8 %2844, 0
  br i1 %.not48838, label %OP6197.PUSH1, label %return, !prof !6

OP6197.PUSH1:                                     ; preds = %OP6186.PUSH1
  store i256 50, ptr %sp21240, align 16
  %dup221274 = load i256, ptr %sp21217, align 16
  store i256 %dup221274, ptr %sp21254, align 16
  %2845 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup221274, i256 50, ptr %arg.ecx.addr)
  %.not48839 = icmp eq i8 %2845, 0
  br i1 %.not48839, label %OP6200.PUSH1, label %return, !prof !6

OP6200.PUSH1:                                     ; preds = %OP6197.PUSH1
  store i256 32, ptr %sp21240, align 16
  %b21287 = load i256, ptr %sp21217, align 16
  %2846 = add i256 %b21287, 32
  store i256 %2846, ptr %sp21217, align 16
  store i256 23250, ptr %sp21254, align 16
  %sp21296 = getelementptr i256, ptr %sp21190, i64 5
  store i256 50, ptr %sp21240, align 16
  store i256 %2846, ptr %sp21296, align 16
  %2847 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21240)
  %.not48840 = icmp eq i8 %2847, 0
  br i1 %.not48840, label %OP6207.PUSH1, label %return, !prof !6

OP6207.PUSH1:                                     ; preds = %OP6200.PUSH1
  store i256 64, ptr %sp21240, align 16
  %b21310 = load i256, ptr %sp21217, align 16
  %2848 = add i256 %b21310, 64
  store i256 %2848, ptr %sp21217, align 16
  %swap.b21316 = load i256, ptr %sp21190, align 16
  store i256 %2848, ptr %sp21190, align 16
  store i256 %swap.b21316, ptr %sp21217, align 16
  store i256 64, ptr %sp21194, align 16
  %mload.out.slot21324 = alloca i256, align 16
  %2849 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21324, ptr %arg.ecx.addr)
  %.not48841 = icmp eq i8 %2849, 0
  br i1 %.not48841, label %OP6213.MLOAD.contd, label %return, !prof !6

OP6213.MLOAD.contd:                               ; preds = %OP6207.PUSH1
  %mload.out21325 = load i256, ptr %mload.out.slot21324, align 16
  store i256 %mload.out21325, ptr %sp21194, align 16
  store i256 %mload.out21325, ptr %sp21217, align 16
  %swap.b21335 = load i256, ptr %sp21190, align 16
  store i256 %swap.b21335, ptr %sp21217, align 16
  %2850 = sub i256 %swap.b21335, %mload.out21325
  store i256 %2850, ptr %sp21190, align 16
  store i256 %mload.out21325, ptr %sp21194, align 16
  %2851 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21190, i8 16)
  %.not48842 = icmp eq i8 %2851, 0
  %spec.select36631 = select i1 %.not48842, i8 16, i8 %2851, !prof !6
  br label %return

OP6219.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6175.JUMPDEST
  %len.addr.237 = phi i64 [ %len.addr.236, %OP6175.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp21351 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.237
  store i256 2, ptr %sp21351, align 16
  %2852 = add i64 %len.addr.237, 2
  %sp21355 = getelementptr i256, ptr %sp21351, i64 1
  store i256 2, ptr %sp21355, align 16
  %2853 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21355, i8 17)
  %.not48843 = icmp eq i8 %2853, 0
  br i1 %.not48843, label %OP6223.PUSH32, label %return, !prof !6

OP6223.PUSH32:                                    ; preds = %OP6219.JUMPDEST
  %2854 = add i64 %len.addr.237, 3
  %sp21359 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2852
  %b21364 = load i256, ptr %sp21355, align 16
  %2855 = and i256 %b21364, -1461501637330902918203684832716283019655932542976
  %sp21369 = getelementptr i256, ptr %sp21351, i64 -1
  %dup421370 = load i256, ptr %sp21369, align 16
  %sp21371 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2854
  %sp21375 = getelementptr i256, ptr %sp21351, i64 4
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp21375, align 16
  %2856 = and i256 %dup421370, 1461501637330902918203684832716283019655932542975
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp21355, align 16
  %2857 = or disjoint i256 %2855, %2856
  %swap.b21407 = load i256, ptr %sp21351, align 16
  store i256 %2857, ptr %sp21351, align 16
  store i256 %2857, ptr %sp21359, align 16
  store i256 %swap.b21407, ptr %sp21371, align 16
  %2858 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21359, i8 17)
  %.not48844 = icmp eq i8 %2858, 0
  br i1 %.not48844, label %OP6237.PUSH1, label %return, !prof !6

OP6237.PUSH1:                                     ; preds = %OP6223.PUSH32
  store i256 64, ptr %sp21359, align 16
  %mload.out.slot21424 = alloca i256, align 16
  %2859 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21424, ptr %arg.ecx.addr)
  %.not48845 = icmp eq i8 %2859, 0
  br i1 %.not48845, label %OP6238.MLOAD.contd, label %return, !prof !6

OP6238.MLOAD.contd:                               ; preds = %OP6237.PUSH1
  %mload.out21425 = load i256, ptr %mload.out.slot21424, align 16
  %swap.b21431 = load i256, ptr %sp21351, align 16
  %b21436 = load i256, ptr %sp21355, align 16
  %2860 = and i256 %b21436, %swap.b21431
  store i256 %2860, ptr %sp21351, align 16
  store i256 -26029908708334496807964956971306928744521656465526554532991109795008921157522, ptr %sp21355, align 16
  store i256 0, ptr %sp21359, align 16
  store i256 %mload.out21425, ptr %sp21371, align 16
  %2861 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21351, i8 2)
  %.not48846 = icmp eq i8 %2861, 0
  br i1 %.not48846, label %OP6247.POP, label %return, !prof !6

OP6247.POP:                                       ; preds = %OP6238.MLOAD.contd
  %2862 = add i64 %len.addr.237, -2
  %sp21461 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2862
  %a21462 = load i256, ptr %sp21461, align 16
  br label %dynamic_jump_table.preheader

OP6249.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2000.JUMPDEST
  %len.addr.238 = phi i64 [ %961, %OP2000.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2863 = add i64 %len.addr.238, 1
  %sp21465 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.238
  store i256 14, ptr %sp21465, align 16
  %2864 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21465, i8 17)
  %.not48806 = icmp eq i8 %2864, 0
  br i1 %.not48806, label %OP6252.PUSH20, label %return, !prof !6

OP6252.PUSH20:                                    ; preds = %OP6249.JUMPDEST
  %2865 = add i64 %len.addr.238, 2
  %sp21469 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2863
  %b21474 = load i256, ptr %sp21465, align 16
  %contract.caller.addr21477 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller21478 = load i160, ptr %contract.caller.addr21477, align 16
  %2866 = tail call i160 @llvm.bswap.i160(i160 %contract.caller21478)
  %2867 = zext i160 %2866 to i256
  store i256 %2867, ptr %sp21469, align 16
  %2868 = trunc i256 %b21474 to i160
  %2869 = icmp eq i160 %2866, %2868
  %2870 = zext i1 %2869 to i256
  store i256 %2870, ptr %sp21465, align 16
  br i1 %2869, label %OP6296.JUMPDEST, label %OP6258.PUSH1

OP6258.PUSH1:                                     ; preds = %OP6252.PUSH20
  store i256 64, ptr %sp21465, align 16
  %mload.out.slot21494 = alloca i256, align 16
  %2871 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21494, ptr %arg.ecx.addr)
  %.not48807 = icmp eq i8 %2871, 0
  br i1 %.not48807, label %OP6259.MLOAD.contd, label %return, !prof !6

OP6259.MLOAD.contd:                               ; preds = %OP6258.PUSH1
  %mload.out21495 = load i256, ptr %mload.out.slot21494, align 16
  store i256 %mload.out21495, ptr %sp21465, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp21469, align 16
  %2872 = add i64 %len.addr.238, 3
  %sp21502 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2865
  store i256 %mload.out21495, ptr %sp21502, align 16
  %2873 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out21495, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48808 = icmp eq i8 %2873, 0
  br i1 %.not48808, label %OP6263.PUSH1, label %return, !prof !6

OP6263.PUSH1:                                     ; preds = %OP6259.MLOAD.contd
  %b21514 = load i256, ptr %sp21465, align 16
  %2874 = add i256 %b21514, 4
  store i256 %2874, ptr %sp21465, align 16
  store i256 %2874, ptr %sp21469, align 16
  %sp21525 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2872
  %2875 = add i256 %b21514, 36
  store i256 %2875, ptr %sp21502, align 16
  %sp21539 = getelementptr i256, ptr %sp21465, i64 4
  store i256 32, ptr %sp21525, align 16
  store i256 %2874, ptr %sp21539, align 16
  %2876 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2874, i256 32, ptr %arg.ecx.addr)
  %.not48809 = icmp eq i8 %2876, 0
  br i1 %.not48809, label %OP6274.PUSH1, label %return, !prof !6

OP6274.PUSH1:                                     ; preds = %OP6263.PUSH1
  store i256 36, ptr %sp21525, align 16
  %dup221559 = load i256, ptr %sp21502, align 16
  store i256 %dup221559, ptr %sp21539, align 16
  %2877 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup221559, i256 36, ptr %arg.ecx.addr)
  %.not48810 = icmp eq i8 %2877, 0
  br i1 %.not48810, label %OP6277.PUSH1, label %return, !prof !6

OP6277.PUSH1:                                     ; preds = %OP6274.PUSH1
  %b21572 = load i256, ptr %sp21502, align 16
  %2878 = add i256 %b21572, 32
  store i256 %2878, ptr %sp21502, align 16
  store i256 22768, ptr %sp21539, align 16
  %sp21581 = getelementptr i256, ptr %sp21465, i64 5
  store i256 36, ptr %sp21525, align 16
  store i256 %2878, ptr %sp21581, align 16
  %2879 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21525)
  %.not48811 = icmp eq i8 %2879, 0
  br i1 %.not48811, label %OP6284.PUSH1, label %return, !prof !6

OP6284.PUSH1:                                     ; preds = %OP6277.PUSH1
  store i256 64, ptr %sp21525, align 16
  %b21595 = load i256, ptr %sp21502, align 16
  %2880 = add i256 %b21595, 64
  %swap.b21601 = load i256, ptr %sp21465, align 16
  store i256 %2880, ptr %sp21465, align 16
  store i256 %swap.b21601, ptr %sp21502, align 16
  store i256 64, ptr %sp21469, align 16
  %mload.out.slot21609 = alloca i256, align 16
  %2881 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21609, ptr %arg.ecx.addr)
  %.not48812 = icmp eq i8 %2881, 0
  br i1 %.not48812, label %OP6290.MLOAD.contd, label %return, !prof !6

OP6290.MLOAD.contd:                               ; preds = %OP6284.PUSH1
  %mload.out21610 = load i256, ptr %mload.out.slot21609, align 16
  %swap.b21620 = load i256, ptr %sp21465, align 16
  store i256 %swap.b21620, ptr %sp21502, align 16
  %2882 = sub i256 %swap.b21620, %mload.out21610
  store i256 %2882, ptr %sp21465, align 16
  store i256 %mload.out21610, ptr %sp21469, align 16
  %2883 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21465, i8 16)
  %.not48813 = icmp eq i8 %2883, 0
  %spec.select36632 = select i1 %.not48813, i8 16, i8 %2883, !prof !6
  br label %return

OP6296.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6252.PUSH20
  %len.addr.239 = phi i64 [ %len.addr.238, %OP6252.PUSH20 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp21636 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.239
  store i256 13459, ptr %sp21636, align 16
  %sp21638 = getelementptr i256, ptr %sp21636, i64 1
  %sp21640 = getelementptr i256, ptr %sp21636, i64 -3
  %dup521641 = load i256, ptr %sp21640, align 16
  %sp21642 = getelementptr i256, ptr %sp21636, i64 2
  %2884 = and i256 %dup521641, 1461501637330902918203684832716283019655932542975
  store i256 %2884, ptr %sp21638, align 16
  %sp21650 = getelementptr i256, ptr %sp21636, i64 -2
  %dup421651 = load i256, ptr %sp21650, align 16
  store i256 %dup421651, ptr %sp21642, align 16
  %2885 = add i64 %len.addr.239, 4
  %sp21654 = getelementptr i256, ptr %sp21636, i64 -1
  %dup421655 = load i256, ptr %sp21654, align 16
  %sp21656 = getelementptr i256, ptr %sp21636, i64 3
  store i256 %dup421655, ptr %sp21656, align 16
  br label %OP8750.JUMPDEST

OP6305.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9869.MLOAD.contd, %OP9845.MLOAD.contd, %OP9589.MLOAD.contd
  %len.addr.240 = phi i64 [ %5008, %OP9869.MLOAD.contd ], [ %4999, %OP9845.MLOAD.contd ], [ %4732, %OP9589.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %2886 = add i64 %len.addr.240, -4
  %sp21663 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2886
  %a21664 = load i256, ptr %sp21663, align 16
  br label %dynamic_jump_table.preheader

OP6310.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2887 = add i64 %len.addr.357, 1
  %sp21667 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1, ptr %sp21667, align 16
  %2888 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21667, i8 17)
  %.not48090 = icmp eq i8 %2888, 0
  br i1 %.not48090, label %OP6313.PUSH21, label %return, !prof !6

OP6313.PUSH21:                                    ; preds = %OP6310.JUMPDEST
  %2889 = add i64 %len.addr.357, 2
  %sp21671 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2887
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp21671, align 16
  %swap.b21676 = load i256, ptr %sp21667, align 16
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp21667, align 16
  store i256 %swap.b21676, ptr %sp21671, align 16
  %2890 = lshr i256 %swap.b21676, 160
  store i256 %2890, ptr %sp21667, align 16
  store i256 255, ptr %sp21671, align 16
  %2891 = and i256 %swap.b21676, 372682917519380244141939632342652170012262798458880
  %2892 = icmp eq i256 %2891, 0
  %2893 = zext i1 %2892 to i256
  store i256 %2893, ptr %sp21667, align 16
  br i1 %2892, label %OP6352.JUMPDEST, label %OP6321.PUSH1

OP6321.PUSH1:                                     ; preds = %OP6313.PUSH21
  store i256 64, ptr %sp21667, align 16
  store i256 64, ptr %sp21671, align 16
  %mload.out.slot21707 = alloca i256, align 16
  %2894 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21707, ptr %arg.ecx.addr)
  %.not48091 = icmp eq i8 %2894, 0
  br i1 %.not48091, label %OP6323.MLOAD.contd, label %return, !prof !6

OP6323.MLOAD.contd:                               ; preds = %OP6321.PUSH1
  %mload.out21708 = load i256, ptr %mload.out.slot21707, align 16
  store i256 %mload.out21708, ptr %sp21671, align 16
  %sp21711 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2889
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp21711, align 16
  %sp21715 = getelementptr i256, ptr %sp21667, i64 3
  store i256 %mload.out21708, ptr %sp21715, align 16
  %2895 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out21708, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48092 = icmp eq i8 %2895, 0
  br i1 %.not48092, label %OP6327.PUSH1, label %return, !prof !6

OP6327.PUSH1:                                     ; preds = %OP6323.MLOAD.contd
  store i256 32, ptr %sp21711, align 16
  store i256 4, ptr %sp21715, align 16
  %dup321727 = load i256, ptr %sp21671, align 16
  %sp21728 = getelementptr i256, ptr %sp21667, i64 4
  store i256 %dup321727, ptr %sp21728, align 16
  %2896 = add i256 %dup321727, 4
  store i256 %2896, ptr %sp21715, align 16
  %2897 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2896, i256 32, ptr %arg.ecx.addr)
  %.not48093 = icmp eq i8 %2897, 0
  br i1 %.not48093, label %OP6332.PUSH1, label %return, !prof !6

OP6332.PUSH1:                                     ; preds = %OP6327.PUSH1
  store i256 16, ptr %sp21711, align 16
  store i256 36, ptr %sp21715, align 16
  %dup321746 = load i256, ptr %sp21671, align 16
  store i256 %dup321746, ptr %sp21728, align 16
  %2898 = add i256 %dup321746, 36
  store i256 %2898, ptr %sp21715, align 16
  %2899 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2898, i256 16, ptr %arg.ecx.addr)
  %.not48094 = icmp eq i8 %2899, 0
  br i1 %.not48094, label %OP6337.PUSH32, label %return, !prof !6

OP6337.PUSH32:                                    ; preds = %OP6332.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp21711, align 16
  store i256 68, ptr %sp21715, align 16
  %dup321765 = load i256, ptr %sp21671, align 16
  store i256 %dup321765, ptr %sp21728, align 16
  %2900 = add i256 %dup321765, 68
  store i256 %2900, ptr %sp21715, align 16
  %2901 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2900, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48095 = icmp eq i8 %2901, 0
  br i1 %.not48095, label %OP6342.SWAP1, label %return, !prof !6

OP6342.SWAP1:                                     ; preds = %OP6337.PUSH32
  %swap.a21780 = load i256, ptr %sp21671, align 16
  %swap.b21782 = load i256, ptr %sp21667, align 16
  store i256 %swap.a21780, ptr %sp21667, align 16
  store i256 %swap.b21782, ptr %sp21671, align 16
  %mload.out.slot21786 = alloca i256, align 16
  %2902 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b21782, ptr %mload.out.slot21786, ptr %arg.ecx.addr)
  %.not48096 = icmp eq i8 %2902, 0
  br i1 %.not48096, label %OP6343.MLOAD.contd, label %return, !prof !6

OP6343.MLOAD.contd:                               ; preds = %OP6342.SWAP1
  %mload.out21787 = load i256, ptr %mload.out.slot21786, align 16
  store i256 %mload.out21787, ptr %sp21671, align 16
  %swap.b21793 = load i256, ptr %sp21667, align 16
  store i256 %mload.out21787, ptr %sp21667, align 16
  store i256 %swap.b21793, ptr %sp21671, align 16
  store i256 %mload.out21787, ptr %sp21711, align 16
  store i256 %mload.out21787, ptr %sp21671, align 16
  store i256 %swap.b21793, ptr %sp21711, align 16
  %2903 = sub i256 %swap.b21793, %mload.out21787
  store i256 %2903, ptr %sp21671, align 16
  store i256 100, ptr %sp21711, align 16
  %2904 = add i256 %2903, 100
  store i256 %2904, ptr %sp21671, align 16
  store i256 %2904, ptr %sp21667, align 16
  store i256 %mload.out21787, ptr %sp21671, align 16
  %2905 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21667, i8 16)
  %.not48097 = icmp eq i8 %2905, 0
  %spec.select36633 = select i1 %.not48097, i8 16, i8 %2905, !prof !6
  br label %return

OP6352.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6313.PUSH21
  %sp21826 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 13459, ptr %sp21826, align 16
  %sp21828 = getelementptr i256, ptr %sp21826, i64 -3
  %dup421829 = load i256, ptr %sp21828, align 16
  %sp21830 = getelementptr i256, ptr %sp21826, i64 1
  store i256 %dup421829, ptr %sp21830, align 16
  %sp21832 = getelementptr i256, ptr %sp21826, i64 -2
  %dup421833 = load i256, ptr %sp21832, align 16
  %sp21834 = getelementptr i256, ptr %sp21826, i64 2
  store i256 %dup421833, ptr %sp21834, align 16
  %2906 = add i64 %len.addr.357, 4
  %sp21836 = getelementptr i256, ptr %sp21826, i64 -1
  %dup421837 = load i256, ptr %sp21836, align 16
  %sp21838 = getelementptr i256, ptr %sp21826, i64 3
  store i256 %dup421837, ptr %sp21838, align 16
  br label %OP8802.JUMPDEST

OP6359.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2160.JUMPDEST
  %len.addr.242 = phi i64 [ %1047, %OP2160.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2907 = add i64 %len.addr.242, 1
  %sp21842 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.242
  store i256 2, ptr %sp21842, align 16
  %2908 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21842, i8 17)
  %.not49028 = icmp eq i8 %2908, 0
  br i1 %.not49028, label %OP6362.PUSH20, label %return, !prof !6

OP6362.PUSH20:                                    ; preds = %OP6359.JUMPDEST
  %sp21846 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2907
  %b21851 = load i256, ptr %sp21842, align 16
  %2909 = and i256 %b21851, 1461501637330902918203684832716283019655932542975
  store i256 %2909, ptr %sp21842, align 16
  %sp21854 = getelementptr i256, ptr %sp21842, i64 -1
  %dup221855 = load i256, ptr %sp21854, align 16
  store i256 %dup221855, ptr %sp21846, align 16
  br label %dynamic_jump_table.preheader

OP6366.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2910 = add i64 %len.addr.357, 1
  %sp21862 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1, ptr %sp21862, align 16
  %2911 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21862, i8 17)
  %.not48082 = icmp eq i8 %2911, 0
  br i1 %.not48082, label %OP6369.PUSH21, label %return, !prof !6

OP6369.PUSH21:                                    ; preds = %OP6366.JUMPDEST
  %2912 = add i64 %len.addr.357, 2
  %sp21866 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2910
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp21866, align 16
  %swap.b21871 = load i256, ptr %sp21862, align 16
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp21862, align 16
  store i256 %swap.b21871, ptr %sp21866, align 16
  %2913 = lshr i256 %swap.b21871, 160
  store i256 %2913, ptr %sp21862, align 16
  store i256 255, ptr %sp21866, align 16
  %2914 = and i256 %swap.b21871, 372682917519380244141939632342652170012262798458880
  %2915 = icmp eq i256 %2914, 0
  %2916 = zext i1 %2915 to i256
  store i256 %2916, ptr %sp21862, align 16
  br i1 %2915, label %OP6408.JUMPDEST, label %OP6377.PUSH1

OP6377.PUSH1:                                     ; preds = %OP6369.PUSH21
  store i256 64, ptr %sp21862, align 16
  store i256 64, ptr %sp21866, align 16
  %mload.out.slot21902 = alloca i256, align 16
  %2917 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot21902, ptr %arg.ecx.addr)
  %.not48083 = icmp eq i8 %2917, 0
  br i1 %.not48083, label %OP6379.MLOAD.contd, label %return, !prof !6

OP6379.MLOAD.contd:                               ; preds = %OP6377.PUSH1
  %mload.out21903 = load i256, ptr %mload.out.slot21902, align 16
  store i256 %mload.out21903, ptr %sp21866, align 16
  %sp21906 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2912
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp21906, align 16
  %sp21910 = getelementptr i256, ptr %sp21862, i64 3
  store i256 %mload.out21903, ptr %sp21910, align 16
  %2918 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out21903, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48084 = icmp eq i8 %2918, 0
  br i1 %.not48084, label %OP6383.PUSH1, label %return, !prof !6

OP6383.PUSH1:                                     ; preds = %OP6379.MLOAD.contd
  store i256 32, ptr %sp21906, align 16
  store i256 4, ptr %sp21910, align 16
  %dup321922 = load i256, ptr %sp21866, align 16
  %sp21923 = getelementptr i256, ptr %sp21862, i64 4
  store i256 %dup321922, ptr %sp21923, align 16
  %2919 = add i256 %dup321922, 4
  store i256 %2919, ptr %sp21910, align 16
  %2920 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2919, i256 32, ptr %arg.ecx.addr)
  %.not48085 = icmp eq i8 %2920, 0
  br i1 %.not48085, label %OP6388.PUSH1, label %return, !prof !6

OP6388.PUSH1:                                     ; preds = %OP6383.PUSH1
  store i256 16, ptr %sp21906, align 16
  store i256 36, ptr %sp21910, align 16
  %dup321941 = load i256, ptr %sp21866, align 16
  store i256 %dup321941, ptr %sp21923, align 16
  %2921 = add i256 %dup321941, 36
  store i256 %2921, ptr %sp21910, align 16
  %2922 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2921, i256 16, ptr %arg.ecx.addr)
  %.not48086 = icmp eq i8 %2922, 0
  br i1 %.not48086, label %OP6393.PUSH32, label %return, !prof !6

OP6393.PUSH32:                                    ; preds = %OP6388.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp21906, align 16
  store i256 68, ptr %sp21910, align 16
  %dup321960 = load i256, ptr %sp21866, align 16
  store i256 %dup321960, ptr %sp21923, align 16
  %2923 = add i256 %dup321960, 68
  store i256 %2923, ptr %sp21910, align 16
  %2924 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2923, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48087 = icmp eq i8 %2924, 0
  br i1 %.not48087, label %OP6398.SWAP1, label %return, !prof !6

OP6398.SWAP1:                                     ; preds = %OP6393.PUSH32
  %swap.a21975 = load i256, ptr %sp21866, align 16
  %swap.b21977 = load i256, ptr %sp21862, align 16
  store i256 %swap.a21975, ptr %sp21862, align 16
  store i256 %swap.b21977, ptr %sp21866, align 16
  %mload.out.slot21981 = alloca i256, align 16
  %2925 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b21977, ptr %mload.out.slot21981, ptr %arg.ecx.addr)
  %.not48088 = icmp eq i8 %2925, 0
  br i1 %.not48088, label %OP6399.MLOAD.contd, label %return, !prof !6

OP6399.MLOAD.contd:                               ; preds = %OP6398.SWAP1
  %mload.out21982 = load i256, ptr %mload.out.slot21981, align 16
  store i256 %mload.out21982, ptr %sp21866, align 16
  %swap.b21988 = load i256, ptr %sp21862, align 16
  store i256 %mload.out21982, ptr %sp21862, align 16
  store i256 %swap.b21988, ptr %sp21866, align 16
  store i256 %mload.out21982, ptr %sp21906, align 16
  store i256 %mload.out21982, ptr %sp21866, align 16
  store i256 %swap.b21988, ptr %sp21906, align 16
  %2926 = sub i256 %swap.b21988, %mload.out21982
  store i256 %2926, ptr %sp21866, align 16
  store i256 100, ptr %sp21906, align 16
  %2927 = add i256 %2926, 100
  store i256 %2927, ptr %sp21866, align 16
  store i256 %2927, ptr %sp21862, align 16
  store i256 %mload.out21982, ptr %sp21866, align 16
  %2928 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp21862, i8 16)
  %.not48089 = icmp eq i8 %2928, 0
  %spec.select36634 = select i1 %.not48089, i8 16, i8 %2928, !prof !6
  br label %return

OP6408.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6369.PUSH21
  %2929 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp22021 = getelementptr i256, ptr %2929, i64 -7
  %dup722022 = load i256, ptr %sp22021, align 16
  store i256 %dup722022, ptr %2929, align 16
  %sp22025 = getelementptr i256, ptr %2929, i64 1
  store i256 13789, ptr %sp22025, align 16
  %2930 = add i64 %len.addr.357, 3
  %sp22029 = getelementptr i256, ptr %2929, i64 2
  store i256 %dup722022, ptr %sp22029, align 16
  br label %OP7491.JUMPDEST

OP6414.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2931 = add i64 %len.addr.357, -1
  %sp22033 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2931
  %a22034 = load i256, ptr %sp22033, align 16
  %2932 = icmp eq i256 %a22034, 0
  %2933 = zext i1 %2932 to i256
  store i256 %2933, ptr %sp22033, align 16
  br i1 %2932, label %OP6456.JUMPDEST, label %OP6418.PUSH1

OP6418.PUSH1:                                     ; preds = %OP6414.JUMPDEST
  store i256 64, ptr %sp22033, align 16
  %mload.out.slot22044 = alloca i256, align 16
  %2934 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot22044, ptr %arg.ecx.addr)
  %.not48075 = icmp eq i8 %2934, 0
  br i1 %.not48075, label %OP6419.MLOAD.contd, label %return, !prof !6

OP6419.MLOAD.contd:                               ; preds = %OP6418.PUSH1
  %mload.out22045 = load i256, ptr %mload.out.slot22044, align 16
  store i256 %mload.out22045, ptr %sp22033, align 16
  %2935 = add i64 %len.addr.357, 1
  %sp22048 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp22048, align 16
  %2936 = add i64 %len.addr.357, 2
  %sp22050 = getelementptr i256, ptr %sp22048, i64 -1
  %sp22052 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2935
  store i256 %mload.out22045, ptr %sp22052, align 16
  %2937 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out22045, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48076 = icmp eq i8 %2937, 0
  br i1 %.not48076, label %OP6423.PUSH1, label %return, !prof !6

OP6423.PUSH1:                                     ; preds = %OP6419.MLOAD.contd
  store i256 4, ptr %sp22048, align 16
  %b22064 = load i256, ptr %sp22033, align 16
  %2938 = add i256 %b22064, 4
  store i256 %2938, ptr %sp22033, align 16
  store i256 %2938, ptr %sp22048, align 16
  store i256 %2938, ptr %sp22052, align 16
  %sp22075 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2936
  store i256 32, ptr %sp22075, align 16
  %2939 = add i256 %b22064, 36
  store i256 %2939, ptr %sp22052, align 16
  store i256 %2938, ptr %sp22075, align 16
  %sp22089 = getelementptr i256, ptr %sp22048, i64 3
  store i256 %2939, ptr %sp22089, align 16
  store i256 32, ptr %sp22075, align 16
  store i256 %2938, ptr %sp22089, align 16
  %2940 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2938, i256 32, ptr %arg.ecx.addr)
  %.not48077 = icmp eq i8 %2940, 0
  br i1 %.not48077, label %OP6434.PUSH1, label %return, !prof !6

OP6434.PUSH1:                                     ; preds = %OP6423.PUSH1
  store i256 37, ptr %sp22075, align 16
  %dup222109 = load i256, ptr %sp22052, align 16
  store i256 %dup222109, ptr %sp22089, align 16
  %2941 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup222109, i256 37, ptr %arg.ecx.addr)
  %.not48078 = icmp eq i8 %2941, 0
  br i1 %.not48078, label %OP6437.PUSH1, label %return, !prof !6

OP6437.PUSH1:                                     ; preds = %OP6434.PUSH1
  store i256 32, ptr %sp22075, align 16
  %b22122 = load i256, ptr %sp22052, align 16
  %2942 = add i256 %b22122, 32
  store i256 %2942, ptr %sp22052, align 16
  store i256 %2942, ptr %sp22075, align 16
  store i256 23300, ptr %sp22089, align 16
  %sp22131 = getelementptr i256, ptr %sp22048, i64 4
  store i256 37, ptr %sp22131, align 16
  store i256 37, ptr %sp22075, align 16
  store i256 %2942, ptr %sp22131, align 16
  %2943 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22075)
  %.not48079 = icmp eq i8 %2943, 0
  br i1 %.not48079, label %OP6444.PUSH1, label %return, !prof !6

OP6444.PUSH1:                                     ; preds = %OP6437.PUSH1
  store i256 64, ptr %sp22075, align 16
  %b22145 = load i256, ptr %sp22052, align 16
  %2944 = add i256 %b22145, 64
  store i256 %2944, ptr %sp22052, align 16
  %swap.b22151 = load i256, ptr %sp22050, align 16
  store i256 %2944, ptr %sp22050, align 16
  store i256 %swap.b22151, ptr %sp22052, align 16
  store i256 64, ptr %sp22048, align 16
  %mload.out.slot22159 = alloca i256, align 16
  %2945 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot22159, ptr %arg.ecx.addr)
  %.not48080 = icmp eq i8 %2945, 0
  br i1 %.not48080, label %OP6450.MLOAD.contd, label %return, !prof !6

OP6450.MLOAD.contd:                               ; preds = %OP6444.PUSH1
  %mload.out22160 = load i256, ptr %mload.out.slot22159, align 16
  store i256 %mload.out22160, ptr %sp22048, align 16
  store i256 %mload.out22160, ptr %sp22052, align 16
  %swap.b22170 = load i256, ptr %sp22050, align 16
  store i256 %mload.out22160, ptr %sp22050, align 16
  store i256 %swap.b22170, ptr %sp22052, align 16
  %2946 = sub i256 %swap.b22170, %mload.out22160
  store i256 %2946, ptr %sp22048, align 16
  store i256 %2946, ptr %sp22050, align 16
  store i256 %mload.out22160, ptr %sp22048, align 16
  %2947 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22050, i8 16)
  %.not48081 = icmp eq i8 %2947, 0
  %spec.select36635 = select i1 %.not48081, i8 16, i8 %2947, !prof !6
  br label %return

OP6456.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6414.JUMPDEST
  %len.addr.244 = phi i64 [ %2931, %OP6414.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2948 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.244
  %sp22186 = getelementptr i256, ptr %2948, i64 -7
  %dup722187 = load i256, ptr %sp22186, align 16
  store i256 %dup722187, ptr %2948, align 16
  %sp22190 = getelementptr i256, ptr %2948, i64 1
  store i256 13885, ptr %sp22190, align 16
  %2949 = add i64 %len.addr.244, 3
  %sp22194 = getelementptr i256, ptr %2948, i64 2
  store i256 %dup722187, ptr %sp22194, align 16
  br label %OP7491.JUMPDEST

OP6462.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2950 = add i64 %len.addr.357, -1
  %sp22198 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2950
  %a22199 = load i256, ptr %sp22198, align 16
  %2951 = icmp eq i256 %a22199, 0
  %2952 = zext i1 %2951 to i256
  store i256 %2952, ptr %sp22198, align 16
  br i1 %2951, label %OP6504.JUMPDEST, label %OP6466.PUSH1

OP6466.PUSH1:                                     ; preds = %OP6462.JUMPDEST
  store i256 64, ptr %sp22198, align 16
  %mload.out.slot22209 = alloca i256, align 16
  %2953 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot22209, ptr %arg.ecx.addr)
  %.not48068 = icmp eq i8 %2953, 0
  br i1 %.not48068, label %OP6467.MLOAD.contd, label %return, !prof !6

OP6467.MLOAD.contd:                               ; preds = %OP6466.PUSH1
  %mload.out22210 = load i256, ptr %mload.out.slot22209, align 16
  store i256 %mload.out22210, ptr %sp22198, align 16
  %2954 = add i64 %len.addr.357, 1
  %sp22213 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp22213, align 16
  %2955 = add i64 %len.addr.357, 2
  %sp22215 = getelementptr i256, ptr %sp22213, i64 -1
  %sp22217 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2954
  store i256 %mload.out22210, ptr %sp22217, align 16
  %2956 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out22210, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48069 = icmp eq i8 %2956, 0
  br i1 %.not48069, label %OP6471.PUSH1, label %return, !prof !6

OP6471.PUSH1:                                     ; preds = %OP6467.MLOAD.contd
  store i256 4, ptr %sp22213, align 16
  %b22229 = load i256, ptr %sp22198, align 16
  %2957 = add i256 %b22229, 4
  store i256 %2957, ptr %sp22198, align 16
  store i256 %2957, ptr %sp22213, align 16
  store i256 %2957, ptr %sp22217, align 16
  %sp22240 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2955
  store i256 32, ptr %sp22240, align 16
  %2958 = add i256 %b22229, 36
  store i256 %2958, ptr %sp22217, align 16
  store i256 %2957, ptr %sp22240, align 16
  %sp22254 = getelementptr i256, ptr %sp22213, i64 3
  store i256 %2958, ptr %sp22254, align 16
  store i256 32, ptr %sp22240, align 16
  store i256 %2957, ptr %sp22254, align 16
  %2959 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2957, i256 32, ptr %arg.ecx.addr)
  %.not48070 = icmp eq i8 %2959, 0
  br i1 %.not48070, label %OP6482.PUSH1, label %return, !prof !6

OP6482.PUSH1:                                     ; preds = %OP6471.PUSH1
  store i256 37, ptr %sp22240, align 16
  %dup222274 = load i256, ptr %sp22217, align 16
  store i256 %dup222274, ptr %sp22254, align 16
  %2960 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup222274, i256 37, ptr %arg.ecx.addr)
  %.not48071 = icmp eq i8 %2960, 0
  br i1 %.not48071, label %OP6485.PUSH1, label %return, !prof !6

OP6485.PUSH1:                                     ; preds = %OP6482.PUSH1
  store i256 32, ptr %sp22240, align 16
  %b22287 = load i256, ptr %sp22217, align 16
  %2961 = add i256 %b22287, 32
  store i256 %2961, ptr %sp22217, align 16
  store i256 %2961, ptr %sp22240, align 16
  store i256 23300, ptr %sp22254, align 16
  %sp22296 = getelementptr i256, ptr %sp22213, i64 4
  store i256 37, ptr %sp22296, align 16
  store i256 37, ptr %sp22240, align 16
  store i256 %2961, ptr %sp22296, align 16
  %2962 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22240)
  %.not48072 = icmp eq i8 %2962, 0
  br i1 %.not48072, label %OP6492.PUSH1, label %return, !prof !6

OP6492.PUSH1:                                     ; preds = %OP6485.PUSH1
  store i256 64, ptr %sp22240, align 16
  %b22310 = load i256, ptr %sp22217, align 16
  %2963 = add i256 %b22310, 64
  store i256 %2963, ptr %sp22217, align 16
  %swap.b22316 = load i256, ptr %sp22215, align 16
  store i256 %2963, ptr %sp22215, align 16
  store i256 %swap.b22316, ptr %sp22217, align 16
  store i256 64, ptr %sp22213, align 16
  %mload.out.slot22324 = alloca i256, align 16
  %2964 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot22324, ptr %arg.ecx.addr)
  %.not48073 = icmp eq i8 %2964, 0
  br i1 %.not48073, label %OP6498.MLOAD.contd, label %return, !prof !6

OP6498.MLOAD.contd:                               ; preds = %OP6492.PUSH1
  %mload.out22325 = load i256, ptr %mload.out.slot22324, align 16
  store i256 %mload.out22325, ptr %sp22213, align 16
  store i256 %mload.out22325, ptr %sp22217, align 16
  %swap.b22335 = load i256, ptr %sp22215, align 16
  store i256 %mload.out22325, ptr %sp22215, align 16
  store i256 %swap.b22335, ptr %sp22217, align 16
  %2965 = sub i256 %swap.b22335, %mload.out22325
  store i256 %2965, ptr %sp22213, align 16
  store i256 %2965, ptr %sp22215, align 16
  store i256 %mload.out22325, ptr %sp22213, align 16
  %2966 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22215, i8 16)
  %.not48074 = icmp eq i8 %2966, 0
  %spec.select36636 = select i1 %.not48074, i8 16, i8 %2966, !prof !6
  br label %return

OP6504.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6462.JUMPDEST
  %len.addr.245 = phi i64 [ %2950, %OP6462.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp22351 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.245
  store i256 11631, ptr %sp22351, align 16
  %sp22353 = getelementptr i256, ptr %sp22351, i64 -9
  %dup1022354 = load i256, ptr %sp22353, align 16
  %sp22355 = getelementptr i256, ptr %sp22351, i64 1
  store i256 %dup1022354, ptr %sp22355, align 16
  %sp22357 = getelementptr i256, ptr %sp22351, i64 -8
  %dup1022358 = load i256, ptr %sp22357, align 16
  %sp22359 = getelementptr i256, ptr %sp22351, i64 2
  store i256 %dup1022358, ptr %sp22359, align 16
  %sp22361 = getelementptr i256, ptr %sp22351, i64 -7
  %dup1022362 = load i256, ptr %sp22361, align 16
  %sp22363 = getelementptr i256, ptr %sp22351, i64 3
  store i256 %dup1022362, ptr %sp22363, align 16
  %sp22365 = getelementptr i256, ptr %sp22351, i64 -6
  %dup1022366 = load i256, ptr %sp22365, align 16
  %sp22367 = getelementptr i256, ptr %sp22351, i64 4
  store i256 %dup1022366, ptr %sp22367, align 16
  %sp22369 = getelementptr i256, ptr %sp22351, i64 -5
  %dup1022370 = load i256, ptr %sp22369, align 16
  %sp22371 = getelementptr i256, ptr %sp22351, i64 5
  store i256 %dup1022370, ptr %sp22371, align 16
  %sp22373 = getelementptr i256, ptr %sp22351, i64 -4
  %dup1022374 = load i256, ptr %sp22373, align 16
  %sp22375 = getelementptr i256, ptr %sp22351, i64 6
  store i256 %dup1022374, ptr %sp22375, align 16
  %2967 = add i64 %len.addr.245, 8
  %sp22377 = getelementptr i256, ptr %sp22351, i64 -3
  %dup1022378 = load i256, ptr %sp22377, align 16
  %sp22379 = getelementptr i256, ptr %sp22351, i64 7
  store i256 %dup1022378, ptr %sp22379, align 16
  br label %OP8909.JUMPDEST

OP6515.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2342.JUMPDEST
  %len.addr.246 = phi i64 [ %1151, %OP2342.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2968 = add i64 %len.addr.246, 1
  %sp22383 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.246
  store i256 1, ptr %sp22383, align 16
  %2969 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22383, i8 17)
  %.not48982 = icmp eq i8 %2969, 0
  br i1 %.not48982, label %OP6518.PUSH21, label %return, !prof !6

OP6518.PUSH21:                                    ; preds = %OP6515.JUMPDEST
  %2970 = add i64 %len.addr.246, 2
  %sp22387 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2968
  %swap.b22392 = load i256, ptr %sp22383, align 16
  store i256 255, ptr %sp22387, align 16
  %2971 = and i256 %swap.b22392, 372682917519380244141939632342652170012262798458880
  %2972 = icmp eq i256 %2971, 0
  %2973 = zext i1 %2972 to i256
  store i256 %2973, ptr %sp22383, align 16
  br i1 %2972, label %OP6557.JUMPDEST, label %OP6526.PUSH1

OP6526.PUSH1:                                     ; preds = %OP6518.PUSH21
  store i256 64, ptr %sp22383, align 16
  store i256 64, ptr %sp22387, align 16
  %mload.out.slot22423 = alloca i256, align 16
  %2974 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot22423, ptr %arg.ecx.addr)
  %.not48983 = icmp eq i8 %2974, 0
  br i1 %.not48983, label %OP6528.MLOAD.contd, label %return, !prof !6

OP6528.MLOAD.contd:                               ; preds = %OP6526.PUSH1
  %mload.out22424 = load i256, ptr %mload.out.slot22423, align 16
  store i256 %mload.out22424, ptr %sp22387, align 16
  %sp22427 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2970
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp22427, align 16
  %sp22431 = getelementptr i256, ptr %sp22383, i64 3
  store i256 %mload.out22424, ptr %sp22431, align 16
  %2975 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out22424, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48984 = icmp eq i8 %2975, 0
  br i1 %.not48984, label %OP6532.PUSH1, label %return, !prof !6

OP6532.PUSH1:                                     ; preds = %OP6528.MLOAD.contd
  store i256 32, ptr %sp22427, align 16
  %dup322443 = load i256, ptr %sp22387, align 16
  %sp22444 = getelementptr i256, ptr %sp22383, i64 4
  store i256 %dup322443, ptr %sp22444, align 16
  %2976 = add i256 %dup322443, 4
  store i256 %2976, ptr %sp22431, align 16
  %2977 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2976, i256 32, ptr %arg.ecx.addr)
  %.not48985 = icmp eq i8 %2977, 0
  br i1 %.not48985, label %OP6537.PUSH1, label %return, !prof !6

OP6537.PUSH1:                                     ; preds = %OP6532.PUSH1
  store i256 16, ptr %sp22427, align 16
  %dup322462 = load i256, ptr %sp22387, align 16
  store i256 %dup322462, ptr %sp22444, align 16
  %2978 = add i256 %dup322462, 36
  store i256 %2978, ptr %sp22431, align 16
  %2979 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2978, i256 16, ptr %arg.ecx.addr)
  %.not48986 = icmp eq i8 %2979, 0
  br i1 %.not48986, label %OP6542.PUSH32, label %return, !prof !6

OP6542.PUSH32:                                    ; preds = %OP6537.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp22427, align 16
  %dup322481 = load i256, ptr %sp22387, align 16
  store i256 %dup322481, ptr %sp22444, align 16
  %2980 = add i256 %dup322481, 68
  store i256 %2980, ptr %sp22431, align 16
  %2981 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %2980, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48987 = icmp eq i8 %2981, 0
  br i1 %.not48987, label %OP6547.SWAP1, label %return, !prof !6

OP6547.SWAP1:                                     ; preds = %OP6542.PUSH32
  %swap.a22496 = load i256, ptr %sp22387, align 16
  %swap.b22498 = load i256, ptr %sp22383, align 16
  store i256 %swap.a22496, ptr %sp22383, align 16
  store i256 %swap.b22498, ptr %sp22387, align 16
  %mload.out.slot22502 = alloca i256, align 16
  %2982 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b22498, ptr %mload.out.slot22502, ptr %arg.ecx.addr)
  %.not48988 = icmp eq i8 %2982, 0
  br i1 %.not48988, label %OP6548.MLOAD.contd, label %return, !prof !6

OP6548.MLOAD.contd:                               ; preds = %OP6547.SWAP1
  %mload.out22503 = load i256, ptr %mload.out.slot22502, align 16
  %swap.b22509 = load i256, ptr %sp22383, align 16
  %2983 = sub i256 %swap.b22509, %mload.out22503
  store i256 100, ptr %sp22427, align 16
  %2984 = add i256 %2983, 100
  store i256 %2984, ptr %sp22383, align 16
  store i256 %mload.out22503, ptr %sp22387, align 16
  %2985 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22383, i8 16)
  %.not48989 = icmp eq i8 %2985, 0
  %spec.select36637 = select i1 %.not48989, i8 16, i8 %2985, !prof !6
  br label %return

OP6557.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6518.PUSH21
  %len.addr.247 = phi i64 [ %len.addr.246, %OP6518.PUSH21 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp22542 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.247
  store i256 14139, ptr %sp22542, align 16
  %sp22544 = getelementptr i256, ptr %sp22542, i64 -7
  %dup822545 = load i256, ptr %sp22544, align 16
  %sp22546 = getelementptr i256, ptr %sp22542, i64 1
  store i256 %dup822545, ptr %sp22546, align 16
  %sp22548 = getelementptr i256, ptr %sp22542, i64 -6
  %dup822549 = load i256, ptr %sp22548, align 16
  %sp22550 = getelementptr i256, ptr %sp22542, i64 2
  store i256 %dup822549, ptr %sp22550, align 16
  %sp22552 = getelementptr i256, ptr %sp22542, i64 -5
  %dup822553 = load i256, ptr %sp22552, align 16
  %sp22554 = getelementptr i256, ptr %sp22542, i64 3
  store i256 %dup822553, ptr %sp22554, align 16
  %sp22556 = getelementptr i256, ptr %sp22542, i64 -4
  %dup822557 = load i256, ptr %sp22556, align 16
  %sp22558 = getelementptr i256, ptr %sp22542, i64 4
  store i256 %dup822557, ptr %sp22558, align 16
  %sp22560 = getelementptr i256, ptr %sp22542, i64 -3
  %dup822561 = load i256, ptr %sp22560, align 16
  %sp22562 = getelementptr i256, ptr %sp22542, i64 5
  store i256 %dup822561, ptr %sp22562, align 16
  %sp22564 = getelementptr i256, ptr %sp22542, i64 -2
  %dup822565 = load i256, ptr %sp22564, align 16
  %sp22566 = getelementptr i256, ptr %sp22542, i64 6
  store i256 %dup822565, ptr %sp22566, align 16
  %2986 = add i64 %len.addr.247, 8
  %sp22568 = getelementptr i256, ptr %sp22542, i64 -1
  %dup822569 = load i256, ptr %sp22568, align 16
  %sp22570 = getelementptr i256, ptr %sp22542, i64 7
  store i256 %dup822569, ptr %sp22570, align 16
  br label %OP8998.JUMPDEST

OP6568.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %2987 = add i64 %len.addr.357, -8
  %sp22581 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2987
  %a22582 = load i256, ptr %sp22581, align 16
  br label %dynamic_jump_table.backedge

OP6577.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2456.JUMPDEST
  %len.addr.248 = phi i64 [ %1194, %OP2456.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %2988 = add i64 %len.addr.248, 1
  %sp22585 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.248
  store i256 8, ptr %sp22585, align 16
  %2989 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22585, i8 17)
  %.not48970 = icmp eq i8 %2989, 0
  br i1 %.not48970, label %OP6580.PUSH21, label %return, !prof !6

OP6580.PUSH21:                                    ; preds = %OP6577.JUMPDEST
  %sp22589 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2988
  %swap.b22594 = load i256, ptr %sp22585, align 16
  %2990 = lshr i256 %swap.b22594, 160
  %2991 = and i256 %2990, 255
  store i256 %2991, ptr %sp22585, align 16
  %2992 = icmp eq i256 %2991, 0
  %2993 = zext i1 %2992 to i256
  store i256 %2993, ptr %sp22589, align 16
  br i1 %2992, label %OP6595.JUMPDEST, label %OP6589.POP

OP6589.POP:                                       ; preds = %OP6580.PUSH21
  store i256 18, ptr %sp22585, align 16
  %2994 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22585, i8 17)
  %.not48971 = icmp eq i8 %2994, 0
  br i1 %.not48971, label %OP6592.PUSH1, label %return, !prof !6

OP6592.PUSH1:                                     ; preds = %OP6589.POP
  store i256 255, ptr %sp22589, align 16
  %b22631 = load i256, ptr %sp22585, align 16
  %2995 = and i256 %b22631, 255
  %2996 = icmp eq i256 %2995, 0
  %2997 = zext i1 %2996 to i256
  store i256 %2997, ptr %sp22585, align 16
  br label %OP6595.JUMPDEST, !annotation !7

OP6595.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6592.PUSH1, %OP6580.PUSH21
  %len.addr.249 = phi i64 [ %2988, %OP6580.PUSH21 ], [ %2988, %OP6592.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %2998 = add i64 %len.addr.249, -1
  %sp22639 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %2998
  %a22640 = load i256, ptr %sp22639, align 16
  %.not48972 = icmp eq i256 %a22640, 0
  br i1 %.not48972, label %OP6598.PUSH1, label %OP6601.JUMPDEST

OP6598.PUSH1:                                     ; preds = %OP6595.JUMPDEST
  store i256 0, ptr %sp22639, align 16
  %2999 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.249
  %sp22644 = getelementptr i256, ptr %2999, i64 -1
  store i256 0, ptr %2999, align 16
  %3000 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22644, i8 16)
  %.not48973 = icmp eq i8 %3000, 0
  %spec.select36638 = select i1 %.not48973, i8 16, i8 %3000, !prof !6
  br label %return

OP6601.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6595.JUMPDEST
  %len.addr.250 = phi i64 [ %2998, %OP6595.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp22651 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.250
  store i256 14214, ptr %sp22651, align 16
  br label %OP10361.JUMPDEST.sink.split

OP6608.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3001 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp22666 = getelementptr i256, ptr %3001, i64 -1
  store i256 14331, ptr %sp22666, align 16
  %sp22668 = getelementptr i256, ptr %3001, i64 -3
  %dup322669 = load i256, ptr %sp22668, align 16
  store i256 %dup322669, ptr %3001, align 16
  %3002 = add i64 %len.addr.357, 2
  %sp22672 = getelementptr i256, ptr %3001, i64 -2
  %dup322673 = load i256, ptr %sp22672, align 16
  %sp22674 = getelementptr i256, ptr %3001, i64 1
  store i256 %dup322673, ptr %sp22674, align 16
  %sp22678 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3002
  store i256 %dup322673, ptr %sp22678, align 16
  %3003 = add i64 %len.addr.357, 4
  %sp22682 = getelementptr i256, ptr %3001, i64 3
  store i256 %dup322673, ptr %sp22682, align 16
  %3004 = add i64 %len.addr.357, 5
  %sp22684 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3003
  store i256 31, ptr %sp22684, align 16
  %3005 = add i256 %dup322673, 31
  store i256 %3005, ptr %sp22682, align 16
  store i256 32, ptr %sp22684, align 16
  %sp22696 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3004
  store i256 32, ptr %sp22696, align 16
  store i256 32, ptr %sp22682, align 16
  store i256 %3005, ptr %sp22696, align 16
  %3006 = lshr i256 %3005, 5
  store i256 %3006, ptr %sp22684, align 16
  %3007 = and i256 %3005, -32
  store i256 %3007, ptr %sp22682, align 16
  store i256 32, ptr %sp22684, align 16
  %3008 = add i256 %3007, 32
  store i256 %3008, ptr %sp22682, align 16
  store i256 64, ptr %sp22684, align 16
  %mload.out.slot22727 = alloca i256, align 16
  %3009 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot22727, ptr %arg.ecx.addr)
  %.not48059 = icmp eq i8 %3009, 0
  br i1 %.not48059, label %OP6625.MLOAD.contd, label %return, !prof !6

OP6625.MLOAD.contd:                               ; preds = %OP6608.JUMPDEST
  %mload.out22728 = load i256, ptr %mload.out.slot22727, align 16
  store i256 %mload.out22728, ptr %sp22684, align 16
  %swap.b22734 = load i256, ptr %sp22682, align 16
  store i256 %mload.out22728, ptr %sp22682, align 16
  store i256 %swap.b22734, ptr %sp22684, align 16
  store i256 %mload.out22728, ptr %sp22696, align 16
  %3010 = add i256 %swap.b22734, %mload.out22728
  store i256 %3010, ptr %sp22684, align 16
  store i256 64, ptr %sp22696, align 16
  %3011 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 64, i256 %3010, ptr %arg.ecx.addr)
  %.not48060 = icmp eq i8 %3011, 0
  br i1 %.not48060, label %OP6631.DUP1, label %return, !prof !6

OP6631.DUP1:                                      ; preds = %OP6625.MLOAD.contd
  %dup122754 = load i256, ptr %sp22682, align 16
  store i256 %dup122754, ptr %sp22684, align 16
  %swap.b22760 = load i256, ptr %3001, align 16
  store i256 %dup122754, ptr %3001, align 16
  store i256 %swap.b22760, ptr %sp22684, align 16
  %swap.b22765 = load i256, ptr %sp22674, align 16
  store i256 %swap.b22760, ptr %sp22674, align 16
  store i256 %swap.b22765, ptr %sp22684, align 16
  %swap.b22770 = load i256, ptr %sp22678, align 16
  store i256 %swap.b22765, ptr %sp22678, align 16
  store i256 %swap.b22770, ptr %sp22684, align 16
  store i256 %swap.b22770, ptr %sp22682, align 16
  store i256 %dup122754, ptr %sp22684, align 16
  store i256 %swap.b22770, ptr %sp22696, align 16
  %sp22783 = getelementptr i256, ptr %3001, i64 6
  store i256 %dup122754, ptr %sp22783, align 16
  %3012 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup122754, i256 %swap.b22770, ptr %arg.ecx.addr)
  %.not48061 = icmp eq i8 %3012, 0
  br i1 %.not48061, label %OP6639.PUSH1, label %return, !prof !6

OP6639.PUSH1:                                     ; preds = %OP6631.DUP1
  %3013 = add i64 %len.addr.357, 7
  store i256 32, ptr %sp22696, align 16
  %b22795 = load i256, ptr %sp22684, align 16
  %3014 = add i256 %b22795, 32
  store i256 %3014, ptr %sp22684, align 16
  %dup422799 = load i256, ptr %sp22674, align 16
  store i256 %dup422799, ptr %sp22696, align 16
  %sp22802 = getelementptr i256, ptr %3001, i64 2
  %dup422803 = load i256, ptr %sp22802, align 16
  store i256 %dup422803, ptr %sp22783, align 16
  %sp22808 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3013
  store i256 %dup422803, ptr %sp22808, align 16
  %sp22812 = getelementptr i256, ptr %3001, i64 8
  store i256 %dup422799, ptr %sp22812, align 16
  %sp22816 = getelementptr i256, ptr %3001, i64 9
  store i256 %3014, ptr %sp22816, align 16
  %3015 = tail call i8 @__revmc_builtin_calldatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22808)
  %.not48062 = icmp eq i8 %3015, 0
  br i1 %.not48062, label %OP6647.PUSH1, label %return, !prof !6

OP6647.PUSH1:                                     ; preds = %OP6639.PUSH1
  %sp22814 = getelementptr i256, ptr %3001, i64 4
  store i256 0, ptr %sp22808, align 16
  %swap.b22825 = load i256, ptr %sp22814, align 16
  store i256 0, ptr %sp22814, align 16
  store i256 %swap.b22825, ptr %sp22808, align 16
  %b22830 = load i256, ptr %sp22783, align 16
  %3016 = add i256 %b22830, %swap.b22825
  store i256 %3016, ptr %sp22783, align 16
  store i256 %3016, ptr %sp22684, align 16
  store i256 0, ptr %sp22783, align 16
  %swap.b22841 = load i256, ptr %sp22696, align 16
  store i256 0, ptr %sp22696, align 16
  store i256 %swap.b22841, ptr %sp22783, align 16
  store i256 %swap.b22841, ptr %sp22684, align 16
  store i256 %3016, ptr %sp22783, align 16
  %3017 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3016, i256 0, ptr %arg.ecx.addr)
  %.not48063 = icmp eq i8 %3017, 0
  br i1 %.not48063, label %OP6654.POP, label %return, !prof !6

OP6654.POP:                                       ; preds = %OP6647.PUSH1
  store i256 64, ptr %sp22682, align 16
  store i256 64, ptr %sp22684, align 16
  %mload.out.slot22863 = alloca i256, align 16
  %3018 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot22863, ptr %arg.ecx.addr)
  %.not48064 = icmp eq i8 %3018, 0
  br i1 %.not48064, label %OP6658.MLOAD.contd, label %return, !prof !6

OP6658.MLOAD.contd:                               ; preds = %OP6654.POP
  %mload.out22864 = load i256, ptr %mload.out.slot22863, align 16
  store i256 %mload.out22864, ptr %sp22684, align 16
  store i256 %mload.out22864, ptr %sp22696, align 16
  %dup322872 = load i256, ptr %sp22682, align 16
  store i256 %dup322872, ptr %sp22783, align 16
  %3019 = add i256 %dup322872, %mload.out22864
  store i256 %3019, ptr %sp22696, align 16
  store i256 %3019, ptr %sp22684, align 16
  store i256 %mload.out22864, ptr %sp22696, align 16
  store i256 %mload.out22864, ptr %sp22682, align 16
  store i256 %dup322872, ptr %sp22696, align 16
  %3020 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup322872, i256 %3019, ptr %arg.ecx.addr)
  %.not48065 = icmp eq i8 %3020, 0
  br i1 %.not48065, label %OP6665.PUSH1, label %return, !prof !6

OP6665.PUSH1:                                     ; preds = %OP6658.MLOAD.contd
  store i256 1, ptr %sp22684, align 16
  %dup222899 = load i256, ptr %sp22682, align 16
  store i256 %dup222899, ptr %sp22696, align 16
  %3021 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup222899, i256 1, ptr %arg.ecx.addr)
  %.not48066 = icmp eq i8 %3021, 0
  br i1 %.not48066, label %OP6668.PUSH32, label %return, !prof !6

OP6668.PUSH32:                                    ; preds = %OP6665.PUSH1
  store i256 22615642429163319418666208009509357002591793880007922663956559376545533132800, ptr %sp22684, align 16
  store i256 32, ptr %sp22696, align 16
  %dup322912 = load i256, ptr %sp22682, align 16
  store i256 %dup322912, ptr %sp22783, align 16
  %3022 = add i256 %dup322912, 32
  store i256 %3022, ptr %sp22696, align 16
  %3023 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3022, i256 22615642429163319418666208009509357002591793880007922663956559376545533132800, ptr %arg.ecx.addr)
  %.not48067 = icmp eq i8 %3023, 0
  br i1 %.not48067, label %OP6673.SWAP2, label %return, !prof !6

OP6673.SWAP2:                                     ; preds = %OP6668.PUSH32
  %swap.a22927 = load i256, ptr %sp22682, align 16
  store i256 %swap.a22927, ptr %sp22674, align 16
  store i256 19497, ptr %sp22682, align 16
  %swap.b22937 = load i256, ptr %sp22678, align 16
  store i256 19497, ptr %sp22678, align 16
  store i256 %swap.b22937, ptr %sp22682, align 16
  br label %dynamic_jump_table.backedge

OP6679.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp22944 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 15, ptr %sp22944, align 16
  %3024 = add i64 %len.addr.357, -1
  %sp22946 = getelementptr i256, ptr %sp22944, i64 -1
  %3025 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr %sp22946, i8 17)
  %.not48056 = icmp eq i8 %3025, 0
  br i1 %.not48056, label %OP6682.POP, label %return, !prof !6

OP6682.POP:                                       ; preds = %OP6679.JUMPDEST
  %sp22950 = getelementptr i256, ptr %sp22944, i64 -3
  store i256 18, ptr %sp22950, align 16
  %sp22954 = getelementptr i256, ptr %sp22944, i64 -2
  store i256 18, ptr %sp22954, align 16
  %3026 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22954, i8 17)
  %.not48057 = icmp eq i8 %3026, 0
  br i1 %.not48057, label %OP6687.PUSH32, label %return, !prof !6

OP6687.PUSH32:                                    ; preds = %OP6682.POP
  %sp22958 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3024
  store i256 -256, ptr %sp22958, align 16
  %b22963 = load i256, ptr %sp22954, align 16
  %3027 = and i256 %b22963, -256
  store i256 %3027, ptr %sp22954, align 16
  store i256 1, ptr %sp22946, align 16
  %3028 = or disjoint i256 %3027, 1
  store i256 %3028, ptr %sp22954, align 16
  %swap.b22977 = load i256, ptr %sp22950, align 16
  store i256 %3028, ptr %sp22950, align 16
  store i256 %swap.b22977, ptr %sp22954, align 16
  %3029 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22950, i8 17)
  %.not48058 = icmp eq i8 %3029, 0
  br i1 %.not48058, label %OP6693.JUMP, label %return.loopexit52642.split.loop.exit53243, !prof !6

OP6693.JUMP:                                      ; preds = %OP6687.PUSH32
  %3030 = add i64 %len.addr.357, -4
  %sp22981 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3030
  %a22982 = load i256, ptr %sp22981, align 16
  br label %dynamic_jump_table.backedge

OP6694.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2465.JUMPDEST
  %len.addr.251 = phi i64 [ %1195, %OP2465.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3031 = add i64 %len.addr.251, 1
  %sp22985 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.251
  store i256 9744234862922869596605421539056514765632049317526109944573892473740930413609, ptr %sp22985, align 16
  %sp22987 = getelementptr i256, ptr %sp22985, i64 -1
  %dup222988 = load i256, ptr %sp22987, align 16
  %sp22989 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3031
  store i256 %dup222988, ptr %sp22989, align 16
  br label %dynamic_jump_table.preheader

OP6698.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %sp22995.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp22999.phi.trans.insert = getelementptr i256, ptr %sp22995.phi.trans.insert, i64 -2
  %swap.b23000.pre = load i256, ptr %sp22999.phi.trans.insert, align 16
  br label %OP6698.JUMPDEST

OP6698.JUMPDEST:                                  ; preds = %OP6698.JUMPDEST.loopexit, %OP2484.JUMPDEST
  %swap.b23000 = phi i256 [ %1205, %OP2484.JUMPDEST ], [ %swap.b23000.pre, %OP6698.JUMPDEST.loopexit ]
  %len.addr.252 = phi i64 [ %len.addr.127, %OP2484.JUMPDEST ], [ %len.addr.357, %OP6698.JUMPDEST.loopexit ]
  %3032 = add i64 %len.addr.252, 1
  %sp22995 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.252
  %sp22999 = getelementptr i256, ptr %sp22995, i64 -2
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp22999, align 16
  %3033 = add i64 %len.addr.252, 2
  %sp23004 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3032
  %3034 = and i256 %swap.b23000, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp22995, align 16
  store i256 %3034, ptr %sp23004, align 16
  %sp23021 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3033
  store i256 0, ptr %sp23021, align 16
  %3035 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %3034, ptr %arg.ecx.addr)
  %.not48959 = icmp eq i8 %3035, 0
  br i1 %.not48959, label %OP6707.PUSH1, label %return, !prof !6

OP6707.PUSH1:                                     ; preds = %OP6698.JUMPDEST
  store i256 32, ptr %sp23004, align 16
  store i256 10, ptr %sp23021, align 16
  %sp23039 = getelementptr i256, ptr %sp22995, i64 3
  store i256 32, ptr %sp23039, align 16
  %3036 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 10, ptr %arg.ecx.addr)
  %.not48960 = icmp eq i8 %3036, 0
  br i1 %.not48960, label %OP6712.PUSH1, label %return, !prof !6

OP6712.PUSH1:                                     ; preds = %OP6707.PUSH1
  %3037 = add i64 %len.addr.252, 4
  store i256 64, ptr %sp23021, align 16
  store i256 64, ptr %sp23039, align 16
  %dup423053 = load i256, ptr %sp22995, align 16
  %sp23054 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3037
  store i256 %dup423053, ptr %sp23054, align 16
  %3038 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23039)
  %.not48961 = icmp eq i8 %3038, 0
  br i1 %.not48961, label %OP6716.SWAP4, label %return, !prof !6

OP6716.SWAP4:                                     ; preds = %OP6712.PUSH1
  %swap.a23059 = load i256, ptr %sp23039, align 16
  %sp23060 = getelementptr i256, ptr %sp22995, i64 -1
  %swap.b23061 = load i256, ptr %sp23060, align 16
  store i256 %swap.a23059, ptr %sp23060, align 16
  %swap.b23066 = load i256, ptr %sp23021, align 16
  %swap.b23071 = load i256, ptr %sp22999, align 16
  store i256 %swap.b23066, ptr %sp22999, align 16
  %3039 = and i256 %swap.b23071, %swap.b23061
  store i256 %3039, ptr %sp23021, align 16
  %dup323080 = load i256, ptr %sp22995, align 16
  store i256 %dup323080, ptr %sp23039, align 16
  %3040 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup323080, i256 %3039, ptr %arg.ecx.addr)
  %.not48962 = icmp eq i8 %3040, 0
  br i1 %.not48962, label %OP6722.SWAP2, label %return, !prof !6

OP6722.SWAP2:                                     ; preds = %OP6716.SWAP4
  %swap.a23089 = load i256, ptr %sp23004, align 16
  %swap.b23091 = load i256, ptr %sp23060, align 16
  %swap.b23096 = load i256, ptr %sp22995, align 16
  store i256 %swap.b23091, ptr %sp22995, align 16
  store i256 %swap.b23096, ptr %sp23060, align 16
  %3041 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.a23089, i256 %swap.b23091, ptr %arg.ecx.addr)
  %.not48963 = icmp eq i8 %3041, 0
  br i1 %.not48963, label %OP6726.KECCAK256, label %return, !prof !6

OP6726.KECCAK256:                                 ; preds = %OP6722.SWAP2
  %3042 = add i64 %len.addr.252, -1
  %3043 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22999)
  %.not48964 = icmp eq i8 %3043, 0
  br i1 %.not48964, label %OP6727.SLOAD, label %return, !prof !6

OP6727.SLOAD:                                     ; preds = %OP6726.KECCAK256
  %3044 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp22999, i8 17)
  %.not48965 = icmp eq i8 %3044, 0
  br i1 %.not48965, label %OP6728.SWAP1, label %return, !prof !6

OP6728.SWAP1:                                     ; preds = %OP6727.SLOAD
  %swap.a23113 = load i256, ptr %sp22999, align 16
  %sp23114 = getelementptr i256, ptr %sp22995, i64 -3
  %swap.b23115 = load i256, ptr %sp23114, align 16
  store i256 %swap.a23113, ptr %sp23114, align 16
  store i256 %swap.b23115, ptr %sp22999, align 16
  %3045 = add i64 %len.addr.252, -2
  br label %dynamic_jump_table.preheader

OP6730.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2513.JUMPDEST
  %len.addr.253 = phi i64 [ %1230, %OP2513.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3046 = add i64 %len.addr.253, 1
  %sp23121 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.253
  store i256 1, ptr %sp23121, align 16
  %3047 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23121, i8 17)
  %.not49057 = icmp eq i8 %3047, 0
  br i1 %.not49057, label %OP6733.PUSH21, label %return, !prof !6

OP6733.PUSH21:                                    ; preds = %OP6730.JUMPDEST
  %3048 = add i64 %len.addr.253, 2
  %sp23125 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3046
  %swap.b23130 = load i256, ptr %sp23121, align 16
  store i256 255, ptr %sp23125, align 16
  %3049 = and i256 %swap.b23130, 372682917519380244141939632342652170012262798458880
  %3050 = icmp eq i256 %3049, 0
  %3051 = zext i1 %3050 to i256
  store i256 %3051, ptr %sp23121, align 16
  br i1 %3050, label %OP6772.JUMPDEST, label %OP6741.PUSH1

OP6741.PUSH1:                                     ; preds = %OP6733.PUSH21
  store i256 64, ptr %sp23121, align 16
  store i256 64, ptr %sp23125, align 16
  %mload.out.slot23161 = alloca i256, align 16
  %3052 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot23161, ptr %arg.ecx.addr)
  %.not49058 = icmp eq i8 %3052, 0
  br i1 %.not49058, label %OP6743.MLOAD.contd, label %return, !prof !6

OP6743.MLOAD.contd:                               ; preds = %OP6741.PUSH1
  %mload.out23162 = load i256, ptr %mload.out.slot23161, align 16
  store i256 %mload.out23162, ptr %sp23125, align 16
  %sp23165 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3048
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp23165, align 16
  %sp23169 = getelementptr i256, ptr %sp23121, i64 3
  store i256 %mload.out23162, ptr %sp23169, align 16
  %3053 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out23162, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not49059 = icmp eq i8 %3053, 0
  br i1 %.not49059, label %OP6747.PUSH1, label %return, !prof !6

OP6747.PUSH1:                                     ; preds = %OP6743.MLOAD.contd
  store i256 32, ptr %sp23165, align 16
  %dup323181 = load i256, ptr %sp23125, align 16
  %sp23182 = getelementptr i256, ptr %sp23121, i64 4
  store i256 %dup323181, ptr %sp23182, align 16
  %3054 = add i256 %dup323181, 4
  store i256 %3054, ptr %sp23169, align 16
  %3055 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3054, i256 32, ptr %arg.ecx.addr)
  %.not49060 = icmp eq i8 %3055, 0
  br i1 %.not49060, label %OP6752.PUSH1, label %return, !prof !6

OP6752.PUSH1:                                     ; preds = %OP6747.PUSH1
  store i256 16, ptr %sp23165, align 16
  %dup323200 = load i256, ptr %sp23125, align 16
  store i256 %dup323200, ptr %sp23182, align 16
  %3056 = add i256 %dup323200, 36
  store i256 %3056, ptr %sp23169, align 16
  %3057 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3056, i256 16, ptr %arg.ecx.addr)
  %.not49061 = icmp eq i8 %3057, 0
  br i1 %.not49061, label %OP6757.PUSH32, label %return, !prof !6

OP6757.PUSH32:                                    ; preds = %OP6752.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp23165, align 16
  %dup323219 = load i256, ptr %sp23125, align 16
  store i256 %dup323219, ptr %sp23182, align 16
  %3058 = add i256 %dup323219, 68
  store i256 %3058, ptr %sp23169, align 16
  %3059 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3058, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not49062 = icmp eq i8 %3059, 0
  br i1 %.not49062, label %OP6762.SWAP1, label %return, !prof !6

OP6762.SWAP1:                                     ; preds = %OP6757.PUSH32
  %swap.a23234 = load i256, ptr %sp23125, align 16
  %swap.b23236 = load i256, ptr %sp23121, align 16
  store i256 %swap.a23234, ptr %sp23121, align 16
  store i256 %swap.b23236, ptr %sp23125, align 16
  %mload.out.slot23240 = alloca i256, align 16
  %3060 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b23236, ptr %mload.out.slot23240, ptr %arg.ecx.addr)
  %.not49063 = icmp eq i8 %3060, 0
  br i1 %.not49063, label %OP6763.MLOAD.contd, label %return, !prof !6

OP6763.MLOAD.contd:                               ; preds = %OP6762.SWAP1
  %mload.out23241 = load i256, ptr %mload.out.slot23240, align 16
  %swap.b23247 = load i256, ptr %sp23121, align 16
  %3061 = sub i256 %swap.b23247, %mload.out23241
  store i256 100, ptr %sp23165, align 16
  %3062 = add i256 %3061, 100
  store i256 %3062, ptr %sp23121, align 16
  store i256 %mload.out23241, ptr %sp23125, align 16
  %3063 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23121, i8 16)
  %.not49064 = icmp eq i8 %3063, 0
  %spec.select36639 = select i1 %.not49064, i8 16, i8 %3063, !prof !6
  br label %return

OP6772.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6733.PUSH21
  %len.addr.254 = phi i64 [ %len.addr.253, %OP6733.PUSH21 ], [ %len.addr.357, %dynamic_jump_table ]
  %3064 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.254
  %sp23280 = getelementptr i256, ptr %3064, i64 -9
  %dup923281 = load i256, ptr %sp23280, align 16
  store i256 %dup923281, ptr %3064, align 16
  %sp23284 = getelementptr i256, ptr %3064, i64 1
  store i256 14621, ptr %sp23284, align 16
  %3065 = add i64 %len.addr.254, 3
  %sp23288 = getelementptr i256, ptr %3064, i64 2
  store i256 %dup923281, ptr %sp23288, align 16
  br label %OP7491.JUMPDEST

OP6778.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3066 = add i64 %len.addr.357, -1
  %sp23292 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3066
  %a23293 = load i256, ptr %sp23292, align 16
  %3067 = icmp eq i256 %a23293, 0
  %3068 = zext i1 %3067 to i256
  store i256 %3068, ptr %sp23292, align 16
  br i1 %3067, label %OP6820.JUMPDEST, label %OP6782.PUSH1

OP6782.PUSH1:                                     ; preds = %OP6778.JUMPDEST
  store i256 64, ptr %sp23292, align 16
  %mload.out.slot23303 = alloca i256, align 16
  %3069 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot23303, ptr %arg.ecx.addr)
  %.not48049 = icmp eq i8 %3069, 0
  br i1 %.not48049, label %OP6783.MLOAD.contd, label %return, !prof !6

OP6783.MLOAD.contd:                               ; preds = %OP6782.PUSH1
  %mload.out23304 = load i256, ptr %mload.out.slot23303, align 16
  store i256 %mload.out23304, ptr %sp23292, align 16
  %3070 = add i64 %len.addr.357, 1
  %sp23307 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp23307, align 16
  %3071 = add i64 %len.addr.357, 2
  %sp23309 = getelementptr i256, ptr %sp23307, i64 -1
  %sp23311 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3070
  store i256 %mload.out23304, ptr %sp23311, align 16
  %3072 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out23304, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48050 = icmp eq i8 %3072, 0
  br i1 %.not48050, label %OP6787.PUSH1, label %return, !prof !6

OP6787.PUSH1:                                     ; preds = %OP6783.MLOAD.contd
  store i256 4, ptr %sp23307, align 16
  %b23323 = load i256, ptr %sp23292, align 16
  %3073 = add i256 %b23323, 4
  store i256 %3073, ptr %sp23292, align 16
  store i256 %3073, ptr %sp23307, align 16
  store i256 %3073, ptr %sp23311, align 16
  %sp23334 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3071
  store i256 32, ptr %sp23334, align 16
  %3074 = add i256 %b23323, 36
  store i256 %3074, ptr %sp23311, align 16
  store i256 %3073, ptr %sp23334, align 16
  %sp23348 = getelementptr i256, ptr %sp23307, i64 3
  store i256 %3074, ptr %sp23348, align 16
  store i256 32, ptr %sp23334, align 16
  store i256 %3073, ptr %sp23348, align 16
  %3075 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3073, i256 32, ptr %arg.ecx.addr)
  %.not48051 = icmp eq i8 %3075, 0
  br i1 %.not48051, label %OP6798.PUSH1, label %return, !prof !6

OP6798.PUSH1:                                     ; preds = %OP6787.PUSH1
  store i256 37, ptr %sp23334, align 16
  %dup223368 = load i256, ptr %sp23311, align 16
  store i256 %dup223368, ptr %sp23348, align 16
  %3076 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup223368, i256 37, ptr %arg.ecx.addr)
  %.not48052 = icmp eq i8 %3076, 0
  br i1 %.not48052, label %OP6801.PUSH1, label %return, !prof !6

OP6801.PUSH1:                                     ; preds = %OP6798.PUSH1
  store i256 32, ptr %sp23334, align 16
  %b23381 = load i256, ptr %sp23311, align 16
  %3077 = add i256 %b23381, 32
  store i256 %3077, ptr %sp23311, align 16
  store i256 %3077, ptr %sp23334, align 16
  store i256 23300, ptr %sp23348, align 16
  %sp23390 = getelementptr i256, ptr %sp23307, i64 4
  store i256 37, ptr %sp23390, align 16
  store i256 37, ptr %sp23334, align 16
  store i256 %3077, ptr %sp23390, align 16
  %3078 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23334)
  %.not48053 = icmp eq i8 %3078, 0
  br i1 %.not48053, label %OP6808.PUSH1, label %return, !prof !6

OP6808.PUSH1:                                     ; preds = %OP6801.PUSH1
  store i256 64, ptr %sp23334, align 16
  %b23404 = load i256, ptr %sp23311, align 16
  %3079 = add i256 %b23404, 64
  store i256 %3079, ptr %sp23311, align 16
  %swap.b23410 = load i256, ptr %sp23309, align 16
  store i256 %3079, ptr %sp23309, align 16
  store i256 %swap.b23410, ptr %sp23311, align 16
  store i256 64, ptr %sp23307, align 16
  %mload.out.slot23418 = alloca i256, align 16
  %3080 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot23418, ptr %arg.ecx.addr)
  %.not48054 = icmp eq i8 %3080, 0
  br i1 %.not48054, label %OP6814.MLOAD.contd, label %return, !prof !6

OP6814.MLOAD.contd:                               ; preds = %OP6808.PUSH1
  %mload.out23419 = load i256, ptr %mload.out.slot23418, align 16
  store i256 %mload.out23419, ptr %sp23307, align 16
  store i256 %mload.out23419, ptr %sp23311, align 16
  %swap.b23429 = load i256, ptr %sp23309, align 16
  store i256 %mload.out23419, ptr %sp23309, align 16
  store i256 %swap.b23429, ptr %sp23311, align 16
  %3081 = sub i256 %swap.b23429, %mload.out23419
  store i256 %3081, ptr %sp23307, align 16
  store i256 %3081, ptr %sp23309, align 16
  store i256 %mload.out23419, ptr %sp23307, align 16
  %3082 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23309, i8 16)
  %.not48055 = icmp eq i8 %3082, 0
  %spec.select36640 = select i1 %.not48055, i8 16, i8 %3082, !prof !6
  br label %return

OP6820.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6778.JUMPDEST
  %len.addr.255 = phi i64 [ %3066, %OP6778.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3083 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.255
  %sp23445 = getelementptr i256, ptr %3083, i64 -9
  %dup923446 = load i256, ptr %sp23445, align 16
  store i256 %dup923446, ptr %3083, align 16
  %sp23449 = getelementptr i256, ptr %3083, i64 1
  store i256 14717, ptr %sp23449, align 16
  %3084 = add i64 %len.addr.255, 3
  %sp23453 = getelementptr i256, ptr %3083, i64 2
  store i256 %dup923446, ptr %sp23453, align 16
  br label %OP7491.JUMPDEST

OP6826.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3085 = add i64 %len.addr.357, -1
  %sp23457 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3085
  %a23458 = load i256, ptr %sp23457, align 16
  %3086 = icmp eq i256 %a23458, 0
  %3087 = zext i1 %3086 to i256
  store i256 %3087, ptr %sp23457, align 16
  br i1 %3086, label %OP6868.JUMPDEST, label %OP6830.PUSH1

OP6830.PUSH1:                                     ; preds = %OP6826.JUMPDEST
  store i256 64, ptr %sp23457, align 16
  %mload.out.slot23468 = alloca i256, align 16
  %3088 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot23468, ptr %arg.ecx.addr)
  %.not48035 = icmp eq i8 %3088, 0
  br i1 %.not48035, label %OP6831.MLOAD.contd, label %return, !prof !6

OP6831.MLOAD.contd:                               ; preds = %OP6830.PUSH1
  %mload.out23469 = load i256, ptr %mload.out.slot23468, align 16
  store i256 %mload.out23469, ptr %sp23457, align 16
  %3089 = add i64 %len.addr.357, 1
  %sp23472 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp23472, align 16
  %3090 = add i64 %len.addr.357, 2
  %sp23474 = getelementptr i256, ptr %sp23472, i64 -1
  %sp23476 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3089
  store i256 %mload.out23469, ptr %sp23476, align 16
  %3091 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out23469, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48036 = icmp eq i8 %3091, 0
  br i1 %.not48036, label %OP6835.PUSH1, label %return, !prof !6

OP6835.PUSH1:                                     ; preds = %OP6831.MLOAD.contd
  store i256 4, ptr %sp23472, align 16
  %b23488 = load i256, ptr %sp23457, align 16
  %3092 = add i256 %b23488, 4
  store i256 %3092, ptr %sp23457, align 16
  store i256 %3092, ptr %sp23472, align 16
  store i256 %3092, ptr %sp23476, align 16
  %sp23499 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3090
  store i256 32, ptr %sp23499, align 16
  %3093 = add i256 %b23488, 36
  store i256 %3093, ptr %sp23476, align 16
  store i256 %3092, ptr %sp23499, align 16
  %sp23513 = getelementptr i256, ptr %sp23472, i64 3
  store i256 %3093, ptr %sp23513, align 16
  store i256 32, ptr %sp23499, align 16
  store i256 %3092, ptr %sp23513, align 16
  %3094 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3092, i256 32, ptr %arg.ecx.addr)
  %.not48037 = icmp eq i8 %3094, 0
  br i1 %.not48037, label %OP6846.PUSH1, label %return, !prof !6

OP6846.PUSH1:                                     ; preds = %OP6835.PUSH1
  store i256 37, ptr %sp23499, align 16
  %dup223533 = load i256, ptr %sp23476, align 16
  store i256 %dup223533, ptr %sp23513, align 16
  %3095 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup223533, i256 37, ptr %arg.ecx.addr)
  %.not48038 = icmp eq i8 %3095, 0
  br i1 %.not48038, label %OP6849.PUSH1, label %return, !prof !6

OP6849.PUSH1:                                     ; preds = %OP6846.PUSH1
  store i256 32, ptr %sp23499, align 16
  %b23546 = load i256, ptr %sp23476, align 16
  %3096 = add i256 %b23546, 32
  store i256 %3096, ptr %sp23476, align 16
  store i256 %3096, ptr %sp23499, align 16
  store i256 23300, ptr %sp23513, align 16
  %sp23555 = getelementptr i256, ptr %sp23472, i64 4
  store i256 37, ptr %sp23555, align 16
  store i256 37, ptr %sp23499, align 16
  store i256 %3096, ptr %sp23555, align 16
  %3097 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23499)
  %.not48039 = icmp eq i8 %3097, 0
  br i1 %.not48039, label %OP6856.PUSH1, label %return, !prof !6

OP6856.PUSH1:                                     ; preds = %OP6849.PUSH1
  store i256 64, ptr %sp23499, align 16
  %b23569 = load i256, ptr %sp23476, align 16
  %3098 = add i256 %b23569, 64
  store i256 %3098, ptr %sp23476, align 16
  %swap.b23575 = load i256, ptr %sp23474, align 16
  store i256 %3098, ptr %sp23474, align 16
  store i256 %swap.b23575, ptr %sp23476, align 16
  store i256 64, ptr %sp23472, align 16
  %mload.out.slot23583 = alloca i256, align 16
  %3099 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot23583, ptr %arg.ecx.addr)
  %.not48040 = icmp eq i8 %3099, 0
  br i1 %.not48040, label %OP6862.MLOAD.contd, label %return, !prof !6

OP6862.MLOAD.contd:                               ; preds = %OP6856.PUSH1
  %mload.out23584 = load i256, ptr %mload.out.slot23583, align 16
  store i256 %mload.out23584, ptr %sp23472, align 16
  store i256 %mload.out23584, ptr %sp23476, align 16
  %swap.b23594 = load i256, ptr %sp23474, align 16
  store i256 %mload.out23584, ptr %sp23474, align 16
  store i256 %swap.b23594, ptr %sp23476, align 16
  %3100 = sub i256 %swap.b23594, %mload.out23584
  store i256 %3100, ptr %sp23472, align 16
  store i256 %3100, ptr %sp23474, align 16
  store i256 %mload.out23584, ptr %sp23472, align 16
  %3101 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23474, i8 16)
  %.not48041 = icmp eq i8 %3101, 0
  %spec.select36641 = select i1 %.not48041, i8 16, i8 %3101, !prof !6
  br label %return

OP6868.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6826.JUMPDEST
  %len.addr.256 = phi i64 [ %3085, %OP6826.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp23610 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.256
  store i256 14820, ptr %sp23610, align 16
  %sp23612 = getelementptr i256, ptr %sp23610, i64 -11
  %dup1223613 = load i256, ptr %sp23612, align 16
  %sp23614 = getelementptr i256, ptr %sp23610, i64 1
  store i256 %dup1223613, ptr %sp23614, align 16
  %sp23616 = getelementptr i256, ptr %sp23610, i64 -10
  %dup1223617 = load i256, ptr %sp23616, align 16
  %sp23618 = getelementptr i256, ptr %sp23610, i64 2
  store i256 %dup1223617, ptr %sp23618, align 16
  %sp23620 = getelementptr i256, ptr %sp23610, i64 -9
  %dup1223621 = load i256, ptr %sp23620, align 16
  %sp23622 = getelementptr i256, ptr %sp23610, i64 3
  store i256 %dup1223621, ptr %sp23622, align 16
  %sp23624 = getelementptr i256, ptr %sp23610, i64 -8
  %dup1223625 = load i256, ptr %sp23624, align 16
  %sp23626 = getelementptr i256, ptr %sp23610, i64 4
  store i256 %dup1223625, ptr %sp23626, align 16
  %sp23628 = getelementptr i256, ptr %sp23610, i64 -7
  %dup1223629 = load i256, ptr %sp23628, align 16
  %sp23630 = getelementptr i256, ptr %sp23610, i64 5
  store i256 %dup1223629, ptr %sp23630, align 16
  %sp23632 = getelementptr i256, ptr %sp23610, i64 -6
  %dup1223633 = load i256, ptr %sp23632, align 16
  %sp23634 = getelementptr i256, ptr %sp23610, i64 6
  store i256 %dup1223633, ptr %sp23634, align 16
  %sp23636 = getelementptr i256, ptr %sp23610, i64 -5
  %dup1223637 = load i256, ptr %sp23636, align 16
  %sp23638 = getelementptr i256, ptr %sp23610, i64 7
  store i256 %dup1223637, ptr %sp23638, align 16
  %sp23640 = getelementptr i256, ptr %sp23610, i64 -4
  %dup1223641 = load i256, ptr %sp23640, align 16
  %sp23642 = getelementptr i256, ptr %sp23610, i64 8
  store i256 %dup1223641, ptr %sp23642, align 16
  %3102 = add i64 %len.addr.256, 10
  %sp23644 = getelementptr i256, ptr %sp23610, i64 -3
  %dup1223645 = load i256, ptr %sp23644, align 16
  %sp23646 = getelementptr i256, ptr %sp23610, i64 9
  store i256 %dup1223645, ptr %sp23646, align 16
  br label %OP9067.JUMPDEST

OP6881.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3103 = add i64 %len.addr.357, -12
  %sp23661 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3103
  %a23662 = load i256, ptr %sp23661, align 16
  br label %dynamic_jump_table.backedge

OP6894.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2566.JUMPDEST
  %len.addr.257 = phi i64 [ %1238, %OP2566.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp23665 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.257
  store i256 7, ptr %sp23665, align 16
  %3104 = add i64 %len.addr.257, 2
  %sp23669 = getelementptr i256, ptr %sp23665, i64 1
  store i256 7, ptr %sp23669, align 16
  %3105 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23669, i8 17)
  %.not49046 = icmp eq i8 %3105, 0
  br i1 %.not49046, label %OP6898.PUSH1, label %return, !prof !6

OP6898.PUSH1:                                     ; preds = %OP6894.JUMPDEST
  %sp23673 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3104
  store i256 64, ptr %sp23673, align 16
  %3106 = add i64 %len.addr.257, 4
  %sp23677 = getelementptr i256, ptr %sp23665, i64 3
  store i256 64, ptr %sp23677, align 16
  %mload.out.slot23681 = alloca i256, align 16
  %3107 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot23681, ptr %arg.ecx.addr)
  %.not49047 = icmp eq i8 %3107, 0
  br i1 %.not49047, label %OP6900.MLOAD.contd, label %return, !prof !6

OP6900.MLOAD.contd:                               ; preds = %OP6898.PUSH1
  %mload.out23682 = load i256, ptr %mload.out.slot23681, align 16
  store i256 %mload.out23682, ptr %sp23677, align 16
  %sp23685 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3106
  %3108 = add i64 %len.addr.257, 6
  %sp23687 = getelementptr i256, ptr %sp23665, i64 5
  %sp23689 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3108
  %dup623692 = load i256, ptr %sp23669, align 16
  %sp23693 = getelementptr i256, ptr %sp23665, i64 7
  %3109 = shl i256 %dup623692, 8
  %3110 = and i256 %3109, 256
  %3111 = xor i256 %3110, 256
  store i256 -1, ptr %sp23693, align 16
  %3112 = add nsw i256 %3111, -1
  %3113 = and i256 %dup623692, %3112
  store i256 32, ptr %sp23669, align 16
  %3114 = lshr i256 %3113, 1
  %3115 = add nuw i256 %3114, 31
  %3116 = and i256 %3115, -32
  %3117 = add i256 %mload.out23682, %3116
  store i256 32, ptr %sp23689, align 16
  %3118 = add i256 %3117, 32
  store i256 %3118, ptr %sp23685, align 16
  %sp23822 = getelementptr i256, ptr %sp23665, i64 2
  %swap.b23823 = load i256, ptr %sp23822, align 16
  store i256 %3114, ptr %sp23822, align 16
  store i256 %swap.b23823, ptr %sp23687, align 16
  %3119 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b23823, i256 %3118, ptr %arg.ecx.addr)
  %.not49048 = icmp eq i8 %3119, 0
  br i1 %.not49048, label %OP6933.DUP2, label %return, !prof !6

OP6933.DUP2:                                      ; preds = %OP6900.MLOAD.contd
  %dup223831 = load i256, ptr %sp23673, align 16
  store i256 %dup223831, ptr %sp23685, align 16
  %dup223835 = load i256, ptr %sp23677, align 16
  store i256 %dup223835, ptr %sp23687, align 16
  %3120 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup223835, i256 %dup223831, ptr %arg.ecx.addr)
  %.not49049 = icmp eq i8 %3120, 0
  br i1 %.not49049, label %OP6936.SWAP3, label %return, !prof !6

OP6936.SWAP3:                                     ; preds = %OP6933.DUP2
  %swap.a23844 = load i256, ptr %sp23677, align 16
  %swap.b23846 = load i256, ptr %sp23665, align 16
  store i256 %swap.a23844, ptr %sp23665, align 16
  %swap.b23851 = load i256, ptr %sp23669, align 16
  store i256 %swap.b23846, ptr %sp23669, align 16
  %3121 = add i256 %swap.b23851, %swap.a23844
  store i256 %3121, ptr %sp23677, align 16
  store i256 %swap.b23846, ptr %sp23685, align 16
  %dup323868 = load i256, ptr %sp23673, align 16
  store i256 %dup323868, ptr %sp23687, align 16
  %3122 = icmp eq i256 %dup323868, 0
  %3123 = zext i1 %3122 to i256
  store i256 %3123, ptr %sp23689, align 16
  br i1 %3122, label %OP2837.JUMPDEST, label %OP6946.DUP1

OP6946.DUP1:                                      ; preds = %OP6936.SWAP3
  store i256 31, ptr %sp23693, align 16
  %3124 = icmp ugt i256 %dup323868, 31
  %3125 = zext i1 %3124 to i256
  store i256 %3125, ptr %sp23689, align 16
  br i1 %3124, label %OP2802.JUMPDEST, label %OP6951.PUSH2

OP6951.PUSH2:                                     ; preds = %OP6946.DUP1
  store i256 256, ptr %sp23689, align 16
  store i256 256, ptr %sp23693, align 16
  %3126 = add i64 %len.addr.257, 9
  %sp23905 = getelementptr i256, ptr %sp23665, i64 8
  store i256 %swap.b23846, ptr %sp23905, align 16
  %3127 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23905, i8 17)
  %.not49050 = icmp eq i8 %3127, 0
  br i1 %.not49050, label %OP6955.DIV, label %return, !prof !6

OP6955.DIV:                                       ; preds = %OP6951.PUSH2
  %a23910 = load i256, ptr %sp23905, align 16
  %b23912 = load i256, ptr %sp23693, align 16
  %3128 = udiv i256 %a23910, %b23912
  %b23918 = load i256, ptr %sp23689, align 16
  %3129 = mul i256 %b23918, %3128
  store i256 %3129, ptr %sp23689, align 16
  %dup423922 = load i256, ptr %sp23677, align 16
  store i256 %dup423922, ptr %sp23693, align 16
  %3130 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup423922, i256 %3129, ptr %arg.ecx.addr)
  %.not49051 = icmp eq i8 %3130, 0
  br i1 %.not49051, label %OP6959.SWAP2, label %return, !prof !6

OP6959.SWAP2:                                     ; preds = %OP6955.DIV
  %swap.b23933 = load i256, ptr %sp23677, align 16
  store i256 32, ptr %sp23689, align 16
  %3131 = add i256 %swap.b23933, 32
  store i256 %3131, ptr %sp23677, align 16
  br label %OP2837.JUMPDEST

OP6965.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %sp23950.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp23954.phi.trans.insert = getelementptr i256, ptr %sp23950.phi.trans.insert, i64 -2
  %swap.b23955.pre = load i256, ptr %sp23954.phi.trans.insert, align 16
  %sp23959.phi.trans.insert = getelementptr i256, ptr %sp23950.phi.trans.insert, i64 -1
  %swap.b23960.pre = load i256, ptr %sp23959.phi.trans.insert, align 16
  br label %OP6965.JUMPDEST

OP6965.JUMPDEST:                                  ; preds = %OP6965.JUMPDEST.loopexit, %OP2585.JUMPDEST
  %swap.b23960 = phi i256 [ %1250, %OP2585.JUMPDEST ], [ %swap.b23960.pre, %OP6965.JUMPDEST.loopexit ]
  %swap.b23955 = phi i256 [ %1248, %OP2585.JUMPDEST ], [ %swap.b23955.pre, %OP6965.JUMPDEST.loopexit ]
  %len.addr.258 = phi i64 [ %len.addr.132, %OP2585.JUMPDEST ], [ %len.addr.357, %OP6965.JUMPDEST.loopexit ]
  %3132 = add i64 %len.addr.258, 1
  %sp23950 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.258
  %sp23954 = getelementptr i256, ptr %sp23950, i64 -2
  %sp23959 = getelementptr i256, ptr %sp23950, i64 -1
  store i256 %swap.b23960, ptr %sp23954, align 16
  %3133 = and i256 %swap.b23955, 1461501637330902918203684832716283019655932542975
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp23959, i8 0, i64 32, i1 false)
  store i256 %3133, ptr %sp23950, align 16
  %3134 = add i64 %len.addr.258, 2
  %sp23982 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3132
  store i256 0, ptr %sp23982, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !550)
  %ecx.memory.addr.i50239 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50240 = load ptr, ptr %ecx.memory.addr.i50239, align 8, !alias.scope !550
  %ecx.memory.len.addr.i50241 = getelementptr inbounds i8, ptr %ecx.memory.i50240, i64 16
  %ecx.memory.len.i50242 = load i64, ptr %ecx.memory.len.addr.i50241, align 8, !noalias !550
  %ecx.memory.last_checkpoint.addr.i50243 = getelementptr inbounds i8, ptr %ecx.memory.i50240, i64 48
  %ecx.memory.last_checkpoint.i50244 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50243, align 8, !noalias !550
  %3135 = sub i64 %ecx.memory.len.i50242, %ecx.memory.last_checkpoint.i50244
  %3136 = icmp ult i64 %3135, 32
  br i1 %3136, label %resize.i50250, label %OP6975.PUSH1, !prof !5

resize.i50250:                                    ; preds = %OP6965.JUMPDEST
  %3137 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50251 = icmp eq i8 %3137, 0
  br i1 %.not.i50251, label %OP6975.PUSH1, label %return, !prof !6

OP6975.PUSH1:                                     ; preds = %OP6965.JUMPDEST, %resize.i50250
  %ecx.memory.buffer.ptr.shared.addr.i50246 = getelementptr inbounds i8, ptr %ecx.memory.i50240, i64 8
  %ecx.memory.buffer.ptr.shared.i50247 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50246, align 8, !noalias !550
  %ecx.memory.buffer.ptr.i50248 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50247, i64 %ecx.memory.last_checkpoint.i50244
  %3138 = tail call i256 @llvm.bswap.i256(i256 %3133)
  store i256 %3138, ptr %ecx.memory.buffer.ptr.i50248, align 1, !noalias !550
  store i256 32, ptr %sp23950, align 16
  store i256 16, ptr %sp23982, align 16
  %sp24000 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3134
  store i256 32, ptr %sp24000, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !553)
  %ecx.memory.i50254 = load ptr, ptr %ecx.memory.addr.i50239, align 8, !alias.scope !553
  %ecx.memory.len.addr.i50255 = getelementptr inbounds i8, ptr %ecx.memory.i50254, i64 16
  %ecx.memory.len.i50256 = load i64, ptr %ecx.memory.len.addr.i50255, align 8, !noalias !553
  %ecx.memory.last_checkpoint.addr.i50257 = getelementptr inbounds i8, ptr %ecx.memory.i50254, i64 48
  %ecx.memory.last_checkpoint.i50258 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50257, align 8, !noalias !553
  %3139 = sub i64 %ecx.memory.len.i50256, %ecx.memory.last_checkpoint.i50258
  %3140 = icmp ult i64 %3139, 64
  br i1 %3140, label %resize.i50265, label %OP6980.PUSH1, !prof !5

resize.i50265:                                    ; preds = %OP6975.PUSH1
  %3141 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50266 = icmp eq i8 %3141, 0
  br i1 %.not.i50266, label %OP6980.PUSH1, label %return, !prof !6

OP6980.PUSH1:                                     ; preds = %OP6975.PUSH1, %resize.i50265
  %ecx.memory.buffer.ptr.shared.addr.i50260 = getelementptr inbounds i8, ptr %ecx.memory.i50254, i64 8
  %ecx.memory.buffer.ptr.shared.i50261 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50260, align 8, !noalias !553
  %ecx.memory.buffer.ptr.i50262 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50261, i64 %ecx.memory.last_checkpoint.i50258
  %slot.i50263 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50262, i64 32
  store i256 7237005577332262213973186563042994240829374041602535252466099000494570602496, ptr %slot.i50263, align 1, !noalias !553
  %3142 = add i64 %len.addr.258, 3
  store i256 64, ptr %sp23982, align 16
  store i256 64, ptr %sp24000, align 16
  %dup424014 = load i256, ptr %sp23959, align 16
  %sp24015 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3142
  store i256 %dup424014, ptr %sp24015, align 16
  %3143 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24000)
  %.not49041 = icmp eq i8 %3143, 0
  br i1 %.not49041, label %OP6984.SWAP4, label %return, !prof !6

OP6984.SWAP4:                                     ; preds = %OP6980.PUSH1
  %swap.a24020 = load i256, ptr %sp24000, align 16
  %swap.b24022 = load i256, ptr %sp23954, align 16
  store i256 %swap.a24020, ptr %sp23954, align 16
  store i256 %swap.b24022, ptr %sp24000, align 16
  %dup424025 = load i256, ptr %sp23959, align 16
  store i256 %dup424025, ptr %sp24015, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !556)
  %ecx.memory.i50269 = load ptr, ptr %ecx.memory.addr.i50239, align 8, !alias.scope !556
  %ecx.memory.len.addr.i50270 = getelementptr inbounds i8, ptr %ecx.memory.i50269, i64 16
  %ecx.memory.len.i50271 = load i64, ptr %ecx.memory.len.addr.i50270, align 8, !noalias !556
  %ecx.memory.last_checkpoint.addr.i50272 = getelementptr inbounds i8, ptr %ecx.memory.i50269, i64 48
  %ecx.memory.last_checkpoint.i50273 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50272, align 8, !noalias !556
  %3144 = sub i64 %ecx.memory.len.i50271, %ecx.memory.last_checkpoint.i50273
  %3145 = icmp ugt i256 %dup424025, 18446744073709551615
  %3146 = trunc i256 %dup424025 to i64
  %3147 = add i64 %3146, 32
  %3148 = icmp ugt i64 %3146, -33
  %3149 = or i1 %3145, %3148
  %3150 = select i1 %3149, i64 -1, i64 %3147
  %3151 = icmp ugt i64 %3150, %3144
  br i1 %3151, label %resize.i50280, label %OP6987.SWAP3, !prof !5

resize.i50280:                                    ; preds = %OP6984.SWAP4
  %3152 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3150)
  %.not.i50281 = icmp eq i8 %3152, 0
  br i1 %.not.i50281, label %OP6987.SWAP3, label %return, !prof !6

OP6987.SWAP3:                                     ; preds = %OP6984.SWAP4, %resize.i50280
  %ecx.memory.buffer.ptr.shared.addr.i50275 = getelementptr inbounds i8, ptr %ecx.memory.i50269, i64 8
  %ecx.memory.buffer.ptr.shared.i50276 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50275, align 8, !noalias !556
  %ecx.memory.buffer.ptr.i50277 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50276, i64 %ecx.memory.last_checkpoint.i50273
  %slot.i50278 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50277, i64 %3146
  %3153 = tail call i256 @llvm.bswap.i256(i256 %swap.b24022)
  store i256 %3153, ptr %slot.i50278, align 1, !noalias !556
  %swap.a24034 = load i256, ptr %sp23982, align 16
  %swap.b24036 = load i256, ptr %sp23954, align 16
  store i256 %swap.a24034, ptr %sp23954, align 16
  %swap.b24041 = load i256, ptr %sp23950, align 16
  store i256 %swap.b24036, ptr %sp23950, align 16
  store i256 %swap.b24041, ptr %sp23982, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !559)
  %ecx.memory.i50284 = load ptr, ptr %ecx.memory.addr.i50239, align 8, !alias.scope !559
  %ecx.memory.len.addr.i50285 = getelementptr inbounds i8, ptr %ecx.memory.i50284, i64 16
  %ecx.memory.len.i50286 = load i64, ptr %ecx.memory.len.addr.i50285, align 8, !noalias !559
  %ecx.memory.last_checkpoint.addr.i50287 = getelementptr inbounds i8, ptr %ecx.memory.i50284, i64 48
  %ecx.memory.last_checkpoint.i50288 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50287, align 8, !noalias !559
  %3154 = sub i64 %ecx.memory.len.i50286, %ecx.memory.last_checkpoint.i50288
  %3155 = icmp ugt i256 %swap.b24041, 18446744073709551615
  %3156 = trunc i256 %swap.b24041 to i64
  %3157 = add i64 %3156, 32
  %3158 = icmp ugt i64 %3156, -33
  %3159 = or i1 %3155, %3158
  %3160 = select i1 %3159, i64 -1, i64 %3157
  %3161 = icmp ugt i64 %3160, %3154
  br i1 %3161, label %resize.i50295, label %OP6990.KECCAK256, !prof !5

resize.i50295:                                    ; preds = %OP6987.SWAP3
  %3162 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3160)
  %.not.i50296 = icmp eq i8 %3162, 0
  br i1 %.not.i50296, label %OP6990.KECCAK256, label %return, !prof !6

OP6990.KECCAK256:                                 ; preds = %OP6987.SWAP3, %resize.i50295
  %ecx.memory.buffer.ptr.shared.addr.i50290 = getelementptr inbounds i8, ptr %ecx.memory.i50284, i64 8
  %ecx.memory.buffer.ptr.shared.i50291 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50290, align 8, !noalias !559
  %ecx.memory.buffer.ptr.i50292 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50291, i64 %ecx.memory.last_checkpoint.i50288
  %slot.i50293 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50292, i64 %3156
  %3163 = tail call i256 @llvm.bswap.i256(i256 %swap.b24036)
  store i256 %3163, ptr %slot.i50293, align 1, !noalias !559
  %3164 = add i64 %len.addr.258, -1
  %3165 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23954)
  %.not49044 = icmp eq i8 %3165, 0
  br i1 %.not49044, label %OP6991.SLOAD, label %return, !prof !6

OP6991.SLOAD:                                     ; preds = %OP6990.KECCAK256
  %3166 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp23954, i8 17)
  %.not49045 = icmp eq i8 %3166, 0
  br i1 %.not49045, label %OP6992.PUSH1, label %return, !prof !6

OP6992.PUSH1:                                     ; preds = %OP6991.SLOAD
  %sp24052 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3164
  store i256 255, ptr %sp24052, align 16
  %b24057 = load i256, ptr %sp23954, align 16
  %3167 = and i256 %b24057, 255
  %sp24062 = getelementptr i256, ptr %sp23950, i64 -3
  %swap.b24063 = load i256, ptr %sp24062, align 16
  store i256 %3167, ptr %sp24062, align 16
  store i256 %swap.b24063, ptr %sp23954, align 16
  %3168 = add i64 %len.addr.258, -2
  br label %dynamic_jump_table.preheader

OP6996.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2612.JUMPDEST
  %len.addr.259 = phi i64 [ %1271, %OP2612.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3169 = add i64 %len.addr.259, 1
  %sp24069 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.259
  store i256 1, ptr %sp24069, align 16
  %3170 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24069, i8 17)
  %.not48404 = icmp eq i8 %3170, 0
  br i1 %.not48404, label %OP6999.PUSH21, label %return, !prof !6

OP6999.PUSH21:                                    ; preds = %OP6996.JUMPDEST
  %3171 = add i64 %len.addr.259, 2
  %sp24073 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3169
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp24073, align 16
  %swap.b24078 = load i256, ptr %sp24069, align 16
  store i256 1461501637330902918203684832716283019655932542976, ptr %sp24069, align 16
  store i256 %swap.b24078, ptr %sp24073, align 16
  %3172 = lshr i256 %swap.b24078, 160
  store i256 %3172, ptr %sp24069, align 16
  store i256 255, ptr %sp24073, align 16
  %3173 = and i256 %swap.b24078, 372682917519380244141939632342652170012262798458880
  %3174 = icmp eq i256 %3173, 0
  %3175 = zext i1 %3174 to i256
  store i256 %3175, ptr %sp24069, align 16
  br i1 %3174, label %OP7038.JUMPDEST, label %OP7007.PUSH1

OP7007.PUSH1:                                     ; preds = %OP6999.PUSH21
  store i256 64, ptr %sp24069, align 16
  store i256 64, ptr %sp24073, align 16
  %mload.out.slot24109 = alloca i256, align 16
  %3176 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24109, ptr %arg.ecx.addr)
  %.not48405 = icmp eq i8 %3176, 0
  br i1 %.not48405, label %OP7009.MLOAD.contd, label %return, !prof !6

OP7009.MLOAD.contd:                               ; preds = %OP7007.PUSH1
  %mload.out24110 = load i256, ptr %mload.out.slot24109, align 16
  store i256 %mload.out24110, ptr %sp24073, align 16
  %sp24113 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3171
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp24113, align 16
  %sp24117 = getelementptr i256, ptr %sp24069, i64 3
  store i256 %mload.out24110, ptr %sp24117, align 16
  %3177 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out24110, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48406 = icmp eq i8 %3177, 0
  br i1 %.not48406, label %OP7013.PUSH1, label %return, !prof !6

OP7013.PUSH1:                                     ; preds = %OP7009.MLOAD.contd
  store i256 32, ptr %sp24113, align 16
  store i256 4, ptr %sp24117, align 16
  %dup324129 = load i256, ptr %sp24073, align 16
  %sp24130 = getelementptr i256, ptr %sp24069, i64 4
  store i256 %dup324129, ptr %sp24130, align 16
  %3178 = add i256 %dup324129, 4
  store i256 %3178, ptr %sp24117, align 16
  %3179 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3178, i256 32, ptr %arg.ecx.addr)
  %.not48407 = icmp eq i8 %3179, 0
  br i1 %.not48407, label %OP7018.PUSH1, label %return, !prof !6

OP7018.PUSH1:                                     ; preds = %OP7013.PUSH1
  store i256 16, ptr %sp24113, align 16
  store i256 36, ptr %sp24117, align 16
  %dup324148 = load i256, ptr %sp24073, align 16
  store i256 %dup324148, ptr %sp24130, align 16
  %3180 = add i256 %dup324148, 36
  store i256 %3180, ptr %sp24117, align 16
  %3181 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3180, i256 16, ptr %arg.ecx.addr)
  %.not48408 = icmp eq i8 %3181, 0
  br i1 %.not48408, label %OP7023.PUSH32, label %return, !prof !6

OP7023.PUSH32:                                    ; preds = %OP7018.PUSH1
  store i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %sp24113, align 16
  %dup324167 = load i256, ptr %sp24073, align 16
  store i256 %dup324167, ptr %sp24130, align 16
  %3182 = add i256 %dup324167, 68
  store i256 %3182, ptr %sp24117, align 16
  %3183 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3182, i256 36357222666917036906347953728281423178299644588805297587650243726591593021440, ptr %arg.ecx.addr)
  %.not48409 = icmp eq i8 %3183, 0
  br i1 %.not48409, label %OP7028.SWAP1, label %return, !prof !6

OP7028.SWAP1:                                     ; preds = %OP7023.PUSH32
  %swap.a24182 = load i256, ptr %sp24073, align 16
  %swap.b24184 = load i256, ptr %sp24069, align 16
  store i256 %swap.a24182, ptr %sp24069, align 16
  store i256 %swap.b24184, ptr %sp24073, align 16
  %mload.out.slot24188 = alloca i256, align 16
  %3184 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b24184, ptr %mload.out.slot24188, ptr %arg.ecx.addr)
  %.not48410 = icmp eq i8 %3184, 0
  br i1 %.not48410, label %OP7029.MLOAD.contd, label %return, !prof !6

OP7029.MLOAD.contd:                               ; preds = %OP7028.SWAP1
  %mload.out24189 = load i256, ptr %mload.out.slot24188, align 16
  %swap.b24195 = load i256, ptr %sp24069, align 16
  %3185 = sub i256 %swap.b24195, %mload.out24189
  store i256 100, ptr %sp24113, align 16
  %3186 = add i256 %3185, 100
  store i256 %3186, ptr %sp24069, align 16
  store i256 %mload.out24189, ptr %sp24073, align 16
  %3187 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24069, i8 16)
  %.not48411 = icmp eq i8 %3187, 0
  %spec.select36642 = select i1 %.not48411, i8 16, i8 %3187, !prof !6
  br label %return

OP7038.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6999.PUSH21
  %len.addr.260 = phi i64 [ %len.addr.259, %OP6999.PUSH21 ], [ %len.addr.357, %dynamic_jump_table ]
  %3188 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.260
  %sp24228 = getelementptr i256, ptr %3188, i64 -9
  %dup924229 = load i256, ptr %sp24228, align 16
  store i256 %dup924229, ptr %3188, align 16
  %sp24232 = getelementptr i256, ptr %3188, i64 1
  store i256 15158, ptr %sp24232, align 16
  %3189 = add i64 %len.addr.260, 3
  %sp24236 = getelementptr i256, ptr %3188, i64 2
  store i256 %dup924229, ptr %sp24236, align 16
  br label %OP7491.JUMPDEST

OP7044.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3190 = add i64 %len.addr.357, -1
  %sp24240 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3190
  %a24241 = load i256, ptr %sp24240, align 16
  %3191 = icmp eq i256 %a24241, 0
  %3192 = zext i1 %3191 to i256
  store i256 %3192, ptr %sp24240, align 16
  br i1 %3191, label %OP7086.JUMPDEST, label %OP7048.PUSH1

OP7048.PUSH1:                                     ; preds = %OP7044.JUMPDEST
  store i256 64, ptr %sp24240, align 16
  %mload.out.slot24251 = alloca i256, align 16
  %3193 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24251, ptr %arg.ecx.addr)
  %.not48028 = icmp eq i8 %3193, 0
  br i1 %.not48028, label %OP7049.MLOAD.contd, label %return, !prof !6

OP7049.MLOAD.contd:                               ; preds = %OP7048.PUSH1
  %mload.out24252 = load i256, ptr %mload.out.slot24251, align 16
  store i256 %mload.out24252, ptr %sp24240, align 16
  %3194 = add i64 %len.addr.357, 1
  %sp24255 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp24255, align 16
  %3195 = add i64 %len.addr.357, 2
  %sp24257 = getelementptr i256, ptr %sp24255, i64 -1
  %sp24259 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3194
  store i256 %mload.out24252, ptr %sp24259, align 16
  %3196 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out24252, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48029 = icmp eq i8 %3196, 0
  br i1 %.not48029, label %OP7053.PUSH1, label %return, !prof !6

OP7053.PUSH1:                                     ; preds = %OP7049.MLOAD.contd
  store i256 4, ptr %sp24255, align 16
  %b24271 = load i256, ptr %sp24240, align 16
  %3197 = add i256 %b24271, 4
  store i256 %3197, ptr %sp24240, align 16
  store i256 %3197, ptr %sp24255, align 16
  store i256 %3197, ptr %sp24259, align 16
  %sp24282 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3195
  store i256 32, ptr %sp24282, align 16
  %3198 = add i256 %b24271, 36
  store i256 %3198, ptr %sp24259, align 16
  store i256 %3197, ptr %sp24282, align 16
  %sp24296 = getelementptr i256, ptr %sp24255, i64 3
  store i256 %3198, ptr %sp24296, align 16
  store i256 32, ptr %sp24282, align 16
  store i256 %3197, ptr %sp24296, align 16
  %3199 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3197, i256 32, ptr %arg.ecx.addr)
  %.not48030 = icmp eq i8 %3199, 0
  br i1 %.not48030, label %OP7064.PUSH1, label %return, !prof !6

OP7064.PUSH1:                                     ; preds = %OP7053.PUSH1
  store i256 37, ptr %sp24282, align 16
  %dup224316 = load i256, ptr %sp24259, align 16
  store i256 %dup224316, ptr %sp24296, align 16
  %3200 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup224316, i256 37, ptr %arg.ecx.addr)
  %.not48031 = icmp eq i8 %3200, 0
  br i1 %.not48031, label %OP7067.PUSH1, label %return, !prof !6

OP7067.PUSH1:                                     ; preds = %OP7064.PUSH1
  store i256 32, ptr %sp24282, align 16
  %b24329 = load i256, ptr %sp24259, align 16
  %3201 = add i256 %b24329, 32
  store i256 %3201, ptr %sp24259, align 16
  store i256 %3201, ptr %sp24282, align 16
  store i256 23300, ptr %sp24296, align 16
  %sp24338 = getelementptr i256, ptr %sp24255, i64 4
  store i256 37, ptr %sp24338, align 16
  store i256 37, ptr %sp24282, align 16
  store i256 %3201, ptr %sp24338, align 16
  %3202 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24282)
  %.not48032 = icmp eq i8 %3202, 0
  br i1 %.not48032, label %OP7074.PUSH1, label %return, !prof !6

OP7074.PUSH1:                                     ; preds = %OP7067.PUSH1
  store i256 64, ptr %sp24282, align 16
  %b24352 = load i256, ptr %sp24259, align 16
  %3203 = add i256 %b24352, 64
  store i256 %3203, ptr %sp24259, align 16
  %swap.b24358 = load i256, ptr %sp24257, align 16
  store i256 %3203, ptr %sp24257, align 16
  store i256 %swap.b24358, ptr %sp24259, align 16
  store i256 64, ptr %sp24255, align 16
  %mload.out.slot24366 = alloca i256, align 16
  %3204 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24366, ptr %arg.ecx.addr)
  %.not48033 = icmp eq i8 %3204, 0
  br i1 %.not48033, label %OP7080.MLOAD.contd, label %return, !prof !6

OP7080.MLOAD.contd:                               ; preds = %OP7074.PUSH1
  %mload.out24367 = load i256, ptr %mload.out.slot24366, align 16
  store i256 %mload.out24367, ptr %sp24255, align 16
  store i256 %mload.out24367, ptr %sp24259, align 16
  %swap.b24377 = load i256, ptr %sp24257, align 16
  store i256 %mload.out24367, ptr %sp24257, align 16
  store i256 %swap.b24377, ptr %sp24259, align 16
  %3205 = sub i256 %swap.b24377, %mload.out24367
  store i256 %3205, ptr %sp24255, align 16
  store i256 %3205, ptr %sp24257, align 16
  store i256 %mload.out24367, ptr %sp24255, align 16
  %3206 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24257, i8 16)
  %.not48034 = icmp eq i8 %3206, 0
  %spec.select36643 = select i1 %.not48034, i8 16, i8 %3206, !prof !6
  br label %return

OP7086.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7044.JUMPDEST
  %len.addr.261 = phi i64 [ %3190, %OP7044.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3207 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.261
  %sp24393 = getelementptr i256, ptr %3207, i64 -9
  %dup924394 = load i256, ptr %sp24393, align 16
  store i256 %dup924394, ptr %3207, align 16
  %sp24397 = getelementptr i256, ptr %3207, i64 1
  store i256 15254, ptr %sp24397, align 16
  %3208 = add i64 %len.addr.261, 3
  %sp24401 = getelementptr i256, ptr %3207, i64 2
  store i256 %dup924394, ptr %sp24401, align 16
  br label %OP7491.JUMPDEST

OP7092.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3209 = add i64 %len.addr.357, -1
  %sp24405 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3209
  %a24406 = load i256, ptr %sp24405, align 16
  %3210 = icmp eq i256 %a24406, 0
  %3211 = zext i1 %3210 to i256
  store i256 %3211, ptr %sp24405, align 16
  br i1 %3210, label %OP7134.JUMPDEST, label %OP7096.PUSH1

OP7096.PUSH1:                                     ; preds = %OP7092.JUMPDEST
  store i256 64, ptr %sp24405, align 16
  %mload.out.slot24416 = alloca i256, align 16
  %3212 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24416, ptr %arg.ecx.addr)
  %.not48014 = icmp eq i8 %3212, 0
  br i1 %.not48014, label %OP7097.MLOAD.contd, label %return, !prof !6

OP7097.MLOAD.contd:                               ; preds = %OP7096.PUSH1
  %mload.out24417 = load i256, ptr %mload.out.slot24416, align 16
  store i256 %mload.out24417, ptr %sp24405, align 16
  %3213 = add i64 %len.addr.357, 1
  %sp24420 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp24420, align 16
  %3214 = add i64 %len.addr.357, 2
  %sp24422 = getelementptr i256, ptr %sp24420, i64 -1
  %sp24424 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3213
  store i256 %mload.out24417, ptr %sp24424, align 16
  %3215 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out24417, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48015 = icmp eq i8 %3215, 0
  br i1 %.not48015, label %OP7101.PUSH1, label %return, !prof !6

OP7101.PUSH1:                                     ; preds = %OP7097.MLOAD.contd
  store i256 4, ptr %sp24420, align 16
  %b24436 = load i256, ptr %sp24405, align 16
  %3216 = add i256 %b24436, 4
  store i256 %3216, ptr %sp24405, align 16
  store i256 %3216, ptr %sp24420, align 16
  store i256 %3216, ptr %sp24424, align 16
  %sp24447 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3214
  store i256 32, ptr %sp24447, align 16
  %3217 = add i256 %b24436, 36
  store i256 %3217, ptr %sp24424, align 16
  store i256 %3216, ptr %sp24447, align 16
  %sp24461 = getelementptr i256, ptr %sp24420, i64 3
  store i256 %3217, ptr %sp24461, align 16
  store i256 32, ptr %sp24447, align 16
  store i256 %3216, ptr %sp24461, align 16
  %3218 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3216, i256 32, ptr %arg.ecx.addr)
  %.not48016 = icmp eq i8 %3218, 0
  br i1 %.not48016, label %OP7112.PUSH1, label %return, !prof !6

OP7112.PUSH1:                                     ; preds = %OP7101.PUSH1
  store i256 37, ptr %sp24447, align 16
  %dup224481 = load i256, ptr %sp24424, align 16
  store i256 %dup224481, ptr %sp24461, align 16
  %3219 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup224481, i256 37, ptr %arg.ecx.addr)
  %.not48017 = icmp eq i8 %3219, 0
  br i1 %.not48017, label %OP7115.PUSH1, label %return, !prof !6

OP7115.PUSH1:                                     ; preds = %OP7112.PUSH1
  store i256 32, ptr %sp24447, align 16
  %b24494 = load i256, ptr %sp24424, align 16
  %3220 = add i256 %b24494, 32
  store i256 %3220, ptr %sp24424, align 16
  store i256 %3220, ptr %sp24447, align 16
  store i256 23300, ptr %sp24461, align 16
  %sp24503 = getelementptr i256, ptr %sp24420, i64 4
  store i256 37, ptr %sp24503, align 16
  store i256 37, ptr %sp24447, align 16
  store i256 %3220, ptr %sp24503, align 16
  %3221 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24447)
  %.not48018 = icmp eq i8 %3221, 0
  br i1 %.not48018, label %OP7122.PUSH1, label %return, !prof !6

OP7122.PUSH1:                                     ; preds = %OP7115.PUSH1
  store i256 64, ptr %sp24447, align 16
  %b24517 = load i256, ptr %sp24424, align 16
  %3222 = add i256 %b24517, 64
  store i256 %3222, ptr %sp24424, align 16
  %swap.b24523 = load i256, ptr %sp24422, align 16
  store i256 %3222, ptr %sp24422, align 16
  store i256 %swap.b24523, ptr %sp24424, align 16
  store i256 64, ptr %sp24420, align 16
  %mload.out.slot24531 = alloca i256, align 16
  %3223 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24531, ptr %arg.ecx.addr)
  %.not48019 = icmp eq i8 %3223, 0
  br i1 %.not48019, label %OP7128.MLOAD.contd, label %return, !prof !6

OP7128.MLOAD.contd:                               ; preds = %OP7122.PUSH1
  %mload.out24532 = load i256, ptr %mload.out.slot24531, align 16
  store i256 %mload.out24532, ptr %sp24420, align 16
  store i256 %mload.out24532, ptr %sp24424, align 16
  %swap.b24542 = load i256, ptr %sp24422, align 16
  store i256 %mload.out24532, ptr %sp24422, align 16
  store i256 %swap.b24542, ptr %sp24424, align 16
  %3224 = sub i256 %swap.b24542, %mload.out24532
  store i256 %3224, ptr %sp24420, align 16
  store i256 %3224, ptr %sp24422, align 16
  store i256 %mload.out24532, ptr %sp24420, align 16
  %3225 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24422, i8 16)
  %.not48020 = icmp eq i8 %3225, 0
  %spec.select36644 = select i1 %.not48020, i8 16, i8 %3225, !prof !6
  br label %return

OP7134.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7092.JUMPDEST
  %len.addr.262 = phi i64 [ %3209, %OP7092.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp24558 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.262
  store i256 14820, ptr %sp24558, align 16
  %sp24560 = getelementptr i256, ptr %sp24558, i64 -11
  %dup1224561 = load i256, ptr %sp24560, align 16
  %sp24562 = getelementptr i256, ptr %sp24558, i64 1
  store i256 %dup1224561, ptr %sp24562, align 16
  %sp24564 = getelementptr i256, ptr %sp24558, i64 -10
  %dup1224565 = load i256, ptr %sp24564, align 16
  %sp24566 = getelementptr i256, ptr %sp24558, i64 2
  store i256 %dup1224565, ptr %sp24566, align 16
  %sp24568 = getelementptr i256, ptr %sp24558, i64 -9
  %dup1224569 = load i256, ptr %sp24568, align 16
  %sp24570 = getelementptr i256, ptr %sp24558, i64 3
  store i256 %dup1224569, ptr %sp24570, align 16
  %sp24572 = getelementptr i256, ptr %sp24558, i64 -8
  %dup1224573 = load i256, ptr %sp24572, align 16
  %sp24574 = getelementptr i256, ptr %sp24558, i64 4
  store i256 %dup1224573, ptr %sp24574, align 16
  %sp24576 = getelementptr i256, ptr %sp24558, i64 -7
  %dup1224577 = load i256, ptr %sp24576, align 16
  %sp24578 = getelementptr i256, ptr %sp24558, i64 5
  store i256 %dup1224577, ptr %sp24578, align 16
  %sp24580 = getelementptr i256, ptr %sp24558, i64 -6
  %dup1224581 = load i256, ptr %sp24580, align 16
  %sp24582 = getelementptr i256, ptr %sp24558, i64 6
  store i256 %dup1224581, ptr %sp24582, align 16
  %sp24584 = getelementptr i256, ptr %sp24558, i64 -5
  %dup1224585 = load i256, ptr %sp24584, align 16
  %sp24586 = getelementptr i256, ptr %sp24558, i64 7
  store i256 %dup1224585, ptr %sp24586, align 16
  %sp24588 = getelementptr i256, ptr %sp24558, i64 -4
  %dup1224589 = load i256, ptr %sp24588, align 16
  %sp24590 = getelementptr i256, ptr %sp24558, i64 8
  store i256 %dup1224589, ptr %sp24590, align 16
  %3226 = add i64 %len.addr.262, 10
  %sp24592 = getelementptr i256, ptr %sp24558, i64 -3
  %dup1224593 = load i256, ptr %sp24592, align 16
  %sp24594 = getelementptr i256, ptr %sp24558, i64 9
  store i256 %dup1224593, ptr %sp24594, align 16
  br label %OP9121.JUMPDEST

OP7147.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2680.JUMPDEST
  %len.addr.263 = phi i64 [ %1284, %OP2680.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3227 = add i64 %len.addr.263, 1
  %sp24598 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.263
  store i256 0, ptr %sp24598, align 16
  %3228 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24598, i8 17)
  %.not48379 = icmp eq i8 %3228, 0
  br i1 %.not48379, label %OP7150.PUSH20, label %return, !prof !6

OP7150.PUSH20:                                    ; preds = %OP7147.JUMPDEST
  %3229 = add i64 %len.addr.263, 2
  %sp24602 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3227
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp24602, align 16
  %b24607 = load i256, ptr %sp24598, align 16
  %3230 = and i256 %b24607, 1461501637330902918203684832716283019655932542975
  store i256 %3230, ptr %sp24598, align 16
  %contract.caller.addr24610 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller24611 = load i160, ptr %contract.caller.addr24610, align 16
  %3231 = tail call i160 @llvm.bswap.i160(i160 %contract.caller24611)
  %3232 = zext i160 %3231 to i256
  store i256 %3232, ptr %sp24602, align 16
  %3233 = icmp eq i256 %3230, %3232
  %3234 = zext i1 %3233 to i256
  store i256 %3234, ptr %sp24598, align 16
  br i1 %3233, label %OP7188.JUMPDEST, label %OP7156.PUSH1

OP7156.PUSH1:                                     ; preds = %OP7150.PUSH20
  store i256 64, ptr %sp24598, align 16
  store i256 64, ptr %sp24602, align 16
  %mload.out.slot24631 = alloca i256, align 16
  %3235 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24631, ptr %arg.ecx.addr)
  %.not48380 = icmp eq i8 %3235, 0
  br i1 %.not48380, label %OP7158.MLOAD.contd, label %return, !prof !6

OP7158.MLOAD.contd:                               ; preds = %OP7156.PUSH1
  %mload.out24632 = load i256, ptr %mload.out.slot24631, align 16
  store i256 %mload.out24632, ptr %sp24602, align 16
  %3236 = add i64 %len.addr.263, 3
  %sp24635 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3229
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp24635, align 16
  %sp24639 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3236
  store i256 %mload.out24632, ptr %sp24639, align 16
  %3237 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out24632, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48381 = icmp eq i8 %3237, 0
  br i1 %.not48381, label %OP7162.PUSH1, label %return, !prof !6

OP7162.PUSH1:                                     ; preds = %OP7158.MLOAD.contd
  store i256 32, ptr %sp24635, align 16
  store i256 4, ptr %sp24639, align 16
  %dup324651 = load i256, ptr %sp24602, align 16
  %sp24652 = getelementptr i256, ptr %sp24598, i64 4
  store i256 %dup324651, ptr %sp24652, align 16
  %3238 = add i256 %dup324651, 4
  store i256 %3238, ptr %sp24639, align 16
  store i256 32, ptr %sp24652, align 16
  store i256 32, ptr %sp24639, align 16
  store i256 %3238, ptr %sp24652, align 16
  %3239 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3238, i256 32, ptr %arg.ecx.addr)
  %.not48382 = icmp eq i8 %3239, 0
  br i1 %.not48382, label %OP7169.PUSH1, label %return, !prof !6

OP7169.PUSH1:                                     ; preds = %OP7162.PUSH1
  store i256 36, ptr %sp24639, align 16
  %dup324677 = load i256, ptr %sp24602, align 16
  store i256 %dup324677, ptr %sp24652, align 16
  %3240 = add i256 %dup324677, 36
  store i256 %3240, ptr %sp24639, align 16
  %b24689 = load i256, ptr %sp24635, align 16
  %3241 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3240, i256 %b24689, ptr %arg.ecx.addr)
  %.not48383 = icmp eq i8 %3241, 0
  br i1 %.not48383, label %OP7173.PUSH32, label %return, !prof !6

OP7173.PUSH32:                                    ; preds = %OP7169.PUSH1
  store i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %sp24635, align 16
  store i256 68, ptr %sp24639, align 16
  %dup324696 = load i256, ptr %sp24602, align 16
  store i256 %dup324696, ptr %sp24652, align 16
  %3242 = add i256 %dup324696, 68
  store i256 %3242, ptr %sp24639, align 16
  %3243 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3242, i256 35943731656364841964516503116990081338611484598491072354577564874054038349170, ptr %arg.ecx.addr)
  %.not48384 = icmp eq i8 %3243, 0
  br i1 %.not48384, label %OP7178.SWAP1, label %return, !prof !6

OP7178.SWAP1:                                     ; preds = %OP7173.PUSH32
  %swap.a24711 = load i256, ptr %sp24602, align 16
  %swap.b24713 = load i256, ptr %sp24598, align 16
  store i256 %swap.a24711, ptr %sp24598, align 16
  store i256 %swap.b24713, ptr %sp24602, align 16
  %mload.out.slot24717 = alloca i256, align 16
  %3244 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b24713, ptr %mload.out.slot24717, ptr %arg.ecx.addr)
  %.not48385 = icmp eq i8 %3244, 0
  br i1 %.not48385, label %OP7179.MLOAD.contd, label %return, !prof !6

OP7179.MLOAD.contd:                               ; preds = %OP7178.SWAP1
  %mload.out24718 = load i256, ptr %mload.out.slot24717, align 16
  store i256 %mload.out24718, ptr %sp24602, align 16
  %swap.b24724 = load i256, ptr %sp24598, align 16
  store i256 %mload.out24718, ptr %sp24598, align 16
  store i256 %swap.b24724, ptr %sp24602, align 16
  store i256 %mload.out24718, ptr %sp24635, align 16
  store i256 %mload.out24718, ptr %sp24602, align 16
  store i256 %swap.b24724, ptr %sp24635, align 16
  %3245 = sub i256 %swap.b24724, %mload.out24718
  store i256 %3245, ptr %sp24602, align 16
  store i256 100, ptr %sp24635, align 16
  %3246 = add i256 %3245, 100
  store i256 %3246, ptr %sp24602, align 16
  store i256 %3246, ptr %sp24598, align 16
  store i256 %mload.out24718, ptr %sp24602, align 16
  %3247 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24598, i8 16)
  %.not48386 = icmp eq i8 %3247, 0
  %spec.select36645 = select i1 %.not48386, i8 16, i8 %3247, !prof !6
  br label %return

OP7188.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre53989 = add i64 %len.addr.357, 2
  %.pre54279 = add i64 %len.addr.357, 1
  br label %OP7188.JUMPDEST

OP7188.JUMPDEST:                                  ; preds = %OP7188.JUMPDEST.loopexit, %OP7150.PUSH20
  %.pre-phi54280 = phi i64 [ %.pre54279, %OP7188.JUMPDEST.loopexit ], [ %3227, %OP7150.PUSH20 ]
  %.pre-phi53990 = phi i64 [ %.pre53989, %OP7188.JUMPDEST.loopexit ], [ %3229, %OP7150.PUSH20 ]
  %len.addr.264 = phi i64 [ %len.addr.357, %OP7188.JUMPDEST.loopexit ], [ %len.addr.263, %OP7150.PUSH20 ]
  %sp24757 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.264
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp24757, align 16
  %sp24759 = getelementptr i256, ptr %sp24757, i64 -1
  %dup224760 = load i256, ptr %sp24759, align 16
  %sp24761 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54280
  store i256 %dup224760, ptr %sp24761, align 16
  %3248 = and i256 %dup224760, 1461501637330902918203684832716283019655932542975
  store i256 %3248, ptr %sp24757, align 16
  %.not48387 = icmp eq i256 %3248, 0
  br i1 %.not48387, label %OP7194.PUSH1, label %OP7232.JUMPDEST

OP7194.PUSH1:                                     ; preds = %OP7188.JUMPDEST
  store i256 64, ptr %sp24757, align 16
  %mload.out.slot24776 = alloca i256, align 16
  %3249 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24776, ptr %arg.ecx.addr)
  %.not48388 = icmp eq i8 %3249, 0
  br i1 %.not48388, label %OP7195.MLOAD.contd, label %return, !prof !6

OP7195.MLOAD.contd:                               ; preds = %OP7194.PUSH1
  %mload.out24777 = load i256, ptr %mload.out.slot24776, align 16
  store i256 %mload.out24777, ptr %sp24757, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp24761, align 16
  %3250 = add i64 %len.addr.264, 3
  %sp24784 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi53990
  store i256 %mload.out24777, ptr %sp24784, align 16
  %3251 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out24777, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48389 = icmp eq i8 %3251, 0
  br i1 %.not48389, label %OP7199.PUSH1, label %return, !prof !6

OP7199.PUSH1:                                     ; preds = %OP7195.MLOAD.contd
  store i256 4, ptr %sp24761, align 16
  %b24796 = load i256, ptr %sp24757, align 16
  %3252 = add i256 %b24796, 4
  store i256 %3252, ptr %sp24757, align 16
  store i256 %3252, ptr %sp24761, align 16
  store i256 %3252, ptr %sp24784, align 16
  %sp24807 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3250
  store i256 32, ptr %sp24807, align 16
  %3253 = add i256 %b24796, 36
  store i256 %3253, ptr %sp24784, align 16
  store i256 %3252, ptr %sp24807, align 16
  %sp24821 = getelementptr i256, ptr %sp24757, i64 4
  store i256 %3253, ptr %sp24821, align 16
  store i256 32, ptr %sp24807, align 16
  store i256 %3252, ptr %sp24821, align 16
  %3254 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3252, i256 32, ptr %arg.ecx.addr)
  %.not48390 = icmp eq i8 %3254, 0
  br i1 %.not48390, label %OP7210.PUSH1, label %return, !prof !6

OP7210.PUSH1:                                     ; preds = %OP7199.PUSH1
  store i256 38, ptr %sp24807, align 16
  %dup224841 = load i256, ptr %sp24784, align 16
  store i256 %dup224841, ptr %sp24821, align 16
  %3255 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup224841, i256 38, ptr %arg.ecx.addr)
  %.not48391 = icmp eq i8 %3255, 0
  br i1 %.not48391, label %OP7213.PUSH1, label %return, !prof !6

OP7213.PUSH1:                                     ; preds = %OP7210.PUSH1
  store i256 32, ptr %sp24807, align 16
  %b24854 = load i256, ptr %sp24784, align 16
  %3256 = add i256 %b24854, 32
  store i256 %3256, ptr %sp24784, align 16
  store i256 %3256, ptr %sp24807, align 16
  store i256 22252, ptr %sp24821, align 16
  %sp24863 = getelementptr i256, ptr %sp24757, i64 5
  store i256 38, ptr %sp24863, align 16
  store i256 38, ptr %sp24807, align 16
  store i256 %3256, ptr %sp24863, align 16
  %3257 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24807)
  %.not48392 = icmp eq i8 %3257, 0
  br i1 %.not48392, label %OP7220.PUSH1, label %return, !prof !6

OP7220.PUSH1:                                     ; preds = %OP7213.PUSH1
  store i256 64, ptr %sp24807, align 16
  %b24877 = load i256, ptr %sp24784, align 16
  %3258 = add i256 %b24877, 64
  store i256 %3258, ptr %sp24784, align 16
  %swap.b24883 = load i256, ptr %sp24757, align 16
  store i256 %3258, ptr %sp24757, align 16
  store i256 %swap.b24883, ptr %sp24784, align 16
  store i256 64, ptr %sp24761, align 16
  %mload.out.slot24891 = alloca i256, align 16
  %3259 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot24891, ptr %arg.ecx.addr)
  %.not48393 = icmp eq i8 %3259, 0
  br i1 %.not48393, label %OP7226.MLOAD.contd, label %return, !prof !6

OP7226.MLOAD.contd:                               ; preds = %OP7220.PUSH1
  %mload.out24892 = load i256, ptr %mload.out.slot24891, align 16
  store i256 %mload.out24892, ptr %sp24761, align 16
  store i256 %mload.out24892, ptr %sp24784, align 16
  %swap.b24902 = load i256, ptr %sp24757, align 16
  store i256 %mload.out24892, ptr %sp24757, align 16
  store i256 %swap.b24902, ptr %sp24784, align 16
  %3260 = sub i256 %swap.b24902, %mload.out24892
  store i256 %3260, ptr %sp24761, align 16
  store i256 %3260, ptr %sp24757, align 16
  store i256 %mload.out24892, ptr %sp24761, align 16
  %3261 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24757, i8 16)
  %.not48394 = icmp eq i8 %3261, 0
  %spec.select36646 = select i1 %.not48394, i8 16, i8 %3261, !prof !6
  br label %return

OP7232.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre53986 = add i64 %len.addr.357, 1
  br label %OP7232.JUMPDEST

OP7232.JUMPDEST:                                  ; preds = %OP7232.JUMPDEST.loopexit, %OP7188.JUMPDEST
  %.pre-phi53987 = phi i64 [ %.pre53986, %OP7232.JUMPDEST.loopexit ], [ %.pre-phi54280, %OP7188.JUMPDEST ]
  %len.addr.265 = phi i64 [ %len.addr.357, %OP7232.JUMPDEST.loopexit ], [ %len.addr.264, %OP7188.JUMPDEST ]
  %sp24918 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.265
  store i256 0, ptr %sp24918, align 16
  %3262 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24918, i8 17)
  %.not48395 = icmp eq i8 %3262, 0
  br i1 %.not48395, label %OP7235.PUSH1, label %return, !prof !6

OP7235.PUSH1:                                     ; preds = %OP7232.JUMPDEST
  %3263 = add i64 %len.addr.265, 2
  %sp24922 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi53987
  store i256 64, ptr %sp24922, align 16
  %3264 = add i64 %len.addr.265, 3
  %sp24926 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3263
  store i256 64, ptr %sp24926, align 16
  %ecx.memory.addr.i50298 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50299 = load ptr, ptr %ecx.memory.addr.i50298, align 8
  %ecx.memory.len.addr.i50300 = getelementptr inbounds i8, ptr %ecx.memory.i50299, i64 16
  %ecx.memory.len.i50301 = load i64, ptr %ecx.memory.len.addr.i50300, align 8, !noalias !562
  %ecx.memory.last_checkpoint.addr.i50302 = getelementptr inbounds i8, ptr %ecx.memory.i50299, i64 48
  %ecx.memory.last_checkpoint.i50303 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50302, align 8, !noalias !562
  %3265 = sub i64 %ecx.memory.len.i50301, %ecx.memory.last_checkpoint.i50303
  %3266 = icmp ult i64 %3265, 96
  br i1 %3266, label %resize.i50311, label %OP7237.MLOAD.contd, !prof !5

resize.i50311:                                    ; preds = %OP7235.PUSH1
  %3267 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !566
  %.not.i50312 = icmp eq i8 %3267, 0
  br i1 %.not.i50312, label %resize.i50311.OP7237.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50311.OP7237.MLOAD.contd_crit_edge:       ; preds = %resize.i50311
  %ecx.memory.i50315.pre = load ptr, ptr %ecx.memory.addr.i50298, align 8, !alias.scope !567
  br label %OP7237.MLOAD.contd

OP7237.MLOAD.contd:                               ; preds = %resize.i50311.OP7237.MLOAD.contd_crit_edge, %OP7235.PUSH1
  %ecx.memory.i50315 = phi ptr [ %ecx.memory.i50315.pre, %resize.i50311.OP7237.MLOAD.contd_crit_edge ], [ %ecx.memory.i50299, %OP7235.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i50305 = getelementptr inbounds i8, ptr %ecx.memory.i50299, i64 8
  %ecx.memory.buffer.ptr.shared.i50306 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50305, align 8, !noalias !562
  %ecx.memory.buffer.ptr.i50307 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50306, i64 %ecx.memory.last_checkpoint.i50303
  %slot.i50308 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50307, i64 64
  %slot.value.i50309 = load i256, ptr %slot.i50308, align 1, !noalias !562
  %3268 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50309)
  store i256 %3268, ptr %sp24926, align 16
  %sp24934 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3264
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp24934, align 16
  %swap.b24939 = load i256, ptr %sp24918, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp24918, align 16
  store i256 %swap.b24939, ptr %sp24934, align 16
  %sp24943 = getelementptr i256, ptr %sp24918, i64 4
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp24943, align 16
  %3269 = and i256 %swap.b24939, 1461501637330902918203684832716283019655932542975
  store i256 %3269, ptr %sp24934, align 16
  store i256 %3268, ptr %sp24943, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !567)
  %ecx.memory.len.addr.i50316 = getelementptr inbounds i8, ptr %ecx.memory.i50315, i64 16
  %ecx.memory.len.i50317 = load i64, ptr %ecx.memory.len.addr.i50316, align 8, !noalias !567
  %ecx.memory.last_checkpoint.addr.i50318 = getelementptr inbounds i8, ptr %ecx.memory.i50315, i64 48
  %ecx.memory.last_checkpoint.i50319 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50318, align 8, !noalias !567
  %3270 = sub i64 %ecx.memory.len.i50317, %ecx.memory.last_checkpoint.i50319
  %3271 = icmp ugt i256 %3268, 18446744073709551615
  %3272 = trunc i256 %3268 to i64
  %3273 = add i64 %3272, 32
  %3274 = icmp ugt i64 %3272, -33
  %3275 = or i1 %3271, %3274
  %3276 = select i1 %3275, i64 -1, i64 %3273
  %3277 = icmp ugt i64 %3276, %3270
  br i1 %3277, label %resize.i50326, label %OP7244.SWAP2, !prof !5

resize.i50326:                                    ; preds = %OP7237.MLOAD.contd
  %3278 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3276)
  %.not.i50327 = icmp eq i8 %3278, 0
  br i1 %.not.i50327, label %OP7244.SWAP2, label %return, !prof !6

OP7244.SWAP2:                                     ; preds = %OP7237.MLOAD.contd, %resize.i50326
  %ecx.memory.buffer.ptr.shared.addr.i50321 = getelementptr inbounds i8, ptr %ecx.memory.i50315, i64 8
  %ecx.memory.buffer.ptr.shared.i50322 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50321, align 8, !noalias !567
  %ecx.memory.buffer.ptr.i50323 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50322, i64 %ecx.memory.last_checkpoint.i50319
  %slot.i50324 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50323, i64 %3272
  %3279 = tail call i256 @llvm.bswap.i256(i256 %3269)
  store i256 %3279, ptr %slot.i50324, align 1, !noalias !567
  %swap.a24961 = load i256, ptr %sp24926, align 16
  %swap.b24963 = load i256, ptr %sp24918, align 16
  store i256 %swap.a24961, ptr %sp24918, align 16
  store i256 %swap.b24963, ptr %sp24926, align 16
  %sp24965 = getelementptr i256, ptr %sp24918, i64 -1
  %dup424966 = load i256, ptr %sp24965, align 16
  store i256 %dup424966, ptr %sp24934, align 16
  %3280 = and i256 %dup424966, %swap.b24963
  store i256 %3280, ptr %sp24926, align 16
  store i256 32, ptr %sp24934, align 16
  store i256 %swap.a24961, ptr %sp24943, align 16
  %3281 = add i256 %swap.a24961, 32
  store i256 %3281, ptr %sp24934, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !570)
  %ecx.memory.i50330 = load ptr, ptr %ecx.memory.addr.i50298, align 8, !alias.scope !570
  %ecx.memory.len.addr.i50331 = getelementptr inbounds i8, ptr %ecx.memory.i50330, i64 16
  %ecx.memory.len.i50332 = load i64, ptr %ecx.memory.len.addr.i50331, align 8, !noalias !570
  %ecx.memory.last_checkpoint.addr.i50333 = getelementptr inbounds i8, ptr %ecx.memory.i50330, i64 48
  %ecx.memory.last_checkpoint.i50334 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50333, align 8, !noalias !570
  %3282 = sub i64 %ecx.memory.len.i50332, %ecx.memory.last_checkpoint.i50334
  %3283 = icmp ugt i256 %3281, 18446744073709551615
  %3284 = trunc i256 %3281 to i64
  %3285 = add i64 %3284, 32
  %3286 = icmp ugt i64 %3284, -33
  %3287 = or i1 %3283, %3286
  %3288 = select i1 %3287, i64 -1, i64 %3285
  %3289 = icmp ugt i64 %3288, %3282
  br i1 %3289, label %resize.i50341, label %OP7251.DUP1, !prof !5

resize.i50341:                                    ; preds = %OP7244.SWAP2
  %3290 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3288)
  %.not.i50342 = icmp eq i8 %3290, 0
  br i1 %.not.i50342, label %OP7251.DUP1, label %return, !prof !6

OP7251.DUP1:                                      ; preds = %OP7244.SWAP2, %resize.i50341
  %ecx.memory.buffer.ptr.shared.addr.i50336 = getelementptr inbounds i8, ptr %ecx.memory.i50330, i64 8
  %ecx.memory.buffer.ptr.shared.i50337 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50336, align 8, !noalias !570
  %ecx.memory.buffer.ptr.i50338 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50337, i64 %ecx.memory.last_checkpoint.i50334
  %slot.i50339 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50338, i64 %3284
  %3291 = tail call i256 @llvm.bswap.i256(i256 %3280)
  store i256 %3291, ptr %slot.i50339, align 1, !noalias !570
  %dup124993 = load i256, ptr %sp24922, align 16
  store i256 %dup124993, ptr %sp24926, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !573)
  %ecx.memory.i50345 = load ptr, ptr %ecx.memory.addr.i50298, align 8, !alias.scope !573, !noalias !576
  %ecx.memory.len.addr.i50346 = getelementptr inbounds i8, ptr %ecx.memory.i50345, i64 16
  %ecx.memory.len.i50347 = load i64, ptr %ecx.memory.len.addr.i50346, align 8, !noalias !578
  %ecx.memory.last_checkpoint.addr.i50348 = getelementptr inbounds i8, ptr %ecx.memory.i50345, i64 48
  %ecx.memory.last_checkpoint.i50349 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50348, align 8, !noalias !578
  %3292 = sub i64 %ecx.memory.len.i50347, %ecx.memory.last_checkpoint.i50349
  %3293 = icmp ugt i256 %dup124993, 18446744073709551615
  %3294 = trunc i256 %dup124993 to i64
  %3295 = add i64 %3294, 32
  %3296 = icmp ugt i64 %3294, -33
  %3297 = or i1 %3293, %3296
  %3298 = select i1 %3297, i64 -1, i64 %3295
  %3299 = icmp ugt i64 %3298, %3292
  br i1 %3299, label %resize.i50357, label %OP7252.MLOAD.contd, !prof !5

resize.i50357:                                    ; preds = %OP7251.DUP1
  %3300 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3298), !noalias !576
  %.not.i50358 = icmp eq i8 %3300, 0
  br i1 %.not.i50358, label %resize.i50357.OP7252.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50357.OP7252.MLOAD.contd_crit_edge:       ; preds = %resize.i50357
  %swap.b25032.pre = load i256, ptr %sp24922, align 16
  br label %OP7252.MLOAD.contd

OP7252.MLOAD.contd:                               ; preds = %resize.i50357.OP7252.MLOAD.contd_crit_edge, %OP7251.DUP1
  %swap.b25032 = phi i256 [ %swap.b25032.pre, %resize.i50357.OP7252.MLOAD.contd_crit_edge ], [ %dup124993, %OP7251.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i50351 = getelementptr inbounds i8, ptr %ecx.memory.i50345, i64 8
  %ecx.memory.buffer.ptr.shared.i50352 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50351, align 8, !noalias !578
  %ecx.memory.buffer.ptr.i50353 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50352, i64 %ecx.memory.last_checkpoint.i50349
  %slot.i50354 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50353, i64 %3294
  %slot.value.i50355 = load i256, ptr %slot.i50354, align 1, !noalias !578
  %3301 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50355)
  store i256 %3301, ptr %sp24926, align 16
  store i256 -52524777015005588113349992707137368332388074750292320778649315033004770043936, ptr %sp24934, align 16
  %swap.b25007 = load i256, ptr %sp24918, align 16
  store i256 -52524777015005588113349992707137368332388074750292320778649315033004770043936, ptr %sp24918, align 16
  store i256 %swap.b25007, ptr %sp24934, align 16
  store i256 %3301, ptr %sp24943, align 16
  store i256 %3301, ptr %sp24934, align 16
  store i256 %swap.b25007, ptr %sp24943, align 16
  %3302 = sub i256 %swap.b25007, %3301
  store i256 %3302, ptr %sp24934, align 16
  store i256 %3302, ptr %sp24926, align 16
  store i256 %3301, ptr %sp24934, align 16
  store i256 %3301, ptr %sp24922, align 16
  store i256 %swap.b25032, ptr %sp24934, align 16
  %3303 = add i256 %swap.b25032, %3302
  store i256 %3303, ptr %sp24926, align 16
  store i256 %3303, ptr %sp24922, align 16
  store i256 %3301, ptr %sp24926, align 16
  %3304 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp24918, i8 1)
  %.not48400 = icmp eq i8 %3304, 0
  br i1 %.not48400, label %OP7263.PUSH2, label %return, !prof !6

OP7263.PUSH2:                                     ; preds = %OP7252.MLOAD.contd
  store i256 15693, ptr %sp24918, align 16
  br label %OP7770.JUMPDEST.sink.split

OP7267.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3305 = add i64 %len.addr.357, -2
  %sp25056 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3305
  %a25057 = load i256, ptr %sp25056, align 16
  br label %dynamic_jump_table.backedge

OP7270.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2702.JUMPDEST
  %len.addr.266 = phi i64 [ %1294, %OP2702.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3306 = add i64 %len.addr.266, 1
  %sp25060 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.266
  store i256 2, ptr %sp25060, align 16
  %3307 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25060, i8 17)
  %.not48370 = icmp eq i8 %3307, 0
  br i1 %.not48370, label %OP7273.PUSH20, label %return, !prof !6

OP7273.PUSH20:                                    ; preds = %OP7270.JUMPDEST
  %3308 = add i64 %len.addr.266, 2
  %sp25064 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3306
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp25064, align 16
  %b25069 = load i256, ptr %sp25060, align 16
  %3309 = and i256 %b25069, 1461501637330902918203684832716283019655932542975
  store i256 %3309, ptr %sp25060, align 16
  %contract.caller.addr25072 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller25073 = load i160, ptr %contract.caller.addr25072, align 16
  %3310 = tail call i160 @llvm.bswap.i160(i160 %contract.caller25073)
  %3311 = zext i160 %3310 to i256
  store i256 %3311, ptr %sp25064, align 16
  %3312 = icmp eq i256 %3309, %3311
  %3313 = zext i1 %3312 to i256
  store i256 %3313, ptr %sp25060, align 16
  br i1 %3312, label %OP7317.JUMPDEST, label %OP7279.PUSH1

OP7279.PUSH1:                                     ; preds = %OP7273.PUSH20
  store i256 64, ptr %sp25060, align 16
  %mload.out.slot25089 = alloca i256, align 16
  %3314 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot25089, ptr %arg.ecx.addr)
  %.not48371 = icmp eq i8 %3314, 0
  br i1 %.not48371, label %OP7280.MLOAD.contd, label %return, !prof !6

OP7280.MLOAD.contd:                               ; preds = %OP7279.PUSH1
  %mload.out25090 = load i256, ptr %mload.out.slot25089, align 16
  store i256 %mload.out25090, ptr %sp25060, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp25064, align 16
  %3315 = add i64 %len.addr.266, 3
  %sp25097 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3308
  store i256 %mload.out25090, ptr %sp25097, align 16
  %3316 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out25090, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48372 = icmp eq i8 %3316, 0
  br i1 %.not48372, label %OP7284.PUSH1, label %return, !prof !6

OP7284.PUSH1:                                     ; preds = %OP7280.MLOAD.contd
  store i256 4, ptr %sp25064, align 16
  %b25109 = load i256, ptr %sp25060, align 16
  %3317 = add i256 %b25109, 4
  store i256 %3317, ptr %sp25060, align 16
  store i256 %3317, ptr %sp25064, align 16
  store i256 %3317, ptr %sp25097, align 16
  %sp25120 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3315
  store i256 32, ptr %sp25120, align 16
  %3318 = add i256 %b25109, 36
  store i256 %3318, ptr %sp25097, align 16
  store i256 %3317, ptr %sp25120, align 16
  %sp25134 = getelementptr i256, ptr %sp25060, i64 4
  store i256 %3318, ptr %sp25134, align 16
  store i256 32, ptr %sp25120, align 16
  store i256 %3317, ptr %sp25134, align 16
  %3319 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3317, i256 32, ptr %arg.ecx.addr)
  %.not48373 = icmp eq i8 %3319, 0
  br i1 %.not48373, label %OP7295.PUSH1, label %return, !prof !6

OP7295.PUSH1:                                     ; preds = %OP7284.PUSH1
  store i256 44, ptr %sp25120, align 16
  %dup225154 = load i256, ptr %sp25097, align 16
  store i256 %dup225154, ptr %sp25134, align 16
  %3320 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup225154, i256 44, ptr %arg.ecx.addr)
  %.not48374 = icmp eq i8 %3320, 0
  br i1 %.not48374, label %OP7298.PUSH1, label %return, !prof !6

OP7298.PUSH1:                                     ; preds = %OP7295.PUSH1
  store i256 32, ptr %sp25120, align 16
  %b25167 = load i256, ptr %sp25097, align 16
  %3321 = add i256 %b25167, 32
  store i256 %3321, ptr %sp25097, align 16
  store i256 %3321, ptr %sp25120, align 16
  store i256 22564, ptr %sp25134, align 16
  %sp25176 = getelementptr i256, ptr %sp25060, i64 5
  store i256 44, ptr %sp25176, align 16
  store i256 44, ptr %sp25120, align 16
  store i256 %3321, ptr %sp25176, align 16
  %3322 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25120)
  %.not48375 = icmp eq i8 %3322, 0
  br i1 %.not48375, label %OP7305.PUSH1, label %return, !prof !6

OP7305.PUSH1:                                     ; preds = %OP7298.PUSH1
  store i256 64, ptr %sp25120, align 16
  %b25190 = load i256, ptr %sp25097, align 16
  %3323 = add i256 %b25190, 64
  store i256 %3323, ptr %sp25097, align 16
  %swap.b25196 = load i256, ptr %sp25060, align 16
  store i256 %3323, ptr %sp25060, align 16
  store i256 %swap.b25196, ptr %sp25097, align 16
  store i256 64, ptr %sp25064, align 16
  %mload.out.slot25204 = alloca i256, align 16
  %3324 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot25204, ptr %arg.ecx.addr)
  %.not48376 = icmp eq i8 %3324, 0
  br i1 %.not48376, label %OP7311.MLOAD.contd, label %return, !prof !6

OP7311.MLOAD.contd:                               ; preds = %OP7305.PUSH1
  %mload.out25205 = load i256, ptr %mload.out.slot25204, align 16
  store i256 %mload.out25205, ptr %sp25064, align 16
  store i256 %mload.out25205, ptr %sp25097, align 16
  %swap.b25215 = load i256, ptr %sp25060, align 16
  store i256 %mload.out25205, ptr %sp25060, align 16
  store i256 %swap.b25215, ptr %sp25097, align 16
  %3325 = sub i256 %swap.b25215, %mload.out25205
  store i256 %3325, ptr %sp25064, align 16
  store i256 %3325, ptr %sp25060, align 16
  store i256 %mload.out25205, ptr %sp25064, align 16
  %3326 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25060, i8 16)
  %.not48377 = icmp eq i8 %3326, 0
  %spec.select36647 = select i1 %.not48377, i8 16, i8 %3326, !prof !6
  br label %return

OP7317.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54283 = add i64 %len.addr.357, 2
  br label %OP7317.JUMPDEST

OP7317.JUMPDEST:                                  ; preds = %OP7317.JUMPDEST.loopexit, %OP7273.PUSH20
  %.pre-phi54284 = phi i64 [ %.pre54283, %OP7317.JUMPDEST.loopexit ], [ %3308, %OP7273.PUSH20 ]
  %len.addr.267 = phi i64 [ %len.addr.357, %OP7317.JUMPDEST.loopexit ], [ %len.addr.266, %OP7273.PUSH20 ]
  %sp25231 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.267
  store i256 15817, ptr %sp25231, align 16
  %sp25233 = getelementptr i256, ptr %sp25231, i64 -1
  %dup225234 = load i256, ptr %sp25233, align 16
  %sp25235 = getelementptr i256, ptr %sp25231, i64 1
  store i256 %dup225234, ptr %sp25235, align 16
  br label %OP9175.JUMPDEST.sink.split

OP7322.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3327 = add i64 %len.addr.357, 1
  %sp25239 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp25239, align 16
  %mload.out.slot25243 = alloca i256, align 16
  %3328 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot25243, ptr %arg.ecx.addr)
  %.not48012 = icmp eq i8 %3328, 0
  br i1 %.not48012, label %OP7324.MLOAD.contd, label %return, !prof !6

OP7324.MLOAD.contd:                               ; preds = %OP7322.JUMPDEST
  %mload.out25244 = load i256, ptr %mload.out.slot25243, align 16
  store i256 %mload.out25244, ptr %sp25239, align 16
  %sp25247 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3327
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp25247, align 16
  %sp25249 = getelementptr i256, ptr %sp25239, i64 -1
  %dup325250 = load i256, ptr %sp25249, align 16
  %sp25251 = getelementptr i256, ptr %sp25239, i64 2
  store i256 %dup325250, ptr %sp25251, align 16
  %3329 = and i256 %dup325250, 1461501637330902918203684832716283019655932542975
  store i256 %3329, ptr %sp25247, align 16
  store i256 %3329, ptr %sp25239, align 16
  store i256 %mload.out25244, ptr %sp25247, align 16
  store i256 -160961878789824084834311185579329841937841244522066577944530543555173369771, ptr %sp25251, align 16
  store i256 -160961878789824084834311185579329841937841244522066577944530543555173369771, ptr %sp25247, align 16
  store i256 %mload.out25244, ptr %sp25251, align 16
  %sp25271 = getelementptr i256, ptr %sp25239, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp25251, i8 0, i64 64, i1 false)
  store i256 %mload.out25244, ptr %sp25271, align 16
  %3330 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25239, i8 2)
  %.not48013 = icmp eq i8 %3330, 0
  br i1 %.not48013, label %OP7334.POP, label %return, !prof !6

OP7334.POP:                                       ; preds = %OP7324.MLOAD.contd
  %3331 = add i64 %len.addr.357, -2
  %sp25281 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3331
  %a25282 = load i256, ptr %sp25281, align 16
  br label %dynamic_jump_table.backedge

OP7336.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP2724.JUMPDEST
  %len.addr.268 = phi i64 [ %1304, %OP2724.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp25285 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.268
  store i256 0, ptr %sp25285, align 16
  %sp25287 = getelementptr i256, ptr %sp25285, i64 1
  store i256 10986, ptr %sp25287, align 16
  %3332 = add i64 %len.addr.268, 3
  %sp25289 = getelementptr i256, ptr %sp25285, i64 -1
  %dup325290 = load i256, ptr %sp25289, align 16
  %sp25291 = getelementptr i256, ptr %sp25285, i64 2
  store i256 %dup325290, ptr %sp25291, align 16
  br label %OP7491.JUMPDEST

OP7342.JUMPDEST.sink.split:                       ; preds = %OP2889.JUMPDEST, %OP8681.JUMPDEST
  %sp30152.sink = phi ptr [ %sp30152, %OP8681.JUMPDEST ], [ %sp9692, %OP2889.JUMPDEST ]
  %len.addr.269.ph.in = phi i64 [ %len.addr.304, %OP8681.JUMPDEST ], [ %len.addr.146, %OP2889.JUMPDEST ]
  %3333 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.269.ph.in
  %len.addr.269.ph = add i64 %len.addr.269.ph.in, 4
  %dup730153 = load i256, ptr %sp30152.sink, align 16
  %sp30154 = getelementptr i256, ptr %3333, i64 3
  store i256 %dup730153, ptr %sp30154, align 16
  br label %OP7342.JUMPDEST

OP7342.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP7342.JUMPDEST.sink.split
  %len.addr.269 = phi i64 [ %len.addr.269.ph, %OP7342.JUMPDEST.sink.split ], [ %len.addr.357, %dynamic_jump_table ], [ %len.addr.357, %dynamic_jump_table ]
  %3334 = add i64 %len.addr.269, 1
  %sp25295 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.269
  %3335 = add i64 %len.addr.269, 2
  %sp25297 = getelementptr i256, ptr %sp25295, i64 -3
  %dup425298 = load i256, ptr %sp25297, align 16
  %sp25299 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3334
  store i256 %dup425298, ptr %sp25299, align 16
  %3336 = and i256 %dup425298, 1461501637330902918203684832716283019655932542975
  store i256 %3336, ptr %sp25295, align 16
  %.not48569 = icmp eq i256 %3336, 0
  br i1 %.not48569, label %OP7348.PUSH1, label %OP7386.JUMPDEST

OP7348.PUSH1:                                     ; preds = %OP7342.JUMPDEST
  store i256 64, ptr %sp25295, align 16
  %ecx.memory.addr.i50360 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50361 = load ptr, ptr %ecx.memory.addr.i50360, align 8
  %ecx.memory.len.addr.i50362 = getelementptr inbounds i8, ptr %ecx.memory.i50361, i64 16
  %ecx.memory.len.i50363 = load i64, ptr %ecx.memory.len.addr.i50362, align 8, !noalias !579
  %ecx.memory.last_checkpoint.addr.i50364 = getelementptr inbounds i8, ptr %ecx.memory.i50361, i64 48
  %ecx.memory.last_checkpoint.i50365 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50364, align 8, !noalias !579
  %3337 = sub i64 %ecx.memory.len.i50363, %ecx.memory.last_checkpoint.i50365
  %3338 = icmp ult i64 %3337, 96
  br i1 %3338, label %resize.i50373, label %OP7349.MLOAD.contd, !prof !5

resize.i50373:                                    ; preds = %OP7348.PUSH1
  %3339 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !583
  %.not.i50374 = icmp eq i8 %3339, 0
  br i1 %.not.i50374, label %resize.i50373.OP7349.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50373.OP7349.MLOAD.contd_crit_edge:       ; preds = %resize.i50373
  %ecx.memory.i50377.pre = load ptr, ptr %ecx.memory.addr.i50360, align 8, !alias.scope !584
  br label %OP7349.MLOAD.contd

OP7349.MLOAD.contd:                               ; preds = %resize.i50373.OP7349.MLOAD.contd_crit_edge, %OP7348.PUSH1
  %ecx.memory.i50377 = phi ptr [ %ecx.memory.i50377.pre, %resize.i50373.OP7349.MLOAD.contd_crit_edge ], [ %ecx.memory.i50361, %OP7348.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i50367 = getelementptr inbounds i8, ptr %ecx.memory.i50361, i64 8
  %ecx.memory.buffer.ptr.shared.i50368 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50367, align 8, !noalias !579
  %ecx.memory.buffer.ptr.i50369 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50368, i64 %ecx.memory.last_checkpoint.i50365
  %slot.i50370 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50369, i64 64
  %slot.value.i50371 = load i256, ptr %slot.i50370, align 1, !noalias !579
  %3340 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50371)
  store i256 %3340, ptr %sp25295, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp25299, align 16
  %3341 = add i64 %len.addr.269, 3
  %sp25322 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3335
  store i256 %3340, ptr %sp25322, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !584)
  %ecx.memory.len.addr.i50378 = getelementptr inbounds i8, ptr %ecx.memory.i50377, i64 16
  %ecx.memory.len.i50379 = load i64, ptr %ecx.memory.len.addr.i50378, align 8, !noalias !584
  %ecx.memory.last_checkpoint.addr.i50380 = getelementptr inbounds i8, ptr %ecx.memory.i50377, i64 48
  %ecx.memory.last_checkpoint.i50381 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50380, align 8, !noalias !584
  %3342 = sub i64 %ecx.memory.len.i50379, %ecx.memory.last_checkpoint.i50381
  %3343 = icmp ugt i256 %3340, 18446744073709551615
  %3344 = trunc i256 %3340 to i64
  %3345 = add i64 %3344, 32
  %3346 = icmp ugt i64 %3344, -33
  %3347 = or i1 %3343, %3346
  %3348 = select i1 %3347, i64 -1, i64 %3345
  %3349 = icmp ugt i64 %3348, %3342
  br i1 %3349, label %resize.i50388, label %OP7353.PUSH1, !prof !5

resize.i50388:                                    ; preds = %OP7349.MLOAD.contd
  %3350 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3348)
  %.not.i50389 = icmp eq i8 %3350, 0
  br i1 %.not.i50389, label %OP7353.PUSH1, label %return, !prof !6

OP7353.PUSH1:                                     ; preds = %OP7349.MLOAD.contd, %resize.i50388
  %ecx.memory.buffer.ptr.shared.addr.i50383 = getelementptr inbounds i8, ptr %ecx.memory.i50377, i64 8
  %ecx.memory.buffer.ptr.shared.i50384 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50383, align 8, !noalias !584
  %ecx.memory.buffer.ptr.i50385 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50384, i64 %ecx.memory.last_checkpoint.i50381
  %slot.i50386 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50385, i64 %3344
  store i256 2692334344, ptr %slot.i50386, align 1, !noalias !584
  %b25334 = load i256, ptr %sp25295, align 16
  %3351 = add i256 %b25334, 4
  store i256 %3351, ptr %sp25295, align 16
  store i256 %3351, ptr %sp25299, align 16
  %sp25345 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3341
  %3352 = add i256 %b25334, 36
  store i256 %3352, ptr %sp25322, align 16
  %sp25359 = getelementptr i256, ptr %sp25295, i64 4
  store i256 32, ptr %sp25345, align 16
  store i256 %3351, ptr %sp25359, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !587)
  %ecx.memory.i50392 = load ptr, ptr %ecx.memory.addr.i50360, align 8, !alias.scope !587
  %ecx.memory.len.addr.i50393 = getelementptr inbounds i8, ptr %ecx.memory.i50392, i64 16
  %ecx.memory.len.i50394 = load i64, ptr %ecx.memory.len.addr.i50393, align 8, !noalias !587
  %ecx.memory.last_checkpoint.addr.i50395 = getelementptr inbounds i8, ptr %ecx.memory.i50392, i64 48
  %ecx.memory.last_checkpoint.i50396 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50395, align 8, !noalias !587
  %3353 = sub i64 %ecx.memory.len.i50394, %ecx.memory.last_checkpoint.i50396
  %3354 = icmp ugt i256 %3351, 18446744073709551615
  %3355 = trunc i256 %3351 to i64
  %3356 = add i64 %3355, 32
  %3357 = icmp ugt i64 %3355, -33
  %3358 = or i1 %3354, %3357
  %3359 = select i1 %3358, i64 -1, i64 %3356
  %3360 = icmp ugt i64 %3359, %3353
  br i1 %3360, label %resize.i50403, label %OP7364.PUSH1, !prof !5

resize.i50403:                                    ; preds = %OP7353.PUSH1
  %3361 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3359)
  %.not.i50404 = icmp eq i8 %3361, 0
  br i1 %.not.i50404, label %OP7364.PUSH1, label %return, !prof !6

OP7364.PUSH1:                                     ; preds = %OP7353.PUSH1, %resize.i50403
  %ecx.memory.buffer.ptr.shared.addr.i50398 = getelementptr inbounds i8, ptr %ecx.memory.i50392, i64 8
  %ecx.memory.buffer.ptr.shared.i50399 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50398, align 8, !noalias !587
  %ecx.memory.buffer.ptr.i50400 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50399, i64 %ecx.memory.last_checkpoint.i50396
  %slot.i50401 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50400, i64 %3355
  store i256 14474011154664524427946373126085988481658748083205070504932198000989141204992, ptr %slot.i50401, align 1, !noalias !587
  store i256 36, ptr %sp25345, align 16
  %dup225379 = load i256, ptr %sp25322, align 16
  store i256 %dup225379, ptr %sp25359, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !590)
  %ecx.memory.i50407 = load ptr, ptr %ecx.memory.addr.i50360, align 8, !alias.scope !590
  %ecx.memory.len.addr.i50408 = getelementptr inbounds i8, ptr %ecx.memory.i50407, i64 16
  %ecx.memory.len.i50409 = load i64, ptr %ecx.memory.len.addr.i50408, align 8, !noalias !590
  %ecx.memory.last_checkpoint.addr.i50410 = getelementptr inbounds i8, ptr %ecx.memory.i50407, i64 48
  %ecx.memory.last_checkpoint.i50411 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50410, align 8, !noalias !590
  %3362 = sub i64 %ecx.memory.len.i50409, %ecx.memory.last_checkpoint.i50411
  %3363 = icmp ugt i256 %dup225379, 18446744073709551615
  %3364 = trunc i256 %dup225379 to i64
  %3365 = add i64 %3364, 32
  %3366 = icmp ugt i64 %3364, -33
  %3367 = or i1 %3363, %3366
  %3368 = select i1 %3367, i64 -1, i64 %3365
  %3369 = icmp ugt i64 %3368, %3362
  br i1 %3369, label %resize.i50418, label %OP7367.PUSH1, !prof !5

resize.i50418:                                    ; preds = %OP7364.PUSH1
  %3370 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3368)
  %.not.i50419 = icmp eq i8 %3370, 0
  br i1 %.not.i50419, label %OP7367.PUSH1, label %return, !prof !6

OP7367.PUSH1:                                     ; preds = %OP7364.PUSH1, %resize.i50418
  %ecx.memory.buffer.ptr.shared.addr.i50413 = getelementptr inbounds i8, ptr %ecx.memory.i50407, i64 8
  %ecx.memory.buffer.ptr.shared.i50414 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50413, align 8, !noalias !590
  %ecx.memory.buffer.ptr.i50415 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50414, i64 %ecx.memory.last_checkpoint.i50411
  %slot.i50416 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50415, i64 %3364
  store i256 16283262548997589981439669766846737041866091593605704318048722751112783855616, ptr %slot.i50416, align 1, !noalias !590
  %b25392 = load i256, ptr %sp25322, align 16
  %3371 = add i256 %b25392, 32
  store i256 %3371, ptr %sp25322, align 16
  store i256 23006, ptr %sp25359, align 16
  %sp25401 = getelementptr i256, ptr %sp25295, i64 5
  store i256 36, ptr %sp25345, align 16
  store i256 %3371, ptr %sp25401, align 16
  %3372 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25345)
  %.not48574 = icmp eq i8 %3372, 0
  br i1 %.not48574, label %OP7374.PUSH1, label %return, !prof !6

OP7374.PUSH1:                                     ; preds = %OP7367.PUSH1
  store i256 64, ptr %sp25345, align 16
  %b25415 = load i256, ptr %sp25322, align 16
  %3373 = add i256 %b25415, 64
  %swap.b25421 = load i256, ptr %sp25295, align 16
  store i256 %3373, ptr %sp25295, align 16
  store i256 %swap.b25421, ptr %sp25322, align 16
  store i256 64, ptr %sp25299, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !593)
  %ecx.memory.i50422 = load ptr, ptr %ecx.memory.addr.i50360, align 8, !alias.scope !593, !noalias !596
  %ecx.memory.len.addr.i50423 = getelementptr inbounds i8, ptr %ecx.memory.i50422, i64 16
  %ecx.memory.len.i50424 = load i64, ptr %ecx.memory.len.addr.i50423, align 8, !noalias !598
  %ecx.memory.last_checkpoint.addr.i50425 = getelementptr inbounds i8, ptr %ecx.memory.i50422, i64 48
  %ecx.memory.last_checkpoint.i50426 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50425, align 8, !noalias !598
  %3374 = sub i64 %ecx.memory.len.i50424, %ecx.memory.last_checkpoint.i50426
  %3375 = icmp ult i64 %3374, 96
  br i1 %3375, label %resize.i50434, label %OP7380.MLOAD.contd, !prof !5

resize.i50434:                                    ; preds = %OP7374.PUSH1
  %3376 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !596
  %.not.i50435 = icmp eq i8 %3376, 0
  br i1 %.not.i50435, label %resize.i50434.OP7380.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50434.OP7380.MLOAD.contd_crit_edge:       ; preds = %resize.i50434
  %swap.b25440.pre = load i256, ptr %sp25295, align 16
  br label %OP7380.MLOAD.contd

OP7380.MLOAD.contd:                               ; preds = %resize.i50434.OP7380.MLOAD.contd_crit_edge, %OP7374.PUSH1
  %swap.b25440 = phi i256 [ %swap.b25440.pre, %resize.i50434.OP7380.MLOAD.contd_crit_edge ], [ %3373, %OP7374.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i50428 = getelementptr inbounds i8, ptr %ecx.memory.i50422, i64 8
  %ecx.memory.buffer.ptr.shared.i50429 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50428, align 8, !noalias !598
  %ecx.memory.buffer.ptr.i50430 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50429, i64 %ecx.memory.last_checkpoint.i50426
  %slot.i50431 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50430, i64 64
  %slot.value.i50432 = load i256, ptr %slot.i50431, align 1, !noalias !598
  %3377 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50432)
  store i256 %swap.b25440, ptr %sp25322, align 16
  %3378 = sub i256 %swap.b25440, %3377
  store i256 %3378, ptr %sp25295, align 16
  store i256 %3377, ptr %sp25299, align 16
  %3379 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25295, i8 16)
  %.not48576 = icmp eq i8 %3379, 0
  %spec.select36648 = select i1 %.not48576, i8 16, i8 %3379, !prof !6
  br label %return

OP7386.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54052 = add i64 %len.addr.357, 2
  %.pre54253 = add i64 %len.addr.357, 1
  br label %OP7386.JUMPDEST

OP7386.JUMPDEST:                                  ; preds = %OP7386.JUMPDEST.loopexit, %OP7342.JUMPDEST
  %.pre-phi54254 = phi i64 [ %.pre54253, %OP7386.JUMPDEST.loopexit ], [ %3334, %OP7342.JUMPDEST ]
  %.pre-phi54053 = phi i64 [ %.pre54052, %OP7386.JUMPDEST.loopexit ], [ %3335, %OP7342.JUMPDEST ]
  %len.addr.270 = phi i64 [ %len.addr.357, %OP7386.JUMPDEST.loopexit ], [ %len.addr.269, %OP7342.JUMPDEST ]
  %sp25456 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.270
  %sp25458 = getelementptr i256, ptr %sp25456, i64 -2
  %dup325459 = load i256, ptr %sp25458, align 16
  %sp25460 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54254
  store i256 %dup325459, ptr %sp25460, align 16
  %3380 = and i256 %dup325459, 1461501637330902918203684832716283019655932542975
  store i256 %3380, ptr %sp25456, align 16
  %.not48577 = icmp eq i256 %3380, 0
  br i1 %.not48577, label %OP7392.PUSH1, label %OP7430.JUMPDEST

OP7392.PUSH1:                                     ; preds = %OP7386.JUMPDEST
  store i256 64, ptr %sp25456, align 16
  %ecx.memory.addr.i50437 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50438 = load ptr, ptr %ecx.memory.addr.i50437, align 8
  %ecx.memory.len.addr.i50439 = getelementptr inbounds i8, ptr %ecx.memory.i50438, i64 16
  %ecx.memory.len.i50440 = load i64, ptr %ecx.memory.len.addr.i50439, align 8, !noalias !599
  %ecx.memory.last_checkpoint.addr.i50441 = getelementptr inbounds i8, ptr %ecx.memory.i50438, i64 48
  %ecx.memory.last_checkpoint.i50442 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50441, align 8, !noalias !599
  %3381 = sub i64 %ecx.memory.len.i50440, %ecx.memory.last_checkpoint.i50442
  %3382 = icmp ult i64 %3381, 96
  br i1 %3382, label %resize.i50450, label %OP7393.MLOAD.contd, !prof !5

resize.i50450:                                    ; preds = %OP7392.PUSH1
  %3383 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !603
  %.not.i50451 = icmp eq i8 %3383, 0
  br i1 %.not.i50451, label %resize.i50450.OP7393.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50450.OP7393.MLOAD.contd_crit_edge:       ; preds = %resize.i50450
  %ecx.memory.i50454.pre = load ptr, ptr %ecx.memory.addr.i50437, align 8, !alias.scope !604
  br label %OP7393.MLOAD.contd

OP7393.MLOAD.contd:                               ; preds = %resize.i50450.OP7393.MLOAD.contd_crit_edge, %OP7392.PUSH1
  %ecx.memory.i50454 = phi ptr [ %ecx.memory.i50454.pre, %resize.i50450.OP7393.MLOAD.contd_crit_edge ], [ %ecx.memory.i50438, %OP7392.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i50444 = getelementptr inbounds i8, ptr %ecx.memory.i50438, i64 8
  %ecx.memory.buffer.ptr.shared.i50445 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50444, align 8, !noalias !599
  %ecx.memory.buffer.ptr.i50446 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50445, i64 %ecx.memory.last_checkpoint.i50442
  %slot.i50447 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50446, i64 64
  %slot.value.i50448 = load i256, ptr %slot.i50447, align 1, !noalias !599
  %3384 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50448)
  store i256 %3384, ptr %sp25456, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp25460, align 16
  %3385 = add i64 %len.addr.270, 3
  %sp25483 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54053
  store i256 %3384, ptr %sp25483, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !604)
  %ecx.memory.len.addr.i50455 = getelementptr inbounds i8, ptr %ecx.memory.i50454, i64 16
  %ecx.memory.len.i50456 = load i64, ptr %ecx.memory.len.addr.i50455, align 8, !noalias !604
  %ecx.memory.last_checkpoint.addr.i50457 = getelementptr inbounds i8, ptr %ecx.memory.i50454, i64 48
  %ecx.memory.last_checkpoint.i50458 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50457, align 8, !noalias !604
  %3386 = sub i64 %ecx.memory.len.i50456, %ecx.memory.last_checkpoint.i50458
  %3387 = icmp ugt i256 %3384, 18446744073709551615
  %3388 = trunc i256 %3384 to i64
  %3389 = add i64 %3388, 32
  %3390 = icmp ugt i64 %3388, -33
  %3391 = or i1 %3387, %3390
  %3392 = select i1 %3391, i64 -1, i64 %3389
  %3393 = icmp ugt i64 %3392, %3386
  br i1 %3393, label %resize.i50465, label %OP7397.PUSH1, !prof !5

resize.i50465:                                    ; preds = %OP7393.MLOAD.contd
  %3394 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3392)
  %.not.i50466 = icmp eq i8 %3394, 0
  br i1 %.not.i50466, label %OP7397.PUSH1, label %return, !prof !6

OP7397.PUSH1:                                     ; preds = %OP7393.MLOAD.contd, %resize.i50465
  %ecx.memory.buffer.ptr.shared.addr.i50460 = getelementptr inbounds i8, ptr %ecx.memory.i50454, i64 8
  %ecx.memory.buffer.ptr.shared.i50461 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50460, align 8, !noalias !604
  %ecx.memory.buffer.ptr.i50462 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50461, i64 %ecx.memory.last_checkpoint.i50458
  %slot.i50463 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50462, i64 %3388
  store i256 2692334344, ptr %slot.i50463, align 1, !noalias !604
  store i256 4, ptr %sp25460, align 16
  %b25495 = load i256, ptr %sp25456, align 16
  %3395 = add i256 %b25495, 4
  store i256 %3395, ptr %sp25456, align 16
  store i256 %3395, ptr %sp25460, align 16
  %sp25506 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3385
  %3396 = add i256 %b25495, 36
  store i256 %3396, ptr %sp25483, align 16
  %sp25520 = getelementptr i256, ptr %sp25456, i64 4
  store i256 32, ptr %sp25506, align 16
  store i256 %3395, ptr %sp25520, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !607)
  %ecx.memory.i50469 = load ptr, ptr %ecx.memory.addr.i50437, align 8, !alias.scope !607
  %ecx.memory.len.addr.i50470 = getelementptr inbounds i8, ptr %ecx.memory.i50469, i64 16
  %ecx.memory.len.i50471 = load i64, ptr %ecx.memory.len.addr.i50470, align 8, !noalias !607
  %ecx.memory.last_checkpoint.addr.i50472 = getelementptr inbounds i8, ptr %ecx.memory.i50469, i64 48
  %ecx.memory.last_checkpoint.i50473 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50472, align 8, !noalias !607
  %3397 = sub i64 %ecx.memory.len.i50471, %ecx.memory.last_checkpoint.i50473
  %3398 = icmp ugt i256 %3395, 18446744073709551615
  %3399 = trunc i256 %3395 to i64
  %3400 = add i64 %3399, 32
  %3401 = icmp ugt i64 %3399, -33
  %3402 = or i1 %3398, %3401
  %3403 = select i1 %3402, i64 -1, i64 %3400
  %3404 = icmp ugt i64 %3403, %3397
  br i1 %3404, label %resize.i50480, label %OP7408.PUSH1, !prof !5

resize.i50480:                                    ; preds = %OP7397.PUSH1
  %3405 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3403)
  %.not.i50481 = icmp eq i8 %3405, 0
  br i1 %.not.i50481, label %OP7408.PUSH1, label %return, !prof !6

OP7408.PUSH1:                                     ; preds = %OP7397.PUSH1, %resize.i50480
  %ecx.memory.buffer.ptr.shared.addr.i50475 = getelementptr inbounds i8, ptr %ecx.memory.i50469, i64 8
  %ecx.memory.buffer.ptr.shared.i50476 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50475, align 8, !noalias !607
  %ecx.memory.buffer.ptr.i50477 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50476, i64 %ecx.memory.last_checkpoint.i50473
  %slot.i50478 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50477, i64 %3399
  store i256 14474011154664524427946373126085988481658748083205070504932198000989141204992, ptr %slot.i50478, align 1, !noalias !607
  store i256 34, ptr %sp25506, align 16
  %dup225540 = load i256, ptr %sp25483, align 16
  store i256 %dup225540, ptr %sp25520, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !610)
  %ecx.memory.i50484 = load ptr, ptr %ecx.memory.addr.i50437, align 8, !alias.scope !610
  %ecx.memory.len.addr.i50485 = getelementptr inbounds i8, ptr %ecx.memory.i50484, i64 16
  %ecx.memory.len.i50486 = load i64, ptr %ecx.memory.len.addr.i50485, align 8, !noalias !610
  %ecx.memory.last_checkpoint.addr.i50487 = getelementptr inbounds i8, ptr %ecx.memory.i50484, i64 48
  %ecx.memory.last_checkpoint.i50488 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50487, align 8, !noalias !610
  %3406 = sub i64 %ecx.memory.len.i50486, %ecx.memory.last_checkpoint.i50488
  %3407 = icmp ugt i256 %dup225540, 18446744073709551615
  %3408 = trunc i256 %dup225540 to i64
  %3409 = add i64 %3408, 32
  %3410 = icmp ugt i64 %3408, -33
  %3411 = or i1 %3407, %3410
  %3412 = select i1 %3411, i64 -1, i64 %3409
  %3413 = icmp ugt i64 %3412, %3406
  br i1 %3413, label %resize.i50495, label %OP7411.PUSH1, !prof !5

resize.i50495:                                    ; preds = %OP7408.PUSH1
  %3414 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3412)
  %.not.i50496 = icmp eq i8 %3414, 0
  br i1 %.not.i50496, label %OP7411.PUSH1, label %return, !prof !6

OP7411.PUSH1:                                     ; preds = %OP7408.PUSH1, %resize.i50495
  %ecx.memory.buffer.ptr.shared.addr.i50490 = getelementptr inbounds i8, ptr %ecx.memory.i50484, i64 8
  %ecx.memory.buffer.ptr.shared.i50491 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50490, align 8, !noalias !610
  %ecx.memory.buffer.ptr.i50492 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50491, i64 %ecx.memory.last_checkpoint.i50488
  %slot.i50493 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50492, i64 %3408
  store i256 15378636851831057204693021446466362761762419838405387411490460376050962530304, ptr %slot.i50493, align 1, !noalias !610
  store i256 32, ptr %sp25506, align 16
  %b25553 = load i256, ptr %sp25483, align 16
  %3415 = add i256 %b25553, 32
  store i256 %3415, ptr %sp25483, align 16
  store i256 22290, ptr %sp25520, align 16
  %sp25562 = getelementptr i256, ptr %sp25456, i64 5
  store i256 34, ptr %sp25506, align 16
  store i256 %3415, ptr %sp25562, align 16
  %3416 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25506)
  %.not48582 = icmp eq i8 %3416, 0
  br i1 %.not48582, label %OP7418.PUSH1, label %return, !prof !6

OP7418.PUSH1:                                     ; preds = %OP7411.PUSH1
  store i256 64, ptr %sp25506, align 16
  %b25576 = load i256, ptr %sp25483, align 16
  %3417 = add i256 %b25576, 64
  store i256 %3417, ptr %sp25483, align 16
  %swap.b25582 = load i256, ptr %sp25456, align 16
  store i256 %3417, ptr %sp25456, align 16
  store i256 %swap.b25582, ptr %sp25483, align 16
  store i256 64, ptr %sp25460, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !613)
  %ecx.memory.i50499 = load ptr, ptr %ecx.memory.addr.i50437, align 8, !alias.scope !613, !noalias !616
  %ecx.memory.len.addr.i50500 = getelementptr inbounds i8, ptr %ecx.memory.i50499, i64 16
  %ecx.memory.len.i50501 = load i64, ptr %ecx.memory.len.addr.i50500, align 8, !noalias !618
  %ecx.memory.last_checkpoint.addr.i50502 = getelementptr inbounds i8, ptr %ecx.memory.i50499, i64 48
  %ecx.memory.last_checkpoint.i50503 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50502, align 8, !noalias !618
  %3418 = sub i64 %ecx.memory.len.i50501, %ecx.memory.last_checkpoint.i50503
  %3419 = icmp ult i64 %3418, 96
  br i1 %3419, label %resize.i50511, label %OP7424.MLOAD.contd, !prof !5

resize.i50511:                                    ; preds = %OP7418.PUSH1
  %3420 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !616
  %.not.i50512 = icmp eq i8 %3420, 0
  br i1 %.not.i50512, label %OP7424.MLOAD.contd, label %return, !prof !6

OP7424.MLOAD.contd:                               ; preds = %OP7418.PUSH1, %resize.i50511
  %ecx.memory.buffer.ptr.shared.addr.i50505 = getelementptr inbounds i8, ptr %ecx.memory.i50499, i64 8
  %ecx.memory.buffer.ptr.shared.i50506 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50505, align 8, !noalias !618
  %ecx.memory.buffer.ptr.i50507 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50506, i64 %ecx.memory.last_checkpoint.i50503
  %slot.i50508 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50507, i64 64
  %slot.value.i50509 = load i256, ptr %slot.i50508, align 1, !noalias !618
  %3421 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50509)
  store i256 %3421, ptr %sp25460, align 16
  store i256 %3421, ptr %sp25483, align 16
  %swap.b25601 = load i256, ptr %sp25456, align 16
  store i256 %swap.b25601, ptr %sp25483, align 16
  %3422 = sub i256 %swap.b25601, %3421
  store i256 %3422, ptr %sp25456, align 16
  store i256 %3421, ptr %sp25460, align 16
  %3423 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25456, i8 16)
  %.not48584 = icmp eq i8 %3423, 0
  %spec.select36649 = select i1 %.not48584, i8 16, i8 %3423, !prof !6
  br label %return

OP7430.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7386.JUMPDEST
  %len.addr.271 = phi i64 [ %len.addr.270, %OP7386.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp25617 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.271
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp25617, align 16
  %sp25621 = getelementptr i256, ptr %sp25617, i64 1
  %3424 = add i64 %len.addr.271, 3
  %sp25623 = getelementptr i256, ptr %sp25617, i64 -3
  %dup525624 = load i256, ptr %sp25623, align 16
  %sp25625 = getelementptr i256, ptr %sp25617, i64 2
  %3425 = and i256 %dup525624, 1461501637330902918203684832716283019655932542975
  store i256 %3425, ptr %sp25621, align 16
  store i256 0, ptr %sp25625, align 16
  %3426 = add i64 %len.addr.271, 4
  %sp25637 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3424
  store i256 %3425, ptr %sp25637, align 16
  %3427 = add i64 %len.addr.271, 5
  %sp25641 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3426
  store i256 0, ptr %sp25641, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !619)
  %ecx.memory.addr.i50514 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50515 = load ptr, ptr %ecx.memory.addr.i50514, align 8, !alias.scope !619
  %ecx.memory.len.addr.i50516 = getelementptr inbounds i8, ptr %ecx.memory.i50515, i64 16
  %ecx.memory.len.i50517 = load i64, ptr %ecx.memory.len.addr.i50516, align 8, !noalias !619
  %ecx.memory.last_checkpoint.addr.i50518 = getelementptr inbounds i8, ptr %ecx.memory.i50515, i64 48
  %ecx.memory.last_checkpoint.i50519 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50518, align 8, !noalias !619
  %3428 = sub i64 %ecx.memory.len.i50517, %ecx.memory.last_checkpoint.i50519
  %3429 = icmp ult i64 %3428, 32
  br i1 %3429, label %resize.i50525, label %OP7439.PUSH1, !prof !5

resize.i50525:                                    ; preds = %OP7430.JUMPDEST
  %3430 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50526 = icmp eq i8 %3430, 0
  br i1 %.not.i50526, label %OP7439.PUSH1, label %return, !prof !6

OP7439.PUSH1:                                     ; preds = %OP7430.JUMPDEST, %resize.i50525
  %ecx.memory.buffer.ptr.shared.addr.i50521 = getelementptr inbounds i8, ptr %ecx.memory.i50515, i64 8
  %ecx.memory.buffer.ptr.shared.i50522 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50521, align 8, !noalias !619
  %ecx.memory.buffer.ptr.i50523 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50522, i64 %ecx.memory.last_checkpoint.i50519
  %3431 = tail call i256 @llvm.bswap.i256(i256 %3425)
  store i256 %3431, ptr %ecx.memory.buffer.ptr.i50523, align 1, !noalias !619
  store i256 32, ptr %sp25637, align 16
  store i256 10, ptr %sp25641, align 16
  %3432 = add i64 %len.addr.271, 6
  %sp25659 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3427
  store i256 32, ptr %sp25659, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !622)
  %ecx.memory.i50529 = load ptr, ptr %ecx.memory.addr.i50514, align 8, !alias.scope !622
  %ecx.memory.len.addr.i50530 = getelementptr inbounds i8, ptr %ecx.memory.i50529, i64 16
  %ecx.memory.len.i50531 = load i64, ptr %ecx.memory.len.addr.i50530, align 8, !noalias !622
  %ecx.memory.last_checkpoint.addr.i50532 = getelementptr inbounds i8, ptr %ecx.memory.i50529, i64 48
  %ecx.memory.last_checkpoint.i50533 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50532, align 8, !noalias !622
  %3433 = sub i64 %ecx.memory.len.i50531, %ecx.memory.last_checkpoint.i50533
  %3434 = icmp ult i64 %3433, 64
  br i1 %3434, label %resize.i50540, label %OP7444.PUSH1, !prof !5

resize.i50540:                                    ; preds = %OP7439.PUSH1
  %3435 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50541 = icmp eq i8 %3435, 0
  br i1 %.not.i50541, label %OP7444.PUSH1, label %return, !prof !6

OP7444.PUSH1:                                     ; preds = %OP7439.PUSH1, %resize.i50540
  %ecx.memory.buffer.ptr.shared.addr.i50535 = getelementptr inbounds i8, ptr %ecx.memory.i50529, i64 8
  %ecx.memory.buffer.ptr.shared.i50536 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50535, align 8, !noalias !622
  %ecx.memory.buffer.ptr.i50537 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50536, i64 %ecx.memory.last_checkpoint.i50533
  %slot.i50538 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50537, i64 32
  store i256 4523128485832663883733241601901871400518358776001584532791311875309106626560, ptr %slot.i50538, align 1, !noalias !622
  store i256 64, ptr %sp25641, align 16
  store i256 64, ptr %sp25659, align 16
  %dup425673 = load i256, ptr %sp25625, align 16
  %sp25674 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3432
  store i256 %dup425673, ptr %sp25674, align 16
  %3436 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25659)
  %.not48587 = icmp eq i8 %3436, 0
  br i1 %.not48587, label %OP7448.SWAP5, label %return, !prof !6

OP7448.SWAP5:                                     ; preds = %OP7444.PUSH1
  %swap.a25679 = load i256, ptr %sp25659, align 16
  %swap.b25681 = load i256, ptr %sp25617, align 16
  store i256 %swap.a25679, ptr %sp25617, align 16
  %sp25683 = getelementptr i256, ptr %sp25617, i64 -2
  %dup825684 = load i256, ptr %sp25683, align 16
  %3437 = and i256 %dup825684, %swap.b25681
  store i256 %3437, ptr %sp25659, align 16
  store i256 %3437, ptr %sp25674, align 16
  %dup525698 = load i256, ptr %sp25625, align 16
  %sp25699 = getelementptr i256, ptr %sp25617, i64 7
  store i256 %dup525698, ptr %sp25699, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !625)
  %ecx.memory.i50544 = load ptr, ptr %ecx.memory.addr.i50514, align 8, !alias.scope !625
  %ecx.memory.len.addr.i50545 = getelementptr inbounds i8, ptr %ecx.memory.i50544, i64 16
  %ecx.memory.len.i50546 = load i64, ptr %ecx.memory.len.addr.i50545, align 8, !noalias !625
  %ecx.memory.last_checkpoint.addr.i50547 = getelementptr inbounds i8, ptr %ecx.memory.i50544, i64 48
  %ecx.memory.last_checkpoint.i50548 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50547, align 8, !noalias !625
  %3438 = sub i64 %ecx.memory.len.i50546, %ecx.memory.last_checkpoint.i50548
  %3439 = icmp ugt i256 %dup525698, 18446744073709551615
  %3440 = trunc i256 %dup525698 to i64
  %3441 = add i64 %3440, 32
  %3442 = icmp ugt i64 %3440, -33
  %3443 = or i1 %3439, %3442
  %3444 = select i1 %3443, i64 -1, i64 %3441
  %3445 = icmp ugt i64 %3444, %3438
  br i1 %3445, label %resize.i50555, label %OP7454.SWAP5, !prof !5

resize.i50555:                                    ; preds = %OP7448.SWAP5
  %3446 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3444)
  %.not.i50556 = icmp eq i8 %3446, 0
  br i1 %.not.i50556, label %OP7454.SWAP5, label %return, !prof !6

OP7454.SWAP5:                                     ; preds = %OP7448.SWAP5, %resize.i50555
  %ecx.memory.buffer.ptr.shared.addr.i50550 = getelementptr inbounds i8, ptr %ecx.memory.i50544, i64 8
  %ecx.memory.buffer.ptr.shared.i50551 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50550, align 8, !noalias !625
  %ecx.memory.buffer.ptr.i50552 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50551, i64 %ecx.memory.last_checkpoint.i50548
  %slot.i50553 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50552, i64 %3440
  %3447 = tail call i256 @llvm.bswap.i256(i256 %3437)
  store i256 %3447, ptr %slot.i50553, align 1, !noalias !625
  %swap.a25707 = load i256, ptr %sp25659, align 16
  %swap.b25709 = load i256, ptr %sp25617, align 16
  store i256 %swap.a25707, ptr %sp25617, align 16
  store i256 %swap.b25709, ptr %sp25659, align 16
  %dup325712 = load i256, ptr %sp25637, align 16
  store i256 %dup325712, ptr %sp25674, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !628)
  %ecx.memory.i50559 = load ptr, ptr %ecx.memory.addr.i50514, align 8, !alias.scope !628
  %ecx.memory.len.addr.i50560 = getelementptr inbounds i8, ptr %ecx.memory.i50559, i64 16
  %ecx.memory.len.i50561 = load i64, ptr %ecx.memory.len.addr.i50560, align 8, !noalias !628
  %ecx.memory.last_checkpoint.addr.i50562 = getelementptr inbounds i8, ptr %ecx.memory.i50559, i64 48
  %ecx.memory.last_checkpoint.i50563 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50562, align 8, !noalias !628
  %3448 = sub i64 %ecx.memory.len.i50561, %ecx.memory.last_checkpoint.i50563
  %3449 = icmp ugt i256 %dup325712, 18446744073709551615
  %3450 = trunc i256 %dup325712 to i64
  %3451 = add i64 %3450, 32
  %3452 = icmp ugt i64 %3450, -33
  %3453 = or i1 %3449, %3452
  %3454 = select i1 %3453, i64 -1, i64 %3451
  %3455 = icmp ugt i64 %3454, %3448
  br i1 %3455, label %resize.i50570, label %OP7457.SWAP2, !prof !5

resize.i50570:                                    ; preds = %OP7454.SWAP5
  %3456 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3454)
  %.not.i50571 = icmp eq i8 %3456, 0
  br i1 %.not.i50571, label %OP7457.SWAP2, label %return, !prof !6

OP7457.SWAP2:                                     ; preds = %OP7454.SWAP5, %resize.i50570
  %ecx.memory.buffer.ptr.shared.addr.i50565 = getelementptr inbounds i8, ptr %ecx.memory.i50559, i64 8
  %ecx.memory.buffer.ptr.shared.i50566 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50565, align 8, !noalias !628
  %ecx.memory.buffer.ptr.i50567 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50566, i64 %ecx.memory.last_checkpoint.i50563
  %slot.i50568 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50567, i64 %3450
  %3457 = tail call i256 @llvm.bswap.i256(i256 %swap.b25709)
  store i256 %3457, ptr %slot.i50568, align 1, !noalias !628
  %swap.a25721 = load i256, ptr %sp25641, align 16
  %swap.b25723 = load i256, ptr %sp25625, align 16
  store i256 %swap.a25721, ptr %sp25625, align 16
  store i256 %swap.b25723, ptr %sp25659, align 16
  %3458 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25641)
  %.not48590 = icmp eq i8 %3458, 0
  br i1 %.not48590, label %OP7461.DUP6, label %return, !prof !6

OP7461.DUP6:                                      ; preds = %OP7457.SWAP2
  %sp25736 = getelementptr i256, ptr %sp25617, i64 -1
  %dup625737 = load i256, ptr %sp25736, align 16
  %swap.b25743 = load i256, ptr %sp25641, align 16
  store i256 %dup625737, ptr %sp25641, align 16
  store i256 %swap.b25743, ptr %sp25659, align 16
  %3459 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25641, i8 17)
  %.not48591 = icmp eq i8 %3459, 0
  br i1 %.not48591, label %OP7464.DUP2, label %return, !prof !6

OP7464.DUP2:                                      ; preds = %OP7461.DUP6
  %dup225748 = load i256, ptr %sp25625, align 16
  store i256 %dup225748, ptr %sp25641, align 16
  %ecx.memory.i50574 = load ptr, ptr %ecx.memory.addr.i50514, align 8
  %ecx.memory.len.addr.i50575 = getelementptr inbounds i8, ptr %ecx.memory.i50574, i64 16
  %ecx.memory.len.i50576 = load i64, ptr %ecx.memory.len.addr.i50575, align 8, !noalias !631
  %ecx.memory.last_checkpoint.addr.i50577 = getelementptr inbounds i8, ptr %ecx.memory.i50574, i64 48
  %ecx.memory.last_checkpoint.i50578 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50577, align 8, !noalias !631
  %3460 = sub i64 %ecx.memory.len.i50576, %ecx.memory.last_checkpoint.i50578
  %3461 = icmp ugt i256 %dup225748, 18446744073709551615
  %3462 = trunc i256 %dup225748 to i64
  %3463 = add i64 %3462, 32
  %3464 = icmp ugt i64 %3462, -33
  %3465 = or i1 %3461, %3464
  %3466 = select i1 %3465, i64 -1, i64 %3463
  %3467 = icmp ugt i64 %3466, %3460
  br i1 %3467, label %resize.i50586, label %OP7465.MLOAD.contd, !prof !5

resize.i50586:                                    ; preds = %OP7464.DUP2
  %3468 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3466), !noalias !635
  %.not.i50587 = icmp eq i8 %3468, 0
  br i1 %.not.i50587, label %resize.i50586.OP7465.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50586.OP7465.MLOAD.contd_crit_edge:       ; preds = %resize.i50586
  %ecx.memory.i50590.pre = load ptr, ptr %ecx.memory.addr.i50514, align 8, !alias.scope !636
  br label %OP7465.MLOAD.contd

OP7465.MLOAD.contd:                               ; preds = %resize.i50586.OP7465.MLOAD.contd_crit_edge, %OP7464.DUP2
  %ecx.memory.i50590 = phi ptr [ %ecx.memory.i50590.pre, %resize.i50586.OP7465.MLOAD.contd_crit_edge ], [ %ecx.memory.i50574, %OP7464.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i50580 = getelementptr inbounds i8, ptr %ecx.memory.i50574, i64 8
  %ecx.memory.buffer.ptr.shared.i50581 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50580, align 8, !noalias !631
  %ecx.memory.buffer.ptr.i50582 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50581, i64 %ecx.memory.last_checkpoint.i50578
  %slot.i50583 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50582, i64 %3462
  %slot.value.i50584 = load i256, ptr %slot.i50583, align 1, !noalias !631
  %3469 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50584)
  store i256 %3469, ptr %sp25641, align 16
  %dup625758 = load i256, ptr %sp25736, align 16
  store i256 %dup625758, ptr %sp25659, align 16
  store i256 %3469, ptr %sp25674, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !636)
  %ecx.memory.len.addr.i50591 = getelementptr inbounds i8, ptr %ecx.memory.i50590, i64 16
  %ecx.memory.len.i50592 = load i64, ptr %ecx.memory.len.addr.i50591, align 8, !noalias !636
  %ecx.memory.last_checkpoint.addr.i50593 = getelementptr inbounds i8, ptr %ecx.memory.i50590, i64 48
  %ecx.memory.last_checkpoint.i50594 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50593, align 8, !noalias !636
  %3470 = sub i64 %ecx.memory.len.i50592, %ecx.memory.last_checkpoint.i50594
  %3471 = icmp ugt i256 %3469, 18446744073709551615
  %3472 = trunc i256 %3469 to i64
  %3473 = add i64 %3472, 32
  %3474 = icmp ugt i64 %3472, -33
  %3475 = or i1 %3471, %3474
  %3476 = select i1 %3475, i64 -1, i64 %3473
  %3477 = icmp ugt i64 %3476, %3470
  br i1 %3477, label %resize.i50601, label %OP7469.SWAP2, !prof !5

resize.i50601:                                    ; preds = %OP7465.MLOAD.contd
  %3478 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3476)
  %.not.i50602 = icmp eq i8 %3478, 0
  br i1 %.not.i50602, label %OP7469.SWAP2, label %return, !prof !6

OP7469.SWAP2:                                     ; preds = %OP7465.MLOAD.contd, %resize.i50601
  %ecx.memory.buffer.ptr.shared.addr.i50596 = getelementptr inbounds i8, ptr %ecx.memory.i50590, i64 8
  %ecx.memory.buffer.ptr.shared.i50597 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50596, align 8, !noalias !636
  %ecx.memory.buffer.ptr.i50598 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50597, i64 %ecx.memory.last_checkpoint.i50594
  %slot.i50599 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50598, i64 %3472
  %3479 = tail call i256 @llvm.bswap.i256(i256 %dup625758)
  store i256 %3479, ptr %slot.i50599, align 1, !noalias !636
  %swap.a25771 = load i256, ptr %sp25641, align 16
  %swap.b25773 = load i256, ptr %sp25625, align 16
  store i256 %swap.a25771, ptr %sp25625, align 16
  store i256 %swap.b25773, ptr %sp25641, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !639)
  %ecx.memory.i50605 = load ptr, ptr %ecx.memory.addr.i50514, align 8, !alias.scope !639, !noalias !642
  %ecx.memory.len.addr.i50606 = getelementptr inbounds i8, ptr %ecx.memory.i50605, i64 16
  %ecx.memory.len.i50607 = load i64, ptr %ecx.memory.len.addr.i50606, align 8, !noalias !644
  %ecx.memory.last_checkpoint.addr.i50608 = getelementptr inbounds i8, ptr %ecx.memory.i50605, i64 48
  %ecx.memory.last_checkpoint.i50609 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50608, align 8, !noalias !644
  %3480 = sub i64 %ecx.memory.len.i50607, %ecx.memory.last_checkpoint.i50609
  %3481 = icmp ugt i256 %swap.b25773, 18446744073709551615
  %3482 = trunc i256 %swap.b25773 to i64
  %3483 = add i64 %3482, 32
  %3484 = icmp ugt i64 %3482, -33
  %3485 = or i1 %3481, %3484
  %3486 = select i1 %3485, i64 -1, i64 %3483
  %3487 = icmp ugt i64 %3486, %3480
  br i1 %3487, label %resize.i50617, label %OP7470.MLOAD.contd, !prof !5

resize.i50617:                                    ; preds = %OP7469.SWAP2
  %3488 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3486), !noalias !642
  %.not.i50618 = icmp eq i8 %3488, 0
  br i1 %.not.i50618, label %resize.i50617.OP7470.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50617.OP7470.MLOAD.contd_crit_edge:       ; preds = %resize.i50617
  %swap.b25786.pre = load i256, ptr %sp25625, align 16
  br label %OP7470.MLOAD.contd

OP7470.MLOAD.contd:                               ; preds = %resize.i50617.OP7470.MLOAD.contd_crit_edge, %OP7469.SWAP2
  %swap.b25786 = phi i256 [ %swap.b25786.pre, %resize.i50617.OP7470.MLOAD.contd_crit_edge ], [ %swap.a25771, %OP7469.SWAP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i50611 = getelementptr inbounds i8, ptr %ecx.memory.i50605, i64 8
  %ecx.memory.buffer.ptr.shared.i50612 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50611, align 8, !noalias !644
  %ecx.memory.buffer.ptr.i50613 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50612, i64 %ecx.memory.last_checkpoint.i50609
  %slot.i50614 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50613, i64 %3482
  %slot.value.i50615 = load i256, ptr %slot.i50614, align 1, !noalias !644
  %3489 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50615)
  store i256 -52305948261162578668367882225327028569797882979485679342215860919519743330011, ptr %sp25625, align 16
  store i256 %swap.b25786, ptr %sp25674, align 16
  %3490 = sub i256 %swap.b25786, %3489
  %swap.b25811 = load i256, ptr %sp25637, align 16
  store i256 %swap.b25811, ptr %sp25659, align 16
  %3491 = add i256 %swap.b25811, %3490
  store i256 %3491, ptr %sp25637, align 16
  store i256 %3489, ptr %sp25641, align 16
  %3492 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25617, i8 3)
  %.not48595 = icmp eq i8 %3492, 0
  br i1 %.not48595, label %OP7481.POP, label %return, !prof !6

OP7481.POP:                                       ; preds = %OP7470.MLOAD.contd
  %3493 = add i64 %len.addr.271, -4
  %sp25829 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3493
  %a25830 = load i256, ptr %sp25829, align 16
  br label %dynamic_jump_table.preheader

OP7491.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8065.JUMPDEST, %OP7336.JUMPDEST, %OP7086.JUMPDEST, %OP7038.JUMPDEST, %OP6820.JUMPDEST, %OP6772.JUMPDEST, %OP6456.JUMPDEST, %OP6408.JUMPDEST, %OP5936.JUMPDEST, %OP5888.JUMPDEST, %OP5567.JUMPDEST, %OP5519.JUMPDEST, %OP4595.JUMPDEST, %OP4201.JUMPDEST, %OP4153.JUMPDEST, %OP3115.JUMPDEST, %OP3067.JUMPDEST, %OP3019.JUMPDEST
  %len.addr.273 = phi i64 [ %.pre-phi54294, %OP8065.JUMPDEST ], [ %3332, %OP7336.JUMPDEST ], [ %3208, %OP7086.JUMPDEST ], [ %3189, %OP7038.JUMPDEST ], [ %3084, %OP6820.JUMPDEST ], [ %3065, %OP6772.JUMPDEST ], [ %2949, %OP6456.JUMPDEST ], [ %2930, %OP6408.JUMPDEST ], [ %2733, %OP5936.JUMPDEST ], [ %2714, %OP5888.JUMPDEST ], [ %2587, %OP5567.JUMPDEST ], [ %2568, %OP5519.JUMPDEST ], [ %.pre-phi54248, %OP4595.JUMPDEST ], [ %1969, %OP4201.JUMPDEST ], [ %.pre-phi54240, %OP4153.JUMPDEST ], [ %1507, %OP3115.JUMPDEST ], [ %1488, %OP3067.JUMPDEST ], [ %1469, %OP3019.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp25843 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.273
  %sp25847 = getelementptr i256, ptr %sp25843, i64 -1
  %b25848 = load i256, ptr %sp25847, align 16
  %3494 = and i256 %b25848, 1461501637330902918203684832716283019655932542975
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp25847, i8 0, i64 32, i1 false)
  store i256 %3494, ptr %sp25843, align 16
  %sp25860 = getelementptr i256, ptr %sp25843, i64 1
  store i256 0, ptr %sp25860, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !645)
  %ecx.memory.addr.i50620 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50621 = load ptr, ptr %ecx.memory.addr.i50620, align 8, !alias.scope !645
  %ecx.memory.len.addr.i50622 = getelementptr inbounds i8, ptr %ecx.memory.i50621, i64 16
  %ecx.memory.len.i50623 = load i64, ptr %ecx.memory.len.addr.i50622, align 8, !noalias !645
  %ecx.memory.last_checkpoint.addr.i50624 = getelementptr inbounds i8, ptr %ecx.memory.i50621, i64 48
  %ecx.memory.last_checkpoint.i50625 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50624, align 8, !noalias !645
  %3495 = sub i64 %ecx.memory.len.i50623, %ecx.memory.last_checkpoint.i50625
  %3496 = icmp ult i64 %3495, 32
  br i1 %3496, label %resize.i50631, label %OP7498.PUSH1, !prof !5

resize.i50631:                                    ; preds = %OP7491.JUMPDEST
  %3497 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50632 = icmp eq i8 %3497, 0
  br i1 %.not.i50632, label %OP7498.PUSH1, label %return, !prof !6

OP7498.PUSH1:                                     ; preds = %OP7491.JUMPDEST, %resize.i50631
  %ecx.memory.buffer.ptr.shared.addr.i50627 = getelementptr inbounds i8, ptr %ecx.memory.i50621, i64 8
  %ecx.memory.buffer.ptr.shared.i50628 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50627, align 8, !noalias !645
  %ecx.memory.buffer.ptr.i50629 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50628, i64 %ecx.memory.last_checkpoint.i50625
  %3498 = tail call i256 @llvm.bswap.i256(i256 %3494)
  store i256 %3498, ptr %ecx.memory.buffer.ptr.i50629, align 1, !noalias !645
  store i256 9, ptr %sp25843, align 16
  store i256 32, ptr %sp25860, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !648)
  %ecx.memory.i50635 = load ptr, ptr %ecx.memory.addr.i50620, align 8, !alias.scope !648
  %ecx.memory.len.addr.i50636 = getelementptr inbounds i8, ptr %ecx.memory.i50635, i64 16
  %ecx.memory.len.i50637 = load i64, ptr %ecx.memory.len.addr.i50636, align 8, !noalias !648
  %ecx.memory.last_checkpoint.addr.i50638 = getelementptr inbounds i8, ptr %ecx.memory.i50635, i64 48
  %ecx.memory.last_checkpoint.i50639 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50638, align 8, !noalias !648
  %3499 = sub i64 %ecx.memory.len.i50637, %ecx.memory.last_checkpoint.i50639
  %3500 = icmp ult i64 %3499, 64
  br i1 %3500, label %resize.i50646, label %OP7501.PUSH1, !prof !5

resize.i50646:                                    ; preds = %OP7498.PUSH1
  %3501 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50647 = icmp eq i8 %3501, 0
  br i1 %.not.i50647, label %OP7501.PUSH1, label %return, !prof !6

OP7501.PUSH1:                                     ; preds = %OP7498.PUSH1, %resize.i50646
  %ecx.memory.buffer.ptr.shared.addr.i50641 = getelementptr inbounds i8, ptr %ecx.memory.i50635, i64 8
  %ecx.memory.buffer.ptr.shared.i50642 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50641, align 8, !noalias !648
  %ecx.memory.buffer.ptr.i50643 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50642, i64 %ecx.memory.last_checkpoint.i50639
  %slot.i50644 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50643, i64 32
  store i256 4070815637249397495359917441711684260466522898401426079512180687778195963904, ptr %slot.i50644, align 1, !noalias !648
  %swap.b25881 = load i256, ptr %sp25847, align 16
  store i256 64, ptr %sp25847, align 16
  store i256 %swap.b25881, ptr %sp25843, align 16
  %3502 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25847)
  %.not49067 = icmp eq i8 %3502, 0
  br i1 %.not49067, label %OP7504.SLOAD, label %return, !prof !6

OP7504.SLOAD:                                     ; preds = %OP7501.PUSH1
  %3503 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25847, i8 17)
  %.not49068 = icmp eq i8 %3503, 0
  br i1 %.not49068, label %OP7505.PUSH1, label %return, !prof !6

OP7505.PUSH1:                                     ; preds = %OP7504.SLOAD
  %b25892 = load i256, ptr %sp25847, align 16
  %3504 = lshr i256 %b25892, 255
  store i256 1, ptr %sp25843, align 16
  %sp25905 = getelementptr i256, ptr %sp25843, i64 -2
  %swap.b25906 = load i256, ptr %sp25905, align 16
  store i256 %3504, ptr %sp25905, align 16
  store i256 %swap.b25906, ptr %sp25847, align 16
  %3505 = add i64 %len.addr.273, -1
  br label %dynamic_jump_table.preheader

OP7511.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8320.JUMPDEST, %OP5984.JUMPDEST, %OP3442.PUSH2, %OP3232.JUMPDEST
  %len.addr.274 = phi i64 [ %3943, %OP8320.JUMPDEST ], [ %2753, %OP5984.JUMPDEST ], [ %1644, %OP3442.PUSH2 ], [ %.pre-phi54288, %OP3232.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3506 = add i64 %len.addr.274, 1
  %sp25912 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.274
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp25912, align 16
  %3507 = add i64 %len.addr.274, 2
  %sp25914 = getelementptr i256, ptr %sp25912, i64 -3
  %dup425915 = load i256, ptr %sp25914, align 16
  %sp25916 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3506
  store i256 %dup425915, ptr %sp25916, align 16
  %3508 = and i256 %dup425915, 1461501637330902918203684832716283019655932542975
  store i256 %3508, ptr %sp25912, align 16
  %.not48336 = icmp eq i256 %3508, 0
  br i1 %.not48336, label %OP7517.PUSH1, label %OP7555.JUMPDEST

OP7517.PUSH1:                                     ; preds = %OP7511.JUMPDEST
  store i256 64, ptr %sp25912, align 16
  %mload.out.slot25931 = alloca i256, align 16
  %3509 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot25931, ptr %arg.ecx.addr)
  %.not48337 = icmp eq i8 %3509, 0
  br i1 %.not48337, label %OP7518.MLOAD.contd, label %return, !prof !6

OP7518.MLOAD.contd:                               ; preds = %OP7517.PUSH1
  %mload.out25932 = load i256, ptr %mload.out.slot25931, align 16
  store i256 %mload.out25932, ptr %sp25912, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp25916, align 16
  %3510 = add i64 %len.addr.274, 3
  %sp25939 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3507
  store i256 %mload.out25932, ptr %sp25939, align 16
  %3511 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out25932, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48338 = icmp eq i8 %3511, 0
  br i1 %.not48338, label %OP7522.PUSH1, label %return, !prof !6

OP7522.PUSH1:                                     ; preds = %OP7518.MLOAD.contd
  store i256 4, ptr %sp25916, align 16
  %b25951 = load i256, ptr %sp25912, align 16
  %3512 = add i256 %b25951, 4
  store i256 %3512, ptr %sp25912, align 16
  store i256 %3512, ptr %sp25916, align 16
  store i256 %3512, ptr %sp25939, align 16
  %sp25962 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3510
  store i256 32, ptr %sp25962, align 16
  %3513 = add i256 %b25951, 36
  store i256 %3513, ptr %sp25939, align 16
  store i256 %3512, ptr %sp25962, align 16
  %sp25976 = getelementptr i256, ptr %sp25912, i64 4
  store i256 %3513, ptr %sp25976, align 16
  store i256 32, ptr %sp25962, align 16
  store i256 %3512, ptr %sp25976, align 16
  %3514 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3512, i256 32, ptr %arg.ecx.addr)
  %.not48339 = icmp eq i8 %3514, 0
  br i1 %.not48339, label %OP7533.PUSH1, label %return, !prof !6

OP7533.PUSH1:                                     ; preds = %OP7522.PUSH1
  store i256 37, ptr %sp25962, align 16
  %dup225996 = load i256, ptr %sp25939, align 16
  store i256 %dup225996, ptr %sp25976, align 16
  %3515 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup225996, i256 37, ptr %arg.ecx.addr)
  %.not48340 = icmp eq i8 %3515, 0
  br i1 %.not48340, label %OP7536.PUSH1, label %return, !prof !6

OP7536.PUSH1:                                     ; preds = %OP7533.PUSH1
  store i256 32, ptr %sp25962, align 16
  %b26009 = load i256, ptr %sp25939, align 16
  %3516 = add i256 %b26009, 32
  store i256 %3516, ptr %sp25939, align 16
  store i256 %3516, ptr %sp25962, align 16
  store i256 22969, ptr %sp25976, align 16
  %sp26018 = getelementptr i256, ptr %sp25912, i64 5
  store i256 37, ptr %sp26018, align 16
  store i256 37, ptr %sp25962, align 16
  store i256 %3516, ptr %sp26018, align 16
  %3517 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25962)
  %.not48341 = icmp eq i8 %3517, 0
  br i1 %.not48341, label %OP7543.PUSH1, label %return, !prof !6

OP7543.PUSH1:                                     ; preds = %OP7536.PUSH1
  store i256 64, ptr %sp25962, align 16
  %b26032 = load i256, ptr %sp25939, align 16
  %3518 = add i256 %b26032, 64
  store i256 %3518, ptr %sp25939, align 16
  %swap.b26038 = load i256, ptr %sp25912, align 16
  store i256 %3518, ptr %sp25912, align 16
  store i256 %swap.b26038, ptr %sp25939, align 16
  store i256 64, ptr %sp25916, align 16
  %mload.out.slot26046 = alloca i256, align 16
  %3519 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26046, ptr %arg.ecx.addr)
  %.not48342 = icmp eq i8 %3519, 0
  br i1 %.not48342, label %OP7549.MLOAD.contd, label %return, !prof !6

OP7549.MLOAD.contd:                               ; preds = %OP7543.PUSH1
  %mload.out26047 = load i256, ptr %mload.out.slot26046, align 16
  store i256 %mload.out26047, ptr %sp25916, align 16
  store i256 %mload.out26047, ptr %sp25939, align 16
  %swap.b26057 = load i256, ptr %sp25912, align 16
  store i256 %mload.out26047, ptr %sp25912, align 16
  store i256 %swap.b26057, ptr %sp25939, align 16
  %3520 = sub i256 %swap.b26057, %mload.out26047
  store i256 %3520, ptr %sp25916, align 16
  store i256 %3520, ptr %sp25912, align 16
  store i256 %mload.out26047, ptr %sp25916, align 16
  %3521 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp25912, i8 16)
  %.not48343 = icmp eq i8 %3521, 0
  %spec.select36650 = select i1 %.not48343, i8 16, i8 %3521, !prof !6
  br label %return

OP7555.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre53974 = add i64 %len.addr.357, 2
  %.pre54289 = add i64 %len.addr.357, 1
  br label %OP7555.JUMPDEST

OP7555.JUMPDEST:                                  ; preds = %OP7555.JUMPDEST.loopexit, %OP7511.JUMPDEST
  %.pre-phi54290 = phi i64 [ %.pre54289, %OP7555.JUMPDEST.loopexit ], [ %3506, %OP7511.JUMPDEST ]
  %.pre-phi53975 = phi i64 [ %.pre53974, %OP7555.JUMPDEST.loopexit ], [ %3507, %OP7511.JUMPDEST ]
  %len.addr.275 = phi i64 [ %len.addr.357, %OP7555.JUMPDEST.loopexit ], [ %len.addr.274, %OP7511.JUMPDEST ]
  %sp26073 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.275
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp26073, align 16
  %sp26075 = getelementptr i256, ptr %sp26073, i64 -2
  %dup326076 = load i256, ptr %sp26075, align 16
  %sp26077 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54290
  store i256 %dup326076, ptr %sp26077, align 16
  %3522 = and i256 %dup326076, 1461501637330902918203684832716283019655932542975
  store i256 %3522, ptr %sp26073, align 16
  %.not48344 = icmp eq i256 %3522, 0
  br i1 %.not48344, label %OP7561.PUSH1, label %OP7599.JUMPDEST

OP7561.PUSH1:                                     ; preds = %OP7555.JUMPDEST
  store i256 64, ptr %sp26073, align 16
  %mload.out.slot26092 = alloca i256, align 16
  %3523 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26092, ptr %arg.ecx.addr)
  %.not48345 = icmp eq i8 %3523, 0
  br i1 %.not48345, label %OP7562.MLOAD.contd, label %return, !prof !6

OP7562.MLOAD.contd:                               ; preds = %OP7561.PUSH1
  %mload.out26093 = load i256, ptr %mload.out.slot26092, align 16
  store i256 %mload.out26093, ptr %sp26073, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp26077, align 16
  %3524 = add i64 %len.addr.275, 3
  %sp26100 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi53975
  store i256 %mload.out26093, ptr %sp26100, align 16
  %3525 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out26093, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48346 = icmp eq i8 %3525, 0
  br i1 %.not48346, label %OP7566.PUSH1, label %return, !prof !6

OP7566.PUSH1:                                     ; preds = %OP7562.MLOAD.contd
  store i256 4, ptr %sp26077, align 16
  %b26112 = load i256, ptr %sp26073, align 16
  %3526 = add i256 %b26112, 4
  store i256 %3526, ptr %sp26073, align 16
  store i256 %3526, ptr %sp26077, align 16
  store i256 %3526, ptr %sp26100, align 16
  %sp26123 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3524
  store i256 32, ptr %sp26123, align 16
  %3527 = add i256 %b26112, 36
  store i256 %3527, ptr %sp26100, align 16
  store i256 %3526, ptr %sp26123, align 16
  %sp26137 = getelementptr i256, ptr %sp26073, i64 4
  store i256 %3527, ptr %sp26137, align 16
  store i256 32, ptr %sp26123, align 16
  store i256 %3526, ptr %sp26137, align 16
  %3528 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3526, i256 32, ptr %arg.ecx.addr)
  %.not48347 = icmp eq i8 %3528, 0
  br i1 %.not48347, label %OP7577.PUSH1, label %return, !prof !6

OP7577.PUSH1:                                     ; preds = %OP7566.PUSH1
  store i256 35, ptr %sp26123, align 16
  %dup226157 = load i256, ptr %sp26100, align 16
  store i256 %dup226157, ptr %sp26137, align 16
  %3529 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup226157, i256 35, ptr %arg.ecx.addr)
  %.not48348 = icmp eq i8 %3529, 0
  br i1 %.not48348, label %OP7580.PUSH1, label %return, !prof !6

OP7580.PUSH1:                                     ; preds = %OP7577.PUSH1
  store i256 32, ptr %sp26123, align 16
  %b26170 = load i256, ptr %sp26100, align 16
  %3530 = add i256 %b26170, 32
  store i256 %3530, ptr %sp26100, align 16
  store i256 %3530, ptr %sp26123, align 16
  store i256 22058, ptr %sp26137, align 16
  %sp26179 = getelementptr i256, ptr %sp26073, i64 5
  store i256 35, ptr %sp26179, align 16
  store i256 35, ptr %sp26123, align 16
  store i256 %3530, ptr %sp26179, align 16
  %3531 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26123)
  %.not48349 = icmp eq i8 %3531, 0
  br i1 %.not48349, label %OP7587.PUSH1, label %return, !prof !6

OP7587.PUSH1:                                     ; preds = %OP7580.PUSH1
  store i256 64, ptr %sp26123, align 16
  %b26193 = load i256, ptr %sp26100, align 16
  %3532 = add i256 %b26193, 64
  store i256 %3532, ptr %sp26100, align 16
  %swap.b26199 = load i256, ptr %sp26073, align 16
  store i256 %3532, ptr %sp26073, align 16
  store i256 %swap.b26199, ptr %sp26100, align 16
  store i256 64, ptr %sp26077, align 16
  %mload.out.slot26207 = alloca i256, align 16
  %3533 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26207, ptr %arg.ecx.addr)
  %.not48350 = icmp eq i8 %3533, 0
  br i1 %.not48350, label %OP7593.MLOAD.contd, label %return, !prof !6

OP7593.MLOAD.contd:                               ; preds = %OP7587.PUSH1
  %mload.out26208 = load i256, ptr %mload.out.slot26207, align 16
  store i256 %mload.out26208, ptr %sp26077, align 16
  store i256 %mload.out26208, ptr %sp26100, align 16
  %swap.b26218 = load i256, ptr %sp26073, align 16
  store i256 %mload.out26208, ptr %sp26073, align 16
  store i256 %swap.b26218, ptr %sp26100, align 16
  %3534 = sub i256 %swap.b26218, %mload.out26208
  store i256 %3534, ptr %sp26077, align 16
  store i256 %3534, ptr %sp26073, align 16
  store i256 %mload.out26208, ptr %sp26077, align 16
  %3535 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26073, i8 16)
  %.not48351 = icmp eq i8 %3535, 0
  %spec.select36651 = select i1 %.not48351, i8 16, i8 %3535, !prof !6
  br label %return

OP7599.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7555.JUMPDEST
  %len.addr.276 = phi i64 [ %len.addr.275, %OP7555.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp26234 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.276
  store i256 16505, ptr %sp26234, align 16
  %3536 = add i64 %len.addr.276, 2
  %sp26236 = getelementptr i256, ptr %sp26234, i64 -3
  %dup426237 = load i256, ptr %sp26236, align 16
  %sp26238 = getelementptr i256, ptr %sp26234, i64 1
  store i256 %dup426237, ptr %sp26238, align 16
  br label %OP7746.JUMPDEST

OP7604.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3537 = add i64 %len.addr.357, 1
  %3538 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp26242 = getelementptr i256, ptr %3538, i64 -2
  %dup226243 = load i256, ptr %sp26242, align 16
  store i256 %dup226243, ptr %3538, align 16
  %3539 = add i64 %len.addr.357, -1
  %sp26248 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3539
  %b26249 = load i256, ptr %sp26248, align 16
  %3540 = icmp ule i256 %dup226243, %b26249
  %3541 = zext i1 %3540 to i256
  store i256 %3541, ptr %sp26248, align 16
  br i1 %3540, label %OP7648.JUMPDEST, label %OP7610.PUSH1

OP7610.PUSH1:                                     ; preds = %OP7604.JUMPDEST
  store i256 64, ptr %sp26248, align 16
  %mload.out.slot26263 = alloca i256, align 16
  %3542 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26263, ptr %arg.ecx.addr)
  %.not48005 = icmp eq i8 %3542, 0
  br i1 %.not48005, label %OP7611.MLOAD.contd, label %return, !prof !6

OP7611.MLOAD.contd:                               ; preds = %OP7610.PUSH1
  %mload.out26264 = load i256, ptr %mload.out.slot26263, align 16
  store i256 %mload.out26264, ptr %sp26248, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %3538, align 16
  %3543 = add i64 %len.addr.357, 2
  %sp26269 = getelementptr i256, ptr %3538, i64 -1
  %sp26271 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3537
  store i256 %mload.out26264, ptr %sp26271, align 16
  %3544 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out26264, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48006 = icmp eq i8 %3544, 0
  br i1 %.not48006, label %OP7615.PUSH1, label %return, !prof !6

OP7615.PUSH1:                                     ; preds = %OP7611.MLOAD.contd
  store i256 4, ptr %3538, align 16
  %b26283 = load i256, ptr %sp26248, align 16
  %3545 = add i256 %b26283, 4
  store i256 %3545, ptr %sp26248, align 16
  store i256 %3545, ptr %3538, align 16
  store i256 %3545, ptr %sp26271, align 16
  %sp26294 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3543
  store i256 32, ptr %sp26294, align 16
  %3546 = add i256 %b26283, 36
  store i256 %3546, ptr %sp26271, align 16
  store i256 %3545, ptr %sp26294, align 16
  %sp26308 = getelementptr i256, ptr %3538, i64 3
  store i256 %3546, ptr %sp26308, align 16
  store i256 32, ptr %sp26294, align 16
  store i256 %3545, ptr %sp26308, align 16
  %3547 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3545, i256 32, ptr %arg.ecx.addr)
  %.not48007 = icmp eq i8 %3547, 0
  br i1 %.not48007, label %OP7626.PUSH1, label %return, !prof !6

OP7626.PUSH1:                                     ; preds = %OP7615.PUSH1
  store i256 38, ptr %sp26294, align 16
  %dup226328 = load i256, ptr %sp26271, align 16
  store i256 %dup226328, ptr %sp26308, align 16
  %3548 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup226328, i256 38, ptr %arg.ecx.addr)
  %.not48008 = icmp eq i8 %3548, 0
  br i1 %.not48008, label %OP7629.PUSH1, label %return, !prof !6

OP7629.PUSH1:                                     ; preds = %OP7626.PUSH1
  store i256 32, ptr %sp26294, align 16
  %b26341 = load i256, ptr %sp26271, align 16
  %3549 = add i256 %b26341, 32
  store i256 %3549, ptr %sp26271, align 16
  store i256 %3549, ptr %sp26294, align 16
  store i256 22485, ptr %sp26308, align 16
  %sp26350 = getelementptr i256, ptr %3538, i64 4
  store i256 38, ptr %sp26350, align 16
  store i256 38, ptr %sp26294, align 16
  store i256 %3549, ptr %sp26350, align 16
  %3550 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26294)
  %.not48009 = icmp eq i8 %3550, 0
  br i1 %.not48009, label %OP7636.PUSH1, label %return, !prof !6

OP7636.PUSH1:                                     ; preds = %OP7629.PUSH1
  store i256 64, ptr %sp26294, align 16
  %b26364 = load i256, ptr %sp26271, align 16
  %3551 = add i256 %b26364, 64
  store i256 %3551, ptr %sp26271, align 16
  %swap.b26370 = load i256, ptr %sp26269, align 16
  store i256 %3551, ptr %sp26269, align 16
  store i256 %swap.b26370, ptr %sp26271, align 16
  store i256 64, ptr %3538, align 16
  %mload.out.slot26378 = alloca i256, align 16
  %3552 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26378, ptr %arg.ecx.addr)
  %.not48010 = icmp eq i8 %3552, 0
  br i1 %.not48010, label %OP7642.MLOAD.contd, label %return, !prof !6

OP7642.MLOAD.contd:                               ; preds = %OP7636.PUSH1
  %mload.out26379 = load i256, ptr %mload.out.slot26378, align 16
  store i256 %mload.out26379, ptr %3538, align 16
  store i256 %mload.out26379, ptr %sp26271, align 16
  %swap.b26389 = load i256, ptr %sp26269, align 16
  store i256 %mload.out26379, ptr %sp26269, align 16
  store i256 %swap.b26389, ptr %sp26271, align 16
  %3553 = sub i256 %swap.b26389, %mload.out26379
  store i256 %3553, ptr %3538, align 16
  store i256 %3553, ptr %sp26269, align 16
  store i256 %mload.out26379, ptr %3538, align 16
  %3554 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26269, i8 16)
  %.not48011 = icmp eq i8 %3554, 0
  %spec.select36652 = select i1 %.not48011, i8 16, i8 %3554, !prof !6
  br label %return

OP7648.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7604.JUMPDEST
  %len.addr.277 = phi i64 [ %3539, %OP7604.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp26405 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.277
  store i256 16616, ptr %sp26405, align 16
  %sp26407 = getelementptr i256, ptr %sp26405, i64 -3
  %dup426408 = load i256, ptr %sp26407, align 16
  %sp26409 = getelementptr i256, ptr %sp26405, i64 1
  store i256 %dup426408, ptr %sp26409, align 16
  %sp26411 = getelementptr i256, ptr %sp26405, i64 2
  store i256 8655, ptr %sp26411, align 16
  %sp26413 = getelementptr i256, ptr %sp26405, i64 -1
  %dup426414 = load i256, ptr %sp26413, align 16
  %sp26415 = getelementptr i256, ptr %sp26405, i64 3
  store i256 %dup426414, ptr %sp26415, align 16
  %sp26417 = getelementptr i256, ptr %sp26405, i64 4
  store i256 16610, ptr %sp26417, align 16
  %3555 = add i64 %len.addr.277, 6
  %sp26421 = getelementptr i256, ptr %sp26405, i64 5
  store i256 %dup426408, ptr %sp26421, align 16
  br label %OP7746.JUMPDEST

OP7657.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3556 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp26425 = getelementptr i256, ptr %3556, i64 -1
  %swap.a26426 = load i256, ptr %sp26425, align 16
  %sp26427 = getelementptr i256, ptr %3556, i64 -2
  %swap.b26428 = load i256, ptr %sp26427, align 16
  store i256 %swap.a26426, ptr %sp26427, align 16
  store i256 %swap.b26428, ptr %sp26425, align 16
  br label %OP7701.JUMPDEST

OP7661.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp26432 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 16633, ptr %sp26432, align 16
  %sp26434 = getelementptr i256, ptr %sp26432, i64 -2
  %dup326435 = load i256, ptr %sp26434, align 16
  %sp26436 = getelementptr i256, ptr %sp26432, i64 1
  store i256 %dup326435, ptr %sp26436, align 16
  %sp26438 = getelementptr i256, ptr %sp26432, i64 2
  store i256 8655, ptr %sp26438, align 16
  %sp26440 = getelementptr i256, ptr %sp26432, i64 -1
  %dup426441 = load i256, ptr %sp26440, align 16
  %sp26442 = getelementptr i256, ptr %sp26432, i64 3
  store i256 %dup426441, ptr %sp26442, align 16
  %sp26444 = getelementptr i256, ptr %sp26432, i64 4
  store i256 8649, ptr %sp26444, align 16
  %3557 = add i64 %len.addr.357, 6
  %sp26448 = getelementptr i256, ptr %sp26432, i64 5
  store i256 %dup326435, ptr %sp26448, align 16
  br label %OP7746.JUMPDEST

OP7670.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3558 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp26452 = getelementptr i256, ptr %3558, i64 -2
  %dup226453 = load i256, ptr %sp26452, align 16
  store i256 %dup226453, ptr %3558, align 16
  %sp26456 = getelementptr i256, ptr %3558, i64 1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp26456, align 16
  %3559 = and i256 %dup226453, 1461501637330902918203684832716283019655932542975
  store i256 %3559, ptr %3558, align 16
  %sp26464 = getelementptr i256, ptr %3558, i64 -3
  %dup426465 = load i256, ptr %sp26464, align 16
  store i256 %dup426465, ptr %sp26456, align 16
  %sp26468 = getelementptr i256, ptr %3558, i64 2
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp26468, align 16
  %3560 = and i256 %dup426465, 1461501637330902918203684832716283019655932542975
  store i256 %3560, ptr %sp26456, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp26468, align 16
  %sp26478 = getelementptr i256, ptr %3558, i64 -1
  %dup426479 = load i256, ptr %sp26478, align 16
  %sp26480 = getelementptr i256, ptr %3558, i64 3
  store i256 %dup426479, ptr %sp26480, align 16
  %3561 = add i64 %len.addr.357, 5
  %sp26482 = getelementptr i256, ptr %3558, i64 4
  store i256 64, ptr %sp26482, align 16
  %mload.out.slot26486 = alloca i256, align 16
  %3562 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26486, ptr %arg.ecx.addr)
  %.not48001 = icmp eq i8 %3562, 0
  br i1 %.not48001, label %OP7680.MLOAD.contd, label %return, !prof !6

OP7680.MLOAD.contd:                               ; preds = %OP7670.JUMPDEST
  %mload.out26487 = load i256, ptr %mload.out.slot26486, align 16
  store i256 %mload.out26487, ptr %sp26482, align 16
  %3563 = add i64 %len.addr.357, 6
  %sp26492 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3561
  store i256 %mload.out26487, ptr %sp26492, align 16
  %dup326495 = load i256, ptr %sp26480, align 16
  %sp26496 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3563
  store i256 %dup326495, ptr %sp26496, align 16
  %sp26500 = getelementptr i256, ptr %3558, i64 7
  store i256 %mload.out26487, ptr %sp26500, align 16
  %3564 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out26487, i256 %dup326495, ptr %arg.ecx.addr)
  %.not48002 = icmp eq i8 %3564, 0
  br i1 %.not48002, label %OP7685.PUSH1, label %return, !prof !6

OP7685.PUSH1:                                     ; preds = %OP7680.MLOAD.contd
  store i256 32, ptr %sp26496, align 16
  %b26512 = load i256, ptr %sp26492, align 16
  %3565 = add i256 %b26512, 32
  store i256 %3565, ptr %sp26492, align 16
  %swap.b26518 = load i256, ptr %sp26480, align 16
  store i256 %3565, ptr %sp26480, align 16
  store i256 %swap.b26518, ptr %sp26492, align 16
  store i256 64, ptr %sp26482, align 16
  %mload.out.slot26526 = alloca i256, align 16
  %3566 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26526, ptr %arg.ecx.addr)
  %.not48003 = icmp eq i8 %3566, 0
  br i1 %.not48003, label %OP7691.MLOAD.contd, label %return, !prof !6

OP7691.MLOAD.contd:                               ; preds = %OP7685.PUSH1
  %mload.out26527 = load i256, ptr %mload.out.slot26526, align 16
  store i256 %mload.out26527, ptr %sp26482, align 16
  store i256 %mload.out26527, ptr %sp26492, align 16
  %swap.b26537 = load i256, ptr %sp26480, align 16
  store i256 %mload.out26527, ptr %sp26480, align 16
  store i256 %swap.b26537, ptr %sp26492, align 16
  %3567 = sub i256 %swap.b26537, %mload.out26527
  store i256 %3567, ptr %sp26482, align 16
  store i256 %3567, ptr %sp26480, align 16
  store i256 %mload.out26527, ptr %sp26482, align 16
  %3568 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %3558, i8 3)
  %.not48004 = icmp eq i8 %3568, 0
  br i1 %.not48004, label %OP7697.POP, label %return, !prof !6

OP7697.POP:                                       ; preds = %OP7691.MLOAD.contd
  %3569 = add i64 %len.addr.357, -4
  %sp26555 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3569
  %a26556 = load i256, ptr %sp26555, align 16
  br label %dynamic_jump_table.backedge

OP7701.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7657.JUMPDEST, %OP4751.PUSH2, %OP4743.PUSH2, %OP4420.JUMPDEST, %OP3265.PUSH2
  %len.addr.278 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %len.addr.357, %OP7657.JUMPDEST ], [ %2180, %OP4751.PUSH2 ], [ %2175, %OP4743.PUSH2 ], [ %2048, %OP4420.JUMPDEST ], [ %1556, %OP3265.PUSH2 ]
  %3570 = add i64 %len.addr.278, 1
  %sp26559 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.278
  store i256 0, ptr %sp26559, align 16
  %sp26561 = getelementptr i256, ptr %sp26559, i64 -2
  %dup326562 = load i256, ptr %sp26561, align 16
  %sp26563 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3570
  store i256 %dup326562, ptr %sp26563, align 16
  %sp26565 = getelementptr i256, ptr %sp26559, i64 -1
  %dup326566 = load i256, ptr %sp26565, align 16
  %sp26567 = getelementptr i256, ptr %sp26559, i64 2
  store i256 %dup326566, ptr %sp26567, align 16
  %3571 = icmp ule i256 %dup326566, %dup326562
  %3572 = zext i1 %3571 to i256
  store i256 %3572, ptr %sp26563, align 16
  br i1 %3571, label %OP7740.JUMPDEST, label %OP7709.PUSH1

OP7709.PUSH1:                                     ; preds = %OP7701.JUMPDEST
  %sp26567.le = getelementptr i256, ptr %sp26559, i64 2
  %3573 = add i64 %len.addr.278, 3
  store i256 64, ptr %sp26563, align 16
  store i256 64, ptr %sp26567.le, align 16
  %mload.out.slot26590 = alloca i256, align 16
  %3574 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot26590, ptr %arg.ecx.addr)
  %.not48308 = icmp eq i8 %3574, 0
  br i1 %.not48308, label %OP7711.MLOAD.contd, label %return, !prof !6

OP7711.MLOAD.contd:                               ; preds = %OP7709.PUSH1
  %mload.out26591 = load i256, ptr %mload.out.slot26590, align 16
  store i256 %mload.out26591, ptr %sp26567.le, align 16
  %sp26594 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3573
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp26594, align 16
  %sp26598 = getelementptr i256, ptr %sp26559, i64 4
  store i256 %mload.out26591, ptr %sp26598, align 16
  %3575 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out26591, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48309 = icmp eq i8 %3575, 0
  br i1 %.not48309, label %OP7715.PUSH1, label %return, !prof !6

OP7715.PUSH1:                                     ; preds = %OP7711.MLOAD.contd
  store i256 32, ptr %sp26594, align 16
  store i256 4, ptr %sp26598, align 16
  %dup326610 = load i256, ptr %sp26567.le, align 16
  %sp26611 = getelementptr i256, ptr %sp26559, i64 5
  store i256 %dup326610, ptr %sp26611, align 16
  %3576 = add i256 %dup326610, 4
  store i256 %3576, ptr %sp26598, align 16
  %3577 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3576, i256 32, ptr %arg.ecx.addr)
  %.not48310 = icmp eq i8 %3577, 0
  br i1 %.not48310, label %OP7720.PUSH1, label %return, !prof !6

OP7720.PUSH1:                                     ; preds = %OP7715.PUSH1
  store i256 30, ptr %sp26594, align 16
  store i256 36, ptr %sp26598, align 16
  %dup326629 = load i256, ptr %sp26567.le, align 16
  store i256 %dup326629, ptr %sp26611, align 16
  %3578 = add i256 %dup326629, 36
  store i256 %3578, ptr %sp26598, align 16
  %3579 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3578, i256 30, ptr %arg.ecx.addr)
  %.not48311 = icmp eq i8 %3579, 0
  br i1 %.not48311, label %OP7725.PUSH32, label %return, !prof !6

OP7725.PUSH32:                                    ; preds = %OP7720.PUSH1
  store i256 37714057306925736537727343956344029380455708191757305005271024775623175766016, ptr %sp26594, align 16
  store i256 68, ptr %sp26598, align 16
  %dup326648 = load i256, ptr %sp26567.le, align 16
  store i256 %dup326648, ptr %sp26611, align 16
  %3580 = add i256 %dup326648, 68
  store i256 %3580, ptr %sp26598, align 16
  %3581 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3580, i256 37714057306925736537727343956344029380455708191757305005271024775623175766016, ptr %arg.ecx.addr)
  %.not48312 = icmp eq i8 %3581, 0
  br i1 %.not48312, label %OP7730.SWAP1, label %return, !prof !6

OP7730.SWAP1:                                     ; preds = %OP7725.PUSH32
  %swap.a26663 = load i256, ptr %sp26567.le, align 16
  %swap.b26665 = load i256, ptr %sp26563, align 16
  store i256 %swap.a26663, ptr %sp26563, align 16
  store i256 %swap.b26665, ptr %sp26567.le, align 16
  %mload.out.slot26669 = alloca i256, align 16
  %3582 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b26665, ptr %mload.out.slot26669, ptr %arg.ecx.addr)
  %.not48313 = icmp eq i8 %3582, 0
  br i1 %.not48313, label %OP7731.MLOAD.contd, label %return, !prof !6

OP7731.MLOAD.contd:                               ; preds = %OP7730.SWAP1
  %mload.out26670 = load i256, ptr %mload.out.slot26669, align 16
  store i256 %mload.out26670, ptr %sp26567.le, align 16
  %swap.b26676 = load i256, ptr %sp26563, align 16
  store i256 %mload.out26670, ptr %sp26563, align 16
  store i256 %swap.b26676, ptr %sp26567.le, align 16
  store i256 %mload.out26670, ptr %sp26594, align 16
  store i256 %mload.out26670, ptr %sp26567.le, align 16
  store i256 %swap.b26676, ptr %sp26594, align 16
  %3583 = sub i256 %swap.b26676, %mload.out26670
  store i256 %3583, ptr %sp26567.le, align 16
  store i256 100, ptr %sp26594, align 16
  %3584 = add i256 %3583, 100
  store i256 %3584, ptr %sp26567.le, align 16
  store i256 %3584, ptr %sp26563, align 16
  store i256 %mload.out26670, ptr %sp26567.le, align 16
  %3585 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26563, i8 16)
  %.not48314 = icmp eq i8 %3585, 0
  %spec.select36653 = select i1 %.not48314, i8 16, i8 %3585, !prof !6
  br label %return

OP7740.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7701.JUMPDEST
  %len.addr.279 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %3570, %OP7701.JUMPDEST ]
  %3586 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.279
  %sp26710 = getelementptr i256, ptr %3586, i64 -2
  %swap.a26711 = load i256, ptr %sp26710, align 16
  %sp26712 = getelementptr i256, ptr %3586, i64 -3
  %swap.b26713 = load i256, ptr %sp26712, align 16
  store i256 %swap.a26711, ptr %sp26712, align 16
  store i256 %swap.b26713, ptr %sp26710, align 16
  %3587 = sub i256 %swap.b26713, %swap.a26711
  store i256 %3587, ptr %sp26712, align 16
  %sp26723 = getelementptr i256, ptr %3586, i64 -4
  %swap.b26724 = load i256, ptr %sp26723, align 16
  store i256 %3587, ptr %sp26723, align 16
  store i256 %swap.b26724, ptr %sp26712, align 16
  %3588 = add i64 %len.addr.279, -3
  br label %dynamic_jump_table.backedge

OP7746.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9179.PUSH2, %OP7661.JUMPDEST, %OP7648.JUMPDEST, %OP7599.JUMPDEST, %OP5380.JUMPDEST, %OP4643.JUMPDEST, %OP4405.PUSH2, %OP3429.JUMPDEST
  %len.addr.280 = phi i64 [ %4428, %OP9179.PUSH2 ], [ %3536, %OP7599.JUMPDEST ], [ %3557, %OP7661.JUMPDEST ], [ %3555, %OP7648.JUMPDEST ], [ %2502, %OP5380.JUMPDEST ], [ %2135, %OP4643.JUMPDEST ], [ %2046, %OP4405.PUSH2 ], [ %1635, %OP3429.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp26730 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.280
  %sp26734 = getelementptr i256, ptr %sp26730, i64 -1
  %b26735 = load i256, ptr %sp26734, align 16
  %3589 = and i256 %b26735, 1461501637330902918203684832716283019655932542975
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp26734, i8 0, i64 32, i1 false)
  store i256 %3589, ptr %sp26730, align 16
  %sp26747 = getelementptr i256, ptr %sp26730, i64 1
  store i256 0, ptr %sp26747, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !651)
  %ecx.memory.addr.i50649 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50650 = load ptr, ptr %ecx.memory.addr.i50649, align 8, !alias.scope !651
  %ecx.memory.len.addr.i50651 = getelementptr inbounds i8, ptr %ecx.memory.i50650, i64 16
  %ecx.memory.len.i50652 = load i64, ptr %ecx.memory.len.addr.i50651, align 8, !noalias !651
  %ecx.memory.last_checkpoint.addr.i50653 = getelementptr inbounds i8, ptr %ecx.memory.i50650, i64 48
  %ecx.memory.last_checkpoint.i50654 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50653, align 8, !noalias !651
  %3590 = sub i64 %ecx.memory.len.i50652, %ecx.memory.last_checkpoint.i50654
  %3591 = icmp ult i64 %3590, 32
  br i1 %3591, label %resize.i50660, label %OP7753.PUSH1, !prof !5

resize.i50660:                                    ; preds = %OP7746.JUMPDEST
  %3592 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50661 = icmp eq i8 %3592, 0
  br i1 %.not.i50661, label %OP7753.PUSH1, label %return, !prof !6

OP7753.PUSH1:                                     ; preds = %OP7746.JUMPDEST, %resize.i50660
  %ecx.memory.buffer.ptr.shared.addr.i50656 = getelementptr inbounds i8, ptr %ecx.memory.i50650, i64 8
  %ecx.memory.buffer.ptr.shared.i50657 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50656, align 8, !noalias !651
  %ecx.memory.buffer.ptr.i50658 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50657, i64 %ecx.memory.last_checkpoint.i50654
  %3593 = tail call i256 @llvm.bswap.i256(i256 %3589)
  store i256 %3593, ptr %ecx.memory.buffer.ptr.i50658, align 1, !noalias !651
  store i256 9, ptr %sp26730, align 16
  store i256 32, ptr %sp26747, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !654)
  %ecx.memory.i50664 = load ptr, ptr %ecx.memory.addr.i50649, align 8, !alias.scope !654
  %ecx.memory.len.addr.i50665 = getelementptr inbounds i8, ptr %ecx.memory.i50664, i64 16
  %ecx.memory.len.i50666 = load i64, ptr %ecx.memory.len.addr.i50665, align 8, !noalias !654
  %ecx.memory.last_checkpoint.addr.i50667 = getelementptr inbounds i8, ptr %ecx.memory.i50664, i64 48
  %ecx.memory.last_checkpoint.i50668 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50667, align 8, !noalias !654
  %3594 = sub i64 %ecx.memory.len.i50666, %ecx.memory.last_checkpoint.i50668
  %3595 = icmp ult i64 %3594, 64
  br i1 %3595, label %resize.i50675, label %OP7756.PUSH1, !prof !5

resize.i50675:                                    ; preds = %OP7753.PUSH1
  %3596 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50676 = icmp eq i8 %3596, 0
  br i1 %.not.i50676, label %OP7756.PUSH1, label %return, !prof !6

OP7756.PUSH1:                                     ; preds = %OP7753.PUSH1, %resize.i50675
  %ecx.memory.buffer.ptr.shared.addr.i50670 = getelementptr inbounds i8, ptr %ecx.memory.i50664, i64 8
  %ecx.memory.buffer.ptr.shared.i50671 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50670, align 8, !noalias !654
  %ecx.memory.buffer.ptr.i50672 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50671, i64 %ecx.memory.last_checkpoint.i50668
  %slot.i50673 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50672, i64 32
  store i256 4070815637249397495359917441711684260466522898401426079512180687778195963904, ptr %slot.i50673, align 1, !noalias !654
  %swap.b26768 = load i256, ptr %sp26734, align 16
  store i256 64, ptr %sp26734, align 16
  store i256 %swap.b26768, ptr %sp26730, align 16
  %3597 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26734)
  %.not48632 = icmp eq i8 %3597, 0
  br i1 %.not48632, label %OP7759.SLOAD, label %return, !prof !6

OP7759.SLOAD:                                     ; preds = %OP7756.PUSH1
  %3598 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26734, i8 17)
  %.not48633 = icmp eq i8 %3598, 0
  br i1 %.not48633, label %OP7760.PUSH32, label %return, !prof !6

OP7760.PUSH32:                                    ; preds = %OP7759.SLOAD
  store i256 57896044618658097711785492504343953926634992332820282019728792003956564819967, ptr %sp26730, align 16
  %b26779 = load i256, ptr %sp26734, align 16
  %3599 = and i256 %b26779, 57896044618658097711785492504343953926634992332820282019728792003956564819967
  %sp26784 = getelementptr i256, ptr %sp26730, i64 -2
  %swap.b26785 = load i256, ptr %sp26784, align 16
  store i256 %3599, ptr %sp26784, align 16
  store i256 %swap.b26785, ptr %sp26734, align 16
  %3600 = add i64 %len.addr.280, -1
  br label %dynamic_jump_table.preheader

OP7770.JUMPDEST.sink.split:                       ; preds = %OP3893.PUSH2, %OP7263.PUSH2
  %sp24965.sink = phi ptr [ %sp24965, %OP7263.PUSH2 ], [ %sp13182, %OP3893.PUSH2 ]
  %sp24922.sink = phi ptr [ %sp24922, %OP7263.PUSH2 ], [ %1816, %OP3893.PUSH2 ]
  %len.addr.282.ph = phi i64 [ %3263, %OP7263.PUSH2 ], [ %1817, %OP3893.PUSH2 ]
  %dup225050 = load i256, ptr %sp24965.sink, align 16
  store i256 %dup225050, ptr %sp24922.sink, align 16
  br label %OP7770.JUMPDEST

OP7770.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7770.JUMPDEST.sink.split
  %len.addr.282 = phi i64 [ %len.addr.282.ph, %OP7770.JUMPDEST.sink.split ], [ %len.addr.357, %dynamic_jump_table ]
  %sp26801 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.282
  %3601 = add i64 %len.addr.282, 2
  %sp26805 = getelementptr i256, ptr %sp26801, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp26801, i8 0, i64 64, i1 false)
  %3602 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26805, i8 17)
  %.not48401 = icmp eq i8 %3602, 0
  br i1 %.not48401, label %OP7774.PUSH32, label %return, !prof !6

OP7774.PUSH32:                                    ; preds = %OP7770.JUMPDEST
  %sp26809 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3601
  store i256 -1461501637330902918203684832716283019655932542976, ptr %sp26809, align 16
  %b26814 = load i256, ptr %sp26805, align 16
  %3603 = and i256 %b26814, -1461501637330902918203684832716283019655932542976
  store i256 %3603, ptr %sp26805, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp26809, align 16
  %sp26821 = getelementptr i256, ptr %sp26801, i64 -1
  %swap.b26822 = load i256, ptr %sp26821, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp26821, align 16
  store i256 %swap.b26822, ptr %sp26809, align 16
  store i256 %swap.b26822, ptr %sp26805, align 16
  store i256 %3603, ptr %sp26809, align 16
  store i256 %3603, ptr %sp26821, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp26809, align 16
  %3604 = and i256 %swap.b26822, 1461501637330902918203684832716283019655932542975
  store i256 %3604, ptr %sp26805, align 16
  store i256 %3604, ptr %sp26821, align 16
  store i256 %3603, ptr %sp26805, align 16
  %swap.b26848 = load i256, ptr %sp26801, align 16
  store i256 %3603, ptr %sp26801, align 16
  store i256 %swap.b26848, ptr %sp26805, align 16
  store i256 %swap.b26848, ptr %sp26821, align 16
  store i256 %3604, ptr %sp26805, align 16
  %3605 = or disjoint i256 %3604, %3603
  store i256 %3605, ptr %sp26801, align 16
  store i256 %3605, ptr %sp26821, align 16
  store i256 %swap.b26848, ptr %sp26801, align 16
  %3606 = add i64 %len.addr.282, -1
  %3607 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26821, i8 17)
  %.not48402 = icmp eq i8 %3607, 0
  br i1 %.not48402, label %OP7787.JUMP, label %return, !prof !6

OP7787.JUMP:                                      ; preds = %OP7774.PUSH32
  %3608 = add i64 %len.addr.282, -2
  %sp26868 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3608
  %a26869 = load i256, ptr %sp26868, align 16
  br label %dynamic_jump_table.preheader

OP7788.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9406.JUMPDEST, %OP8373.JUMPDEST, %OP3923.JUMPDEST
  %len.addr.283 = phi i64 [ %4626, %OP9406.JUMPDEST ], [ %3964, %OP8373.JUMPDEST ], [ %1849, %OP3923.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp26872 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.283
  store i256 4, ptr %sp26872, align 16
  %3609 = add i64 %len.addr.283, 2
  %sp26876 = getelementptr i256, ptr %sp26872, i64 1
  store i256 4, ptr %sp26876, align 16
  %3610 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp26876, i8 17)
  %.not49005 = icmp eq i8 %3610, 0
  br i1 %.not49005, label %OP7792.PUSH1, label %return, !prof !6

OP7792.PUSH1:                                     ; preds = %OP7788.JUMPDEST
  %sp26880 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3609
  store i256 64, ptr %sp26880, align 16
  %3611 = add i64 %len.addr.283, 4
  %sp26884 = getelementptr i256, ptr %sp26872, i64 3
  store i256 64, ptr %sp26884, align 16
  %ecx.memory.addr.i50678 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50679 = load ptr, ptr %ecx.memory.addr.i50678, align 8
  %ecx.memory.len.addr.i50680 = getelementptr inbounds i8, ptr %ecx.memory.i50679, i64 16
  %ecx.memory.len.i50681 = load i64, ptr %ecx.memory.len.addr.i50680, align 8, !noalias !657
  %ecx.memory.last_checkpoint.addr.i50682 = getelementptr inbounds i8, ptr %ecx.memory.i50679, i64 48
  %ecx.memory.last_checkpoint.i50683 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50682, align 8, !noalias !657
  %3612 = sub i64 %ecx.memory.len.i50681, %ecx.memory.last_checkpoint.i50683
  %3613 = icmp ult i64 %3612, 96
  br i1 %3613, label %resize.i50691, label %OP7794.MLOAD.contd, !prof !5

resize.i50691:                                    ; preds = %OP7792.PUSH1
  %3614 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !661
  %.not.i50692 = icmp eq i8 %3614, 0
  br i1 %.not.i50692, label %resize.i50691.OP7794.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50691.OP7794.MLOAD.contd_crit_edge:       ; preds = %resize.i50691
  %sp27029.phi.trans.insert = getelementptr i256, ptr %sp26872, i64 2
  %swap.b27030.pre = load i256, ptr %sp27029.phi.trans.insert, align 16
  %ecx.memory.i50695.pre = load ptr, ptr %ecx.memory.addr.i50678, align 8, !alias.scope !662
  br label %OP7794.MLOAD.contd

OP7794.MLOAD.contd:                               ; preds = %resize.i50691.OP7794.MLOAD.contd_crit_edge, %OP7792.PUSH1
  %ecx.memory.i50695 = phi ptr [ %ecx.memory.i50695.pre, %resize.i50691.OP7794.MLOAD.contd_crit_edge ], [ %ecx.memory.i50679, %OP7792.PUSH1 ]
  %swap.b27030 = phi i256 [ %swap.b27030.pre, %resize.i50691.OP7794.MLOAD.contd_crit_edge ], [ 64, %OP7792.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i50685 = getelementptr inbounds i8, ptr %ecx.memory.i50679, i64 8
  %ecx.memory.buffer.ptr.shared.i50686 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50685, align 8, !noalias !657
  %ecx.memory.buffer.ptr.i50687 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50686, i64 %ecx.memory.last_checkpoint.i50683
  %slot.i50688 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50687, i64 64
  %slot.value.i50689 = load i256, ptr %slot.i50688, align 1, !noalias !657
  %3615 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50689)
  store i256 %3615, ptr %sp26884, align 16
  %sp26892 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3611
  %sp26894 = getelementptr i256, ptr %sp26872, i64 5
  %sp26896 = getelementptr i256, ptr %sp26872, i64 6
  %3616 = add i64 %len.addr.283, 8
  %dup626899 = load i256, ptr %sp26876, align 16
  %sp26900 = getelementptr i256, ptr %sp26872, i64 7
  %3617 = shl i256 %dup626899, 8
  %3618 = and i256 %3617, 256
  %3619 = xor i256 %3618, 256
  store i256 -1, ptr %sp26900, align 16
  %3620 = add nsw i256 %3619, -1
  %3621 = and i256 %dup626899, %3620
  store i256 32, ptr %sp26876, align 16
  %3622 = lshr i256 %3621, 1
  %3623 = add nuw i256 %3622, 31
  %3624 = and i256 %3623, -32
  %3625 = add i256 %3615, %3624
  store i256 32, ptr %sp26896, align 16
  %3626 = add i256 %3625, 32
  store i256 %3626, ptr %sp26892, align 16
  %sp27029 = getelementptr i256, ptr %sp26872, i64 2
  store i256 %3622, ptr %sp27029, align 16
  store i256 %swap.b27030, ptr %sp26894, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !662)
  %ecx.memory.len.addr.i50696 = getelementptr inbounds i8, ptr %ecx.memory.i50695, i64 16
  %ecx.memory.len.i50697 = load i64, ptr %ecx.memory.len.addr.i50696, align 8, !noalias !662
  %ecx.memory.last_checkpoint.addr.i50698 = getelementptr inbounds i8, ptr %ecx.memory.i50695, i64 48
  %ecx.memory.last_checkpoint.i50699 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50698, align 8, !noalias !662
  %3627 = sub i64 %ecx.memory.len.i50697, %ecx.memory.last_checkpoint.i50699
  %3628 = icmp ugt i256 %swap.b27030, 18446744073709551615
  %3629 = trunc i256 %swap.b27030 to i64
  %3630 = add i64 %3629, 32
  %3631 = icmp ugt i64 %3629, -33
  %3632 = or i1 %3628, %3631
  %3633 = select i1 %3632, i64 -1, i64 %3630
  %3634 = icmp ugt i64 %3633, %3627
  br i1 %3634, label %resize.i50706, label %OP7827.DUP2, !prof !5

resize.i50706:                                    ; preds = %OP7794.MLOAD.contd
  %3635 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3633)
  %.not.i50707 = icmp eq i8 %3635, 0
  br i1 %.not.i50707, label %OP7827.DUP2, label %return, !prof !6

OP7827.DUP2:                                      ; preds = %OP7794.MLOAD.contd, %resize.i50706
  %ecx.memory.buffer.ptr.shared.addr.i50701 = getelementptr inbounds i8, ptr %ecx.memory.i50695, i64 8
  %ecx.memory.buffer.ptr.shared.i50702 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50701, align 8, !noalias !662
  %ecx.memory.buffer.ptr.i50703 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50702, i64 %ecx.memory.last_checkpoint.i50699
  %slot.i50704 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50703, i64 %3629
  %3636 = tail call i256 @llvm.bswap.i256(i256 %3626)
  store i256 %3636, ptr %slot.i50704, align 1, !noalias !662
  %dup227038 = load i256, ptr %sp26880, align 16
  store i256 %dup227038, ptr %sp26892, align 16
  %dup227042 = load i256, ptr %sp26884, align 16
  store i256 %dup227042, ptr %sp26894, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !665)
  %ecx.memory.i50710 = load ptr, ptr %ecx.memory.addr.i50678, align 8, !alias.scope !665
  %ecx.memory.len.addr.i50711 = getelementptr inbounds i8, ptr %ecx.memory.i50710, i64 16
  %ecx.memory.len.i50712 = load i64, ptr %ecx.memory.len.addr.i50711, align 8, !noalias !665
  %ecx.memory.last_checkpoint.addr.i50713 = getelementptr inbounds i8, ptr %ecx.memory.i50710, i64 48
  %ecx.memory.last_checkpoint.i50714 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50713, align 8, !noalias !665
  %3637 = sub i64 %ecx.memory.len.i50712, %ecx.memory.last_checkpoint.i50714
  %3638 = icmp ugt i256 %dup227042, 18446744073709551615
  %3639 = trunc i256 %dup227042 to i64
  %3640 = add i64 %3639, 32
  %3641 = icmp ugt i64 %3639, -33
  %3642 = or i1 %3638, %3641
  %3643 = select i1 %3642, i64 -1, i64 %3640
  %3644 = icmp ugt i64 %3643, %3637
  br i1 %3644, label %resize.i50721, label %OP7830.PUSH1, !prof !5

resize.i50721:                                    ; preds = %OP7827.DUP2
  %3645 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3643)
  %.not.i50722 = icmp eq i8 %3645, 0
  br i1 %.not.i50722, label %OP7830.PUSH1, label %return, !prof !6

OP7830.PUSH1:                                     ; preds = %OP7827.DUP2, %resize.i50721
  %ecx.memory.buffer.ptr.shared.addr.i50716 = getelementptr inbounds i8, ptr %ecx.memory.i50710, i64 8
  %ecx.memory.buffer.ptr.shared.i50717 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50716, align 8, !noalias !665
  %ecx.memory.buffer.ptr.i50718 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50717, i64 %ecx.memory.last_checkpoint.i50714
  %slot.i50719 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50718, i64 %3639
  %3646 = tail call i256 @llvm.bswap.i256(i256 %dup227038)
  store i256 %3646, ptr %slot.i50719, align 1, !noalias !665
  %swap.b27055 = load i256, ptr %sp26872, align 16
  store i256 0, ptr %sp26872, align 16
  %swap.b27062 = load i256, ptr %sp26876, align 16
  store i256 7497, ptr %sp26876, align 16
  %swap.b27067 = load i256, ptr %sp26884, align 16
  %swap.b27072 = load i256, ptr %sp27029, align 16
  store i256 %swap.b27067, ptr %sp27029, align 16
  store i256 %swap.b27072, ptr %sp26892, align 16
  store i256 %swap.b27055, ptr %sp26884, align 16
  %3647 = add i256 %swap.b27067, %swap.b27062
  store i256 %3647, ptr %sp26894, align 16
  store i256 %swap.b27055, ptr %sp26896, align 16
  store i256 %swap.b27072, ptr %sp26900, align 16
  %sp27104 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3616
  %3648 = icmp eq i256 %swap.b27072, 0
  %3649 = zext i1 %3648 to i256
  store i256 %3649, ptr %sp27104, align 16
  br i1 %3648, label %OP7900.JUMPDEST, label %OP7846.DUP1

OP7846.DUP1:                                      ; preds = %OP7830.PUSH1
  %sp27117 = getelementptr i256, ptr %sp26872, i64 9
  store i256 31, ptr %sp27117, align 16
  %3650 = icmp ugt i256 %swap.b27072, 31
  %3651 = zext i1 %3650 to i256
  store i256 %3651, ptr %sp27104, align 16
  br i1 %3650, label %OP7865.JUMPDEST, label %OP7851.PUSH2

OP7851.PUSH2:                                     ; preds = %OP7846.DUP1
  store i256 256, ptr %sp27104, align 16
  store i256 256, ptr %sp27117, align 16
  %3652 = add i64 %len.addr.283, 11
  %sp27136 = getelementptr i256, ptr %sp26872, i64 10
  store i256 %swap.b27055, ptr %sp27136, align 16
  %3653 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27136, i8 17)
  %.not49009 = icmp eq i8 %3653, 0
  br i1 %.not49009, label %OP7855.DIV, label %return, !prof !6

OP7855.DIV:                                       ; preds = %OP7851.PUSH2
  %a27141 = load i256, ptr %sp27136, align 16
  %b27143 = load i256, ptr %sp27117, align 16
  %3654 = udiv i256 %a27141, %b27143
  %b27149 = load i256, ptr %sp27104, align 16
  %3655 = mul i256 %b27149, %3654
  store i256 %3655, ptr %sp27104, align 16
  %dup427153 = load i256, ptr %sp26894, align 16
  store i256 %dup427153, ptr %sp27117, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !668)
  %ecx.memory.i50725 = load ptr, ptr %ecx.memory.addr.i50678, align 8, !alias.scope !668
  %ecx.memory.len.addr.i50726 = getelementptr inbounds i8, ptr %ecx.memory.i50725, i64 16
  %ecx.memory.len.i50727 = load i64, ptr %ecx.memory.len.addr.i50726, align 8, !noalias !668
  %ecx.memory.last_checkpoint.addr.i50728 = getelementptr inbounds i8, ptr %ecx.memory.i50725, i64 48
  %ecx.memory.last_checkpoint.i50729 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50728, align 8, !noalias !668
  %3656 = sub i64 %ecx.memory.len.i50727, %ecx.memory.last_checkpoint.i50729
  %3657 = icmp ugt i256 %dup427153, 18446744073709551615
  %3658 = trunc i256 %dup427153 to i64
  %3659 = add i64 %3658, 32
  %3660 = icmp ugt i64 %3658, -33
  %3661 = or i1 %3657, %3660
  %3662 = select i1 %3661, i64 -1, i64 %3659
  %3663 = icmp ugt i64 %3662, %3656
  br i1 %3663, label %resize.i50736, label %OP7859.SWAP2, !prof !5

resize.i50736:                                    ; preds = %OP7855.DIV
  %3664 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3662)
  %.not.i50737 = icmp eq i8 %3664, 0
  br i1 %.not.i50737, label %OP7859.SWAP2, label %return, !prof !6

OP7859.SWAP2:                                     ; preds = %OP7855.DIV, %resize.i50736
  %ecx.memory.buffer.ptr.shared.addr.i50731 = getelementptr inbounds i8, ptr %ecx.memory.i50725, i64 8
  %ecx.memory.buffer.ptr.shared.i50732 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50731, align 8, !noalias !668
  %ecx.memory.buffer.ptr.i50733 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50732, i64 %ecx.memory.last_checkpoint.i50729
  %slot.i50734 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50733, i64 %3658
  %3665 = tail call i256 @llvm.bswap.i256(i256 %3655)
  store i256 %3665, ptr %slot.i50734, align 1, !noalias !668
  %swap.b27164 = load i256, ptr %sp26894, align 16
  store i256 32, ptr %sp27104, align 16
  %3666 = add i256 %swap.b27164, 32
  store i256 %3666, ptr %sp26894, align 16
  br label %OP7900.JUMPDEST

OP7865.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7846.DUP1
  %len.addr.284 = phi i64 [ %3616, %OP7846.DUP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %3667 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.284
  %sp27181 = getelementptr i256, ptr %3667, i64 -3
  %dup327182 = load i256, ptr %sp27181, align 16
  %3668 = add i64 %len.addr.284, -1
  %sp27187 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3668
  %b27188 = load i256, ptr %sp27187, align 16
  %3669 = add i256 %b27188, %dup327182
  %sp27191 = getelementptr i256, ptr %3667, i64 -1
  store i256 %3669, ptr %sp27181, align 16
  %sp27198 = getelementptr i256, ptr %3667, i64 -2
  %swap.b27199 = load i256, ptr %sp27198, align 16
  store i256 %dup327182, ptr %sp27198, align 16
  store i256 %swap.b27199, ptr %sp27191, align 16
  store i256 0, ptr %3667, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !671)
  %ecx.memory.addr.i50739 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50740 = load ptr, ptr %ecx.memory.addr.i50739, align 8, !alias.scope !671
  %ecx.memory.len.addr.i50741 = getelementptr inbounds i8, ptr %ecx.memory.i50740, i64 16
  %ecx.memory.len.i50742 = load i64, ptr %ecx.memory.len.addr.i50741, align 8, !noalias !671
  %ecx.memory.last_checkpoint.addr.i50743 = getelementptr inbounds i8, ptr %ecx.memory.i50740, i64 48
  %ecx.memory.last_checkpoint.i50744 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50743, align 8, !noalias !671
  %3670 = sub i64 %ecx.memory.len.i50742, %ecx.memory.last_checkpoint.i50744
  %3671 = icmp ult i64 %3670, 32
  br i1 %3671, label %resize.i50750, label %OP7872.PUSH1, !prof !5

resize.i50750:                                    ; preds = %OP7865.JUMPDEST
  %3672 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50751 = icmp eq i8 %3672, 0
  br i1 %.not.i50751, label %OP7872.PUSH1, label %return, !prof !6

OP7872.PUSH1:                                     ; preds = %OP7865.JUMPDEST, %resize.i50750
  %ecx.memory.buffer.ptr.shared.addr.i50746 = getelementptr inbounds i8, ptr %ecx.memory.i50740, i64 8
  %ecx.memory.buffer.ptr.shared.i50747 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50746, align 8, !noalias !671
  %ecx.memory.buffer.ptr.i50748 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50747, i64 %ecx.memory.last_checkpoint.i50744
  %3673 = tail call i256 @llvm.bswap.i256(i256 %swap.b27199)
  store i256 %3673, ptr %ecx.memory.buffer.ptr.i50748, align 1, !noalias !671
  store i256 32, ptr %sp27187, align 16
  store i256 0, ptr %3667, align 16
  %3674 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27191)
  %.not49012 = icmp eq i8 %3674, 0
  br i1 %.not49012, label %OP7875.SWAP1, label %return, !prof !6

OP7875.SWAP1:                                     ; preds = %OP7872.PUSH1
  %swap.a27215 = load i256, ptr %sp27191, align 16
  %swap.b27217 = load i256, ptr %sp27198, align 16
  store i256 %swap.a27215, ptr %sp27198, align 16
  store i256 %swap.b27217, ptr %sp27191, align 16
  br label %OP7876.JUMPDEST.preheader, !annotation !7

OP7876.JUMPDEST.preheader.loopexit:               ; preds = %dynamic_jump_table
  %.phi.trans.insert54211 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp27220.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54211, i64 -2
  %dup227221.pre.pre = load i256, ptr %sp27220.phi.trans.insert, align 16
  br label %OP7876.JUMPDEST.preheader

OP7876.JUMPDEST.preheader:                        ; preds = %OP7876.JUMPDEST.preheader.loopexit, %OP7875.SWAP1
  %dup227221.pre = phi i256 [ %swap.a27215, %OP7875.SWAP1 ], [ %dup227221.pre.pre, %OP7876.JUMPDEST.preheader.loopexit ]
  %len.addr.285.ph = phi i64 [ %len.addr.284, %OP7875.SWAP1 ], [ %len.addr.357, %OP7876.JUMPDEST.preheader.loopexit ]
  %3675 = add i64 %len.addr.285.ph, 1
  %3676 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.285.ph
  %sp27220 = getelementptr i256, ptr %3676, i64 -2
  %sp27226 = getelementptr i256, ptr %3676, i64 -1
  %sp27228 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3675
  %ecx.memory.addr.i50753 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp27265 = getelementptr i256, ptr %3676, i64 -3
  br label %OP7876.JUMPDEST

OP7876.JUMPDEST:                                  ; preds = %OP7876.JUMPDEST.preheader, %OP7881.SWAP1
  %dup227221 = phi i256 [ %dup227221.pre, %OP7876.JUMPDEST.preheader ], [ %3688, %OP7881.SWAP1 ]
  store i256 %dup227221, ptr %3676, align 16
  %3677 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %3676, i8 17)
  %.not49013 = icmp eq i8 %3677, 0
  br i1 %.not49013, label %OP7879.DUP2, label %return, !prof !6

OP7879.DUP2:                                      ; preds = %OP7876.JUMPDEST
  %dup227227 = load i256, ptr %sp27226, align 16
  store i256 %dup227227, ptr %sp27228, align 16
  %b27233 = load i256, ptr %3676, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !674)
  %ecx.memory.i50754 = load ptr, ptr %ecx.memory.addr.i50753, align 8, !alias.scope !674
  %ecx.memory.len.addr.i50755 = getelementptr inbounds i8, ptr %ecx.memory.i50754, i64 16
  %ecx.memory.len.i50756 = load i64, ptr %ecx.memory.len.addr.i50755, align 8, !noalias !674
  %ecx.memory.last_checkpoint.addr.i50757 = getelementptr inbounds i8, ptr %ecx.memory.i50754, i64 48
  %ecx.memory.last_checkpoint.i50758 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50757, align 8, !noalias !674
  %3678 = sub i64 %ecx.memory.len.i50756, %ecx.memory.last_checkpoint.i50758
  %3679 = icmp ugt i256 %dup227227, 18446744073709551615
  %3680 = trunc i256 %dup227227 to i64
  %3681 = add i64 %3680, 32
  %3682 = icmp ugt i64 %3680, -33
  %3683 = or i1 %3679, %3682
  %3684 = select i1 %3683, i64 -1, i64 %3681
  %3685 = icmp ugt i64 %3684, %3678
  br i1 %3685, label %resize.i50765, label %OP7881.SWAP1, !prof !5

resize.i50765:                                    ; preds = %OP7879.DUP2
  %3686 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3684)
  %.not.i50766 = icmp eq i8 %3686, 0
  br i1 %.not.i50766, label %OP7881.SWAP1, label %return, !prof !6

OP7881.SWAP1:                                     ; preds = %OP7879.DUP2, %resize.i50765
  %ecx.memory.buffer.ptr.shared.addr.i50760 = getelementptr inbounds i8, ptr %ecx.memory.i50754, i64 8
  %ecx.memory.buffer.ptr.shared.i50761 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50760, align 8, !noalias !674
  %ecx.memory.buffer.ptr.i50762 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50761, i64 %ecx.memory.last_checkpoint.i50758
  %slot.i50763 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50762, i64 %3680
  %3687 = tail call i256 @llvm.bswap.i256(i256 %b27233)
  store i256 %3687, ptr %slot.i50763, align 1, !noalias !674
  %swap.a27236 = load i256, ptr %sp27226, align 16
  %swap.b27238 = load i256, ptr %sp27220, align 16
  %3688 = add i256 %swap.b27238, 1
  store i256 %3688, ptr %sp27220, align 16
  %3689 = add i256 %swap.a27236, 32
  store i256 %3689, ptr %sp27226, align 16
  %dup427266 = load i256, ptr %sp27265, align 16
  store i256 %dup427266, ptr %sp27228, align 16
  %3690 = icmp ugt i256 %dup427266, %3689
  %3691 = zext i1 %3690 to i256
  store i256 %3691, ptr %3676, align 16
  br i1 %3690, label %OP7876.JUMPDEST, label %OP7892.DUP3

OP7892.DUP3:                                      ; preds = %OP7881.SWAP1
  %3692 = sub i256 %swap.a27236, %dup427266
  %3693 = and i256 %3692, 31
  store i256 %dup427266, ptr %3676, align 16
  %3694 = add i256 %dup427266, %3693
  store i256 %3694, ptr %sp27265, align 16
  store i256 %dup427266, ptr %sp27226, align 16
  br label %OP7900.JUMPDEST, !annotation !7

OP7900.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7892.DUP3, %OP7859.SWAP2, %OP7830.PUSH1
  %len.addr.286 = phi i64 [ %3616, %OP7830.PUSH1 ], [ %len.addr.285.ph, %OP7892.DUP3 ], [ %3616, %OP7859.SWAP2 ], [ %len.addr.357, %dynamic_jump_table ]
  %3695 = add i64 %len.addr.286, -4
  %3696 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.286
  %sp27322 = getelementptr i256, ptr %3696, i64 -5
  store i256 64, ptr %sp27322, align 16
  %ecx.memory.addr.i50768 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50769 = load ptr, ptr %ecx.memory.addr.i50768, align 8
  %ecx.memory.len.addr.i50770 = getelementptr inbounds i8, ptr %ecx.memory.i50769, i64 16
  %ecx.memory.len.i50771 = load i64, ptr %ecx.memory.len.addr.i50770, align 8, !noalias !677
  %ecx.memory.last_checkpoint.addr.i50772 = getelementptr inbounds i8, ptr %ecx.memory.i50769, i64 48
  %ecx.memory.last_checkpoint.i50773 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50772, align 8, !noalias !677
  %3697 = sub i64 %ecx.memory.len.i50771, %ecx.memory.last_checkpoint.i50773
  %3698 = icmp ult i64 %3697, 96
  br i1 %3698, label %resize.i50781, label %OP7907.MLOAD.contd, !prof !5

resize.i50781:                                    ; preds = %OP7900.JUMPDEST
  %3699 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !681
  %.not.i50782 = icmp eq i8 %3699, 0
  br i1 %.not.i50782, label %resize.i50781.OP7907.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50781.OP7907.MLOAD.contd_crit_edge:       ; preds = %resize.i50781
  %ecx.memory.i50785.pre = load ptr, ptr %ecx.memory.addr.i50768, align 8, !alias.scope !682
  br label %OP7907.MLOAD.contd

OP7907.MLOAD.contd:                               ; preds = %resize.i50781.OP7907.MLOAD.contd_crit_edge, %OP7900.JUMPDEST
  %ecx.memory.i50785 = phi ptr [ %ecx.memory.i50785.pre, %resize.i50781.OP7907.MLOAD.contd_crit_edge ], [ %ecx.memory.i50769, %OP7900.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i50775 = getelementptr inbounds i8, ptr %ecx.memory.i50769, i64 8
  %ecx.memory.buffer.ptr.shared.i50776 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50775, align 8, !noalias !677
  %ecx.memory.buffer.ptr.i50777 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50776, i64 %ecx.memory.last_checkpoint.i50773
  %slot.i50778 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50777, i64 64
  %slot.value.i50779 = load i256, ptr %slot.i50778, align 1, !noalias !677
  %3700 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50779)
  store i256 %3700, ptr %sp27322, align 16
  %sp27332 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3695
  %sp27334 = getelementptr i256, ptr %3696, i64 -3
  %3701 = add i256 %3700, 64
  store i256 %3701, ptr %sp27332, align 16
  store i256 64, ptr %sp27334, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !682)
  %ecx.memory.len.addr.i50786 = getelementptr inbounds i8, ptr %ecx.memory.i50785, i64 16
  %ecx.memory.len.i50787 = load i64, ptr %ecx.memory.len.addr.i50786, align 8, !noalias !682
  %ecx.memory.last_checkpoint.addr.i50788 = getelementptr inbounds i8, ptr %ecx.memory.i50785, i64 48
  %ecx.memory.last_checkpoint.i50789 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50788, align 8, !noalias !682
  %3702 = sub i64 %ecx.memory.len.i50787, %ecx.memory.last_checkpoint.i50789
  %3703 = icmp ult i64 %3702, 96
  br i1 %3703, label %resize.i50796, label %OP7913.DUP1, !prof !5

resize.i50796:                                    ; preds = %OP7907.MLOAD.contd
  %3704 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i50797 = icmp eq i8 %3704, 0
  br i1 %.not.i50797, label %OP7913.DUP1, label %return, !prof !6

OP7913.DUP1:                                      ; preds = %OP7907.MLOAD.contd, %resize.i50796
  %ecx.memory.buffer.ptr.shared.addr.i50791 = getelementptr inbounds i8, ptr %ecx.memory.i50785, i64 8
  %ecx.memory.buffer.ptr.shared.i50792 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50791, align 8, !noalias !682
  %ecx.memory.buffer.ptr.i50793 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50792, i64 %ecx.memory.last_checkpoint.i50789
  %slot.i50794 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50793, i64 64
  %3705 = tail call i256 @llvm.bswap.i256(i256 %3701)
  store i256 %3705, ptr %slot.i50794, align 1, !noalias !682
  %dup127350 = load i256, ptr %sp27322, align 16
  store i256 %dup127350, ptr %sp27332, align 16
  store i256 1, ptr %sp27334, align 16
  %sp27355 = getelementptr i256, ptr %3696, i64 -4
  %sp27357 = getelementptr i256, ptr %3696, i64 -2
  store i256 %dup127350, ptr %sp27357, align 16
  %3706 = add i64 %len.addr.286, -3
  %sp27361 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3706
  tail call void @llvm.experimental.noalias.scope.decl(metadata !685)
  %ecx.memory.i50800 = load ptr, ptr %ecx.memory.addr.i50768, align 8, !alias.scope !685
  %ecx.memory.len.addr.i50801 = getelementptr inbounds i8, ptr %ecx.memory.i50800, i64 16
  %ecx.memory.len.i50802 = load i64, ptr %ecx.memory.len.addr.i50801, align 8, !noalias !685
  %ecx.memory.last_checkpoint.addr.i50803 = getelementptr inbounds i8, ptr %ecx.memory.i50800, i64 48
  %ecx.memory.last_checkpoint.i50804 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50803, align 8, !noalias !685
  %3707 = sub i64 %ecx.memory.len.i50802, %ecx.memory.last_checkpoint.i50804
  %3708 = icmp ugt i256 %dup127350, 18446744073709551615
  %3709 = trunc i256 %dup127350 to i64
  %3710 = add i64 %3709, 32
  %3711 = icmp ugt i64 %3709, -33
  %3712 = or i1 %3708, %3711
  %3713 = select i1 %3712, i64 -1, i64 %3710
  %3714 = icmp ugt i64 %3713, %3707
  br i1 %3714, label %resize.i50811, label %OP7917.PUSH1, !prof !5

resize.i50811:                                    ; preds = %OP7913.DUP1
  %3715 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3713)
  %.not.i50812 = icmp eq i8 %3715, 0
  br i1 %.not.i50812, label %OP7917.PUSH1, label %return, !prof !6

OP7917.PUSH1:                                     ; preds = %OP7913.DUP1, %resize.i50811
  %ecx.memory.buffer.ptr.shared.addr.i50806 = getelementptr inbounds i8, ptr %ecx.memory.i50800, i64 8
  %ecx.memory.buffer.ptr.shared.i50807 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50806, align 8, !noalias !685
  %ecx.memory.buffer.ptr.i50808 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50807, i64 %ecx.memory.last_checkpoint.i50804
  %slot.i50809 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50808, i64 %3709
  store i256 452312848583266388373324160190187140051835877600158453279131187530910662656, ptr %slot.i50809, align 1, !noalias !685
  %b27369 = load i256, ptr %sp27355, align 16
  %3716 = add i256 %b27369, 32
  store i256 %3716, ptr %sp27355, align 16
  store i256 22615642429163319418666208009509357002591793880007922663956559376545533132800, ptr %sp27361, align 16
  store i256 %3716, ptr %sp27357, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !688)
  %ecx.memory.i50815 = load ptr, ptr %ecx.memory.addr.i50768, align 8, !alias.scope !688
  %ecx.memory.len.addr.i50816 = getelementptr inbounds i8, ptr %ecx.memory.i50815, i64 16
  %ecx.memory.len.i50817 = load i64, ptr %ecx.memory.len.addr.i50816, align 8, !noalias !688
  %ecx.memory.last_checkpoint.addr.i50818 = getelementptr inbounds i8, ptr %ecx.memory.i50815, i64 48
  %ecx.memory.last_checkpoint.i50819 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50818, align 8, !noalias !688
  %3717 = sub i64 %ecx.memory.len.i50817, %ecx.memory.last_checkpoint.i50819
  %3718 = icmp ugt i256 %3716, 18446744073709551615
  %3719 = trunc i256 %3716 to i64
  %3720 = add i64 %3719, 32
  %3721 = icmp ugt i64 %3719, -33
  %3722 = or i1 %3718, %3721
  %3723 = select i1 %3722, i64 -1, i64 %3720
  %3724 = icmp ugt i64 %3723, %3717
  br i1 %3724, label %resize.i50826, label %OP7922.POP, !prof !5

resize.i50826:                                    ; preds = %OP7917.PUSH1
  %3725 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3723)
  %.not.i50827 = icmp eq i8 %3725, 0
  br i1 %.not.i50827, label %OP7922.POP, label %return, !prof !6

OP7922.POP:                                       ; preds = %OP7917.PUSH1, %resize.i50826
  %ecx.memory.buffer.ptr.shared.addr.i50821 = getelementptr inbounds i8, ptr %ecx.memory.i50815, i64 8
  %ecx.memory.buffer.ptr.shared.i50822 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50821, align 8, !noalias !688
  %ecx.memory.buffer.ptr.i50823 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50822, i64 %ecx.memory.last_checkpoint.i50819
  %slot.i50824 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50823, i64 %3719
  store i256 50, ptr %slot.i50824, align 1, !noalias !688
  store i256 17254, ptr %sp27355, align 16
  br label %OP9224.JUMPDEST

OP7929.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP3984.JUMPDEST
  %len.addr.287 = phi i64 [ %1875, %OP3984.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3726 = add i64 %len.addr.287, 1
  %sp27390 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.287
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp27390, align 16
  %3727 = add i64 %len.addr.287, 2
  %sp27394 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3726
  %3728 = add i64 %len.addr.287, 3
  %sp27396 = getelementptr i256, ptr %sp27390, i64 -3
  %dup527397 = load i256, ptr %sp27396, align 16
  %sp27398 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3727
  %3729 = and i256 %dup527397, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp27394, align 16
  store i256 %3729, ptr %sp27398, align 16
  %3730 = add i64 %len.addr.287, 4
  %sp27415 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3728
  store i256 0, ptr %sp27415, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !691)
  %ecx.memory.addr.i50829 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50830 = load ptr, ptr %ecx.memory.addr.i50829, align 8, !alias.scope !691
  %ecx.memory.len.addr.i50831 = getelementptr inbounds i8, ptr %ecx.memory.i50830, i64 16
  %ecx.memory.len.i50832 = load i64, ptr %ecx.memory.len.addr.i50831, align 8, !noalias !691
  %ecx.memory.last_checkpoint.addr.i50833 = getelementptr inbounds i8, ptr %ecx.memory.i50830, i64 48
  %ecx.memory.last_checkpoint.i50834 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50833, align 8, !noalias !691
  %3731 = sub i64 %ecx.memory.len.i50832, %ecx.memory.last_checkpoint.i50834
  %3732 = icmp ult i64 %3731, 32
  br i1 %3732, label %resize.i50840, label %OP7938.PUSH1, !prof !5

resize.i50840:                                    ; preds = %OP7929.JUMPDEST
  %3733 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50841 = icmp eq i8 %3733, 0
  br i1 %.not.i50841, label %OP7938.PUSH1, label %return, !prof !6

OP7938.PUSH1:                                     ; preds = %OP7929.JUMPDEST, %resize.i50840
  %ecx.memory.buffer.ptr.shared.addr.i50836 = getelementptr inbounds i8, ptr %ecx.memory.i50830, i64 8
  %ecx.memory.buffer.ptr.shared.i50837 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50836, align 8, !noalias !691
  %ecx.memory.buffer.ptr.i50838 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50837, i64 %ecx.memory.last_checkpoint.i50834
  %3734 = tail call i256 @llvm.bswap.i256(i256 %3729)
  store i256 %3734, ptr %ecx.memory.buffer.ptr.i50838, align 1, !noalias !691
  store i256 32, ptr %sp27398, align 16
  store i256 10, ptr %sp27415, align 16
  %sp27433 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3730
  store i256 32, ptr %sp27433, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !694)
  %ecx.memory.i50844 = load ptr, ptr %ecx.memory.addr.i50829, align 8, !alias.scope !694
  %ecx.memory.len.addr.i50845 = getelementptr inbounds i8, ptr %ecx.memory.i50844, i64 16
  %ecx.memory.len.i50846 = load i64, ptr %ecx.memory.len.addr.i50845, align 8, !noalias !694
  %ecx.memory.last_checkpoint.addr.i50847 = getelementptr inbounds i8, ptr %ecx.memory.i50844, i64 48
  %ecx.memory.last_checkpoint.i50848 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50847, align 8, !noalias !694
  %3735 = sub i64 %ecx.memory.len.i50846, %ecx.memory.last_checkpoint.i50848
  %3736 = icmp ult i64 %3735, 64
  br i1 %3736, label %resize.i50855, label %OP7943.PUSH1, !prof !5

resize.i50855:                                    ; preds = %OP7938.PUSH1
  %3737 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50856 = icmp eq i8 %3737, 0
  br i1 %.not.i50856, label %OP7943.PUSH1, label %return, !prof !6

OP7943.PUSH1:                                     ; preds = %OP7938.PUSH1, %resize.i50855
  %ecx.memory.buffer.ptr.shared.addr.i50850 = getelementptr inbounds i8, ptr %ecx.memory.i50844, i64 8
  %ecx.memory.buffer.ptr.shared.i50851 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50850, align 8, !noalias !694
  %ecx.memory.buffer.ptr.i50852 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50851, i64 %ecx.memory.last_checkpoint.i50848
  %slot.i50853 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50852, i64 32
  store i256 4523128485832663883733241601901871400518358776001584532791311875309106626560, ptr %slot.i50853, align 1, !noalias !694
  %3738 = add i64 %len.addr.287, 5
  store i256 64, ptr %sp27415, align 16
  store i256 64, ptr %sp27433, align 16
  %3739 = add i64 %len.addr.287, 6
  %sp27446 = getelementptr i256, ptr %sp27390, i64 1
  %dup427447 = load i256, ptr %sp27446, align 16
  %sp27448 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3738
  store i256 %dup427447, ptr %sp27448, align 16
  %3740 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27433)
  %.not48737 = icmp eq i8 %3740, 0
  br i1 %.not48737, label %OP7947.SWAP4, label %return, !prof !6

OP7947.SWAP4:                                     ; preds = %OP7943.PUSH1
  %swap.a27453 = load i256, ptr %sp27433, align 16
  %swap.b27455 = load i256, ptr %sp27390, align 16
  store i256 %swap.a27453, ptr %sp27390, align 16
  %sp27457 = getelementptr i256, ptr %sp27390, i64 -2
  %dup727458 = load i256, ptr %sp27457, align 16
  %3741 = and i256 %dup727458, %swap.b27455
  store i256 %3741, ptr %sp27433, align 16
  %dup427468 = load i256, ptr %sp27446, align 16
  store i256 %dup427468, ptr %sp27448, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !697)
  %ecx.memory.i50859 = load ptr, ptr %ecx.memory.addr.i50829, align 8, !alias.scope !697
  %ecx.memory.len.addr.i50860 = getelementptr inbounds i8, ptr %ecx.memory.i50859, i64 16
  %ecx.memory.len.i50861 = load i64, ptr %ecx.memory.len.addr.i50860, align 8, !noalias !697
  %ecx.memory.last_checkpoint.addr.i50862 = getelementptr inbounds i8, ptr %ecx.memory.i50859, i64 48
  %ecx.memory.last_checkpoint.i50863 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50862, align 8, !noalias !697
  %3742 = sub i64 %ecx.memory.len.i50861, %ecx.memory.last_checkpoint.i50863
  %3743 = icmp ugt i256 %dup427468, 18446744073709551615
  %3744 = trunc i256 %dup427468 to i64
  %3745 = add i64 %3744, 32
  %3746 = icmp ugt i64 %3744, -33
  %3747 = or i1 %3743, %3746
  %3748 = select i1 %3747, i64 -1, i64 %3745
  %3749 = icmp ugt i64 %3748, %3742
  br i1 %3749, label %resize.i50870, label %OP7952.SWAP3, !prof !5

resize.i50870:                                    ; preds = %OP7947.SWAP4
  %3750 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3748)
  %.not.i50871 = icmp eq i8 %3750, 0
  br i1 %.not.i50871, label %OP7952.SWAP3, label %return, !prof !6

OP7952.SWAP3:                                     ; preds = %OP7947.SWAP4, %resize.i50870
  %ecx.memory.buffer.ptr.shared.addr.i50865 = getelementptr inbounds i8, ptr %ecx.memory.i50859, i64 8
  %ecx.memory.buffer.ptr.shared.i50866 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50865, align 8, !noalias !697
  %ecx.memory.buffer.ptr.i50867 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50866, i64 %ecx.memory.last_checkpoint.i50863
  %slot.i50868 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50867, i64 %3744
  %3751 = tail call i256 @llvm.bswap.i256(i256 %3741)
  store i256 %3751, ptr %slot.i50868, align 1, !noalias !697
  %swap.a27477 = load i256, ptr %sp27415, align 16
  %swap.b27479 = load i256, ptr %sp27390, align 16
  store i256 %swap.a27477, ptr %sp27390, align 16
  %swap.b27484 = load i256, ptr %sp27398, align 16
  store i256 %swap.b27479, ptr %sp27398, align 16
  store i256 %swap.b27484, ptr %sp27415, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !700)
  %ecx.memory.i50874 = load ptr, ptr %ecx.memory.addr.i50829, align 8, !alias.scope !700
  %ecx.memory.len.addr.i50875 = getelementptr inbounds i8, ptr %ecx.memory.i50874, i64 16
  %ecx.memory.len.i50876 = load i64, ptr %ecx.memory.len.addr.i50875, align 8, !noalias !700
  %ecx.memory.last_checkpoint.addr.i50877 = getelementptr inbounds i8, ptr %ecx.memory.i50874, i64 48
  %ecx.memory.last_checkpoint.i50878 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50877, align 8, !noalias !700
  %3752 = sub i64 %ecx.memory.len.i50876, %ecx.memory.last_checkpoint.i50878
  %3753 = icmp ugt i256 %swap.b27484, 18446744073709551615
  %3754 = trunc i256 %swap.b27484 to i64
  %3755 = add i64 %3754, 32
  %3756 = icmp ugt i64 %3754, -33
  %3757 = or i1 %3753, %3756
  %3758 = select i1 %3757, i64 -1, i64 %3755
  %3759 = icmp ugt i64 %3758, %3752
  br i1 %3759, label %resize.i50885, label %OP7955.KECCAK256, !prof !5

resize.i50885:                                    ; preds = %OP7952.SWAP3
  %3760 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3758)
  %.not.i50886 = icmp eq i8 %3760, 0
  br i1 %.not.i50886, label %OP7955.KECCAK256, label %return, !prof !6

OP7955.KECCAK256:                                 ; preds = %OP7952.SWAP3, %resize.i50885
  %ecx.memory.buffer.ptr.shared.addr.i50880 = getelementptr inbounds i8, ptr %ecx.memory.i50874, i64 8
  %ecx.memory.buffer.ptr.shared.i50881 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50880, align 8, !noalias !700
  %ecx.memory.buffer.ptr.i50882 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50881, i64 %ecx.memory.last_checkpoint.i50878
  %slot.i50883 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50882, i64 %3754
  %3761 = tail call i256 @llvm.bswap.i256(i256 %swap.b27479)
  store i256 %3761, ptr %slot.i50883, align 1, !noalias !700
  %3762 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27390)
  %.not48740 = icmp eq i8 %3762, 0
  br i1 %.not48740, label %OP7956.SLOAD, label %return, !prof !6

OP7956.SLOAD:                                     ; preds = %OP7955.KECCAK256
  %3763 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27390, i8 17)
  %.not48741 = icmp eq i8 %3763, 0
  br i1 %.not48741, label %OP7957.PUSH2, label %return, !prof !6

OP7957.PUSH2:                                     ; preds = %OP7956.SLOAD
  %swap.b27500 = load i256, ptr %sp27390, align 16
  store i256 13459, ptr %sp27390, align 16
  %dup527503 = load i256, ptr %sp27396, align 16
  store i256 %dup527503, ptr %sp27394, align 16
  %dup527512 = load i256, ptr %sp27457, align 16
  store i256 %dup527512, ptr %sp27398, align 16
  store i256 17328, ptr %sp27415, align 16
  store i256 %swap.b27500, ptr %sp27433, align 16
  %sp27527 = getelementptr i256, ptr %sp27390, i64 -1
  %dup627528 = load i256, ptr %sp27527, align 16
  store i256 %dup627528, ptr %sp27448, align 16
  br label %OP7971.JUMPDEST

OP7971.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7957.PUSH2, %OP4413.JUMPDEST, %OP4397.PUSH2
  %len.addr.288 = phi i64 [ %3739, %OP7957.PUSH2 ], [ %len.addr.357, %OP4413.JUMPDEST ], [ %2043, %OP4397.PUSH2 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp27535 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.288
  store i256 0, ptr %sp27535, align 16
  %3764 = add i64 %len.addr.288, 2
  %sp27537 = getelementptr i256, ptr %sp27535, i64 -2
  %dup327538 = load i256, ptr %sp27537, align 16
  %sp27539 = getelementptr i256, ptr %sp27535, i64 1
  %sp27541 = getelementptr i256, ptr %sp27535, i64 -1
  %dup327542 = load i256, ptr %sp27541, align 16
  %sp27543 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3764
  %3765 = add i256 %dup327542, %dup327538
  store i256 %3765, ptr %sp27539, align 16
  %3766 = add i64 %len.addr.288, 4
  %sp27557 = getelementptr i256, ptr %sp27535, i64 3
  store i256 %3765, ptr %sp27557, align 16
  %3767 = icmp uge i256 %3765, %dup327538
  %3768 = zext i1 %3767 to i256
  store i256 %3768, ptr %sp27543, align 16
  br i1 %3767, label %OP8013.JUMPDEST, label %OP7982.PUSH1

OP7982.PUSH1:                                     ; preds = %OP7971.JUMPDEST
  store i256 64, ptr %sp27543, align 16
  store i256 64, ptr %sp27557, align 16
  %mload.out.slot27580 = alloca i256, align 16
  %3769 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot27580, ptr %arg.ecx.addr)
  %.not48742 = icmp eq i8 %3769, 0
  br i1 %.not48742, label %OP7984.MLOAD.contd, label %return, !prof !6

OP7984.MLOAD.contd:                               ; preds = %OP7982.PUSH1
  %mload.out27581 = load i256, ptr %mload.out.slot27580, align 16
  store i256 %mload.out27581, ptr %sp27557, align 16
  %sp27584 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3766
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp27584, align 16
  %sp27588 = getelementptr i256, ptr %sp27535, i64 5
  store i256 %mload.out27581, ptr %sp27588, align 16
  %3770 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out27581, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48743 = icmp eq i8 %3770, 0
  br i1 %.not48743, label %OP7988.PUSH1, label %return, !prof !6

OP7988.PUSH1:                                     ; preds = %OP7984.MLOAD.contd
  store i256 32, ptr %sp27584, align 16
  %dup327600 = load i256, ptr %sp27557, align 16
  %sp27601 = getelementptr i256, ptr %sp27535, i64 6
  store i256 %dup327600, ptr %sp27601, align 16
  %3771 = add i256 %dup327600, 4
  store i256 %3771, ptr %sp27588, align 16
  %3772 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3771, i256 32, ptr %arg.ecx.addr)
  %.not48744 = icmp eq i8 %3772, 0
  br i1 %.not48744, label %OP7993.PUSH1, label %return, !prof !6

OP7993.PUSH1:                                     ; preds = %OP7988.PUSH1
  store i256 27, ptr %sp27584, align 16
  %dup327619 = load i256, ptr %sp27557, align 16
  store i256 %dup327619, ptr %sp27601, align 16
  %3773 = add i256 %dup327619, 36
  store i256 %3773, ptr %sp27588, align 16
  %3774 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3773, i256 27, ptr %arg.ecx.addr)
  %.not48745 = icmp eq i8 %3774, 0
  br i1 %.not48745, label %OP7998.PUSH32, label %return, !prof !6

OP7998.PUSH32:                                    ; preds = %OP7993.PUSH1
  store i256 37714057306925736537727337196910129575336924242351790113041164404516917870592, ptr %sp27584, align 16
  %dup327638 = load i256, ptr %sp27557, align 16
  store i256 %dup327638, ptr %sp27601, align 16
  %3775 = add i256 %dup327638, 68
  store i256 %3775, ptr %sp27588, align 16
  %3776 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3775, i256 37714057306925736537727337196910129575336924242351790113041164404516917870592, ptr %arg.ecx.addr)
  %.not48746 = icmp eq i8 %3776, 0
  br i1 %.not48746, label %OP8003.SWAP1, label %return, !prof !6

OP8003.SWAP1:                                     ; preds = %OP7998.PUSH32
  %swap.a27653 = load i256, ptr %sp27557, align 16
  %swap.b27655 = load i256, ptr %sp27543, align 16
  store i256 %swap.a27653, ptr %sp27543, align 16
  store i256 %swap.b27655, ptr %sp27557, align 16
  %mload.out.slot27659 = alloca i256, align 16
  %3777 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b27655, ptr %mload.out.slot27659, ptr %arg.ecx.addr)
  %.not48747 = icmp eq i8 %3777, 0
  br i1 %.not48747, label %OP8004.MLOAD.contd, label %return, !prof !6

OP8004.MLOAD.contd:                               ; preds = %OP8003.SWAP1
  %mload.out27660 = load i256, ptr %mload.out.slot27659, align 16
  %swap.b27666 = load i256, ptr %sp27543, align 16
  %3778 = sub i256 %swap.b27666, %mload.out27660
  store i256 100, ptr %sp27584, align 16
  %3779 = add i256 %3778, 100
  store i256 %3779, ptr %sp27543, align 16
  store i256 %mload.out27660, ptr %sp27557, align 16
  %3780 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27543, i8 16)
  %.not48748 = icmp eq i8 %3780, 0
  %spec.select36654 = select i1 %.not48748, i8 16, i8 %3780, !prof !6
  br label %return

OP8013.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP10193.POP, %OP7971.JUMPDEST
  %len.addr.289 = phi i64 [ %5186, %OP10193.POP ], [ %3764, %OP7971.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %3781 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.289
  %sp27699 = getelementptr i256, ptr %3781, i64 -1
  %swap.a27700 = load i256, ptr %sp27699, align 16
  %sp27701 = getelementptr i256, ptr %3781, i64 -5
  %swap.b27702 = load i256, ptr %sp27701, align 16
  store i256 %swap.a27700, ptr %sp27701, align 16
  %sp27706 = getelementptr i256, ptr %3781, i64 -4
  %swap.b27707 = load i256, ptr %sp27706, align 16
  store i256 %swap.b27702, ptr %sp27706, align 16
  store i256 %swap.b27707, ptr %sp27699, align 16
  %3782 = add i64 %len.addr.289, -4
  br label %dynamic_jump_table.preheader

OP8020.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table
  %3783 = add i64 %len.addr.357, 1
  %sp27716 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 57896044618658097711785492504343953926634992332820282019728792003956564819967, ptr %sp27716, align 16
  %3784 = add i64 %len.addr.357, 2
  %sp27718 = getelementptr i256, ptr %sp27716, i64 -1
  %dup227719 = load i256, ptr %sp27718, align 16
  %sp27720 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3783
  store i256 %dup227719, ptr %sp27720, align 16
  %3785 = icmp sgt i256 %dup227719, -1
  %3786 = zext i1 %3785 to i256
  store i256 %3786, ptr %sp27716, align 16
  br i1 %3785, label %OP8065.JUMPDEST, label %OP8027.PUSH1

OP8027.PUSH1:                                     ; preds = %OP8020.JUMPDEST
  store i256 64, ptr %sp27716, align 16
  %mload.out.slot27739 = alloca i256, align 16
  %3787 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot27739, ptr %arg.ecx.addr)
  %.not48231 = icmp eq i8 %3787, 0
  br i1 %.not48231, label %OP8028.MLOAD.contd, label %return, !prof !6

OP8028.MLOAD.contd:                               ; preds = %OP8027.PUSH1
  %mload.out27740 = load i256, ptr %mload.out.slot27739, align 16
  store i256 %mload.out27740, ptr %sp27716, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp27720, align 16
  %3788 = add i64 %len.addr.357, 3
  %sp27747 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3784
  store i256 %mload.out27740, ptr %sp27747, align 16
  %3789 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out27740, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48232 = icmp eq i8 %3789, 0
  br i1 %.not48232, label %OP8032.PUSH1, label %return, !prof !6

OP8032.PUSH1:                                     ; preds = %OP8028.MLOAD.contd
  store i256 4, ptr %sp27720, align 16
  %b27759 = load i256, ptr %sp27716, align 16
  %3790 = add i256 %b27759, 4
  store i256 %3790, ptr %sp27716, align 16
  store i256 %3790, ptr %sp27720, align 16
  store i256 %3790, ptr %sp27747, align 16
  %sp27770 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3788
  store i256 32, ptr %sp27770, align 16
  %3791 = add i256 %b27759, 36
  store i256 %3791, ptr %sp27747, align 16
  store i256 %3790, ptr %sp27770, align 16
  %sp27784 = getelementptr i256, ptr %sp27716, i64 4
  store i256 %3791, ptr %sp27784, align 16
  store i256 32, ptr %sp27770, align 16
  store i256 %3790, ptr %sp27784, align 16
  %3792 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3790, i256 32, ptr %arg.ecx.addr)
  %.not48233 = icmp eq i8 %3792, 0
  br i1 %.not48233, label %OP8043.PUSH1, label %return, !prof !6

OP8043.PUSH1:                                     ; preds = %OP8032.PUSH1
  store i256 42, ptr %sp27770, align 16
  %dup227804 = load i256, ptr %sp27747, align 16
  store i256 %dup227804, ptr %sp27784, align 16
  %3793 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup227804, i256 42, ptr %arg.ecx.addr)
  %.not48234 = icmp eq i8 %3793, 0
  br i1 %.not48234, label %OP8046.PUSH1, label %return, !prof !6

OP8046.PUSH1:                                     ; preds = %OP8043.PUSH1
  store i256 32, ptr %sp27770, align 16
  %b27817 = load i256, ptr %sp27747, align 16
  %3794 = add i256 %b27817, 32
  store i256 %3794, ptr %sp27747, align 16
  store i256 %3794, ptr %sp27770, align 16
  store i256 22608, ptr %sp27784, align 16
  %sp27826 = getelementptr i256, ptr %sp27716, i64 5
  store i256 42, ptr %sp27826, align 16
  store i256 42, ptr %sp27770, align 16
  store i256 %3794, ptr %sp27826, align 16
  %3795 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27770)
  %.not48235 = icmp eq i8 %3795, 0
  br i1 %.not48235, label %OP8053.PUSH1, label %return, !prof !6

OP8053.PUSH1:                                     ; preds = %OP8046.PUSH1
  store i256 64, ptr %sp27770, align 16
  %b27840 = load i256, ptr %sp27747, align 16
  %3796 = add i256 %b27840, 64
  store i256 %3796, ptr %sp27747, align 16
  %swap.b27846 = load i256, ptr %sp27716, align 16
  store i256 %3796, ptr %sp27716, align 16
  store i256 %swap.b27846, ptr %sp27747, align 16
  store i256 64, ptr %sp27720, align 16
  %mload.out.slot27854 = alloca i256, align 16
  %3797 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot27854, ptr %arg.ecx.addr)
  %.not48236 = icmp eq i8 %3797, 0
  br i1 %.not48236, label %OP8059.MLOAD.contd, label %return, !prof !6

OP8059.MLOAD.contd:                               ; preds = %OP8053.PUSH1
  %mload.out27855 = load i256, ptr %mload.out.slot27854, align 16
  store i256 %mload.out27855, ptr %sp27720, align 16
  store i256 %mload.out27855, ptr %sp27747, align 16
  %swap.b27865 = load i256, ptr %sp27716, align 16
  store i256 %mload.out27855, ptr %sp27716, align 16
  store i256 %swap.b27865, ptr %sp27747, align 16
  %3798 = sub i256 %swap.b27865, %mload.out27855
  store i256 %3798, ptr %sp27720, align 16
  store i256 %3798, ptr %sp27716, align 16
  store i256 %mload.out27855, ptr %sp27720, align 16
  %3799 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27716, i8 16)
  %.not48237 = icmp eq i8 %3799, 0
  %spec.select36655 = select i1 %.not48237, i8 16, i8 %3799, !prof !6
  br label %return

OP8065.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %.pre54293 = add i64 %len.addr.357, 2
  br label %OP8065.JUMPDEST

OP8065.JUMPDEST:                                  ; preds = %OP8065.JUMPDEST.loopexit, %OP8020.JUMPDEST
  %.pre-phi54294 = phi i64 [ %.pre54293, %OP8065.JUMPDEST.loopexit ], [ %3784, %OP8020.JUMPDEST ]
  %sp27881 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 17586, ptr %sp27881, align 16
  %sp27883 = getelementptr i256, ptr %sp27881, i64 -2
  %dup327884 = load i256, ptr %sp27883, align 16
  %sp27885 = getelementptr i256, ptr %sp27881, i64 1
  store i256 %dup327884, ptr %sp27885, align 16
  br label %OP7491.JUMPDEST

OP8070.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3800 = add i64 %len.addr.357, -1
  %sp27889 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3800
  %a27890 = load i256, ptr %sp27889, align 16
  %3801 = icmp eq i256 %a27890, 0
  %3802 = zext i1 %3801 to i256
  store i256 %3802, ptr %sp27889, align 16
  br i1 %3801, label %OP8112.JUMPDEST, label %OP8074.PUSH1

OP8074.PUSH1:                                     ; preds = %OP8070.JUMPDEST
  store i256 64, ptr %sp27889, align 16
  %mload.out.slot27900 = alloca i256, align 16
  %3803 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot27900, ptr %arg.ecx.addr)
  %.not47975 = icmp eq i8 %3803, 0
  br i1 %.not47975, label %OP8075.MLOAD.contd, label %return, !prof !6

OP8075.MLOAD.contd:                               ; preds = %OP8074.PUSH1
  %mload.out27901 = load i256, ptr %mload.out.slot27900, align 16
  store i256 %mload.out27901, ptr %sp27889, align 16
  %3804 = add i64 %len.addr.357, 1
  %sp27904 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp27904, align 16
  %3805 = add i64 %len.addr.357, 2
  %sp27906 = getelementptr i256, ptr %sp27904, i64 -1
  %sp27908 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3804
  store i256 %mload.out27901, ptr %sp27908, align 16
  %3806 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out27901, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not47976 = icmp eq i8 %3806, 0
  br i1 %.not47976, label %OP8079.PUSH1, label %return, !prof !6

OP8079.PUSH1:                                     ; preds = %OP8075.MLOAD.contd
  store i256 4, ptr %sp27904, align 16
  %b27920 = load i256, ptr %sp27889, align 16
  %3807 = add i256 %b27920, 4
  store i256 %3807, ptr %sp27889, align 16
  store i256 %3807, ptr %sp27904, align 16
  store i256 %3807, ptr %sp27908, align 16
  %sp27931 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3805
  store i256 32, ptr %sp27931, align 16
  %3808 = add i256 %b27920, 36
  store i256 %3808, ptr %sp27908, align 16
  store i256 %3807, ptr %sp27931, align 16
  %sp27945 = getelementptr i256, ptr %sp27904, i64 3
  store i256 %3808, ptr %sp27945, align 16
  store i256 32, ptr %sp27931, align 16
  store i256 %3807, ptr %sp27945, align 16
  %3809 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3807, i256 32, ptr %arg.ecx.addr)
  %.not47977 = icmp eq i8 %3809, 0
  br i1 %.not47977, label %OP8090.PUSH1, label %return, !prof !6

OP8090.PUSH1:                                     ; preds = %OP8079.PUSH1
  store i256 37, ptr %sp27931, align 16
  %dup227965 = load i256, ptr %sp27908, align 16
  store i256 %dup227965, ptr %sp27945, align 16
  %3810 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup227965, i256 37, ptr %arg.ecx.addr)
  %.not47978 = icmp eq i8 %3810, 0
  br i1 %.not47978, label %OP8093.PUSH1, label %return, !prof !6

OP8093.PUSH1:                                     ; preds = %OP8090.PUSH1
  store i256 32, ptr %sp27931, align 16
  %b27978 = load i256, ptr %sp27908, align 16
  %3811 = add i256 %b27978, 32
  store i256 %3811, ptr %sp27908, align 16
  store i256 %3811, ptr %sp27931, align 16
  store i256 22407, ptr %sp27945, align 16
  %sp27987 = getelementptr i256, ptr %sp27904, i64 4
  store i256 37, ptr %sp27987, align 16
  store i256 37, ptr %sp27931, align 16
  store i256 %3811, ptr %sp27987, align 16
  %3812 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27931)
  %.not47979 = icmp eq i8 %3812, 0
  br i1 %.not47979, label %OP8100.PUSH1, label %return, !prof !6

OP8100.PUSH1:                                     ; preds = %OP8093.PUSH1
  store i256 64, ptr %sp27931, align 16
  %b28001 = load i256, ptr %sp27908, align 16
  %3813 = add i256 %b28001, 64
  store i256 %3813, ptr %sp27908, align 16
  %swap.b28007 = load i256, ptr %sp27906, align 16
  store i256 %3813, ptr %sp27906, align 16
  store i256 %swap.b28007, ptr %sp27908, align 16
  store i256 64, ptr %sp27904, align 16
  %mload.out.slot28015 = alloca i256, align 16
  %3814 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot28015, ptr %arg.ecx.addr)
  %.not47980 = icmp eq i8 %3814, 0
  br i1 %.not47980, label %OP8106.MLOAD.contd, label %return, !prof !6

OP8106.MLOAD.contd:                               ; preds = %OP8100.PUSH1
  %mload.out28016 = load i256, ptr %mload.out.slot28015, align 16
  store i256 %mload.out28016, ptr %sp27904, align 16
  store i256 %mload.out28016, ptr %sp27908, align 16
  %swap.b28026 = load i256, ptr %sp27906, align 16
  store i256 %mload.out28016, ptr %sp27906, align 16
  store i256 %swap.b28026, ptr %sp27908, align 16
  %3815 = sub i256 %swap.b28026, %mload.out28016
  store i256 %3815, ptr %sp27904, align 16
  store i256 %3815, ptr %sp27906, align 16
  store i256 %mload.out28016, ptr %sp27904, align 16
  %3816 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp27906, i8 16)
  %.not47981 = icmp eq i8 %3816, 0
  %spec.select36656 = select i1 %.not47981, i8 16, i8 %3816, !prof !6
  br label %return

OP8112.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8070.JUMPDEST
  %len.addr.291 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %3800, %OP8070.JUMPDEST ]
  %sp28042 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.291
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp28042, align 16
  %sp28046 = getelementptr i256, ptr %sp28042, i64 -1
  %swap.b28047 = load i256, ptr %sp28046, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp28046, align 16
  store i256 %swap.b28047, ptr %sp28042, align 16
  %sp28051 = getelementptr i256, ptr %sp28042, i64 -2
  %swap.b28052 = load i256, ptr %sp28051, align 16
  store i256 %swap.b28047, ptr %sp28051, align 16
  store i256 %swap.b28052, ptr %sp28042, align 16
  %3817 = and i256 %swap.b28052, 1461501637330902918203684832716283019655932542975
  store i256 %3817, ptr %sp28046, align 16
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp28046, i8 0, i64 64, i1 false)
  store i256 %3817, ptr %sp28042, align 16
  %sp28069 = getelementptr i256, ptr %sp28042, i64 1
  store i256 0, ptr %sp28069, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !703)
  %ecx.memory.i50889 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !703
  %ecx.memory.len.addr.i50890 = getelementptr inbounds i8, ptr %ecx.memory.i50889, i64 16
  %ecx.memory.len.i50891 = load i64, ptr %ecx.memory.len.addr.i50890, align 8, !noalias !703
  %ecx.memory.last_checkpoint.addr.i50892 = getelementptr inbounds i8, ptr %ecx.memory.i50889, i64 48
  %ecx.memory.last_checkpoint.i50893 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50892, align 8, !noalias !703
  %3818 = sub i64 %ecx.memory.len.i50891, %ecx.memory.last_checkpoint.i50893
  %3819 = icmp ult i64 %3818, 32
  br i1 %3819, label %resize.i50899, label %OP8121.PUSH1, !prof !5

resize.i50899:                                    ; preds = %OP8112.JUMPDEST
  %3820 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i50900 = icmp eq i8 %3820, 0
  br i1 %.not.i50900, label %OP8121.PUSH1, label %return, !prof !6

OP8121.PUSH1:                                     ; preds = %OP8112.JUMPDEST, %resize.i50899
  %ecx.memory.buffer.ptr.shared.addr.i50895 = getelementptr inbounds i8, ptr %ecx.memory.i50889, i64 8
  %ecx.memory.buffer.ptr.shared.i50896 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50895, align 8, !noalias !703
  %ecx.memory.buffer.ptr.i50897 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50896, i64 %ecx.memory.last_checkpoint.i50893
  %3821 = tail call i256 @llvm.bswap.i256(i256 %3817)
  store i256 %3821, ptr %ecx.memory.buffer.ptr.i50897, align 1, !noalias !703
  store i256 9, ptr %sp28042, align 16
  store i256 32, ptr %sp28069, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !706)
  %ecx.memory.i50903 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !706
  %ecx.memory.len.addr.i50904 = getelementptr inbounds i8, ptr %ecx.memory.i50903, i64 16
  %ecx.memory.len.i50905 = load i64, ptr %ecx.memory.len.addr.i50904, align 8, !noalias !706
  %ecx.memory.last_checkpoint.addr.i50906 = getelementptr inbounds i8, ptr %ecx.memory.i50903, i64 48
  %ecx.memory.last_checkpoint.i50907 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50906, align 8, !noalias !706
  %3822 = sub i64 %ecx.memory.len.i50905, %ecx.memory.last_checkpoint.i50907
  %3823 = icmp ult i64 %3822, 64
  br i1 %3823, label %resize.i50914, label %OP8124.PUSH1, !prof !5

resize.i50914:                                    ; preds = %OP8121.PUSH1
  %3824 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i50915 = icmp eq i8 %3824, 0
  br i1 %.not.i50915, label %OP8124.PUSH1, label %return, !prof !6

OP8124.PUSH1:                                     ; preds = %OP8121.PUSH1, %resize.i50914
  %ecx.memory.buffer.ptr.shared.addr.i50909 = getelementptr inbounds i8, ptr %ecx.memory.i50903, i64 8
  %ecx.memory.buffer.ptr.shared.i50910 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50909, align 8, !noalias !706
  %ecx.memory.buffer.ptr.i50911 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50910, i64 %ecx.memory.last_checkpoint.i50907
  %slot.i50912 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50911, i64 32
  store i256 4070815637249397495359917441711684260466522898401426079512180687778195963904, ptr %slot.i50912, align 1, !noalias !706
  store i256 64, ptr %sp28042, align 16
  %swap.b28090 = load i256, ptr %sp28046, align 16
  store i256 64, ptr %sp28046, align 16
  store i256 %swap.b28090, ptr %sp28042, align 16
  %3825 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp28046)
  %.not47984 = icmp eq i8 %3825, 0
  br i1 %.not47984, label %OP8127.SSTORE, label %return, !prof !6

OP8127.SSTORE:                                    ; preds = %OP8124.PUSH1
  %3826 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp28051, i8 17)
  %.not47985 = icmp eq i8 %3826, 0
  br i1 %.not47985, label %OP8128.JUMP, label %return.loopexit52642.split.loop.exit53267, !prof !6

OP8128.JUMP:                                      ; preds = %OP8127.SSTORE
  %3827 = add i64 %len.addr.291, -3
  %sp28096 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3827
  %a28097 = load i256, ptr %sp28096, align 16
  br label %dynamic_jump_table.backedge

OP8129.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5354.JUMPDEST
  %len.addr.292 = phi i64 [ %2496, %OP5354.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp28100 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.292
  store i256 10935, ptr %sp28100, align 16
  %sp28102 = getelementptr i256, ptr %sp28100, i64 -5
  %dup628103 = load i256, ptr %sp28102, align 16
  %sp28104 = getelementptr i256, ptr %sp28100, i64 1
  store i256 %dup628103, ptr %sp28104, align 16
  %sp28106 = getelementptr i256, ptr %sp28100, i64 -4
  %dup628107 = load i256, ptr %sp28106, align 16
  %sp28108 = getelementptr i256, ptr %sp28100, i64 2
  store i256 %dup628107, ptr %sp28108, align 16
  %3828 = add i64 %len.addr.292, 4
  %sp28110 = getelementptr i256, ptr %sp28100, i64 -2
  %dup528111 = load i256, ptr %sp28110, align 16
  %sp28112 = getelementptr i256, ptr %sp28100, i64 3
  store i256 %dup528111, ptr %sp28112, align 16
  %3829 = add i64 %len.addr.292, 5
  %sp28114 = getelementptr i256, ptr %sp28100, i64 -1
  %dup528115 = load i256, ptr %sp28114, align 16
  %sp28116 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3828
  store i256 %dup528115, ptr %sp28116, align 16
  %sp28118 = getelementptr i256, ptr %sp28100, i64 -3
  %dup828119 = load i256, ptr %sp28118, align 16
  %sp28120 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3829
  store i256 %dup828119, ptr %sp28120, align 16
  %3830 = add i64 %len.addr.292, 7
  %sp28122 = getelementptr i256, ptr %sp28100, i64 6
  store i256 64, ptr %sp28122, align 16
  %ecx.memory.addr.i50917 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i50918 = load ptr, ptr %ecx.memory.addr.i50917, align 8
  %ecx.memory.len.addr.i50919 = getelementptr inbounds i8, ptr %ecx.memory.i50918, i64 16
  %ecx.memory.len.i50920 = load i64, ptr %ecx.memory.len.addr.i50919, align 8, !noalias !709
  %ecx.memory.last_checkpoint.addr.i50921 = getelementptr inbounds i8, ptr %ecx.memory.i50918, i64 48
  %ecx.memory.last_checkpoint.i50922 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50921, align 8, !noalias !709
  %3831 = sub i64 %ecx.memory.len.i50920, %ecx.memory.last_checkpoint.i50922
  %3832 = icmp ult i64 %3831, 96
  br i1 %3832, label %resize.i50930, label %OP8137.MLOAD.contd, !prof !5

resize.i50930:                                    ; preds = %OP8129.JUMPDEST
  %3833 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !713
  %.not.i50931 = icmp eq i8 %3833, 0
  br i1 %.not.i50931, label %resize.i50930.OP8137.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50930.OP8137.MLOAD.contd_crit_edge:       ; preds = %resize.i50930
  %dup528143.pre = load i256, ptr %sp28112, align 16
  %ecx.memory.i50934.pre = load ptr, ptr %ecx.memory.addr.i50917, align 8, !alias.scope !714
  br label %OP8137.MLOAD.contd

OP8137.MLOAD.contd:                               ; preds = %resize.i50930.OP8137.MLOAD.contd_crit_edge, %OP8129.JUMPDEST
  %ecx.memory.i50934 = phi ptr [ %ecx.memory.i50934.pre, %resize.i50930.OP8137.MLOAD.contd_crit_edge ], [ %ecx.memory.i50918, %OP8129.JUMPDEST ]
  %dup528143 = phi i256 [ %dup528143.pre, %resize.i50930.OP8137.MLOAD.contd_crit_edge ], [ %dup528111, %OP8129.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i50924 = getelementptr inbounds i8, ptr %ecx.memory.i50918, i64 8
  %ecx.memory.buffer.ptr.shared.i50925 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50924, align 8, !noalias !709
  %ecx.memory.buffer.ptr.i50926 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50925, i64 %ecx.memory.last_checkpoint.i50922
  %slot.i50927 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50926, i64 64
  %slot.value.i50928 = load i256, ptr %slot.i50927, align 1, !noalias !709
  %3834 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50928)
  %3835 = add i64 %len.addr.292, 8
  %sp28130 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3830
  %3836 = add i256 %3834, 32
  store i256 %3836, ptr %sp28122, align 16
  store i256 %3836, ptr %sp28130, align 16
  %sp28144 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3835
  store i256 %dup528143, ptr %sp28144, align 16
  %sp28148 = getelementptr i256, ptr %sp28100, i64 9
  store i256 %3836, ptr %sp28148, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !714)
  %ecx.memory.len.addr.i50935 = getelementptr inbounds i8, ptr %ecx.memory.i50934, i64 16
  %ecx.memory.len.i50936 = load i64, ptr %ecx.memory.len.addr.i50935, align 8, !noalias !714
  %ecx.memory.last_checkpoint.addr.i50937 = getelementptr inbounds i8, ptr %ecx.memory.i50934, i64 48
  %ecx.memory.last_checkpoint.i50938 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50937, align 8, !noalias !714
  %3837 = sub i64 %ecx.memory.len.i50936, %ecx.memory.last_checkpoint.i50938
  %3838 = icmp ugt i256 %3836, 18446744073709551615
  %3839 = trunc i256 %3836 to i64
  %3840 = add i64 %3839, 32
  %3841 = icmp ugt i64 %3839, -33
  %3842 = or i1 %3838, %3841
  %3843 = select i1 %3842, i64 -1, i64 %3840
  %3844 = icmp ugt i64 %3843, %3837
  br i1 %3844, label %resize.i50945, label %OP8144.PUSH1, !prof !5

resize.i50945:                                    ; preds = %OP8137.MLOAD.contd
  %3845 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3843)
  %.not.i50946 = icmp eq i8 %3845, 0
  br i1 %.not.i50946, label %OP8144.PUSH1, label %return, !prof !6

OP8144.PUSH1:                                     ; preds = %OP8137.MLOAD.contd, %resize.i50945
  %ecx.memory.buffer.ptr.shared.addr.i50940 = getelementptr inbounds i8, ptr %ecx.memory.i50934, i64 8
  %ecx.memory.buffer.ptr.shared.i50941 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50940, align 8, !noalias !714
  %ecx.memory.buffer.ptr.i50942 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50941, i64 %ecx.memory.last_checkpoint.i50938
  %slot.i50943 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50942, i64 %3839
  %3846 = tail call i256 @llvm.bswap.i256(i256 %dup528143)
  store i256 %3846, ptr %slot.i50943, align 1, !noalias !714
  %b28160 = load i256, ptr %sp28130, align 16
  %3847 = add i256 %b28160, 32
  store i256 %3847, ptr %sp28130, align 16
  %sp28163 = getelementptr i256, ptr %sp28100, i64 4
  %dup428164 = load i256, ptr %sp28163, align 16
  store i256 %dup428164, ptr %sp28144, align 16
  store i256 %3847, ptr %sp28148, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !717)
  %ecx.memory.i50949 = load ptr, ptr %ecx.memory.addr.i50917, align 8, !alias.scope !717
  %ecx.memory.len.addr.i50950 = getelementptr inbounds i8, ptr %ecx.memory.i50949, i64 16
  %ecx.memory.len.i50951 = load i64, ptr %ecx.memory.len.addr.i50950, align 8, !noalias !717
  %ecx.memory.last_checkpoint.addr.i50952 = getelementptr inbounds i8, ptr %ecx.memory.i50949, i64 48
  %ecx.memory.last_checkpoint.i50953 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50952, align 8, !noalias !717
  %3848 = sub i64 %ecx.memory.len.i50951, %ecx.memory.last_checkpoint.i50953
  %3849 = icmp ugt i256 %3847, 18446744073709551615
  %3850 = trunc i256 %3847 to i64
  %3851 = add i64 %3850, 32
  %3852 = icmp ugt i64 %3850, -33
  %3853 = or i1 %3849, %3852
  %3854 = select i1 %3853, i64 -1, i64 %3851
  %3855 = icmp ugt i64 %3854, %3848
  br i1 %3855, label %resize.i50960, label %OP8149.PUSH1, !prof !5

resize.i50960:                                    ; preds = %OP8144.PUSH1
  %3856 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3854)
  %.not.i50961 = icmp eq i8 %3856, 0
  br i1 %.not.i50961, label %OP8149.PUSH1, label %return, !prof !6

OP8149.PUSH1:                                     ; preds = %OP8144.PUSH1, %resize.i50960
  %ecx.memory.buffer.ptr.shared.addr.i50955 = getelementptr inbounds i8, ptr %ecx.memory.i50949, i64 8
  %ecx.memory.buffer.ptr.shared.i50956 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50955, align 8, !noalias !717
  %ecx.memory.buffer.ptr.i50957 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50956, i64 %ecx.memory.last_checkpoint.i50953
  %slot.i50958 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50957, i64 %3850
  %3857 = tail call i256 @llvm.bswap.i256(i256 %dup428164)
  store i256 %3857, ptr %slot.i50958, align 1, !noalias !717
  %b28181 = load i256, ptr %sp28130, align 16
  %3858 = add i256 %b28181, 32
  store i256 %3858, ptr %sp28130, align 16
  %dup328185 = load i256, ptr %sp28120, align 16
  %3859 = and i256 %dup328185, 255
  %3860 = shl i256 %dup328185, 248
  store i256 %3860, ptr %sp28144, align 16
  store i256 %3858, ptr %sp28148, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !720)
  %ecx.memory.i50964 = load ptr, ptr %ecx.memory.addr.i50917, align 8, !alias.scope !720
  %ecx.memory.len.addr.i50965 = getelementptr inbounds i8, ptr %ecx.memory.i50964, i64 16
  %ecx.memory.len.i50966 = load i64, ptr %ecx.memory.len.addr.i50965, align 8, !noalias !720
  %ecx.memory.last_checkpoint.addr.i50967 = getelementptr inbounds i8, ptr %ecx.memory.i50964, i64 48
  %ecx.memory.last_checkpoint.i50968 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50967, align 8, !noalias !720
  %3861 = sub i64 %ecx.memory.len.i50966, %ecx.memory.last_checkpoint.i50968
  %3862 = icmp ugt i256 %3858, 18446744073709551615
  %3863 = trunc i256 %3858 to i64
  %3864 = add i64 %3863, 32
  %3865 = icmp ugt i64 %3863, -33
  %3866 = or i1 %3862, %3865
  %3867 = select i1 %3866, i64 -1, i64 %3864
  %3868 = icmp ugt i64 %3867, %3861
  br i1 %3868, label %resize.i50975, label %OP8158.PUSH1, !prof !5

resize.i50975:                                    ; preds = %OP8149.PUSH1
  %3869 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3867)
  %.not.i50976 = icmp eq i8 %3869, 0
  br i1 %.not.i50976, label %OP8158.PUSH1, label %return, !prof !6

OP8158.PUSH1:                                     ; preds = %OP8149.PUSH1, %resize.i50975
  %ecx.memory.buffer.ptr.shared.addr.i50970 = getelementptr inbounds i8, ptr %ecx.memory.i50964, i64 8
  %ecx.memory.buffer.ptr.shared.i50971 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50970, align 8, !noalias !720
  %ecx.memory.buffer.ptr.i50972 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50971, i64 %ecx.memory.last_checkpoint.i50968
  %slot.i50973 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50972, i64 %3863
  store i256 %3859, ptr %slot.i50973, align 1, !noalias !720
  store i256 1, ptr %sp28144, align 16
  %b28218 = load i256, ptr %sp28130, align 16
  %3870 = add i256 %b28218, 1
  %swap.b28224 = load i256, ptr %sp28112, align 16
  store i256 %3870, ptr %sp28112, align 16
  store i256 %swap.b28224, ptr %sp28130, align 16
  store i256 64, ptr %sp28116, align 16
  %ecx.memory.i50979 = load ptr, ptr %ecx.memory.addr.i50917, align 8
  %ecx.memory.len.addr.i50980 = getelementptr inbounds i8, ptr %ecx.memory.i50979, i64 16
  %ecx.memory.len.i50981 = load i64, ptr %ecx.memory.len.addr.i50980, align 8, !noalias !723
  %ecx.memory.last_checkpoint.addr.i50982 = getelementptr inbounds i8, ptr %ecx.memory.i50979, i64 48
  %ecx.memory.last_checkpoint.i50983 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50982, align 8, !noalias !723
  %3871 = sub i64 %ecx.memory.len.i50981, %ecx.memory.last_checkpoint.i50983
  %3872 = icmp ult i64 %3871, 96
  br i1 %3872, label %resize.i50991, label %OP8166.MLOAD.contd, !prof !5

resize.i50991:                                    ; preds = %OP8158.PUSH1
  %3873 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !727
  %.not.i50992 = icmp eq i8 %3873, 0
  br i1 %.not.i50992, label %resize.i50991.OP8166.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i50991.OP8166.MLOAD.contd_crit_edge:       ; preds = %resize.i50991
  %dup428245.pre = load i256, ptr %sp28112, align 16
  %ecx.memory.i50995.pre = load ptr, ptr %ecx.memory.addr.i50917, align 8, !alias.scope !728
  br label %OP8166.MLOAD.contd

OP8166.MLOAD.contd:                               ; preds = %resize.i50991.OP8166.MLOAD.contd_crit_edge, %OP8158.PUSH1
  %ecx.memory.i50995 = phi ptr [ %ecx.memory.i50995.pre, %resize.i50991.OP8166.MLOAD.contd_crit_edge ], [ %ecx.memory.i50979, %OP8158.PUSH1 ]
  %dup428245 = phi i256 [ %dup428245.pre, %resize.i50991.OP8166.MLOAD.contd_crit_edge ], [ %3870, %OP8158.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i50985 = getelementptr inbounds i8, ptr %ecx.memory.i50979, i64 8
  %ecx.memory.buffer.ptr.shared.i50986 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i50985, align 8, !noalias !723
  %ecx.memory.buffer.ptr.i50987 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i50986, i64 %ecx.memory.last_checkpoint.i50983
  %slot.i50988 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i50987, i64 64
  %slot.value.i50989 = load i256, ptr %slot.i50988, align 1, !noalias !723
  %3874 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i50989)
  store i256 %3874, ptr %sp28116, align 16
  store i256 %dup428245, ptr %sp28130, align 16
  %3875 = sub i256 %dup428245, %3874
  %3876 = add i256 %3875, -32
  store i256 %3876, ptr %sp28120, align 16
  store i256 %3874, ptr %sp28122, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !728)
  %ecx.memory.len.addr.i50996 = getelementptr inbounds i8, ptr %ecx.memory.i50995, i64 16
  %ecx.memory.len.i50997 = load i64, ptr %ecx.memory.len.addr.i50996, align 8, !noalias !728
  %ecx.memory.last_checkpoint.addr.i50998 = getelementptr inbounds i8, ptr %ecx.memory.i50995, i64 48
  %ecx.memory.last_checkpoint.i50999 = load i64, ptr %ecx.memory.last_checkpoint.addr.i50998, align 8, !noalias !728
  %3877 = sub i64 %ecx.memory.len.i50997, %ecx.memory.last_checkpoint.i50999
  %3878 = icmp ugt i256 %3874, 18446744073709551615
  %3879 = trunc i256 %3874 to i64
  %3880 = add i64 %3879, 32
  %3881 = icmp ugt i64 %3879, -33
  %3882 = or i1 %3878, %3881
  %3883 = select i1 %3882, i64 -1, i64 %3880
  %3884 = icmp ugt i64 %3883, %3877
  br i1 %3884, label %resize.i51006, label %OP8174.SWAP1, !prof !5

resize.i51006:                                    ; preds = %OP8166.MLOAD.contd
  %3885 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %3883)
  %.not.i51007 = icmp eq i8 %3885, 0
  br i1 %.not.i51007, label %OP8174.SWAP1, label %return, !prof !6

OP8174.SWAP1:                                     ; preds = %OP8166.MLOAD.contd, %resize.i51006
  %ecx.memory.buffer.ptr.shared.addr.i51001 = getelementptr inbounds i8, ptr %ecx.memory.i50995, i64 8
  %ecx.memory.buffer.ptr.shared.i51002 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51001, align 8, !noalias !728
  %ecx.memory.buffer.ptr.i51003 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51002, i64 %ecx.memory.last_checkpoint.i50999
  %slot.i51004 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51003, i64 %3879
  %3886 = tail call i256 @llvm.bswap.i256(i256 %3876)
  store i256 %3886, ptr %slot.i51004, align 1, !noalias !728
  %swap.a28270 = load i256, ptr %sp28116, align 16
  %swap.b28272 = load i256, ptr %sp28112, align 16
  store i256 %swap.a28270, ptr %sp28112, align 16
  store i256 %swap.b28272, ptr %sp28116, align 16
  store i256 64, ptr %sp28120, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !731)
  %ecx.memory.i51010 = load ptr, ptr %ecx.memory.addr.i50917, align 8, !alias.scope !731
  %ecx.memory.len.addr.i51011 = getelementptr inbounds i8, ptr %ecx.memory.i51010, i64 16
  %ecx.memory.len.i51012 = load i64, ptr %ecx.memory.len.addr.i51011, align 8, !noalias !731
  %ecx.memory.last_checkpoint.addr.i51013 = getelementptr inbounds i8, ptr %ecx.memory.i51010, i64 48
  %ecx.memory.last_checkpoint.i51014 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51013, align 8, !noalias !731
  %3887 = sub i64 %ecx.memory.len.i51012, %ecx.memory.last_checkpoint.i51014
  %3888 = icmp ult i64 %3887, 96
  br i1 %3888, label %resize.i51021, label %__revmc_ir_builtin_mstore.exit51023.thread, !prof !5

resize.i51021:                                    ; preds = %OP8174.SWAP1
  %3889 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i51022 = icmp eq i8 %3889, 0
  br i1 %.not.i51022, label %__revmc_ir_builtin_mstore.exit51023.thread, label %return, !prof !6

__revmc_ir_builtin_mstore.exit51023.thread:       ; preds = %OP8174.SWAP1, %resize.i51021
  %ecx.memory.buffer.ptr.shared.addr.i51016 = getelementptr inbounds i8, ptr %ecx.memory.i51010, i64 8
  %ecx.memory.buffer.ptr.shared.i51017 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51016, align 8, !noalias !731
  %ecx.memory.buffer.ptr.i51018 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51017, i64 %ecx.memory.last_checkpoint.i51014
  %slot.i51019 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51018, i64 64
  %3890 = tail call i256 @llvm.bswap.i256(i256 %swap.b28272)
  store i256 %3890, ptr %slot.i51019, align 1, !noalias !731
  br label %OP8802.JUMPDEST

OP8179.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9170.SWAP1, %OP5615.JUMPDEST
  %len.addr.293 = phi i64 [ %2605, %OP5615.JUMPDEST ], [ %4407, %OP9170.SWAP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %3891 = add i64 %len.addr.293, 1
  %sp28283 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.293
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp28283, align 16
  %3892 = add i64 %len.addr.293, 2
  %sp28285 = getelementptr i256, ptr %sp28283, i64 -6
  %dup728286 = load i256, ptr %sp28285, align 16
  %sp28287 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3891
  store i256 %dup728286, ptr %sp28287, align 16
  %3893 = and i256 %dup728286, 1461501637330902918203684832716283019655932542975
  store i256 %3893, ptr %sp28283, align 16
  %contract.caller28296 = load i160, ptr %contract.caller.addr16198, align 16
  %3894 = tail call i160 @llvm.bswap.i160(i160 %contract.caller28296)
  %3895 = zext i160 %3894 to i256
  store i256 %3895, ptr %sp28287, align 16
  %3896 = icmp eq i256 %3893, %3895
  %3897 = zext i1 %3896 to i256
  store i256 %3897, ptr %sp28283, align 16
  br i1 %3896, label %OP8225.JUMPDEST, label %OP8187.PUSH1

OP8187.PUSH1:                                     ; preds = %OP8179.JUMPDEST
  store i256 64, ptr %sp28283, align 16
  %mload.out.slot28312 = alloca i256, align 16
  %3898 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot28312, ptr %arg.ecx.addr)
  %.not48127 = icmp eq i8 %3898, 0
  br i1 %.not48127, label %OP8188.MLOAD.contd, label %return, !prof !6

OP8188.MLOAD.contd:                               ; preds = %OP8187.PUSH1
  %mload.out28313 = load i256, ptr %mload.out.slot28312, align 16
  store i256 %mload.out28313, ptr %sp28283, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp28287, align 16
  %3899 = add i64 %len.addr.293, 3
  %sp28320 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3892
  store i256 %mload.out28313, ptr %sp28320, align 16
  %3900 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out28313, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48128 = icmp eq i8 %3900, 0
  br i1 %.not48128, label %OP8192.PUSH1, label %return, !prof !6

OP8192.PUSH1:                                     ; preds = %OP8188.MLOAD.contd
  store i256 4, ptr %sp28287, align 16
  %b28332 = load i256, ptr %sp28283, align 16
  %3901 = add i256 %b28332, 4
  store i256 %3901, ptr %sp28283, align 16
  store i256 %3901, ptr %sp28287, align 16
  store i256 %3901, ptr %sp28320, align 16
  %sp28343 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3899
  store i256 32, ptr %sp28343, align 16
  %3902 = add i256 %b28332, 36
  store i256 %3902, ptr %sp28320, align 16
  store i256 %3901, ptr %sp28343, align 16
  %sp28357 = getelementptr i256, ptr %sp28283, i64 4
  store i256 %3902, ptr %sp28357, align 16
  store i256 32, ptr %sp28343, align 16
  store i256 %3901, ptr %sp28357, align 16
  %3903 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3901, i256 32, ptr %arg.ecx.addr)
  %.not48129 = icmp eq i8 %3903, 0
  br i1 %.not48129, label %OP8203.PUSH1, label %return, !prof !6

OP8203.PUSH1:                                     ; preds = %OP8192.PUSH1
  store i256 37, ptr %sp28343, align 16
  %dup228377 = load i256, ptr %sp28320, align 16
  store i256 %dup228377, ptr %sp28357, align 16
  %3904 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup228377, i256 37, ptr %arg.ecx.addr)
  %.not48130 = icmp eq i8 %3904, 0
  br i1 %.not48130, label %OP8206.PUSH1, label %return, !prof !6

OP8206.PUSH1:                                     ; preds = %OP8203.PUSH1
  store i256 32, ptr %sp28343, align 16
  %b28390 = load i256, ptr %sp28320, align 16
  %3905 = add i256 %b28390, 32
  store i256 %3905, ptr %sp28320, align 16
  store i256 %3905, ptr %sp28343, align 16
  store i256 22890, ptr %sp28357, align 16
  %sp28399 = getelementptr i256, ptr %sp28283, i64 5
  store i256 37, ptr %sp28399, align 16
  store i256 37, ptr %sp28343, align 16
  store i256 %3905, ptr %sp28399, align 16
  %3906 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp28343)
  %.not48131 = icmp eq i8 %3906, 0
  br i1 %.not48131, label %OP8213.PUSH1, label %return, !prof !6

OP8213.PUSH1:                                     ; preds = %OP8206.PUSH1
  store i256 64, ptr %sp28343, align 16
  %b28413 = load i256, ptr %sp28320, align 16
  %3907 = add i256 %b28413, 64
  store i256 %3907, ptr %sp28320, align 16
  %swap.b28419 = load i256, ptr %sp28283, align 16
  store i256 %3907, ptr %sp28283, align 16
  store i256 %swap.b28419, ptr %sp28320, align 16
  store i256 64, ptr %sp28287, align 16
  %mload.out.slot28427 = alloca i256, align 16
  %3908 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot28427, ptr %arg.ecx.addr)
  %.not48132 = icmp eq i8 %3908, 0
  br i1 %.not48132, label %OP8219.MLOAD.contd, label %return, !prof !6

OP8219.MLOAD.contd:                               ; preds = %OP8213.PUSH1
  %mload.out28428 = load i256, ptr %mload.out.slot28427, align 16
  store i256 %mload.out28428, ptr %sp28287, align 16
  store i256 %mload.out28428, ptr %sp28320, align 16
  %swap.b28438 = load i256, ptr %sp28283, align 16
  store i256 %mload.out28428, ptr %sp28283, align 16
  store i256 %swap.b28438, ptr %sp28320, align 16
  %3909 = sub i256 %swap.b28438, %mload.out28428
  store i256 %3909, ptr %sp28287, align 16
  store i256 %3909, ptr %sp28283, align 16
  store i256 %mload.out28428, ptr %sp28287, align 16
  %3910 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp28283, i8 16)
  %.not48133 = icmp eq i8 %3910, 0
  %spec.select36657 = select i1 %.not48133, i8 16, i8 %3910, !prof !6
  br label %return

OP8225.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8179.JUMPDEST
  %len.addr.294 = phi i64 [ %len.addr.293, %OP8179.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp28454 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.294
  store i256 17899, ptr %sp28454, align 16
  br label %OP9306.JUMPDEST.sink.split

OP8233.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3911 = add i64 %len.addr.357, 1
  %sp28474 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp28474, align 16
  %3912 = add i64 %len.addr.357, 2
  %sp28478 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3911
  store i256 64, ptr %sp28478, align 16
  %mload.out.slot28482 = alloca i256, align 16
  %3913 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot28482, ptr %arg.ecx.addr)
  %.not47962 = icmp eq i8 %3913, 0
  br i1 %.not47962, label %OP8236.MLOAD.contd, label %return, !prof !6

OP8236.MLOAD.contd:                               ; preds = %OP8233.JUMPDEST
  %mload.out28483 = load i256, ptr %mload.out.slot28482, align 16
  store i256 %mload.out28483, ptr %sp28478, align 16
  %3914 = add i64 %len.addr.357, 3
  %sp28486 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3912
  store i256 -21439277051702905465850011134918405524082246296578451495697401171165405168152, ptr %sp28486, align 16
  %3915 = add i64 %len.addr.357, 4
  %sp28488 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3914
  store i256 32, ptr %sp28488, align 16
  %3916 = add i64 %len.addr.357, 5
  %sp28492 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3915
  store i256 32, ptr %sp28492, align 16
  %sp28494 = getelementptr i256, ptr %sp28474, i64 1
  %sp28496 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3916
  store i256 %mload.out28483, ptr %sp28496, align 16
  %3917 = add i256 %mload.out28483, 32
  store i256 %3917, ptr %sp28492, align 16
  store i256 %3917, ptr %sp28486, align 16
  store i256 -21439277051702905465850011134918405524082246296578451495697401171165405168152, ptr %sp28492, align 16
  store i256 -21439277051702905465850011134918405524082246296578451495697401171165405168152, ptr %sp28488, align 16
  store i256 32, ptr %sp28492, align 16
  store i256 32, ptr %sp28486, align 16
  store i256 %3917, ptr %sp28492, align 16
  %3918 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3917, i256 -21439277051702905465850011134918405524082246296578451495697401171165405168152, ptr %arg.ecx.addr)
  %.not47963 = icmp eq i8 %3918, 0
  br i1 %.not47963, label %OP8246.PUSH20, label %return, !prof !6

OP8246.PUSH20:                                    ; preds = %OP8236.MLOAD.contd
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp28488, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp28492, align 16
  %sp28530 = getelementptr i256, ptr %sp28474, i64 -7
  %dup1228531 = load i256, ptr %sp28530, align 16
  store i256 %dup1228531, ptr %sp28496, align 16
  %3919 = and i256 %dup1228531, 1461501637330902918203684832716283019655932542975
  store i256 %3919, ptr %sp28492, align 16
  %dup428541 = load i256, ptr %sp28494, align 16
  store i256 %dup428541, ptr %sp28496, align 16
  %dup628545 = load i256, ptr %sp28474, align 16
  %sp28546 = getelementptr i256, ptr %sp28474, i64 6
  store i256 %dup628545, ptr %sp28546, align 16
  %3920 = add i256 %dup628545, %dup428541
  store i256 %3920, ptr %sp28496, align 16
  %3921 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3920, i256 %3919, ptr %arg.ecx.addr)
  %.not47964 = icmp eq i8 %3921, 0
  br i1 %.not47964, label %OP8254.DUP10, label %return, !prof !6

OP8254.DUP10:                                     ; preds = %OP8246.PUSH20
  %sp28559 = getelementptr i256, ptr %sp28474, i64 -6
  %dup1028560 = load i256, ptr %sp28559, align 16
  store i256 %dup1028560, ptr %sp28492, align 16
  %b28566 = load i256, ptr %sp28488, align 16
  %3922 = and i256 %b28566, %dup1028560
  store i256 %3922, ptr %sp28488, align 16
  store i256 96, ptr %sp28492, align 16
  %dup428572 = load i256, ptr %sp28494, align 16
  store i256 %dup428572, ptr %sp28496, align 16
  %3923 = add i256 %dup428572, 96
  store i256 %3923, ptr %sp28492, align 16
  %3924 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3923, i256 %3922, ptr %arg.ecx.addr)
  %.not47965 = icmp eq i8 %3924, 0
  br i1 %.not47965, label %OP8260.PUSH1, label %return, !prof !6

OP8260.PUSH1:                                     ; preds = %OP8254.DUP10
  store i256 128, ptr %sp28488, align 16
  %dup328589 = load i256, ptr %sp28478, align 16
  store i256 %dup328589, ptr %sp28492, align 16
  %3925 = add i256 %dup328589, 128
  store i256 %3925, ptr %sp28488, align 16
  %sp28598 = getelementptr i256, ptr %sp28474, i64 -5
  %dup928599 = load i256, ptr %sp28598, align 16
  store i256 %dup928599, ptr %sp28492, align 16
  store i256 %dup928599, ptr %sp28488, align 16
  store i256 %3925, ptr %sp28492, align 16
  %3926 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3925, i256 %dup928599, ptr %arg.ecx.addr)
  %.not47966 = icmp eq i8 %3926, 0
  br i1 %.not47966, label %OP8266.PUSH1, label %return, !prof !6

OP8266.PUSH1:                                     ; preds = %OP8260.PUSH1
  store i256 160, ptr %sp28488, align 16
  %dup328615 = load i256, ptr %sp28478, align 16
  store i256 %dup328615, ptr %sp28492, align 16
  %3927 = add i256 %dup328615, 160
  store i256 %3927, ptr %sp28488, align 16
  %sp28624 = getelementptr i256, ptr %sp28474, i64 -4
  %dup828625 = load i256, ptr %sp28624, align 16
  store i256 %dup828625, ptr %sp28492, align 16
  store i256 %dup828625, ptr %sp28488, align 16
  store i256 %3927, ptr %sp28492, align 16
  %3928 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3927, i256 %dup828625, ptr %arg.ecx.addr)
  %.not47967 = icmp eq i8 %3928, 0
  br i1 %.not47967, label %OP8272.PUSH1, label %return, !prof !6

OP8272.PUSH1:                                     ; preds = %OP8266.PUSH1
  store i256 192, ptr %sp28488, align 16
  %dup328641 = load i256, ptr %sp28478, align 16
  store i256 %dup328641, ptr %sp28492, align 16
  %3929 = add i256 %dup328641, 192
  store i256 %3929, ptr %sp28488, align 16
  %sp28650 = getelementptr i256, ptr %sp28474, i64 -3
  %dup728651 = load i256, ptr %sp28650, align 16
  store i256 %dup728651, ptr %sp28492, align 16
  store i256 %dup728651, ptr %sp28488, align 16
  store i256 %3929, ptr %sp28492, align 16
  %3930 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3929, i256 %dup728651, ptr %arg.ecx.addr)
  %.not47968 = icmp eq i8 %3930, 0
  br i1 %.not47968, label %OP8278.PUSH1, label %return, !prof !6

OP8278.PUSH1:                                     ; preds = %OP8272.PUSH1
  store i256 224, ptr %sp28488, align 16
  store i256 224, ptr %sp28492, align 16
  %dup428671 = load i256, ptr %sp28494, align 16
  store i256 %dup428671, ptr %sp28496, align 16
  %3931 = add i256 %dup428671, 224
  store i256 %3931, ptr %sp28492, align 16
  %sp28680 = getelementptr i256, ptr %sp28474, i64 -2
  %dup728681 = load i256, ptr %sp28680, align 16
  store i256 %dup728681, ptr %sp28496, align 16
  store i256 %dup728681, ptr %sp28492, align 16
  store i256 %3931, ptr %sp28496, align 16
  %3932 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3931, i256 %dup728681, ptr %arg.ecx.addr)
  %.not47969 = icmp eq i8 %3932, 0
  br i1 %.not47969, label %OP8285.DUP4, label %return, !prof !6

OP8285.DUP4:                                      ; preds = %OP8278.PUSH1
  %dup428695 = load i256, ptr %sp28474, align 16
  store i256 %dup428695, ptr %sp28492, align 16
  %mload.out.slot28700 = alloca i256, align 16
  %3933 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup428695, ptr %mload.out.slot28700, ptr %arg.ecx.addr)
  %.not47970 = icmp eq i8 %3933, 0
  br i1 %.not47970, label %OP8286.MLOAD.contd, label %return, !prof !6

OP8286.MLOAD.contd:                               ; preds = %OP8285.DUP4
  %mload.out28701 = load i256, ptr %mload.out.slot28700, align 16
  store i256 %mload.out28701, ptr %sp28492, align 16
  store i256 %mload.out28701, ptr %sp28496, align 16
  %dup528709 = load i256, ptr %sp28494, align 16
  store i256 %dup528709, ptr %sp28546, align 16
  %3934 = sub i256 %dup528709, %mload.out28701
  store i256 %3934, ptr %sp28496, align 16
  store i256 %3934, ptr %sp28492, align 16
  store i256 %mload.out28701, ptr %sp28496, align 16
  %swap.b28726 = load i256, ptr %sp28488, align 16
  store i256 %mload.out28701, ptr %sp28488, align 16
  store i256 %swap.b28726, ptr %sp28496, align 16
  %3935 = add i256 %swap.b28726, %3934
  store i256 %3935, ptr %sp28492, align 16
  store i256 %mload.out28701, ptr %sp28496, align 16
  %3936 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out28701, i256 %3935, ptr %arg.ecx.addr)
  %.not47971 = icmp eq i8 %3936, 0
  br i1 %.not47971, label %OP8295.PUSH2, label %return, !prof !6

OP8295.PUSH2:                                     ; preds = %OP8286.MLOAD.contd
  store i256 256, ptr %sp28492, align 16
  %swap.b28748 = load i256, ptr %sp28488, align 16
  store i256 256, ptr %sp28488, align 16
  store i256 %swap.b28748, ptr %sp28492, align 16
  %swap.b28753 = load i256, ptr %sp28494, align 16
  store i256 %swap.b28748, ptr %sp28494, align 16
  store i256 %swap.b28753, ptr %sp28492, align 16
  %3937 = add i256 %swap.b28753, 256
  store i256 %3937, ptr %sp28488, align 16
  %swap.b28764 = load i256, ptr %sp28486, align 16
  store i256 %3937, ptr %sp28486, align 16
  store i256 %swap.b28764, ptr %sp28488, align 16
  %swap.b28769 = load i256, ptr %sp28474, align 16
  store i256 %swap.b28764, ptr %sp28474, align 16
  store i256 %swap.b28769, ptr %sp28488, align 16
  %3938 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b28769, i256 %3937, ptr %arg.ecx.addr)
  %.not47972 = icmp eq i8 %3938, 0
  br i1 %.not47972, label %OP8302.DUP1, label %return, !prof !6

OP8302.DUP1:                                      ; preds = %OP8295.PUSH2
  %dup128777 = load i256, ptr %sp28478, align 16
  store i256 %dup128777, ptr %sp28486, align 16
  %mload.out.slot28782 = alloca i256, align 16
  %3939 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup128777, ptr %mload.out.slot28782, ptr %arg.ecx.addr)
  %.not47973 = icmp eq i8 %3939, 0
  br i1 %.not47973, label %OP8303.MLOAD.contd, label %return, !prof !6

OP8303.MLOAD.contd:                               ; preds = %OP8302.DUP1
  %mload.out28783 = load i256, ptr %mload.out.slot28782, align 16
  store i256 %mload.out28783, ptr %sp28486, align 16
  %swap.b28789 = load i256, ptr %sp28474, align 16
  store i256 %mload.out28783, ptr %sp28474, align 16
  store i256 %swap.b28789, ptr %sp28486, align 16
  %b28794 = load i256, ptr %sp28478, align 16
  %3940 = add i256 %b28794, %swap.b28789
  store i256 %3940, ptr %sp28478, align 16
  %3941 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp28474)
  %.not47974 = icmp eq i8 %3941, 0
  br i1 %.not47974, label %OP8307.PUSH2, label %return, !prof !6

OP8307.PUSH2:                                     ; preds = %OP8303.MLOAD.contd
  store i256 18045, ptr %sp28478, align 16
  %swap.b28804 = load i256, ptr %sp28474, align 16
  store i256 18045, ptr %sp28474, align 16
  store i256 %swap.b28804, ptr %sp28478, align 16
  %dup928807 = load i256, ptr %sp28530, align 16
  store i256 %dup928807, ptr %sp28486, align 16
  store i256 %dup928807, ptr %sp28478, align 16
  store i256 %swap.b28804, ptr %sp28486, align 16
  br label %OP9406.JUMPDEST.sink.split

OP8314.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp28821 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 18055, ptr %sp28821, align 16
  %sp28823 = getelementptr i256, ptr %sp28821, i64 -7
  %dup828824 = load i256, ptr %sp28823, align 16
  %sp28825 = getelementptr i256, ptr %sp28821, i64 1
  store i256 %dup828824, ptr %sp28825, align 16
  %3942 = add i64 %len.addr.357, 3
  %sp28827 = getelementptr i256, ptr %sp28821, i64 -2
  %dup428828 = load i256, ptr %sp28827, align 16
  %sp28829 = getelementptr i256, ptr %sp28821, i64 2
  store i256 %dup428828, ptr %sp28829, align 16
  br label %OP9623.JUMPDEST

OP8320.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp28833 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 14139, ptr %sp28833, align 16
  %sp28835 = getelementptr i256, ptr %sp28833, i64 -7
  %dup828836 = load i256, ptr %sp28835, align 16
  %sp28837 = getelementptr i256, ptr %sp28833, i64 1
  store i256 %dup828836, ptr %sp28837, align 16
  %sp28839 = getelementptr i256, ptr %sp28833, i64 -6
  %dup828840 = load i256, ptr %sp28839, align 16
  %sp28841 = getelementptr i256, ptr %sp28833, i64 2
  store i256 %dup828840, ptr %sp28841, align 16
  %3943 = add i64 %len.addr.357, 4
  %sp28843 = getelementptr i256, ptr %sp28833, i64 -5
  %dup828844 = load i256, ptr %sp28843, align 16
  %sp28845 = getelementptr i256, ptr %sp28833, i64 3
  store i256 %dup828844, ptr %sp28845, align 16
  br label %OP7511.JUMPDEST

OP8327.JUMPDEST:                                  ; preds = %dynamic_jump_table, %__revmc_ir_builtin_mstore.exit51374.thread, %OP5780.JUMPDEST
  %len.addr.295 = phi i64 [ %2671, %OP5780.JUMPDEST ], [ %4322, %__revmc_ir_builtin_mstore.exit51374.thread ], [ %len.addr.357, %dynamic_jump_table ]
  %3944 = add i64 %len.addr.295, 1
  %sp28849 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.295
  %sp28851 = getelementptr i256, ptr %sp28849, i64 -2
  %dup328852 = load i256, ptr %sp28851, align 16
  %sp28853 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3944
  %3945 = icmp eq i256 %dup328852, -1
  %3946 = zext i1 %3945 to i256
  store i256 %3946, ptr %sp28849, align 16
  store i256 %3946, ptr %sp28853, align 16
  br i1 %3945, label %OP8339.JUMPDEST, label %OP8334.POP

OP8334.POP:                                       ; preds = %OP8327.JUMPDEST
  %env.block.timestamp.addr = getelementptr inbounds i8, ptr %arg.env.addr, i64 80
  %env.block.timestamp = load i256, ptr %env.block.timestamp.addr, align 16
  store i256 %dup328852, ptr %sp28853, align 16
  %3947 = icmp uge i256 %dup328852, %env.block.timestamp
  %3948 = zext i1 %3947 to i256
  store i256 %3948, ptr %sp28849, align 16
  br label %OP8339.JUMPDEST, !annotation !7

OP8339.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8334.POP, %OP8327.JUMPDEST
  %len.addr.296 = phi i64 [ %3944, %OP8327.JUMPDEST ], [ %3944, %OP8334.POP ], [ %len.addr.357, %dynamic_jump_table ]
  %3949 = add i64 %len.addr.296, -1
  %sp28886 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3949
  %a28887 = load i256, ptr %sp28886, align 16
  %.not48997 = icmp eq i256 %a28887, 0
  br i1 %.not48997, label %OP8342.PUSH1, label %OP8373.JUMPDEST

OP8342.PUSH1:                                     ; preds = %OP8339.JUMPDEST
  store i256 64, ptr %sp28886, align 16
  %3950 = add i64 %len.addr.296, 1
  %3951 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.296
  %sp28891 = getelementptr i256, ptr %3951, i64 -1
  store i256 64, ptr %3951, align 16
  %mload.out.slot28897 = alloca i256, align 16
  %3952 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot28897, ptr %arg.ecx.addr)
  %.not48998 = icmp eq i8 %3952, 0
  br i1 %.not48998, label %OP8344.MLOAD.contd, label %return, !prof !6

OP8344.MLOAD.contd:                               ; preds = %OP8342.PUSH1
  %mload.out28898 = load i256, ptr %mload.out.slot28897, align 16
  store i256 %mload.out28898, ptr %3951, align 16
  %sp28901 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3950
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp28901, align 16
  %sp28905 = getelementptr i256, ptr %3951, i64 2
  store i256 %mload.out28898, ptr %sp28905, align 16
  %3953 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out28898, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48999 = icmp eq i8 %3953, 0
  br i1 %.not48999, label %OP8348.PUSH1, label %return, !prof !6

OP8348.PUSH1:                                     ; preds = %OP8344.MLOAD.contd
  store i256 32, ptr %sp28901, align 16
  %dup328917 = load i256, ptr %3951, align 16
  %sp28918 = getelementptr i256, ptr %3951, i64 3
  store i256 %dup328917, ptr %sp28918, align 16
  %3954 = add i256 %dup328917, 4
  store i256 %3954, ptr %sp28905, align 16
  %3955 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3954, i256 32, ptr %arg.ecx.addr)
  %.not49000 = icmp eq i8 %3955, 0
  br i1 %.not49000, label %OP8353.PUSH1, label %return, !prof !6

OP8353.PUSH1:                                     ; preds = %OP8348.PUSH1
  store i256 30, ptr %sp28901, align 16
  %dup328936 = load i256, ptr %3951, align 16
  store i256 %dup328936, ptr %sp28918, align 16
  %3956 = add i256 %dup328936, 36
  store i256 %3956, ptr %sp28905, align 16
  %3957 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3956, i256 30, ptr %arg.ecx.addr)
  %.not49001 = icmp eq i8 %3957, 0
  br i1 %.not49001, label %OP8358.PUSH32, label %return, !prof !6

OP8358.PUSH32:                                    ; preds = %OP8353.PUSH1
  store i256 31848090948271897445588461047522017640620527955747739304278290221036682346496, ptr %sp28901, align 16
  %dup328955 = load i256, ptr %3951, align 16
  store i256 %dup328955, ptr %sp28918, align 16
  %3958 = add i256 %dup328955, 68
  store i256 %3958, ptr %sp28905, align 16
  %3959 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3958, i256 31848090948271897445588461047522017640620527955747739304278290221036682346496, ptr %arg.ecx.addr)
  %.not49002 = icmp eq i8 %3959, 0
  br i1 %.not49002, label %OP8363.SWAP1, label %return, !prof !6

OP8363.SWAP1:                                     ; preds = %OP8358.PUSH32
  %swap.a28970 = load i256, ptr %3951, align 16
  %swap.b28972 = load i256, ptr %sp28891, align 16
  store i256 %swap.a28970, ptr %sp28891, align 16
  store i256 %swap.b28972, ptr %3951, align 16
  %mload.out.slot28976 = alloca i256, align 16
  %3960 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b28972, ptr %mload.out.slot28976, ptr %arg.ecx.addr)
  %.not49003 = icmp eq i8 %3960, 0
  br i1 %.not49003, label %OP8364.MLOAD.contd, label %return, !prof !6

OP8364.MLOAD.contd:                               ; preds = %OP8363.SWAP1
  %mload.out28977 = load i256, ptr %mload.out.slot28976, align 16
  %swap.b28983 = load i256, ptr %sp28891, align 16
  %3961 = sub i256 %swap.b28983, %mload.out28977
  store i256 100, ptr %sp28901, align 16
  %3962 = add i256 %3961, 100
  store i256 %3962, ptr %sp28891, align 16
  store i256 %mload.out28977, ptr %3951, align 16
  %3963 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp28891, i8 16)
  %.not49004 = icmp eq i8 %3963, 0
  %spec.select36658 = select i1 %.not49004, i8 16, i8 %3963, !prof !6
  br label %return

OP8373.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8339.JUMPDEST
  %len.addr.297 = phi i64 [ %3949, %OP8339.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp29016 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.297
  store i256 0, ptr %sp29016, align 16
  %sp29018 = getelementptr i256, ptr %sp29016, i64 1
  store i256 18387, ptr %sp29018, align 16
  %3964 = add i64 %len.addr.297, 3
  %sp29020 = getelementptr i256, ptr %sp29016, i64 2
  store i256 18232, ptr %sp29020, align 16
  br label %OP7788.JUMPDEST

OP8379.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %3965 = add i64 %len.addr.357, 1
  %sp29024 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp29024, align 16
  %3966 = add i64 %len.addr.357, 2
  %sp29028 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3965
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp29028, align 16
  %3967 = add i64 %len.addr.357, 3
  %sp29030 = getelementptr i256, ptr %sp29024, i64 -8
  %dup1029031 = load i256, ptr %sp29030, align 16
  %sp29032 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3966
  store i256 %dup1029031, ptr %sp29032, align 16
  %3968 = and i256 %dup1029031, 1461501637330902918203684832716283019655932542975
  store i256 %3968, ptr %sp29028, align 16
  store i256 0, ptr %sp29032, align 16
  %3969 = add i64 %len.addr.357, 4
  %sp29044 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3967
  store i256 %3968, ptr %sp29044, align 16
  %3970 = add i64 %len.addr.357, 5
  %sp29048 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3969
  store i256 0, ptr %sp29048, align 16
  %3971 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %3968, ptr %arg.ecx.addr)
  %.not47930 = icmp eq i8 %3971, 0
  br i1 %.not47930, label %OP8388.PUSH1, label %return, !prof !6

OP8388.PUSH1:                                     ; preds = %OP8379.JUMPDEST
  store i256 17, ptr %sp29044, align 16
  store i256 32, ptr %sp29048, align 16
  store i256 32, ptr %sp29044, align 16
  store i256 17, ptr %sp29048, align 16
  %3972 = add i64 %len.addr.357, 6
  %sp29066 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3970
  store i256 32, ptr %sp29066, align 16
  %3973 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 17, ptr %arg.ecx.addr)
  %.not47931 = icmp eq i8 %3973, 0
  br i1 %.not47931, label %OP8393.PUSH1, label %return, !prof !6

OP8393.PUSH1:                                     ; preds = %OP8388.PUSH1
  store i256 64, ptr %sp29048, align 16
  %swap.b29078 = load i256, ptr %sp29032, align 16
  store i256 64, ptr %sp29032, align 16
  store i256 %swap.b29078, ptr %sp29048, align 16
  store i256 64, ptr %sp29066, align 16
  store i256 64, ptr %sp29048, align 16
  store i256 %swap.b29078, ptr %sp29066, align 16
  %3974 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp29048)
  %.not47932 = icmp eq i8 %3974, 0
  br i1 %.not47932, label %OP8398.DUP1, label %return, !prof !6

OP8398.DUP1:                                      ; preds = %OP8393.PUSH1
  %dup129092 = load i256, ptr %sp29048, align 16
  store i256 %dup129092, ptr %sp29066, align 16
  %3975 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp29066, i8 17)
  %.not47933 = icmp eq i8 %3975, 0
  br i1 %.not47933, label %OP8400.PUSH1, label %return, !prof !6

OP8400.PUSH1:                                     ; preds = %OP8398.DUP1
  %sp29097 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %3972
  store i256 1, ptr %sp29097, align 16
  %dup229100 = load i256, ptr %sp29066, align 16
  %sp29101 = getelementptr i256, ptr %sp29024, i64 7
  store i256 %dup229100, ptr %sp29101, align 16
  %3976 = add i256 %dup229100, 1
  store i256 %3976, ptr %sp29097, align 16
  store i256 %3976, ptr %sp29066, align 16
  store i256 %dup229100, ptr %sp29097, align 16
  %swap.b29117 = load i256, ptr %sp29048, align 16
  store i256 %dup229100, ptr %sp29048, align 16
  store i256 %swap.b29117, ptr %sp29097, align 16
  %3977 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp29066, i8 17)
  %.not47934 = icmp eq i8 %3977, 0
  br i1 %.not47934, label %OP8406.DUP3, label %return, !prof !6

OP8406.DUP3:                                      ; preds = %OP8400.PUSH1
  %dup329122 = load i256, ptr %sp29032, align 16
  store i256 %dup329122, ptr %sp29066, align 16
  %mload.out.slot29127 = alloca i256, align 16
  %3978 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup329122, ptr %mload.out.slot29127, ptr %arg.ecx.addr)
  %.not47935 = icmp eq i8 %3978, 0
  br i1 %.not47935, label %OP8407.MLOAD.contd, label %return, !prof !6

OP8407.MLOAD.contd:                               ; preds = %OP8406.DUP3
  %mload.out29128 = load i256, ptr %mload.out.slot29127, align 16
  store i256 %mload.out29128, ptr %sp29066, align 16
  store i256 49955707469362902507454157297736832118868343942642399513960811609542965143241, ptr %sp29097, align 16
  store i256 %mload.out29128, ptr %sp29101, align 16
  %sp29137 = getelementptr i256, ptr %sp29024, i64 3
  %dup529138 = load i256, ptr %sp29137, align 16
  %sp29139 = getelementptr i256, ptr %sp29024, i64 8
  store i256 %dup529138, ptr %sp29139, align 16
  %3979 = add i256 %dup529138, %mload.out29128
  store i256 %3979, ptr %sp29101, align 16
  %3980 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3979, i256 49955707469362902507454157297736832118868343942642399513960811609542965143241, ptr %arg.ecx.addr)
  %.not47936 = icmp eq i8 %3980, 0
  br i1 %.not47936, label %OP8413.DUP1, label %return, !prof !6

OP8413.DUP1:                                      ; preds = %OP8407.MLOAD.contd
  %dup129153 = load i256, ptr %sp29066, align 16
  store i256 %dup129153, ptr %sp29097, align 16
  %sp29156 = getelementptr i256, ptr %sp29024, i64 2
  %dup529157 = load i256, ptr %sp29156, align 16
  store i256 %dup529157, ptr %sp29101, align 16
  %3981 = add i256 %dup529157, %dup129153
  store i256 %3981, ptr %sp29097, align 16
  %sp29168 = getelementptr i256, ptr %sp29024, i64 1
  %swap.b29169 = load i256, ptr %sp29168, align 16
  store i256 %3981, ptr %sp29168, align 16
  store i256 %swap.b29169, ptr %sp29097, align 16
  store i256 %swap.b29169, ptr %sp29066, align 16
  store i256 %dup129153, ptr %sp29097, align 16
  store i256 %dup129153, ptr %sp29168, align 16
  store i256 %3981, ptr %sp29097, align 16
  %3982 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3981, i256 %swap.b29169, ptr %arg.ecx.addr)
  %.not47937 = icmp eq i8 %3982, 0
  br i1 %.not47937, label %OP8420.SWAP4, label %return, !prof !6

OP8420.SWAP4:                                     ; preds = %OP8413.DUP1
  %swap.a29187 = load i256, ptr %sp29048, align 16
  %swap.b29189 = load i256, ptr %sp29024, align 16
  store i256 %swap.a29187, ptr %sp29024, align 16
  store i256 %swap.b29189, ptr %sp29048, align 16
  %sp29191 = getelementptr i256, ptr %sp29024, i64 -7
  %dup1229192 = load i256, ptr %sp29191, align 16
  store i256 %dup1229192, ptr %sp29066, align 16
  %3983 = and i256 %dup1229192, %swap.b29189
  store i256 %3983, ptr %sp29048, align 16
  store i256 96, ptr %sp29066, align 16
  %dup529204 = load i256, ptr %sp29168, align 16
  store i256 %dup529204, ptr %sp29097, align 16
  %3984 = add i256 %dup529204, 96
  store i256 %3984, ptr %sp29066, align 16
  %3985 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3984, i256 %3983, ptr %arg.ecx.addr)
  %.not47938 = icmp eq i8 %3985, 0
  br i1 %.not47938, label %OP8427.PUSH1, label %return, !prof !6

OP8427.PUSH1:                                     ; preds = %OP8420.SWAP4
  store i256 128, ptr %sp29048, align 16
  %dup429221 = load i256, ptr %sp29168, align 16
  store i256 %dup429221, ptr %sp29066, align 16
  %3986 = add i256 %dup429221, 128
  store i256 %3986, ptr %sp29048, align 16
  %sp29230 = getelementptr i256, ptr %sp29024, i64 -6
  %dup1129231 = load i256, ptr %sp29230, align 16
  store i256 %dup1129231, ptr %sp29066, align 16
  store i256 %dup1129231, ptr %sp29048, align 16
  store i256 %3986, ptr %sp29066, align 16
  %3987 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3986, i256 %dup1129231, ptr %arg.ecx.addr)
  %.not47939 = icmp eq i8 %3987, 0
  br i1 %.not47939, label %OP8433.PUSH1, label %return, !prof !6

OP8433.PUSH1:                                     ; preds = %OP8427.PUSH1
  store i256 160, ptr %sp29048, align 16
  %dup429247 = load i256, ptr %sp29168, align 16
  store i256 %dup429247, ptr %sp29066, align 16
  %3988 = add i256 %dup429247, 160
  store i256 %3988, ptr %sp29048, align 16
  %swap.b29259 = load i256, ptr %sp29024, align 16
  store i256 %3988, ptr %sp29024, align 16
  store i256 %swap.b29259, ptr %sp29048, align 16
  %swap.b29264 = load i256, ptr %sp29044, align 16
  store i256 %swap.b29259, ptr %sp29044, align 16
  store i256 %swap.b29264, ptr %sp29048, align 16
  store i256 %swap.b29264, ptr %sp29024, align 16
  store i256 %3988, ptr %sp29048, align 16
  %3989 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3988, i256 %swap.b29259, ptr %arg.ecx.addr)
  %.not47940 = icmp eq i8 %3989, 0
  br i1 %.not47940, label %OP8440.PUSH1, label %return, !prof !6

OP8440.PUSH1:                                     ; preds = %OP8433.PUSH1
  store i256 192, ptr %sp29044, align 16
  store i256 192, ptr %sp29048, align 16
  %dup429283 = load i256, ptr %sp29168, align 16
  store i256 %dup429283, ptr %sp29066, align 16
  %3990 = add i256 %dup429283, 192
  store i256 %3990, ptr %sp29048, align 16
  %sp29292 = getelementptr i256, ptr %sp29024, i64 -5
  %dup1029293 = load i256, ptr %sp29292, align 16
  store i256 %dup1029293, ptr %sp29066, align 16
  store i256 %dup1029293, ptr %sp29048, align 16
  store i256 %3990, ptr %sp29066, align 16
  %3991 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %3990, i256 %dup1029293, ptr %arg.ecx.addr)
  %.not47941 = icmp eq i8 %3991, 0
  br i1 %.not47941, label %OP8447.DUP2, label %return, !prof !6

OP8447.DUP2:                                      ; preds = %OP8440.PUSH1
  %dup229307 = load i256, ptr %sp29032, align 16
  store i256 %dup229307, ptr %sp29048, align 16
  %mload.out.slot29312 = alloca i256, align 16
  %3992 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup229307, ptr %mload.out.slot29312, ptr %arg.ecx.addr)
  %.not47942 = icmp eq i8 %3992, 0
  br i1 %.not47942, label %OP8448.MLOAD.contd, label %return, !prof !6

OP8448.MLOAD.contd:                               ; preds = %OP8447.DUP2
  %mload.out29313 = load i256, ptr %mload.out.slot29312, align 16
  store i256 %mload.out29313, ptr %sp29048, align 16
  store i256 %mload.out29313, ptr %sp29066, align 16
  %dup529321 = load i256, ptr %sp29168, align 16
  store i256 %dup529321, ptr %sp29097, align 16
  %3993 = sub i256 %dup529321, %mload.out29313
  store i256 %3993, ptr %sp29066, align 16
  store i256 %3993, ptr %sp29048, align 16
  store i256 %mload.out29313, ptr %sp29066, align 16
  %swap.b29338 = load i256, ptr %sp29044, align 16
  store i256 %mload.out29313, ptr %sp29044, align 16
  store i256 %swap.b29338, ptr %sp29066, align 16
  %3994 = add i256 %swap.b29338, %3993
  store i256 %3994, ptr %sp29048, align 16
  store i256 %mload.out29313, ptr %sp29066, align 16
  %3995 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out29313, i256 %3994, ptr %arg.ecx.addr)
  %.not47943 = icmp eq i8 %3995, 0
  br i1 %.not47943, label %OP8457.PUSH1, label %return, !prof !6

OP8457.PUSH1:                                     ; preds = %OP8448.MLOAD.contd
  store i256 224, ptr %sp29048, align 16
  %swap.b29360 = load i256, ptr %sp29044, align 16
  store i256 224, ptr %sp29044, align 16
  store i256 %swap.b29360, ptr %sp29048, align 16
  %swap.b29365 = load i256, ptr %sp29168, align 16
  store i256 %swap.b29360, ptr %sp29168, align 16
  store i256 %swap.b29365, ptr %sp29048, align 16
  %3996 = add i256 %swap.b29365, 224
  store i256 %3996, ptr %sp29044, align 16
  %swap.b29376 = load i256, ptr %sp29032, align 16
  store i256 %3996, ptr %sp29032, align 16
  store i256 %swap.b29376, ptr %sp29044, align 16
  %3997 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b29376, i256 %3996, ptr %arg.ecx.addr)
  %.not47944 = icmp eq i8 %3997, 0
  br i1 %.not47944, label %OP8463.DUP1, label %return, !prof !6

OP8463.DUP1:                                      ; preds = %OP8457.PUSH1
  %dup129384 = load i256, ptr %sp29028, align 16
  store i256 %dup129384, ptr %sp29032, align 16
  %mload.out.slot29389 = alloca i256, align 16
  %3998 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup129384, ptr %mload.out.slot29389, ptr %arg.ecx.addr)
  %.not47945 = icmp eq i8 %3998, 0
  br i1 %.not47945, label %OP8464.MLOAD.contd, label %return, !prof !6

OP8464.MLOAD.contd:                               ; preds = %OP8463.DUP1
  %mload.out29390 = load i256, ptr %mload.out.slot29389, align 16
  store i256 %mload.out29390, ptr %sp29032, align 16
  %swap.b29396 = load i256, ptr %sp29024, align 16
  store i256 %mload.out29390, ptr %sp29024, align 16
  store i256 %swap.b29396, ptr %sp29032, align 16
  %b29401 = load i256, ptr %sp29028, align 16
  %3999 = add i256 %b29401, %swap.b29396
  store i256 %3999, ptr %sp29028, align 16
  %4000 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp29024)
  %.not47946 = icmp eq i8 %4000, 0
  br i1 %.not47946, label %OP9667.JUMPDEST, label %return, !prof !6

OP8470.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4001 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp29408 = getelementptr i256, ptr %4001, i64 -1
  %swap.a29409 = load i256, ptr %sp29408, align 16
  %sp29410 = getelementptr i256, ptr %4001, i64 -2
  store i256 %swap.a29409, ptr %sp29410, align 16
  store i256 731022863064405212280927003326868638342848426354, ptr %sp29408, align 16
  store i256 1825482322, ptr %4001, align 16
  %sp29418 = getelementptr i256, ptr %4001, i64 -7
  %dup829419 = load i256, ptr %sp29418, align 16
  %sp29420 = getelementptr i256, ptr %4001, i64 1
  store i256 %dup829419, ptr %sp29420, align 16
  %sp29424 = getelementptr i256, ptr %4001, i64 2
  store i256 %swap.a29409, ptr %sp29424, align 16
  %sp29426 = getelementptr i256, ptr %4001, i64 -3
  %dup629427 = load i256, ptr %sp29426, align 16
  %sp29428 = getelementptr i256, ptr %4001, i64 3
  store i256 %dup629427, ptr %sp29428, align 16
  %4002 = add i64 %len.addr.357, 5
  %sp29430 = getelementptr i256, ptr %4001, i64 4
  store i256 64, ptr %sp29430, align 16
  %mload.out.slot29434 = alloca i256, align 16
  %4003 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot29434, ptr %arg.ecx.addr)
  %.not47913 = icmp eq i8 %4003, 0
  br i1 %.not47913, label %OP8479.MLOAD.contd, label %return, !prof !6

OP8479.MLOAD.contd:                               ; preds = %OP8470.JUMPDEST
  %mload.out29435 = load i256, ptr %mload.out.slot29434, align 16
  store i256 %mload.out29435, ptr %sp29430, align 16
  %4004 = add i64 %len.addr.357, 6
  %dup529439 = load i256, ptr %4001, align 16
  %sp29440 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4002
  store i256 %dup529439, ptr %sp29440, align 16
  %4005 = add i64 %len.addr.357, 7
  %sp29442 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4004
  store i256 4294967295, ptr %sp29442, align 16
  %4006 = and i256 %dup529439, 4294967295
  store i256 %4006, ptr %sp29440, align 16
  store i256 224, ptr %sp29442, align 16
  %4007 = shl i256 %dup529439, 224
  store i256 %4007, ptr %sp29440, align 16
  store i256 %mload.out29435, ptr %sp29442, align 16
  %4008 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out29435, i256 %4007, ptr %arg.ecx.addr)
  %.not47914 = icmp eq i8 %4008, 0
  br i1 %.not47914, label %OP8487.PUSH1, label %return, !prof !6

OP8487.PUSH1:                                     ; preds = %OP8479.MLOAD.contd
  store i256 4, ptr %sp29440, align 16
  %b29472 = load i256, ptr %sp29430, align 16
  %4009 = add i256 %b29472, 4
  store i256 %4009, ptr %sp29430, align 16
  store i256 %4009, ptr %sp29440, align 16
  %dup529480 = load i256, ptr %sp29420, align 16
  store i256 %dup529480, ptr %sp29442, align 16
  %sp29483 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4005
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp29483, align 16
  %4010 = and i256 %dup529480, 1461501637330902918203684832716283019655932542975
  store i256 %4010, ptr %sp29442, align 16
  store i256 %4009, ptr %sp29483, align 16
  %4011 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4009, i256 %4010, ptr %arg.ecx.addr)
  %.not47915 = icmp eq i8 %4011, 0
  br i1 %.not47915, label %OP8495.PUSH1, label %return, !prof !6

OP8495.PUSH1:                                     ; preds = %OP8487.PUSH1
  store i256 32, ptr %sp29442, align 16
  %b29505 = load i256, ptr %sp29440, align 16
  %4012 = add i256 %b29505, 32
  store i256 %4012, ptr %sp29440, align 16
  %dup429509 = load i256, ptr %sp29424, align 16
  store i256 %dup429509, ptr %sp29442, align 16
  store i256 %4012, ptr %sp29483, align 16
  %4013 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4012, i256 %dup429509, ptr %arg.ecx.addr)
  %.not47916 = icmp eq i8 %4013, 0
  br i1 %.not47916, label %OP8500.PUSH1, label %return, !prof !6

OP8500.PUSH1:                                     ; preds = %OP8495.PUSH1
  store i256 32, ptr %sp29442, align 16
  %b29526 = load i256, ptr %sp29440, align 16
  %4014 = add i256 %b29526, 32
  store i256 %4014, ptr %sp29440, align 16
  store i256 %4014, ptr %sp29442, align 16
  store i256 32, ptr %sp29483, align 16
  %4015 = add i256 %b29526, 64
  store i256 %4015, ptr %sp29442, align 16
  %dup329542 = load i256, ptr %sp29430, align 16
  store i256 %dup329542, ptr %sp29483, align 16
  %4016 = add i64 %len.addr.357, 9
  %sp29547 = getelementptr i256, ptr %4001, i64 8
  store i256 %4015, ptr %sp29547, align 16
  %4017 = sub i256 %4015, %dup329542
  store i256 %4017, ptr %sp29483, align 16
  store i256 %4014, ptr %sp29547, align 16
  %4018 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4014, i256 %4017, ptr %arg.ecx.addr)
  %.not47917 = icmp eq i8 %4018, 0
  br i1 %.not47917, label %OP8510.DUP4, label %return, !prof !6

OP8510.DUP4:                                      ; preds = %OP8500.PUSH1
  %dup429565 = load i256, ptr %sp29428, align 16
  store i256 %dup429565, ptr %sp29483, align 16
  %dup229569 = load i256, ptr %sp29442, align 16
  store i256 %dup229569, ptr %sp29547, align 16
  %4019 = add i64 %len.addr.357, 10
  %sp29574 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4016
  store i256 %dup429565, ptr %sp29574, align 16
  %mload.out.slot29578 = alloca i256, align 16
  %4020 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup429565, ptr %mload.out.slot29578, ptr %arg.ecx.addr)
  %.not47918 = icmp eq i8 %4020, 0
  br i1 %.not47918, label %OP8513.MLOAD.contd, label %return, !prof !6

OP8513.MLOAD.contd:                               ; preds = %OP8510.DUP4
  %mload.out29579 = load i256, ptr %mload.out.slot29578, align 16
  store i256 %mload.out29579, ptr %sp29574, align 16
  %dup229583 = load i256, ptr %sp29547, align 16
  %sp29584 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4019
  store i256 %dup229583, ptr %sp29584, align 16
  %4021 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup229583, i256 %mload.out29579, ptr %arg.ecx.addr)
  %.not47919 = icmp eq i8 %4021, 0
  br i1 %.not47919, label %OP8516.PUSH1, label %return, !prof !6

OP8516.PUSH1:                                     ; preds = %OP8513.MLOAD.contd
  store i256 32, ptr %sp29574, align 16
  %b29596 = load i256, ptr %sp29547, align 16
  %4022 = add i256 %b29596, 32
  store i256 %4022, ptr %sp29547, align 16
  %swap.b29602 = load i256, ptr %sp29442, align 16
  store i256 %4022, ptr %sp29442, align 16
  store i256 %swap.b29602, ptr %sp29547, align 16
  %dup129606 = load i256, ptr %sp29483, align 16
  store i256 %dup129606, ptr %sp29547, align 16
  %mload.out.slot29611 = alloca i256, align 16
  %4023 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup129606, ptr %mload.out.slot29611, ptr %arg.ecx.addr)
  %.not47920 = icmp eq i8 %4023, 0
  br i1 %.not47920, label %OP8521.MLOAD.contd, label %return, !prof !6

OP8521.MLOAD.contd:                               ; preds = %OP8516.PUSH1
  %mload.out29612 = load i256, ptr %mload.out.slot29611, align 16
  store i256 %mload.out29612, ptr %sp29547, align 16
  %swap.b29618 = load i256, ptr %sp29483, align 16
  store i256 %mload.out29612, ptr %sp29483, align 16
  store i256 %swap.b29618, ptr %sp29547, align 16
  store i256 32, ptr %sp29574, align 16
  %4024 = add i256 %swap.b29618, 32
  store i256 %4024, ptr %sp29547, align 16
  store i256 %4024, ptr %sp29483, align 16
  store i256 %mload.out29612, ptr %sp29547, align 16
  store i256 %mload.out29612, ptr %sp29574, align 16
  %sp29637 = getelementptr i256, ptr %4001, i64 6
  %dup429638 = load i256, ptr %sp29637, align 16
  store i256 %dup429638, ptr %sp29584, align 16
  %sp29643 = getelementptr i256, ptr %4001, i64 11
  store i256 %4024, ptr %sp29643, align 16
  %4025 = add i64 %len.addr.357, 13
  %sp29645 = getelementptr i256, ptr %4001, i64 12
  store i256 0, ptr %sp29645, align 16
  br label %OP8530.JUMPDEST.preheader, !annotation !7

OP8530.JUMPDEST.preheader:                        ; preds = %dynamic_jump_table, %OP8521.MLOAD.contd
  %len.addr.298.ph = phi i64 [ %4025, %OP8521.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %4026 = add i64 %len.addr.298.ph, 1
  %4027 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.298.ph
  %sp29648 = getelementptr i256, ptr %4027, i64 -4
  %sp29652 = getelementptr i256, ptr %4027, i64 -1
  %sp29654 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4026
  %dup42964953463 = load i256, ptr %sp29648, align 16
  store i256 %dup42964953463, ptr %4027, align 16
  %dup22965353464 = load i256, ptr %sp29652, align 16
  store i256 %dup22965353464, ptr %sp29654, align 16
  %4028 = icmp uge i256 %dup22965353464, %dup42964953463
  %4029 = zext i1 %4028 to i256
  store i256 %4029, ptr %4027, align 16
  br i1 %4028, label %OP8549.JUMPDEST, label %OP8537.DUP2.lr.ph

OP8537.DUP2.lr.ph:                                ; preds = %OP8530.JUMPDEST.preheader
  %sp29669 = getelementptr i256, ptr %4027, i64 -2
  %sp29689 = getelementptr i256, ptr %4027, i64 -3
  %sp29695 = getelementptr i256, ptr %4027, i64 2
  br label %OP8537.DUP2

OP8537.DUP2:                                      ; preds = %OP8537.DUP2.lr.ph, %OP8545.PUSH1
  %dup229674 = phi i256 [ %dup22965353464, %OP8537.DUP2.lr.ph ], [ %4051, %OP8545.PUSH1 ]
  %dup229670 = load i256, ptr %sp29669, align 16
  store i256 %dup229670, ptr %4027, align 16
  store i256 %dup229674, ptr %sp29654, align 16
  %4030 = add i256 %dup229674, %dup229670
  store i256 %4030, ptr %4027, align 16
  %ecx.memory.i51025 = load ptr, ptr %ecx.memory.addr.i51832, align 8
  %ecx.memory.len.addr.i51026 = getelementptr inbounds i8, ptr %ecx.memory.i51025, i64 16
  %ecx.memory.len.i51027 = load i64, ptr %ecx.memory.len.addr.i51026, align 8, !noalias !734
  %ecx.memory.last_checkpoint.addr.i51028 = getelementptr inbounds i8, ptr %ecx.memory.i51025, i64 48
  %ecx.memory.last_checkpoint.i51029 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51028, align 8, !noalias !734
  %4031 = sub i64 %ecx.memory.len.i51027, %ecx.memory.last_checkpoint.i51029
  %4032 = icmp ugt i256 %4030, 18446744073709551615
  %4033 = trunc i256 %4030 to i64
  %4034 = add i64 %4033, 32
  %4035 = icmp ugt i64 %4033, -33
  %4036 = or i1 %4032, %4035
  %4037 = select i1 %4036, i64 -1, i64 %4034
  %4038 = icmp ugt i64 %4037, %4031
  br i1 %4038, label %resize.i51037, label %OP8540.MLOAD.contd, !prof !5

resize.i51037:                                    ; preds = %OP8537.DUP2
  %4039 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4037), !noalias !738
  %.not.i51038 = icmp eq i8 %4039, 0
  br i1 %.not.i51038, label %resize.i51037.OP8540.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51037.OP8540.MLOAD.contd_crit_edge:       ; preds = %resize.i51037
  %dup329694.pre = load i256, ptr %sp29652, align 16
  %ecx.memory.i51041.pre = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !739
  br label %OP8540.MLOAD.contd

OP8540.MLOAD.contd:                               ; preds = %resize.i51037.OP8540.MLOAD.contd_crit_edge, %OP8537.DUP2
  %ecx.memory.i51041 = phi ptr [ %ecx.memory.i51041.pre, %resize.i51037.OP8540.MLOAD.contd_crit_edge ], [ %ecx.memory.i51025, %OP8537.DUP2 ]
  %dup329694 = phi i256 [ %dup329694.pre, %resize.i51037.OP8540.MLOAD.contd_crit_edge ], [ %dup229674, %OP8537.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i51031 = getelementptr inbounds i8, ptr %ecx.memory.i51025, i64 8
  %ecx.memory.buffer.ptr.shared.i51032 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51031, align 8, !noalias !734
  %ecx.memory.buffer.ptr.i51033 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51032, i64 %ecx.memory.last_checkpoint.i51029
  %slot.i51034 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51033, i64 %4033
  %slot.value.i51035 = load i256, ptr %slot.i51034, align 1, !noalias !734
  %4040 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51035)
  store i256 %4040, ptr %4027, align 16
  %dup429690 = load i256, ptr %sp29689, align 16
  store i256 %dup429690, ptr %sp29654, align 16
  store i256 %dup329694, ptr %sp29695, align 16
  %4041 = add i256 %dup329694, %dup429690
  store i256 %4041, ptr %sp29654, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !739)
  %ecx.memory.len.addr.i51042 = getelementptr inbounds i8, ptr %ecx.memory.i51041, i64 16
  %ecx.memory.len.i51043 = load i64, ptr %ecx.memory.len.addr.i51042, align 8, !noalias !739
  %ecx.memory.last_checkpoint.addr.i51044 = getelementptr inbounds i8, ptr %ecx.memory.i51041, i64 48
  %ecx.memory.last_checkpoint.i51045 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51044, align 8, !noalias !739
  %4042 = sub i64 %ecx.memory.len.i51043, %ecx.memory.last_checkpoint.i51045
  %4043 = icmp ugt i256 %4041, 18446744073709551615
  %4044 = trunc i256 %4041 to i64
  %4045 = add i64 %4044, 32
  %4046 = icmp ugt i64 %4044, -33
  %4047 = or i1 %4043, %4046
  %4048 = select i1 %4047, i64 -1, i64 %4045
  %4049 = icmp ugt i64 %4048, %4042
  br i1 %4049, label %resize.i51052, label %OP8545.PUSH1, !prof !5

resize.i51052:                                    ; preds = %OP8540.MLOAD.contd
  %4050 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4048)
  %.not.i51053 = icmp eq i8 %4050, 0
  br i1 %.not.i51053, label %OP8545.PUSH1, label %return, !prof !6

OP8545.PUSH1:                                     ; preds = %OP8540.MLOAD.contd, %resize.i51052
  %ecx.memory.buffer.ptr.shared.addr.i51047 = getelementptr inbounds i8, ptr %ecx.memory.i51041, i64 8
  %ecx.memory.buffer.ptr.shared.i51048 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51047, align 8, !noalias !739
  %ecx.memory.buffer.ptr.i51049 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51048, i64 %ecx.memory.last_checkpoint.i51045
  %slot.i51050 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51049, i64 %4044
  store i256 %slot.value.i51035, ptr %slot.i51050, align 1, !noalias !739
  store i256 32, ptr %4027, align 16
  %b29713 = load i256, ptr %sp29652, align 16
  %4051 = add i256 %b29713, 32
  store i256 %4051, ptr %sp29652, align 16
  %dup429649 = load i256, ptr %sp29648, align 16
  store i256 %dup429649, ptr %4027, align 16
  store i256 %4051, ptr %sp29654, align 16
  %4052 = icmp uge i256 %4051, %dup429649
  %4053 = zext i1 %4052 to i256
  store i256 %4053, ptr %4027, align 16
  br i1 %4052, label %OP8549.JUMPDEST, label %OP8537.DUP2

OP8549.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8545.PUSH1, %OP8530.JUMPDEST.preheader
  %len.addr.299 = phi i64 [ %len.addr.298.ph, %OP8530.JUMPDEST.preheader ], [ %len.addr.298.ph, %OP8545.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %4054 = add i64 %len.addr.299, -1
  %4055 = add i64 %len.addr.299, -3
  %4056 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.299
  %sp29722 = getelementptr i256, ptr %4056, i64 -5
  %swap.a29723 = load i256, ptr %sp29722, align 16
  %sp29724 = getelementptr i256, ptr %4056, i64 -6
  %swap.b29725 = load i256, ptr %sp29724, align 16
  store i256 %swap.a29723, ptr %sp29724, align 16
  store i256 %swap.b29725, ptr %sp29722, align 16
  %4057 = add i64 %len.addr.299, -5
  %sp29730 = getelementptr i256, ptr %4056, i64 -7
  %swap.b29731 = load i256, ptr %sp29730, align 16
  store i256 %swap.a29723, ptr %sp29730, align 16
  store i256 %swap.b29731, ptr %sp29724, align 16
  %sp29735 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4057
  store i256 %swap.a29723, ptr %sp29735, align 16
  %4058 = add i256 %swap.b29731, %swap.a29723
  store i256 %4058, ptr %sp29724, align 16
  store i256 %4058, ptr %sp29730, align 16
  store i256 %swap.a29723, ptr %sp29724, align 16
  store i256 31, ptr %sp29735, align 16
  %4059 = and i256 %swap.a29723, 31
  store i256 %4059, ptr %sp29724, align 16
  %4060 = icmp eq i256 %4059, 0
  %4061 = zext i1 %4060 to i256
  store i256 %4061, ptr %sp29735, align 16
  br i1 %4060, label %OP8586.JUMPDEST, label %OP8566.DUP1

OP8566.DUP1:                                      ; preds = %OP8549.JUMPDEST
  store i256 %4059, ptr %sp29735, align 16
  %sp29773 = getelementptr i256, ptr %4056, i64 -4
  store i256 %4058, ptr %sp29773, align 16
  %4062 = sub i256 %4058, %4059
  store i256 %4062, ptr %sp29722, align 16
  store i256 %4062, ptr %sp29773, align 16
  %mload.out.slot29787 = alloca i256, align 16
  %4063 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %4062, ptr %mload.out.slot29787, ptr %arg.ecx.addr)
  %.not47923 = icmp eq i8 %4063, 0
  br i1 %.not47923, label %OP8570.MLOAD.contd, label %return, !prof !6

OP8570.MLOAD.contd:                               ; preds = %OP8566.DUP1
  %mload.out29788 = load i256, ptr %mload.out.slot29787, align 16
  store i256 %mload.out29788, ptr %sp29773, align 16
  %sp29791 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4055
  store i256 1, ptr %sp29791, align 16
  %dup429794 = load i256, ptr %sp29724, align 16
  %sp29795 = getelementptr i256, ptr %4056, i64 -2
  store i256 %dup429794, ptr %sp29795, align 16
  %sp29797 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4054
  store i256 32, ptr %sp29797, align 16
  %4064 = sub i256 32, %dup429794
  store i256 %4064, ptr %sp29795, align 16
  store i256 256, ptr %sp29797, align 16
  %4065 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp29795, i8 17)
  %.not47924 = icmp eq i8 %4065, 0
  br i1 %.not47924, label %OP8577.SUB, label %return, !prof !6

OP8577.SUB:                                       ; preds = %OP8570.MLOAD.contd
  %a29810 = load i256, ptr %sp29795, align 16
  %sp29811 = getelementptr i256, ptr %4056, i64 -3
  %b29812 = load i256, ptr %sp29811, align 16
  %4066 = sub i256 %a29810, %b29812
  store i256 %4066, ptr %sp29811, align 16
  %4067 = xor i256 %4066, -1
  store i256 %4067, ptr %sp29791, align 16
  %4068 = add i64 %len.addr.299, -4
  %sp29821 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4068
  %b29822 = load i256, ptr %sp29821, align 16
  %4069 = and i256 %b29822, %4067
  store i256 %4069, ptr %sp29821, align 16
  %dup229826 = load i256, ptr %sp29722, align 16
  store i256 %dup229826, ptr %sp29791, align 16
  %4070 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup229826, i256 %4069, ptr %arg.ecx.addr)
  %.not47925 = icmp eq i8 %4070, 0
  br i1 %.not47925, label %OP8582.PUSH1, label %return, !prof !6

OP8582.PUSH1:                                     ; preds = %OP8577.SUB
  store i256 32, ptr %sp29821, align 16
  %b29839 = load i256, ptr %sp29722, align 16
  %4071 = add i256 %b29839, 32
  store i256 %4071, ptr %sp29722, align 16
  %swap.b29845 = load i256, ptr %sp29730, align 16
  store i256 %4071, ptr %sp29730, align 16
  store i256 %swap.b29845, ptr %sp29722, align 16
  br label %OP8586.JUMPDEST, !annotation !7

OP8586.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8582.PUSH1, %OP8549.JUMPDEST
  %len.addr.300 = phi i64 [ %4057, %OP8549.JUMPDEST ], [ %4057, %OP8582.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %4072 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.300
  %sp29850 = getelementptr i256, ptr %4072, i64 -2
  %swap.a29851 = load i256, ptr %sp29850, align 16
  %sp29852 = getelementptr i256, ptr %4072, i64 -7
  %swap.b29853 = load i256, ptr %sp29852, align 16
  store i256 %swap.a29851, ptr %sp29852, align 16
  store i256 %swap.b29853, ptr %sp29850, align 16
  %4073 = add i64 %len.addr.300, -4
  %sp29860 = getelementptr i256, ptr %4072, i64 -6
  store i256 32, ptr %sp29860, align 16
  %sp29862 = getelementptr i256, ptr %4072, i64 -5
  store i256 64, ptr %sp29862, align 16
  %mload.out.slot29866 = alloca i256, align 16
  %4074 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot29866, ptr %arg.ecx.addr)
  %.not47926 = icmp eq i8 %4074, 0
  br i1 %.not47926, label %OP8596.MLOAD.contd, label %return, !prof !6

OP8596.MLOAD.contd:                               ; preds = %OP8586.JUMPDEST
  %mload.out29867 = load i256, ptr %mload.out.slot29866, align 16
  store i256 %mload.out29867, ptr %sp29862, align 16
  %sp29872 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4073
  store i256 %mload.out29867, ptr %sp29872, align 16
  %dup429875 = load i256, ptr %sp29852, align 16
  %sp29876 = getelementptr i256, ptr %4072, i64 -3
  store i256 %dup429875, ptr %sp29876, align 16
  %sp29880 = getelementptr i256, ptr %4072, i64 -4
  %4075 = sub i256 %dup429875, %mload.out29867
  store i256 %4075, ptr %sp29880, align 16
  store i256 %mload.out29867, ptr %sp29876, align 16
  %sp29888 = getelementptr i256, ptr %4072, i64 -9
  %dup729889 = load i256, ptr %sp29888, align 16
  store i256 %dup729889, ptr %sp29850, align 16
  %sp29894 = getelementptr i256, ptr %4072, i64 -1
  store i256 %dup729889, ptr %sp29894, align 16
  %4076 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp29894, i8 17)
  %.not47927 = icmp eq i8 %4076, 0
  br i1 %.not47927, label %OP8604.ISZERO, label %return, !prof !6

OP8604.ISZERO:                                    ; preds = %OP8596.MLOAD.contd
  %a29899 = load i256, ptr %sp29894, align 16
  %4077 = icmp eq i256 %a29899, 0
  %4078 = zext i1 %4077 to i256
  store i256 %4078, ptr %sp29894, align 16
  %4079 = xor i1 %4077, true
  %4080 = zext i1 %4079 to i256
  store i256 %4080, ptr %4072, align 16
  br i1 %4077, label %OP8609.PUSH1, label %OP8612.JUMPDEST

OP8609.PUSH1:                                     ; preds = %OP8604.ISZERO
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %4072, i8 0, i64 64, i1 false)
  %4081 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %4072, i8 16)
  %.not47928 = icmp eq i8 %4081, 0
  %spec.select36659 = select i1 %.not47928, i8 16, i8 %4081, !prof !6
  br label %return

OP8612.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8604.ISZERO
  %len.addr.301 = phi i64 [ %len.addr.300, %OP8604.ISZERO ], [ %len.addr.357, %dynamic_jump_table ]
  %gas.remaining = load i64, ptr %gas.remaining.addr, align 8
  %4082 = zext i64 %gas.remaining to i256
  %4083 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.301
  %sp29923 = getelementptr i256, ptr %4083, i64 -1
  store i256 %4082, ptr %sp29923, align 16
  %4084 = add i64 %len.addr.301, -6
  %sp29925 = getelementptr i256, ptr %4083, i64 -6
  %4085 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp29925, i8 17, i8 2)
  %.not47929 = icmp eq i8 %4085, 0
  br i1 %.not47929, label %suspend, label %return, !prof !6

OP8616.ISZERO:                                    ; preds = %resume
  %4086 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len36507
  %sp29927 = getelementptr i256, ptr %4086, i64 -1
  %a29928 = load i256, ptr %sp29927, align 16
  %4087 = icmp eq i256 %a29928, 0
  %4088 = zext i1 %4087 to i256
  store i256 %4088, ptr %sp29927, align 16
  %4089 = xor i1 %4087, true
  %4090 = zext i1 %4089 to i256
  store i256 %4090, ptr %4086, align 16
  br i1 %4087, label %OP8621.RETURNDATASIZE, label %OP8628.JUMPDEST

OP8621.RETURNDATASIZE:                            ; preds = %OP8616.ISZERO
  %ecx.return_data.len.addr = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len = load i64, ptr %ecx.return_data.len.addr, align 8
  %4091 = zext i64 %ecx.return_data.len to i256
  store i256 %4091, ptr %4086, align 16
  %sp29944 = getelementptr i256, ptr %4086, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp29944, i8 0, i64 64, i1 false)
  %4092 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %4086)
  %.not47789 = icmp eq i8 %4092, 0
  br i1 %.not47789, label %OP8625.RETURNDATASIZE, label %return, !prof !6

OP8625.RETURNDATASIZE:                            ; preds = %OP8621.RETURNDATASIZE
  %ecx.return_data.len29953 = load i64, ptr %ecx.return_data.len.addr, align 8
  %4093 = zext i64 %ecx.return_data.len29953 to i256
  store i256 %4093, ptr %4086, align 16
  store i256 0, ptr %sp29944, align 16
  %4094 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %4086, i8 16)
  %.not47790 = icmp eq i8 %4094, 0
  %spec.select36660 = select i1 %.not47790, i8 16, i8 %4094, !prof !6
  br label %return

OP8628.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8616.ISZERO
  %len.addr.302 = phi i64 [ %stack_len36507, %OP8616.ISZERO ], [ %len.addr.357, %dynamic_jump_table ]
  %4095 = add i64 %len.addr.302, -3
  %4096 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.302
  %sp29965 = getelementptr i256, ptr %4096, i64 -4
  store i256 64, ptr %sp29965, align 16
  %mload.out.slot29969 = alloca i256, align 16
  %4097 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot29969, ptr %arg.ecx.addr)
  %.not47902 = icmp eq i8 %4097, 0
  br i1 %.not47902, label %OP8634.MLOAD.contd, label %return, !prof !6

OP8634.MLOAD.contd:                               ; preds = %OP8628.JUMPDEST
  %4098 = add i64 %len.addr.302, -2
  %mload.out29970 = load i256, ptr %mload.out.slot29969, align 16
  store i256 %mload.out29970, ptr %sp29965, align 16
  %ecx.return_data.len.addr29973 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len29974 = load i64, ptr %ecx.return_data.len.addr29973, align 8
  %4099 = zext i64 %ecx.return_data.len29974 to i256
  %sp29975 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4095
  store i256 %4099, ptr %sp29975, align 16
  %sp29977 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4098
  store i256 32, ptr %sp29977, align 16
  %sp29981 = getelementptr i256, ptr %4096, i64 -1
  store i256 %4099, ptr %sp29981, align 16
  %4100 = icmp ugt i64 %ecx.return_data.len29974, 31
  %4101 = zext i1 %4100 to i256
  store i256 %4101, ptr %sp29977, align 16
  br i1 %4100, label %OP8645.JUMPDEST, label %OP8642.PUSH1

OP8642.PUSH1:                                     ; preds = %OP8634.MLOAD.contd
  store i256 0, ptr %sp29977, align 16
  %sp29998 = getelementptr i256, ptr %4096, i64 -2
  store i256 0, ptr %sp29981, align 16
  %4102 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp29998, i8 16)
  %.not47903 = icmp eq i8 %4102, 0
  %spec.select36661 = select i1 %.not47903, i8 16, i8 %4102, !prof !6
  br label %return

OP8645.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8634.MLOAD.contd
  %len.addr.303 = phi i64 [ %4098, %OP8634.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %4103 = add i64 %len.addr.303, -1
  %4104 = add i64 %len.addr.303, -2
  %sp30006 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4104
  %a30007 = load i256, ptr %sp30006, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !742)
  %ecx.memory.addr.i51055 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51056 = load ptr, ptr %ecx.memory.addr.i51055, align 8, !alias.scope !742, !noalias !745
  %ecx.memory.len.addr.i51057 = getelementptr inbounds i8, ptr %ecx.memory.i51056, i64 16
  %ecx.memory.len.i51058 = load i64, ptr %ecx.memory.len.addr.i51057, align 8, !noalias !747
  %ecx.memory.last_checkpoint.addr.i51059 = getelementptr inbounds i8, ptr %ecx.memory.i51056, i64 48
  %ecx.memory.last_checkpoint.i51060 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51059, align 8, !noalias !747
  %4105 = sub i64 %ecx.memory.len.i51058, %ecx.memory.last_checkpoint.i51060
  %4106 = icmp ugt i256 %a30007, 18446744073709551615
  %4107 = trunc i256 %a30007 to i64
  %4108 = add i64 %4107, 32
  %4109 = icmp ugt i64 %4107, -33
  %4110 = or i1 %4106, %4109
  %4111 = select i1 %4110, i64 -1, i64 %4108
  %4112 = icmp ugt i64 %4111, %4105
  br i1 %4112, label %resize.i51068, label %OP8647.MLOAD.contd, !prof !5

resize.i51068:                                    ; preds = %OP8645.JUMPDEST
  %4113 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4111), !noalias !745
  %.not.i51069 = icmp eq i8 %4113, 0
  br i1 %.not.i51069, label %OP8647.MLOAD.contd, label %return, !prof !6

OP8647.MLOAD.contd:                               ; preds = %OP8645.JUMPDEST, %resize.i51068
  %ecx.memory.buffer.ptr.shared.addr.i51062 = getelementptr inbounds i8, ptr %ecx.memory.i51056, i64 8
  %ecx.memory.buffer.ptr.shared.i51063 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51062, align 8, !noalias !747
  %ecx.memory.buffer.ptr.i51064 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51063, i64 %ecx.memory.last_checkpoint.i51060
  %slot.i51065 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51064, i64 %4107
  %slot.value.i51066 = load i256, ptr %slot.i51065, align 1, !noalias !747
  %4114 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51066)
  store i256 %4114, ptr %sp30006, align 16
  %.not47905 = icmp eq i256 %slot.value.i51066, 0
  br i1 %.not47905, label %OP8650.PUSH1, label %OP8681.JUMPDEST

OP8650.PUSH1:                                     ; preds = %OP8647.MLOAD.contd
  store i256 64, ptr %sp30006, align 16
  %4115 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.303
  %sp30017 = getelementptr i256, ptr %4115, i64 -2
  %sp30019 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4103
  store i256 64, ptr %sp30019, align 16
  %ecx.memory.i51072 = load ptr, ptr %ecx.memory.addr.i51055, align 8
  %ecx.memory.len.addr.i51073 = getelementptr inbounds i8, ptr %ecx.memory.i51072, i64 16
  %ecx.memory.len.i51074 = load i64, ptr %ecx.memory.len.addr.i51073, align 8, !noalias !748
  %ecx.memory.last_checkpoint.addr.i51075 = getelementptr inbounds i8, ptr %ecx.memory.i51072, i64 48
  %ecx.memory.last_checkpoint.i51076 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51075, align 8, !noalias !748
  %4116 = sub i64 %ecx.memory.len.i51074, %ecx.memory.last_checkpoint.i51076
  %4117 = icmp ult i64 %4116, 96
  br i1 %4117, label %resize.i51084, label %OP8652.MLOAD.contd, !prof !5

resize.i51084:                                    ; preds = %OP8650.PUSH1
  %4118 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !752
  %.not.i51085 = icmp eq i8 %4118, 0
  br i1 %.not.i51085, label %resize.i51084.OP8652.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51084.OP8652.MLOAD.contd_crit_edge:       ; preds = %resize.i51084
  %ecx.memory.i51088.pre = load ptr, ptr %ecx.memory.addr.i51055, align 8, !alias.scope !753
  br label %OP8652.MLOAD.contd

OP8652.MLOAD.contd:                               ; preds = %resize.i51084.OP8652.MLOAD.contd_crit_edge, %OP8650.PUSH1
  %ecx.memory.i51088 = phi ptr [ %ecx.memory.i51088.pre, %resize.i51084.OP8652.MLOAD.contd_crit_edge ], [ %ecx.memory.i51072, %OP8650.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i51078 = getelementptr inbounds i8, ptr %ecx.memory.i51072, i64 8
  %ecx.memory.buffer.ptr.shared.i51079 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51078, align 8, !noalias !748
  %ecx.memory.buffer.ptr.i51080 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51079, i64 %ecx.memory.last_checkpoint.i51076
  %slot.i51081 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51080, i64 64
  %slot.value.i51082 = load i256, ptr %slot.i51081, align 1, !noalias !748
  %4119 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51082)
  store i256 %4119, ptr %sp30019, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %4115, align 16
  %sp30029 = getelementptr i256, ptr %4115, i64 -1
  %sp30031 = getelementptr i256, ptr %4115, i64 1
  store i256 %4119, ptr %sp30031, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !753)
  %ecx.memory.len.addr.i51089 = getelementptr inbounds i8, ptr %ecx.memory.i51088, i64 16
  %ecx.memory.len.i51090 = load i64, ptr %ecx.memory.len.addr.i51089, align 8, !noalias !753
  %ecx.memory.last_checkpoint.addr.i51091 = getelementptr inbounds i8, ptr %ecx.memory.i51088, i64 48
  %ecx.memory.last_checkpoint.i51092 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51091, align 8, !noalias !753
  %4120 = sub i64 %ecx.memory.len.i51090, %ecx.memory.last_checkpoint.i51092
  %4121 = icmp ugt i256 %4119, 18446744073709551615
  %4122 = trunc i256 %4119 to i64
  %4123 = add i64 %4122, 32
  %4124 = icmp ugt i64 %4122, -33
  %4125 = or i1 %4121, %4124
  %4126 = select i1 %4125, i64 -1, i64 %4123
  %4127 = icmp ugt i64 %4126, %4120
  br i1 %4127, label %resize.i51099, label %OP8656.PUSH1, !prof !5

resize.i51099:                                    ; preds = %OP8652.MLOAD.contd
  %4128 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4126)
  %.not.i51100 = icmp eq i8 %4128, 0
  br i1 %.not.i51100, label %OP8656.PUSH1, label %return, !prof !6

OP8656.PUSH1:                                     ; preds = %OP8652.MLOAD.contd, %resize.i51099
  %ecx.memory.buffer.ptr.shared.addr.i51094 = getelementptr inbounds i8, ptr %ecx.memory.i51088, i64 8
  %ecx.memory.buffer.ptr.shared.i51095 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51094, align 8, !noalias !753
  %ecx.memory.buffer.ptr.i51096 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51095, i64 %ecx.memory.last_checkpoint.i51092
  %slot.i51097 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51096, i64 %4122
  store i256 2692334344, ptr %slot.i51097, align 1, !noalias !753
  store i256 32, ptr %4115, align 16
  store i256 4, ptr %sp30031, align 16
  %dup330043 = load i256, ptr %sp30029, align 16
  %sp30044 = getelementptr i256, ptr %4115, i64 2
  store i256 %dup330043, ptr %sp30044, align 16
  %4129 = add i256 %dup330043, 4
  store i256 %4129, ptr %sp30031, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !756)
  %ecx.memory.i51103 = load ptr, ptr %ecx.memory.addr.i51055, align 8, !alias.scope !756
  %ecx.memory.len.addr.i51104 = getelementptr inbounds i8, ptr %ecx.memory.i51103, i64 16
  %ecx.memory.len.i51105 = load i64, ptr %ecx.memory.len.addr.i51104, align 8, !noalias !756
  %ecx.memory.last_checkpoint.addr.i51106 = getelementptr inbounds i8, ptr %ecx.memory.i51103, i64 48
  %ecx.memory.last_checkpoint.i51107 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51106, align 8, !noalias !756
  %4130 = sub i64 %ecx.memory.len.i51105, %ecx.memory.last_checkpoint.i51107
  %4131 = icmp ugt i256 %4129, 18446744073709551615
  %4132 = trunc i256 %4129 to i64
  %4133 = add i64 %4132, 32
  %4134 = icmp ugt i64 %4132, -33
  %4135 = or i1 %4131, %4134
  %4136 = select i1 %4135, i64 -1, i64 %4133
  %4137 = icmp ugt i64 %4136, %4130
  br i1 %4137, label %resize.i51114, label %OP8661.PUSH1, !prof !5

resize.i51114:                                    ; preds = %OP8656.PUSH1
  %4138 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4136)
  %.not.i51115 = icmp eq i8 %4138, 0
  br i1 %.not.i51115, label %OP8661.PUSH1, label %return, !prof !6

OP8661.PUSH1:                                     ; preds = %OP8656.PUSH1, %resize.i51114
  %ecx.memory.buffer.ptr.shared.addr.i51109 = getelementptr inbounds i8, ptr %ecx.memory.i51103, i64 8
  %ecx.memory.buffer.ptr.shared.i51110 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51109, align 8, !noalias !756
  %ecx.memory.buffer.ptr.i51111 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51110, i64 %ecx.memory.last_checkpoint.i51107
  %slot.i51112 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51111, i64 %4132
  store i256 14474011154664524427946373126085988481658748083205070504932198000989141204992, ptr %slot.i51112, align 1, !noalias !756
  store i256 26, ptr %4115, align 16
  store i256 36, ptr %sp30031, align 16
  %dup330062 = load i256, ptr %sp30029, align 16
  store i256 %dup330062, ptr %sp30044, align 16
  %4139 = add i256 %dup330062, 36
  store i256 %4139, ptr %sp30031, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !759)
  %ecx.memory.i51118 = load ptr, ptr %ecx.memory.addr.i51055, align 8, !alias.scope !759
  %ecx.memory.len.addr.i51119 = getelementptr inbounds i8, ptr %ecx.memory.i51118, i64 16
  %ecx.memory.len.i51120 = load i64, ptr %ecx.memory.len.addr.i51119, align 8, !noalias !759
  %ecx.memory.last_checkpoint.addr.i51121 = getelementptr inbounds i8, ptr %ecx.memory.i51118, i64 48
  %ecx.memory.last_checkpoint.i51122 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51121, align 8, !noalias !759
  %4140 = sub i64 %ecx.memory.len.i51120, %ecx.memory.last_checkpoint.i51122
  %4141 = icmp ugt i256 %4139, 18446744073709551615
  %4142 = trunc i256 %4139 to i64
  %4143 = add i64 %4142, 32
  %4144 = icmp ugt i64 %4142, -33
  %4145 = or i1 %4141, %4144
  %4146 = select i1 %4145, i64 -1, i64 %4143
  %4147 = icmp ugt i64 %4146, %4140
  br i1 %4147, label %resize.i51129, label %OP8666.PUSH32, !prof !5

resize.i51129:                                    ; preds = %OP8661.PUSH1
  %4148 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4146)
  %.not.i51130 = icmp eq i8 %4148, 0
  br i1 %.not.i51130, label %OP8666.PUSH32, label %return, !prof !6

OP8666.PUSH32:                                    ; preds = %OP8661.PUSH1, %resize.i51129
  %ecx.memory.buffer.ptr.shared.addr.i51124 = getelementptr inbounds i8, ptr %ecx.memory.i51118, i64 8
  %ecx.memory.buffer.ptr.shared.i51125 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51124, align 8, !noalias !759
  %ecx.memory.buffer.ptr.i51126 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51125, i64 %ecx.memory.last_checkpoint.i51122
  %slot.i51127 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51126, i64 %4142
  store i256 11760134063164926097706428164944865641347732817604119785257410875803677229056, ptr %slot.i51127, align 1, !noalias !759
  store i256 31339119881386381349152054789951873196732665252526496043224914171022224130048, ptr %4115, align 16
  store i256 68, ptr %sp30031, align 16
  %dup330081 = load i256, ptr %sp30029, align 16
  store i256 %dup330081, ptr %sp30044, align 16
  %4149 = add i256 %dup330081, 68
  store i256 %4149, ptr %sp30031, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !762)
  %ecx.memory.i51133 = load ptr, ptr %ecx.memory.addr.i51055, align 8, !alias.scope !762
  %ecx.memory.len.addr.i51134 = getelementptr inbounds i8, ptr %ecx.memory.i51133, i64 16
  %ecx.memory.len.i51135 = load i64, ptr %ecx.memory.len.addr.i51134, align 8, !noalias !762
  %ecx.memory.last_checkpoint.addr.i51136 = getelementptr inbounds i8, ptr %ecx.memory.i51133, i64 48
  %ecx.memory.last_checkpoint.i51137 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51136, align 8, !noalias !762
  %4150 = sub i64 %ecx.memory.len.i51135, %ecx.memory.last_checkpoint.i51137
  %4151 = icmp ugt i256 %4149, 18446744073709551615
  %4152 = trunc i256 %4149 to i64
  %4153 = add i64 %4152, 32
  %4154 = icmp ugt i64 %4152, -33
  %4155 = or i1 %4151, %4154
  %4156 = select i1 %4155, i64 -1, i64 %4153
  %4157 = icmp ugt i64 %4156, %4150
  br i1 %4157, label %resize.i51144, label %OP8671.SWAP1, !prof !5

resize.i51144:                                    ; preds = %OP8666.PUSH32
  %4158 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4156)
  %.not.i51145 = icmp eq i8 %4158, 0
  br i1 %.not.i51145, label %OP8671.SWAP1, label %return, !prof !6

OP8671.SWAP1:                                     ; preds = %OP8666.PUSH32, %resize.i51144
  %ecx.memory.buffer.ptr.shared.addr.i51139 = getelementptr inbounds i8, ptr %ecx.memory.i51133, i64 8
  %ecx.memory.buffer.ptr.shared.i51140 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51139, align 8, !noalias !762
  %ecx.memory.buffer.ptr.i51141 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51140, i64 %ecx.memory.last_checkpoint.i51137
  %slot.i51142 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51141, i64 %4152
  store i256 163019212046690635874416477919459471071995323204036151445834053, ptr %slot.i51142, align 1, !noalias !762
  %swap.a30096 = load i256, ptr %sp30029, align 16
  %swap.b30098 = load i256, ptr %sp30017, align 16
  store i256 %swap.a30096, ptr %sp30017, align 16
  store i256 %swap.b30098, ptr %sp30029, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !765)
  %ecx.memory.i51148 = load ptr, ptr %ecx.memory.addr.i51055, align 8, !alias.scope !765, !noalias !768
  %ecx.memory.len.addr.i51149 = getelementptr inbounds i8, ptr %ecx.memory.i51148, i64 16
  %ecx.memory.len.i51150 = load i64, ptr %ecx.memory.len.addr.i51149, align 8, !noalias !770
  %ecx.memory.last_checkpoint.addr.i51151 = getelementptr inbounds i8, ptr %ecx.memory.i51148, i64 48
  %ecx.memory.last_checkpoint.i51152 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51151, align 8, !noalias !770
  %4159 = sub i64 %ecx.memory.len.i51150, %ecx.memory.last_checkpoint.i51152
  %4160 = icmp ugt i256 %swap.b30098, 18446744073709551615
  %4161 = trunc i256 %swap.b30098 to i64
  %4162 = add i64 %4161, 32
  %4163 = icmp ugt i64 %4161, -33
  %4164 = or i1 %4160, %4163
  %4165 = select i1 %4164, i64 -1, i64 %4162
  %4166 = icmp ugt i64 %4165, %4159
  br i1 %4166, label %resize.i51160, label %OP8672.MLOAD.contd, !prof !5

resize.i51160:                                    ; preds = %OP8671.SWAP1
  %4167 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4165), !noalias !768
  %.not.i51161 = icmp eq i8 %4167, 0
  br i1 %.not.i51161, label %resize.i51160.OP8672.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51160.OP8672.MLOAD.contd_crit_edge:       ; preds = %resize.i51160
  %swap.b30109.pre = load i256, ptr %sp30017, align 16
  br label %OP8672.MLOAD.contd

OP8672.MLOAD.contd:                               ; preds = %resize.i51160.OP8672.MLOAD.contd_crit_edge, %OP8671.SWAP1
  %swap.b30109 = phi i256 [ %swap.b30109.pre, %resize.i51160.OP8672.MLOAD.contd_crit_edge ], [ %swap.a30096, %OP8671.SWAP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i51154 = getelementptr inbounds i8, ptr %ecx.memory.i51148, i64 8
  %ecx.memory.buffer.ptr.shared.i51155 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51154, align 8, !noalias !770
  %ecx.memory.buffer.ptr.i51156 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51155, i64 %ecx.memory.last_checkpoint.i51152
  %slot.i51157 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51156, i64 %4161
  %slot.value.i51158 = load i256, ptr %slot.i51157, align 1, !noalias !770
  %4168 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51158)
  store i256 %4168, ptr %sp30019, align 16
  store i256 %4168, ptr %sp30017, align 16
  store i256 %swap.b30109, ptr %sp30029, align 16
  store i256 %4168, ptr %4115, align 16
  store i256 %4168, ptr %sp30029, align 16
  store i256 %swap.b30109, ptr %4115, align 16
  %4169 = sub i256 %swap.b30109, %4168
  store i256 %4169, ptr %sp30029, align 16
  store i256 100, ptr %4115, align 16
  %4170 = add i256 %4169, 100
  store i256 %4170, ptr %sp30029, align 16
  store i256 %4170, ptr %sp30017, align 16
  store i256 %4168, ptr %sp30029, align 16
  %4171 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30017, i8 16)
  %.not47912 = icmp eq i8 %4171, 0
  %spec.select36662 = select i1 %.not47912, i8 16, i8 %4171, !prof !6
  br label %return

OP8681.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8647.MLOAD.contd
  %len.addr.304 = phi i64 [ %4104, %OP8647.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %sp30142 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.304
  store i256 18766, ptr %sp30142, align 16
  %sp30144 = getelementptr i256, ptr %sp30142, i64 -6
  %dup730145 = load i256, ptr %sp30144, align 16
  %sp30146 = getelementptr i256, ptr %sp30142, i64 1
  store i256 %dup730145, ptr %sp30146, align 16
  %sp30148 = getelementptr i256, ptr %sp30142, i64 -5
  %dup730149 = load i256, ptr %sp30148, align 16
  %sp30150 = getelementptr i256, ptr %sp30142, i64 2
  store i256 %dup730149, ptr %sp30150, align 16
  %sp30152 = getelementptr i256, ptr %sp30142, i64 -4
  br label %OP7342.JUMPDEST.sink.split

OP8688.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4172 = add i64 %len.addr.357, -7
  %sp30164 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4172
  %a30165 = load i256, ptr %sp30164, align 16
  br label %dynamic_jump_table.backedge

OP8696.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP5837.JUMPDEST
  %len.addr.305 = phi i64 [ %2693, %OP5837.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp30168 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.305
  store i256 13459, ptr %sp30168, align 16
  %sp30170 = getelementptr i256, ptr %sp30168, i64 -3
  %dup430171 = load i256, ptr %sp30170, align 16
  %sp30172 = getelementptr i256, ptr %sp30168, i64 1
  store i256 %dup430171, ptr %sp30172, align 16
  %sp30174 = getelementptr i256, ptr %sp30168, i64 -2
  %dup430175 = load i256, ptr %sp30174, align 16
  %sp30176 = getelementptr i256, ptr %sp30168, i64 2
  store i256 %dup430175, ptr %sp30176, align 16
  %sp30178 = getelementptr i256, ptr %sp30168, i64 3
  store i256 17328, ptr %sp30178, align 16
  %sp30180 = getelementptr i256, ptr %sp30168, i64 -1
  %dup530181 = load i256, ptr %sp30180, align 16
  %sp30182 = getelementptr i256, ptr %sp30168, i64 4
  store i256 %dup530181, ptr %sp30182, align 16
  %4173 = add i64 %len.addr.305, 6
  %sp30184 = getelementptr i256, ptr %sp30168, i64 5
  store i256 64, ptr %sp30184, align 16
  %ecx.memory.addr.i51163 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51164 = load ptr, ptr %ecx.memory.addr.i51163, align 8
  %ecx.memory.len.addr.i51165 = getelementptr inbounds i8, ptr %ecx.memory.i51164, i64 16
  %ecx.memory.len.i51166 = load i64, ptr %ecx.memory.len.addr.i51165, align 8, !noalias !771
  %ecx.memory.last_checkpoint.addr.i51167 = getelementptr inbounds i8, ptr %ecx.memory.i51164, i64 48
  %ecx.memory.last_checkpoint.i51168 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51167, align 8, !noalias !771
  %4174 = sub i64 %ecx.memory.len.i51166, %ecx.memory.last_checkpoint.i51168
  %4175 = icmp ult i64 %4174, 96
  br i1 %4175, label %resize.i51176, label %OP8703.MLOAD.contd, !prof !5

resize.i51176:                                    ; preds = %OP8696.JUMPDEST
  %4176 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !775
  %.not.i51177 = icmp eq i8 %4176, 0
  br i1 %.not.i51177, label %resize.i51176.OP8703.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51176.OP8703.MLOAD.contd_crit_edge:       ; preds = %resize.i51176
  %ecx.memory.i51180.pre = load ptr, ptr %ecx.memory.addr.i51163, align 8, !alias.scope !776
  br label %OP8703.MLOAD.contd

OP8703.MLOAD.contd:                               ; preds = %resize.i51176.OP8703.MLOAD.contd_crit_edge, %OP8696.JUMPDEST
  %ecx.memory.i51180 = phi ptr [ %ecx.memory.i51180.pre, %resize.i51176.OP8703.MLOAD.contd_crit_edge ], [ %ecx.memory.i51164, %OP8696.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i51170 = getelementptr inbounds i8, ptr %ecx.memory.i51164, i64 8
  %ecx.memory.buffer.ptr.shared.i51171 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51170, align 8, !noalias !771
  %ecx.memory.buffer.ptr.i51172 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51171, i64 %ecx.memory.last_checkpoint.i51168
  %slot.i51173 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51172, i64 64
  %slot.value.i51174 = load i256, ptr %slot.i51173, align 1, !noalias !771
  %4177 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51174)
  store i256 %4177, ptr %sp30184, align 16
  %4178 = add i64 %len.addr.305, 7
  %sp30194 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4173
  %4179 = add i64 %len.addr.305, 8
  %sp30196 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4178
  %4180 = add i256 %4177, 96
  store i256 %4180, ptr %sp30194, align 16
  store i256 64, ptr %sp30196, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !776)
  %ecx.memory.len.addr.i51181 = getelementptr inbounds i8, ptr %ecx.memory.i51180, i64 16
  %ecx.memory.len.i51182 = load i64, ptr %ecx.memory.len.addr.i51181, align 8, !noalias !776
  %ecx.memory.last_checkpoint.addr.i51183 = getelementptr inbounds i8, ptr %ecx.memory.i51180, i64 48
  %ecx.memory.last_checkpoint.i51184 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51183, align 8, !noalias !776
  %4181 = sub i64 %ecx.memory.len.i51182, %ecx.memory.last_checkpoint.i51184
  %4182 = icmp ult i64 %4181, 96
  br i1 %4182, label %resize.i51191, label %OP8709.DUP1, !prof !5

resize.i51191:                                    ; preds = %OP8703.MLOAD.contd
  %4183 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i51192 = icmp eq i8 %4183, 0
  br i1 %.not.i51192, label %OP8709.DUP1, label %return, !prof !6

OP8709.DUP1:                                      ; preds = %OP8703.MLOAD.contd, %resize.i51191
  %ecx.memory.buffer.ptr.shared.addr.i51186 = getelementptr inbounds i8, ptr %ecx.memory.i51180, i64 8
  %ecx.memory.buffer.ptr.shared.i51187 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51186, align 8, !noalias !776
  %ecx.memory.buffer.ptr.i51188 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51187, i64 %ecx.memory.last_checkpoint.i51184
  %slot.i51189 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51188, i64 64
  %4184 = tail call i256 @llvm.bswap.i256(i256 %4180)
  store i256 %4184, ptr %slot.i51189, align 1, !noalias !776
  %dup130212 = load i256, ptr %sp30184, align 16
  store i256 %dup130212, ptr %sp30194, align 16
  store i256 37, ptr %sp30196, align 16
  %4185 = add i64 %len.addr.305, 9
  %sp30219 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4179
  store i256 %dup130212, ptr %sp30219, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !779)
  %ecx.memory.i51195 = load ptr, ptr %ecx.memory.addr.i51163, align 8, !alias.scope !779
  %ecx.memory.len.addr.i51196 = getelementptr inbounds i8, ptr %ecx.memory.i51195, i64 16
  %ecx.memory.len.i51197 = load i64, ptr %ecx.memory.len.addr.i51196, align 8, !noalias !779
  %ecx.memory.last_checkpoint.addr.i51198 = getelementptr inbounds i8, ptr %ecx.memory.i51195, i64 48
  %ecx.memory.last_checkpoint.i51199 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51198, align 8, !noalias !779
  %4186 = sub i64 %ecx.memory.len.i51197, %ecx.memory.last_checkpoint.i51199
  %4187 = icmp ugt i256 %dup130212, 18446744073709551615
  %4188 = trunc i256 %dup130212 to i64
  %4189 = add i64 %4188, 32
  %4190 = icmp ugt i64 %4188, -33
  %4191 = or i1 %4187, %4190
  %4192 = select i1 %4191, i64 -1, i64 %4189
  %4193 = icmp ugt i64 %4192, %4186
  br i1 %4193, label %resize.i51206, label %OP8713.PUSH1, !prof !5

resize.i51206:                                    ; preds = %OP8709.DUP1
  %4194 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4192)
  %.not.i51207 = icmp eq i8 %4194, 0
  br i1 %.not.i51207, label %OP8713.PUSH1, label %return, !prof !6

OP8713.PUSH1:                                     ; preds = %OP8709.DUP1, %resize.i51206
  %ecx.memory.buffer.ptr.shared.addr.i51201 = getelementptr inbounds i8, ptr %ecx.memory.i51195, i64 8
  %ecx.memory.buffer.ptr.shared.i51202 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51201, align 8, !noalias !779
  %ecx.memory.buffer.ptr.i51203 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51202, i64 %ecx.memory.last_checkpoint.i51199
  %slot.i51204 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51203, i64 %4188
  store i256 16735575397580856369812993927036924181917927471205862771327853938643694518272, ptr %slot.i51204, align 1, !noalias !779
  %b30231 = load i256, ptr %sp30194, align 16
  %4195 = add i256 %b30231, 32
  store i256 23374, ptr %sp30196, align 16
  store i256 37, ptr %sp30194, align 16
  store i256 %4195, ptr %sp30219, align 16
  %4196 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30194)
  %.not48894 = icmp eq i8 %4196, 0
  br i1 %.not48894, label %OP8719.PUSH20, label %return, !prof !6

OP8719.PUSH20:                                    ; preds = %OP8713.PUSH1
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp30194, align 16
  %dup1130252 = load i256, ptr %sp30170, align 16
  %4197 = and i256 %dup1130252, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp30196, align 16
  store i256 %4197, ptr %sp30219, align 16
  %4198 = add i64 %len.addr.305, 10
  %sp30270 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4185
  store i256 0, ptr %sp30270, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !782)
  %ecx.memory.i51210 = load ptr, ptr %ecx.memory.addr.i51163, align 8, !alias.scope !782
  %ecx.memory.len.addr.i51211 = getelementptr inbounds i8, ptr %ecx.memory.i51210, i64 16
  %ecx.memory.len.i51212 = load i64, ptr %ecx.memory.len.addr.i51211, align 8, !noalias !782
  %ecx.memory.last_checkpoint.addr.i51213 = getelementptr inbounds i8, ptr %ecx.memory.i51210, i64 48
  %ecx.memory.last_checkpoint.i51214 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51213, align 8, !noalias !782
  %4199 = sub i64 %ecx.memory.len.i51212, %ecx.memory.last_checkpoint.i51214
  %4200 = icmp ult i64 %4199, 32
  br i1 %4200, label %resize.i51220, label %OP8727.PUSH1, !prof !5

resize.i51220:                                    ; preds = %OP8719.PUSH20
  %4201 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i51221 = icmp eq i8 %4201, 0
  br i1 %.not.i51221, label %OP8727.PUSH1, label %return, !prof !6

OP8727.PUSH1:                                     ; preds = %OP8719.PUSH20, %resize.i51220
  %ecx.memory.buffer.ptr.shared.addr.i51216 = getelementptr inbounds i8, ptr %ecx.memory.i51210, i64 8
  %ecx.memory.buffer.ptr.shared.i51217 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51216, align 8, !noalias !782
  %ecx.memory.buffer.ptr.i51218 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51217, i64 %ecx.memory.last_checkpoint.i51214
  %4202 = tail call i256 @llvm.bswap.i256(i256 %4197)
  store i256 %4202, ptr %ecx.memory.buffer.ptr.i51218, align 1, !noalias !782
  store i256 32, ptr %sp30219, align 16
  store i256 10, ptr %sp30270, align 16
  %sp30288 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4198
  store i256 32, ptr %sp30288, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !785)
  %ecx.memory.i51224 = load ptr, ptr %ecx.memory.addr.i51163, align 8, !alias.scope !785
  %ecx.memory.len.addr.i51225 = getelementptr inbounds i8, ptr %ecx.memory.i51224, i64 16
  %ecx.memory.len.i51226 = load i64, ptr %ecx.memory.len.addr.i51225, align 8, !noalias !785
  %ecx.memory.last_checkpoint.addr.i51227 = getelementptr inbounds i8, ptr %ecx.memory.i51224, i64 48
  %ecx.memory.last_checkpoint.i51228 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51227, align 8, !noalias !785
  %4203 = sub i64 %ecx.memory.len.i51226, %ecx.memory.last_checkpoint.i51228
  %4204 = icmp ult i64 %4203, 64
  br i1 %4204, label %resize.i51235, label %OP8732.PUSH1, !prof !5

resize.i51235:                                    ; preds = %OP8727.PUSH1
  %4205 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i51236 = icmp eq i8 %4205, 0
  br i1 %.not.i51236, label %OP8732.PUSH1, label %return, !prof !6

OP8732.PUSH1:                                     ; preds = %OP8727.PUSH1, %resize.i51235
  %ecx.memory.buffer.ptr.shared.addr.i51230 = getelementptr inbounds i8, ptr %ecx.memory.i51224, i64 8
  %ecx.memory.buffer.ptr.shared.i51231 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51230, align 8, !noalias !785
  %ecx.memory.buffer.ptr.i51232 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51231, i64 %ecx.memory.last_checkpoint.i51228
  %slot.i51233 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51232, i64 32
  store i256 4523128485832663883733241601901871400518358776001584532791311875309106626560, ptr %slot.i51233, align 1, !noalias !785
  %4206 = add i64 %len.addr.305, 11
  store i256 64, ptr %sp30270, align 16
  store i256 64, ptr %sp30288, align 16
  %sp30301 = getelementptr i256, ptr %sp30168, i64 7
  %dup430302 = load i256, ptr %sp30301, align 16
  %sp30303 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4206
  store i256 %dup430302, ptr %sp30303, align 16
  %4207 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30288)
  %.not48897 = icmp eq i8 %4207, 0
  br i1 %.not48897, label %OP8736.SWAP4, label %return, !prof !6

OP8736.SWAP4:                                     ; preds = %OP8732.PUSH1
  %swap.a30308 = load i256, ptr %sp30288, align 16
  %sp30309 = getelementptr i256, ptr %sp30168, i64 6
  %swap.b30310 = load i256, ptr %sp30309, align 16
  store i256 %swap.a30308, ptr %sp30309, align 16
  %dup13 = load i256, ptr %sp30174, align 16
  %4208 = and i256 %dup13, %swap.b30310
  store i256 %4208, ptr %sp30288, align 16
  %dup430322 = load i256, ptr %sp30301, align 16
  store i256 %dup430322, ptr %sp30303, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !788)
  %ecx.memory.i51239 = load ptr, ptr %ecx.memory.addr.i51163, align 8, !alias.scope !788
  %ecx.memory.len.addr.i51240 = getelementptr inbounds i8, ptr %ecx.memory.i51239, i64 16
  %ecx.memory.len.i51241 = load i64, ptr %ecx.memory.len.addr.i51240, align 8, !noalias !788
  %ecx.memory.last_checkpoint.addr.i51242 = getelementptr inbounds i8, ptr %ecx.memory.i51239, i64 48
  %ecx.memory.last_checkpoint.i51243 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51242, align 8, !noalias !788
  %4209 = sub i64 %ecx.memory.len.i51241, %ecx.memory.last_checkpoint.i51243
  %4210 = icmp ugt i256 %dup430322, 18446744073709551615
  %4211 = trunc i256 %dup430322 to i64
  %4212 = add i64 %4211, 32
  %4213 = icmp ugt i64 %4211, -33
  %4214 = or i1 %4210, %4213
  %4215 = select i1 %4214, i64 -1, i64 %4212
  %4216 = icmp ugt i64 %4215, %4209
  br i1 %4216, label %resize.i51250, label %OP8741.SWAP3, !prof !5

resize.i51250:                                    ; preds = %OP8736.SWAP4
  %4217 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4215)
  %.not.i51251 = icmp eq i8 %4217, 0
  br i1 %.not.i51251, label %OP8741.SWAP3, label %return, !prof !6

OP8741.SWAP3:                                     ; preds = %OP8736.SWAP4, %resize.i51250
  %ecx.memory.buffer.ptr.shared.addr.i51245 = getelementptr inbounds i8, ptr %ecx.memory.i51239, i64 8
  %ecx.memory.buffer.ptr.shared.i51246 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51245, align 8, !noalias !788
  %ecx.memory.buffer.ptr.i51247 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51246, i64 %ecx.memory.last_checkpoint.i51243
  %slot.i51248 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51247, i64 %4211
  %4218 = tail call i256 @llvm.bswap.i256(i256 %4208)
  store i256 %4218, ptr %slot.i51248, align 1, !noalias !788
  %swap.a30331 = load i256, ptr %sp30270, align 16
  %swap.b30333 = load i256, ptr %sp30309, align 16
  store i256 %swap.a30331, ptr %sp30309, align 16
  %swap.b30338 = load i256, ptr %sp30219, align 16
  store i256 %swap.b30333, ptr %sp30219, align 16
  store i256 %swap.b30338, ptr %sp30270, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !791)
  %ecx.memory.i51254 = load ptr, ptr %ecx.memory.addr.i51163, align 8, !alias.scope !791
  %ecx.memory.len.addr.i51255 = getelementptr inbounds i8, ptr %ecx.memory.i51254, i64 16
  %ecx.memory.len.i51256 = load i64, ptr %ecx.memory.len.addr.i51255, align 8, !noalias !791
  %ecx.memory.last_checkpoint.addr.i51257 = getelementptr inbounds i8, ptr %ecx.memory.i51254, i64 48
  %ecx.memory.last_checkpoint.i51258 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51257, align 8, !noalias !791
  %4219 = sub i64 %ecx.memory.len.i51256, %ecx.memory.last_checkpoint.i51258
  %4220 = icmp ugt i256 %swap.b30338, 18446744073709551615
  %4221 = trunc i256 %swap.b30338 to i64
  %4222 = add i64 %4221, 32
  %4223 = icmp ugt i64 %4221, -33
  %4224 = or i1 %4220, %4223
  %4225 = select i1 %4224, i64 -1, i64 %4222
  %4226 = icmp ugt i64 %4225, %4219
  br i1 %4226, label %resize.i51265, label %OP8744.KECCAK256, !prof !5

resize.i51265:                                    ; preds = %OP8741.SWAP3
  %4227 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4225)
  %.not.i51266 = icmp eq i8 %4227, 0
  br i1 %.not.i51266, label %OP8744.KECCAK256, label %return, !prof !6

OP8744.KECCAK256:                                 ; preds = %OP8741.SWAP3, %resize.i51265
  %ecx.memory.buffer.ptr.shared.addr.i51260 = getelementptr inbounds i8, ptr %ecx.memory.i51254, i64 8
  %ecx.memory.buffer.ptr.shared.i51261 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51260, align 8, !noalias !791
  %ecx.memory.buffer.ptr.i51262 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51261, i64 %ecx.memory.last_checkpoint.i51258
  %slot.i51263 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51262, i64 %4221
  %4228 = tail call i256 @llvm.bswap.i256(i256 %swap.b30333)
  store i256 %4228, ptr %slot.i51263, align 1, !noalias !791
  %4229 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30194)
  %.not48900 = icmp eq i8 %4229, 0
  br i1 %.not48900, label %OP8745.SLOAD, label %return, !prof !6

OP8745.SLOAD:                                     ; preds = %OP8744.KECCAK256
  %4230 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30194, i8 17)
  %.not48901 = icmp eq i8 %4230, 0
  br i1 %.not48901, label %OP8746.SWAP2, label %return, !prof !6

OP8746.SWAP2:                                     ; preds = %OP8745.SLOAD
  %swap.a30350 = load i256, ptr %sp30194, align 16
  %swap.b30352 = load i256, ptr %sp30182, align 16
  store i256 %swap.a30350, ptr %sp30182, align 16
  %swap.b30357 = load i256, ptr %sp30184, align 16
  store i256 %swap.b30352, ptr %sp30184, align 16
  store i256 %swap.b30357, ptr %sp30194, align 16
  br label %OP9689.JUMPDEST

OP8750.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6296.JUMPDEST
  %len.addr.306 = phi i64 [ %2885, %OP6296.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %4231 = add i64 %len.addr.306, 1
  %sp30361 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.306
  store i256 64, ptr %sp30361, align 16
  %4232 = add i64 %len.addr.306, 2
  %sp30365 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4231
  store i256 64, ptr %sp30365, align 16
  %mload.out.slot30369 = alloca i256, align 16
  %4233 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot30369, ptr %arg.ecx.addr)
  %.not48814 = icmp eq i8 %4233, 0
  br i1 %.not48814, label %OP8753.MLOAD.contd, label %return, !prof !6

OP8753.MLOAD.contd:                               ; preds = %OP8750.JUMPDEST
  %mload.out30370 = load i256, ptr %mload.out.slot30369, align 16
  store i256 %mload.out30370, ptr %sp30365, align 16
  %4234 = add i64 %len.addr.306, 3
  %sp30373 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4232
  %4235 = add i64 %len.addr.306, 4
  %sp30375 = getelementptr i256, ptr %sp30361, i64 -2
  %dup530376 = load i256, ptr %sp30375, align 16
  %sp30377 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4234
  %4236 = and i256 %dup530376, 1461501637330902918203684832716283019655932542975
  store i256 %4236, ptr %sp30373, align 16
  %sp30389 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4235
  store i256 %mload.out30370, ptr %sp30389, align 16
  %4237 = add i256 %mload.out30370, 36
  store i256 %4237, ptr %sp30377, align 16
  %4238 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4237, i256 %4236, ptr %arg.ecx.addr)
  %.not48815 = icmp eq i8 %4238, 0
  br i1 %.not48815, label %OP8761.PUSH1, label %return, !prof !6

OP8761.PUSH1:                                     ; preds = %OP8753.MLOAD.contd
  store i256 68, ptr %sp30373, align 16
  %dup330409 = load i256, ptr %sp30365, align 16
  %4239 = add i256 %dup330409, 68
  %sp30418 = getelementptr i256, ptr %sp30361, i64 -1
  %dup530419 = load i256, ptr %sp30418, align 16
  store i256 %dup530419, ptr %sp30377, align 16
  store i256 %4239, ptr %sp30389, align 16
  %4240 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4239, i256 %dup530419, ptr %arg.ecx.addr)
  %.not48816 = icmp eq i8 %4240, 0
  br i1 %.not48816, label %OP8768.DUP3, label %return, !prof !6

OP8768.DUP3:                                      ; preds = %OP8761.PUSH1
  %dup330433 = load i256, ptr %sp30361, align 16
  store i256 %dup330433, ptr %sp30377, align 16
  %mload.out.slot30438 = alloca i256, align 16
  %4241 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup330433, ptr %mload.out.slot30438, ptr %arg.ecx.addr)
  %.not48817 = icmp eq i8 %4241, 0
  br i1 %.not48817, label %OP8769.MLOAD.contd, label %return, !prof !6

OP8769.MLOAD.contd:                               ; preds = %OP8768.DUP3
  %mload.out30439 = load i256, ptr %mload.out.slot30438, align 16
  %sp30446 = getelementptr i256, ptr %sp30361, i64 1
  %dup430447 = load i256, ptr %sp30446, align 16
  %sp30448 = getelementptr i256, ptr %sp30361, i64 5
  store i256 %dup430447, ptr %sp30448, align 16
  %4242 = sub i256 %dup430447, %mload.out30439
  %swap.b30464 = load i256, ptr %sp30373, align 16
  store i256 %mload.out30439, ptr %sp30373, align 16
  %4243 = add i256 %swap.b30464, %4242
  store i256 %4243, ptr %sp30377, align 16
  store i256 %mload.out30439, ptr %sp30389, align 16
  %4244 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out30439, i256 %4243, ptr %arg.ecx.addr)
  %.not48818 = icmp eq i8 %4244, 0
  br i1 %.not48818, label %OP8778.PUSH1, label %return, !prof !6

OP8778.PUSH1:                                     ; preds = %OP8769.MLOAD.contd
  %swap.b30486 = load i256, ptr %sp30373, align 16
  %swap.b30491 = load i256, ptr %sp30365, align 16
  store i256 %swap.b30491, ptr %sp30377, align 16
  %4245 = add i256 %swap.b30491, 100
  store i256 %4245, ptr %sp30365, align 16
  %swap.b30507 = load i256, ptr %sp30361, align 16
  store i256 %swap.b30486, ptr %sp30361, align 16
  store i256 %swap.b30507, ptr %sp30373, align 16
  %4246 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b30507, i256 %4245, ptr %arg.ecx.addr)
  %.not48819 = icmp eq i8 %4246, 0
  br i1 %.not48819, label %OP8785.PUSH1, label %return, !prof !6

OP8785.PUSH1:                                     ; preds = %OP8778.PUSH1
  %dup230517 = load i256, ptr %sp30361, align 16
  %4247 = add i256 %dup230517, 32
  store i256 %4247, ptr %sp30365, align 16
  store i256 %4247, ptr %sp30373, align 16
  %mload.out.slot30532 = alloca i256, align 16
  %4248 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %4247, ptr %mload.out.slot30532, ptr %arg.ecx.addr)
  %.not48820 = icmp eq i8 %4248, 0
  br i1 %.not48820, label %OP8789.MLOAD.contd, label %return, !prof !6

OP8789.MLOAD.contd:                               ; preds = %OP8785.PUSH1
  %mload.out30533 = load i256, ptr %mload.out.slot30532, align 16
  %4249 = and i256 %mload.out30533, 26959946667150639794667015087019630673637144422540572481103610249215
  store i256 -39341301877480157781710804024396230103289065588583741745104145964028735258624, ptr %sp30377, align 16
  %4250 = or disjoint i256 %4249, -39341301877480157781710804024396230103289065588583741745104145964028735258624
  %swap.b30555 = load i256, ptr %sp30365, align 16
  store i256 %4250, ptr %sp30365, align 16
  store i256 %swap.b30555, ptr %sp30373, align 16
  %4251 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b30555, i256 %4250, ptr %arg.ecx.addr)
  %.not48821 = icmp eq i8 %4251, 0
  br i1 %.not48821, label %OP8796.PUSH2, label %return, !prof !6

OP8796.PUSH2:                                     ; preds = %OP8789.MLOAD.contd
  %swap.b30567 = load i256, ptr %sp30361, align 16
  store i256 13459, ptr %sp30361, align 16
  %sp30569 = getelementptr i256, ptr %sp30361, i64 -3
  %dup530570 = load i256, ptr %sp30569, align 16
  store i256 %dup530570, ptr %sp30365, align 16
  store i256 %swap.b30567, ptr %sp30373, align 16
  br label %OP9811.JUMPDEST

OP8802.JUMPDEST:                                  ; preds = %dynamic_jump_table, %__revmc_ir_builtin_mstore.exit51023.thread, %OP6352.JUMPDEST
  %len.addr.307 = phi i64 [ %2906, %OP6352.JUMPDEST ], [ %3828, %__revmc_ir_builtin_mstore.exit51023.thread ], [ %len.addr.357, %dynamic_jump_table ]
  %sp30580 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.307
  store i256 19017, ptr %sp30580, align 16
  %sp30582 = getelementptr i256, ptr %sp30580, i64 -3
  %dup430583 = load i256, ptr %sp30582, align 16
  %sp30584 = getelementptr i256, ptr %sp30580, i64 1
  store i256 %dup430583, ptr %sp30584, align 16
  %sp30586 = getelementptr i256, ptr %sp30580, i64 -2
  br label %OP9910.JUMPDEST.sink.split

OP8808.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp30592 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 19139, ptr %sp30592, align 16
  %sp30594 = getelementptr i256, ptr %sp30592, i64 -3
  %dup430595 = load i256, ptr %sp30594, align 16
  %sp30596 = getelementptr i256, ptr %sp30592, i64 1
  store i256 %dup430595, ptr %sp30596, align 16
  %4252 = add i64 %len.addr.357, 3
  %sp30598 = getelementptr i256, ptr %sp30592, i64 2
  store i256 9744234862922869596605421539056514765632049317526109944573892473740930413609, ptr %sp30598, align 16
  %4253 = add i64 %len.addr.357, 4
  %sp30600 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4252
  store i256 %dup430595, ptr %sp30600, align 16
  %sp30612 = getelementptr i256, ptr %sp30592, i64 -2
  %dup630613 = load i256, ptr %sp30612, align 16
  %sp30614 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4253
  store i256 %dup630613, ptr %sp30614, align 16
  %4254 = add i64 %len.addr.357, 6
  %sp30616 = getelementptr i256, ptr %sp30592, i64 5
  store i256 64, ptr %sp30616, align 16
  %mload.out.slot30620 = alloca i256, align 16
  %4255 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot30620, ptr %arg.ecx.addr)
  %.not47893 = icmp eq i8 %4255, 0
  br i1 %.not47893, label %OP8817.MLOAD.contd, label %return, !prof !6

OP8817.MLOAD.contd:                               ; preds = %OP8808.JUMPDEST
  %mload.out30621 = load i256, ptr %mload.out.slot30620, align 16
  store i256 %mload.out30621, ptr %sp30616, align 16
  %4256 = add i64 %len.addr.357, 7
  %sp30624 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4254
  store i256 32, ptr %sp30624, align 16
  %4257 = add i256 %mload.out30621, 32
  store i256 %4257, ptr %sp30616, align 16
  store i256 %4257, ptr %sp30624, align 16
  %dup530637 = load i256, ptr %sp30598, align 16
  %sp30638 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4256
  store i256 %dup530637, ptr %sp30638, align 16
  %sp30642 = getelementptr i256, ptr %sp30592, i64 8
  store i256 %4257, ptr %sp30642, align 16
  %4258 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4257, i256 %dup530637, ptr %arg.ecx.addr)
  %.not47894 = icmp eq i8 %4258, 0
  br i1 %.not47894, label %OP8824.PUSH1, label %return, !prof !6

OP8824.PUSH1:                                     ; preds = %OP8817.MLOAD.contd
  store i256 32, ptr %sp30638, align 16
  %b30654 = load i256, ptr %sp30624, align 16
  %4259 = add i256 %b30654, 32
  store i256 %4259, ptr %sp30624, align 16
  %sp30657 = getelementptr i256, ptr %sp30592, i64 3
  %dup430658 = load i256, ptr %sp30657, align 16
  store i256 %dup430658, ptr %sp30638, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp30642, align 16
  %4260 = and i256 %dup430658, 1461501637330902918203684832716283019655932542975
  store i256 %4260, ptr %sp30638, align 16
  store i256 %4259, ptr %sp30642, align 16
  %4261 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4259, i256 %4260, ptr %arg.ecx.addr)
  %.not47895 = icmp eq i8 %4261, 0
  br i1 %.not47895, label %OP8831.PUSH1, label %return, !prof !6

OP8831.PUSH1:                                     ; preds = %OP8824.PUSH1
  store i256 32, ptr %sp30638, align 16
  %b30683 = load i256, ptr %sp30624, align 16
  %4262 = add i256 %b30683, 32
  store i256 %4262, ptr %sp30624, align 16
  %dup330687 = load i256, ptr %sp30614, align 16
  store i256 %dup330687, ptr %sp30638, align 16
  store i256 %4262, ptr %sp30642, align 16
  %4263 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4262, i256 %dup330687, ptr %arg.ecx.addr)
  %.not47896 = icmp eq i8 %4263, 0
  br i1 %.not47896, label %OP8836.PUSH1, label %return, !prof !6

OP8836.PUSH1:                                     ; preds = %OP8831.PUSH1
  store i256 32, ptr %sp30638, align 16
  %b30704 = load i256, ptr %sp30624, align 16
  %4264 = add i256 %b30704, 32
  store i256 %4264, ptr %sp30624, align 16
  %swap.b30710 = load i256, ptr %sp30598, align 16
  store i256 %4264, ptr %sp30598, align 16
  store i256 %swap.b30710, ptr %sp30624, align 16
  store i256 64, ptr %sp30600, align 16
  %mload.out.slot30720 = alloca i256, align 16
  %4265 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot30720, ptr %arg.ecx.addr)
  %.not47897 = icmp eq i8 %4265, 0
  br i1 %.not47897, label %OP8844.MLOAD.contd, label %return, !prof !6

OP8844.MLOAD.contd:                               ; preds = %OP8836.PUSH1
  %mload.out30721 = load i256, ptr %mload.out.slot30720, align 16
  store i256 %mload.out30721, ptr %sp30600, align 16
  store i256 32, ptr %sp30614, align 16
  store i256 %mload.out30721, ptr %sp30616, align 16
  %dup430731 = load i256, ptr %sp30598, align 16
  store i256 %dup430731, ptr %sp30624, align 16
  %4266 = sub i256 %dup430731, %mload.out30721
  store i256 %4266, ptr %sp30616, align 16
  %4267 = add i256 %4266, -32
  store i256 %4267, ptr %sp30614, align 16
  store i256 %mload.out30721, ptr %sp30616, align 16
  %4268 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out30721, i256 %4267, ptr %arg.ecx.addr)
  %.not47898 = icmp eq i8 %4268, 0
  br i1 %.not47898, label %OP8852.SWAP1, label %return, !prof !6

OP8852.SWAP1:                                     ; preds = %OP8844.MLOAD.contd
  %swap.a30756 = load i256, ptr %sp30600, align 16
  %swap.b30758 = load i256, ptr %sp30598, align 16
  store i256 %swap.a30756, ptr %sp30598, align 16
  store i256 %swap.b30758, ptr %sp30600, align 16
  store i256 64, ptr %sp30614, align 16
  %4269 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 64, i256 %swap.b30758, ptr %arg.ecx.addr)
  %.not47899 = icmp eq i8 %4269, 0
  br i1 %.not47899, label %OP8855.DUP1, label %return, !prof !6

OP8855.DUP1:                                      ; preds = %OP8852.SWAP1
  %dup130768 = load i256, ptr %sp30598, align 16
  store i256 %dup130768, ptr %sp30600, align 16
  %mload.out.slot30773 = alloca i256, align 16
  %4270 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup130768, ptr %mload.out.slot30773, ptr %arg.ecx.addr)
  %.not47900 = icmp eq i8 %4270, 0
  br i1 %.not47900, label %OP8856.MLOAD.contd, label %return, !prof !6

OP8856.MLOAD.contd:                               ; preds = %OP8855.DUP1
  %mload.out30774 = load i256, ptr %mload.out.slot30773, align 16
  store i256 %mload.out30774, ptr %sp30600, align 16
  %swap.b30780 = load i256, ptr %sp30598, align 16
  store i256 %mload.out30774, ptr %sp30598, align 16
  store i256 %swap.b30780, ptr %sp30600, align 16
  store i256 32, ptr %sp30614, align 16
  %4271 = add i256 %swap.b30780, 32
  store i256 %4271, ptr %sp30600, align 16
  %4272 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30598)
  %.not47901 = icmp eq i8 %4272, 0
  br i1 %.not47901, label %OP9406.JUMPDEST.sink.split, label %return, !prof !6

OP8864.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp30798 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp30798, align 16
  %4273 = add i64 %len.addr.357, 2
  %sp30800 = getelementptr i256, ptr %sp30798, i64 -3
  %dup430801 = load i256, ptr %sp30800, align 16
  %sp30802 = getelementptr i256, ptr %sp30798, i64 1
  store i256 %dup430801, ptr %sp30802, align 16
  %4274 = and i256 %dup430801, 1461501637330902918203684832716283019655932542975
  store i256 %4274, ptr %sp30798, align 16
  store i256 0, ptr %sp30802, align 16
  %4275 = add i64 %len.addr.357, 3
  %sp30814 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4273
  store i256 %4274, ptr %sp30814, align 16
  %4276 = add i64 %len.addr.357, 4
  %sp30818 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4275
  store i256 0, ptr %sp30818, align 16
  %4277 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 0, i256 %4274, ptr %arg.ecx.addr)
  %.not47883 = icmp eq i8 %4277, 0
  br i1 %.not47883, label %OP8872.PUSH1, label %return, !prof !6

OP8872.PUSH1:                                     ; preds = %OP8864.JUMPDEST
  store i256 16, ptr %sp30814, align 16
  store i256 32, ptr %sp30818, align 16
  store i256 32, ptr %sp30814, align 16
  store i256 16, ptr %sp30818, align 16
  %4278 = add i64 %len.addr.357, 5
  %sp30836 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4276
  store i256 32, ptr %sp30836, align 16
  %4279 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 32, i256 16, ptr %arg.ecx.addr)
  %.not47884 = icmp eq i8 %4279, 0
  br i1 %.not47884, label %OP8877.PUSH1, label %return, !prof !6

OP8877.PUSH1:                                     ; preds = %OP8872.PUSH1
  store i256 64, ptr %sp30818, align 16
  store i256 64, ptr %sp30836, align 16
  %dup430850 = load i256, ptr %sp30802, align 16
  %sp30851 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4278
  store i256 %dup430850, ptr %sp30851, align 16
  %4280 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30836)
  %.not47885 = icmp eq i8 %4280, 0
  br i1 %.not47885, label %OP8881.DUP7, label %return, !prof !6

OP8881.DUP7:                                      ; preds = %OP8877.PUSH1
  %sp30855 = getelementptr i256, ptr %sp30798, i64 -2
  %dup730856 = load i256, ptr %sp30855, align 16
  store i256 %dup730856, ptr %sp30851, align 16
  %dup530860 = load i256, ptr %sp30802, align 16
  %sp30861 = getelementptr i256, ptr %sp30798, i64 6
  store i256 %dup530860, ptr %sp30861, align 16
  %4281 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup530860, i256 %dup730856, ptr %arg.ecx.addr)
  %.not47886 = icmp eq i8 %4281, 0
  br i1 %.not47886, label %OP8884.SWAP1, label %return, !prof !6

OP8884.SWAP1:                                     ; preds = %OP8881.DUP7
  %swap.a30869 = load i256, ptr %sp30836, align 16
  %swap.b30871 = load i256, ptr %sp30818, align 16
  store i256 %swap.a30869, ptr %sp30818, align 16
  store i256 %swap.b30871, ptr %sp30836, align 16
  %swap.b30876 = load i256, ptr %sp30814, align 16
  store i256 %swap.b30871, ptr %sp30814, align 16
  store i256 %swap.b30876, ptr %sp30836, align 16
  %4282 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b30876, i256 %swap.a30869, ptr %arg.ecx.addr)
  %.not47887 = icmp eq i8 %4282, 0
  br i1 %.not47887, label %OP8887.DUP1, label %return, !prof !6

OP8887.DUP1:                                      ; preds = %OP8884.SWAP1
  %dup130884 = load i256, ptr %sp30814, align 16
  store i256 %dup130884, ptr %sp30818, align 16
  %dup330888 = load i256, ptr %sp30802, align 16
  store i256 %dup330888, ptr %sp30836, align 16
  %4283 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30818)
  %.not47888 = icmp eq i8 %4283, 0
  br i1 %.not47888, label %OP8890.DUP1, label %return, !prof !6

OP8890.DUP1:                                      ; preds = %OP8887.DUP1
  %dup130894 = load i256, ptr %sp30818, align 16
  store i256 %dup130894, ptr %sp30836, align 16
  %4284 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30836, i8 17)
  %.not47889 = icmp eq i8 %4284, 0
  br i1 %.not47889, label %OP8892.PUSH32, label %return, !prof !6

OP8892.PUSH32:                                    ; preds = %OP8890.DUP1
  store i256 -256, ptr %sp30851, align 16
  %b30904 = load i256, ptr %sp30836, align 16
  %4285 = and i256 %b30904, -256
  store i256 %4285, ptr %sp30836, align 16
  store i256 1, ptr %sp30851, align 16
  %4286 = or disjoint i256 %4285, 1
  store i256 %4286, ptr %sp30836, align 16
  %swap.b30918 = load i256, ptr %sp30818, align 16
  store i256 %4286, ptr %sp30818, align 16
  store i256 %swap.b30918, ptr %sp30836, align 16
  %4287 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30818, i8 17)
  %.not47890 = icmp eq i8 %4287, 0
  br i1 %.not47890, label %OP8898.MLOAD, label %return, !prof !6

OP8898.MLOAD:                                     ; preds = %OP8892.PUSH32
  %a30923 = load i256, ptr %sp30814, align 16
  %mload.out.slot30924 = alloca i256, align 16
  %4288 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a30923, ptr %mload.out.slot30924, ptr %arg.ecx.addr)
  %.not47891 = icmp eq i8 %4288, 0
  br i1 %.not47891, label %OP8898.MLOAD.contd, label %return, !prof !6

OP8898.MLOAD.contd:                               ; preds = %OP8898.MLOAD
  %mload.out30925 = load i256, ptr %mload.out.slot30924, align 16
  store i256 %mload.out30925, ptr %sp30814, align 16
  %dup530929 = load i256, ptr %sp30855, align 16
  store i256 %dup530929, ptr %sp30818, align 16
  %swap.b30935 = load i256, ptr %sp30798, align 16
  store i256 %dup530929, ptr %sp30798, align 16
  store i256 %swap.b30935, ptr %sp30818, align 16
  %swap.b30940 = load i256, ptr %sp30802, align 16
  store i256 %swap.b30935, ptr %sp30802, align 16
  store i256 %swap.b30940, ptr %sp30818, align 16
  store i256 13055722962485480087293408467427329105843183648152182062115053789242811825537, ptr %sp30836, align 16
  store i256 13055722962485480087293408467427329105843183648152182062115053789242811825537, ptr %sp30814, align 16
  store i256 %mload.out30925, ptr %sp30836, align 16
  %4289 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30798, i8 3)
  %.not47892 = icmp eq i8 %4289, 0
  br i1 %.not47892, label %OP8905.POP, label %return, !prof !6

OP8905.POP:                                       ; preds = %OP8898.MLOAD.contd
  %4290 = add i64 %len.addr.357, -4
  %sp30954 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4290
  %a30955 = load i256, ptr %sp30954, align 16
  br label %dynamic_jump_table.backedge

OP8909.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9116.SWAP1, %OP6504.JUMPDEST
  %len.addr.308 = phi i64 [ %2967, %OP6504.JUMPDEST ], [ %4388, %OP9116.SWAP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp30958 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.308
  store i256 19285, ptr %sp30958, align 16
  br label %OP9306.JUMPDEST.sink.split

OP8917.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4291 = add i64 %len.addr.357, 1
  %sp30978 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 64, ptr %sp30978, align 16
  %4292 = add i64 %len.addr.357, 2
  %sp30982 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4291
  store i256 64, ptr %sp30982, align 16
  %mload.out.slot30986 = alloca i256, align 16
  %4293 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot30986, ptr %arg.ecx.addr)
  %.not47870 = icmp eq i8 %4293, 0
  br i1 %.not47870, label %OP8920.MLOAD.contd, label %return, !prof !6

OP8920.MLOAD.contd:                               ; preds = %OP8917.JUMPDEST
  %mload.out30987 = load i256, ptr %mload.out.slot30986, align 16
  store i256 %mload.out30987, ptr %sp30982, align 16
  %4294 = add i64 %len.addr.357, 3
  %sp30990 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4292
  store i256 56306633564104940265533113178924840914391875988752422239815283474255924830823, ptr %sp30990, align 16
  %4295 = add i64 %len.addr.357, 4
  %sp30992 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4294
  store i256 32, ptr %sp30992, align 16
  %4296 = add i64 %len.addr.357, 5
  %sp30996 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4295
  store i256 32, ptr %sp30996, align 16
  %sp30998 = getelementptr i256, ptr %sp30978, i64 1
  %sp31000 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4296
  store i256 %mload.out30987, ptr %sp31000, align 16
  %4297 = add i256 %mload.out30987, 32
  store i256 %4297, ptr %sp30996, align 16
  store i256 %4297, ptr %sp30990, align 16
  store i256 56306633564104940265533113178924840914391875988752422239815283474255924830823, ptr %sp30996, align 16
  store i256 56306633564104940265533113178924840914391875988752422239815283474255924830823, ptr %sp30992, align 16
  store i256 32, ptr %sp30996, align 16
  store i256 32, ptr %sp30990, align 16
  store i256 %4297, ptr %sp30996, align 16
  %4298 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4297, i256 56306633564104940265533113178924840914391875988752422239815283474255924830823, ptr %arg.ecx.addr)
  %.not47871 = icmp eq i8 %4298, 0
  br i1 %.not47871, label %OP8930.PUSH20, label %return, !prof !6

OP8930.PUSH20:                                    ; preds = %OP8920.MLOAD.contd
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp30992, align 16
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp30996, align 16
  %sp31034 = getelementptr i256, ptr %sp30978, i64 -7
  %dup1231035 = load i256, ptr %sp31034, align 16
  store i256 %dup1231035, ptr %sp31000, align 16
  %4299 = and i256 %dup1231035, 1461501637330902918203684832716283019655932542975
  store i256 %4299, ptr %sp30996, align 16
  %dup431045 = load i256, ptr %sp30998, align 16
  store i256 %dup431045, ptr %sp31000, align 16
  %dup631049 = load i256, ptr %sp30978, align 16
  %sp31050 = getelementptr i256, ptr %sp30978, i64 6
  store i256 %dup631049, ptr %sp31050, align 16
  %4300 = add i256 %dup631049, %dup431045
  store i256 %4300, ptr %sp31000, align 16
  %4301 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4300, i256 %4299, ptr %arg.ecx.addr)
  %.not47872 = icmp eq i8 %4301, 0
  br i1 %.not47872, label %OP8938.DUP10, label %return, !prof !6

OP8938.DUP10:                                     ; preds = %OP8930.PUSH20
  %sp31063 = getelementptr i256, ptr %sp30978, i64 -6
  %dup1031064 = load i256, ptr %sp31063, align 16
  store i256 %dup1031064, ptr %sp30996, align 16
  %b31070 = load i256, ptr %sp30992, align 16
  %4302 = and i256 %b31070, %dup1031064
  store i256 %4302, ptr %sp30992, align 16
  store i256 96, ptr %sp30996, align 16
  %dup431076 = load i256, ptr %sp30998, align 16
  store i256 %dup431076, ptr %sp31000, align 16
  %4303 = add i256 %dup431076, 96
  store i256 %4303, ptr %sp30996, align 16
  %4304 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4303, i256 %4302, ptr %arg.ecx.addr)
  %.not47873 = icmp eq i8 %4304, 0
  br i1 %.not47873, label %OP8944.PUSH1, label %return, !prof !6

OP8944.PUSH1:                                     ; preds = %OP8938.DUP10
  store i256 128, ptr %sp30992, align 16
  %dup331093 = load i256, ptr %sp30982, align 16
  store i256 %dup331093, ptr %sp30996, align 16
  %4305 = add i256 %dup331093, 128
  store i256 %4305, ptr %sp30992, align 16
  %sp31102 = getelementptr i256, ptr %sp30978, i64 -5
  %dup931103 = load i256, ptr %sp31102, align 16
  store i256 %dup931103, ptr %sp30996, align 16
  store i256 %dup931103, ptr %sp30992, align 16
  store i256 %4305, ptr %sp30996, align 16
  %4306 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4305, i256 %dup931103, ptr %arg.ecx.addr)
  %.not47874 = icmp eq i8 %4306, 0
  br i1 %.not47874, label %OP8950.PUSH1, label %return, !prof !6

OP8950.PUSH1:                                     ; preds = %OP8944.PUSH1
  store i256 160, ptr %sp30992, align 16
  %dup331119 = load i256, ptr %sp30982, align 16
  store i256 %dup331119, ptr %sp30996, align 16
  %4307 = add i256 %dup331119, 160
  store i256 %4307, ptr %sp30992, align 16
  %sp31128 = getelementptr i256, ptr %sp30978, i64 -4
  %dup831129 = load i256, ptr %sp31128, align 16
  store i256 %dup831129, ptr %sp30996, align 16
  store i256 %dup831129, ptr %sp30992, align 16
  store i256 %4307, ptr %sp30996, align 16
  %4308 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4307, i256 %dup831129, ptr %arg.ecx.addr)
  %.not47875 = icmp eq i8 %4308, 0
  br i1 %.not47875, label %OP8956.PUSH1, label %return, !prof !6

OP8956.PUSH1:                                     ; preds = %OP8950.PUSH1
  store i256 192, ptr %sp30992, align 16
  %dup331145 = load i256, ptr %sp30982, align 16
  store i256 %dup331145, ptr %sp30996, align 16
  %4309 = add i256 %dup331145, 192
  store i256 %4309, ptr %sp30992, align 16
  %sp31154 = getelementptr i256, ptr %sp30978, i64 -3
  %dup731155 = load i256, ptr %sp31154, align 16
  store i256 %dup731155, ptr %sp30996, align 16
  store i256 %dup731155, ptr %sp30992, align 16
  store i256 %4309, ptr %sp30996, align 16
  %4310 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4309, i256 %dup731155, ptr %arg.ecx.addr)
  %.not47876 = icmp eq i8 %4310, 0
  br i1 %.not47876, label %OP8962.PUSH1, label %return, !prof !6

OP8962.PUSH1:                                     ; preds = %OP8956.PUSH1
  store i256 224, ptr %sp30992, align 16
  store i256 224, ptr %sp30996, align 16
  %dup431175 = load i256, ptr %sp30998, align 16
  store i256 %dup431175, ptr %sp31000, align 16
  %4311 = add i256 %dup431175, 224
  store i256 %4311, ptr %sp30996, align 16
  %sp31184 = getelementptr i256, ptr %sp30978, i64 -2
  %dup731185 = load i256, ptr %sp31184, align 16
  store i256 %dup731185, ptr %sp31000, align 16
  store i256 %dup731185, ptr %sp30996, align 16
  store i256 %4311, ptr %sp31000, align 16
  %4312 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4311, i256 %dup731185, ptr %arg.ecx.addr)
  %.not47877 = icmp eq i8 %4312, 0
  br i1 %.not47877, label %OP8969.DUP4, label %return, !prof !6

OP8969.DUP4:                                      ; preds = %OP8962.PUSH1
  %dup431199 = load i256, ptr %sp30978, align 16
  store i256 %dup431199, ptr %sp30996, align 16
  %mload.out.slot31204 = alloca i256, align 16
  %4313 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup431199, ptr %mload.out.slot31204, ptr %arg.ecx.addr)
  %.not47878 = icmp eq i8 %4313, 0
  br i1 %.not47878, label %OP8970.MLOAD.contd, label %return, !prof !6

OP8970.MLOAD.contd:                               ; preds = %OP8969.DUP4
  %mload.out31205 = load i256, ptr %mload.out.slot31204, align 16
  store i256 %mload.out31205, ptr %sp30996, align 16
  store i256 %mload.out31205, ptr %sp31000, align 16
  %dup531213 = load i256, ptr %sp30998, align 16
  store i256 %dup531213, ptr %sp31050, align 16
  %4314 = sub i256 %dup531213, %mload.out31205
  store i256 %4314, ptr %sp31000, align 16
  store i256 %4314, ptr %sp30996, align 16
  store i256 %mload.out31205, ptr %sp31000, align 16
  %swap.b31230 = load i256, ptr %sp30992, align 16
  store i256 %mload.out31205, ptr %sp30992, align 16
  store i256 %swap.b31230, ptr %sp31000, align 16
  %4315 = add i256 %swap.b31230, %4314
  store i256 %4315, ptr %sp30996, align 16
  store i256 %mload.out31205, ptr %sp31000, align 16
  %4316 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out31205, i256 %4315, ptr %arg.ecx.addr)
  %.not47879 = icmp eq i8 %4316, 0
  br i1 %.not47879, label %OP8979.PUSH2, label %return, !prof !6

OP8979.PUSH2:                                     ; preds = %OP8970.MLOAD.contd
  store i256 256, ptr %sp30996, align 16
  %swap.b31252 = load i256, ptr %sp30992, align 16
  store i256 256, ptr %sp30992, align 16
  store i256 %swap.b31252, ptr %sp30996, align 16
  %swap.b31257 = load i256, ptr %sp30998, align 16
  store i256 %swap.b31252, ptr %sp30998, align 16
  store i256 %swap.b31257, ptr %sp30996, align 16
  %4317 = add i256 %swap.b31257, 256
  store i256 %4317, ptr %sp30992, align 16
  %swap.b31268 = load i256, ptr %sp30990, align 16
  store i256 %4317, ptr %sp30990, align 16
  store i256 %swap.b31268, ptr %sp30992, align 16
  %swap.b31273 = load i256, ptr %sp30978, align 16
  store i256 %swap.b31268, ptr %sp30978, align 16
  store i256 %swap.b31273, ptr %sp30992, align 16
  %4318 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %swap.b31273, i256 %4317, ptr %arg.ecx.addr)
  %.not47880 = icmp eq i8 %4318, 0
  br i1 %.not47880, label %OP8986.DUP1, label %return, !prof !6

OP8986.DUP1:                                      ; preds = %OP8979.PUSH2
  %dup131281 = load i256, ptr %sp30982, align 16
  store i256 %dup131281, ptr %sp30990, align 16
  %mload.out.slot31286 = alloca i256, align 16
  %4319 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup131281, ptr %mload.out.slot31286, ptr %arg.ecx.addr)
  %.not47881 = icmp eq i8 %4319, 0
  br i1 %.not47881, label %OP8987.MLOAD.contd, label %return, !prof !6

OP8987.MLOAD.contd:                               ; preds = %OP8986.DUP1
  %mload.out31287 = load i256, ptr %mload.out.slot31286, align 16
  store i256 %mload.out31287, ptr %sp30990, align 16
  %swap.b31293 = load i256, ptr %sp30978, align 16
  store i256 %mload.out31287, ptr %sp30978, align 16
  store i256 %swap.b31293, ptr %sp30990, align 16
  %b31298 = load i256, ptr %sp30982, align 16
  %4320 = add i256 %b31298, %swap.b31293
  store i256 %4320, ptr %sp30982, align 16
  %4321 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp30978)
  %.not47882 = icmp eq i8 %4321, 0
  br i1 %.not47882, label %OP8991.PUSH2, label %return, !prof !6

OP8991.PUSH2:                                     ; preds = %OP8987.MLOAD.contd
  store i256 18045, ptr %sp30982, align 16
  %swap.b31308 = load i256, ptr %sp30978, align 16
  store i256 18045, ptr %sp30978, align 16
  store i256 %swap.b31308, ptr %sp30982, align 16
  %dup931311 = load i256, ptr %sp31034, align 16
  store i256 %dup931311, ptr %sp30990, align 16
  store i256 %dup931311, ptr %sp30982, align 16
  store i256 %swap.b31308, ptr %sp30990, align 16
  br label %OP9406.JUMPDEST.sink.split

OP8998.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6557.JUMPDEST
  %len.addr.309 = phi i64 [ %2986, %OP6557.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp31325 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.309
  store i256 14139, ptr %sp31325, align 16
  %sp31327 = getelementptr i256, ptr %sp31325, i64 -7
  %dup831328 = load i256, ptr %sp31327, align 16
  %sp31329 = getelementptr i256, ptr %sp31325, i64 1
  store i256 %dup831328, ptr %sp31329, align 16
  %sp31331 = getelementptr i256, ptr %sp31325, i64 -6
  %dup831332 = load i256, ptr %sp31331, align 16
  %sp31333 = getelementptr i256, ptr %sp31325, i64 2
  store i256 %dup831332, ptr %sp31333, align 16
  %sp31335 = getelementptr i256, ptr %sp31325, i64 -5
  %dup831336 = load i256, ptr %sp31335, align 16
  %sp31337 = getelementptr i256, ptr %sp31325, i64 3
  store i256 %dup831336, ptr %sp31337, align 16
  %sp31339 = getelementptr i256, ptr %sp31325, i64 -4
  %dup831340 = load i256, ptr %sp31339, align 16
  %sp31341 = getelementptr i256, ptr %sp31325, i64 4
  store i256 %dup831340, ptr %sp31341, align 16
  %4322 = add i64 %len.addr.309, 6
  %sp31343 = getelementptr i256, ptr %sp31325, i64 -2
  %dup731344 = load i256, ptr %sp31343, align 16
  %sp31345 = getelementptr i256, ptr %sp31325, i64 5
  store i256 %dup731344, ptr %sp31345, align 16
  %4323 = add i64 %len.addr.309, 7
  %sp31347 = getelementptr i256, ptr %sp31325, i64 -1
  %dup731348 = load i256, ptr %sp31347, align 16
  %sp31349 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4322
  store i256 %dup731348, ptr %sp31349, align 16
  %sp31351 = getelementptr i256, ptr %sp31325, i64 -3
  %dup1031352 = load i256, ptr %sp31351, align 16
  %sp31353 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4323
  store i256 %dup1031352, ptr %sp31353, align 16
  %4324 = add i64 %len.addr.309, 9
  %sp31355 = getelementptr i256, ptr %sp31325, i64 8
  store i256 64, ptr %sp31355, align 16
  %ecx.memory.addr.i51268 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51269 = load ptr, ptr %ecx.memory.addr.i51268, align 8
  %ecx.memory.len.addr.i51270 = getelementptr inbounds i8, ptr %ecx.memory.i51269, i64 16
  %ecx.memory.len.i51271 = load i64, ptr %ecx.memory.len.addr.i51270, align 8, !noalias !794
  %ecx.memory.last_checkpoint.addr.i51272 = getelementptr inbounds i8, ptr %ecx.memory.i51269, i64 48
  %ecx.memory.last_checkpoint.i51273 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51272, align 8, !noalias !794
  %4325 = sub i64 %ecx.memory.len.i51271, %ecx.memory.last_checkpoint.i51273
  %4326 = icmp ult i64 %4325, 96
  br i1 %4326, label %resize.i51281, label %OP9008.MLOAD.contd, !prof !5

resize.i51281:                                    ; preds = %OP8998.JUMPDEST
  %4327 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !798
  %.not.i51282 = icmp eq i8 %4327, 0
  br i1 %.not.i51282, label %resize.i51281.OP9008.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51281.OP9008.MLOAD.contd_crit_edge:       ; preds = %resize.i51281
  %dup531376.pre = load i256, ptr %sp31345, align 16
  %ecx.memory.i51285.pre = load ptr, ptr %ecx.memory.addr.i51268, align 8, !alias.scope !799
  br label %OP9008.MLOAD.contd

OP9008.MLOAD.contd:                               ; preds = %resize.i51281.OP9008.MLOAD.contd_crit_edge, %OP8998.JUMPDEST
  %ecx.memory.i51285 = phi ptr [ %ecx.memory.i51285.pre, %resize.i51281.OP9008.MLOAD.contd_crit_edge ], [ %ecx.memory.i51269, %OP8998.JUMPDEST ]
  %dup531376 = phi i256 [ %dup531376.pre, %resize.i51281.OP9008.MLOAD.contd_crit_edge ], [ %dup731344, %OP8998.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i51275 = getelementptr inbounds i8, ptr %ecx.memory.i51269, i64 8
  %ecx.memory.buffer.ptr.shared.i51276 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51275, align 8, !noalias !794
  %ecx.memory.buffer.ptr.i51277 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51276, i64 %ecx.memory.last_checkpoint.i51273
  %slot.i51278 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51277, i64 64
  %slot.value.i51279 = load i256, ptr %slot.i51278, align 1, !noalias !794
  %4328 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51279)
  %4329 = add i64 %len.addr.309, 10
  %sp31363 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4324
  %4330 = add i256 %4328, 32
  store i256 %4330, ptr %sp31355, align 16
  store i256 %4330, ptr %sp31363, align 16
  %sp31377 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4329
  store i256 %dup531376, ptr %sp31377, align 16
  %sp31381 = getelementptr i256, ptr %sp31325, i64 11
  store i256 %4330, ptr %sp31381, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !799)
  %ecx.memory.len.addr.i51286 = getelementptr inbounds i8, ptr %ecx.memory.i51285, i64 16
  %ecx.memory.len.i51287 = load i64, ptr %ecx.memory.len.addr.i51286, align 8, !noalias !799
  %ecx.memory.last_checkpoint.addr.i51288 = getelementptr inbounds i8, ptr %ecx.memory.i51285, i64 48
  %ecx.memory.last_checkpoint.i51289 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51288, align 8, !noalias !799
  %4331 = sub i64 %ecx.memory.len.i51287, %ecx.memory.last_checkpoint.i51289
  %4332 = icmp ugt i256 %4330, 18446744073709551615
  %4333 = trunc i256 %4330 to i64
  %4334 = add i64 %4333, 32
  %4335 = icmp ugt i64 %4333, -33
  %4336 = or i1 %4332, %4335
  %4337 = select i1 %4336, i64 -1, i64 %4334
  %4338 = icmp ugt i64 %4337, %4331
  br i1 %4338, label %resize.i51296, label %OP9015.PUSH1, !prof !5

resize.i51296:                                    ; preds = %OP9008.MLOAD.contd
  %4339 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4337)
  %.not.i51297 = icmp eq i8 %4339, 0
  br i1 %.not.i51297, label %OP9015.PUSH1, label %return, !prof !6

OP9015.PUSH1:                                     ; preds = %OP9008.MLOAD.contd, %resize.i51296
  %ecx.memory.buffer.ptr.shared.addr.i51291 = getelementptr inbounds i8, ptr %ecx.memory.i51285, i64 8
  %ecx.memory.buffer.ptr.shared.i51292 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51291, align 8, !noalias !799
  %ecx.memory.buffer.ptr.i51293 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51292, i64 %ecx.memory.last_checkpoint.i51289
  %slot.i51294 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51293, i64 %4333
  %4340 = tail call i256 @llvm.bswap.i256(i256 %dup531376)
  store i256 %4340, ptr %slot.i51294, align 1, !noalias !799
  %b31393 = load i256, ptr %sp31363, align 16
  %4341 = add i256 %b31393, 32
  store i256 %4341, ptr %sp31363, align 16
  %sp31396 = getelementptr i256, ptr %sp31325, i64 6
  %dup431397 = load i256, ptr %sp31396, align 16
  store i256 %dup431397, ptr %sp31377, align 16
  store i256 %4341, ptr %sp31381, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !802)
  %ecx.memory.i51300 = load ptr, ptr %ecx.memory.addr.i51268, align 8, !alias.scope !802
  %ecx.memory.len.addr.i51301 = getelementptr inbounds i8, ptr %ecx.memory.i51300, i64 16
  %ecx.memory.len.i51302 = load i64, ptr %ecx.memory.len.addr.i51301, align 8, !noalias !802
  %ecx.memory.last_checkpoint.addr.i51303 = getelementptr inbounds i8, ptr %ecx.memory.i51300, i64 48
  %ecx.memory.last_checkpoint.i51304 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51303, align 8, !noalias !802
  %4342 = sub i64 %ecx.memory.len.i51302, %ecx.memory.last_checkpoint.i51304
  %4343 = icmp ugt i256 %4341, 18446744073709551615
  %4344 = trunc i256 %4341 to i64
  %4345 = add i64 %4344, 32
  %4346 = icmp ugt i64 %4344, -33
  %4347 = or i1 %4343, %4346
  %4348 = select i1 %4347, i64 -1, i64 %4345
  %4349 = icmp ugt i64 %4348, %4342
  br i1 %4349, label %resize.i51311, label %OP9020.PUSH1, !prof !5

resize.i51311:                                    ; preds = %OP9015.PUSH1
  %4350 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4348)
  %.not.i51312 = icmp eq i8 %4350, 0
  br i1 %.not.i51312, label %OP9020.PUSH1, label %return, !prof !6

OP9020.PUSH1:                                     ; preds = %OP9015.PUSH1, %resize.i51311
  %ecx.memory.buffer.ptr.shared.addr.i51306 = getelementptr inbounds i8, ptr %ecx.memory.i51300, i64 8
  %ecx.memory.buffer.ptr.shared.i51307 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51306, align 8, !noalias !802
  %ecx.memory.buffer.ptr.i51308 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51307, i64 %ecx.memory.last_checkpoint.i51304
  %slot.i51309 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51308, i64 %4344
  %4351 = tail call i256 @llvm.bswap.i256(i256 %dup431397)
  store i256 %4351, ptr %slot.i51309, align 1, !noalias !802
  %b31414 = load i256, ptr %sp31363, align 16
  %4352 = add i256 %b31414, 32
  store i256 %4352, ptr %sp31363, align 16
  %dup331418 = load i256, ptr %sp31353, align 16
  %4353 = and i256 %dup331418, 255
  %4354 = shl i256 %dup331418, 248
  store i256 %4354, ptr %sp31377, align 16
  store i256 %4352, ptr %sp31381, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !805)
  %ecx.memory.i51315 = load ptr, ptr %ecx.memory.addr.i51268, align 8, !alias.scope !805
  %ecx.memory.len.addr.i51316 = getelementptr inbounds i8, ptr %ecx.memory.i51315, i64 16
  %ecx.memory.len.i51317 = load i64, ptr %ecx.memory.len.addr.i51316, align 8, !noalias !805
  %ecx.memory.last_checkpoint.addr.i51318 = getelementptr inbounds i8, ptr %ecx.memory.i51315, i64 48
  %ecx.memory.last_checkpoint.i51319 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51318, align 8, !noalias !805
  %4355 = sub i64 %ecx.memory.len.i51317, %ecx.memory.last_checkpoint.i51319
  %4356 = icmp ugt i256 %4352, 18446744073709551615
  %4357 = trunc i256 %4352 to i64
  %4358 = add i64 %4357, 32
  %4359 = icmp ugt i64 %4357, -33
  %4360 = or i1 %4356, %4359
  %4361 = select i1 %4360, i64 -1, i64 %4358
  %4362 = icmp ugt i64 %4361, %4355
  br i1 %4362, label %resize.i51326, label %OP9029.PUSH1, !prof !5

resize.i51326:                                    ; preds = %OP9020.PUSH1
  %4363 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4361)
  %.not.i51327 = icmp eq i8 %4363, 0
  br i1 %.not.i51327, label %OP9029.PUSH1, label %return, !prof !6

OP9029.PUSH1:                                     ; preds = %OP9020.PUSH1, %resize.i51326
  %ecx.memory.buffer.ptr.shared.addr.i51321 = getelementptr inbounds i8, ptr %ecx.memory.i51315, i64 8
  %ecx.memory.buffer.ptr.shared.i51322 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51321, align 8, !noalias !805
  %ecx.memory.buffer.ptr.i51323 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51322, i64 %ecx.memory.last_checkpoint.i51319
  %slot.i51324 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51323, i64 %4357
  store i256 %4353, ptr %slot.i51324, align 1, !noalias !805
  store i256 1, ptr %sp31377, align 16
  %b31451 = load i256, ptr %sp31363, align 16
  %4364 = add i256 %b31451, 1
  %swap.b31457 = load i256, ptr %sp31345, align 16
  store i256 %4364, ptr %sp31345, align 16
  store i256 %swap.b31457, ptr %sp31363, align 16
  store i256 64, ptr %sp31349, align 16
  %ecx.memory.i51330 = load ptr, ptr %ecx.memory.addr.i51268, align 8
  %ecx.memory.len.addr.i51331 = getelementptr inbounds i8, ptr %ecx.memory.i51330, i64 16
  %ecx.memory.len.i51332 = load i64, ptr %ecx.memory.len.addr.i51331, align 8, !noalias !808
  %ecx.memory.last_checkpoint.addr.i51333 = getelementptr inbounds i8, ptr %ecx.memory.i51330, i64 48
  %ecx.memory.last_checkpoint.i51334 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51333, align 8, !noalias !808
  %4365 = sub i64 %ecx.memory.len.i51332, %ecx.memory.last_checkpoint.i51334
  %4366 = icmp ult i64 %4365, 96
  br i1 %4366, label %resize.i51342, label %OP9037.MLOAD.contd, !prof !5

resize.i51342:                                    ; preds = %OP9029.PUSH1
  %4367 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !812
  %.not.i51343 = icmp eq i8 %4367, 0
  br i1 %.not.i51343, label %resize.i51342.OP9037.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51342.OP9037.MLOAD.contd_crit_edge:       ; preds = %resize.i51342
  %dup431478.pre = load i256, ptr %sp31345, align 16
  %ecx.memory.i51346.pre = load ptr, ptr %ecx.memory.addr.i51268, align 8, !alias.scope !813
  br label %OP9037.MLOAD.contd

OP9037.MLOAD.contd:                               ; preds = %resize.i51342.OP9037.MLOAD.contd_crit_edge, %OP9029.PUSH1
  %ecx.memory.i51346 = phi ptr [ %ecx.memory.i51346.pre, %resize.i51342.OP9037.MLOAD.contd_crit_edge ], [ %ecx.memory.i51330, %OP9029.PUSH1 ]
  %dup431478 = phi i256 [ %dup431478.pre, %resize.i51342.OP9037.MLOAD.contd_crit_edge ], [ %4364, %OP9029.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i51336 = getelementptr inbounds i8, ptr %ecx.memory.i51330, i64 8
  %ecx.memory.buffer.ptr.shared.i51337 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51336, align 8, !noalias !808
  %ecx.memory.buffer.ptr.i51338 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51337, i64 %ecx.memory.last_checkpoint.i51334
  %slot.i51339 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51338, i64 64
  %slot.value.i51340 = load i256, ptr %slot.i51339, align 1, !noalias !808
  %4368 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51340)
  store i256 %4368, ptr %sp31349, align 16
  store i256 %dup431478, ptr %sp31363, align 16
  %4369 = sub i256 %dup431478, %4368
  %4370 = add i256 %4369, -32
  store i256 %4370, ptr %sp31353, align 16
  store i256 %4368, ptr %sp31355, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !813)
  %ecx.memory.len.addr.i51347 = getelementptr inbounds i8, ptr %ecx.memory.i51346, i64 16
  %ecx.memory.len.i51348 = load i64, ptr %ecx.memory.len.addr.i51347, align 8, !noalias !813
  %ecx.memory.last_checkpoint.addr.i51349 = getelementptr inbounds i8, ptr %ecx.memory.i51346, i64 48
  %ecx.memory.last_checkpoint.i51350 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51349, align 8, !noalias !813
  %4371 = sub i64 %ecx.memory.len.i51348, %ecx.memory.last_checkpoint.i51350
  %4372 = icmp ugt i256 %4368, 18446744073709551615
  %4373 = trunc i256 %4368 to i64
  %4374 = add i64 %4373, 32
  %4375 = icmp ugt i64 %4373, -33
  %4376 = or i1 %4372, %4375
  %4377 = select i1 %4376, i64 -1, i64 %4374
  %4378 = icmp ugt i64 %4377, %4371
  br i1 %4378, label %resize.i51357, label %OP9045.SWAP1, !prof !5

resize.i51357:                                    ; preds = %OP9037.MLOAD.contd
  %4379 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4377)
  %.not.i51358 = icmp eq i8 %4379, 0
  br i1 %.not.i51358, label %OP9045.SWAP1, label %return, !prof !6

OP9045.SWAP1:                                     ; preds = %OP9037.MLOAD.contd, %resize.i51357
  %ecx.memory.buffer.ptr.shared.addr.i51352 = getelementptr inbounds i8, ptr %ecx.memory.i51346, i64 8
  %ecx.memory.buffer.ptr.shared.i51353 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51352, align 8, !noalias !813
  %ecx.memory.buffer.ptr.i51354 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51353, i64 %ecx.memory.last_checkpoint.i51350
  %slot.i51355 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51354, i64 %4373
  %4380 = tail call i256 @llvm.bswap.i256(i256 %4370)
  store i256 %4380, ptr %slot.i51355, align 1, !noalias !813
  %swap.a31503 = load i256, ptr %sp31349, align 16
  %swap.b31505 = load i256, ptr %sp31345, align 16
  store i256 %swap.a31503, ptr %sp31345, align 16
  store i256 %swap.b31505, ptr %sp31349, align 16
  store i256 64, ptr %sp31353, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !816)
  %ecx.memory.i51361 = load ptr, ptr %ecx.memory.addr.i51268, align 8, !alias.scope !816
  %ecx.memory.len.addr.i51362 = getelementptr inbounds i8, ptr %ecx.memory.i51361, i64 16
  %ecx.memory.len.i51363 = load i64, ptr %ecx.memory.len.addr.i51362, align 8, !noalias !816
  %ecx.memory.last_checkpoint.addr.i51364 = getelementptr inbounds i8, ptr %ecx.memory.i51361, i64 48
  %ecx.memory.last_checkpoint.i51365 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51364, align 8, !noalias !816
  %4381 = sub i64 %ecx.memory.len.i51363, %ecx.memory.last_checkpoint.i51365
  %4382 = icmp ult i64 %4381, 96
  br i1 %4382, label %resize.i51372, label %__revmc_ir_builtin_mstore.exit51374.thread, !prof !5

resize.i51372:                                    ; preds = %OP9045.SWAP1
  %4383 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i51373 = icmp eq i8 %4383, 0
  br i1 %.not.i51373, label %__revmc_ir_builtin_mstore.exit51374.thread, label %return, !prof !6

__revmc_ir_builtin_mstore.exit51374.thread:       ; preds = %OP9045.SWAP1, %resize.i51372
  %ecx.memory.buffer.ptr.shared.addr.i51367 = getelementptr inbounds i8, ptr %ecx.memory.i51361, i64 8
  %ecx.memory.buffer.ptr.shared.i51368 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51367, align 8, !noalias !816
  %ecx.memory.buffer.ptr.i51369 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51368, i64 %ecx.memory.last_checkpoint.i51365
  %slot.i51370 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51369, i64 64
  %4384 = tail call i256 @llvm.bswap.i256(i256 %swap.b31505)
  store i256 %4384, ptr %slot.i51370, align 1, !noalias !816
  br label %OP8327.JUMPDEST

OP9050.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp31516 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 0, ptr %sp31516, align 16
  %sp31518 = getelementptr i256, ptr %sp31516, i64 1
  store i256 %5076, ptr %sp31518, align 16
  %sp31520 = getelementptr i256, ptr %sp31516, i64 2
  store i256 19511, ptr %sp31520, align 16
  %sp31522 = getelementptr i256, ptr %sp31516, i64 -2
  %dup531523 = load i256, ptr %sp31522, align 16
  %sp31524 = getelementptr i256, ptr %sp31516, i64 3
  store i256 %dup531523, ptr %sp31524, align 16
  %sp31526 = getelementptr i256, ptr %sp31516, i64 -1
  %dup531527 = load i256, ptr %sp31526, align 16
  %sp31528 = getelementptr i256, ptr %sp31516, i64 4
  store i256 %dup531527, ptr %sp31528, align 16
  %4385 = add i64 %len.addr.357, 6
  %sp31532 = getelementptr i256, ptr %sp31516, i64 5
  store i256 %5076, ptr %sp31532, align 16
  br label %OP9228.JUMPDEST

OP9059.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4386 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp31536 = getelementptr i256, ptr %4386, i64 -1
  %swap.a31537 = load i256, ptr %sp31536, align 16
  %sp31538 = getelementptr i256, ptr %4386, i64 -6
  %swap.b31539 = load i256, ptr %sp31538, align 16
  store i256 %swap.a31537, ptr %sp31538, align 16
  store i256 %swap.b31539, ptr %sp31536, align 16
  %sp31543 = getelementptr i256, ptr %4386, i64 -5
  %swap.b31544 = load i256, ptr %sp31543, align 16
  store i256 %swap.b31539, ptr %sp31543, align 16
  store i256 %swap.b31544, ptr %sp31536, align 16
  %4387 = add i64 %len.addr.357, -5
  br label %dynamic_jump_table.backedge

OP9067.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP6868.JUMPDEST
  %len.addr.310 = phi i64 [ %3102, %OP6868.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp31554 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.310
  store i256 11631, ptr %sp31554, align 16
  %sp31556 = getelementptr i256, ptr %sp31554, i64 -9
  %dup1031557 = load i256, ptr %sp31556, align 16
  %sp31558 = getelementptr i256, ptr %sp31554, i64 1
  store i256 %dup1031557, ptr %sp31558, align 16
  %sp31560 = getelementptr i256, ptr %sp31554, i64 -8
  %dup1031561 = load i256, ptr %sp31560, align 16
  %sp31562 = getelementptr i256, ptr %sp31554, i64 2
  store i256 %dup1031561, ptr %sp31562, align 16
  %sp31564 = getelementptr i256, ptr %sp31554, i64 -7
  %dup1031565 = load i256, ptr %sp31564, align 16
  %sp31566 = getelementptr i256, ptr %sp31554, i64 3
  store i256 %dup1031565, ptr %sp31566, align 16
  %sp31568 = getelementptr i256, ptr %sp31554, i64 -6
  %dup1031569 = load i256, ptr %sp31568, align 16
  %sp31570 = getelementptr i256, ptr %sp31554, i64 4
  store i256 %dup1031569, ptr %sp31570, align 16
  %sp31572 = getelementptr i256, ptr %sp31554, i64 -5
  %dup1031573 = load i256, ptr %sp31572, align 16
  %sp31574 = getelementptr i256, ptr %sp31554, i64 5
  store i256 %dup1031573, ptr %sp31574, align 16
  %sp31576 = getelementptr i256, ptr %sp31554, i64 -4
  %dup1031577 = load i256, ptr %sp31576, align 16
  %sp31578 = getelementptr i256, ptr %sp31554, i64 6
  store i256 %dup1031577, ptr %sp31578, align 16
  %4388 = add i64 %len.addr.310, 8
  %sp31580 = getelementptr i256, ptr %sp31554, i64 -2
  %dup931581 = load i256, ptr %sp31580, align 16
  %sp31582 = getelementptr i256, ptr %sp31554, i64 7
  store i256 %dup931581, ptr %sp31582, align 16
  %4389 = add i64 %len.addr.310, 9
  %sp31584 = getelementptr i256, ptr %sp31554, i64 -1
  %dup931585 = load i256, ptr %sp31584, align 16
  %sp31586 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4388
  store i256 %dup931585, ptr %sp31586, align 16
  %sp31588 = getelementptr i256, ptr %sp31554, i64 -3
  %dup1231589 = load i256, ptr %sp31588, align 16
  %sp31590 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4389
  store i256 %dup1231589, ptr %sp31590, align 16
  %4390 = add i64 %len.addr.310, 11
  %sp31592 = getelementptr i256, ptr %sp31554, i64 10
  store i256 64, ptr %sp31592, align 16
  %mload.out.slot31596 = alloca i256, align 16
  %4391 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot31596, ptr %arg.ecx.addr)
  %.not48042 = icmp eq i8 %4391, 0
  br i1 %.not48042, label %OP9079.MLOAD.contd, label %return, !prof !6

OP9079.MLOAD.contd:                               ; preds = %OP9067.JUMPDEST
  %mload.out31597 = load i256, ptr %mload.out.slot31596, align 16
  store i256 %mload.out31597, ptr %sp31592, align 16
  %4392 = add i64 %len.addr.310, 12
  %sp31600 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4390
  store i256 32, ptr %sp31600, align 16
  %4393 = add i256 %mload.out31597, 32
  store i256 %4393, ptr %sp31592, align 16
  store i256 %4393, ptr %sp31600, align 16
  %dup531613 = load i256, ptr %sp31582, align 16
  %sp31614 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4392
  store i256 %dup531613, ptr %sp31614, align 16
  %sp31618 = getelementptr i256, ptr %sp31554, i64 13
  store i256 %4393, ptr %sp31618, align 16
  %4394 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4393, i256 %dup531613, ptr %arg.ecx.addr)
  %.not48043 = icmp eq i8 %4394, 0
  br i1 %.not48043, label %OP9086.PUSH1, label %return, !prof !6

OP9086.PUSH1:                                     ; preds = %OP9079.MLOAD.contd
  store i256 32, ptr %sp31614, align 16
  %b31630 = load i256, ptr %sp31600, align 16
  %4395 = add i256 %b31630, 32
  store i256 %4395, ptr %sp31600, align 16
  %sp31633 = getelementptr i256, ptr %sp31554, i64 8
  %dup431634 = load i256, ptr %sp31633, align 16
  store i256 %dup431634, ptr %sp31614, align 16
  store i256 %4395, ptr %sp31618, align 16
  %4396 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4395, i256 %dup431634, ptr %arg.ecx.addr)
  %.not48044 = icmp eq i8 %4396, 0
  br i1 %.not48044, label %OP9091.PUSH1, label %return, !prof !6

OP9091.PUSH1:                                     ; preds = %OP9086.PUSH1
  store i256 32, ptr %sp31614, align 16
  %b31651 = load i256, ptr %sp31600, align 16
  %4397 = add i256 %b31651, 32
  store i256 %4397, ptr %sp31600, align 16
  %dup331655 = load i256, ptr %sp31590, align 16
  store i256 %dup331655, ptr %sp31614, align 16
  store i256 255, ptr %sp31618, align 16
  %4398 = and i256 %dup331655, 255
  store i256 %4398, ptr %sp31614, align 16
  store i256 248, ptr %sp31618, align 16
  %4399 = shl i256 %dup331655, 248
  store i256 %4399, ptr %sp31614, align 16
  store i256 %4397, ptr %sp31618, align 16
  %4400 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4397, i256 %4399, ptr %arg.ecx.addr)
  %.not48045 = icmp eq i8 %4400, 0
  br i1 %.not48045, label %OP9100.PUSH1, label %return, !prof !6

OP9100.PUSH1:                                     ; preds = %OP9091.PUSH1
  store i256 1, ptr %sp31614, align 16
  %b31688 = load i256, ptr %sp31600, align 16
  %4401 = add i256 %b31688, 1
  store i256 %4401, ptr %sp31600, align 16
  %swap.b31694 = load i256, ptr %sp31582, align 16
  store i256 %4401, ptr %sp31582, align 16
  store i256 %swap.b31694, ptr %sp31600, align 16
  store i256 64, ptr %sp31586, align 16
  %mload.out.slot31704 = alloca i256, align 16
  %4402 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot31704, ptr %arg.ecx.addr)
  %.not48046 = icmp eq i8 %4402, 0
  br i1 %.not48046, label %OP9108.MLOAD.contd, label %return, !prof !6

OP9108.MLOAD.contd:                               ; preds = %OP9100.PUSH1
  %mload.out31705 = load i256, ptr %mload.out.slot31704, align 16
  store i256 %mload.out31705, ptr %sp31586, align 16
  store i256 32, ptr %sp31590, align 16
  store i256 %mload.out31705, ptr %sp31592, align 16
  %dup431715 = load i256, ptr %sp31582, align 16
  store i256 %dup431715, ptr %sp31600, align 16
  %4403 = sub i256 %dup431715, %mload.out31705
  store i256 %4403, ptr %sp31592, align 16
  %4404 = add i256 %4403, -32
  store i256 %4404, ptr %sp31590, align 16
  store i256 %mload.out31705, ptr %sp31592, align 16
  %4405 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out31705, i256 %4404, ptr %arg.ecx.addr)
  %.not48047 = icmp eq i8 %4405, 0
  br i1 %.not48047, label %OP9116.SWAP1, label %return, !prof !6

OP9116.SWAP1:                                     ; preds = %OP9108.MLOAD.contd
  %swap.a31740 = load i256, ptr %sp31586, align 16
  %swap.b31742 = load i256, ptr %sp31582, align 16
  store i256 %swap.a31740, ptr %sp31582, align 16
  store i256 %swap.b31742, ptr %sp31586, align 16
  store i256 64, ptr %sp31590, align 16
  %4406 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 64, i256 %swap.b31742, ptr %arg.ecx.addr)
  %.not48048 = icmp eq i8 %4406, 0
  br i1 %.not48048, label %OP8909.JUMPDEST, label %return, !prof !6

OP9121.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7134.JUMPDEST
  %len.addr.311 = phi i64 [ %3226, %OP7134.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp31753 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.311
  store i256 11631, ptr %sp31753, align 16
  %sp31755 = getelementptr i256, ptr %sp31753, i64 -9
  %dup1031756 = load i256, ptr %sp31755, align 16
  %sp31757 = getelementptr i256, ptr %sp31753, i64 1
  store i256 %dup1031756, ptr %sp31757, align 16
  %sp31759 = getelementptr i256, ptr %sp31753, i64 -8
  %dup1031760 = load i256, ptr %sp31759, align 16
  %sp31761 = getelementptr i256, ptr %sp31753, i64 2
  store i256 %dup1031760, ptr %sp31761, align 16
  %sp31763 = getelementptr i256, ptr %sp31753, i64 -7
  %dup1031764 = load i256, ptr %sp31763, align 16
  %sp31765 = getelementptr i256, ptr %sp31753, i64 3
  store i256 %dup1031764, ptr %sp31765, align 16
  %sp31767 = getelementptr i256, ptr %sp31753, i64 -6
  %dup1031768 = load i256, ptr %sp31767, align 16
  %sp31769 = getelementptr i256, ptr %sp31753, i64 4
  store i256 %dup1031768, ptr %sp31769, align 16
  %sp31771 = getelementptr i256, ptr %sp31753, i64 -5
  %dup1031772 = load i256, ptr %sp31771, align 16
  %sp31773 = getelementptr i256, ptr %sp31753, i64 5
  store i256 %dup1031772, ptr %sp31773, align 16
  %sp31775 = getelementptr i256, ptr %sp31753, i64 -4
  %dup1031776 = load i256, ptr %sp31775, align 16
  %sp31777 = getelementptr i256, ptr %sp31753, i64 6
  store i256 %dup1031776, ptr %sp31777, align 16
  %4407 = add i64 %len.addr.311, 8
  %sp31779 = getelementptr i256, ptr %sp31753, i64 -2
  %dup931780 = load i256, ptr %sp31779, align 16
  %sp31781 = getelementptr i256, ptr %sp31753, i64 7
  store i256 %dup931780, ptr %sp31781, align 16
  %4408 = add i64 %len.addr.311, 9
  %sp31783 = getelementptr i256, ptr %sp31753, i64 -1
  %dup931784 = load i256, ptr %sp31783, align 16
  %sp31785 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4407
  store i256 %dup931784, ptr %sp31785, align 16
  %sp31787 = getelementptr i256, ptr %sp31753, i64 -3
  %dup1231788 = load i256, ptr %sp31787, align 16
  %sp31789 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4408
  store i256 %dup1231788, ptr %sp31789, align 16
  %4409 = add i64 %len.addr.311, 11
  %sp31791 = getelementptr i256, ptr %sp31753, i64 10
  store i256 64, ptr %sp31791, align 16
  %mload.out.slot31795 = alloca i256, align 16
  %4410 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot31795, ptr %arg.ecx.addr)
  %.not48021 = icmp eq i8 %4410, 0
  br i1 %.not48021, label %OP9133.MLOAD.contd, label %return, !prof !6

OP9133.MLOAD.contd:                               ; preds = %OP9121.JUMPDEST
  %mload.out31796 = load i256, ptr %mload.out.slot31795, align 16
  store i256 %mload.out31796, ptr %sp31791, align 16
  %4411 = add i64 %len.addr.311, 12
  %sp31799 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4409
  store i256 32, ptr %sp31799, align 16
  %4412 = add i256 %mload.out31796, 32
  store i256 %4412, ptr %sp31791, align 16
  store i256 %4412, ptr %sp31799, align 16
  %dup531812 = load i256, ptr %sp31781, align 16
  %sp31813 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4411
  store i256 %dup531812, ptr %sp31813, align 16
  %sp31817 = getelementptr i256, ptr %sp31753, i64 13
  store i256 %4412, ptr %sp31817, align 16
  %4413 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4412, i256 %dup531812, ptr %arg.ecx.addr)
  %.not48022 = icmp eq i8 %4413, 0
  br i1 %.not48022, label %OP9140.PUSH1, label %return, !prof !6

OP9140.PUSH1:                                     ; preds = %OP9133.MLOAD.contd
  store i256 32, ptr %sp31813, align 16
  %b31829 = load i256, ptr %sp31799, align 16
  %4414 = add i256 %b31829, 32
  store i256 %4414, ptr %sp31799, align 16
  %sp31832 = getelementptr i256, ptr %sp31753, i64 8
  %dup431833 = load i256, ptr %sp31832, align 16
  store i256 %dup431833, ptr %sp31813, align 16
  store i256 %4414, ptr %sp31817, align 16
  %4415 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4414, i256 %dup431833, ptr %arg.ecx.addr)
  %.not48023 = icmp eq i8 %4415, 0
  br i1 %.not48023, label %OP9145.PUSH1, label %return, !prof !6

OP9145.PUSH1:                                     ; preds = %OP9140.PUSH1
  store i256 32, ptr %sp31813, align 16
  %b31850 = load i256, ptr %sp31799, align 16
  %4416 = add i256 %b31850, 32
  store i256 %4416, ptr %sp31799, align 16
  %dup331854 = load i256, ptr %sp31789, align 16
  store i256 %dup331854, ptr %sp31813, align 16
  store i256 255, ptr %sp31817, align 16
  %4417 = and i256 %dup331854, 255
  store i256 %4417, ptr %sp31813, align 16
  store i256 248, ptr %sp31817, align 16
  %4418 = shl i256 %dup331854, 248
  store i256 %4418, ptr %sp31813, align 16
  store i256 %4416, ptr %sp31817, align 16
  %4419 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4416, i256 %4418, ptr %arg.ecx.addr)
  %.not48024 = icmp eq i8 %4419, 0
  br i1 %.not48024, label %OP9154.PUSH1, label %return, !prof !6

OP9154.PUSH1:                                     ; preds = %OP9145.PUSH1
  store i256 1, ptr %sp31813, align 16
  %b31887 = load i256, ptr %sp31799, align 16
  %4420 = add i256 %b31887, 1
  store i256 %4420, ptr %sp31799, align 16
  %swap.b31893 = load i256, ptr %sp31781, align 16
  store i256 %4420, ptr %sp31781, align 16
  store i256 %swap.b31893, ptr %sp31799, align 16
  store i256 64, ptr %sp31785, align 16
  %mload.out.slot31903 = alloca i256, align 16
  %4421 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot31903, ptr %arg.ecx.addr)
  %.not48025 = icmp eq i8 %4421, 0
  br i1 %.not48025, label %OP9162.MLOAD.contd, label %return, !prof !6

OP9162.MLOAD.contd:                               ; preds = %OP9154.PUSH1
  %mload.out31904 = load i256, ptr %mload.out.slot31903, align 16
  store i256 %mload.out31904, ptr %sp31785, align 16
  store i256 32, ptr %sp31789, align 16
  store i256 %mload.out31904, ptr %sp31791, align 16
  %dup431914 = load i256, ptr %sp31781, align 16
  store i256 %dup431914, ptr %sp31799, align 16
  %4422 = sub i256 %dup431914, %mload.out31904
  store i256 %4422, ptr %sp31791, align 16
  %4423 = add i256 %4422, -32
  store i256 %4423, ptr %sp31789, align 16
  store i256 %mload.out31904, ptr %sp31791, align 16
  %4424 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out31904, i256 %4423, ptr %arg.ecx.addr)
  %.not48026 = icmp eq i8 %4424, 0
  br i1 %.not48026, label %OP9170.SWAP1, label %return, !prof !6

OP9170.SWAP1:                                     ; preds = %OP9162.MLOAD.contd
  %swap.a31939 = load i256, ptr %sp31785, align 16
  %swap.b31941 = load i256, ptr %sp31781, align 16
  store i256 %swap.a31939, ptr %sp31781, align 16
  store i256 %swap.b31941, ptr %sp31785, align 16
  store i256 64, ptr %sp31789, align 16
  %4425 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 64, i256 %swap.b31941, ptr %arg.ecx.addr)
  %.not48027 = icmp eq i8 %4425, 0
  br i1 %.not48027, label %OP8179.JUMPDEST, label %return, !prof !6

OP9175.JUMPDEST.sink.split.loopexit55265:         ; preds = %dynamic_jump_table
  br label %OP9175.JUMPDEST.sink.split

OP9175.JUMPDEST.sink.split:                       ; preds = %dynamic_jump_table, %OP9175.JUMPDEST.sink.split.loopexit55265, %OP3448.JUMPDEST, %OP4923.JUMPDEST, %OP4981.JUMPDEST, %OP7317.JUMPDEST, %OP2956.JUMPDEST
  %len.addr.272.sink = phi i64 [ %.pre-phi54256, %OP2956.JUMPDEST ], [ %.pre-phi54284, %OP7317.JUMPDEST ], [ %2272, %OP4981.JUMPDEST ], [ %2243, %OP4923.JUMPDEST ], [ %1645, %OP3448.JUMPDEST ], [ %len.addr.357, %OP9175.JUMPDEST.sink.split.loopexit55265 ], [ %len.addr.357, %dynamic_jump_table ]
  %.sink = phi i256 [ 0, %OP2956.JUMPDEST ], [ 1, %OP7317.JUMPDEST ], [ 1, %OP4981.JUMPDEST ], [ 1, %OP4923.JUMPDEST ], [ 1, %OP3448.JUMPDEST ], [ 1, %OP9175.JUMPDEST.sink.split.loopexit55265 ], [ 0, %dynamic_jump_table ]
  %sp25833 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.272.sink
  store i256 15693, ptr %sp25833, align 16
  %sp26793 = getelementptr i256, ptr %sp25833, i64 -1
  %dup226794 = load i256, ptr %sp26793, align 16
  %sp26795 = getelementptr i256, ptr %sp25833, i64 1
  store i256 %dup226794, ptr %sp26795, align 16
  %4426 = add i64 %len.addr.272.sink, 3
  %sp26797 = getelementptr i256, ptr %sp25833, i64 2
  store i256 %.sink, ptr %sp26797, align 16
  br label %OP9175.JUMPDEST

OP9175.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9175.JUMPDEST.sink.split
  %len.addr.312 = phi i64 [ %4426, %OP9175.JUMPDEST.sink.split ], [ %len.addr.357, %dynamic_jump_table ]
  %4427 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.312
  %sp31952 = getelementptr i256, ptr %4427, i64 -1
  %dup131953 = load i256, ptr %sp31952, align 16
  store i256 %dup131953, ptr %4427, align 16
  %.not48542 = icmp eq i256 %dup131953, 0
  br i1 %.not48542, label %OP9179.PUSH2, label %OP9186.JUMPDEST

OP9179.PUSH2:                                     ; preds = %OP9175.JUMPDEST
  store i256 19669, ptr %4427, align 16
  %4428 = add i64 %len.addr.312, 2
  %sp31961 = getelementptr i256, ptr %4427, i64 -2
  %dup331962 = load i256, ptr %sp31961, align 16
  %sp31963 = getelementptr i256, ptr %4427, i64 1
  store i256 %dup331962, ptr %sp31963, align 16
  br label %OP7746.JUMPDEST

OP9186.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9175.JUMPDEST
  %len.addr.313 = phi i64 [ %len.addr.312, %OP9175.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %4429 = add i64 %len.addr.313, 1
  %sp31969 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.313
  %sp31971 = getelementptr i256, ptr %sp31969, i64 -2
  %dup331972 = load i256, ptr %sp31971, align 16
  %sp31973 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4429
  %4430 = and i256 %dup331972, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp31969, align 16
  store i256 %4430, ptr %sp31973, align 16
  %sp31990 = getelementptr i256, ptr %sp31969, i64 2
  store i256 0, ptr %sp31990, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !819)
  %ecx.memory.addr.i51375 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51376 = load ptr, ptr %ecx.memory.addr.i51375, align 8, !alias.scope !819
  %ecx.memory.len.addr.i51377 = getelementptr inbounds i8, ptr %ecx.memory.i51376, i64 16
  %ecx.memory.len.i51378 = load i64, ptr %ecx.memory.len.addr.i51377, align 8, !noalias !819
  %ecx.memory.last_checkpoint.addr.i51379 = getelementptr inbounds i8, ptr %ecx.memory.i51376, i64 48
  %ecx.memory.last_checkpoint.i51380 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51379, align 8, !noalias !819
  %4431 = sub i64 %ecx.memory.len.i51378, %ecx.memory.last_checkpoint.i51380
  %4432 = icmp ult i64 %4431, 32
  br i1 %4432, label %resize.i51386, label %OP9194.PUSH1, !prof !5

resize.i51386:                                    ; preds = %OP9186.JUMPDEST
  %4433 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i51387 = icmp eq i8 %4433, 0
  br i1 %.not.i51387, label %OP9194.PUSH1, label %return, !prof !6

OP9194.PUSH1:                                     ; preds = %OP9186.JUMPDEST, %resize.i51386
  %ecx.memory.buffer.ptr.shared.addr.i51382 = getelementptr inbounds i8, ptr %ecx.memory.i51376, i64 8
  %ecx.memory.buffer.ptr.shared.i51383 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51382, align 8, !noalias !819
  %ecx.memory.buffer.ptr.i51384 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51383, i64 %ecx.memory.last_checkpoint.i51380
  %4434 = tail call i256 @llvm.bswap.i256(i256 %4430)
  store i256 %4434, ptr %ecx.memory.buffer.ptr.i51384, align 1, !noalias !819
  store i256 9, ptr %sp31973, align 16
  store i256 32, ptr %sp31990, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !822)
  %ecx.memory.i51390 = load ptr, ptr %ecx.memory.addr.i51375, align 8, !alias.scope !822
  %ecx.memory.len.addr.i51391 = getelementptr inbounds i8, ptr %ecx.memory.i51390, i64 16
  %ecx.memory.len.i51392 = load i64, ptr %ecx.memory.len.addr.i51391, align 8, !noalias !822
  %ecx.memory.last_checkpoint.addr.i51393 = getelementptr inbounds i8, ptr %ecx.memory.i51390, i64 48
  %ecx.memory.last_checkpoint.i51394 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51393, align 8, !noalias !822
  %4435 = sub i64 %ecx.memory.len.i51392, %ecx.memory.last_checkpoint.i51394
  %4436 = icmp ult i64 %4435, 64
  br i1 %4436, label %resize.i51401, label %OP9197.PUSH1, !prof !5

resize.i51401:                                    ; preds = %OP9194.PUSH1
  %4437 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i51402 = icmp eq i8 %4437, 0
  br i1 %.not.i51402, label %OP9197.PUSH1, label %return, !prof !6

OP9197.PUSH1:                                     ; preds = %OP9194.PUSH1, %resize.i51401
  %ecx.memory.buffer.ptr.shared.addr.i51396 = getelementptr inbounds i8, ptr %ecx.memory.i51390, i64 8
  %ecx.memory.buffer.ptr.shared.i51397 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51396, align 8, !noalias !822
  %ecx.memory.buffer.ptr.i51398 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51397, i64 %ecx.memory.last_checkpoint.i51394
  %slot.i51399 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51398, i64 32
  store i256 4070815637249397495359917441711684260466522898401426079512180687778195963904, ptr %slot.i51399, align 1, !noalias !822
  %swap.b32011 = load i256, ptr %sp31969, align 16
  store i256 64, ptr %sp31969, align 16
  store i256 %swap.b32011, ptr %sp31973, align 16
  %4438 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp31969)
  %.not48545 = icmp eq i8 %4438, 0
  br i1 %.not48545, label %OP9200.SLOAD, label %return, !prof !6

OP9200.SLOAD:                                     ; preds = %OP9197.PUSH1
  %4439 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp31969, i8 17)
  %.not48546 = icmp eq i8 %4439, 0
  br i1 %.not48546, label %OP9201.PUSH32, label %return, !prof !6

OP9201.PUSH32:                                    ; preds = %OP9200.SLOAD
  store i256 -57896044618658097711785492504343953926634992332820282019728792003956564819968, ptr %sp31973, align 16
  %b32022 = load i256, ptr %sp31969, align 16
  %4440 = or i256 %b32022, -57896044618658097711785492504343953926634992332820282019728792003956564819968
  store i256 %4440, ptr %sp31969, align 16
  br label %OP9203.JUMPDEST, !annotation !7

OP9203.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP9201.PUSH32
  %len.addr.314 = phi i64 [ %4429, %OP9201.PUSH32 ], [ %len.addr.357, %dynamic_jump_table ], [ %len.addr.357, %dynamic_jump_table ]
  %sp32026 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.314
  %sp32030 = getelementptr i256, ptr %sp32026, i64 -1
  %swap.b32031 = load i256, ptr %sp32030, align 16
  %sp32035 = getelementptr i256, ptr %sp32026, i64 -3
  %swap.b32036 = load i256, ptr %sp32035, align 16
  store i256 %swap.b32031, ptr %sp32035, align 16
  %4441 = and i256 %swap.b32036, 1461501637330902918203684832716283019655932542975
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %sp32030, i8 0, i64 32, i1 false)
  store i256 %4441, ptr %sp32026, align 16
  %sp32053 = getelementptr i256, ptr %sp32026, i64 1
  store i256 0, ptr %sp32053, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !825)
  %ecx.memory.addr.i51404 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51405 = load ptr, ptr %ecx.memory.addr.i51404, align 8, !alias.scope !825
  %ecx.memory.len.addr.i51406 = getelementptr inbounds i8, ptr %ecx.memory.i51405, i64 16
  %ecx.memory.len.i51407 = load i64, ptr %ecx.memory.len.addr.i51406, align 8, !noalias !825
  %ecx.memory.last_checkpoint.addr.i51408 = getelementptr inbounds i8, ptr %ecx.memory.i51405, i64 48
  %ecx.memory.last_checkpoint.i51409 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51408, align 8, !noalias !825
  %4442 = sub i64 %ecx.memory.len.i51407, %ecx.memory.last_checkpoint.i51409
  %4443 = icmp ult i64 %4442, 32
  br i1 %4443, label %resize.i51415, label %OP9212.PUSH1, !prof !5

resize.i51415:                                    ; preds = %OP9203.JUMPDEST
  %4444 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i51416 = icmp eq i8 %4444, 0
  br i1 %.not.i51416, label %OP9212.PUSH1, label %return, !prof !6

OP9212.PUSH1:                                     ; preds = %OP9203.JUMPDEST, %resize.i51415
  %ecx.memory.buffer.ptr.shared.addr.i51411 = getelementptr inbounds i8, ptr %ecx.memory.i51405, i64 8
  %ecx.memory.buffer.ptr.shared.i51412 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51411, align 8, !noalias !825
  %ecx.memory.buffer.ptr.i51413 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51412, i64 %ecx.memory.last_checkpoint.i51409
  %4445 = tail call i256 @llvm.bswap.i256(i256 %4441)
  store i256 %4445, ptr %ecx.memory.buffer.ptr.i51413, align 1, !noalias !825
  store i256 9, ptr %sp32026, align 16
  store i256 32, ptr %sp32053, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !828)
  %ecx.memory.i51419 = load ptr, ptr %ecx.memory.addr.i51404, align 8, !alias.scope !828
  %ecx.memory.len.addr.i51420 = getelementptr inbounds i8, ptr %ecx.memory.i51419, i64 16
  %ecx.memory.len.i51421 = load i64, ptr %ecx.memory.len.addr.i51420, align 8, !noalias !828
  %ecx.memory.last_checkpoint.addr.i51422 = getelementptr inbounds i8, ptr %ecx.memory.i51419, i64 48
  %ecx.memory.last_checkpoint.i51423 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51422, align 8, !noalias !828
  %4446 = sub i64 %ecx.memory.len.i51421, %ecx.memory.last_checkpoint.i51423
  %4447 = icmp ult i64 %4446, 64
  br i1 %4447, label %resize.i51430, label %OP9215.PUSH1, !prof !5

resize.i51430:                                    ; preds = %OP9212.PUSH1
  %4448 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i51431 = icmp eq i8 %4448, 0
  br i1 %.not.i51431, label %OP9215.PUSH1, label %return, !prof !6

OP9215.PUSH1:                                     ; preds = %OP9212.PUSH1, %resize.i51430
  %ecx.memory.buffer.ptr.shared.addr.i51425 = getelementptr inbounds i8, ptr %ecx.memory.i51419, i64 8
  %ecx.memory.buffer.ptr.shared.i51426 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51425, align 8, !noalias !828
  %ecx.memory.buffer.ptr.i51427 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51426, i64 %ecx.memory.last_checkpoint.i51423
  %slot.i51428 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51427, i64 32
  store i256 4070815637249397495359917441711684260466522898401426079512180687778195963904, ptr %slot.i51428, align 1, !noalias !828
  %swap.b32074 = load i256, ptr %sp32030, align 16
  store i256 64, ptr %sp32030, align 16
  store i256 %swap.b32074, ptr %sp32026, align 16
  %4449 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp32030)
  %.not48549 = icmp eq i8 %4449, 0
  br i1 %.not48549, label %OP9218.SWAP2, label %return, !prof !6

OP9218.SWAP2:                                     ; preds = %OP9215.PUSH1
  %swap.b32081 = load i256, ptr %sp32035, align 16
  %sp32085 = getelementptr i256, ptr %sp32026, i64 -2
  %swap.b32086 = load i256, ptr %sp32085, align 16
  store i256 %swap.b32081, ptr %sp32085, align 16
  store i256 %swap.b32086, ptr %sp32035, align 16
  %4450 = add i64 %len.addr.314, -2
  %4451 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp32085, i8 17)
  %.not48550 = icmp eq i8 %4451, 0
  br i1 %.not48550, label %OP9222.POP, label %return, !prof !6

OP9222.POP:                                       ; preds = %OP9218.SWAP2
  %4452 = add i64 %len.addr.314, -4
  %sp32096 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4452
  %a32097 = load i256, ptr %sp32096, align 16
  br label %dynamic_jump_table.preheader

OP9224.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP7922.POP
  %len.addr.315 = phi i64 [ %3706, %OP7922.POP ], [ %len.addr.357, %dynamic_jump_table ]
  %env.cfg.chain_id.addr32100 = getelementptr inbounds i8, ptr %arg.env.addr, i64 312
  %env.cfg.chain_id32101 = load i64, ptr %env.cfg.chain_id.addr32100, align 8
  %4453 = zext i64 %env.cfg.chain_id32101 to i256
  %sp32102 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.315
  %sp32106 = getelementptr i256, ptr %sp32102, i64 -1
  %swap.b32107 = load i256, ptr %sp32106, align 16
  store i256 %4453, ptr %sp32106, align 16
  store i256 %swap.b32107, ptr %sp32102, align 16
  br label %dynamic_jump_table.preheader

OP9228.JUMPDEST:                                  ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP9050.JUMPDEST
  %len.addr.316 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %4385, %OP9050.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %4454 = add i64 %len.addr.316, 1
  %4455 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.316
  %sp32113 = getelementptr i256, ptr %4455, i64 -3
  %dup332114 = load i256, ptr %sp32113, align 16
  store i256 %dup332114, ptr %4455, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !831)
  %ecx.memory.i51434 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !831, !noalias !834
  %ecx.memory.len.addr.i51435 = getelementptr inbounds i8, ptr %ecx.memory.i51434, i64 16
  %ecx.memory.len.i51436 = load i64, ptr %ecx.memory.len.addr.i51435, align 8, !noalias !836
  %ecx.memory.last_checkpoint.addr.i51437 = getelementptr inbounds i8, ptr %ecx.memory.i51434, i64 48
  %ecx.memory.last_checkpoint.i51438 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51437, align 8, !noalias !836
  %4456 = sub i64 %ecx.memory.len.i51436, %ecx.memory.last_checkpoint.i51438
  %4457 = icmp ugt i256 %dup332114, 18446744073709551615
  %4458 = trunc i256 %dup332114 to i64
  %4459 = add i64 %4458, 32
  %4460 = icmp ugt i64 %4458, -33
  %4461 = or i1 %4457, %4460
  %4462 = select i1 %4461, i64 -1, i64 %4459
  %4463 = icmp ugt i64 %4462, %4456
  br i1 %4463, label %resize.i51446, label %OP9230.MLOAD.contd, !prof !5

resize.i51446:                                    ; preds = %OP9228.JUMPDEST
  %4464 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4462), !noalias !834
  %.not.i51447 = icmp eq i8 %4464, 0
  br i1 %.not.i51447, label %resize.i51446.OP9230.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51446.OP9230.MLOAD.contd_crit_edge:       ; preds = %resize.i51446
  %swap.b32128.pre = load i256, ptr %sp32113, align 16
  br label %OP9230.MLOAD.contd

OP9230.MLOAD.contd:                               ; preds = %resize.i51446.OP9230.MLOAD.contd_crit_edge, %OP9228.JUMPDEST
  %swap.b32128 = phi i256 [ %swap.b32128.pre, %resize.i51446.OP9230.MLOAD.contd_crit_edge ], [ %dup332114, %OP9228.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i51440 = getelementptr inbounds i8, ptr %ecx.memory.i51434, i64 8
  %ecx.memory.buffer.ptr.shared.i51441 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51440, align 8, !noalias !836
  %ecx.memory.buffer.ptr.i51442 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51441, i64 %ecx.memory.last_checkpoint.i51438
  %slot.i51443 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51442, i64 %4458
  %slot.value.i51444 = load i256, ptr %slot.i51443, align 1, !noalias !836
  %4465 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51444)
  store i256 %4465, ptr %4455, align 16
  %4466 = add i64 %len.addr.316, 2
  %sp32123 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4454
  store i256 32, ptr %sp32123, align 16
  store i256 32, ptr %sp32113, align 16
  store i256 %swap.b32128, ptr %sp32123, align 16
  %4467 = add i64 %len.addr.316, 3
  %sp32132 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4466
  store i256 32, ptr %sp32132, align 16
  %4468 = add i256 %swap.b32128, 32
  store i256 %4468, ptr %sp32123, align 16
  %4469 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %4455)
  %.not47987 = icmp eq i8 %4469, 0
  br i1 %.not47987, label %OP9236.DUP3, label %return, !prof !6

OP9236.DUP3:                                      ; preds = %OP9230.MLOAD.contd
  %sp32142 = getelementptr i256, ptr %4455, i64 -2
  %dup332143 = load i256, ptr %sp32142, align 16
  store i256 %dup332143, ptr %sp32123, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !837)
  %ecx.memory.i51450 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !837, !noalias !840
  %ecx.memory.len.addr.i51451 = getelementptr inbounds i8, ptr %ecx.memory.i51450, i64 16
  %ecx.memory.len.i51452 = load i64, ptr %ecx.memory.len.addr.i51451, align 8, !noalias !842
  %ecx.memory.last_checkpoint.addr.i51453 = getelementptr inbounds i8, ptr %ecx.memory.i51450, i64 48
  %ecx.memory.last_checkpoint.i51454 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51453, align 8, !noalias !842
  %4470 = sub i64 %ecx.memory.len.i51452, %ecx.memory.last_checkpoint.i51454
  %4471 = icmp ugt i256 %dup332143, 18446744073709551615
  %4472 = trunc i256 %dup332143 to i64
  %4473 = add i64 %4472, 32
  %4474 = icmp ugt i64 %4472, -33
  %4475 = or i1 %4471, %4474
  %4476 = select i1 %4475, i64 -1, i64 %4473
  %4477 = icmp ugt i64 %4476, %4470
  br i1 %4477, label %resize.i51462, label %OP9237.MLOAD.contd, !prof !5

resize.i51462:                                    ; preds = %OP9236.DUP3
  %4478 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4476), !noalias !840
  %.not.i51463 = icmp eq i8 %4478, 0
  br i1 %.not.i51463, label %resize.i51462.OP9237.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51462.OP9237.MLOAD.contd_crit_edge:       ; preds = %resize.i51462
  %swap.b32155.pre = load i256, ptr %sp32142, align 16
  br label %OP9237.MLOAD.contd

OP9237.MLOAD.contd:                               ; preds = %resize.i51462.OP9237.MLOAD.contd_crit_edge, %OP9236.DUP3
  %swap.b32155 = phi i256 [ %swap.b32155.pre, %resize.i51462.OP9237.MLOAD.contd_crit_edge ], [ %dup332143, %OP9236.DUP3 ]
  %ecx.memory.buffer.ptr.shared.addr.i51456 = getelementptr inbounds i8, ptr %ecx.memory.i51450, i64 8
  %ecx.memory.buffer.ptr.shared.i51457 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51456, align 8, !noalias !842
  %ecx.memory.buffer.ptr.i51458 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51457, i64 %ecx.memory.last_checkpoint.i51454
  %slot.i51459 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51458, i64 %4472
  %slot.value.i51460 = load i256, ptr %slot.i51459, align 1, !noalias !842
  %4479 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51460)
  store i256 %4479, ptr %sp32123, align 16
  store i256 %4479, ptr %sp32142, align 16
  store i256 %swap.b32155, ptr %sp32123, align 16
  %dup532158 = load i256, ptr %sp32113, align 16
  store i256 %dup532158, ptr %sp32132, align 16
  %4480 = add i256 %dup532158, %swap.b32155
  store i256 %4480, ptr %sp32123, align 16
  store i256 %4480, ptr %sp32142, align 16
  store i256 %4479, ptr %sp32123, align 16
  %swap.b32175 = load i256, ptr %4455, align 16
  store i256 %4479, ptr %4455, align 16
  store i256 %swap.b32175, ptr %sp32123, align 16
  store i256 %swap.b32175, ptr %sp32142, align 16
  store i256 %4480, ptr %sp32123, align 16
  %4481 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %4455)
  %.not47989 = icmp eq i8 %4481, 0
  br i1 %.not47989, label %OP9245.PUSH1, label %return, !prof !6

OP9245.PUSH1:                                     ; preds = %OP9237.MLOAD.contd
  store i256 64, ptr %sp32123, align 16
  store i256 64, ptr %sp32132, align 16
  %ecx.memory.i51466 = load ptr, ptr %ecx.memory.addr.i51832, align 8
  %ecx.memory.len.addr.i51467 = getelementptr inbounds i8, ptr %ecx.memory.i51466, i64 16
  %ecx.memory.len.i51468 = load i64, ptr %ecx.memory.len.addr.i51467, align 8, !noalias !843
  %ecx.memory.last_checkpoint.addr.i51469 = getelementptr inbounds i8, ptr %ecx.memory.i51466, i64 48
  %ecx.memory.last_checkpoint.i51470 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51469, align 8, !noalias !843
  %4482 = sub i64 %ecx.memory.len.i51468, %ecx.memory.last_checkpoint.i51470
  %4483 = icmp ult i64 %4482, 96
  br i1 %4483, label %resize.i51478, label %OP9247.MLOAD.contd, !prof !5

resize.i51478:                                    ; preds = %OP9245.PUSH1
  %4484 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !847
  %.not.i51479 = icmp eq i8 %4484, 0
  br i1 %.not.i51479, label %resize.i51478.OP9247.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51478.OP9247.MLOAD.contd_crit_edge:       ; preds = %resize.i51478
  %ecx.memory.i51482.pre = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !848
  br label %OP9247.MLOAD.contd

OP9247.MLOAD.contd:                               ; preds = %resize.i51478.OP9247.MLOAD.contd_crit_edge, %OP9245.PUSH1
  %ecx.memory.i51482 = phi ptr [ %ecx.memory.i51482.pre, %resize.i51478.OP9247.MLOAD.contd_crit_edge ], [ %ecx.memory.i51466, %OP9245.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i51472 = getelementptr inbounds i8, ptr %ecx.memory.i51466, i64 8
  %ecx.memory.buffer.ptr.shared.i51473 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51472, align 8, !noalias !843
  %ecx.memory.buffer.ptr.i51474 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51473, i64 %ecx.memory.last_checkpoint.i51470
  %slot.i51475 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51474, i64 64
  %slot.value.i51476 = load i256, ptr %slot.i51475, align 1, !noalias !843
  %4485 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51476)
  store i256 %4485, ptr %sp32132, align 16
  %sp32196 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4467
  store i256 -52716064676786082020591434766380454285206545917311776621925683646084292198385, ptr %sp32196, align 16
  %sp32200 = getelementptr i256, ptr %4455, i64 4
  store i256 %4485, ptr %sp32200, align 16
  %dup832203 = load i256, ptr %sp32113, align 16
  %sp32204 = getelementptr i256, ptr %4455, i64 5
  store i256 %dup832203, ptr %sp32204, align 16
  %4486 = add i256 %dup832203, %4485
  store i256 %4486, ptr %sp32200, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !848)
  %ecx.memory.len.addr.i51483 = getelementptr inbounds i8, ptr %ecx.memory.i51482, i64 16
  %ecx.memory.len.i51484 = load i64, ptr %ecx.memory.len.addr.i51483, align 8, !noalias !848
  %ecx.memory.last_checkpoint.addr.i51485 = getelementptr inbounds i8, ptr %ecx.memory.i51482, i64 48
  %ecx.memory.last_checkpoint.i51486 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51485, align 8, !noalias !848
  %4487 = sub i64 %ecx.memory.len.i51484, %ecx.memory.last_checkpoint.i51486
  %4488 = icmp ugt i256 %4486, 18446744073709551615
  %4489 = trunc i256 %4486 to i64
  %4490 = add i64 %4489, 32
  %4491 = icmp ugt i64 %4489, -33
  %4492 = or i1 %4488, %4491
  %4493 = select i1 %4492, i64 -1, i64 %4490
  %4494 = icmp ugt i64 %4493, %4487
  br i1 %4494, label %resize.i51493, label %OP9253.DUP1, !prof !5

resize.i51493:                                    ; preds = %OP9247.MLOAD.contd
  %4495 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4493)
  %.not.i51494 = icmp eq i8 %4495, 0
  br i1 %.not.i51494, label %OP9253.DUP1, label %return, !prof !6

OP9253.DUP1:                                      ; preds = %OP9247.MLOAD.contd, %resize.i51493
  %ecx.memory.buffer.ptr.shared.addr.i51488 = getelementptr inbounds i8, ptr %ecx.memory.i51482, i64 8
  %ecx.memory.buffer.ptr.shared.i51489 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51488, align 8, !noalias !848
  %ecx.memory.buffer.ptr.i51490 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51489, i64 %ecx.memory.last_checkpoint.i51486
  %slot.i51491 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51490, i64 %4489
  store i256 6898165508388421494546556945838285400455469355013990547480219182497985164171, ptr %slot.i51491, align 1, !noalias !848
  %dup132218 = load i256, ptr %sp32132, align 16
  store i256 %dup132218, ptr %sp32196, align 16
  %dup332222 = load i256, ptr %sp32123, align 16
  store i256 %dup332222, ptr %sp32200, align 16
  %4496 = add i256 %dup332222, %dup132218
  store i256 %4496, ptr %sp32196, align 16
  %swap.b32234 = load i256, ptr %sp32142, align 16
  store i256 %4496, ptr %sp32142, align 16
  store i256 %swap.b32234, ptr %sp32196, align 16
  store i256 %swap.b32234, ptr %sp32132, align 16
  store i256 %dup132218, ptr %sp32196, align 16
  store i256 %dup132218, ptr %sp32142, align 16
  store i256 %4496, ptr %sp32196, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !851)
  %ecx.memory.i51497 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !851
  %ecx.memory.len.addr.i51498 = getelementptr inbounds i8, ptr %ecx.memory.i51497, i64 16
  %ecx.memory.len.i51499 = load i64, ptr %ecx.memory.len.addr.i51498, align 8, !noalias !851
  %ecx.memory.last_checkpoint.addr.i51500 = getelementptr inbounds i8, ptr %ecx.memory.i51497, i64 48
  %ecx.memory.last_checkpoint.i51501 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51500, align 8, !noalias !851
  %4497 = sub i64 %ecx.memory.len.i51499, %ecx.memory.last_checkpoint.i51501
  %4498 = icmp ugt i256 %4496, 18446744073709551615
  %4499 = trunc i256 %4496 to i64
  %4500 = add i64 %4499, 32
  %4501 = icmp ugt i64 %4499, -33
  %4502 = or i1 %4498, %4501
  %4503 = select i1 %4502, i64 -1, i64 %4500
  %4504 = icmp ugt i64 %4503, %4497
  br i1 %4504, label %resize.i51508, label %OP9260.PUSH1, !prof !5

resize.i51508:                                    ; preds = %OP9253.DUP1
  %4505 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4503)
  %.not.i51509 = icmp eq i8 %4505, 0
  br i1 %.not.i51509, label %OP9260.PUSH1, label %return, !prof !6

OP9260.PUSH1:                                     ; preds = %OP9253.DUP1, %resize.i51508
  %ecx.memory.buffer.ptr.shared.addr.i51503 = getelementptr inbounds i8, ptr %ecx.memory.i51497, i64 8
  %ecx.memory.buffer.ptr.shared.i51504 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51503, align 8, !noalias !851
  %ecx.memory.buffer.ptr.i51505 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51504, i64 %ecx.memory.last_checkpoint.i51501
  %slot.i51506 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51505, i64 %4499
  %4506 = tail call i256 @llvm.bswap.i256(i256 %swap.b32234)
  store i256 %4506, ptr %slot.i51506, align 1, !noalias !851
  store i256 96, ptr %sp32132, align 16
  %dup532254 = load i256, ptr %sp32142, align 16
  store i256 %dup532254, ptr %sp32196, align 16
  %4507 = add i256 %dup532254, 96
  store i256 %4507, ptr %sp32132, align 16
  %swap.b32266 = load i256, ptr %4455, align 16
  store i256 %4507, ptr %4455, align 16
  store i256 %swap.b32266, ptr %sp32132, align 16
  %swap.b32271 = load i256, ptr %sp32123, align 16
  store i256 %swap.b32266, ptr %sp32123, align 16
  store i256 %swap.b32271, ptr %sp32132, align 16
  store i256 %swap.b32271, ptr %4455, align 16
  store i256 %4507, ptr %sp32132, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !854)
  %ecx.memory.i51512 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !854
  %ecx.memory.len.addr.i51513 = getelementptr inbounds i8, ptr %ecx.memory.i51512, i64 16
  %ecx.memory.len.i51514 = load i64, ptr %ecx.memory.len.addr.i51513, align 8, !noalias !854
  %ecx.memory.last_checkpoint.addr.i51515 = getelementptr inbounds i8, ptr %ecx.memory.i51512, i64 48
  %ecx.memory.last_checkpoint.i51516 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51515, align 8, !noalias !854
  %4508 = sub i64 %ecx.memory.len.i51514, %ecx.memory.last_checkpoint.i51516
  %4509 = icmp ugt i256 %4507, 18446744073709551615
  %4510 = trunc i256 %4507 to i64
  %4511 = add i64 %4510, 32
  %4512 = icmp ugt i64 %4510, -33
  %4513 = or i1 %4509, %4512
  %4514 = select i1 %4513, i64 -1, i64 %4511
  %4515 = icmp ugt i64 %4514, %4508
  br i1 %4515, label %resize.i51523, label %OP9267.PUSH1, !prof !5

resize.i51523:                                    ; preds = %OP9260.PUSH1
  %4516 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4514)
  %.not.i51524 = icmp eq i8 %4516, 0
  br i1 %.not.i51524, label %OP9267.PUSH1, label %return, !prof !6

OP9267.PUSH1:                                     ; preds = %OP9260.PUSH1, %resize.i51523
  %ecx.memory.buffer.ptr.shared.addr.i51518 = getelementptr inbounds i8, ptr %ecx.memory.i51512, i64 8
  %ecx.memory.buffer.ptr.shared.i51519 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51518, align 8, !noalias !854
  %ecx.memory.buffer.ptr.i51520 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51519, i64 %ecx.memory.last_checkpoint.i51516
  %slot.i51521 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51520, i64 %4510
  %4517 = tail call i256 @llvm.bswap.i256(i256 %swap.b32266)
  store i256 %4517, ptr %slot.i51521, align 1, !noalias !854
  store i256 128, ptr %sp32123, align 16
  %dup432286 = load i256, ptr %sp32142, align 16
  store i256 %dup432286, ptr %sp32132, align 16
  %4518 = add i256 %dup432286, 128
  store i256 %4518, ptr %sp32123, align 16
  %sp32297 = getelementptr i256, ptr %4455, i64 -1
  %swap.b32298 = load i256, ptr %sp32297, align 16
  store i256 %4518, ptr %sp32297, align 16
  store i256 %swap.b32298, ptr %sp32123, align 16
  %swap.b32303 = load i256, ptr %4455, align 16
  store i256 %swap.b32298, ptr %4455, align 16
  store i256 %swap.b32303, ptr %sp32123, align 16
  store i256 %swap.b32303, ptr %sp32297, align 16
  store i256 %4518, ptr %sp32123, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !857)
  %ecx.memory.i51527 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !857
  %ecx.memory.len.addr.i51528 = getelementptr inbounds i8, ptr %ecx.memory.i51527, i64 16
  %ecx.memory.len.i51529 = load i64, ptr %ecx.memory.len.addr.i51528, align 8, !noalias !857
  %ecx.memory.last_checkpoint.addr.i51530 = getelementptr inbounds i8, ptr %ecx.memory.i51527, i64 48
  %ecx.memory.last_checkpoint.i51531 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51530, align 8, !noalias !857
  %4519 = sub i64 %ecx.memory.len.i51529, %ecx.memory.last_checkpoint.i51531
  %4520 = icmp ugt i256 %4518, 18446744073709551615
  %4521 = trunc i256 %4518 to i64
  %4522 = add i64 %4521, 32
  %4523 = icmp ugt i64 %4521, -33
  %4524 = or i1 %4520, %4523
  %4525 = select i1 %4524, i64 -1, i64 %4522
  %4526 = icmp ugt i64 %4525, %4519
  br i1 %4526, label %resize.i51538, label %OP9274.ADDRESS, !prof !5

resize.i51538:                                    ; preds = %OP9267.PUSH1
  %4527 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4525)
  %.not.i51539 = icmp eq i8 %4527, 0
  br i1 %.not.i51539, label %OP9274.ADDRESS, label %return, !prof !6

OP9274.ADDRESS:                                   ; preds = %OP9267.PUSH1, %resize.i51538
  %ecx.memory.buffer.ptr.shared.addr.i51533 = getelementptr inbounds i8, ptr %ecx.memory.i51527, i64 8
  %ecx.memory.buffer.ptr.shared.i51534 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51533, align 8, !noalias !857
  %ecx.memory.buffer.ptr.i51535 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51534, i64 %ecx.memory.last_checkpoint.i51531
  %slot.i51536 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51535, i64 %4521
  %4528 = tail call i256 @llvm.bswap.i256(i256 %swap.b32298)
  store i256 %4528, ptr %slot.i51536, align 1, !noalias !857
  %contract.target_address32316 = load i160, ptr %contract.target_address.addr32315, align 16
  %4529 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address32316)
  %4530 = zext i160 %4529 to i256
  store i256 %4530, ptr %4455, align 16
  store i256 160, ptr %sp32123, align 16
  store i256 160, ptr %sp32132, align 16
  %dup532326 = load i256, ptr %sp32142, align 16
  store i256 %dup532326, ptr %sp32196, align 16
  %4531 = add i256 %dup532326, 160
  store i256 %4531, ptr %sp32132, align 16
  store i256 %4531, ptr %4455, align 16
  store i256 %4530, ptr %sp32132, align 16
  store i256 %4530, ptr %sp32123, align 16
  store i256 160, ptr %sp32132, align 16
  store i256 160, ptr %4455, align 16
  store i256 %4531, ptr %sp32132, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !860)
  %ecx.memory.i51542 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !860
  %ecx.memory.len.addr.i51543 = getelementptr inbounds i8, ptr %ecx.memory.i51542, i64 16
  %ecx.memory.len.i51544 = load i64, ptr %ecx.memory.len.addr.i51543, align 8, !noalias !860
  %ecx.memory.last_checkpoint.addr.i51545 = getelementptr inbounds i8, ptr %ecx.memory.i51542, i64 48
  %ecx.memory.last_checkpoint.i51546 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51545, align 8, !noalias !860
  %4532 = sub i64 %ecx.memory.len.i51544, %ecx.memory.last_checkpoint.i51546
  %4533 = icmp ugt i256 %4531, 18446744073709551615
  %4534 = trunc i256 %4531 to i64
  %4535 = add i64 %4534, 32
  %4536 = icmp ugt i64 %4534, -33
  %4537 = or i1 %4533, %4536
  %4538 = select i1 %4537, i64 -1, i64 %4535
  %4539 = icmp ugt i64 %4538, %4532
  br i1 %4539, label %resize.i51553, label %OP9283.DUP2, !prof !5

resize.i51553:                                    ; preds = %OP9274.ADDRESS
  %4540 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4538)
  %.not.i51554 = icmp eq i8 %4540, 0
  br i1 %.not.i51554, label %OP9283.DUP2, label %return, !prof !6

OP9283.DUP2:                                      ; preds = %OP9274.ADDRESS, %resize.i51553
  %ecx.memory.buffer.ptr.shared.addr.i51548 = getelementptr inbounds i8, ptr %ecx.memory.i51542, i64 8
  %ecx.memory.buffer.ptr.shared.i51549 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51548, align 8, !noalias !860
  %ecx.memory.buffer.ptr.i51550 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51549, i64 %ecx.memory.last_checkpoint.i51546
  %slot.i51551 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51550, i64 %4534
  %4541 = tail call i256 @llvm.bswap.i256(i256 %4530)
  store i256 %4541, ptr %slot.i51551, align 1, !noalias !860
  %dup232356 = load i256, ptr %sp32297, align 16
  store i256 %dup232356, ptr %sp32123, align 16
  %ecx.memory.i51557 = load ptr, ptr %ecx.memory.addr.i51832, align 8
  %ecx.memory.len.addr.i51558 = getelementptr inbounds i8, ptr %ecx.memory.i51557, i64 16
  %ecx.memory.len.i51559 = load i64, ptr %ecx.memory.len.addr.i51558, align 8, !noalias !863
  %ecx.memory.last_checkpoint.addr.i51560 = getelementptr inbounds i8, ptr %ecx.memory.i51557, i64 48
  %ecx.memory.last_checkpoint.i51561 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51560, align 8, !noalias !863
  %4542 = sub i64 %ecx.memory.len.i51559, %ecx.memory.last_checkpoint.i51561
  %4543 = icmp ugt i256 %dup232356, 18446744073709551615
  %4544 = trunc i256 %dup232356 to i64
  %4545 = add i64 %4544, 32
  %4546 = icmp ugt i64 %4544, -33
  %4547 = or i1 %4543, %4546
  %4548 = select i1 %4547, i64 -1, i64 %4545
  %4549 = icmp ugt i64 %4548, %4542
  br i1 %4549, label %resize.i51569, label %OP9284.MLOAD.contd, !prof !5

resize.i51569:                                    ; preds = %OP9283.DUP2
  %4550 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4548), !noalias !867
  %.not.i51570 = icmp eq i8 %4550, 0
  br i1 %.not.i51570, label %resize.i51569.OP9284.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51569.OP9284.MLOAD.contd_crit_edge:       ; preds = %resize.i51569
  %ecx.memory.i51573.pre = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !868
  br label %OP9284.MLOAD.contd

OP9284.MLOAD.contd:                               ; preds = %resize.i51569.OP9284.MLOAD.contd_crit_edge, %OP9283.DUP2
  %ecx.memory.i51573 = phi ptr [ %ecx.memory.i51573.pre, %resize.i51569.OP9284.MLOAD.contd_crit_edge ], [ %ecx.memory.i51557, %OP9283.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i51563 = getelementptr inbounds i8, ptr %ecx.memory.i51557, i64 8
  %ecx.memory.buffer.ptr.shared.i51564 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51563, align 8, !noalias !863
  %ecx.memory.buffer.ptr.i51565 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51564, i64 %ecx.memory.last_checkpoint.i51561
  %slot.i51566 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51565, i64 %4544
  %slot.value.i51567 = load i256, ptr %slot.i51566, align 1, !noalias !863
  %4551 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51567)
  store i256 %4551, ptr %sp32123, align 16
  store i256 %4551, ptr %sp32132, align 16
  %dup532370 = load i256, ptr %sp32142, align 16
  store i256 %dup532370, ptr %sp32196, align 16
  %4552 = sub i256 %dup532370, %4551
  store i256 %4552, ptr %sp32132, align 16
  store i256 %4552, ptr %sp32123, align 16
  store i256 %4551, ptr %sp32132, align 16
  %swap.b32387 = load i256, ptr %4455, align 16
  store i256 %4551, ptr %4455, align 16
  store i256 %swap.b32387, ptr %sp32132, align 16
  %4553 = add i256 %swap.b32387, %4552
  store i256 %4553, ptr %sp32123, align 16
  store i256 %4551, ptr %sp32132, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !868)
  %ecx.memory.len.addr.i51574 = getelementptr inbounds i8, ptr %ecx.memory.i51573, i64 16
  %ecx.memory.len.i51575 = load i64, ptr %ecx.memory.len.addr.i51574, align 8, !noalias !868
  %ecx.memory.last_checkpoint.addr.i51576 = getelementptr inbounds i8, ptr %ecx.memory.i51573, i64 48
  %ecx.memory.last_checkpoint.i51577 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51576, align 8, !noalias !868
  %4554 = sub i64 %ecx.memory.len.i51575, %ecx.memory.last_checkpoint.i51577
  %4555 = icmp ugt i256 %4551, 18446744073709551615
  %4556 = trunc i256 %4551 to i64
  %4557 = add i64 %4556, 32
  %4558 = icmp ugt i64 %4556, -33
  %4559 = or i1 %4555, %4558
  %4560 = select i1 %4559, i64 -1, i64 %4557
  %4561 = icmp ugt i64 %4560, %4554
  br i1 %4561, label %resize.i51584, label %OP9293.PUSH1, !prof !5

resize.i51584:                                    ; preds = %OP9284.MLOAD.contd
  %4562 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4560)
  %.not.i51585 = icmp eq i8 %4562, 0
  br i1 %.not.i51585, label %OP9293.PUSH1, label %return, !prof !6

OP9293.PUSH1:                                     ; preds = %OP9284.MLOAD.contd, %resize.i51584
  %ecx.memory.buffer.ptr.shared.addr.i51579 = getelementptr inbounds i8, ptr %ecx.memory.i51573, i64 8
  %ecx.memory.buffer.ptr.shared.i51580 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51579, align 8, !noalias !868
  %ecx.memory.buffer.ptr.i51581 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51580, i64 %ecx.memory.last_checkpoint.i51577
  %slot.i51582 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51581, i64 %4556
  %4563 = tail call i256 @llvm.bswap.i256(i256 %4553)
  store i256 %4563, ptr %slot.i51582, align 1, !noalias !868
  store i256 192, ptr %sp32123, align 16
  %swap.b32409 = load i256, ptr %4455, align 16
  store i256 192, ptr %4455, align 16
  store i256 %swap.b32409, ptr %sp32123, align 16
  %swap.b32414 = load i256, ptr %sp32142, align 16
  store i256 %swap.b32409, ptr %sp32142, align 16
  store i256 %swap.b32414, ptr %sp32123, align 16
  %4564 = add i256 %swap.b32414, 192
  store i256 %4564, ptr %4455, align 16
  %swap.b32425 = load i256, ptr %sp32297, align 16
  store i256 %4564, ptr %sp32297, align 16
  store i256 %swap.b32425, ptr %4455, align 16
  %4565 = add i64 %len.addr.316, -1
  %sp32429 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4565
  tail call void @llvm.experimental.noalias.scope.decl(metadata !871)
  %ecx.memory.i51588 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !871
  %ecx.memory.len.addr.i51589 = getelementptr inbounds i8, ptr %ecx.memory.i51588, i64 16
  %ecx.memory.len.i51590 = load i64, ptr %ecx.memory.len.addr.i51589, align 8, !noalias !871
  %ecx.memory.last_checkpoint.addr.i51591 = getelementptr inbounds i8, ptr %ecx.memory.i51588, i64 48
  %ecx.memory.last_checkpoint.i51592 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51591, align 8, !noalias !871
  %4566 = sub i64 %ecx.memory.len.i51590, %ecx.memory.last_checkpoint.i51592
  %4567 = icmp ugt i256 %swap.b32425, 18446744073709551615
  %4568 = trunc i256 %swap.b32425 to i64
  %4569 = add i64 %4568, 32
  %4570 = icmp ugt i64 %4568, -33
  %4571 = or i1 %4567, %4570
  %4572 = select i1 %4571, i64 -1, i64 %4569
  %4573 = icmp ugt i64 %4572, %4566
  br i1 %4573, label %resize.i51599, label %OP9299.DUP1, !prof !5

resize.i51599:                                    ; preds = %OP9293.PUSH1
  %4574 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4572)
  %.not.i51600 = icmp eq i8 %4574, 0
  br i1 %.not.i51600, label %OP9299.DUP1, label %return, !prof !6

OP9299.DUP1:                                      ; preds = %OP9293.PUSH1, %resize.i51599
  %ecx.memory.buffer.ptr.shared.addr.i51594 = getelementptr inbounds i8, ptr %ecx.memory.i51588, i64 8
  %ecx.memory.buffer.ptr.shared.i51595 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51594, align 8, !noalias !871
  %ecx.memory.buffer.ptr.i51596 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51595, i64 %ecx.memory.last_checkpoint.i51592
  %slot.i51597 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51596, i64 %4568
  %4575 = tail call i256 @llvm.bswap.i256(i256 %4564)
  store i256 %4575, ptr %slot.i51597, align 1, !noalias !871
  %dup132433 = load i256, ptr %sp32142, align 16
  store i256 %dup132433, ptr %sp32429, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !874)
  %ecx.memory.i51603 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !874, !noalias !877
  %ecx.memory.len.addr.i51604 = getelementptr inbounds i8, ptr %ecx.memory.i51603, i64 16
  %ecx.memory.len.i51605 = load i64, ptr %ecx.memory.len.addr.i51604, align 8, !noalias !879
  %ecx.memory.last_checkpoint.addr.i51606 = getelementptr inbounds i8, ptr %ecx.memory.i51603, i64 48
  %ecx.memory.last_checkpoint.i51607 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51606, align 8, !noalias !879
  %4576 = sub i64 %ecx.memory.len.i51605, %ecx.memory.last_checkpoint.i51607
  %4577 = icmp ugt i256 %dup132433, 18446744073709551615
  %4578 = trunc i256 %dup132433 to i64
  %4579 = add i64 %4578, 32
  %4580 = icmp ugt i64 %4578, -33
  %4581 = or i1 %4577, %4580
  %4582 = select i1 %4581, i64 -1, i64 %4579
  %4583 = icmp ugt i64 %4582, %4576
  br i1 %4583, label %resize.i51615, label %OP9300.MLOAD.contd, !prof !5

resize.i51615:                                    ; preds = %OP9299.DUP1
  %4584 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4582), !noalias !877
  %.not.i51616 = icmp eq i8 %4584, 0
  br i1 %.not.i51616, label %resize.i51615.OP9300.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51615.OP9300.MLOAD.contd_crit_edge:       ; preds = %resize.i51615
  %b32450.pre = load i256, ptr %sp32142, align 16
  br label %OP9300.MLOAD.contd

OP9300.MLOAD.contd:                               ; preds = %resize.i51615.OP9300.MLOAD.contd_crit_edge, %OP9299.DUP1
  %b32450 = phi i256 [ %b32450.pre, %resize.i51615.OP9300.MLOAD.contd_crit_edge ], [ %dup132433, %OP9299.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i51609 = getelementptr inbounds i8, ptr %ecx.memory.i51603, i64 8
  %ecx.memory.buffer.ptr.shared.i51610 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51609, align 8, !noalias !879
  %ecx.memory.buffer.ptr.i51611 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51610, i64 %ecx.memory.last_checkpoint.i51607
  %slot.i51612 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51611, i64 %4578
  %slot.value.i51613 = load i256, ptr %slot.i51612, align 1, !noalias !879
  %4585 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51613)
  store i256 %4585, ptr %sp32297, align 16
  %swap.b32445 = load i256, ptr %sp32113, align 16
  store i256 %4585, ptr %sp32113, align 16
  store i256 %swap.b32445, ptr %sp32297, align 16
  %4586 = add i256 %b32450, %swap.b32445
  store i256 %4586, ptr %sp32142, align 16
  %4587 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp32113)
  %.not48000 = icmp eq i8 %4587, 0
  br i1 %.not48000, label %OP9304.SWAP1, label %return.loopexit52642.split.loop.exit53357, !prof !6

OP9304.SWAP1:                                     ; preds = %OP9300.MLOAD.contd
  %swap.a32456 = load i256, ptr %sp32113, align 16
  %sp32457 = getelementptr i256, ptr %4455, i64 -4
  %swap.b32458 = load i256, ptr %sp32457, align 16
  store i256 %swap.a32456, ptr %sp32457, align 16
  store i256 %swap.b32458, ptr %sp32113, align 16
  %4588 = add i64 %len.addr.316, -3
  br label %dynamic_jump_table.backedge

OP9306.JUMPDEST.sink.split:                       ; preds = %OP8225.JUMPDEST, %OP8909.JUMPDEST
  %sp30958.sink54771 = phi ptr [ %sp30958, %OP8909.JUMPDEST ], [ %sp28454, %OP8225.JUMPDEST ]
  %len.addr.308.sink = phi i64 [ %len.addr.308, %OP8909.JUMPDEST ], [ %len.addr.294, %OP8225.JUMPDEST ]
  %sp30960 = getelementptr i256, ptr %sp30958.sink54771, i64 -7
  %dup830961 = load i256, ptr %sp30960, align 16
  %sp30962 = getelementptr i256, ptr %sp30958.sink54771, i64 1
  store i256 %dup830961, ptr %sp30962, align 16
  %sp30964 = getelementptr i256, ptr %sp30958.sink54771, i64 -2
  %dup430965 = load i256, ptr %sp30964, align 16
  %sp30966 = getelementptr i256, ptr %sp30958.sink54771, i64 2
  store i256 %dup430965, ptr %sp30966, align 16
  %sp30968 = getelementptr i256, ptr %sp30958.sink54771, i64 -4
  %dup730969 = load i256, ptr %sp30968, align 16
  %sp30970 = getelementptr i256, ptr %sp30958.sink54771, i64 3
  store i256 %dup730969, ptr %sp30970, align 16
  %4589 = add i64 %len.addr.308.sink, 5
  %sp30972 = getelementptr i256, ptr %sp30958.sink54771, i64 -3
  %dup730973 = load i256, ptr %sp30972, align 16
  %sp30974 = getelementptr i256, ptr %sp30958.sink54771, i64 4
  store i256 %dup730973, ptr %sp30974, align 16
  br label %OP9306.JUMPDEST

OP9306.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9306.JUMPDEST.sink.split
  %len.addr.317 = phi i64 [ %4589, %OP9306.JUMPDEST.sink.split ], [ %len.addr.357, %dynamic_jump_table ]
  %4590 = add i64 %len.addr.317, 1
  %4591 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.317
  %sp32464 = getelementptr i256, ptr %4591, i64 -2
  %dup232465 = load i256, ptr %sp32464, align 16
  store i256 %dup232465, ptr %4591, align 16
  %4592 = add i64 %len.addr.317, 2
  %env.block.timestamp.addr32468 = getelementptr inbounds i8, ptr %arg.env.addr, i64 80
  %env.block.timestamp32469 = load i256, ptr %env.block.timestamp.addr32468, align 16
  %sp32470 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4590
  store i256 %env.block.timestamp32469, ptr %sp32470, align 16
  %4593 = icmp ugt i256 %env.block.timestamp32469, %dup232465
  %4594 = zext i1 %4593 to i256
  store i256 %4594, ptr %4591, align 16
  br i1 %4593, label %OP9350.JUMPDEST, label %OP9312.PUSH1

OP9312.PUSH1:                                     ; preds = %OP9306.JUMPDEST
  store i256 64, ptr %4591, align 16
  %mload.out.slot32485 = alloca i256, align 16
  %4595 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot32485, ptr %arg.ecx.addr)
  %.not48134 = icmp eq i8 %4595, 0
  br i1 %.not48134, label %OP9313.MLOAD.contd, label %return, !prof !6

OP9313.MLOAD.contd:                               ; preds = %OP9312.PUSH1
  %mload.out32486 = load i256, ptr %mload.out.slot32485, align 16
  store i256 %mload.out32486, ptr %4591, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp32470, align 16
  %4596 = add i64 %len.addr.317, 3
  %sp32493 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4592
  store i256 %mload.out32486, ptr %sp32493, align 16
  %4597 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out32486, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48135 = icmp eq i8 %4597, 0
  br i1 %.not48135, label %OP9317.PUSH1, label %return, !prof !6

OP9317.PUSH1:                                     ; preds = %OP9313.MLOAD.contd
  store i256 4, ptr %sp32470, align 16
  %b32505 = load i256, ptr %4591, align 16
  %4598 = add i256 %b32505, 4
  store i256 %4598, ptr %4591, align 16
  store i256 %4598, ptr %sp32470, align 16
  store i256 %4598, ptr %sp32493, align 16
  %sp32516 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4596
  store i256 32, ptr %sp32516, align 16
  %4599 = add i256 %b32505, 36
  store i256 %4599, ptr %sp32493, align 16
  store i256 %4598, ptr %sp32516, align 16
  %sp32530 = getelementptr i256, ptr %4591, i64 4
  store i256 %4599, ptr %sp32530, align 16
  store i256 32, ptr %sp32516, align 16
  store i256 %4598, ptr %sp32530, align 16
  %4600 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4598, i256 32, ptr %arg.ecx.addr)
  %.not48136 = icmp eq i8 %4600, 0
  br i1 %.not48136, label %OP9328.PUSH1, label %return, !prof !6

OP9328.PUSH1:                                     ; preds = %OP9317.PUSH1
  store i256 43, ptr %sp32516, align 16
  %dup232550 = load i256, ptr %sp32493, align 16
  store i256 %dup232550, ptr %sp32530, align 16
  %4601 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup232550, i256 43, ptr %arg.ecx.addr)
  %.not48137 = icmp eq i8 %4601, 0
  br i1 %.not48137, label %OP9331.PUSH1, label %return, !prof !6

OP9331.PUSH1:                                     ; preds = %OP9328.PUSH1
  store i256 32, ptr %sp32516, align 16
  %b32563 = load i256, ptr %sp32493, align 16
  %4602 = add i256 %b32563, 32
  store i256 %4602, ptr %sp32493, align 16
  store i256 %4602, ptr %sp32516, align 16
  store i256 22133, ptr %sp32530, align 16
  %sp32572 = getelementptr i256, ptr %4591, i64 5
  store i256 43, ptr %sp32572, align 16
  store i256 43, ptr %sp32516, align 16
  store i256 %4602, ptr %sp32572, align 16
  %4603 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp32516)
  %.not48138 = icmp eq i8 %4603, 0
  br i1 %.not48138, label %OP9338.PUSH1, label %return, !prof !6

OP9338.PUSH1:                                     ; preds = %OP9331.PUSH1
  store i256 64, ptr %sp32516, align 16
  %b32586 = load i256, ptr %sp32493, align 16
  %4604 = add i256 %b32586, 64
  store i256 %4604, ptr %sp32493, align 16
  %swap.b32592 = load i256, ptr %4591, align 16
  store i256 %4604, ptr %4591, align 16
  store i256 %swap.b32592, ptr %sp32493, align 16
  store i256 64, ptr %sp32470, align 16
  %mload.out.slot32600 = alloca i256, align 16
  %4605 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot32600, ptr %arg.ecx.addr)
  %.not48139 = icmp eq i8 %4605, 0
  br i1 %.not48139, label %OP9344.MLOAD.contd, label %return, !prof !6

OP9344.MLOAD.contd:                               ; preds = %OP9338.PUSH1
  %mload.out32601 = load i256, ptr %mload.out.slot32600, align 16
  store i256 %mload.out32601, ptr %sp32470, align 16
  store i256 %mload.out32601, ptr %sp32493, align 16
  %swap.b32611 = load i256, ptr %4591, align 16
  store i256 %mload.out32601, ptr %4591, align 16
  store i256 %swap.b32611, ptr %sp32493, align 16
  %4606 = sub i256 %swap.b32611, %mload.out32601
  store i256 %4606, ptr %sp32470, align 16
  store i256 %4606, ptr %4591, align 16
  store i256 %mload.out32601, ptr %sp32470, align 16
  %4607 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %4591, i8 16)
  %.not48140 = icmp eq i8 %4607, 0
  %spec.select36663 = select i1 %.not48140, i8 16, i8 %4607, !prof !6
  br label %return

OP9350.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %env.block.timestamp.addr32631.phi.trans.insert = getelementptr inbounds i8, ptr %arg.env.addr, i64 80
  %env.block.timestamp32632.pre = load i256, ptr %env.block.timestamp.addr32631.phi.trans.insert, align 16
  %.pre = add i64 %len.addr.357, 2
  %.pre54295 = add i64 %len.addr.357, 1
  br label %OP9350.JUMPDEST

OP9350.JUMPDEST:                                  ; preds = %OP9350.JUMPDEST.loopexit, %OP9306.JUMPDEST
  %.pre-phi54296 = phi i64 [ %.pre54295, %OP9350.JUMPDEST.loopexit ], [ %4590, %OP9306.JUMPDEST ]
  %.pre-phi = phi i64 [ %.pre, %OP9350.JUMPDEST.loopexit ], [ %4592, %OP9306.JUMPDEST ]
  %env.block.timestamp32632 = phi i256 [ %env.block.timestamp32632.pre, %OP9350.JUMPDEST.loopexit ], [ %env.block.timestamp32469, %OP9306.JUMPDEST ]
  %len.addr.318 = phi i64 [ %len.addr.357, %OP9350.JUMPDEST.loopexit ], [ %len.addr.317, %OP9306.JUMPDEST ]
  %4608 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.318
  %sp32627 = getelementptr i256, ptr %4608, i64 -1
  %dup132628 = load i256, ptr %sp32627, align 16
  store i256 %dup132628, ptr %4608, align 16
  %sp32633 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54296
  store i256 %env.block.timestamp32632, ptr %sp32633, align 16
  %4609 = icmp ult i256 %env.block.timestamp32632, %dup132628
  %4610 = zext i1 %4609 to i256
  store i256 %4610, ptr %4608, align 16
  br i1 %4609, label %OP9394.JUMPDEST, label %OP9356.PUSH1

OP9356.PUSH1:                                     ; preds = %OP9350.JUMPDEST
  store i256 64, ptr %4608, align 16
  %mload.out.slot32648 = alloca i256, align 16
  %4611 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot32648, ptr %arg.ecx.addr)
  %.not48141 = icmp eq i8 %4611, 0
  br i1 %.not48141, label %OP9357.MLOAD.contd, label %return, !prof !6

OP9357.MLOAD.contd:                               ; preds = %OP9356.PUSH1
  %mload.out32649 = load i256, ptr %mload.out.slot32648, align 16
  store i256 %mload.out32649, ptr %4608, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp32633, align 16
  %4612 = add i64 %len.addr.318, 3
  %sp32656 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi
  store i256 %mload.out32649, ptr %sp32656, align 16
  %4613 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out32649, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48142 = icmp eq i8 %4613, 0
  br i1 %.not48142, label %OP9361.PUSH1, label %return, !prof !6

OP9361.PUSH1:                                     ; preds = %OP9357.MLOAD.contd
  store i256 4, ptr %sp32633, align 16
  %b32668 = load i256, ptr %4608, align 16
  %4614 = add i256 %b32668, 4
  store i256 %4614, ptr %4608, align 16
  store i256 %4614, ptr %sp32633, align 16
  store i256 %4614, ptr %sp32656, align 16
  %sp32679 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4612
  store i256 32, ptr %sp32679, align 16
  %4615 = add i256 %b32668, 36
  store i256 %4615, ptr %sp32656, align 16
  store i256 %4614, ptr %sp32679, align 16
  %sp32693 = getelementptr i256, ptr %4608, i64 4
  store i256 %4615, ptr %sp32693, align 16
  store i256 32, ptr %sp32679, align 16
  store i256 %4614, ptr %sp32693, align 16
  %4616 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4614, i256 32, ptr %arg.ecx.addr)
  %.not48143 = icmp eq i8 %4616, 0
  br i1 %.not48143, label %OP9372.PUSH1, label %return, !prof !6

OP9372.PUSH1:                                     ; preds = %OP9361.PUSH1
  store i256 37, ptr %sp32679, align 16
  %dup232713 = load i256, ptr %sp32656, align 16
  store i256 %dup232713, ptr %sp32693, align 16
  %4617 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup232713, i256 37, ptr %arg.ecx.addr)
  %.not48144 = icmp eq i8 %4617, 0
  br i1 %.not48144, label %OP9375.PUSH1, label %return, !prof !6

OP9375.PUSH1:                                     ; preds = %OP9372.PUSH1
  store i256 32, ptr %sp32679, align 16
  %b32726 = load i256, ptr %sp32656, align 16
  %4618 = add i256 %b32726, 32
  store i256 %4618, ptr %sp32656, align 16
  store i256 %4618, ptr %sp32679, align 16
  store i256 23337, ptr %sp32693, align 16
  %sp32735 = getelementptr i256, ptr %4608, i64 5
  store i256 37, ptr %sp32735, align 16
  store i256 37, ptr %sp32679, align 16
  store i256 %4618, ptr %sp32735, align 16
  %4619 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp32679)
  %.not48145 = icmp eq i8 %4619, 0
  br i1 %.not48145, label %OP9382.PUSH1, label %return, !prof !6

OP9382.PUSH1:                                     ; preds = %OP9375.PUSH1
  store i256 64, ptr %sp32679, align 16
  %b32749 = load i256, ptr %sp32656, align 16
  %4620 = add i256 %b32749, 64
  store i256 %4620, ptr %sp32656, align 16
  %swap.b32755 = load i256, ptr %4608, align 16
  store i256 %4620, ptr %4608, align 16
  store i256 %swap.b32755, ptr %sp32656, align 16
  store i256 64, ptr %sp32633, align 16
  %mload.out.slot32763 = alloca i256, align 16
  %4621 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot32763, ptr %arg.ecx.addr)
  %.not48146 = icmp eq i8 %4621, 0
  br i1 %.not48146, label %OP9388.MLOAD.contd, label %return, !prof !6

OP9388.MLOAD.contd:                               ; preds = %OP9382.PUSH1
  %mload.out32764 = load i256, ptr %mload.out.slot32763, align 16
  store i256 %mload.out32764, ptr %sp32633, align 16
  store i256 %mload.out32764, ptr %sp32656, align 16
  %swap.b32774 = load i256, ptr %4608, align 16
  store i256 %mload.out32764, ptr %4608, align 16
  store i256 %swap.b32774, ptr %sp32656, align 16
  %4622 = sub i256 %swap.b32774, %mload.out32764
  store i256 %4622, ptr %sp32633, align 16
  store i256 %4622, ptr %4608, align 16
  store i256 %mload.out32764, ptr %sp32633, align 16
  %4623 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %4608, i8 16)
  %.not48147 = icmp eq i8 %4623, 0
  %spec.select36664 = select i1 %.not48147, i8 16, i8 %4623, !prof !6
  br label %return

OP9394.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9350.JUMPDEST
  %len.addr.319 = phi i64 [ %len.addr.318, %OP9350.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp32790 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.319
  store i256 20098, ptr %sp32790, align 16
  %sp32792 = getelementptr i256, ptr %sp32790, i64 -4
  %dup532793 = load i256, ptr %sp32792, align 16
  %sp32794 = getelementptr i256, ptr %sp32790, i64 1
  store i256 %dup532793, ptr %sp32794, align 16
  %sp32796 = getelementptr i256, ptr %sp32790, i64 -3
  br label %OP9910.JUMPDEST.sink.split

OP9400.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4624 = add i64 %len.addr.357, -5
  %sp32806 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4624
  %a32807 = load i256, ptr %sp32806, align 16
  br label %dynamic_jump_table.backedge

OP9406.JUMPDEST.sink.split:                       ; preds = %OP8856.MLOAD.contd, %OP8307.PUSH2, %OP8991.PUSH2
  %sp30992.sink = phi ptr [ %sp30992, %OP8991.PUSH2 ], [ %sp28488, %OP8307.PUSH2 ], [ %sp30600, %OP8856.MLOAD.contd ]
  %len.addr.320.ph = phi i64 [ %4295, %OP8991.PUSH2 ], [ %3915, %OP8307.PUSH2 ], [ %4253, %OP8856.MLOAD.contd ]
  %4625 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp31319 = getelementptr i256, ptr %4625, i64 -1
  %dup431320 = load i256, ptr %sp31319, align 16
  store i256 %dup431320, ptr %sp30992.sink, align 16
  br label %OP9406.JUMPDEST

OP9406.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9406.JUMPDEST.sink.split
  %len.addr.320 = phi i64 [ %len.addr.320.ph, %OP9406.JUMPDEST.sink.split ], [ %len.addr.357, %dynamic_jump_table ]
  %sp32810 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.320
  store i256 731022863064405212280927003326868638342848426354, ptr %sp32810, align 16
  %sp32812 = getelementptr i256, ptr %sp32810, i64 1
  store i256 1825482322, ptr %sp32812, align 16
  %sp32814 = getelementptr i256, ptr %sp32810, i64 -3
  %dup532815 = load i256, ptr %sp32814, align 16
  %sp32816 = getelementptr i256, ptr %sp32810, i64 2
  store i256 %dup532815, ptr %sp32816, align 16
  %sp32818 = getelementptr i256, ptr %sp32810, i64 3
  store i256 20148, ptr %sp32818, align 16
  %4626 = add i64 %len.addr.320, 5
  %sp32820 = getelementptr i256, ptr %sp32810, i64 4
  store i256 20142, ptr %sp32820, align 16
  br label %OP7788.JUMPDEST

OP9414.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4627 = add i64 %len.addr.357, 1
  %4628 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp32824 = getelementptr i256, ptr %4628, i64 -7
  %dup732825 = load i256, ptr %sp32824, align 16
  store i256 %dup732825, ptr %4628, align 16
  br label %OP9667.JUMPDEST

OP9418.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4629 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp32830 = getelementptr i256, ptr %4629, i64 -5
  %dup532831 = load i256, ptr %sp32830, align 16
  store i256 %dup532831, ptr %4629, align 16
  %4630 = add i64 %len.addr.357, 2
  %sp32834 = getelementptr i256, ptr %4629, i64 1
  store i256 64, ptr %sp32834, align 16
  %mload.out.slot32838 = alloca i256, align 16
  %4631 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot32838, ptr %arg.ecx.addr)
  %.not47853 = icmp eq i8 %4631, 0
  br i1 %.not47853, label %OP9421.MLOAD.contd, label %return, !prof !6

OP9421.MLOAD.contd:                               ; preds = %OP9418.JUMPDEST
  %mload.out32839 = load i256, ptr %mload.out.slot32838, align 16
  store i256 %mload.out32839, ptr %sp32834, align 16
  %4632 = add i64 %len.addr.357, 3
  %sp32842 = getelementptr i256, ptr %4629, i64 -3
  %dup532843 = load i256, ptr %sp32842, align 16
  %sp32844 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4630
  store i256 %dup532843, ptr %sp32844, align 16
  %4633 = add i64 %len.addr.357, 4
  %sp32846 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4632
  store i256 4294967295, ptr %sp32846, align 16
  %4634 = and i256 %dup532843, 4294967295
  store i256 %4634, ptr %sp32844, align 16
  store i256 224, ptr %sp32846, align 16
  %4635 = shl i256 %dup532843, 224
  store i256 %4635, ptr %sp32844, align 16
  store i256 %mload.out32839, ptr %sp32846, align 16
  %4636 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out32839, i256 %4635, ptr %arg.ecx.addr)
  %.not47854 = icmp eq i8 %4636, 0
  br i1 %.not47854, label %OP9429.PUSH1, label %return, !prof !6

OP9429.PUSH1:                                     ; preds = %OP9421.MLOAD.contd
  store i256 4, ptr %sp32844, align 16
  %b32876 = load i256, ptr %sp32834, align 16
  %4637 = add i256 %b32876, 4
  store i256 %4637, ptr %sp32834, align 16
  store i256 %4637, ptr %sp32844, align 16
  %sp32883 = getelementptr i256, ptr %4629, i64 -2
  %dup532884 = load i256, ptr %sp32883, align 16
  store i256 %dup532884, ptr %sp32846, align 16
  %sp32887 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4633
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp32887, align 16
  %4638 = and i256 %dup532884, 1461501637330902918203684832716283019655932542975
  store i256 %4638, ptr %sp32846, align 16
  store i256 %4637, ptr %sp32887, align 16
  %4639 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4637, i256 %4638, ptr %arg.ecx.addr)
  %.not47855 = icmp eq i8 %4639, 0
  br i1 %.not47855, label %OP9437.PUSH1, label %return, !prof !6

OP9437.PUSH1:                                     ; preds = %OP9429.PUSH1
  store i256 32, ptr %sp32846, align 16
  %b32909 = load i256, ptr %sp32844, align 16
  %4640 = add i256 %b32909, 32
  store i256 %4640, ptr %sp32844, align 16
  %sp32912 = getelementptr i256, ptr %4629, i64 -1
  %dup432913 = load i256, ptr %sp32912, align 16
  store i256 %dup432913, ptr %sp32846, align 16
  store i256 %4640, ptr %sp32887, align 16
  %4641 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4640, i256 %dup432913, ptr %arg.ecx.addr)
  %.not47856 = icmp eq i8 %4641, 0
  br i1 %.not47856, label %OP9442.PUSH1, label %return, !prof !6

OP9442.PUSH1:                                     ; preds = %OP9437.PUSH1
  store i256 32, ptr %sp32846, align 16
  %b32930 = load i256, ptr %sp32844, align 16
  %4642 = add i256 %b32930, 32
  store i256 %4642, ptr %sp32844, align 16
  store i256 %4642, ptr %sp32846, align 16
  store i256 32, ptr %sp32887, align 16
  %4643 = add i256 %b32930, 64
  store i256 %4643, ptr %sp32846, align 16
  %dup332946 = load i256, ptr %sp32834, align 16
  store i256 %dup332946, ptr %sp32887, align 16
  %4644 = add i64 %len.addr.357, 6
  %sp32951 = getelementptr i256, ptr %4629, i64 5
  store i256 %4643, ptr %sp32951, align 16
  %4645 = sub i256 %4643, %dup332946
  store i256 %4645, ptr %sp32887, align 16
  store i256 %4642, ptr %sp32951, align 16
  %4646 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4642, i256 %4645, ptr %arg.ecx.addr)
  %.not47857 = icmp eq i8 %4646, 0
  br i1 %.not47857, label %OP9452.DUP4, label %return, !prof !6

OP9452.DUP4:                                      ; preds = %OP9442.PUSH1
  %dup432969 = load i256, ptr %4629, align 16
  store i256 %dup432969, ptr %sp32887, align 16
  %dup232973 = load i256, ptr %sp32846, align 16
  store i256 %dup232973, ptr %sp32951, align 16
  %4647 = add i64 %len.addr.357, 7
  %sp32978 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4644
  store i256 %dup432969, ptr %sp32978, align 16
  %mload.out.slot32982 = alloca i256, align 16
  %4648 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup432969, ptr %mload.out.slot32982, ptr %arg.ecx.addr)
  %.not47858 = icmp eq i8 %4648, 0
  br i1 %.not47858, label %OP9455.MLOAD.contd, label %return, !prof !6

OP9455.MLOAD.contd:                               ; preds = %OP9452.DUP4
  %mload.out32983 = load i256, ptr %mload.out.slot32982, align 16
  store i256 %mload.out32983, ptr %sp32978, align 16
  %dup232987 = load i256, ptr %sp32951, align 16
  %sp32988 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4647
  store i256 %dup232987, ptr %sp32988, align 16
  %4649 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup232987, i256 %mload.out32983, ptr %arg.ecx.addr)
  %.not47859 = icmp eq i8 %4649, 0
  br i1 %.not47859, label %OP9458.PUSH1, label %return, !prof !6

OP9458.PUSH1:                                     ; preds = %OP9455.MLOAD.contd
  store i256 32, ptr %sp32978, align 16
  %b33000 = load i256, ptr %sp32951, align 16
  %4650 = add i256 %b33000, 32
  store i256 %4650, ptr %sp32951, align 16
  %swap.b33006 = load i256, ptr %sp32846, align 16
  store i256 %4650, ptr %sp32846, align 16
  store i256 %swap.b33006, ptr %sp32951, align 16
  %dup133010 = load i256, ptr %sp32887, align 16
  store i256 %dup133010, ptr %sp32951, align 16
  %mload.out.slot33015 = alloca i256, align 16
  %4651 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup133010, ptr %mload.out.slot33015, ptr %arg.ecx.addr)
  %.not47860 = icmp eq i8 %4651, 0
  br i1 %.not47860, label %OP9463.MLOAD.contd, label %return, !prof !6

OP9463.MLOAD.contd:                               ; preds = %OP9458.PUSH1
  %mload.out33016 = load i256, ptr %mload.out.slot33015, align 16
  store i256 %mload.out33016, ptr %sp32951, align 16
  %swap.b33022 = load i256, ptr %sp32887, align 16
  store i256 %mload.out33016, ptr %sp32887, align 16
  store i256 %swap.b33022, ptr %sp32951, align 16
  store i256 32, ptr %sp32978, align 16
  %4652 = add i256 %swap.b33022, 32
  store i256 %4652, ptr %sp32951, align 16
  store i256 %4652, ptr %sp32887, align 16
  store i256 %mload.out33016, ptr %sp32951, align 16
  store i256 %mload.out33016, ptr %sp32978, align 16
  %sp33041 = getelementptr i256, ptr %4629, i64 3
  %dup433042 = load i256, ptr %sp33041, align 16
  store i256 %dup433042, ptr %sp32988, align 16
  %sp33047 = getelementptr i256, ptr %4629, i64 8
  store i256 %4652, ptr %sp33047, align 16
  %4653 = add i64 %len.addr.357, 10
  %sp33049 = getelementptr i256, ptr %4629, i64 9
  store i256 0, ptr %sp33049, align 16
  br label %OP9472.JUMPDEST.preheader, !annotation !7

OP9472.JUMPDEST.preheader:                        ; preds = %dynamic_jump_table, %OP9463.MLOAD.contd
  %len.addr.321.ph = phi i64 [ %4653, %OP9463.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %4654 = add i64 %len.addr.321.ph, 1
  %4655 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.321.ph
  %sp33052 = getelementptr i256, ptr %4655, i64 -4
  %sp33056 = getelementptr i256, ptr %4655, i64 -1
  %sp33058 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4654
  %dup43305353461 = load i256, ptr %sp33052, align 16
  store i256 %dup43305353461, ptr %4655, align 16
  %dup23305753462 = load i256, ptr %sp33056, align 16
  store i256 %dup23305753462, ptr %sp33058, align 16
  %4656 = icmp uge i256 %dup23305753462, %dup43305353461
  %4657 = zext i1 %4656 to i256
  store i256 %4657, ptr %4655, align 16
  br i1 %4656, label %OP9491.JUMPDEST, label %OP9479.DUP2.lr.ph

OP9479.DUP2.lr.ph:                                ; preds = %OP9472.JUMPDEST.preheader
  %sp33073 = getelementptr i256, ptr %4655, i64 -2
  %sp33093 = getelementptr i256, ptr %4655, i64 -3
  %sp33099 = getelementptr i256, ptr %4655, i64 2
  br label %OP9479.DUP2

OP9479.DUP2:                                      ; preds = %OP9479.DUP2.lr.ph, %OP9487.PUSH1
  %dup233078 = phi i256 [ %dup23305753462, %OP9479.DUP2.lr.ph ], [ %4679, %OP9487.PUSH1 ]
  %dup233074 = load i256, ptr %sp33073, align 16
  store i256 %dup233074, ptr %4655, align 16
  store i256 %dup233078, ptr %sp33058, align 16
  %4658 = add i256 %dup233078, %dup233074
  store i256 %4658, ptr %4655, align 16
  %ecx.memory.i51619 = load ptr, ptr %ecx.memory.addr.i51832, align 8
  %ecx.memory.len.addr.i51620 = getelementptr inbounds i8, ptr %ecx.memory.i51619, i64 16
  %ecx.memory.len.i51621 = load i64, ptr %ecx.memory.len.addr.i51620, align 8, !noalias !880
  %ecx.memory.last_checkpoint.addr.i51622 = getelementptr inbounds i8, ptr %ecx.memory.i51619, i64 48
  %ecx.memory.last_checkpoint.i51623 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51622, align 8, !noalias !880
  %4659 = sub i64 %ecx.memory.len.i51621, %ecx.memory.last_checkpoint.i51623
  %4660 = icmp ugt i256 %4658, 18446744073709551615
  %4661 = trunc i256 %4658 to i64
  %4662 = add i64 %4661, 32
  %4663 = icmp ugt i64 %4661, -33
  %4664 = or i1 %4660, %4663
  %4665 = select i1 %4664, i64 -1, i64 %4662
  %4666 = icmp ugt i64 %4665, %4659
  br i1 %4666, label %resize.i51631, label %OP9482.MLOAD.contd, !prof !5

resize.i51631:                                    ; preds = %OP9479.DUP2
  %4667 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4665), !noalias !884
  %.not.i51632 = icmp eq i8 %4667, 0
  br i1 %.not.i51632, label %resize.i51631.OP9482.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51631.OP9482.MLOAD.contd_crit_edge:       ; preds = %resize.i51631
  %dup333098.pre = load i256, ptr %sp33056, align 16
  %ecx.memory.i51635.pre = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !885
  br label %OP9482.MLOAD.contd

OP9482.MLOAD.contd:                               ; preds = %resize.i51631.OP9482.MLOAD.contd_crit_edge, %OP9479.DUP2
  %ecx.memory.i51635 = phi ptr [ %ecx.memory.i51635.pre, %resize.i51631.OP9482.MLOAD.contd_crit_edge ], [ %ecx.memory.i51619, %OP9479.DUP2 ]
  %dup333098 = phi i256 [ %dup333098.pre, %resize.i51631.OP9482.MLOAD.contd_crit_edge ], [ %dup233078, %OP9479.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i51625 = getelementptr inbounds i8, ptr %ecx.memory.i51619, i64 8
  %ecx.memory.buffer.ptr.shared.i51626 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51625, align 8, !noalias !880
  %ecx.memory.buffer.ptr.i51627 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51626, i64 %ecx.memory.last_checkpoint.i51623
  %slot.i51628 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51627, i64 %4661
  %slot.value.i51629 = load i256, ptr %slot.i51628, align 1, !noalias !880
  %4668 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51629)
  store i256 %4668, ptr %4655, align 16
  %dup433094 = load i256, ptr %sp33093, align 16
  store i256 %dup433094, ptr %sp33058, align 16
  store i256 %dup333098, ptr %sp33099, align 16
  %4669 = add i256 %dup333098, %dup433094
  store i256 %4669, ptr %sp33058, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !885)
  %ecx.memory.len.addr.i51636 = getelementptr inbounds i8, ptr %ecx.memory.i51635, i64 16
  %ecx.memory.len.i51637 = load i64, ptr %ecx.memory.len.addr.i51636, align 8, !noalias !885
  %ecx.memory.last_checkpoint.addr.i51638 = getelementptr inbounds i8, ptr %ecx.memory.i51635, i64 48
  %ecx.memory.last_checkpoint.i51639 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51638, align 8, !noalias !885
  %4670 = sub i64 %ecx.memory.len.i51637, %ecx.memory.last_checkpoint.i51639
  %4671 = icmp ugt i256 %4669, 18446744073709551615
  %4672 = trunc i256 %4669 to i64
  %4673 = add i64 %4672, 32
  %4674 = icmp ugt i64 %4672, -33
  %4675 = or i1 %4671, %4674
  %4676 = select i1 %4675, i64 -1, i64 %4673
  %4677 = icmp ugt i64 %4676, %4670
  br i1 %4677, label %resize.i51646, label %OP9487.PUSH1, !prof !5

resize.i51646:                                    ; preds = %OP9482.MLOAD.contd
  %4678 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4676)
  %.not.i51647 = icmp eq i8 %4678, 0
  br i1 %.not.i51647, label %OP9487.PUSH1, label %return, !prof !6

OP9487.PUSH1:                                     ; preds = %OP9482.MLOAD.contd, %resize.i51646
  %ecx.memory.buffer.ptr.shared.addr.i51641 = getelementptr inbounds i8, ptr %ecx.memory.i51635, i64 8
  %ecx.memory.buffer.ptr.shared.i51642 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51641, align 8, !noalias !885
  %ecx.memory.buffer.ptr.i51643 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51642, i64 %ecx.memory.last_checkpoint.i51639
  %slot.i51644 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51643, i64 %4672
  store i256 %slot.value.i51629, ptr %slot.i51644, align 1, !noalias !885
  store i256 32, ptr %4655, align 16
  %b33117 = load i256, ptr %sp33056, align 16
  %4679 = add i256 %b33117, 32
  store i256 %4679, ptr %sp33056, align 16
  %dup433053 = load i256, ptr %sp33052, align 16
  store i256 %dup433053, ptr %4655, align 16
  store i256 %4679, ptr %sp33058, align 16
  %4680 = icmp uge i256 %4679, %dup433053
  %4681 = zext i1 %4680 to i256
  store i256 %4681, ptr %4655, align 16
  br i1 %4680, label %OP9491.JUMPDEST, label %OP9479.DUP2

OP9491.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9487.PUSH1, %OP9472.JUMPDEST.preheader
  %len.addr.322 = phi i64 [ %len.addr.321.ph, %OP9472.JUMPDEST.preheader ], [ %len.addr.321.ph, %OP9487.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %4682 = add i64 %len.addr.322, -1
  %4683 = add i64 %len.addr.322, -3
  %4684 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.322
  %sp33126 = getelementptr i256, ptr %4684, i64 -5
  %swap.a33127 = load i256, ptr %sp33126, align 16
  %sp33128 = getelementptr i256, ptr %4684, i64 -6
  %swap.b33129 = load i256, ptr %sp33128, align 16
  store i256 %swap.a33127, ptr %sp33128, align 16
  store i256 %swap.b33129, ptr %sp33126, align 16
  %4685 = add i64 %len.addr.322, -5
  %sp33134 = getelementptr i256, ptr %4684, i64 -7
  %swap.b33135 = load i256, ptr %sp33134, align 16
  store i256 %swap.a33127, ptr %sp33134, align 16
  store i256 %swap.b33135, ptr %sp33128, align 16
  %sp33139 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4685
  store i256 %swap.a33127, ptr %sp33139, align 16
  %4686 = add i256 %swap.b33135, %swap.a33127
  store i256 %4686, ptr %sp33128, align 16
  store i256 %4686, ptr %sp33134, align 16
  store i256 %swap.a33127, ptr %sp33128, align 16
  store i256 31, ptr %sp33139, align 16
  %4687 = and i256 %swap.a33127, 31
  store i256 %4687, ptr %sp33128, align 16
  %4688 = icmp eq i256 %4687, 0
  %4689 = zext i1 %4688 to i256
  store i256 %4689, ptr %sp33139, align 16
  br i1 %4688, label %OP9528.JUMPDEST, label %OP9508.DUP1

OP9508.DUP1:                                      ; preds = %OP9491.JUMPDEST
  store i256 %4687, ptr %sp33139, align 16
  %sp33177 = getelementptr i256, ptr %4684, i64 -4
  store i256 %4686, ptr %sp33177, align 16
  %4690 = sub i256 %4686, %4687
  store i256 %4690, ptr %sp33126, align 16
  store i256 %4690, ptr %sp33177, align 16
  %mload.out.slot33191 = alloca i256, align 16
  %4691 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %4690, ptr %mload.out.slot33191, ptr %arg.ecx.addr)
  %.not47863 = icmp eq i8 %4691, 0
  br i1 %.not47863, label %OP9512.MLOAD.contd, label %return, !prof !6

OP9512.MLOAD.contd:                               ; preds = %OP9508.DUP1
  %mload.out33192 = load i256, ptr %mload.out.slot33191, align 16
  store i256 %mload.out33192, ptr %sp33177, align 16
  %sp33195 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4683
  store i256 1, ptr %sp33195, align 16
  %dup433198 = load i256, ptr %sp33128, align 16
  %sp33199 = getelementptr i256, ptr %4684, i64 -2
  store i256 %dup433198, ptr %sp33199, align 16
  %sp33201 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4682
  store i256 32, ptr %sp33201, align 16
  %4692 = sub i256 32, %dup433198
  store i256 %4692, ptr %sp33199, align 16
  store i256 256, ptr %sp33201, align 16
  %4693 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33199, i8 17)
  %.not47864 = icmp eq i8 %4693, 0
  br i1 %.not47864, label %OP9519.SUB, label %return, !prof !6

OP9519.SUB:                                       ; preds = %OP9512.MLOAD.contd
  %a33214 = load i256, ptr %sp33199, align 16
  %sp33215 = getelementptr i256, ptr %4684, i64 -3
  %b33216 = load i256, ptr %sp33215, align 16
  %4694 = sub i256 %a33214, %b33216
  store i256 %4694, ptr %sp33215, align 16
  %4695 = xor i256 %4694, -1
  store i256 %4695, ptr %sp33195, align 16
  %4696 = add i64 %len.addr.322, -4
  %sp33225 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4696
  %b33226 = load i256, ptr %sp33225, align 16
  %4697 = and i256 %b33226, %4695
  store i256 %4697, ptr %sp33225, align 16
  %dup233230 = load i256, ptr %sp33126, align 16
  store i256 %dup233230, ptr %sp33195, align 16
  %4698 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup233230, i256 %4697, ptr %arg.ecx.addr)
  %.not47865 = icmp eq i8 %4698, 0
  br i1 %.not47865, label %OP9524.PUSH1, label %return, !prof !6

OP9524.PUSH1:                                     ; preds = %OP9519.SUB
  store i256 32, ptr %sp33225, align 16
  %b33243 = load i256, ptr %sp33126, align 16
  %4699 = add i256 %b33243, 32
  store i256 %4699, ptr %sp33126, align 16
  %swap.b33249 = load i256, ptr %sp33134, align 16
  store i256 %4699, ptr %sp33134, align 16
  store i256 %swap.b33249, ptr %sp33126, align 16
  br label %OP9528.JUMPDEST, !annotation !7

OP9528.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9524.PUSH1, %OP9491.JUMPDEST
  %len.addr.323 = phi i64 [ %4685, %OP9491.JUMPDEST ], [ %4685, %OP9524.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %4700 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.323
  %sp33254 = getelementptr i256, ptr %4700, i64 -2
  %swap.a33255 = load i256, ptr %sp33254, align 16
  %sp33256 = getelementptr i256, ptr %4700, i64 -7
  %swap.b33257 = load i256, ptr %sp33256, align 16
  store i256 %swap.a33255, ptr %sp33256, align 16
  store i256 %swap.b33257, ptr %sp33254, align 16
  %4701 = add i64 %len.addr.323, -4
  %sp33264 = getelementptr i256, ptr %4700, i64 -6
  store i256 32, ptr %sp33264, align 16
  %sp33266 = getelementptr i256, ptr %4700, i64 -5
  store i256 64, ptr %sp33266, align 16
  %mload.out.slot33270 = alloca i256, align 16
  %4702 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot33270, ptr %arg.ecx.addr)
  %.not47866 = icmp eq i8 %4702, 0
  br i1 %.not47866, label %OP9538.MLOAD.contd, label %return, !prof !6

OP9538.MLOAD.contd:                               ; preds = %OP9528.JUMPDEST
  %mload.out33271 = load i256, ptr %mload.out.slot33270, align 16
  store i256 %mload.out33271, ptr %sp33266, align 16
  %sp33276 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4701
  store i256 %mload.out33271, ptr %sp33276, align 16
  %dup433279 = load i256, ptr %sp33256, align 16
  %sp33280 = getelementptr i256, ptr %4700, i64 -3
  store i256 %dup433279, ptr %sp33280, align 16
  %sp33284 = getelementptr i256, ptr %4700, i64 -4
  %4703 = sub i256 %dup433279, %mload.out33271
  store i256 %4703, ptr %sp33284, align 16
  store i256 %mload.out33271, ptr %sp33280, align 16
  %sp33292 = getelementptr i256, ptr %4700, i64 -9
  %dup733293 = load i256, ptr %sp33292, align 16
  store i256 %dup733293, ptr %sp33254, align 16
  %sp33298 = getelementptr i256, ptr %4700, i64 -1
  store i256 %dup733293, ptr %sp33298, align 16
  %4704 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33298, i8 17)
  %.not47867 = icmp eq i8 %4704, 0
  br i1 %.not47867, label %OP9546.ISZERO, label %return, !prof !6

OP9546.ISZERO:                                    ; preds = %OP9538.MLOAD.contd
  %a33303 = load i256, ptr %sp33298, align 16
  %4705 = icmp eq i256 %a33303, 0
  %4706 = zext i1 %4705 to i256
  store i256 %4706, ptr %sp33298, align 16
  %4707 = xor i1 %4705, true
  %4708 = zext i1 %4707 to i256
  store i256 %4708, ptr %4700, align 16
  br i1 %4705, label %OP9551.PUSH1, label %OP9554.JUMPDEST

OP9551.PUSH1:                                     ; preds = %OP9546.ISZERO
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %4700, i8 0, i64 64, i1 false)
  %4709 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %4700, i8 16)
  %.not47868 = icmp eq i8 %4709, 0
  %spec.select36665 = select i1 %.not47868, i8 16, i8 %4709, !prof !6
  br label %return

OP9554.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9546.ISZERO
  %len.addr.324 = phi i64 [ %len.addr.323, %OP9546.ISZERO ], [ %len.addr.357, %dynamic_jump_table ]
  %gas.remaining33327 = load i64, ptr %gas.remaining.addr, align 8
  %4710 = zext i64 %gas.remaining33327 to i256
  %4711 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.324
  %sp33328 = getelementptr i256, ptr %4711, i64 -1
  store i256 %4710, ptr %sp33328, align 16
  %4712 = add i64 %len.addr.324, -6
  %sp33330 = getelementptr i256, ptr %4711, i64 -6
  %4713 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp33330, i8 17, i8 2)
  %.not47869 = icmp eq i8 %4713, 0
  br i1 %.not47869, label %suspend, label %return, !prof !6

OP9558.ISZERO:                                    ; preds = %resume
  %4714 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len36507
  %sp33332 = getelementptr i256, ptr %4714, i64 -1
  %a33333 = load i256, ptr %sp33332, align 16
  %4715 = icmp eq i256 %a33333, 0
  %4716 = zext i1 %4715 to i256
  store i256 %4716, ptr %sp33332, align 16
  %4717 = xor i1 %4715, true
  %4718 = zext i1 %4717 to i256
  store i256 %4718, ptr %4714, align 16
  br i1 %4715, label %OP9563.RETURNDATASIZE, label %OP9570.JUMPDEST

OP9563.RETURNDATASIZE:                            ; preds = %OP9558.ISZERO
  %ecx.return_data.len.addr33347 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len33348 = load i64, ptr %ecx.return_data.len.addr33347, align 8
  %4719 = zext i64 %ecx.return_data.len33348 to i256
  store i256 %4719, ptr %4714, align 16
  %sp33351 = getelementptr i256, ptr %4714, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp33351, i8 0, i64 64, i1 false)
  %4720 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %4714)
  %.not47787 = icmp eq i8 %4720, 0
  br i1 %.not47787, label %OP9567.RETURNDATASIZE, label %return, !prof !6

OP9567.RETURNDATASIZE:                            ; preds = %OP9563.RETURNDATASIZE
  %ecx.return_data.len33360 = load i64, ptr %ecx.return_data.len.addr33347, align 8
  %4721 = zext i64 %ecx.return_data.len33360 to i256
  store i256 %4721, ptr %4714, align 16
  store i256 0, ptr %sp33351, align 16
  %4722 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %4714, i8 16)
  %.not47788 = icmp eq i8 %4722, 0
  %spec.select36666 = select i1 %.not47788, i8 16, i8 %4722, !prof !6
  br label %return

OP9570.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9558.ISZERO
  %len.addr.325 = phi i64 [ %stack_len36507, %OP9558.ISZERO ], [ %len.addr.357, %dynamic_jump_table ]
  %4723 = add i64 %len.addr.325, -3
  %4724 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.325
  %sp33372 = getelementptr i256, ptr %4724, i64 -4
  store i256 64, ptr %sp33372, align 16
  %mload.out.slot33376 = alloca i256, align 16
  %4725 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot33376, ptr %arg.ecx.addr)
  %.not47842 = icmp eq i8 %4725, 0
  br i1 %.not47842, label %OP9576.MLOAD.contd, label %return, !prof !6

OP9576.MLOAD.contd:                               ; preds = %OP9570.JUMPDEST
  %4726 = add i64 %len.addr.325, -2
  %mload.out33377 = load i256, ptr %mload.out.slot33376, align 16
  store i256 %mload.out33377, ptr %sp33372, align 16
  %ecx.return_data.len.addr33380 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len33381 = load i64, ptr %ecx.return_data.len.addr33380, align 8
  %4727 = zext i64 %ecx.return_data.len33381 to i256
  %sp33382 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4723
  store i256 %4727, ptr %sp33382, align 16
  %sp33384 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4726
  store i256 32, ptr %sp33384, align 16
  %sp33388 = getelementptr i256, ptr %4724, i64 -1
  store i256 %4727, ptr %sp33388, align 16
  %4728 = icmp ugt i64 %ecx.return_data.len33381, 31
  %4729 = zext i1 %4728 to i256
  store i256 %4729, ptr %sp33384, align 16
  br i1 %4728, label %OP9587.JUMPDEST, label %OP9584.PUSH1

OP9584.PUSH1:                                     ; preds = %OP9576.MLOAD.contd
  store i256 0, ptr %sp33384, align 16
  %sp33405 = getelementptr i256, ptr %4724, i64 -2
  store i256 0, ptr %sp33388, align 16
  %4730 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33405, i8 16)
  %.not47843 = icmp eq i8 %4730, 0
  %spec.select36667 = select i1 %.not47843, i8 16, i8 %4730, !prof !6
  br label %return

OP9587.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9576.MLOAD.contd
  %len.addr.326 = phi i64 [ %4726, %OP9576.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %4731 = add i64 %len.addr.326, -1
  %4732 = add i64 %len.addr.326, -2
  %sp33413 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4732
  %a33414 = load i256, ptr %sp33413, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !888)
  %ecx.memory.addr.i51649 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51650 = load ptr, ptr %ecx.memory.addr.i51649, align 8, !alias.scope !888, !noalias !891
  %ecx.memory.len.addr.i51651 = getelementptr inbounds i8, ptr %ecx.memory.i51650, i64 16
  %ecx.memory.len.i51652 = load i64, ptr %ecx.memory.len.addr.i51651, align 8, !noalias !893
  %ecx.memory.last_checkpoint.addr.i51653 = getelementptr inbounds i8, ptr %ecx.memory.i51650, i64 48
  %ecx.memory.last_checkpoint.i51654 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51653, align 8, !noalias !893
  %4733 = sub i64 %ecx.memory.len.i51652, %ecx.memory.last_checkpoint.i51654
  %4734 = icmp ugt i256 %a33414, 18446744073709551615
  %4735 = trunc i256 %a33414 to i64
  %4736 = add i64 %4735, 32
  %4737 = icmp ugt i64 %4735, -33
  %4738 = or i1 %4734, %4737
  %4739 = select i1 %4738, i64 -1, i64 %4736
  %4740 = icmp ugt i64 %4739, %4733
  br i1 %4740, label %resize.i51662, label %OP9589.MLOAD.contd, !prof !5

resize.i51662:                                    ; preds = %OP9587.JUMPDEST
  %4741 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4739), !noalias !891
  %.not.i51663 = icmp eq i8 %4741, 0
  br i1 %.not.i51663, label %OP9589.MLOAD.contd, label %return, !prof !6

OP9589.MLOAD.contd:                               ; preds = %OP9587.JUMPDEST, %resize.i51662
  %ecx.memory.buffer.ptr.shared.addr.i51656 = getelementptr inbounds i8, ptr %ecx.memory.i51650, i64 8
  %ecx.memory.buffer.ptr.shared.i51657 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51656, align 8, !noalias !893
  %ecx.memory.buffer.ptr.i51658 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51657, i64 %ecx.memory.last_checkpoint.i51654
  %slot.i51659 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51658, i64 %4735
  %slot.value.i51660 = load i256, ptr %slot.i51659, align 1, !noalias !893
  %4742 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51660)
  store i256 %4742, ptr %sp33413, align 16
  %.not47845 = icmp eq i256 %slot.value.i51660, 0
  br i1 %.not47845, label %OP9592.PUSH1, label %OP6305.JUMPDEST

OP9592.PUSH1:                                     ; preds = %OP9589.MLOAD.contd
  store i256 64, ptr %sp33413, align 16
  %4743 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.326
  %sp33424 = getelementptr i256, ptr %4743, i64 -2
  %sp33426 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4731
  store i256 64, ptr %sp33426, align 16
  %ecx.memory.i51666 = load ptr, ptr %ecx.memory.addr.i51649, align 8
  %ecx.memory.len.addr.i51667 = getelementptr inbounds i8, ptr %ecx.memory.i51666, i64 16
  %ecx.memory.len.i51668 = load i64, ptr %ecx.memory.len.addr.i51667, align 8, !noalias !894
  %ecx.memory.last_checkpoint.addr.i51669 = getelementptr inbounds i8, ptr %ecx.memory.i51666, i64 48
  %ecx.memory.last_checkpoint.i51670 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51669, align 8, !noalias !894
  %4744 = sub i64 %ecx.memory.len.i51668, %ecx.memory.last_checkpoint.i51670
  %4745 = icmp ult i64 %4744, 96
  br i1 %4745, label %resize.i51678, label %OP9594.MLOAD.contd, !prof !5

resize.i51678:                                    ; preds = %OP9592.PUSH1
  %4746 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !898
  %.not.i51679 = icmp eq i8 %4746, 0
  br i1 %.not.i51679, label %resize.i51678.OP9594.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51678.OP9594.MLOAD.contd_crit_edge:       ; preds = %resize.i51678
  %ecx.memory.i51682.pre = load ptr, ptr %ecx.memory.addr.i51649, align 8, !alias.scope !899
  br label %OP9594.MLOAD.contd

OP9594.MLOAD.contd:                               ; preds = %resize.i51678.OP9594.MLOAD.contd_crit_edge, %OP9592.PUSH1
  %ecx.memory.i51682 = phi ptr [ %ecx.memory.i51682.pre, %resize.i51678.OP9594.MLOAD.contd_crit_edge ], [ %ecx.memory.i51666, %OP9592.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i51672 = getelementptr inbounds i8, ptr %ecx.memory.i51666, i64 8
  %ecx.memory.buffer.ptr.shared.i51673 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51672, align 8, !noalias !894
  %ecx.memory.buffer.ptr.i51674 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51673, i64 %ecx.memory.last_checkpoint.i51670
  %slot.i51675 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51674, i64 64
  %slot.value.i51676 = load i256, ptr %slot.i51675, align 1, !noalias !894
  %4747 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51676)
  store i256 %4747, ptr %sp33426, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %4743, align 16
  %sp33436 = getelementptr i256, ptr %4743, i64 -1
  %sp33438 = getelementptr i256, ptr %4743, i64 1
  store i256 %4747, ptr %sp33438, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !899)
  %ecx.memory.len.addr.i51683 = getelementptr inbounds i8, ptr %ecx.memory.i51682, i64 16
  %ecx.memory.len.i51684 = load i64, ptr %ecx.memory.len.addr.i51683, align 8, !noalias !899
  %ecx.memory.last_checkpoint.addr.i51685 = getelementptr inbounds i8, ptr %ecx.memory.i51682, i64 48
  %ecx.memory.last_checkpoint.i51686 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51685, align 8, !noalias !899
  %4748 = sub i64 %ecx.memory.len.i51684, %ecx.memory.last_checkpoint.i51686
  %4749 = icmp ugt i256 %4747, 18446744073709551615
  %4750 = trunc i256 %4747 to i64
  %4751 = add i64 %4750, 32
  %4752 = icmp ugt i64 %4750, -33
  %4753 = or i1 %4749, %4752
  %4754 = select i1 %4753, i64 -1, i64 %4751
  %4755 = icmp ugt i64 %4754, %4748
  br i1 %4755, label %resize.i51693, label %OP9598.PUSH1, !prof !5

resize.i51693:                                    ; preds = %OP9594.MLOAD.contd
  %4756 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4754)
  %.not.i51694 = icmp eq i8 %4756, 0
  br i1 %.not.i51694, label %OP9598.PUSH1, label %return, !prof !6

OP9598.PUSH1:                                     ; preds = %OP9594.MLOAD.contd, %resize.i51693
  %ecx.memory.buffer.ptr.shared.addr.i51688 = getelementptr inbounds i8, ptr %ecx.memory.i51682, i64 8
  %ecx.memory.buffer.ptr.shared.i51689 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51688, align 8, !noalias !899
  %ecx.memory.buffer.ptr.i51690 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51689, i64 %ecx.memory.last_checkpoint.i51686
  %slot.i51691 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51690, i64 %4750
  store i256 2692334344, ptr %slot.i51691, align 1, !noalias !899
  store i256 32, ptr %4743, align 16
  store i256 4, ptr %sp33438, align 16
  %dup333450 = load i256, ptr %sp33436, align 16
  %sp33451 = getelementptr i256, ptr %4743, i64 2
  store i256 %dup333450, ptr %sp33451, align 16
  %4757 = add i256 %dup333450, 4
  store i256 %4757, ptr %sp33438, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !902)
  %ecx.memory.i51697 = load ptr, ptr %ecx.memory.addr.i51649, align 8, !alias.scope !902
  %ecx.memory.len.addr.i51698 = getelementptr inbounds i8, ptr %ecx.memory.i51697, i64 16
  %ecx.memory.len.i51699 = load i64, ptr %ecx.memory.len.addr.i51698, align 8, !noalias !902
  %ecx.memory.last_checkpoint.addr.i51700 = getelementptr inbounds i8, ptr %ecx.memory.i51697, i64 48
  %ecx.memory.last_checkpoint.i51701 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51700, align 8, !noalias !902
  %4758 = sub i64 %ecx.memory.len.i51699, %ecx.memory.last_checkpoint.i51701
  %4759 = icmp ugt i256 %4757, 18446744073709551615
  %4760 = trunc i256 %4757 to i64
  %4761 = add i64 %4760, 32
  %4762 = icmp ugt i64 %4760, -33
  %4763 = or i1 %4759, %4762
  %4764 = select i1 %4763, i64 -1, i64 %4761
  %4765 = icmp ugt i64 %4764, %4758
  br i1 %4765, label %resize.i51708, label %OP9603.PUSH1, !prof !5

resize.i51708:                                    ; preds = %OP9598.PUSH1
  %4766 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4764)
  %.not.i51709 = icmp eq i8 %4766, 0
  br i1 %.not.i51709, label %OP9603.PUSH1, label %return, !prof !6

OP9603.PUSH1:                                     ; preds = %OP9598.PUSH1, %resize.i51708
  %ecx.memory.buffer.ptr.shared.addr.i51703 = getelementptr inbounds i8, ptr %ecx.memory.i51697, i64 8
  %ecx.memory.buffer.ptr.shared.i51704 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51703, align 8, !noalias !902
  %ecx.memory.buffer.ptr.i51705 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51704, i64 %ecx.memory.last_checkpoint.i51701
  %slot.i51706 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51705, i64 %4760
  store i256 14474011154664524427946373126085988481658748083205070504932198000989141204992, ptr %slot.i51706, align 1, !noalias !902
  store i256 30, ptr %4743, align 16
  store i256 36, ptr %sp33438, align 16
  %dup333469 = load i256, ptr %sp33436, align 16
  store i256 %dup333469, ptr %sp33451, align 16
  %4767 = add i256 %dup333469, 36
  store i256 %4767, ptr %sp33438, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !905)
  %ecx.memory.i51712 = load ptr, ptr %ecx.memory.addr.i51649, align 8, !alias.scope !905
  %ecx.memory.len.addr.i51713 = getelementptr inbounds i8, ptr %ecx.memory.i51712, i64 16
  %ecx.memory.len.i51714 = load i64, ptr %ecx.memory.len.addr.i51713, align 8, !noalias !905
  %ecx.memory.last_checkpoint.addr.i51715 = getelementptr inbounds i8, ptr %ecx.memory.i51712, i64 48
  %ecx.memory.last_checkpoint.i51716 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51715, align 8, !noalias !905
  %4768 = sub i64 %ecx.memory.len.i51714, %ecx.memory.last_checkpoint.i51716
  %4769 = icmp ugt i256 %4767, 18446744073709551615
  %4770 = trunc i256 %4767 to i64
  %4771 = add i64 %4770, 32
  %4772 = icmp ugt i64 %4770, -33
  %4773 = or i1 %4769, %4772
  %4774 = select i1 %4773, i64 -1, i64 %4771
  %4775 = icmp ugt i64 %4774, %4768
  br i1 %4775, label %resize.i51723, label %OP9608.PUSH32, !prof !5

resize.i51723:                                    ; preds = %OP9603.PUSH1
  %4776 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4774)
  %.not.i51724 = icmp eq i8 %4776, 0
  br i1 %.not.i51724, label %OP9608.PUSH32, label %return, !prof !6

OP9608.PUSH32:                                    ; preds = %OP9603.PUSH1, %resize.i51723
  %ecx.memory.buffer.ptr.shared.addr.i51718 = getelementptr inbounds i8, ptr %ecx.memory.i51712, i64 8
  %ecx.memory.buffer.ptr.shared.i51719 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51718, align 8, !noalias !905
  %ecx.memory.buffer.ptr.i51720 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51719, i64 %ecx.memory.last_checkpoint.i51716
  %slot.i51721 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51720, i64 %4770
  store i256 13569385457497991651199724805705614201555076328004753598373935625927319879680, ptr %slot.i51721, align 1, !noalias !905
  store i256 31848090948271897445588461047521862320759905718111296191580579596391332249600, ptr %4743, align 16
  store i256 68, ptr %sp33438, align 16
  %dup333488 = load i256, ptr %sp33436, align 16
  store i256 %dup333488, ptr %sp33451, align 16
  %4777 = add i256 %dup333488, 68
  store i256 %4777, ptr %sp33438, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !908)
  %ecx.memory.i51727 = load ptr, ptr %ecx.memory.addr.i51649, align 8, !alias.scope !908
  %ecx.memory.len.addr.i51728 = getelementptr inbounds i8, ptr %ecx.memory.i51727, i64 16
  %ecx.memory.len.i51729 = load i64, ptr %ecx.memory.len.addr.i51728, align 8, !noalias !908
  %ecx.memory.last_checkpoint.addr.i51730 = getelementptr inbounds i8, ptr %ecx.memory.i51727, i64 48
  %ecx.memory.last_checkpoint.i51731 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51730, align 8, !noalias !908
  %4778 = sub i64 %ecx.memory.len.i51729, %ecx.memory.last_checkpoint.i51731
  %4779 = icmp ugt i256 %4777, 18446744073709551615
  %4780 = trunc i256 %4777 to i64
  %4781 = add i64 %4780, 32
  %4782 = icmp ugt i64 %4780, -33
  %4783 = or i1 %4779, %4782
  %4784 = select i1 %4783, i64 -1, i64 %4781
  %4785 = icmp ugt i64 %4784, %4778
  br i1 %4785, label %resize.i51738, label %OP9613.SWAP1, !prof !5

resize.i51738:                                    ; preds = %OP9608.PUSH32
  %4786 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4784)
  %.not.i51739 = icmp eq i8 %4786, 0
  br i1 %.not.i51739, label %OP9613.SWAP1, label %return, !prof !6

OP9613.SWAP1:                                     ; preds = %OP9608.PUSH32, %resize.i51738
  %ecx.memory.buffer.ptr.shared.addr.i51733 = getelementptr inbounds i8, ptr %ecx.memory.i51727, i64 8
  %ecx.memory.buffer.ptr.shared.i51734 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51733, align 8, !noalias !908
  %ecx.memory.buffer.ptr.i51735 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51734, i64 %ecx.memory.last_checkpoint.i51731
  %slot.i51736 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51735, i64 %4780
  store i256 700162184360225506110063135747584550251677974626460969921673645810346310, ptr %slot.i51736, align 1, !noalias !908
  %swap.a33503 = load i256, ptr %sp33436, align 16
  %swap.b33505 = load i256, ptr %sp33424, align 16
  store i256 %swap.a33503, ptr %sp33424, align 16
  store i256 %swap.b33505, ptr %sp33436, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !911)
  %ecx.memory.i51742 = load ptr, ptr %ecx.memory.addr.i51649, align 8, !alias.scope !911, !noalias !914
  %ecx.memory.len.addr.i51743 = getelementptr inbounds i8, ptr %ecx.memory.i51742, i64 16
  %ecx.memory.len.i51744 = load i64, ptr %ecx.memory.len.addr.i51743, align 8, !noalias !916
  %ecx.memory.last_checkpoint.addr.i51745 = getelementptr inbounds i8, ptr %ecx.memory.i51742, i64 48
  %ecx.memory.last_checkpoint.i51746 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51745, align 8, !noalias !916
  %4787 = sub i64 %ecx.memory.len.i51744, %ecx.memory.last_checkpoint.i51746
  %4788 = icmp ugt i256 %swap.b33505, 18446744073709551615
  %4789 = trunc i256 %swap.b33505 to i64
  %4790 = add i64 %4789, 32
  %4791 = icmp ugt i64 %4789, -33
  %4792 = or i1 %4788, %4791
  %4793 = select i1 %4792, i64 -1, i64 %4790
  %4794 = icmp ugt i64 %4793, %4787
  br i1 %4794, label %resize.i51754, label %OP9614.MLOAD.contd, !prof !5

resize.i51754:                                    ; preds = %OP9613.SWAP1
  %4795 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4793), !noalias !914
  %.not.i51755 = icmp eq i8 %4795, 0
  br i1 %.not.i51755, label %resize.i51754.OP9614.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51754.OP9614.MLOAD.contd_crit_edge:       ; preds = %resize.i51754
  %swap.b33516.pre = load i256, ptr %sp33424, align 16
  br label %OP9614.MLOAD.contd

OP9614.MLOAD.contd:                               ; preds = %resize.i51754.OP9614.MLOAD.contd_crit_edge, %OP9613.SWAP1
  %swap.b33516 = phi i256 [ %swap.b33516.pre, %resize.i51754.OP9614.MLOAD.contd_crit_edge ], [ %swap.a33503, %OP9613.SWAP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i51748 = getelementptr inbounds i8, ptr %ecx.memory.i51742, i64 8
  %ecx.memory.buffer.ptr.shared.i51749 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51748, align 8, !noalias !916
  %ecx.memory.buffer.ptr.i51750 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51749, i64 %ecx.memory.last_checkpoint.i51746
  %slot.i51751 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51750, i64 %4789
  %slot.value.i51752 = load i256, ptr %slot.i51751, align 1, !noalias !916
  %4796 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51752)
  store i256 %4796, ptr %sp33426, align 16
  store i256 %4796, ptr %sp33424, align 16
  store i256 %swap.b33516, ptr %sp33436, align 16
  store i256 %4796, ptr %4743, align 16
  store i256 %4796, ptr %sp33436, align 16
  store i256 %swap.b33516, ptr %4743, align 16
  %4797 = sub i256 %swap.b33516, %4796
  store i256 %4797, ptr %sp33436, align 16
  store i256 100, ptr %4743, align 16
  %4798 = add i256 %4797, 100
  store i256 %4798, ptr %sp33436, align 16
  store i256 %4798, ptr %sp33424, align 16
  store i256 %4796, ptr %sp33436, align 16
  %4799 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33424, i8 16)
  %.not47852 = icmp eq i8 %4799, 0
  %spec.select36668 = select i1 %.not47852, i8 16, i8 %4799, !prof !6
  br label %return

OP9623.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8314.JUMPDEST
  %len.addr.327 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %3942, %OP8314.JUMPDEST ]
  %sp33549 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.327
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp33549, align 16
  %4800 = add i64 %len.addr.327, 2
  %sp33551 = getelementptr i256, ptr %sp33549, i64 -2
  %dup333552 = load i256, ptr %sp33551, align 16
  %sp33553 = getelementptr i256, ptr %sp33549, i64 1
  store i256 %dup333552, ptr %sp33553, align 16
  %4801 = and i256 %dup333552, 1461501637330902918203684832716283019655932542975
  store i256 %4801, ptr %sp33549, align 16
  store i256 0, ptr %sp33553, align 16
  %4802 = add i64 %len.addr.327, 3
  %sp33565 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4800
  store i256 %4801, ptr %sp33565, align 16
  %4803 = add i64 %len.addr.327, 4
  %sp33569 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4802
  store i256 0, ptr %sp33569, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !917)
  %ecx.memory.i51758 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !917
  %ecx.memory.len.addr.i51759 = getelementptr inbounds i8, ptr %ecx.memory.i51758, i64 16
  %ecx.memory.len.i51760 = load i64, ptr %ecx.memory.len.addr.i51759, align 8, !noalias !917
  %ecx.memory.last_checkpoint.addr.i51761 = getelementptr inbounds i8, ptr %ecx.memory.i51758, i64 48
  %ecx.memory.last_checkpoint.i51762 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51761, align 8, !noalias !917
  %4804 = sub i64 %ecx.memory.len.i51760, %ecx.memory.last_checkpoint.i51762
  %4805 = icmp ult i64 %4804, 32
  br i1 %4805, label %resize.i51768, label %OP9631.PUSH1, !prof !5

resize.i51768:                                    ; preds = %OP9623.JUMPDEST
  %4806 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i51769 = icmp eq i8 %4806, 0
  br i1 %.not.i51769, label %OP9631.PUSH1, label %return, !prof !6

OP9631.PUSH1:                                     ; preds = %OP9623.JUMPDEST, %resize.i51768
  %ecx.memory.buffer.ptr.shared.addr.i51764 = getelementptr inbounds i8, ptr %ecx.memory.i51758, i64 8
  %ecx.memory.buffer.ptr.shared.i51765 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51764, align 8, !noalias !917
  %ecx.memory.buffer.ptr.i51766 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51765, i64 %ecx.memory.last_checkpoint.i51762
  %4807 = tail call i256 @llvm.bswap.i256(i256 %4801)
  store i256 %4807, ptr %ecx.memory.buffer.ptr.i51766, align 1, !noalias !917
  store i256 16, ptr %sp33565, align 16
  store i256 32, ptr %sp33569, align 16
  store i256 32, ptr %sp33565, align 16
  store i256 16, ptr %sp33569, align 16
  %4808 = add i64 %len.addr.327, 5
  %sp33587 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4803
  store i256 32, ptr %sp33587, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !920)
  %ecx.memory.i51772 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !920
  %ecx.memory.len.addr.i51773 = getelementptr inbounds i8, ptr %ecx.memory.i51772, i64 16
  %ecx.memory.len.i51774 = load i64, ptr %ecx.memory.len.addr.i51773, align 8, !noalias !920
  %ecx.memory.last_checkpoint.addr.i51775 = getelementptr inbounds i8, ptr %ecx.memory.i51772, i64 48
  %ecx.memory.last_checkpoint.i51776 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51775, align 8, !noalias !920
  %4809 = sub i64 %ecx.memory.len.i51774, %ecx.memory.last_checkpoint.i51776
  %4810 = icmp ult i64 %4809, 64
  br i1 %4810, label %resize.i51783, label %OP9636.PUSH1, !prof !5

resize.i51783:                                    ; preds = %OP9631.PUSH1
  %4811 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i51784 = icmp eq i8 %4811, 0
  br i1 %.not.i51784, label %OP9636.PUSH1, label %return, !prof !6

OP9636.PUSH1:                                     ; preds = %OP9631.PUSH1, %resize.i51783
  %ecx.memory.buffer.ptr.shared.addr.i51778 = getelementptr inbounds i8, ptr %ecx.memory.i51772, i64 8
  %ecx.memory.buffer.ptr.shared.i51779 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51778, align 8, !noalias !920
  %ecx.memory.buffer.ptr.i51780 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51779, i64 %ecx.memory.last_checkpoint.i51776
  %slot.i51781 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51780, i64 32
  store i256 7237005577332262213973186563042994240829374041602535252466099000494570602496, ptr %slot.i51781, align 1, !noalias !920
  store i256 64, ptr %sp33569, align 16
  store i256 64, ptr %sp33587, align 16
  %dup433601 = load i256, ptr %sp33553, align 16
  %sp33602 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4808
  store i256 %dup433601, ptr %sp33602, align 16
  %4812 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33587)
  %.not47954 = icmp eq i8 %4812, 0
  br i1 %.not47954, label %OP9640.DUP6, label %return, !prof !6

OP9640.DUP6:                                      ; preds = %OP9636.PUSH1
  %sp33606 = getelementptr i256, ptr %sp33549, i64 -1
  %dup633607 = load i256, ptr %sp33606, align 16
  store i256 %dup633607, ptr %sp33602, align 16
  %dup533611 = load i256, ptr %sp33553, align 16
  %sp33612 = getelementptr i256, ptr %sp33549, i64 6
  store i256 %dup533611, ptr %sp33612, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !923)
  %ecx.memory.i51787 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !923
  %ecx.memory.len.addr.i51788 = getelementptr inbounds i8, ptr %ecx.memory.i51787, i64 16
  %ecx.memory.len.i51789 = load i64, ptr %ecx.memory.len.addr.i51788, align 8, !noalias !923
  %ecx.memory.last_checkpoint.addr.i51790 = getelementptr inbounds i8, ptr %ecx.memory.i51787, i64 48
  %ecx.memory.last_checkpoint.i51791 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51790, align 8, !noalias !923
  %4813 = sub i64 %ecx.memory.len.i51789, %ecx.memory.last_checkpoint.i51791
  %4814 = icmp ugt i256 %dup533611, 18446744073709551615
  %4815 = trunc i256 %dup533611 to i64
  %4816 = add i64 %4815, 32
  %4817 = icmp ugt i64 %4815, -33
  %4818 = or i1 %4814, %4817
  %4819 = select i1 %4818, i64 -1, i64 %4816
  %4820 = icmp ugt i64 %4819, %4813
  br i1 %4820, label %resize.i51798, label %OP9643.SWAP1, !prof !5

resize.i51798:                                    ; preds = %OP9640.DUP6
  %4821 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4819)
  %.not.i51799 = icmp eq i8 %4821, 0
  br i1 %.not.i51799, label %OP9643.SWAP1, label %return, !prof !6

OP9643.SWAP1:                                     ; preds = %OP9640.DUP6, %resize.i51798
  %ecx.memory.buffer.ptr.shared.addr.i51793 = getelementptr inbounds i8, ptr %ecx.memory.i51787, i64 8
  %ecx.memory.buffer.ptr.shared.i51794 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51793, align 8, !noalias !923
  %ecx.memory.buffer.ptr.i51795 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51794, i64 %ecx.memory.last_checkpoint.i51791
  %slot.i51796 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51795, i64 %4815
  %4822 = tail call i256 @llvm.bswap.i256(i256 %dup633607)
  store i256 %4822, ptr %slot.i51796, align 1, !noalias !923
  %swap.a33620 = load i256, ptr %sp33587, align 16
  %swap.b33622 = load i256, ptr %sp33569, align 16
  store i256 %swap.a33620, ptr %sp33569, align 16
  store i256 %swap.b33622, ptr %sp33587, align 16
  %swap.b33627 = load i256, ptr %sp33565, align 16
  store i256 %swap.b33622, ptr %sp33565, align 16
  store i256 %swap.b33627, ptr %sp33587, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !926)
  %ecx.memory.i51802 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !926
  %ecx.memory.len.addr.i51803 = getelementptr inbounds i8, ptr %ecx.memory.i51802, i64 16
  %ecx.memory.len.i51804 = load i64, ptr %ecx.memory.len.addr.i51803, align 8, !noalias !926
  %ecx.memory.last_checkpoint.addr.i51805 = getelementptr inbounds i8, ptr %ecx.memory.i51802, i64 48
  %ecx.memory.last_checkpoint.i51806 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51805, align 8, !noalias !926
  %4823 = sub i64 %ecx.memory.len.i51804, %ecx.memory.last_checkpoint.i51806
  %4824 = icmp ugt i256 %swap.b33627, 18446744073709551615
  %4825 = trunc i256 %swap.b33627 to i64
  %4826 = add i64 %4825, 32
  %4827 = icmp ugt i64 %4825, -33
  %4828 = or i1 %4824, %4827
  %4829 = select i1 %4828, i64 -1, i64 %4826
  %4830 = icmp ugt i64 %4829, %4823
  br i1 %4830, label %resize.i51813, label %OP9646.DUP1, !prof !5

resize.i51813:                                    ; preds = %OP9643.SWAP1
  %4831 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4829)
  %.not.i51814 = icmp eq i8 %4831, 0
  br i1 %.not.i51814, label %OP9646.DUP1, label %return, !prof !6

OP9646.DUP1:                                      ; preds = %OP9643.SWAP1, %resize.i51813
  %ecx.memory.buffer.ptr.shared.addr.i51808 = getelementptr inbounds i8, ptr %ecx.memory.i51802, i64 8
  %ecx.memory.buffer.ptr.shared.i51809 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51808, align 8, !noalias !926
  %ecx.memory.buffer.ptr.i51810 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51809, i64 %ecx.memory.last_checkpoint.i51806
  %slot.i51811 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51810, i64 %4825
  %4832 = tail call i256 @llvm.bswap.i256(i256 %swap.a33620)
  store i256 %4832, ptr %slot.i51811, align 1, !noalias !926
  %dup133635 = load i256, ptr %sp33565, align 16
  store i256 %dup133635, ptr %sp33569, align 16
  %dup333639 = load i256, ptr %sp33553, align 16
  store i256 %dup333639, ptr %sp33587, align 16
  %4833 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33569)
  %.not47957 = icmp eq i8 %4833, 0
  br i1 %.not47957, label %OP9649.DUP1, label %return, !prof !6

OP9649.DUP1:                                      ; preds = %OP9646.DUP1
  %dup133645 = load i256, ptr %sp33569, align 16
  store i256 %dup133645, ptr %sp33587, align 16
  %4834 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33587, i8 17)
  %.not47958 = icmp eq i8 %4834, 0
  br i1 %.not47958, label %OP9651.PUSH32, label %return, !prof !6

OP9651.PUSH32:                                    ; preds = %OP9649.DUP1
  store i256 -256, ptr %sp33602, align 16
  %b33655 = load i256, ptr %sp33587, align 16
  %4835 = and i256 %b33655, -256
  store i256 %4835, ptr %sp33587, align 16
  store i256 1, ptr %sp33602, align 16
  %4836 = or disjoint i256 %4835, 1
  store i256 %4836, ptr %sp33587, align 16
  %swap.b33669 = load i256, ptr %sp33569, align 16
  store i256 %4836, ptr %sp33569, align 16
  store i256 %swap.b33669, ptr %sp33587, align 16
  %4837 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33569, i8 17)
  %.not47959 = icmp eq i8 %4837, 0
  br i1 %.not47959, label %OP9657.MLOAD, label %return, !prof !6

OP9657.MLOAD:                                     ; preds = %OP9651.PUSH32
  %a33674 = load i256, ptr %sp33565, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !929)
  %ecx.memory.i51817 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !929, !noalias !932
  %ecx.memory.len.addr.i51818 = getelementptr inbounds i8, ptr %ecx.memory.i51817, i64 16
  %ecx.memory.len.i51819 = load i64, ptr %ecx.memory.len.addr.i51818, align 8, !noalias !934
  %ecx.memory.last_checkpoint.addr.i51820 = getelementptr inbounds i8, ptr %ecx.memory.i51817, i64 48
  %ecx.memory.last_checkpoint.i51821 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51820, align 8, !noalias !934
  %4838 = sub i64 %ecx.memory.len.i51819, %ecx.memory.last_checkpoint.i51821
  %4839 = icmp ugt i256 %a33674, 18446744073709551615
  %4840 = trunc i256 %a33674 to i64
  %4841 = add i64 %4840, 32
  %4842 = icmp ugt i64 %4840, -33
  %4843 = or i1 %4839, %4842
  %4844 = select i1 %4843, i64 -1, i64 %4841
  %4845 = icmp ugt i64 %4844, %4838
  br i1 %4845, label %resize.i51829, label %OP9657.MLOAD.contd, !prof !5

resize.i51829:                                    ; preds = %OP9657.MLOAD
  %4846 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4844), !noalias !932
  %.not.i51830 = icmp eq i8 %4846, 0
  br i1 %.not.i51830, label %OP9657.MLOAD.contd, label %return, !prof !6

OP9657.MLOAD.contd:                               ; preds = %OP9657.MLOAD, %resize.i51829
  %ecx.memory.buffer.ptr.shared.addr.i51823 = getelementptr inbounds i8, ptr %ecx.memory.i51817, i64 8
  %ecx.memory.buffer.ptr.shared.i51824 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51823, align 8, !noalias !934
  %ecx.memory.buffer.ptr.i51825 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51824, i64 %ecx.memory.last_checkpoint.i51821
  %slot.i51826 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51825, i64 %4840
  %slot.value.i51827 = load i256, ptr %slot.i51826, align 1, !noalias !934
  %4847 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51827)
  store i256 %4847, ptr %sp33565, align 16
  %dup433680 = load i256, ptr %sp33606, align 16
  store i256 %dup433680, ptr %sp33569, align 16
  %swap.b33686 = load i256, ptr %sp33549, align 16
  store i256 %dup433680, ptr %sp33549, align 16
  store i256 %swap.b33686, ptr %sp33569, align 16
  %swap.b33691 = load i256, ptr %sp33553, align 16
  store i256 %swap.b33686, ptr %sp33553, align 16
  store i256 %swap.b33691, ptr %sp33569, align 16
  store i256 -46647742631383443121135336525040516412906357620273809295317875818773300440923, ptr %sp33587, align 16
  store i256 -46647742631383443121135336525040516412906357620273809295317875818773300440923, ptr %sp33565, align 16
  store i256 %4847, ptr %sp33587, align 16
  %4848 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33549, i8 3)
  %.not47961 = icmp eq i8 %4848, 0
  br i1 %.not47961, label %OP9664.POP, label %return, !prof !6

OP9664.POP:                                       ; preds = %OP9657.MLOAD.contd
  %4849 = add i64 %len.addr.327, -3
  %sp33704 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4849
  %a33705 = load i256, ptr %sp33704, align 16
  br label %dynamic_jump_table.backedge

OP9667.JUMPDEST:                                  ; preds = %OP8464.MLOAD.contd, %dynamic_jump_table, %OP9414.JUMPDEST
  %len.addr.328 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %4627, %OP9414.JUMPDEST ], [ %3965, %OP8464.MLOAD.contd ]
  %4850 = add i64 %len.addr.328, 1
  %sp33708 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.328
  store i256 64, ptr %sp33708, align 16
  %ecx.memory.i51833 = load ptr, ptr %ecx.memory.addr.i51832, align 8
  %ecx.memory.len.addr.i51834 = getelementptr inbounds i8, ptr %ecx.memory.i51833, i64 16
  %ecx.memory.len.i51835 = load i64, ptr %ecx.memory.len.addr.i51834, align 8, !noalias !935
  %ecx.memory.last_checkpoint.addr.i51836 = getelementptr inbounds i8, ptr %ecx.memory.i51833, i64 48
  %ecx.memory.last_checkpoint.i51837 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51836, align 8, !noalias !935
  %4851 = sub i64 %ecx.memory.len.i51835, %ecx.memory.last_checkpoint.i51837
  %4852 = icmp ult i64 %4851, 96
  br i1 %4852, label %resize.i51845, label %OP9669.MLOAD.contd, !prof !5

resize.i51845:                                    ; preds = %OP9667.JUMPDEST
  %4853 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !939
  %.not.i51846 = icmp eq i8 %4853, 0
  br i1 %.not.i51846, label %resize.i51845.OP9669.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51845.OP9669.MLOAD.contd_crit_edge:       ; preds = %resize.i51845
  %ecx.memory.i51849.pre = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !940
  br label %OP9669.MLOAD.contd

OP9669.MLOAD.contd:                               ; preds = %resize.i51845.OP9669.MLOAD.contd_crit_edge, %OP9667.JUMPDEST
  %ecx.memory.i51849 = phi ptr [ %ecx.memory.i51849.pre, %resize.i51845.OP9669.MLOAD.contd_crit_edge ], [ %ecx.memory.i51833, %OP9667.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i51839 = getelementptr inbounds i8, ptr %ecx.memory.i51833, i64 8
  %ecx.memory.buffer.ptr.shared.i51840 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51839, align 8, !noalias !935
  %ecx.memory.buffer.ptr.i51841 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51840, i64 %ecx.memory.last_checkpoint.i51837
  %slot.i51842 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51841, i64 64
  %slot.value.i51843 = load i256, ptr %slot.i51842, align 1, !noalias !935
  %4854 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51843)
  store i256 %4854, ptr %sp33708, align 16
  %sp33716 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4850
  store i256 11309588061646438093662687302255421419811724423900836950936401294474059186176, ptr %sp33716, align 16
  %sp33720 = getelementptr i256, ptr %sp33708, i64 2
  store i256 %4854, ptr %sp33720, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !940)
  %ecx.memory.len.addr.i51850 = getelementptr inbounds i8, ptr %ecx.memory.i51849, i64 16
  %ecx.memory.len.i51851 = load i64, ptr %ecx.memory.len.addr.i51850, align 8, !noalias !940
  %ecx.memory.last_checkpoint.addr.i51852 = getelementptr inbounds i8, ptr %ecx.memory.i51849, i64 48
  %ecx.memory.last_checkpoint.i51853 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51852, align 8, !noalias !940
  %4855 = sub i64 %ecx.memory.len.i51851, %ecx.memory.last_checkpoint.i51853
  %4856 = icmp ugt i256 %4854, 18446744073709551615
  %4857 = trunc i256 %4854 to i64
  %4858 = add i64 %4857, 32
  %4859 = icmp ugt i64 %4857, -33
  %4860 = or i1 %4856, %4859
  %4861 = select i1 %4860, i64 -1, i64 %4858
  %4862 = icmp ugt i64 %4861, %4855
  br i1 %4862, label %resize.i51860, label %OP9673.PUSH1, !prof !5

resize.i51860:                                    ; preds = %OP9669.MLOAD.contd
  %4863 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4861)
  %.not.i51861 = icmp eq i8 %4863, 0
  br i1 %.not.i51861, label %OP9673.PUSH1, label %return, !prof !6

OP9673.PUSH1:                                     ; preds = %OP9669.MLOAD.contd, %resize.i51860
  %ecx.memory.buffer.ptr.shared.addr.i51855 = getelementptr inbounds i8, ptr %ecx.memory.i51849, i64 8
  %ecx.memory.buffer.ptr.shared.i51856 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51855, align 8, !noalias !940
  %ecx.memory.buffer.ptr.i51857 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51856, i64 %ecx.memory.last_checkpoint.i51853
  %slot.i51858 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51857, i64 %4857
  store i256 281, ptr %slot.i51858, align 1, !noalias !940
  store i256 2, ptr %sp33716, align 16
  %dup233730 = load i256, ptr %sp33708, align 16
  store i256 %dup233730, ptr %sp33720, align 16
  %4864 = add i256 %dup233730, 2
  store i256 %4864, ptr %sp33716, align 16
  %sp33741 = getelementptr i256, ptr %sp33708, i64 -2
  %swap.b33742 = load i256, ptr %sp33741, align 16
  store i256 %4864, ptr %sp33741, align 16
  store i256 %swap.b33742, ptr %sp33716, align 16
  store i256 %swap.b33742, ptr %sp33708, align 16
  store i256 %dup233730, ptr %sp33716, align 16
  store i256 %dup233730, ptr %sp33741, align 16
  store i256 %4864, ptr %sp33716, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !943)
  %ecx.memory.i51864 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !943
  %ecx.memory.len.addr.i51865 = getelementptr inbounds i8, ptr %ecx.memory.i51864, i64 16
  %ecx.memory.len.i51866 = load i64, ptr %ecx.memory.len.addr.i51865, align 8, !noalias !943
  %ecx.memory.last_checkpoint.addr.i51867 = getelementptr inbounds i8, ptr %ecx.memory.i51864, i64 48
  %ecx.memory.last_checkpoint.i51868 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51867, align 8, !noalias !943
  %4865 = sub i64 %ecx.memory.len.i51866, %ecx.memory.last_checkpoint.i51868
  %4866 = icmp ugt i256 %4864, 18446744073709551615
  %4867 = trunc i256 %4864 to i64
  %4868 = add i64 %4867, 32
  %4869 = icmp ugt i64 %4867, -33
  %4870 = or i1 %4866, %4869
  %4871 = select i1 %4870, i64 -1, i64 %4868
  %4872 = icmp ugt i64 %4871, %4865
  br i1 %4872, label %resize.i51875, label %OP9680.PUSH1, !prof !5

resize.i51875:                                    ; preds = %OP9673.PUSH1
  %4873 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4871)
  %.not.i51876 = icmp eq i8 %4873, 0
  br i1 %.not.i51876, label %OP9680.PUSH1, label %return, !prof !6

OP9680.PUSH1:                                     ; preds = %OP9673.PUSH1, %resize.i51875
  %ecx.memory.buffer.ptr.shared.addr.i51870 = getelementptr inbounds i8, ptr %ecx.memory.i51864, i64 8
  %ecx.memory.buffer.ptr.shared.i51871 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51870, align 8, !noalias !943
  %ecx.memory.buffer.ptr.i51872 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51871, i64 %ecx.memory.last_checkpoint.i51868
  %slot.i51873 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51872, i64 %4867
  %4874 = tail call i256 @llvm.bswap.i256(i256 %swap.b33742)
  store i256 %4874, ptr %slot.i51873, align 1, !noalias !943
  store i256 34, ptr %sp33708, align 16
  %dup333762 = load i256, ptr %sp33741, align 16
  store i256 %dup333762, ptr %sp33716, align 16
  %4875 = add i256 %dup333762, 34
  store i256 %4875, ptr %sp33708, align 16
  %4876 = add i64 %len.addr.328, -1
  %sp33773 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4876
  %b33774 = load i256, ptr %sp33773, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !946)
  %ecx.memory.i51879 = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !946
  %ecx.memory.len.addr.i51880 = getelementptr inbounds i8, ptr %ecx.memory.i51879, i64 16
  %ecx.memory.len.i51881 = load i64, ptr %ecx.memory.len.addr.i51880, align 8, !noalias !946
  %ecx.memory.last_checkpoint.addr.i51882 = getelementptr inbounds i8, ptr %ecx.memory.i51879, i64 48
  %ecx.memory.last_checkpoint.i51883 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51882, align 8, !noalias !946
  %4877 = sub i64 %ecx.memory.len.i51881, %ecx.memory.last_checkpoint.i51883
  %4878 = icmp ugt i256 %4875, 18446744073709551615
  %4879 = trunc i256 %4875 to i64
  %4880 = add i64 %4879, 32
  %4881 = icmp ugt i64 %4879, -33
  %4882 = or i1 %4878, %4881
  %4883 = select i1 %4882, i64 -1, i64 %4880
  %4884 = icmp ugt i64 %4883, %4877
  br i1 %4884, label %resize.i51890, label %OP9684.PUSH1, !prof !5

resize.i51890:                                    ; preds = %OP9680.PUSH1
  %4885 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4883)
  %.not.i51891 = icmp eq i8 %4885, 0
  br i1 %.not.i51891, label %OP9684.PUSH1, label %return, !prof !6

OP9684.PUSH1:                                     ; preds = %OP9680.PUSH1, %resize.i51890
  %ecx.memory.buffer.ptr.shared.addr.i51885 = getelementptr inbounds i8, ptr %ecx.memory.i51879, i64 8
  %ecx.memory.buffer.ptr.shared.i51886 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51885, align 8, !noalias !946
  %ecx.memory.buffer.ptr.i51887 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51886, i64 %ecx.memory.last_checkpoint.i51883
  %slot.i51888 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51887, i64 %4879
  %4886 = tail call i256 @llvm.bswap.i256(i256 %b33774)
  store i256 %4886, ptr %slot.i51888, align 1, !noalias !946
  store i256 66, ptr %sp33773, align 16
  %sp33778 = getelementptr i256, ptr %sp33708, i64 -1
  %swap.b33781 = load i256, ptr %sp33741, align 16
  store i256 66, ptr %sp33741, align 16
  store i256 %swap.b33781, ptr %sp33778, align 16
  %4887 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp33741)
  %.not47951 = icmp eq i8 %4887, 0
  br i1 %.not47951, label %OP9687.SWAP1, label %return, !prof !6

OP9687.SWAP1:                                     ; preds = %OP9684.PUSH1
  %swap.a33786 = load i256, ptr %sp33741, align 16
  %sp33787 = getelementptr i256, ptr %sp33708, i64 -3
  %swap.b33788 = load i256, ptr %sp33787, align 16
  store i256 %swap.a33786, ptr %sp33787, align 16
  store i256 %swap.b33788, ptr %sp33741, align 16
  %4888 = add i64 %len.addr.328, -2
  br label %dynamic_jump_table.backedge

OP9689.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8746.SWAP2
  %len.addr.329 = phi i64 [ %4178, %OP8746.SWAP2 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp33794 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.329
  store i256 0, ptr %sp33794, align 16
  %4889 = add i64 %len.addr.329, 2
  %sp33796 = getelementptr i256, ptr %sp33794, i64 -1
  %dup233797 = load i256, ptr %sp33796, align 16
  %sp33798 = getelementptr i256, ptr %sp33794, i64 1
  store i256 %dup233797, ptr %sp33798, align 16
  %4890 = add i64 %len.addr.329, 3
  %sp33800 = getelementptr i256, ptr %sp33794, i64 -3
  %dup533801 = load i256, ptr %sp33800, align 16
  %sp33802 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4889
  %sp33804 = getelementptr i256, ptr %sp33794, i64 -2
  %dup533805 = load i256, ptr %sp33804, align 16
  %sp33806 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4890
  store i256 %dup533805, ptr %sp33806, align 16
  %4891 = icmp ule i256 %dup533805, %dup533801
  %4892 = zext i1 %4891 to i256
  store i256 %4892, ptr %sp33802, align 16
  br i1 %4891, label %OP9803.JUMPDEST, label %OP9698.PUSH1

OP9698.PUSH1:                                     ; preds = %OP9689.JUMPDEST
  store i256 64, ptr %sp33802, align 16
  %mload.out.slot33825 = alloca i256, align 16
  %4893 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot33825, ptr %arg.ecx.addr)
  %.not48902 = icmp eq i8 %4893, 0
  br i1 %.not48902, label %OP9699.MLOAD.contd, label %return, !prof !6

OP9699.MLOAD.contd:                               ; preds = %OP9698.PUSH1
  %mload.out33826 = load i256, ptr %mload.out.slot33825, align 16
  store i256 %mload.out33826, ptr %sp33802, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp33806, align 16
  %sp33833 = getelementptr i256, ptr %sp33794, i64 4
  store i256 %mload.out33826, ptr %sp33833, align 16
  %4894 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out33826, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48903 = icmp eq i8 %4894, 0
  br i1 %.not48903, label %OP9703.PUSH1, label %return, !prof !6

OP9703.PUSH1:                                     ; preds = %OP9699.MLOAD.contd
  %4895 = add i64 %len.addr.329, 5
  %b33845 = load i256, ptr %sp33802, align 16
  %4896 = add i256 %b33845, 4
  store i256 %4896, ptr %sp33802, align 16
  store i256 %4896, ptr %sp33806, align 16
  %sp33856 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4895
  %4897 = add i256 %b33845, 36
  store i256 %4897, ptr %sp33833, align 16
  %4898 = add i64 %len.addr.329, 7
  %sp33870 = getelementptr i256, ptr %sp33794, i64 6
  store i256 32, ptr %sp33856, align 16
  store i256 %4896, ptr %sp33870, align 16
  %4899 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %4896, i256 32, ptr %arg.ecx.addr)
  %.not48904 = icmp eq i8 %4899, 0
  br i1 %.not48904, label %OP9714.DUP4, label %return, !prof !6

OP9714.DUP4:                                      ; preds = %OP9703.PUSH1
  %dup433888 = load i256, ptr %sp33798, align 16
  store i256 %dup433888, ptr %sp33856, align 16
  %dup233892 = load i256, ptr %sp33833, align 16
  store i256 %dup233892, ptr %sp33870, align 16
  %4900 = add i64 %len.addr.329, 8
  %sp33897 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4898
  store i256 %dup433888, ptr %sp33897, align 16
  %mload.out.slot33901 = alloca i256, align 16
  %4901 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup433888, ptr %mload.out.slot33901, ptr %arg.ecx.addr)
  %.not48905 = icmp eq i8 %4901, 0
  br i1 %.not48905, label %OP9717.MLOAD.contd, label %return, !prof !6

OP9717.MLOAD.contd:                               ; preds = %OP9714.DUP4
  %mload.out33902 = load i256, ptr %mload.out.slot33901, align 16
  store i256 %mload.out33902, ptr %sp33897, align 16
  %dup233906 = load i256, ptr %sp33870, align 16
  %sp33907 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4900
  store i256 %dup233906, ptr %sp33907, align 16
  %4902 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup233906, i256 %mload.out33902, ptr %arg.ecx.addr)
  %.not48906 = icmp eq i8 %4902, 0
  br i1 %.not48906, label %OP9720.PUSH1, label %return, !prof !6

OP9720.PUSH1:                                     ; preds = %OP9717.MLOAD.contd
  store i256 32, ptr %sp33897, align 16
  %b33919 = load i256, ptr %sp33870, align 16
  %4903 = add i256 %b33919, 32
  store i256 %4903, ptr %sp33833, align 16
  %dup133929 = load i256, ptr %sp33856, align 16
  store i256 %dup133929, ptr %sp33870, align 16
  %mload.out.slot33934 = alloca i256, align 16
  %4904 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup133929, ptr %mload.out.slot33934, ptr %arg.ecx.addr)
  %.not48907 = icmp eq i8 %4904, 0
  br i1 %.not48907, label %OP9725.MLOAD.contd, label %return, !prof !6

OP9725.MLOAD.contd:                               ; preds = %OP9720.PUSH1
  %mload.out33935 = load i256, ptr %mload.out.slot33934, align 16
  %swap.b33941 = load i256, ptr %sp33856, align 16
  %4905 = add i256 %swap.b33941, 32
  store i256 %4905, ptr %sp33856, align 16
  store i256 %mload.out33935, ptr %sp33870, align 16
  store i256 %mload.out33935, ptr %sp33897, align 16
  %dup433961 = load i256, ptr %sp33833, align 16
  store i256 %dup433961, ptr %sp33907, align 16
  %sp33966 = getelementptr i256, ptr %sp33794, i64 9
  store i256 %4905, ptr %sp33966, align 16
  %4906 = add i64 %len.addr.329, 11
  %sp33968 = getelementptr i256, ptr %sp33794, i64 10
  store i256 0, ptr %sp33968, align 16
  br label %OP9734.JUMPDEST.preheader, !annotation !7

OP9734.JUMPDEST.preheader:                        ; preds = %dynamic_jump_table, %OP9725.MLOAD.contd, %OP10260.PUSH1
  %len.addr.330.ph = phi i64 [ %4906, %OP9725.MLOAD.contd ], [ %5226, %OP10260.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %4907 = add i64 %len.addr.330.ph, 1
  %4908 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.330.ph
  %sp33971 = getelementptr i256, ptr %4908, i64 -4
  %sp33975 = getelementptr i256, ptr %4908, i64 -1
  %sp33977 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4907
  %dup43397253470 = load i256, ptr %sp33971, align 16
  %dup23397653471 = load i256, ptr %sp33975, align 16
  store i256 %dup23397653471, ptr %sp33977, align 16
  %4909 = icmp uge i256 %dup23397653471, %dup43397253470
  %4910 = zext i1 %4909 to i256
  store i256 %4910, ptr %4908, align 16
  br i1 %4909, label %OP9753.JUMPDEST, label %OP9741.DUP2.lr.ph

OP9741.DUP2.lr.ph:                                ; preds = %OP9734.JUMPDEST.preheader
  %sp33992 = getelementptr i256, ptr %4908, i64 -2
  %ecx.memory.addr.i51893 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp34012 = getelementptr i256, ptr %4908, i64 -3
  %sp34018 = getelementptr i256, ptr %4908, i64 2
  br label %OP9741.DUP2

OP9741.DUP2:                                      ; preds = %OP9741.DUP2.lr.ph, %OP9749.PUSH1
  %dup233997 = phi i256 [ %dup23397653471, %OP9741.DUP2.lr.ph ], [ %4932, %OP9749.PUSH1 ]
  %dup233993 = load i256, ptr %sp33992, align 16
  store i256 %dup233997, ptr %sp33977, align 16
  %4911 = add i256 %dup233997, %dup233993
  store i256 %4911, ptr %4908, align 16
  %ecx.memory.i51894 = load ptr, ptr %ecx.memory.addr.i51893, align 8
  %ecx.memory.len.addr.i51895 = getelementptr inbounds i8, ptr %ecx.memory.i51894, i64 16
  %ecx.memory.len.i51896 = load i64, ptr %ecx.memory.len.addr.i51895, align 8, !noalias !949
  %ecx.memory.last_checkpoint.addr.i51897 = getelementptr inbounds i8, ptr %ecx.memory.i51894, i64 48
  %ecx.memory.last_checkpoint.i51898 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51897, align 8, !noalias !949
  %4912 = sub i64 %ecx.memory.len.i51896, %ecx.memory.last_checkpoint.i51898
  %4913 = icmp ugt i256 %4911, 18446744073709551615
  %4914 = trunc i256 %4911 to i64
  %4915 = add i64 %4914, 32
  %4916 = icmp ugt i64 %4914, -33
  %4917 = or i1 %4913, %4916
  %4918 = select i1 %4917, i64 -1, i64 %4915
  %4919 = icmp ugt i64 %4918, %4912
  br i1 %4919, label %resize.i51906, label %OP9744.MLOAD.contd, !prof !5

resize.i51906:                                    ; preds = %OP9741.DUP2
  %4920 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4918), !noalias !953
  %.not.i51907 = icmp eq i8 %4920, 0
  br i1 %.not.i51907, label %resize.i51906.OP9744.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51906.OP9744.MLOAD.contd_crit_edge:       ; preds = %resize.i51906
  %dup334017.pre = load i256, ptr %sp33975, align 16
  %ecx.memory.i51910.pre = load ptr, ptr %ecx.memory.addr.i51893, align 8, !alias.scope !954
  br label %OP9744.MLOAD.contd

OP9744.MLOAD.contd:                               ; preds = %resize.i51906.OP9744.MLOAD.contd_crit_edge, %OP9741.DUP2
  %ecx.memory.i51910 = phi ptr [ %ecx.memory.i51910.pre, %resize.i51906.OP9744.MLOAD.contd_crit_edge ], [ %ecx.memory.i51894, %OP9741.DUP2 ]
  %dup334017 = phi i256 [ %dup334017.pre, %resize.i51906.OP9744.MLOAD.contd_crit_edge ], [ %dup233997, %OP9741.DUP2 ]
  %ecx.memory.buffer.ptr.shared.addr.i51900 = getelementptr inbounds i8, ptr %ecx.memory.i51894, i64 8
  %ecx.memory.buffer.ptr.shared.i51901 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51900, align 8, !noalias !949
  %ecx.memory.buffer.ptr.i51902 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51901, i64 %ecx.memory.last_checkpoint.i51898
  %slot.i51903 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51902, i64 %4914
  %slot.value.i51904 = load i256, ptr %slot.i51903, align 1, !noalias !949
  %4921 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51904)
  store i256 %4921, ptr %4908, align 16
  %dup434013 = load i256, ptr %sp34012, align 16
  store i256 %dup334017, ptr %sp34018, align 16
  %4922 = add i256 %dup334017, %dup434013
  store i256 %4922, ptr %sp33977, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !954)
  %ecx.memory.len.addr.i51911 = getelementptr inbounds i8, ptr %ecx.memory.i51910, i64 16
  %ecx.memory.len.i51912 = load i64, ptr %ecx.memory.len.addr.i51911, align 8, !noalias !954
  %ecx.memory.last_checkpoint.addr.i51913 = getelementptr inbounds i8, ptr %ecx.memory.i51910, i64 48
  %ecx.memory.last_checkpoint.i51914 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51913, align 8, !noalias !954
  %4923 = sub i64 %ecx.memory.len.i51912, %ecx.memory.last_checkpoint.i51914
  %4924 = icmp ugt i256 %4922, 18446744073709551615
  %4925 = trunc i256 %4922 to i64
  %4926 = add i64 %4925, 32
  %4927 = icmp ugt i64 %4925, -33
  %4928 = or i1 %4924, %4927
  %4929 = select i1 %4928, i64 -1, i64 %4926
  %4930 = icmp ugt i64 %4929, %4923
  br i1 %4930, label %resize.i51921, label %OP9749.PUSH1, !prof !5

resize.i51921:                                    ; preds = %OP9744.MLOAD.contd
  %4931 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4929)
  %.not.i51922 = icmp eq i8 %4931, 0
  br i1 %.not.i51922, label %OP9749.PUSH1, label %return, !prof !6

OP9749.PUSH1:                                     ; preds = %OP9744.MLOAD.contd, %resize.i51921
  %ecx.memory.buffer.ptr.shared.addr.i51916 = getelementptr inbounds i8, ptr %ecx.memory.i51910, i64 8
  %ecx.memory.buffer.ptr.shared.i51917 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51916, align 8, !noalias !954
  %ecx.memory.buffer.ptr.i51918 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51917, i64 %ecx.memory.last_checkpoint.i51914
  %slot.i51919 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51918, i64 %4925
  store i256 %slot.value.i51904, ptr %slot.i51919, align 1, !noalias !954
  %b34036 = load i256, ptr %sp33975, align 16
  %4932 = add i256 %b34036, 32
  store i256 %4932, ptr %sp33975, align 16
  %dup433972 = load i256, ptr %sp33971, align 16
  store i256 %4932, ptr %sp33977, align 16
  %4933 = icmp uge i256 %4932, %dup433972
  %4934 = zext i1 %4933 to i256
  store i256 %4934, ptr %4908, align 16
  br i1 %4933, label %OP9753.JUMPDEST, label %OP9741.DUP2

OP9753.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9749.PUSH1, %OP9734.JUMPDEST.preheader, %OP10230.MLOAD.contd
  %len.addr.331 = phi i64 [ %5226, %OP10230.MLOAD.contd ], [ %len.addr.330.ph, %OP9734.JUMPDEST.preheader ], [ %len.addr.330.ph, %OP9749.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %4935 = add i64 %len.addr.331, -1
  %4936 = add i64 %len.addr.331, -3
  %4937 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.331
  %sp34045 = getelementptr i256, ptr %4937, i64 -5
  %swap.a34046 = load i256, ptr %sp34045, align 16
  %sp34047 = getelementptr i256, ptr %4937, i64 -6
  %4938 = add i64 %len.addr.331, -5
  %sp34053 = getelementptr i256, ptr %4937, i64 -7
  %swap.b34054 = load i256, ptr %sp34053, align 16
  %sp34058 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4938
  %4939 = add i256 %swap.b34054, %swap.a34046
  store i256 %4939, ptr %sp34053, align 16
  %4940 = and i256 %swap.a34046, 31
  store i256 %4940, ptr %sp34047, align 16
  %4941 = icmp eq i256 %4940, 0
  %4942 = zext i1 %4941 to i256
  store i256 %4942, ptr %sp34058, align 16
  br i1 %4941, label %OP9790.JUMPDEST, label %OP9770.DUP1

OP9770.DUP1:                                      ; preds = %OP9753.JUMPDEST
  %sp34096 = getelementptr i256, ptr %4937, i64 -4
  %4943 = sub i256 %4939, %4940
  store i256 %4943, ptr %sp34045, align 16
  store i256 %4943, ptr %sp34096, align 16
  %mload.out.slot34110 = alloca i256, align 16
  %4944 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %4943, ptr %mload.out.slot34110, ptr %arg.ecx.addr)
  %.not48910 = icmp eq i8 %4944, 0
  br i1 %.not48910, label %OP9774.MLOAD.contd, label %return, !prof !6

OP9774.MLOAD.contd:                               ; preds = %OP9770.DUP1
  %mload.out34111 = load i256, ptr %mload.out.slot34110, align 16
  store i256 %mload.out34111, ptr %sp34096, align 16
  %sp34114 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4936
  store i256 1, ptr %sp34114, align 16
  %dup434117 = load i256, ptr %sp34047, align 16
  %sp34118 = getelementptr i256, ptr %4937, i64 -2
  %sp34120 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4935
  %4945 = sub i256 32, %dup434117
  store i256 %4945, ptr %sp34118, align 16
  store i256 256, ptr %sp34120, align 16
  %4946 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34118, i8 17)
  %.not48911 = icmp eq i8 %4946, 0
  br i1 %.not48911, label %OP9781.SUB, label %return, !prof !6

OP9781.SUB:                                       ; preds = %OP9774.MLOAD.contd
  %a34133 = load i256, ptr %sp34118, align 16
  %sp34134 = getelementptr i256, ptr %4937, i64 -3
  %b34135 = load i256, ptr %sp34134, align 16
  %4947 = xor i256 %a34133, -1
  %4948 = add i256 %b34135, %4947
  %4949 = add i64 %len.addr.331, -4
  %sp34144 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4949
  %b34145 = load i256, ptr %sp34144, align 16
  %4950 = and i256 %b34145, %4948
  store i256 %4950, ptr %sp34144, align 16
  %dup234149 = load i256, ptr %sp34045, align 16
  store i256 %dup234149, ptr %sp34114, align 16
  %4951 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup234149, i256 %4950, ptr %arg.ecx.addr)
  %.not48912 = icmp eq i8 %4951, 0
  br i1 %.not48912, label %OP9786.PUSH1, label %return, !prof !6

OP9786.PUSH1:                                     ; preds = %OP9781.SUB
  store i256 32, ptr %sp34144, align 16
  %b34162 = load i256, ptr %sp34045, align 16
  %4952 = add i256 %b34162, 32
  %swap.b34168 = load i256, ptr %sp34053, align 16
  store i256 %4952, ptr %sp34053, align 16
  store i256 %swap.b34168, ptr %sp34045, align 16
  br label %OP9790.JUMPDEST, !annotation !7

OP9790.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9786.PUSH1, %OP9753.JUMPDEST
  %len.addr.332 = phi i64 [ %4938, %OP9753.JUMPDEST ], [ %4938, %OP9786.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %4953 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.332
  %sp34173 = getelementptr i256, ptr %4953, i64 -2
  %swap.a34174 = load i256, ptr %sp34173, align 16
  %sp34175 = getelementptr i256, ptr %4953, i64 -5
  %swap.b34176 = load i256, ptr %sp34175, align 16
  store i256 %swap.a34174, ptr %sp34175, align 16
  store i256 %swap.b34176, ptr %sp34173, align 16
  %sp34181 = getelementptr i256, ptr %4953, i64 -4
  store i256 64, ptr %sp34181, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !957)
  %ecx.memory.addr.i51924 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51925 = load ptr, ptr %ecx.memory.addr.i51924, align 8, !alias.scope !957, !noalias !960
  %ecx.memory.len.addr.i51926 = getelementptr inbounds i8, ptr %ecx.memory.i51925, i64 16
  %ecx.memory.len.i51927 = load i64, ptr %ecx.memory.len.addr.i51926, align 8, !noalias !962
  %ecx.memory.last_checkpoint.addr.i51928 = getelementptr inbounds i8, ptr %ecx.memory.i51925, i64 48
  %ecx.memory.last_checkpoint.i51929 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51928, align 8, !noalias !962
  %4954 = sub i64 %ecx.memory.len.i51927, %ecx.memory.last_checkpoint.i51929
  %4955 = icmp ult i64 %4954, 96
  br i1 %4955, label %resize.i51937, label %OP9797.MLOAD.contd, !prof !5

resize.i51937:                                    ; preds = %OP9790.JUMPDEST
  %4956 = add i64 %len.addr.332, -3
  %4957 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !960
  %.not.i51938 = icmp eq i8 %4957, 0
  br i1 %.not.i51938, label %resize.i51937.OP9797.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51937.OP9797.MLOAD.contd_crit_edge:       ; preds = %resize.i51937
  %swap.b34196.pre = load i256, ptr %sp34175, align 16
  br label %OP9797.MLOAD.contd

OP9797.MLOAD.contd:                               ; preds = %resize.i51937.OP9797.MLOAD.contd_crit_edge, %OP9790.JUMPDEST
  %swap.b34196 = phi i256 [ %swap.b34196.pre, %resize.i51937.OP9797.MLOAD.contd_crit_edge ], [ %swap.a34174, %OP9790.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i51931 = getelementptr inbounds i8, ptr %ecx.memory.i51925, i64 8
  %ecx.memory.buffer.ptr.shared.i51932 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51931, align 8, !noalias !962
  %ecx.memory.buffer.ptr.i51933 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51932, i64 %ecx.memory.last_checkpoint.i51929
  %slot.i51934 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51933, i64 64
  %slot.value.i51935 = load i256, ptr %slot.i51934, align 1, !noalias !962
  %4958 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51935)
  %sp34193 = getelementptr i256, ptr %4953, i64 -3
  store i256 %swap.b34196, ptr %sp34193, align 16
  %4959 = sub i256 %swap.b34196, %4958
  store i256 %4959, ptr %sp34175, align 16
  store i256 %4958, ptr %sp34181, align 16
  %4960 = add i64 %len.addr.332, -5
  %4961 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34175, i8 16)
  %.not48914 = icmp eq i8 %4961, 0
  %spec.select36669 = select i1 %.not48914, i8 16, i8 %4961, !prof !6
  br label %return

OP9803.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9689.JUMPDEST
  %len.addr.333 = phi i64 [ %4889, %OP9689.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %4962 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.333
  %sp34215 = getelementptr i256, ptr %4962, i64 -4
  %swap.a34216 = load i256, ptr %sp34215, align 16
  %sp34217 = getelementptr i256, ptr %4962, i64 -5
  %swap.b34218 = load i256, ptr %sp34217, align 16
  store i256 %swap.b34218, ptr %sp34215, align 16
  %4963 = sub i256 %swap.b34218, %swap.a34216
  %sp34228 = getelementptr i256, ptr %4962, i64 -6
  %swap.b34229 = load i256, ptr %sp34228, align 16
  store i256 %4963, ptr %sp34228, align 16
  store i256 %swap.b34229, ptr %sp34217, align 16
  %4964 = add i64 %len.addr.333, -5
  br label %dynamic_jump_table.preheader

OP9811.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP8796.PUSH2
  %len.addr.334 = phi i64 [ %4234, %OP8796.PUSH2 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp34235 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.334
  store i256 96, ptr %sp34235, align 16
  %sp34237 = getelementptr i256, ptr %sp34235, i64 1
  store i256 20952, ptr %sp34237, align 16
  %sp34239 = getelementptr i256, ptr %sp34235, i64 -1
  %dup334240 = load i256, ptr %sp34239, align 16
  %sp34241 = getelementptr i256, ptr %sp34235, i64 2
  store i256 %dup334240, ptr %sp34241, align 16
  %4965 = add i64 %len.addr.334, 4
  %sp34243 = getelementptr i256, ptr %sp34235, i64 3
  store i256 64, ptr %sp34243, align 16
  %ecx.memory.addr.i51940 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i51941 = load ptr, ptr %ecx.memory.addr.i51940, align 8
  %ecx.memory.len.addr.i51942 = getelementptr inbounds i8, ptr %ecx.memory.i51941, i64 16
  %ecx.memory.len.i51943 = load i64, ptr %ecx.memory.len.addr.i51942, align 8, !noalias !963
  %ecx.memory.last_checkpoint.addr.i51944 = getelementptr inbounds i8, ptr %ecx.memory.i51941, i64 48
  %ecx.memory.last_checkpoint.i51945 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51944, align 8, !noalias !963
  %4966 = sub i64 %ecx.memory.len.i51943, %ecx.memory.last_checkpoint.i51945
  %4967 = icmp ult i64 %4966, 96
  br i1 %4967, label %resize.i51953, label %OP9816.MLOAD.contd, !prof !5

resize.i51953:                                    ; preds = %OP9811.JUMPDEST
  %4968 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !967
  %.not.i51954 = icmp eq i8 %4968, 0
  br i1 %.not.i51954, label %resize.i51953.OP9816.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i51953.OP9816.MLOAD.contd_crit_edge:       ; preds = %resize.i51953
  %ecx.memory.i51957.pre = load ptr, ptr %ecx.memory.addr.i51940, align 8, !alias.scope !968
  br label %OP9816.MLOAD.contd

OP9816.MLOAD.contd:                               ; preds = %resize.i51953.OP9816.MLOAD.contd_crit_edge, %OP9811.JUMPDEST
  %ecx.memory.i51957 = phi ptr [ %ecx.memory.i51957.pre, %resize.i51953.OP9816.MLOAD.contd_crit_edge ], [ %ecx.memory.i51941, %OP9811.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i51947 = getelementptr inbounds i8, ptr %ecx.memory.i51941, i64 8
  %ecx.memory.buffer.ptr.shared.i51948 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51947, align 8, !noalias !963
  %ecx.memory.buffer.ptr.i51949 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51948, i64 %ecx.memory.last_checkpoint.i51945
  %slot.i51950 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51949, i64 64
  %slot.value.i51951 = load i256, ptr %slot.i51950, align 1, !noalias !963
  %4969 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i51951)
  store i256 %4969, ptr %sp34243, align 16
  %4970 = add i64 %len.addr.334, 5
  %sp34253 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4965
  %sp34255 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4970
  %4971 = add i256 %4969, 64
  store i256 %4971, ptr %sp34253, align 16
  store i256 64, ptr %sp34255, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !968)
  %ecx.memory.len.addr.i51958 = getelementptr inbounds i8, ptr %ecx.memory.i51957, i64 16
  %ecx.memory.len.i51959 = load i64, ptr %ecx.memory.len.addr.i51958, align 8, !noalias !968
  %ecx.memory.last_checkpoint.addr.i51960 = getelementptr inbounds i8, ptr %ecx.memory.i51957, i64 48
  %ecx.memory.last_checkpoint.i51961 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51960, align 8, !noalias !968
  %4972 = sub i64 %ecx.memory.len.i51959, %ecx.memory.last_checkpoint.i51961
  %4973 = icmp ult i64 %4972, 96
  br i1 %4973, label %resize.i51968, label %OP9822.DUP1, !prof !5

resize.i51968:                                    ; preds = %OP9816.MLOAD.contd
  %4974 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i51969 = icmp eq i8 %4974, 0
  br i1 %.not.i51969, label %OP9822.DUP1, label %return, !prof !6

OP9822.DUP1:                                      ; preds = %OP9816.MLOAD.contd, %resize.i51968
  %ecx.memory.buffer.ptr.shared.addr.i51963 = getelementptr inbounds i8, ptr %ecx.memory.i51957, i64 8
  %ecx.memory.buffer.ptr.shared.i51964 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51963, align 8, !noalias !968
  %ecx.memory.buffer.ptr.i51965 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51964, i64 %ecx.memory.last_checkpoint.i51961
  %slot.i51966 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51965, i64 64
  %4975 = tail call i256 @llvm.bswap.i256(i256 %4971)
  store i256 %4975, ptr %slot.i51966, align 1, !noalias !968
  %dup134271 = load i256, ptr %sp34243, align 16
  store i256 %dup134271, ptr %sp34253, align 16
  store i256 32, ptr %sp34255, align 16
  %sp34278 = getelementptr i256, ptr %sp34235, i64 6
  store i256 %dup134271, ptr %sp34278, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !971)
  %ecx.memory.i51972 = load ptr, ptr %ecx.memory.addr.i51940, align 8, !alias.scope !971
  %ecx.memory.len.addr.i51973 = getelementptr inbounds i8, ptr %ecx.memory.i51972, i64 16
  %ecx.memory.len.i51974 = load i64, ptr %ecx.memory.len.addr.i51973, align 8, !noalias !971
  %ecx.memory.last_checkpoint.addr.i51975 = getelementptr inbounds i8, ptr %ecx.memory.i51972, i64 48
  %ecx.memory.last_checkpoint.i51976 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51975, align 8, !noalias !971
  %4976 = sub i64 %ecx.memory.len.i51974, %ecx.memory.last_checkpoint.i51976
  %4977 = icmp ugt i256 %dup134271, 18446744073709551615
  %4978 = trunc i256 %dup134271 to i64
  %4979 = add i64 %4978, 32
  %4980 = icmp ugt i64 %4978, -33
  %4981 = or i1 %4977, %4980
  %4982 = select i1 %4981, i64 -1, i64 %4979
  %4983 = icmp ugt i64 %4982, %4976
  br i1 %4983, label %resize.i51983, label %OP9826.PUSH1, !prof !5

resize.i51983:                                    ; preds = %OP9822.DUP1
  %4984 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4982)
  %.not.i51984 = icmp eq i8 %4984, 0
  br i1 %.not.i51984, label %OP9826.PUSH1, label %return, !prof !6

OP9826.PUSH1:                                     ; preds = %OP9822.DUP1, %resize.i51983
  %ecx.memory.buffer.ptr.shared.addr.i51978 = getelementptr inbounds i8, ptr %ecx.memory.i51972, i64 8
  %ecx.memory.buffer.ptr.shared.i51979 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51978, align 8, !noalias !971
  %ecx.memory.buffer.ptr.i51980 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51979, i64 %ecx.memory.last_checkpoint.i51976
  %slot.i51981 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51980, i64 %4978
  store i256 14474011154664524427946373126085988481658748083205070504932198000989141204992, ptr %slot.i51981, align 1, !noalias !971
  %b34290 = load i256, ptr %sp34253, align 16
  %4985 = add i256 %b34290, 32
  store i256 %4985, ptr %sp34253, align 16
  store i256 37714057306076988483118529490347679105585116642029194716945419020321082336612, ptr %sp34255, align 16
  store i256 %4985, ptr %sp34278, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !974)
  %ecx.memory.i51987 = load ptr, ptr %ecx.memory.addr.i51940, align 8, !alias.scope !974
  %ecx.memory.len.addr.i51988 = getelementptr inbounds i8, ptr %ecx.memory.i51987, i64 16
  %ecx.memory.len.i51989 = load i64, ptr %ecx.memory.len.addr.i51988, align 8, !noalias !974
  %ecx.memory.last_checkpoint.addr.i51990 = getelementptr inbounds i8, ptr %ecx.memory.i51987, i64 48
  %ecx.memory.last_checkpoint.i51991 = load i64, ptr %ecx.memory.last_checkpoint.addr.i51990, align 8, !noalias !974
  %4986 = sub i64 %ecx.memory.len.i51989, %ecx.memory.last_checkpoint.i51991
  %4987 = icmp ugt i256 %4985, 18446744073709551615
  %4988 = trunc i256 %4985 to i64
  %4989 = add i64 %4988, 32
  %4990 = icmp ugt i64 %4988, -33
  %4991 = or i1 %4987, %4990
  %4992 = select i1 %4991, i64 -1, i64 %4989
  %4993 = icmp ugt i64 %4992, %4986
  br i1 %4993, label %resize.i51998, label %OP9831.POP, !prof !5

resize.i51998:                                    ; preds = %OP9826.PUSH1
  %4994 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %4992)
  %.not.i51999 = icmp eq i8 %4994, 0
  br i1 %.not.i51999, label %OP9831.POP, label %return, !prof !6

OP9831.POP:                                       ; preds = %OP9826.PUSH1, %resize.i51998
  %ecx.memory.buffer.ptr.shared.addr.i51993 = getelementptr inbounds i8, ptr %ecx.memory.i51987, i64 8
  %ecx.memory.buffer.ptr.shared.i51994 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i51993, align 8, !noalias !974
  %ecx.memory.buffer.ptr.i51995 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i51994, i64 %ecx.memory.last_checkpoint.i51991
  %slot.i51996 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i51995, i64 %4988
  store i256 45410484641526413846990172170003937067331257527801028260676322252452828438867, ptr %slot.i51996, align 1, !noalias !974
  %sp34305 = getelementptr i256, ptr %sp34235, i64 -2
  %dup634306 = load i256, ptr %sp34305, align 16
  %4995 = and i256 %dup634306, 1461501637330902918203684832716283019655932542975
  %swap.b34327 = load i256, ptr %sp34241, align 16
  store i256 %4995, ptr %sp34241, align 16
  %swap.b34332 = load i256, ptr %sp34243, align 16
  store i256 %swap.b34327, ptr %sp34243, align 16
  store i256 %swap.b34332, ptr %sp34253, align 16
  store i256 4294967295, ptr %sp34278, align 16
  store i256 21212, ptr %sp34255, align 16
  br label %dynamic_jump_table.preheader

OP9843.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %4996 = add i64 %len.addr.357, 1
  %4997 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp34351 = getelementptr i256, ptr %4997, i64 -1
  %dup134352 = load i256, ptr %sp34351, align 16
  store i256 %dup134352, ptr %4997, align 16
  %mload.out.slot34357 = alloca i256, align 16
  %4998 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup134352, ptr %mload.out.slot34357, ptr %arg.ecx.addr)
  %.not47830 = icmp eq i8 %4998, 0
  br i1 %.not47830, label %OP9845.MLOAD.contd, label %return, !prof !6

OP9845.MLOAD.contd:                               ; preds = %OP9843.JUMPDEST
  %mload.out34358 = load i256, ptr %mload.out.slot34357, align 16
  store i256 %mload.out34358, ptr %4997, align 16
  %swap.b34364 = load i256, ptr %sp34351, align 16
  store i256 %mload.out34358, ptr %sp34351, align 16
  store i256 %swap.b34364, ptr %4997, align 16
  %sp34368 = getelementptr i256, ptr %4997, i64 -2
  %swap.b34369 = load i256, ptr %sp34368, align 16
  store i256 %swap.b34364, ptr %sp34368, align 16
  store i256 %swap.b34369, ptr %4997, align 16
  %4999 = add i64 %len.addr.357, -1
  %sp34372 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4999
  %5000 = icmp eq i256 %mload.out34358, 0
  %5001 = zext i1 %5000 to i256
  store i256 %5001, ptr %sp34372, align 16
  br i1 %5000, label %OP6305.JUMPDEST, label %OP9852.DUP1

OP9852.DUP1:                                      ; preds = %OP9845.MLOAD.contd
  store i256 %swap.b34364, ptr %sp34372, align 16
  store i256 %swap.b34364, ptr %4997, align 16
  %sp34387 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %4996
  store i256 32, ptr %sp34387, align 16
  %5002 = add i256 %swap.b34364, 32
  store i256 %5002, ptr %4997, align 16
  store i256 %5002, ptr %sp34351, align 16
  store i256 %swap.b34364, ptr %4997, align 16
  %mload.out.slot34402 = alloca i256, align 16
  %5003 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b34364, ptr %mload.out.slot34402, ptr %arg.ecx.addr)
  %.not47831 = icmp eq i8 %5003, 0
  br i1 %.not47831, label %OP9857.MLOAD.contd, label %return, !prof !6

OP9857.MLOAD.contd:                               ; preds = %OP9852.DUP1
  %mload.out34403 = load i256, ptr %mload.out.slot34402, align 16
  store i256 %mload.out34403, ptr %4997, align 16
  store i256 32, ptr %sp34387, align 16
  %sp34410 = getelementptr i256, ptr %4997, i64 2
  store i256 %mload.out34403, ptr %sp34410, align 16
  %5004 = icmp ugt i256 %mload.out34403, 31
  %5005 = zext i1 %5004 to i256
  store i256 %5005, ptr %sp34387, align 16
  br i1 %5004, label %OP9867.JUMPDEST, label %OP9864.PUSH1

OP9864.PUSH1:                                     ; preds = %OP9857.MLOAD.contd
  store i256 0, ptr %sp34387, align 16
  store i256 0, ptr %sp34410, align 16
  %5006 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34387, i8 16)
  %.not47832 = icmp eq i8 %5006, 0
  %spec.select36670 = select i1 %.not47832, i8 16, i8 %5006, !prof !6
  br label %return

OP9867.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9857.MLOAD.contd
  %len.addr.335 = phi i64 [ %4996, %OP9857.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %5007 = add i64 %len.addr.335, -1
  %5008 = add i64 %len.addr.335, -2
  %sp34435 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5008
  %a34436 = load i256, ptr %sp34435, align 16
  %mload.out.slot34437 = alloca i256, align 16
  %5009 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %a34436, ptr %mload.out.slot34437, ptr %arg.ecx.addr)
  %.not47833 = icmp eq i8 %5009, 0
  br i1 %.not47833, label %OP9869.MLOAD.contd, label %return, !prof !6

OP9869.MLOAD.contd:                               ; preds = %OP9867.JUMPDEST
  %mload.out34438 = load i256, ptr %mload.out.slot34437, align 16
  store i256 %mload.out34438, ptr %sp34435, align 16
  %.not47834 = icmp eq i256 %mload.out34438, 0
  br i1 %.not47834, label %OP9872.PUSH1, label %OP6305.JUMPDEST

OP9872.PUSH1:                                     ; preds = %OP9869.MLOAD.contd
  store i256 64, ptr %sp34435, align 16
  %mload.out.slot34448 = alloca i256, align 16
  %5010 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot34448, ptr %arg.ecx.addr)
  %.not47835 = icmp eq i8 %5010, 0
  br i1 %.not47835, label %OP9873.MLOAD.contd, label %return, !prof !6

OP9873.MLOAD.contd:                               ; preds = %OP9872.PUSH1
  %mload.out34449 = load i256, ptr %mload.out.slot34448, align 16
  store i256 %mload.out34449, ptr %sp34435, align 16
  %sp34452 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5007
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp34452, align 16
  %5011 = add i64 %len.addr.335, 1
  %5012 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.335
  %sp34454 = getelementptr i256, ptr %5012, i64 -2
  store i256 %mload.out34449, ptr %5012, align 16
  %5013 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out34449, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not47836 = icmp eq i8 %5013, 0
  br i1 %.not47836, label %OP9877.PUSH1, label %return, !prof !6

OP9877.PUSH1:                                     ; preds = %OP9873.MLOAD.contd
  store i256 4, ptr %sp34452, align 16
  %b34468 = load i256, ptr %sp34435, align 16
  %5014 = add i256 %b34468, 4
  store i256 %5014, ptr %sp34435, align 16
  store i256 %5014, ptr %sp34452, align 16
  %sp34475 = getelementptr i256, ptr %5012, i64 -1
  store i256 %5014, ptr %5012, align 16
  %sp34479 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5011
  store i256 32, ptr %sp34479, align 16
  %5015 = add i256 %b34468, 36
  store i256 %5015, ptr %5012, align 16
  store i256 %5014, ptr %sp34479, align 16
  %sp34493 = getelementptr i256, ptr %5012, i64 2
  store i256 %5015, ptr %sp34493, align 16
  store i256 32, ptr %sp34479, align 16
  store i256 %5014, ptr %sp34493, align 16
  %5016 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5014, i256 32, ptr %arg.ecx.addr)
  %.not47837 = icmp eq i8 %5016, 0
  br i1 %.not47837, label %OP9888.PUSH1, label %return, !prof !6

OP9888.PUSH1:                                     ; preds = %OP9877.PUSH1
  store i256 42, ptr %sp34479, align 16
  %dup234513 = load i256, ptr %5012, align 16
  store i256 %dup234513, ptr %sp34493, align 16
  %5017 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup234513, i256 42, ptr %arg.ecx.addr)
  %.not47838 = icmp eq i8 %5017, 0
  br i1 %.not47838, label %OP9891.PUSH1, label %return, !prof !6

OP9891.PUSH1:                                     ; preds = %OP9888.PUSH1
  store i256 32, ptr %sp34479, align 16
  %b34526 = load i256, ptr %5012, align 16
  %5018 = add i256 %b34526, 32
  store i256 %5018, ptr %5012, align 16
  store i256 %5018, ptr %sp34479, align 16
  store i256 23122, ptr %sp34493, align 16
  %sp34535 = getelementptr i256, ptr %5012, i64 3
  store i256 42, ptr %sp34535, align 16
  store i256 42, ptr %sp34479, align 16
  store i256 %5018, ptr %sp34535, align 16
  %5019 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34479)
  %.not47839 = icmp eq i8 %5019, 0
  br i1 %.not47839, label %OP9898.PUSH1, label %return, !prof !6

OP9898.PUSH1:                                     ; preds = %OP9891.PUSH1
  store i256 64, ptr %sp34479, align 16
  %b34549 = load i256, ptr %5012, align 16
  %5020 = add i256 %b34549, 64
  store i256 %5020, ptr %5012, align 16
  %swap.b34555 = load i256, ptr %sp34454, align 16
  store i256 %5020, ptr %sp34454, align 16
  store i256 %swap.b34555, ptr %5012, align 16
  store i256 64, ptr %sp34452, align 16
  %mload.out.slot34563 = alloca i256, align 16
  %5021 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot34563, ptr %arg.ecx.addr)
  %.not47840 = icmp eq i8 %5021, 0
  br i1 %.not47840, label %OP9904.MLOAD.contd, label %return, !prof !6

OP9904.MLOAD.contd:                               ; preds = %OP9898.PUSH1
  %mload.out34564 = load i256, ptr %mload.out.slot34563, align 16
  store i256 %mload.out34564, ptr %sp34452, align 16
  store i256 %mload.out34564, ptr %5012, align 16
  %swap.b34574 = load i256, ptr %sp34454, align 16
  store i256 %mload.out34564, ptr %sp34454, align 16
  store i256 %swap.b34574, ptr %5012, align 16
  %5022 = sub i256 %swap.b34574, %mload.out34564
  store i256 %5022, ptr %sp34452, align 16
  store i256 %5022, ptr %sp34454, align 16
  store i256 %mload.out34564, ptr %sp34475, align 16
  %5023 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34454, i8 16)
  %.not47841 = icmp eq i8 %5023, 0
  %spec.select36671 = select i1 %.not47841, i8 16, i8 %5023, !prof !6
  br label %return

OP9910.JUMPDEST.sink.split:                       ; preds = %OP8802.JUMPDEST, %OP9394.JUMPDEST
  %sp32796.sink = phi ptr [ %sp32796, %OP9394.JUMPDEST ], [ %sp30586, %OP8802.JUMPDEST ]
  %len.addr.336.ph.in = phi i64 [ %len.addr.319, %OP9394.JUMPDEST ], [ %len.addr.307, %OP8802.JUMPDEST ]
  %5024 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.336.ph.in
  %len.addr.336.ph = add i64 %len.addr.336.ph.in, 3
  %dup532797 = load i256, ptr %sp32796.sink, align 16
  %sp32798 = getelementptr i256, ptr %5024, i64 2
  store i256 %dup532797, ptr %sp32798, align 16
  br label %OP9910.JUMPDEST

OP9910.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9910.JUMPDEST.sink.split
  %len.addr.336 = phi i64 [ %len.addr.336.ph, %OP9910.JUMPDEST.sink.split ], [ %len.addr.357, %dynamic_jump_table ]
  %5025 = add i64 %len.addr.336, 1
  %sp34590 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.336
  %5026 = add i64 %len.addr.336, 2
  %sp34592 = getelementptr i256, ptr %sp34590, i64 -2
  %dup334593 = load i256, ptr %sp34592, align 16
  %sp34594 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5025
  %5027 = and i256 %dup334593, 1461501637330902918203684832716283019655932542975
  store i256 0, ptr %sp34590, align 16
  store i256 %5027, ptr %sp34594, align 16
  %5028 = add i64 %len.addr.336, 3
  %sp34611 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5026
  store i256 0, ptr %sp34611, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !977)
  %ecx.memory.addr.i52001 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i52002 = load ptr, ptr %ecx.memory.addr.i52001, align 8, !alias.scope !977
  %ecx.memory.len.addr.i52003 = getelementptr inbounds i8, ptr %ecx.memory.i52002, i64 16
  %ecx.memory.len.i52004 = load i64, ptr %ecx.memory.len.addr.i52003, align 8, !noalias !977
  %ecx.memory.last_checkpoint.addr.i52005 = getelementptr inbounds i8, ptr %ecx.memory.i52002, i64 48
  %ecx.memory.last_checkpoint.i52006 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52005, align 8, !noalias !977
  %5029 = sub i64 %ecx.memory.len.i52004, %ecx.memory.last_checkpoint.i52006
  %5030 = icmp ult i64 %5029, 32
  br i1 %5030, label %resize.i52012, label %OP9918.PUSH1, !prof !5

resize.i52012:                                    ; preds = %OP9910.JUMPDEST
  %5031 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i52013 = icmp eq i8 %5031, 0
  br i1 %.not.i52013, label %OP9918.PUSH1, label %return, !prof !6

OP9918.PUSH1:                                     ; preds = %OP9910.JUMPDEST, %resize.i52012
  %ecx.memory.buffer.ptr.shared.addr.i52008 = getelementptr inbounds i8, ptr %ecx.memory.i52002, i64 8
  %ecx.memory.buffer.ptr.shared.i52009 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52008, align 8, !noalias !977
  %ecx.memory.buffer.ptr.i52010 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52009, i64 %ecx.memory.last_checkpoint.i52006
  %5032 = tail call i256 @llvm.bswap.i256(i256 %5027)
  store i256 %5032, ptr %ecx.memory.buffer.ptr.i52010, align 1, !noalias !977
  store i256 32, ptr %sp34594, align 16
  store i256 16, ptr %sp34611, align 16
  %5033 = add i64 %len.addr.336, 4
  %sp34629 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5028
  store i256 32, ptr %sp34629, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !980)
  %ecx.memory.i52016 = load ptr, ptr %ecx.memory.addr.i52001, align 8, !alias.scope !980
  %ecx.memory.len.addr.i52017 = getelementptr inbounds i8, ptr %ecx.memory.i52016, i64 16
  %ecx.memory.len.i52018 = load i64, ptr %ecx.memory.len.addr.i52017, align 8, !noalias !980
  %ecx.memory.last_checkpoint.addr.i52019 = getelementptr inbounds i8, ptr %ecx.memory.i52016, i64 48
  %ecx.memory.last_checkpoint.i52020 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52019, align 8, !noalias !980
  %5034 = sub i64 %ecx.memory.len.i52018, %ecx.memory.last_checkpoint.i52020
  %5035 = icmp ult i64 %5034, 64
  br i1 %5035, label %resize.i52027, label %OP9923.PUSH1, !prof !5

resize.i52027:                                    ; preds = %OP9918.PUSH1
  %5036 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i52028 = icmp eq i8 %5036, 0
  br i1 %.not.i52028, label %OP9923.PUSH1, label %return, !prof !6

OP9923.PUSH1:                                     ; preds = %OP9918.PUSH1, %resize.i52027
  %ecx.memory.buffer.ptr.shared.addr.i52022 = getelementptr inbounds i8, ptr %ecx.memory.i52016, i64 8
  %ecx.memory.buffer.ptr.shared.i52023 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52022, align 8, !noalias !980
  %ecx.memory.buffer.ptr.i52024 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52023, i64 %ecx.memory.last_checkpoint.i52020
  %slot.i52025 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52024, i64 32
  store i256 7237005577332262213973186563042994240829374041602535252466099000494570602496, ptr %slot.i52025, align 1, !noalias !980
  store i256 64, ptr %sp34611, align 16
  store i256 64, ptr %sp34629, align 16
  %dup434643 = load i256, ptr %sp34590, align 16
  %sp34644 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5033
  store i256 %dup434643, ptr %sp34644, align 16
  %5037 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34629)
  %.not48768 = icmp eq i8 %5037, 0
  br i1 %.not48768, label %OP9927.DUP5, label %return, !prof !6

OP9927.DUP5:                                      ; preds = %OP9923.PUSH1
  %sp34648 = getelementptr i256, ptr %sp34590, i64 -1
  %dup534649 = load i256, ptr %sp34648, align 16
  store i256 %dup534649, ptr %sp34644, align 16
  %dup534653 = load i256, ptr %sp34590, align 16
  %sp34654 = getelementptr i256, ptr %sp34590, i64 5
  store i256 %dup534653, ptr %sp34654, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !983)
  %ecx.memory.i52031 = load ptr, ptr %ecx.memory.addr.i52001, align 8, !alias.scope !983
  %ecx.memory.len.addr.i52032 = getelementptr inbounds i8, ptr %ecx.memory.i52031, i64 16
  %ecx.memory.len.i52033 = load i64, ptr %ecx.memory.len.addr.i52032, align 8, !noalias !983
  %ecx.memory.last_checkpoint.addr.i52034 = getelementptr inbounds i8, ptr %ecx.memory.i52031, i64 48
  %ecx.memory.last_checkpoint.i52035 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52034, align 8, !noalias !983
  %5038 = sub i64 %ecx.memory.len.i52033, %ecx.memory.last_checkpoint.i52035
  %5039 = icmp ugt i256 %dup534653, 18446744073709551615
  %5040 = trunc i256 %dup534653 to i64
  %5041 = add i64 %5040, 32
  %5042 = icmp ugt i64 %5040, -33
  %5043 = or i1 %5039, %5042
  %5044 = select i1 %5043, i64 -1, i64 %5041
  %5045 = icmp ugt i64 %5044, %5038
  br i1 %5045, label %resize.i52042, label %OP9930.SWAP1, !prof !5

resize.i52042:                                    ; preds = %OP9927.DUP5
  %5046 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5044)
  %.not.i52043 = icmp eq i8 %5046, 0
  br i1 %.not.i52043, label %OP9930.SWAP1, label %return, !prof !6

OP9930.SWAP1:                                     ; preds = %OP9927.DUP5, %resize.i52042
  %ecx.memory.buffer.ptr.shared.addr.i52037 = getelementptr inbounds i8, ptr %ecx.memory.i52031, i64 8
  %ecx.memory.buffer.ptr.shared.i52038 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52037, align 8, !noalias !983
  %ecx.memory.buffer.ptr.i52039 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52038, i64 %ecx.memory.last_checkpoint.i52035
  %slot.i52040 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52039, i64 %5040
  %5047 = tail call i256 @llvm.bswap.i256(i256 %dup534649)
  store i256 %5047, ptr %slot.i52040, align 1, !noalias !983
  %swap.a34662 = load i256, ptr %sp34629, align 16
  %swap.b34664 = load i256, ptr %sp34611, align 16
  store i256 %swap.a34662, ptr %sp34611, align 16
  %swap.b34669 = load i256, ptr %sp34594, align 16
  store i256 %swap.b34664, ptr %sp34594, align 16
  store i256 %swap.b34669, ptr %sp34629, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !986)
  %ecx.memory.i52046 = load ptr, ptr %ecx.memory.addr.i52001, align 8, !alias.scope !986
  %ecx.memory.len.addr.i52047 = getelementptr inbounds i8, ptr %ecx.memory.i52046, i64 16
  %ecx.memory.len.i52048 = load i64, ptr %ecx.memory.len.addr.i52047, align 8, !noalias !986
  %ecx.memory.last_checkpoint.addr.i52049 = getelementptr inbounds i8, ptr %ecx.memory.i52046, i64 48
  %ecx.memory.last_checkpoint.i52050 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52049, align 8, !noalias !986
  %5048 = sub i64 %ecx.memory.len.i52048, %ecx.memory.last_checkpoint.i52050
  %5049 = icmp ugt i256 %swap.b34669, 18446744073709551615
  %5050 = trunc i256 %swap.b34669 to i64
  %5051 = add i64 %5050, 32
  %5052 = icmp ugt i64 %5050, -33
  %5053 = or i1 %5049, %5052
  %5054 = select i1 %5053, i64 -1, i64 %5051
  %5055 = icmp ugt i64 %5054, %5048
  br i1 %5055, label %resize.i52057, label %OP9933.SWAP1, !prof !5

resize.i52057:                                    ; preds = %OP9930.SWAP1
  %5056 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5054)
  %.not.i52058 = icmp eq i8 %5056, 0
  br i1 %.not.i52058, label %OP9933.SWAP1, label %return, !prof !6

OP9933.SWAP1:                                     ; preds = %OP9930.SWAP1, %resize.i52057
  %ecx.memory.buffer.ptr.shared.addr.i52052 = getelementptr inbounds i8, ptr %ecx.memory.i52046, i64 8
  %ecx.memory.buffer.ptr.shared.i52053 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52052, align 8, !noalias !986
  %ecx.memory.buffer.ptr.i52054 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52053, i64 %ecx.memory.last_checkpoint.i52050
  %slot.i52055 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52054, i64 %5050
  %5057 = tail call i256 @llvm.bswap.i256(i256 %swap.a34662)
  store i256 %5057, ptr %slot.i52055, align 1, !noalias !986
  %swap.a34677 = load i256, ptr %sp34594, align 16
  %swap.b34679 = load i256, ptr %sp34590, align 16
  store i256 %swap.a34677, ptr %sp34590, align 16
  store i256 %swap.b34679, ptr %sp34594, align 16
  %5058 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34590)
  %.not48771 = icmp eq i8 %5058, 0
  br i1 %.not48771, label %OP9935.SLOAD, label %return, !prof !6

OP9935.SLOAD:                                     ; preds = %OP9933.SWAP1
  %5059 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34590, i8 17)
  %.not48772 = icmp eq i8 %5059, 0
  br i1 %.not48772, label %OP9936.PUSH1, label %return, !prof !6

OP9936.PUSH1:                                     ; preds = %OP9935.SLOAD
  store i256 255, ptr %sp34594, align 16
  %b34690 = load i256, ptr %sp34590, align 16
  %5060 = and i256 %b34690, 255
  %5061 = icmp eq i256 %5060, 0
  %5062 = zext i1 %5061 to i256
  store i256 %5062, ptr %sp34590, align 16
  br i1 %5061, label %OP9979.JUMPDEST, label %OP9941.PUSH1

OP9941.PUSH1:                                     ; preds = %OP9936.PUSH1
  store i256 64, ptr %sp34590, align 16
  %mload.out.slot34704 = alloca i256, align 16
  %5063 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot34704, ptr %arg.ecx.addr)
  %.not48773 = icmp eq i8 %5063, 0
  br i1 %.not48773, label %OP9942.MLOAD.contd, label %return, !prof !6

OP9942.MLOAD.contd:                               ; preds = %OP9941.PUSH1
  %mload.out34705 = load i256, ptr %mload.out.slot34704, align 16
  store i256 %mload.out34705, ptr %sp34590, align 16
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp34594, align 16
  store i256 %mload.out34705, ptr %sp34611, align 16
  %5064 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out34705, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not48774 = icmp eq i8 %5064, 0
  br i1 %.not48774, label %OP9946.PUSH1, label %return, !prof !6

OP9946.PUSH1:                                     ; preds = %OP9942.MLOAD.contd
  %b34724 = load i256, ptr %sp34590, align 16
  %5065 = add i256 %b34724, 4
  store i256 %5065, ptr %sp34590, align 16
  store i256 %5065, ptr %sp34594, align 16
  %5066 = add i256 %b34724, 36
  store i256 %5066, ptr %sp34611, align 16
  store i256 32, ptr %sp34629, align 16
  store i256 %5065, ptr %sp34644, align 16
  %5067 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5065, i256 32, ptr %arg.ecx.addr)
  %.not48775 = icmp eq i8 %5067, 0
  br i1 %.not48775, label %OP9957.PUSH1, label %return, !prof !6

OP9957.PUSH1:                                     ; preds = %OP9946.PUSH1
  store i256 46, ptr %sp34629, align 16
  %dup234769 = load i256, ptr %sp34611, align 16
  store i256 %dup234769, ptr %sp34644, align 16
  %5068 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup234769, i256 46, ptr %arg.ecx.addr)
  %.not48776 = icmp eq i8 %5068, 0
  br i1 %.not48776, label %OP9960.PUSH1, label %return, !prof !6

OP9960.PUSH1:                                     ; preds = %OP9957.PUSH1
  %b34782 = load i256, ptr %sp34611, align 16
  %5069 = add i256 %b34782, 32
  store i256 %5069, ptr %sp34611, align 16
  store i256 23204, ptr %sp34644, align 16
  store i256 46, ptr %sp34629, align 16
  store i256 %5069, ptr %sp34654, align 16
  %5070 = tail call i8 @__revmc_builtin_codecopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34629)
  %.not48777 = icmp eq i8 %5070, 0
  br i1 %.not48777, label %OP9967.PUSH1, label %return, !prof !6

OP9967.PUSH1:                                     ; preds = %OP9960.PUSH1
  store i256 64, ptr %sp34629, align 16
  %b34805 = load i256, ptr %sp34611, align 16
  %5071 = add i256 %b34805, 64
  %swap.b34811 = load i256, ptr %sp34590, align 16
  store i256 %5071, ptr %sp34590, align 16
  store i256 %swap.b34811, ptr %sp34611, align 16
  store i256 64, ptr %sp34594, align 16
  %mload.out.slot34819 = alloca i256, align 16
  %5072 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot34819, ptr %arg.ecx.addr)
  %.not48778 = icmp eq i8 %5072, 0
  br i1 %.not48778, label %OP9973.MLOAD.contd, label %return, !prof !6

OP9973.MLOAD.contd:                               ; preds = %OP9967.PUSH1
  %mload.out34820 = load i256, ptr %mload.out.slot34819, align 16
  %swap.b34830 = load i256, ptr %sp34590, align 16
  store i256 %swap.b34830, ptr %sp34611, align 16
  %5073 = sub i256 %swap.b34830, %mload.out34820
  store i256 %5073, ptr %sp34590, align 16
  store i256 %mload.out34820, ptr %sp34594, align 16
  %5074 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34590, i8 16)
  %.not48779 = icmp eq i8 %5074, 0
  %spec.select36672 = select i1 %.not48779, i8 16, i8 %5074, !prof !6
  br label %return

OP9979.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP9936.PUSH1
  %len.addr.337 = phi i64 [ %len.addr.336, %OP9936.PUSH1 ], [ %len.addr.357, %dynamic_jump_table ]
  %5075 = add i64 %len.addr.337, -3
  %sp34848 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5075
  %a34849 = load i256, ptr %sp34848, align 16
  br label %dynamic_jump_table.preheader

dynamic_jump_table.preheader:                     ; preds = %OP1662.POP, %OP1849.POP, %OP2148.POP, %OP2315.POP, %OP2837.JUMPDEST, %OP2907.SWAP1, %OP3415.POP, %OP3553.POP, %OP3559.JUMPDEST, %OP3566.PUSH1, %OP3919.PUSH20, %OP3936.PUSH20, %OP4053.JUMP, %OP5170.POP, %OP5195.SWAP1, %OP5310.POP, %OP5373.PUSH21, %OP5406.SWAP1, %OP5408.JUMPDEST, %OP5476.JUMP, %OP5651.SWAP1, %OP5656.PUSH20, %OP5734.PUSH20, %OP5789.JUMPDEST, %OP6114.POP, %OP6130.PUSH1, %OP6247.POP, %OP6305.JUMPDEST, %OP6362.PUSH20, %OP6694.JUMPDEST, %OP6728.SWAP1, %OP6992.PUSH1, %OP7481.POP, %OP7505.PUSH1, %OP7760.PUSH32, %OP7787.JUMP, %OP8013.JUMPDEST, %OP9222.POP, %OP9224.JUMPDEST, %OP9803.JUMPDEST, %OP9831.POP, %OP9979.JUMPDEST, %OP10357.JUMPDEST
  %len.addr.357.ph = phi i64 [ %822, %OP1662.POP ], [ %895, %OP1849.POP ], [ %1046, %OP2148.POP ], [ %1133, %OP2315.POP ], [ %len.addr.147, %OP2907.SWAP1 ], [ %1628, %OP3415.POP ], [ %1715, %OP3553.POP ], [ %1716, %OP3559.JUMPDEST ], [ %1717, %OP3566.PUSH1 ], [ %1846, %OP3919.PUSH20 ], [ %len.addr.174, %OP3936.PUSH20 ], [ %1905, %OP4053.JUMP ], [ %2392, %OP5170.POP ], [ %len.addr.204, %OP5195.SWAP1 ], [ %2477, %OP5310.POP ], [ %2498, %OP5373.PUSH21 ], [ %2515, %OP5406.SWAP1 ], [ %2516, %OP5408.JUMPDEST ], [ %2547, %OP5476.JUMP ], [ %2617, %OP5651.SWAP1 ], [ %len.addr.220, %OP5656.PUSH20 ], [ %2649, %OP5734.PUSH20 ], [ %2672, %OP5789.JUMPDEST ], [ %2804, %OP6114.POP ], [ %2816, %OP6130.PUSH1 ], [ %2862, %OP6247.POP ], [ %2907, %OP6362.PUSH20 ], [ %3031, %OP6694.JUMPDEST ], [ %3045, %OP6728.SWAP1 ], [ %3168, %OP6992.PUSH1 ], [ %3608, %OP7787.JUMP ], [ %3505, %OP7505.PUSH1 ], [ %3493, %OP7481.POP ], [ %3600, %OP7760.PUSH32 ], [ %4452, %OP9222.POP ], [ %len.addr.315, %OP9224.JUMPDEST ], [ %4964, %OP9803.JUMPDEST ], [ %4970, %OP9831.POP ], [ %2886, %OP6305.JUMPDEST ], [ %5075, %OP9979.JUMPDEST ], [ %3782, %OP8013.JUMPDEST ], [ %5298, %OP10357.JUMPDEST ], [ %1397, %OP2837.JUMPDEST ]
  %.ph52641 = phi i256 [ 11286, %OP1662.POP ], [ 11859, %OP1849.POP ], [ 13464, %OP2148.POP ], [ 13641, %OP2315.POP ], [ %swap.b9724, %OP2907.SWAP1 ], [ %a11519, %OP3415.POP ], [ %swap.b11960, %OP3553.POP ], [ %dup211975, %OP3559.JUMPDEST ], [ %dup211995, %OP3566.PUSH1 ], [ %dup213244, %OP3919.PUSH20 ], [ %swap.b13287, %OP3936.PUSH20 ], [ %a13694, %OP4053.JUMP ], [ %swap.b17644, %OP5170.POP ], [ %swap.b17731, %OP5195.SWAP1 ], [ %a18168, %OP5310.POP ], [ %dup218389, %OP5373.PUSH21 ], [ %swap.b18469, %OP5406.SWAP1 ], [ %dup218478, %OP5408.JUMPDEST ], [ %a18712, %OP5476.JUMP ], [ %swap.b19296, %OP5651.SWAP1 ], [ %swap.b19317, %OP5656.PUSH20 ], [ %dup219621, %OP5734.PUSH20 ], [ %dup219814, %OP5789.JUMPDEST ], [ %a20967, %OP6114.POP ], [ %swap.b21025, %OP6130.PUSH1 ], [ %a21462, %OP6247.POP ], [ %dup221855, %OP6362.PUSH20 ], [ %dup222988, %OP6694.JUMPDEST ], [ %swap.b23115, %OP6728.SWAP1 ], [ %swap.b24063, %OP6992.PUSH1 ], [ %a26869, %OP7787.JUMP ], [ %swap.b25906, %OP7505.PUSH1 ], [ %a25830, %OP7481.POP ], [ %swap.b26785, %OP7760.PUSH32 ], [ %a32097, %OP9222.POP ], [ %swap.b32107, %OP9224.JUMPDEST ], [ %swap.b34229, %OP9803.JUMPDEST ], [ 21212, %OP9831.POP ], [ %a21664, %OP6305.JUMPDEST ], [ %a34849, %OP9979.JUMPDEST ], [ %swap.b27702, %OP8013.JUMPDEST ], [ %swap.b36155, %OP10357.JUMPDEST ], [ %dup29511, %OP2837.JUMPDEST ]
  %env.cfg.chain_id.addr = getelementptr inbounds i8, ptr %arg.env.addr, i64 312
  %env.cfg.chain_id = load i64, ptr %env.cfg.chain_id.addr, align 8
  %5076 = zext i64 %env.cfg.chain_id to i256
  %ecx.memory.addr.i51832 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %contract.target_address.addr32315 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.caller.addr16198 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  br label %dynamic_jump_table

OP9983.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %sp34852 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  store i256 96, ptr %sp34852, align 16
  %sp34854 = getelementptr i256, ptr %sp34852, i64 1
  store i256 19511, ptr %sp34854, align 16
  %sp34856 = getelementptr i256, ptr %sp34852, i64 -3
  %dup534857 = load i256, ptr %sp34856, align 16
  %sp34858 = getelementptr i256, ptr %sp34852, i64 2
  store i256 %dup534857, ptr %sp34858, align 16
  %sp34860 = getelementptr i256, ptr %sp34852, i64 -2
  %dup534861 = load i256, ptr %sp34860, align 16
  %sp34862 = getelementptr i256, ptr %sp34852, i64 3
  store i256 %dup534861, ptr %sp34862, align 16
  %sp34864 = getelementptr i256, ptr %sp34852, i64 4
  store i256 0, ptr %sp34864, align 16
  %sp34866 = getelementptr i256, ptr %sp34852, i64 -1
  %dup634867 = load i256, ptr %sp34866, align 16
  %sp34868 = getelementptr i256, ptr %sp34852, i64 5
  store i256 %dup634867, ptr %sp34868, align 16
  %sp34872 = getelementptr i256, ptr %sp34852, i64 6
  store i256 96, ptr %sp34872, align 16
  %sp34874 = getelementptr i256, ptr %sp34852, i64 7
  store i256 21232, ptr %sp34874, align 16
  %5077 = add i64 %len.addr.357, 9
  %sp34878 = getelementptr i256, ptr %sp34852, i64 8
  store i256 %dup534857, ptr %sp34878, align 16
  br label %OP10181.JUMPDEST

OP9995.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %5078 = add i64 %len.addr.357, -1
  %sp34882 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5078
  %a34883 = load i256, ptr %sp34882, align 16
  %.not47811 = icmp eq i256 %a34883, 0
  br i1 %.not47811, label %OP9998.PUSH1, label %OP10029.JUMPDEST

OP9998.PUSH1:                                     ; preds = %OP9995.JUMPDEST
  store i256 64, ptr %sp34882, align 16
  %5079 = add i64 %len.addr.357, 1
  %5080 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp34887 = getelementptr i256, ptr %5080, i64 -1
  store i256 64, ptr %5080, align 16
  %mload.out.slot34893 = alloca i256, align 16
  %5081 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot34893, ptr %arg.ecx.addr)
  %.not47812 = icmp eq i8 %5081, 0
  br i1 %.not47812, label %OP10000.MLOAD.contd, label %return, !prof !6

OP10000.MLOAD.contd:                              ; preds = %OP9998.PUSH1
  %mload.out34894 = load i256, ptr %mload.out.slot34893, align 16
  store i256 %mload.out34894, ptr %5080, align 16
  %sp34897 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5079
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp34897, align 16
  %sp34901 = getelementptr i256, ptr %5080, i64 2
  store i256 %mload.out34894, ptr %sp34901, align 16
  %5082 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out34894, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not47813 = icmp eq i8 %5082, 0
  br i1 %.not47813, label %OP10004.PUSH1, label %return, !prof !6

OP10004.PUSH1:                                    ; preds = %OP10000.MLOAD.contd
  store i256 32, ptr %sp34897, align 16
  store i256 4, ptr %sp34901, align 16
  %dup334913 = load i256, ptr %5080, align 16
  %sp34914 = getelementptr i256, ptr %5080, i64 3
  store i256 %dup334913, ptr %sp34914, align 16
  %5083 = add i256 %dup334913, 4
  store i256 %5083, ptr %sp34901, align 16
  %5084 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5083, i256 32, ptr %arg.ecx.addr)
  %.not47814 = icmp eq i8 %5084, 0
  br i1 %.not47814, label %OP10009.PUSH1, label %return, !prof !6

OP10009.PUSH1:                                    ; preds = %OP10004.PUSH1
  store i256 29, ptr %sp34897, align 16
  store i256 36, ptr %sp34901, align 16
  %dup334932 = load i256, ptr %5080, align 16
  store i256 %dup334932, ptr %sp34914, align 16
  %5085 = add i256 %dup334932, 36
  store i256 %5085, ptr %sp34901, align 16
  %5086 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5085, i256 29, ptr %arg.ecx.addr)
  %.not47815 = icmp eq i8 %5086, 0
  br i1 %.not47815, label %OP10014.PUSH32, label %return, !prof !6

OP10014.PUSH32:                                   ; preds = %OP10009.PUSH1
  store i256 29577713123142787666064487680123823951345158729797978021083438401868913442816, ptr %sp34897, align 16
  store i256 68, ptr %sp34901, align 16
  %dup334951 = load i256, ptr %5080, align 16
  store i256 %dup334951, ptr %sp34914, align 16
  %5087 = add i256 %dup334951, 68
  store i256 %5087, ptr %sp34901, align 16
  %5088 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5087, i256 29577713123142787666064487680123823951345158729797978021083438401868913442816, ptr %arg.ecx.addr)
  %.not47816 = icmp eq i8 %5088, 0
  br i1 %.not47816, label %OP10019.SWAP1, label %return, !prof !6

OP10019.SWAP1:                                    ; preds = %OP10014.PUSH32
  %swap.a34966 = load i256, ptr %5080, align 16
  %swap.b34968 = load i256, ptr %sp34887, align 16
  store i256 %swap.a34966, ptr %sp34887, align 16
  store i256 %swap.b34968, ptr %5080, align 16
  %mload.out.slot34972 = alloca i256, align 16
  %5089 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %swap.b34968, ptr %mload.out.slot34972, ptr %arg.ecx.addr)
  %.not47817 = icmp eq i8 %5089, 0
  br i1 %.not47817, label %OP10020.MLOAD.contd, label %return, !prof !6

OP10020.MLOAD.contd:                              ; preds = %OP10019.SWAP1
  %mload.out34973 = load i256, ptr %mload.out.slot34972, align 16
  store i256 %mload.out34973, ptr %5080, align 16
  %swap.b34979 = load i256, ptr %sp34887, align 16
  store i256 %mload.out34973, ptr %sp34887, align 16
  store i256 %swap.b34979, ptr %5080, align 16
  store i256 %mload.out34973, ptr %sp34897, align 16
  store i256 %mload.out34973, ptr %5080, align 16
  store i256 %swap.b34979, ptr %sp34897, align 16
  %5090 = sub i256 %swap.b34979, %mload.out34973
  store i256 %5090, ptr %5080, align 16
  store i256 100, ptr %sp34897, align 16
  %5091 = add i256 %5090, 100
  store i256 %5091, ptr %5080, align 16
  store i256 %5091, ptr %sp34887, align 16
  store i256 %mload.out34973, ptr %5080, align 16
  %5092 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp34887, i8 16)
  %.not47818 = icmp eq i8 %5092, 0
  %spec.select36673 = select i1 %.not47818, i8 16, i8 %5092, !prof !6
  br label %return

OP10029.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP9995.JUMPDEST
  %len.addr.338 = phi i64 [ %5078, %OP9995.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %sp35012 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.338
  store i256 0, ptr %sp35012, align 16
  %sp35014 = getelementptr i256, ptr %sp35012, i64 1
  store i256 96, ptr %sp35014, align 16
  %sp35016 = getelementptr i256, ptr %sp35012, i64 -5
  %dup735017 = load i256, ptr %sp35016, align 16
  %sp35018 = getelementptr i256, ptr %sp35012, i64 2
  store i256 %dup735017, ptr %sp35018, align 16
  %sp35020 = getelementptr i256, ptr %sp35012, i64 3
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp35020, align 16
  %5093 = and i256 %dup735017, 1461501637330902918203684832716283019655932542975
  store i256 %5093, ptr %sp35018, align 16
  %sp35028 = getelementptr i256, ptr %sp35012, i64 -3
  %dup635029 = load i256, ptr %sp35028, align 16
  store i256 %dup635029, ptr %sp35020, align 16
  %sp35032 = getelementptr i256, ptr %sp35012, i64 -4
  %dup835033 = load i256, ptr %sp35032, align 16
  %sp35034 = getelementptr i256, ptr %sp35012, i64 4
  store i256 %dup835033, ptr %sp35034, align 16
  %5094 = add i64 %len.addr.338, 6
  %sp35036 = getelementptr i256, ptr %sp35012, i64 5
  store i256 64, ptr %sp35036, align 16
  %mload.out.slot35040 = alloca i256, align 16
  %5095 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot35040, ptr %arg.ecx.addr)
  %.not47819 = icmp eq i8 %5095, 0
  br i1 %.not47819, label %OP10038.MLOAD.contd, label %return, !prof !6

OP10038.MLOAD.contd:                              ; preds = %OP10029.JUMPDEST
  %mload.out35041 = load i256, ptr %mload.out.slot35040, align 16
  store i256 %mload.out35041, ptr %sp35036, align 16
  %sp35046 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5094
  store i256 %mload.out35041, ptr %sp35046, align 16
  %dup335049 = load i256, ptr %sp35034, align 16
  %sp35050 = getelementptr i256, ptr %sp35012, i64 7
  store i256 %dup335049, ptr %sp35050, align 16
  %5096 = add i64 %len.addr.338, 9
  %sp35054 = getelementptr i256, ptr %sp35012, i64 8
  store i256 %dup335049, ptr %sp35054, align 16
  %mload.out.slot35058 = alloca i256, align 16
  %5097 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup335049, ptr %mload.out.slot35058, ptr %arg.ecx.addr)
  %.not47820 = icmp eq i8 %5097, 0
  br i1 %.not47820, label %OP10042.MLOAD.contd, label %return, !prof !6

OP10042.MLOAD.contd:                              ; preds = %OP10038.MLOAD.contd
  %mload.out35059 = load i256, ptr %mload.out.slot35058, align 16
  store i256 %mload.out35059, ptr %sp35054, align 16
  %swap.b35065 = load i256, ptr %sp35050, align 16
  store i256 %mload.out35059, ptr %sp35050, align 16
  store i256 %swap.b35065, ptr %sp35054, align 16
  %sp35067 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5096
  store i256 32, ptr %sp35067, align 16
  %5098 = add i256 %swap.b35065, 32
  store i256 %5098, ptr %sp35054, align 16
  store i256 %5098, ptr %sp35050, align 16
  store i256 %mload.out35059, ptr %sp35054, align 16
  store i256 %mload.out35059, ptr %sp35067, align 16
  %sp35084 = getelementptr i256, ptr %sp35012, i64 6
  %dup435085 = load i256, ptr %sp35084, align 16
  %sp35086 = getelementptr i256, ptr %sp35012, i64 10
  store i256 %dup435085, ptr %sp35086, align 16
  %5099 = add i64 %len.addr.338, 12
  %sp35090 = getelementptr i256, ptr %sp35012, i64 11
  store i256 %5098, ptr %sp35090, align 16
  br label %OP10050.JUMPDEST.preheader, !annotation !7

OP10050.JUMPDEST.preheader:                       ; preds = %dynamic_jump_table, %OP10042.MLOAD.contd
  %len.addr.339.ph = phi i64 [ %5099, %OP10042.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %5100 = add i64 %len.addr.339.ph, 1
  %sp35093 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.339.ph
  %sp35095 = getelementptr i256, ptr %sp35093, i64 -3
  %sp35097 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5100
  store i256 32, ptr %sp35093, align 16
  %dup43509653460 = load i256, ptr %sp35095, align 16
  store i256 %dup43509653460, ptr %sp35097, align 16
  %5101 = icmp ult i256 %dup43509653460, 32
  %5102 = zext i1 %5101 to i256
  store i256 %5102, ptr %sp35093, align 16
  br i1 %5101, label %OP10073.JUMPDEST, label %OP10056.DUP1.lr.ph

OP10056.DUP1.lr.ph:                               ; preds = %OP10050.JUMPDEST.preheader
  %sp35108 = getelementptr i256, ptr %sp35093, i64 -1
  %sp35118 = getelementptr i256, ptr %sp35093, i64 -2
  %dup135109.pre = load i256, ptr %sp35108, align 16
  br label %OP10056.DUP1

OP10056.DUP1:                                     ; preds = %OP10056.DUP1.lr.ph, %OP10060.PUSH32
  %dup135109 = phi i256 [ %dup135109.pre, %OP10056.DUP1.lr.ph ], [ %5124, %OP10060.PUSH32 ]
  store i256 %dup135109, ptr %sp35093, align 16
  %ecx.memory.i52061 = load ptr, ptr %ecx.memory.addr.i51832, align 8
  %ecx.memory.len.addr.i52062 = getelementptr inbounds i8, ptr %ecx.memory.i52061, i64 16
  %ecx.memory.len.i52063 = load i64, ptr %ecx.memory.len.addr.i52062, align 8, !noalias !989
  %ecx.memory.last_checkpoint.addr.i52064 = getelementptr inbounds i8, ptr %ecx.memory.i52061, i64 48
  %ecx.memory.last_checkpoint.i52065 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52064, align 8, !noalias !989
  %5103 = sub i64 %ecx.memory.len.i52063, %ecx.memory.last_checkpoint.i52065
  %5104 = icmp ugt i256 %dup135109, 18446744073709551615
  %5105 = trunc i256 %dup135109 to i64
  %5106 = add i64 %5105, 32
  %5107 = icmp ugt i64 %5105, -33
  %5108 = or i1 %5104, %5107
  %5109 = select i1 %5108, i64 -1, i64 %5106
  %5110 = icmp ugt i64 %5109, %5103
  br i1 %5110, label %resize.i52073, label %OP10057.MLOAD.contd, !prof !5

resize.i52073:                                    ; preds = %OP10056.DUP1
  %5111 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5109), !noalias !993
  %.not.i52074 = icmp eq i8 %5111, 0
  br i1 %.not.i52074, label %resize.i52073.OP10057.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i52073.OP10057.MLOAD.contd_crit_edge:      ; preds = %resize.i52073
  %ecx.memory.i52077.pre = load ptr, ptr %ecx.memory.addr.i51832, align 8, !alias.scope !994
  br label %OP10057.MLOAD.contd

OP10057.MLOAD.contd:                              ; preds = %resize.i52073.OP10057.MLOAD.contd_crit_edge, %OP10056.DUP1
  %ecx.memory.i52077 = phi ptr [ %ecx.memory.i52077.pre, %resize.i52073.OP10057.MLOAD.contd_crit_edge ], [ %ecx.memory.i52061, %OP10056.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i52067 = getelementptr inbounds i8, ptr %ecx.memory.i52061, i64 8
  %ecx.memory.buffer.ptr.shared.i52068 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52067, align 8, !noalias !989
  %ecx.memory.buffer.ptr.i52069 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52068, i64 %ecx.memory.last_checkpoint.i52065
  %slot.i52070 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52069, i64 %5105
  %slot.value.i52071 = load i256, ptr %slot.i52070, align 1, !noalias !989
  %5112 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i52071)
  store i256 %5112, ptr %sp35093, align 16
  %dup335119 = load i256, ptr %sp35118, align 16
  store i256 %dup335119, ptr %sp35097, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !994)
  %ecx.memory.len.addr.i52078 = getelementptr inbounds i8, ptr %ecx.memory.i52077, i64 16
  %ecx.memory.len.i52079 = load i64, ptr %ecx.memory.len.addr.i52078, align 8, !noalias !994
  %ecx.memory.last_checkpoint.addr.i52080 = getelementptr inbounds i8, ptr %ecx.memory.i52077, i64 48
  %ecx.memory.last_checkpoint.i52081 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52080, align 8, !noalias !994
  %5113 = sub i64 %ecx.memory.len.i52079, %ecx.memory.last_checkpoint.i52081
  %5114 = icmp ugt i256 %dup335119, 18446744073709551615
  %5115 = trunc i256 %dup335119 to i64
  %5116 = add i64 %5115, 32
  %5117 = icmp ugt i64 %5115, -33
  %5118 = or i1 %5114, %5117
  %5119 = select i1 %5118, i64 -1, i64 %5116
  %5120 = icmp ugt i64 %5119, %5113
  br i1 %5120, label %resize.i52088, label %OP10060.PUSH32, !prof !5

resize.i52088:                                    ; preds = %OP10057.MLOAD.contd
  %5121 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5119)
  %.not.i52089 = icmp eq i8 %5121, 0
  br i1 %.not.i52089, label %OP10060.PUSH32, label %return, !prof !6

OP10060.PUSH32:                                   ; preds = %OP10057.MLOAD.contd, %resize.i52088
  %ecx.memory.buffer.ptr.shared.addr.i52083 = getelementptr inbounds i8, ptr %ecx.memory.i52077, i64 8
  %ecx.memory.buffer.ptr.shared.i52084 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52083, align 8, !noalias !994
  %ecx.memory.buffer.ptr.i52085 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52084, i64 %ecx.memory.last_checkpoint.i52081
  %slot.i52086 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52085, i64 %5115
  store i256 %slot.value.i52071, ptr %slot.i52086, align 1, !noalias !994
  store i256 -32, ptr %sp35093, align 16
  %swap.b35132 = load i256, ptr %sp35108, align 16
  store i256 -32, ptr %sp35108, align 16
  store i256 %swap.b35132, ptr %sp35093, align 16
  %swap.b35137 = load i256, ptr %sp35095, align 16
  store i256 %swap.b35132, ptr %sp35095, align 16
  store i256 %swap.b35137, ptr %sp35093, align 16
  %5122 = add i256 %swap.b35137, -32
  store i256 %5122, ptr %sp35108, align 16
  store i256 %5122, ptr %sp35095, align 16
  store i256 %swap.b35132, ptr %sp35108, align 16
  store i256 32, ptr %sp35093, align 16
  %swap.b35155 = load i256, ptr %sp35118, align 16
  store i256 32, ptr %sp35118, align 16
  store i256 %swap.b35155, ptr %sp35093, align 16
  store i256 32, ptr %sp35097, align 16
  %5123 = add i256 %swap.b35155, 32
  store i256 %5123, ptr %sp35093, align 16
  store i256 %5123, ptr %sp35118, align 16
  store i256 32, ptr %sp35093, align 16
  %5124 = add i256 %swap.b35132, 32
  store i256 %5124, ptr %sp35108, align 16
  store i256 32, ptr %sp35093, align 16
  store i256 %5122, ptr %sp35097, align 16
  %5125 = icmp ult i256 %5122, 32
  %5126 = zext i1 %5125 to i256
  store i256 %5126, ptr %sp35093, align 16
  br i1 %5125, label %OP10073.JUMPDEST, label %OP10056.DUP1

OP10073.JUMPDEST.loopexit53509:                   ; preds = %dynamic_jump_table
  %sp35180.phi.trans.insert = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp35182.phi.trans.insert = getelementptr i256, ptr %sp35180.phi.trans.insert, i64 -3
  %dup435183.pre = load i256, ptr %sp35182.phi.trans.insert, align 16
  br label %OP10073.JUMPDEST

OP10073.JUMPDEST:                                 ; preds = %OP10060.PUSH32, %OP10073.JUMPDEST.loopexit53509, %OP10050.JUMPDEST.preheader
  %dup435183 = phi i256 [ %dup43509653460, %OP10050.JUMPDEST.preheader ], [ %dup435183.pre, %OP10073.JUMPDEST.loopexit53509 ], [ %5122, %OP10060.PUSH32 ]
  %len.addr.340 = phi i64 [ %len.addr.339.ph, %OP10050.JUMPDEST.preheader ], [ %len.addr.357, %OP10073.JUMPDEST.loopexit53509 ], [ %len.addr.339.ph, %OP10060.PUSH32 ]
  %sp35180 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.340
  store i256 1, ptr %sp35180, align 16
  %5127 = add i64 %len.addr.340, 2
  %sp35182 = getelementptr i256, ptr %sp35180, i64 -3
  %sp35184 = getelementptr i256, ptr %sp35180, i64 1
  store i256 %dup435183, ptr %sp35184, align 16
  %5128 = add i64 %len.addr.340, 3
  %sp35186 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5127
  store i256 32, ptr %sp35186, align 16
  %5129 = sub i256 32, %dup435183
  store i256 %5129, ptr %sp35184, align 16
  store i256 256, ptr %sp35186, align 16
  %5130 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp35184, i8 17)
  %.not47823 = icmp eq i8 %5130, 0
  br i1 %.not47823, label %OP10080.SUB, label %return, !prof !6

OP10080.SUB:                                      ; preds = %OP10073.JUMPDEST
  %a35199 = load i256, ptr %sp35184, align 16
  %b35201 = load i256, ptr %sp35180, align 16
  %5131 = sub i256 %a35199, %b35201
  store i256 %5131, ptr %sp35180, align 16
  %5132 = xor i256 %5131, -1
  store i256 %5132, ptr %sp35184, align 16
  %sp35212 = getelementptr i256, ptr %sp35180, i64 -1
  %dup335213 = load i256, ptr %sp35212, align 16
  store i256 %dup335213, ptr %sp35186, align 16
  %mload.out.slot35218 = alloca i256, align 16
  %5133 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup335213, ptr %mload.out.slot35218, ptr %arg.ecx.addr)
  %.not47824 = icmp eq i8 %5133, 0
  br i1 %.not47824, label %OP10084.MLOAD.contd, label %return, !prof !6

OP10084.MLOAD.contd:                              ; preds = %OP10080.SUB
  %mload.out35219 = load i256, ptr %mload.out.slot35218, align 16
  store i256 %mload.out35219, ptr %sp35186, align 16
  %b35225 = load i256, ptr %sp35184, align 16
  %5134 = and i256 %b35225, %mload.out35219
  store i256 %5134, ptr %sp35184, align 16
  %dup235229 = load i256, ptr %sp35180, align 16
  store i256 %dup235229, ptr %sp35186, align 16
  %5135 = add i64 %len.addr.340, 4
  %sp35232 = getelementptr i256, ptr %sp35180, i64 -2
  %dup535233 = load i256, ptr %sp35232, align 16
  %sp35234 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5128
  store i256 %dup535233, ptr %sp35234, align 16
  %mload.out.slot35238 = alloca i256, align 16
  %5136 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup535233, ptr %mload.out.slot35238, ptr %arg.ecx.addr)
  %.not47825 = icmp eq i8 %5136, 0
  br i1 %.not47825, label %OP10088.MLOAD.contd, label %return, !prof !6

OP10088.MLOAD.contd:                              ; preds = %OP10084.MLOAD.contd
  %mload.out35239 = load i256, ptr %mload.out.slot35238, align 16
  store i256 %mload.out35239, ptr %sp35234, align 16
  %b35245 = load i256, ptr %sp35186, align 16
  %5137 = and i256 %b35245, %mload.out35239
  store i256 %5137, ptr %sp35186, align 16
  store i256 %5137, ptr %sp35234, align 16
  %dup335253 = load i256, ptr %sp35184, align 16
  %sp35254 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5135
  store i256 %dup335253, ptr %sp35254, align 16
  %5138 = or i256 %dup335253, %5137
  store i256 %5138, ptr %sp35234, align 16
  %dup635263 = load i256, ptr %sp35232, align 16
  store i256 %dup635263, ptr %sp35254, align 16
  %5139 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup635263, i256 %5138, ptr %arg.ecx.addr)
  %.not47826 = icmp eq i8 %5139, 0
  br i1 %.not47826, label %OP10095.POP, label %return, !prof !6

OP10095.POP:                                      ; preds = %OP10088.MLOAD.contd
  %sp35277 = getelementptr i256, ptr %sp35180, i64 -4
  %swap.a35278 = load i256, ptr %sp35277, align 16
  %sp35279 = getelementptr i256, ptr %sp35180, i64 -5
  %swap.b35280 = load i256, ptr %sp35279, align 16
  store i256 %swap.a35278, ptr %sp35279, align 16
  store i256 %swap.b35280, ptr %sp35277, align 16
  %5140 = add i64 %len.addr.340, -5
  %sp35285 = getelementptr i256, ptr %sp35180, i64 -6
  %b35286 = load i256, ptr %sp35285, align 16
  %5141 = add i256 %b35286, %swap.a35278
  store i256 %5141, ptr %sp35285, align 16
  %sp35291 = getelementptr i256, ptr %sp35180, i64 -8
  %swap.b35292 = load i256, ptr %sp35291, align 16
  store i256 %5141, ptr %sp35291, align 16
  store i256 %swap.b35292, ptr %sp35285, align 16
  %sp35296 = getelementptr i256, ptr %sp35180, i64 -7
  store i256 0, ptr %sp35296, align 16
  store i256 64, ptr %sp35285, align 16
  %mload.out.slot35302 = alloca i256, align 16
  %5142 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot35302, ptr %arg.ecx.addr)
  %.not47827 = icmp eq i8 %5142, 0
  br i1 %.not47827, label %OP10109.MLOAD.contd, label %return, !prof !6

OP10109.MLOAD.contd:                              ; preds = %OP10095.POP
  %sp35283 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5140
  %mload.out35303 = load i256, ptr %mload.out.slot35302, align 16
  store i256 %mload.out35303, ptr %sp35285, align 16
  store i256 %mload.out35303, ptr %sp35283, align 16
  %dup435311 = load i256, ptr %sp35291, align 16
  store i256 %dup435311, ptr %sp35277, align 16
  %5143 = sub i256 %dup435311, %mload.out35303
  store i256 %5143, ptr %sp35279, align 16
  store i256 %mload.out35303, ptr %sp35277, align 16
  %sp35324 = getelementptr i256, ptr %sp35180, i64 -9
  %dup635325 = load i256, ptr %sp35324, align 16
  store i256 %dup635325, ptr %sp35182, align 16
  %sp35328 = getelementptr i256, ptr %sp35180, i64 -10
  %dup835329 = load i256, ptr %sp35328, align 16
  store i256 %dup835329, ptr %sp35232, align 16
  %gas.remaining35332 = load i64, ptr %gas.remaining.addr, align 8
  %5144 = zext i64 %gas.remaining35332 to i256
  store i256 %5144, ptr %sp35212, align 16
  %5145 = add i64 %len.addr.340, -7
  %5146 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr nonnull %sp35296, i8 17, i8 0)
  %.not47828 = icmp eq i8 %5146, 0
  br i1 %.not47828, label %suspend, label %return, !prof !6

OP10118.SWAP3:                                    ; preds = %resume
  %5147 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len36507
  %sp35337 = getelementptr i256, ptr %5147, i64 -1
  %swap.a35338 = load i256, ptr %sp35337, align 16
  %sp35339 = getelementptr i256, ptr %5147, i64 -4
  %swap.b35340 = load i256, ptr %sp35339, align 16
  store i256 %swap.a35338, ptr %sp35339, align 16
  store i256 %swap.b35340, ptr %sp35337, align 16
  %5148 = add i64 %stack_len36507, -1
  %ecx.return_data.len.addr35345 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 24
  %ecx.return_data.len35346 = load i64, ptr %ecx.return_data.len.addr35345, align 8
  %5149 = zext i64 %ecx.return_data.len35346 to i256
  %sp35347 = getelementptr i256, ptr %5147, i64 -3
  store i256 %5149, ptr %sp35347, align 16
  %sp35351 = getelementptr i256, ptr %5147, i64 -2
  store i256 %5149, ptr %sp35351, align 16
  %sp35353 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5148
  store i256 0, ptr %sp35353, align 16
  store i256 %5149, ptr %5147, align 16
  %5150 = icmp eq i64 %ecx.return_data.len35346, 0
  %5151 = zext i1 %5150 to i256
  store i256 %5151, ptr %sp35353, align 16
  br i1 %5150, label %OP10154.JUMPDEST, label %OP10129.PUSH1

OP10129.PUSH1:                                    ; preds = %OP10118.SWAP3
  store i256 64, ptr %sp35353, align 16
  %ecx.memory.addr.i52091 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i52092 = load ptr, ptr %ecx.memory.addr.i52091, align 8
  %ecx.memory.len.addr.i52093 = getelementptr inbounds i8, ptr %ecx.memory.i52092, i64 16
  %ecx.memory.len.i52094 = load i64, ptr %ecx.memory.len.addr.i52093, align 8, !noalias !997
  %ecx.memory.last_checkpoint.addr.i52095 = getelementptr inbounds i8, ptr %ecx.memory.i52092, i64 48
  %ecx.memory.last_checkpoint.i52096 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52095, align 8, !noalias !997
  %5152 = sub i64 %ecx.memory.len.i52094, %ecx.memory.last_checkpoint.i52096
  %5153 = icmp ult i64 %5152, 96
  br i1 %5153, label %resize.i52104, label %OP10130.MLOAD.contd, !prof !5

resize.i52104:                                    ; preds = %OP10129.PUSH1
  %5154 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1001
  %.not.i52105 = icmp eq i8 %5154, 0
  br i1 %.not.i52105, label %resize.i52104.OP10130.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i52104.OP10130.MLOAD.contd_crit_edge:      ; preds = %resize.i52104
  %swap.b35379.pre = load i256, ptr %sp35347, align 16
  %ecx.return_data.len35391.pre = load i64, ptr %ecx.return_data.len.addr35345, align 8
  %ecx.memory.i52108.pre = load ptr, ptr %ecx.memory.addr.i52091, align 8, !alias.scope !1002
  %.pre54299 = zext i64 %ecx.return_data.len35391.pre to i256
  br label %OP10130.MLOAD.contd

OP10130.MLOAD.contd:                              ; preds = %resize.i52104.OP10130.MLOAD.contd_crit_edge, %OP10129.PUSH1
  %.pre-phi54300 = phi i256 [ %.pre54299, %resize.i52104.OP10130.MLOAD.contd_crit_edge ], [ %5149, %OP10129.PUSH1 ]
  %ecx.memory.i52108 = phi ptr [ %ecx.memory.i52108.pre, %resize.i52104.OP10130.MLOAD.contd_crit_edge ], [ %ecx.memory.i52092, %OP10129.PUSH1 ]
  %swap.b35379 = phi i256 [ %swap.b35379.pre, %resize.i52104.OP10130.MLOAD.contd_crit_edge ], [ %5149, %OP10129.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i52098 = getelementptr inbounds i8, ptr %ecx.memory.i52092, i64 8
  %ecx.memory.buffer.ptr.shared.i52099 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52098, align 8, !noalias !997
  %ecx.memory.buffer.ptr.i52100 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52099, i64 %ecx.memory.last_checkpoint.i52096
  %slot.i52101 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52100, i64 64
  %slot.value.i52102 = load i256, ptr %slot.i52101, align 1, !noalias !997
  %5155 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i52102)
  store i256 %5155, ptr %sp35353, align 16
  store i256 %5155, ptr %sp35347, align 16
  store i256 %swap.b35379, ptr %sp35337, align 16
  store i256 -32, ptr %sp35353, align 16
  store i256 63, ptr %5147, align 16
  %sp35392 = getelementptr i256, ptr %5147, i64 1
  store i256 %.pre-phi54300, ptr %sp35392, align 16
  %5156 = add nuw nsw i256 %.pre-phi54300, 63
  store i256 %5156, ptr %5147, align 16
  %5157 = and i256 %5156, 36893488147419103200
  store i256 %5157, ptr %sp35353, align 16
  store i256 %5155, ptr %5147, align 16
  %5158 = add i256 %5155, %5157
  store i256 %5158, ptr %sp35353, align 16
  store i256 64, ptr %5147, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1002)
  %ecx.memory.len.addr.i52109 = getelementptr inbounds i8, ptr %ecx.memory.i52108, i64 16
  %ecx.memory.len.i52110 = load i64, ptr %ecx.memory.len.addr.i52109, align 8, !noalias !1002
  %ecx.memory.last_checkpoint.addr.i52111 = getelementptr inbounds i8, ptr %ecx.memory.i52108, i64 48
  %ecx.memory.last_checkpoint.i52112 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52111, align 8, !noalias !1002
  %5159 = sub i64 %ecx.memory.len.i52110, %ecx.memory.last_checkpoint.i52112
  %5160 = icmp ult i64 %5159, 96
  br i1 %5160, label %resize.i52119, label %OP10143.RETURNDATASIZE, !prof !5

resize.i52119:                                    ; preds = %OP10130.MLOAD.contd
  %5161 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i52120 = icmp eq i8 %5161, 0
  br i1 %.not.i52120, label %OP10143.RETURNDATASIZE, label %return, !prof !6

OP10143.RETURNDATASIZE:                           ; preds = %OP10130.MLOAD.contd, %resize.i52119
  %ecx.memory.buffer.ptr.shared.addr.i52114 = getelementptr inbounds i8, ptr %ecx.memory.i52108, i64 8
  %ecx.memory.buffer.ptr.shared.i52115 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52114, align 8, !noalias !1002
  %ecx.memory.buffer.ptr.i52116 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52115, i64 %ecx.memory.last_checkpoint.i52112
  %slot.i52117 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52116, i64 64
  %5162 = tail call i256 @llvm.bswap.i256(i256 %5158)
  store i256 %5162, ptr %slot.i52117, align 1, !noalias !1002
  %ecx.return_data.len35424 = load i64, ptr %ecx.return_data.len.addr35345, align 8
  %5163 = zext i64 %ecx.return_data.len35424 to i256
  store i256 %5163, ptr %sp35353, align 16
  %dup335428 = load i256, ptr %sp35347, align 16
  store i256 %dup335428, ptr %5147, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1005)
  %ecx.memory.i52123 = load ptr, ptr %ecx.memory.addr.i52091, align 8, !alias.scope !1005
  %ecx.memory.len.addr.i52124 = getelementptr inbounds i8, ptr %ecx.memory.i52123, i64 16
  %ecx.memory.len.i52125 = load i64, ptr %ecx.memory.len.addr.i52124, align 8, !noalias !1005
  %ecx.memory.last_checkpoint.addr.i52126 = getelementptr inbounds i8, ptr %ecx.memory.i52123, i64 48
  %ecx.memory.last_checkpoint.i52127 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52126, align 8, !noalias !1005
  %5164 = sub i64 %ecx.memory.len.i52125, %ecx.memory.last_checkpoint.i52127
  %5165 = icmp ugt i256 %dup335428, 18446744073709551615
  %5166 = trunc i256 %dup335428 to i64
  %5167 = add i64 %5166, 32
  %5168 = icmp ugt i64 %5166, -33
  %5169 = or i1 %5165, %5168
  %5170 = select i1 %5169, i64 -1, i64 %5167
  %5171 = icmp ugt i64 %5170, %5164
  br i1 %5171, label %resize.i52134, label %OP10146.RETURNDATASIZE, !prof !5

resize.i52134:                                    ; preds = %OP10143.RETURNDATASIZE
  %5172 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5170)
  %.not.i52135 = icmp eq i8 %5172, 0
  br i1 %.not.i52135, label %OP10146.RETURNDATASIZE, label %return, !prof !6

OP10146.RETURNDATASIZE:                           ; preds = %OP10143.RETURNDATASIZE, %resize.i52134
  %ecx.memory.buffer.ptr.shared.addr.i52129 = getelementptr inbounds i8, ptr %ecx.memory.i52123, i64 8
  %ecx.memory.buffer.ptr.shared.i52130 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52129, align 8, !noalias !1005
  %ecx.memory.buffer.ptr.i52131 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52130, i64 %ecx.memory.last_checkpoint.i52127
  %slot.i52132 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52131, i64 %5166
  %5173 = tail call i256 @llvm.bswap.i256(i256 %5163)
  store i256 %5173, ptr %slot.i52132, align 1, !noalias !1005
  %ecx.return_data.len35437 = load i64, ptr %ecx.return_data.len.addr35345, align 8
  %5174 = zext i64 %ecx.return_data.len35437 to i256
  store i256 %5174, ptr %sp35353, align 16
  store i256 0, ptr %5147, align 16
  store i256 32, ptr %sp35392, align 16
  %dup535445 = load i256, ptr %sp35347, align 16
  %sp35446 = getelementptr i256, ptr %5147, i64 2
  store i256 %dup535445, ptr %sp35446, align 16
  %5175 = add i256 %dup535445, 32
  store i256 %5175, ptr %sp35392, align 16
  %5176 = tail call i8 @__revmc_builtin_returndatacopy(ptr nonnull %arg.ecx.addr, ptr nonnull %sp35337)
  %.not47786 = icmp eq i8 %5176, 0
  br i1 %.not47786, label %OP10158.JUMPDEST, label %return, !prof !6

OP10154.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10118.SWAP3
  %len.addr.341 = phi i64 [ %5148, %OP10118.SWAP3 ], [ %len.addr.357, %dynamic_jump_table ]
  %sp35458 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.341
  store i256 96, ptr %sp35458, align 16
  %sp35462 = getelementptr i256, ptr %sp35458, i64 -2
  %swap.b35463 = load i256, ptr %sp35462, align 16
  store i256 96, ptr %sp35462, align 16
  store i256 %swap.b35463, ptr %sp35458, align 16
  br label %OP10158.JUMPDEST, !annotation !7

OP10158.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10146.RETURNDATASIZE, %OP10154.JUMPDEST
  %len.addr.342 = phi i64 [ %len.addr.341, %OP10154.JUMPDEST ], [ %5148, %OP10146.RETURNDATASIZE ], [ %len.addr.357, %dynamic_jump_table ]
  %5177 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.342
  %sp35468 = getelementptr i256, ptr %5177, i64 -2
  %swap.a35469 = load i256, ptr %sp35468, align 16
  %sp35470 = getelementptr i256, ptr %5177, i64 -4
  %swap.b35471 = load i256, ptr %sp35470, align 16
  store i256 %swap.a35469, ptr %sp35470, align 16
  store i256 %swap.b35471, ptr %sp35468, align 16
  %sp35474 = getelementptr i256, ptr %5177, i64 -3
  %swap.a35475 = load i256, ptr %sp35474, align 16
  %sp35476 = getelementptr i256, ptr %5177, i64 -5
  store i256 %swap.a35475, ptr %sp35476, align 16
  store i256 21564, ptr %sp35474, align 16
  store i256 %swap.a35475, ptr %sp35468, align 16
  %sp35488 = getelementptr i256, ptr %5177, i64 -1
  store i256 %swap.a35469, ptr %sp35488, align 16
  %5178 = add i64 %len.addr.342, 1
  %sp35490 = getelementptr i256, ptr %5177, i64 -7
  %dup735491 = load i256, ptr %sp35490, align 16
  store i256 %dup735491, ptr %5177, align 16
  br label %OP10187.JUMPDEST

OP10170.JUMPDEST:                                 ; preds = %dynamic_jump_table
  %5179 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp35496 = getelementptr i256, ptr %5179, i64 -1
  %swap.a35497 = load i256, ptr %sp35496, align 16
  %sp35498 = getelementptr i256, ptr %5179, i64 -9
  %swap.b35499 = load i256, ptr %sp35498, align 16
  store i256 %swap.a35497, ptr %sp35498, align 16
  store i256 %swap.b35499, ptr %sp35496, align 16
  %sp35503 = getelementptr i256, ptr %5179, i64 -8
  %swap.b35504 = load i256, ptr %sp35503, align 16
  store i256 %swap.b35499, ptr %sp35503, align 16
  store i256 %swap.b35504, ptr %sp35496, align 16
  %5180 = add i64 %len.addr.357, -8
  br label %dynamic_jump_table.backedge

OP10181.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP9983.JUMPDEST
  %len.addr.343 = phi i64 [ %len.addr.357, %dynamic_jump_table ], [ %5077, %OP9983.JUMPDEST ]
  %5181 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.343
  %sp35517 = getelementptr i256, ptr %5181, i64 -1
  %5182 = tail call i8 @__revmc_builtin_extcodesize(ptr nonnull %arg.ecx.addr, ptr %sp35517, i8 17)
  %.not47829 = icmp eq i8 %5182, 0
  br i1 %.not47829, label %OP10183.ISZERO, label %return, !prof !6

OP10183.ISZERO:                                   ; preds = %OP10181.JUMPDEST
  %5183 = add i64 %len.addr.343, -1
  %sp35519 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5183
  %a35520 = load i256, ptr %sp35519, align 16
  %5184 = icmp ne i256 %a35520, 0
  %5185 = zext i1 %5184 to i256
  store i256 %5185, ptr %sp35519, align 16
  %sp35529 = getelementptr i256, ptr %5181, i64 -2
  %swap.b35530 = load i256, ptr %sp35529, align 16
  store i256 %5185, ptr %sp35529, align 16
  store i256 %swap.b35530, ptr %sp35517, align 16
  br label %dynamic_jump_table.backedge

OP10187.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10158.JUMPDEST
  %len.addr.344 = phi i64 [ %5178, %OP10158.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %5186 = add i64 %len.addr.344, 1
  %sp35536 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.344
  store i256 96, ptr %sp35536, align 16
  %sp35538 = getelementptr i256, ptr %sp35536, i64 -3
  %dup435539 = load i256, ptr %sp35538, align 16
  %sp35540 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5186
  %5187 = icmp eq i256 %dup435539, 0
  %5188 = zext i1 %5187 to i256
  store i256 %5188, ptr %sp35540, align 16
  br i1 %5187, label %OP10197.JUMPDEST, label %OP10193.POP

OP10193.POP:                                      ; preds = %OP10187.JUMPDEST
  %sp35550 = getelementptr i256, ptr %sp35536, i64 -2
  %dup235551 = load i256, ptr %sp35550, align 16
  store i256 %dup235551, ptr %sp35536, align 16
  br label %OP8013.JUMPDEST

OP10197.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10187.JUMPDEST
  %len.addr.345 = phi i64 [ %5186, %OP10187.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ]
  %5189 = add i64 %len.addr.345, 1
  %5190 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.345
  %sp35556 = getelementptr i256, ptr %5190, i64 -3
  %dup335557 = load i256, ptr %sp35556, align 16
  store i256 %dup335557, ptr %5190, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1008)
  %ecx.memory.addr.i52137 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i52138 = load ptr, ptr %ecx.memory.addr.i52137, align 8, !alias.scope !1008, !noalias !1011
  %ecx.memory.len.addr.i52139 = getelementptr inbounds i8, ptr %ecx.memory.i52138, i64 16
  %ecx.memory.len.i52140 = load i64, ptr %ecx.memory.len.addr.i52139, align 8, !noalias !1013
  %ecx.memory.last_checkpoint.addr.i52141 = getelementptr inbounds i8, ptr %ecx.memory.i52138, i64 48
  %ecx.memory.last_checkpoint.i52142 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52141, align 8, !noalias !1013
  %5191 = sub i64 %ecx.memory.len.i52140, %ecx.memory.last_checkpoint.i52142
  %5192 = icmp ugt i256 %dup335557, 18446744073709551615
  %5193 = trunc i256 %dup335557 to i64
  %5194 = add i64 %5193, 32
  %5195 = icmp ugt i64 %5193, -33
  %5196 = or i1 %5192, %5195
  %5197 = select i1 %5196, i64 -1, i64 %5194
  %5198 = icmp ugt i64 %5197, %5191
  br i1 %5198, label %resize.i52150, label %OP10199.MLOAD.contd, !prof !5

resize.i52150:                                    ; preds = %OP10197.JUMPDEST
  %5199 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5197), !noalias !1011
  %.not.i52151 = icmp eq i8 %5199, 0
  br i1 %.not.i52151, label %OP10199.MLOAD.contd, label %return, !prof !6

OP10199.MLOAD.contd:                              ; preds = %OP10197.JUMPDEST, %resize.i52150
  %ecx.memory.buffer.ptr.shared.addr.i52144 = getelementptr inbounds i8, ptr %ecx.memory.i52138, i64 8
  %ecx.memory.buffer.ptr.shared.i52145 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52144, align 8, !noalias !1013
  %ecx.memory.buffer.ptr.i52146 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52145, i64 %ecx.memory.last_checkpoint.i52142
  %slot.i52147 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52146, i64 %5193
  %slot.value.i52148 = load i256, ptr %slot.i52147, align 1, !noalias !1013
  %5200 = icmp eq i256 %slot.value.i52148, 0
  %5201 = zext i1 %5200 to i256
  store i256 %5201, ptr %5190, align 16
  br i1 %5200, label %OP10210.JUMPDEST, label %OP10203.DUP3

OP10203.DUP3:                                     ; preds = %OP10199.MLOAD.contd
  %dup335574 = load i256, ptr %sp35556, align 16
  store i256 %dup335574, ptr %5190, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1014)
  %ecx.memory.i52154 = load ptr, ptr %ecx.memory.addr.i52137, align 8, !alias.scope !1014, !noalias !1017
  %ecx.memory.len.addr.i52155 = getelementptr inbounds i8, ptr %ecx.memory.i52154, i64 16
  %ecx.memory.len.i52156 = load i64, ptr %ecx.memory.len.addr.i52155, align 8, !noalias !1019
  %ecx.memory.last_checkpoint.addr.i52157 = getelementptr inbounds i8, ptr %ecx.memory.i52154, i64 48
  %ecx.memory.last_checkpoint.i52158 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52157, align 8, !noalias !1019
  %5202 = sub i64 %ecx.memory.len.i52156, %ecx.memory.last_checkpoint.i52158
  %5203 = icmp ugt i256 %dup335574, 18446744073709551615
  %5204 = trunc i256 %dup335574 to i64
  %5205 = add i64 %5204, 32
  %5206 = icmp ugt i64 %5204, -33
  %5207 = or i1 %5203, %5206
  %5208 = select i1 %5207, i64 -1, i64 %5205
  %5209 = icmp ugt i64 %5208, %5202
  br i1 %5209, label %resize.i52166, label %OP10204.MLOAD.contd, !prof !5

resize.i52166:                                    ; preds = %OP10203.DUP3
  %5210 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5208), !noalias !1017
  %.not.i52167 = icmp eq i8 %5210, 0
  br i1 %.not.i52167, label %resize.i52166.OP10204.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i52166.OP10204.MLOAD.contd_crit_edge:      ; preds = %resize.i52166
  %dup535588.pre = load i256, ptr %sp35556, align 16
  br label %OP10204.MLOAD.contd

OP10204.MLOAD.contd:                              ; preds = %resize.i52166.OP10204.MLOAD.contd_crit_edge, %OP10203.DUP3
  %dup535588 = phi i256 [ %dup535588.pre, %resize.i52166.OP10204.MLOAD.contd_crit_edge ], [ %dup335574, %OP10203.DUP3 ]
  %ecx.memory.buffer.ptr.shared.addr.i52160 = getelementptr inbounds i8, ptr %ecx.memory.i52154, i64 8
  %ecx.memory.buffer.ptr.shared.i52161 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52160, align 8, !noalias !1019
  %ecx.memory.buffer.ptr.i52162 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52161, i64 %ecx.memory.last_checkpoint.i52158
  %slot.i52163 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52162, i64 %5204
  %slot.value.i52164 = load i256, ptr %slot.i52163, align 1, !noalias !1019
  %5211 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i52164)
  store i256 %5211, ptr %5190, align 16
  %sp35585 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5189
  store i256 %5211, ptr %sp35585, align 16
  %sp35589 = getelementptr i256, ptr %5190, i64 2
  store i256 %dup535588, ptr %sp35589, align 16
  %sp35591 = getelementptr i256, ptr %5190, i64 3
  store i256 32, ptr %sp35591, align 16
  %5212 = add i256 %dup535588, 32
  store i256 %5212, ptr %sp35589, align 16
  %5213 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp35585, i8 16)
  %.not47802 = icmp eq i8 %5213, 0
  %spec.select36674 = select i1 %.not47802, i8 16, i8 %5213, !prof !6
  br label %return

OP10210.JUMPDEST.loopexit:                        ; preds = %dynamic_jump_table
  %.pre54297 = add i64 %len.addr.357, 1
  br label %OP10210.JUMPDEST

OP10210.JUMPDEST:                                 ; preds = %OP10210.JUMPDEST.loopexit, %OP10199.MLOAD.contd
  %.pre-phi54298 = phi i64 [ %.pre54297, %OP10210.JUMPDEST.loopexit ], [ %5189, %OP10199.MLOAD.contd ]
  %len.addr.346 = phi i64 [ %len.addr.357, %OP10210.JUMPDEST.loopexit ], [ %len.addr.345, %OP10199.MLOAD.contd ]
  %sp35602 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.346
  store i256 64, ptr %sp35602, align 16
  %mload.out.slot35606 = alloca i256, align 16
  %5214 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot35606, ptr %arg.ecx.addr)
  %.not47803 = icmp eq i8 %5214, 0
  br i1 %.not47803, label %OP10212.MLOAD.contd, label %return, !prof !6

OP10212.MLOAD.contd:                              ; preds = %OP10210.JUMPDEST
  %mload.out35607 = load i256, ptr %mload.out.slot35606, align 16
  store i256 %mload.out35607, ptr %sp35602, align 16
  %sp35610 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi54298
  store i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %sp35610, align 16
  %5215 = add i64 %len.addr.346, 3
  %sp35614 = getelementptr i256, ptr %sp35602, i64 2
  store i256 %mload.out35607, ptr %sp35614, align 16
  %5216 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out35607, i256 3963877391197344453575983046348115674221700746820753546331534351508065746944, ptr %arg.ecx.addr)
  %.not47804 = icmp eq i8 %5216, 0
  br i1 %.not47804, label %OP10216.PUSH1, label %return, !prof !6

OP10216.PUSH1:                                    ; preds = %OP10212.MLOAD.contd
  store i256 32, ptr %sp35610, align 16
  store i256 4, ptr %sp35614, align 16
  %5217 = add i64 %len.addr.346, 4
  %dup335626 = load i256, ptr %sp35602, align 16
  %sp35627 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5215
  store i256 %dup335626, ptr %sp35627, align 16
  %5218 = add i256 %dup335626, 4
  store i256 %5218, ptr %sp35614, align 16
  store i256 32, ptr %sp35627, align 16
  %sp35641 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5217
  store i256 %5218, ptr %sp35641, align 16
  %5219 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5218, i256 32, ptr %arg.ecx.addr)
  %.not47805 = icmp eq i8 %5219, 0
  br i1 %.not47805, label %OP10223.DUP5, label %return, !prof !6

OP10223.DUP5:                                     ; preds = %OP10216.PUSH1
  %sp35648 = getelementptr i256, ptr %sp35602, i64 -2
  %dup535649 = load i256, ptr %sp35648, align 16
  store i256 %dup535649, ptr %sp35627, align 16
  %mload.out.slot35654 = alloca i256, align 16
  %5220 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup535649, ptr %mload.out.slot35654, ptr %arg.ecx.addr)
  %.not47806 = icmp eq i8 %5220, 0
  br i1 %.not47806, label %OP10224.MLOAD.contd, label %return, !prof !6

OP10224.MLOAD.contd:                              ; preds = %OP10223.DUP5
  %mload.out35655 = load i256, ptr %mload.out.slot35654, align 16
  store i256 %mload.out35655, ptr %sp35627, align 16
  store i256 36, ptr %sp35641, align 16
  %dup535661 = load i256, ptr %sp35602, align 16
  %sp35662 = getelementptr i256, ptr %sp35602, i64 5
  store i256 %dup535661, ptr %sp35662, align 16
  %5221 = add i256 %dup535661, 36
  store i256 %5221, ptr %sp35641, align 16
  %5222 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5221, i256 %mload.out35655, ptr %arg.ecx.addr)
  %.not47807 = icmp eq i8 %5222, 0
  br i1 %.not47807, label %OP10229.DUP5, label %return, !prof !6

OP10229.DUP5:                                     ; preds = %OP10224.MLOAD.contd
  %dup535676 = load i256, ptr %sp35648, align 16
  store i256 %dup535676, ptr %sp35627, align 16
  %mload.out.slot35681 = alloca i256, align 16
  %5223 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup535676, ptr %mload.out.slot35681, ptr %arg.ecx.addr)
  %.not47808 = icmp eq i8 %5223, 0
  br i1 %.not47808, label %OP10230.MLOAD.contd, label %return, !prof !6

OP10230.MLOAD.contd:                              ; preds = %OP10229.DUP5
  %mload.out35682 = load i256, ptr %mload.out.slot35681, align 16
  store i256 %mload.out35682, ptr %sp35627, align 16
  %dup635686 = load i256, ptr %sp35648, align 16
  store i256 %dup635686, ptr %sp35641, align 16
  %swap.b35692 = load i256, ptr %sp35602, align 16
  store i256 %dup635686, ptr %sp35602, align 16
  store i256 %swap.b35692, ptr %sp35641, align 16
  %swap.b35697 = load i256, ptr %sp35614, align 16
  store i256 %swap.b35692, ptr %sp35614, align 16
  store i256 %swap.b35697, ptr %sp35641, align 16
  %sp35701 = getelementptr i256, ptr %sp35602, i64 1
  %swap.b35702 = load i256, ptr %sp35701, align 16
  store i256 %swap.b35697, ptr %sp35701, align 16
  store i256 %swap.b35702, ptr %sp35641, align 16
  store i256 %swap.b35697, ptr %sp35662, align 16
  store i256 %swap.b35697, ptr %sp35614, align 16
  store i256 %swap.b35692, ptr %sp35662, align 16
  %sp35713 = getelementptr i256, ptr %sp35602, i64 6
  store i256 68, ptr %sp35713, align 16
  %5224 = add i256 %swap.b35692, 68
  store i256 %5224, ptr %sp35662, align 16
  store i256 %5224, ptr %sp35627, align 16
  store i256 %mload.out35682, ptr %sp35662, align 16
  store i256 %mload.out35682, ptr %sp35641, align 16
  store i256 %swap.b35702, ptr %sp35662, align 16
  store i256 %dup635686, ptr %sp35713, align 16
  %5225 = add i256 %dup635686, %swap.b35702
  store i256 %5225, ptr %sp35662, align 16
  store i256 %5225, ptr %sp35641, align 16
  store i256 %mload.out35682, ptr %sp35662, align 16
  store i256 %mload.out35682, ptr %sp35713, align 16
  %sp35752 = getelementptr i256, ptr %sp35602, i64 7
  store i256 %5224, ptr %sp35752, align 16
  %sp35756 = getelementptr i256, ptr %sp35602, i64 8
  store i256 %5225, ptr %sp35756, align 16
  %5226 = add i64 %len.addr.346, 10
  %sp35758 = getelementptr i256, ptr %sp35602, i64 9
  store i256 0, ptr %sp35758, align 16
  %sp35762 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5226
  %5227 = icmp eq i256 %mload.out35682, 0
  %5228 = zext i1 %5227 to i256
  store i256 %5228, ptr %sp35762, align 16
  br i1 %5227, label %OP9753.JUMPDEST, label %OP10252.DUP2

OP10252.DUP2:                                     ; preds = %OP10230.MLOAD.contd
  %5229 = add i64 %len.addr.346, 11
  store i256 %5225, ptr %sp35762, align 16
  %sp35777 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5229
  store i256 0, ptr %sp35777, align 16
  store i256 %5225, ptr %sp35762, align 16
  %mload.out.slot35787 = alloca i256, align 16
  %5230 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %5225, ptr %mload.out.slot35787, ptr %arg.ecx.addr)
  %.not47809 = icmp eq i8 %5230, 0
  br i1 %.not47809, label %OP10255.MLOAD.contd, label %return, !prof !6

OP10255.MLOAD.contd:                              ; preds = %OP10252.DUP2
  %mload.out35788 = load i256, ptr %mload.out.slot35787, align 16
  store i256 %mload.out35788, ptr %sp35762, align 16
  %dup435792 = load i256, ptr %sp35752, align 16
  store i256 %dup435792, ptr %sp35777, align 16
  %dup335796 = load i256, ptr %sp35758, align 16
  %sp35797 = getelementptr i256, ptr %sp35602, i64 12
  store i256 %dup335796, ptr %sp35797, align 16
  %5231 = add i256 %dup335796, %dup435792
  store i256 %5231, ptr %sp35777, align 16
  %5232 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %5231, i256 %mload.out35788, ptr %arg.ecx.addr)
  %.not47810 = icmp eq i8 %5232, 0
  br i1 %.not47810, label %OP10260.PUSH1, label %return, !prof !6

OP10260.PUSH1:                                    ; preds = %OP10255.MLOAD.contd
  store i256 32, ptr %sp35762, align 16
  %b35815 = load i256, ptr %sp35758, align 16
  %5233 = add i256 %b35815, 32
  store i256 %5233, ptr %sp35758, align 16
  br label %OP9734.JUMPDEST.preheader

OP10264.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP3825.MLOAD.contd, %OP3811.MLOAD.contd, %OP3797.MLOAD.contd
  %len.addr.347 = phi i64 [ %1814, %OP3825.MLOAD.contd ], [ %1810, %OP3811.MLOAD.contd ], [ %1806, %OP3797.MLOAD.contd ], [ %len.addr.357, %dynamic_jump_table ]
  %5234 = add i64 %len.addr.347, 1
  %5235 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.347
  %sp35820 = getelementptr i256, ptr %5235, i64 -3
  %dup335821 = load i256, ptr %sp35820, align 16
  store i256 %dup335821, ptr %5235, align 16
  %5236 = add i64 %len.addr.347, 2
  %sp35826 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5234
  store i256 %dup335821, ptr %sp35826, align 16
  %5237 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp35826, i8 17)
  %.not48490 = icmp eq i8 %5237, 0
  br i1 %.not48490, label %OP10268.PUSH1, label %return, !prof !6

OP10268.PUSH1:                                    ; preds = %OP10264.JUMPDEST
  %5238 = add i64 %len.addr.347, 3
  %sp35830 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5236
  %dup235833 = load i256, ptr %sp35826, align 16
  %sp35834 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5238
  %sp35836 = getelementptr i256, ptr %5235, i64 4
  store i256 256, ptr %sp35836, align 16
  %5239 = shl i256 %dup235833, 8
  %5240 = and i256 %5239, 256
  %5241 = xor i256 %5240, 256
  store i256 %5241, ptr %sp35834, align 16
  %5242 = add nsw i256 %5241, -1
  %5243 = and i256 %dup235833, %5242
  %5244 = lshr i256 %5243, 1
  %swap.b35884 = load i256, ptr %5235, align 16
  store i256 %5244, ptr %5235, align 16
  store i256 %swap.b35884, ptr %sp35826, align 16
  store i256 0, ptr %sp35830, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1020)
  %ecx.memory.addr.i52169 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i52170 = load ptr, ptr %ecx.memory.addr.i52169, align 8, !alias.scope !1020
  %ecx.memory.len.addr.i52171 = getelementptr inbounds i8, ptr %ecx.memory.i52170, i64 16
  %ecx.memory.len.i52172 = load i64, ptr %ecx.memory.len.addr.i52171, align 8, !noalias !1020
  %ecx.memory.last_checkpoint.addr.i52173 = getelementptr inbounds i8, ptr %ecx.memory.i52170, i64 48
  %ecx.memory.last_checkpoint.i52174 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52173, align 8, !noalias !1020
  %5245 = sub i64 %ecx.memory.len.i52172, %ecx.memory.last_checkpoint.i52174
  %5246 = icmp ult i64 %5245, 32
  br i1 %5246, label %resize.i52180, label %OP10283.PUSH1, !prof !5

resize.i52180:                                    ; preds = %OP10268.PUSH1
  %5247 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i52181 = icmp eq i8 %5247, 0
  br i1 %.not.i52181, label %OP10283.PUSH1, label %return, !prof !6

OP10283.PUSH1:                                    ; preds = %OP10268.PUSH1, %resize.i52180
  %ecx.memory.buffer.ptr.shared.addr.i52176 = getelementptr inbounds i8, ptr %ecx.memory.i52170, i64 8
  %ecx.memory.buffer.ptr.shared.i52177 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52176, align 8, !noalias !1020
  %ecx.memory.buffer.ptr.i52178 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52177, i64 %ecx.memory.last_checkpoint.i52174
  %5248 = tail call i256 @llvm.bswap.i256(i256 %swap.b35884)
  store i256 %5248, ptr %ecx.memory.buffer.ptr.i52178, align 1, !noalias !1020
  store i256 32, ptr %sp35826, align 16
  store i256 0, ptr %sp35830, align 16
  %5249 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp35826)
  %.not48492 = icmp eq i8 %5249, 0
  br i1 %.not48492, label %OP10286.SWAP1, label %return, !prof !6

OP10286.SWAP1:                                    ; preds = %OP10283.PUSH1
  %swap.a35900 = load i256, ptr %sp35826, align 16
  %swap.b35902 = load i256, ptr %5235, align 16
  store i256 %swap.a35900, ptr %5235, align 16
  %5250 = add i256 %swap.b35902, 31
  %5251 = lshr i256 %5250, 5
  %5252 = add i256 %swap.a35900, %5251
  %sp35937 = getelementptr i256, ptr %5235, i64 -2
  %swap.b35938 = load i256, ptr %sp35937, align 16
  store i256 %5252, ptr %sp35937, align 16
  store i256 %swap.b35938, ptr %sp35826, align 16
  %sp35940 = getelementptr i256, ptr %5235, i64 -1
  %dup335941 = load i256, ptr %sp35940, align 16
  store i256 31, ptr %sp35834, align 16
  %5253 = icmp ugt i256 %dup335941, 31
  %5254 = zext i1 %5253 to i256
  store i256 %5254, ptr %sp35830, align 16
  br i1 %5253, label %OP10313.JUMPDEST, label %OP10300.DUP1

OP10300.DUP1:                                     ; preds = %OP10286.SWAP1
  store i256 %swap.b35938, ptr %sp35830, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1023)
  %ecx.memory.i52184 = load ptr, ptr %ecx.memory.addr.i52169, align 8, !alias.scope !1023, !noalias !1026
  %ecx.memory.len.addr.i52185 = getelementptr inbounds i8, ptr %ecx.memory.i52184, i64 16
  %ecx.memory.len.i52186 = load i64, ptr %ecx.memory.len.addr.i52185, align 8, !noalias !1028
  %ecx.memory.last_checkpoint.addr.i52187 = getelementptr inbounds i8, ptr %ecx.memory.i52184, i64 48
  %ecx.memory.last_checkpoint.i52188 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52187, align 8, !noalias !1028
  %5255 = sub i64 %ecx.memory.len.i52186, %ecx.memory.last_checkpoint.i52188
  %5256 = icmp ugt i256 %swap.b35938, 18446744073709551615
  %5257 = trunc i256 %swap.b35938 to i64
  %5258 = add i64 %5257, 32
  %5259 = icmp ugt i64 %5257, -33
  %5260 = or i1 %5256, %5259
  %5261 = select i1 %5260, i64 -1, i64 %5258
  %5262 = icmp ugt i64 %5261, %5255
  br i1 %5262, label %resize.i52196, label %OP10301.MLOAD.contd, !prof !5

resize.i52196:                                    ; preds = %OP10300.DUP1
  %5263 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5261), !noalias !1026
  %.not.i52197 = icmp eq i8 %5263, 0
  br i1 %.not.i52197, label %resize.i52196.OP10301.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i52196.OP10301.MLOAD.contd_crit_edge:      ; preds = %resize.i52196
  %dup435978.pre = load i256, ptr %sp35940, align 16
  br label %OP10301.MLOAD.contd

OP10301.MLOAD.contd:                              ; preds = %resize.i52196.OP10301.MLOAD.contd_crit_edge, %OP10300.DUP1
  %dup435978 = phi i256 [ %dup435978.pre, %resize.i52196.OP10301.MLOAD.contd_crit_edge ], [ %dup335941, %OP10300.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i52190 = getelementptr inbounds i8, ptr %ecx.memory.i52184, i64 8
  %ecx.memory.buffer.ptr.shared.i52191 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52190, align 8, !noalias !1028
  %ecx.memory.buffer.ptr.i52192 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52191, i64 %ecx.memory.last_checkpoint.i52188
  %slot.i52193 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52192, i64 %5257
  %slot.value.i52194 = load i256, ptr %slot.i52193, align 1, !noalias !1028
  %5264 = and i256 %slot.value.i52194, 452312848583266388373324160190187140051835877600158453279131187530910662655
  %5265 = tail call i256 @llvm.bswap.i256(i256 %5264)
  store i256 %dup435978, ptr %sp35836, align 16
  %5266 = shl i256 %dup435978, 1
  %5267 = or i256 %5266, %5265
  store i256 %5267, ptr %sp35830, align 16
  %dup635998 = load i256, ptr %sp35820, align 16
  store i256 %dup635998, ptr %sp35834, align 16
  %5268 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp35830, i8 17)
  %.not48494 = icmp eq i8 %5268, 0
  br i1 %.not48494, label %OP10349.JUMPDEST, label %return, !prof !6

OP10313.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10286.SWAP1
  %len.addr.348 = phi i64 [ %5236, %OP10286.SWAP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %5269 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.348
  %sp36005 = getelementptr i256, ptr %5269, i64 -3
  %dup336006 = load i256, ptr %sp36005, align 16
  %sp36011 = getelementptr i256, ptr %5269, i64 1
  %5270 = shl i256 %dup336006, 1
  %5271 = or disjoint i256 %5270, 1
  store i256 %5271, ptr %5269, align 16
  %sp36027 = getelementptr i256, ptr %5269, i64 -5
  %dup636028 = load i256, ptr %sp36027, align 16
  store i256 %dup636028, ptr %sp36011, align 16
  %5272 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %5269, i8 17)
  %.not48495 = icmp eq i8 %5272, 0
  br i1 %.not48495, label %OP10321.DUP3, label %return, !prof !6

OP10321.DUP3:                                     ; preds = %OP10313.JUMPDEST
  %dup336034 = load i256, ptr %sp36005, align 16
  %5273 = icmp eq i256 %dup336034, 0
  %5274 = zext i1 %5273 to i256
  store i256 %5274, ptr %5269, align 16
  br i1 %5273, label %OP10349.JUMPDEST, label %OP10325.SWAP2

OP10325.SWAP2:                                    ; preds = %OP10321.DUP3
  %sp36044 = getelementptr i256, ptr %5269, i64 -1
  %swap.a36045 = load i256, ptr %sp36044, align 16
  store i256 %swap.a36045, ptr %sp36005, align 16
  store i256 %swap.a36045, ptr %5269, align 16
  %5275 = add i256 %dup336034, %swap.a36045
  store i256 %5275, ptr %sp36044, align 16
  br label %OP10328.JUMPDEST.preheader, !annotation !7

OP10328.JUMPDEST.preheader.loopexit:              ; preds = %dynamic_jump_table
  %.phi.trans.insert54025 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp36060.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54025, i64 -3
  %dup33606153465.pre = load i256, ptr %sp36060.phi.trans.insert, align 16
  %sp36064.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54025, i64 -1
  %dup23606553466.pre = load i256, ptr %sp36064.phi.trans.insert, align 16
  br label %OP10328.JUMPDEST.preheader

OP10328.JUMPDEST.preheader:                       ; preds = %OP10328.JUMPDEST.preheader.loopexit, %OP10325.SWAP2
  %dup23606553466 = phi i256 [ %5275, %OP10325.SWAP2 ], [ %dup23606553466.pre, %OP10328.JUMPDEST.preheader.loopexit ]
  %dup33606153465 = phi i256 [ %swap.a36045, %OP10325.SWAP2 ], [ %dup33606153465.pre, %OP10328.JUMPDEST.preheader.loopexit ]
  %len.addr.349.ph = phi i64 [ %len.addr.348, %OP10325.SWAP2 ], [ %len.addr.357, %OP10328.JUMPDEST.preheader.loopexit ]
  %5276 = add i64 %len.addr.349.ph, 1
  %5277 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.349.ph
  %sp36060 = getelementptr i256, ptr %5277, i64 -3
  %sp36064 = getelementptr i256, ptr %5277, i64 -1
  %sp36066 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5276
  store i256 %dup23606553466, ptr %sp36066, align 16
  %5278 = icmp ule i256 %dup23606553466, %dup33606153465
  %5279 = zext i1 %5278 to i256
  store i256 %5279, ptr %5277, align 16
  br i1 %5278, label %OP10349.JUMPDEST, label %OP10335.DUP3.lr.ph

OP10335.DUP3.lr.ph:                               ; preds = %OP10328.JUMPDEST.preheader
  %ecx.memory.addr.i52199 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp36091 = getelementptr i256, ptr %5277, i64 -2
  br label %OP10335.DUP3

OP10335.DUP3:                                     ; preds = %OP10335.DUP3.lr.ph, %OP10339.SWAP2
  %dup336082 = phi i256 [ %dup33606153465, %OP10335.DUP3.lr.ph ], [ %5291, %OP10339.SWAP2 ]
  store i256 %dup336082, ptr %5277, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1029)
  %ecx.memory.i52200 = load ptr, ptr %ecx.memory.addr.i52199, align 8, !alias.scope !1029, !noalias !1032
  %ecx.memory.len.addr.i52201 = getelementptr inbounds i8, ptr %ecx.memory.i52200, i64 16
  %ecx.memory.len.i52202 = load i64, ptr %ecx.memory.len.addr.i52201, align 8, !noalias !1034
  %ecx.memory.last_checkpoint.addr.i52203 = getelementptr inbounds i8, ptr %ecx.memory.i52200, i64 48
  %ecx.memory.last_checkpoint.i52204 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52203, align 8, !noalias !1034
  %5280 = sub i64 %ecx.memory.len.i52202, %ecx.memory.last_checkpoint.i52204
  %5281 = icmp ugt i256 %dup336082, 18446744073709551615
  %5282 = trunc i256 %dup336082 to i64
  %5283 = add i64 %5282, 32
  %5284 = icmp ugt i64 %5282, -33
  %5285 = or i1 %5281, %5284
  %5286 = select i1 %5285, i64 -1, i64 %5283
  %5287 = icmp ugt i64 %5286, %5280
  br i1 %5287, label %resize.i52212, label %OP10336.MLOAD.contd, !prof !5

resize.i52212:                                    ; preds = %OP10335.DUP3
  %5288 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %5286), !noalias !1032
  %.not.i52213 = icmp eq i8 %5288, 0
  br i1 %.not.i52213, label %OP10336.MLOAD.contd, label %return, !prof !6

OP10336.MLOAD.contd:                              ; preds = %OP10335.DUP3, %resize.i52212
  %ecx.memory.buffer.ptr.shared.addr.i52206 = getelementptr inbounds i8, ptr %ecx.memory.i52200, i64 8
  %ecx.memory.buffer.ptr.shared.i52207 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52206, align 8, !noalias !1034
  %ecx.memory.buffer.ptr.i52208 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52207, i64 %ecx.memory.last_checkpoint.i52204
  %slot.i52209 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i52208, i64 %5282
  %slot.value.i52210 = load i256, ptr %slot.i52209, align 1, !noalias !1034
  %5289 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i52210)
  store i256 %5289, ptr %5277, align 16
  %dup336092 = load i256, ptr %sp36091, align 16
  store i256 %dup336092, ptr %sp36066, align 16
  %5290 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %5277, i8 17)
  %.not48497 = icmp eq i8 %5290, 0
  br i1 %.not48497, label %OP10339.SWAP2, label %return, !prof !6

OP10339.SWAP2:                                    ; preds = %OP10336.MLOAD.contd
  %swap.a36098 = load i256, ptr %sp36064, align 16
  %swap.b36100 = load i256, ptr %sp36060, align 16
  %5291 = add i256 %swap.b36100, 32
  store i256 %5291, ptr %sp36060, align 16
  %swap.b36118 = load i256, ptr %sp36091, align 16
  %5292 = add i256 %swap.b36118, 1
  store i256 %5292, ptr %sp36091, align 16
  store i256 %swap.a36098, ptr %sp36066, align 16
  %5293 = icmp ule i256 %swap.a36098, %5291
  %5294 = zext i1 %5293 to i256
  store i256 %5294, ptr %5277, align 16
  br i1 %5293, label %OP10349.JUMPDEST, label %OP10335.DUP3

OP10349.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10339.SWAP2, %OP10435.SWAP2, %OP10328.JUMPDEST.preheader, %OP10424.JUMPDEST.preheader, %OP10397.DUP3, %OP10301.MLOAD.contd, %OP10417.DUP3, %OP10321.DUP3
  %len.addr.350 = phi i64 [ %len.addr.353, %OP10417.DUP3 ], [ %len.addr.348, %OP10321.DUP3 ], [ %5236, %OP10301.MLOAD.contd ], [ %5302, %OP10397.DUP3 ], [ %len.addr.354.ph, %OP10424.JUMPDEST.preheader ], [ %len.addr.349.ph, %OP10328.JUMPDEST.preheader ], [ %len.addr.354.ph, %OP10435.SWAP2 ], [ %len.addr.349.ph, %OP10339.SWAP2 ], [ %len.addr.357, %dynamic_jump_table ]
  %5295 = add i64 %len.addr.350, -1
  %5296 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.350
  %sp36138 = getelementptr i256, ptr %5296, i64 -1
  %sp36140 = getelementptr i256, ptr %5296, i64 -4
  %swap.b36141 = load i256, ptr %sp36140, align 16
  store i256 21831, ptr %sp36140, align 16
  %sp36145 = getelementptr i256, ptr %5296, i64 -3
  %swap.b36146 = load i256, ptr %sp36145, align 16
  store i256 %swap.b36141, ptr %sp36145, align 16
  store i256 %swap.b36146, ptr %sp36138, align 16
  br label %OP10446.JUMPDEST.preheader

OP10357.JUMPDEST.loopexit53511:                   ; preds = %dynamic_jump_table
  %.phi.trans.insert54174 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp36152.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54174, i64 -2
  %swap.a36153.pre = load i256, ptr %sp36152.phi.trans.insert, align 16
  br label %OP10357.JUMPDEST

OP10357.JUMPDEST:                                 ; preds = %OP10456.PUSH1, %OP10357.JUMPDEST.loopexit53511, %OP10446.JUMPDEST.preheader
  %swap.a36153 = phi i256 [ %dup33647453475, %OP10446.JUMPDEST.preheader ], [ %swap.a36153.pre, %OP10357.JUMPDEST.loopexit53511 ], [ %dup336474, %OP10456.PUSH1 ]
  %len.addr.351 = phi i64 [ %len.addr.356.ph, %OP10446.JUMPDEST.preheader ], [ %len.addr.357, %OP10357.JUMPDEST.loopexit53511 ], [ %len.addr.356.ph, %OP10456.PUSH1 ]
  %5297 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.351
  %sp36152 = getelementptr i256, ptr %5297, i64 -2
  %sp36154 = getelementptr i256, ptr %5297, i64 -3
  %swap.b36155 = load i256, ptr %sp36154, align 16
  store i256 %swap.a36153, ptr %sp36154, align 16
  store i256 %swap.b36155, ptr %sp36152, align 16
  %5298 = add i64 %len.addr.351, -2
  br label %dynamic_jump_table.preheader

OP10361.JUMPDEST.sink.split:                      ; preds = %OP4816.JUMPDEST, %OP6601.JUMPDEST
  %sp22651.sink54776 = phi ptr [ %sp22651, %OP6601.JUMPDEST ], [ %sp16377, %OP4816.JUMPDEST ]
  %.sink54775 = phi i256 [ 4, %OP6601.JUMPDEST ], [ 5, %OP4816.JUMPDEST ]
  %len.addr.250.sink = phi i64 [ %len.addr.250, %OP6601.JUMPDEST ], [ %len.addr.194, %OP4816.JUMPDEST ]
  %sp22653 = getelementptr i256, ptr %sp22651.sink54776, i64 1
  store i256 %.sink54775, ptr %sp22653, align 16
  %sp22655 = getelementptr i256, ptr %sp22651.sink54776, i64 -2
  %dup422656 = load i256, ptr %sp22655, align 16
  %sp22657 = getelementptr i256, ptr %sp22651.sink54776, i64 2
  store i256 %dup422656, ptr %sp22657, align 16
  %5299 = add i64 %len.addr.250.sink, 4
  %sp22659 = getelementptr i256, ptr %sp22651.sink54776, i64 -1
  %dup422660 = load i256, ptr %sp22659, align 16
  %sp22661 = getelementptr i256, ptr %sp22651.sink54776, i64 3
  store i256 %dup422660, ptr %sp22661, align 16
  br label %OP10361.JUMPDEST

OP10361.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10361.JUMPDEST.sink.split
  %len.addr.352 = phi i64 [ %5299, %OP10361.JUMPDEST.sink.split ], [ %len.addr.357, %dynamic_jump_table ]
  %5300 = add i64 %len.addr.352, 1
  %5301 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.352
  %sp36161 = getelementptr i256, ptr %5301, i64 -3
  %dup336162 = load i256, ptr %sp36161, align 16
  store i256 %dup336162, ptr %5301, align 16
  %5302 = add i64 %len.addr.352, 2
  %sp36167 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5300
  store i256 %dup336162, ptr %sp36167, align 16
  %5303 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp36167, i8 17)
  %.not48974 = icmp eq i8 %5303, 0
  br i1 %.not48974, label %OP10365.PUSH1, label %return, !prof !6

OP10365.PUSH1:                                    ; preds = %OP10361.JUMPDEST
  %sp36171 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %5302
  %dup236174 = load i256, ptr %sp36167, align 16
  %sp36175 = getelementptr i256, ptr %5301, i64 3
  %sp36177 = getelementptr i256, ptr %5301, i64 4
  store i256 256, ptr %sp36177, align 16
  %5304 = shl i256 %dup236174, 8
  %5305 = and i256 %5304, 256
  %5306 = xor i256 %5305, 256
  store i256 %5306, ptr %sp36175, align 16
  %5307 = add nsw i256 %5306, -1
  %5308 = and i256 %dup236174, %5307
  %5309 = lshr i256 %5308, 1
  %swap.b36225 = load i256, ptr %5301, align 16
  store i256 %5309, ptr %5301, align 16
  store i256 %swap.b36225, ptr %sp36167, align 16
  store i256 0, ptr %sp36171, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1035)
  %ecx.memory.addr.i52215 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i52216 = load ptr, ptr %ecx.memory.addr.i52215, align 8, !alias.scope !1035
  %ecx.memory.len.addr.i52217 = getelementptr inbounds i8, ptr %ecx.memory.i52216, i64 16
  %ecx.memory.len.i52218 = load i64, ptr %ecx.memory.len.addr.i52217, align 8, !noalias !1035
  %ecx.memory.last_checkpoint.addr.i52219 = getelementptr inbounds i8, ptr %ecx.memory.i52216, i64 48
  %ecx.memory.last_checkpoint.i52220 = load i64, ptr %ecx.memory.last_checkpoint.addr.i52219, align 8, !noalias !1035
  %5310 = sub i64 %ecx.memory.len.i52218, %ecx.memory.last_checkpoint.i52220
  %5311 = icmp ult i64 %5310, 32
  br i1 %5311, label %resize.i52226, label %OP10380.PUSH1, !prof !5

resize.i52226:                                    ; preds = %OP10365.PUSH1
  %5312 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i52227 = icmp eq i8 %5312, 0
  br i1 %.not.i52227, label %OP10380.PUSH1, label %return, !prof !6

OP10380.PUSH1:                                    ; preds = %OP10365.PUSH1, %resize.i52226
  %ecx.memory.buffer.ptr.shared.addr.i52222 = getelementptr inbounds i8, ptr %ecx.memory.i52216, i64 8
  %ecx.memory.buffer.ptr.shared.i52223 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i52222, align 8, !noalias !1035
  %ecx.memory.buffer.ptr.i52224 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i52223, i64 %ecx.memory.last_checkpoint.i52220
  %5313 = tail call i256 @llvm.bswap.i256(i256 %swap.b36225)
  store i256 %5313, ptr %ecx.memory.buffer.ptr.i52224, align 1, !noalias !1035
  store i256 32, ptr %sp36167, align 16
  store i256 0, ptr %sp36171, align 16
  %5314 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp36167)
  %.not48976 = icmp eq i8 %5314, 0
  br i1 %.not48976, label %OP10383.SWAP1, label %return, !prof !6

OP10383.SWAP1:                                    ; preds = %OP10380.PUSH1
  %swap.a36241 = load i256, ptr %sp36167, align 16
  %swap.b36243 = load i256, ptr %5301, align 16
  store i256 %swap.a36241, ptr %5301, align 16
  %5315 = add i256 %swap.b36243, 31
  %5316 = lshr i256 %5315, 5
  %5317 = add i256 %swap.a36241, %5316
  %sp36278 = getelementptr i256, ptr %5301, i64 -2
  %swap.b36279 = load i256, ptr %sp36278, align 16
  store i256 %5317, ptr %sp36278, align 16
  store i256 %swap.b36279, ptr %sp36167, align 16
  %sp36281 = getelementptr i256, ptr %5301, i64 -1
  %dup336282 = load i256, ptr %sp36281, align 16
  store i256 31, ptr %sp36175, align 16
  %5318 = icmp ugt i256 %dup336282, 31
  %5319 = zext i1 %5318 to i256
  store i256 %5319, ptr %sp36171, align 16
  br i1 %5318, label %OP10409.JUMPDEST, label %OP10397.DUP3

OP10397.DUP3:                                     ; preds = %OP10383.SWAP1
  %5320 = shl nuw nsw i256 %dup336282, 1
  store i256 %5320, ptr %sp36171, align 16
  store i256 -256, ptr %sp36175, align 16
  store i256 %swap.b36279, ptr %sp36177, align 16
  %5321 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val49071 = load ptr, ptr %5321, align 8
  %5322 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49072 = load i64, ptr %5322, align 8
  %5323 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %swap.b36279, ptr %arg.contract.addr.val49071, i64 %arg.contract.addr.val49072)
  store i256 %5323, ptr %sp36177, align 16
  %5324 = and i256 %5323, -256
  %5325 = or disjoint i256 %5320, %5324
  store i256 %5325, ptr %sp36171, align 16
  %dup636333 = load i256, ptr %sp36161, align 16
  store i256 %dup636333, ptr %sp36175, align 16
  %5326 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp36171, i8 17)
  %.not48977 = icmp eq i8 %5326, 0
  br i1 %.not48977, label %OP10349.JUMPDEST, label %return, !prof !6

OP10409.JUMPDEST:                                 ; preds = %dynamic_jump_table, %OP10383.SWAP1
  %len.addr.353 = phi i64 [ %5302, %OP10383.SWAP1 ], [ %len.addr.357, %dynamic_jump_table ]
  %5327 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.353
  %sp36340 = getelementptr i256, ptr %5327, i64 -3
  %dup336341 = load i256, ptr %sp36340, align 16
  %sp36346 = getelementptr i256, ptr %5327, i64 1
  %5328 = shl i256 %dup336341, 1
  %5329 = or disjoint i256 %5328, 1
  store i256 %5329, ptr %5327, align 16
  %sp36362 = getelementptr i256, ptr %5327, i64 -5
  %dup636363 = load i256, ptr %sp36362, align 16
  store i256 %dup636363, ptr %sp36346, align 16
  %5330 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %5327, i8 17)
  %.not48978 = icmp eq i8 %5330, 0
  br i1 %.not48978, label %OP10417.DUP3, label %return, !prof !6

OP10417.DUP3:                                     ; preds = %OP10409.JUMPDEST
  %dup336369 = load i256, ptr %sp36340, align 16
  %5331 = icmp eq i256 %dup336369, 0
  %5332 = zext i1 %5331 to i256
  store i256 %5332, ptr %5327, align 16
  br i1 %5331, label %OP10349.JUMPDEST, label %OP10421.SWAP2

OP10421.SWAP2:                                    ; preds = %OP10417.DUP3
  %sp36379 = getelementptr i256, ptr %5327, i64 -1
  %swap.a36380 = load i256, ptr %sp36379, align 16
  store i256 %swap.a36380, ptr %sp36340, align 16
  store i256 %swap.a36380, ptr %5327, align 16
  %5333 = add i256 %dup336369, %swap.a36380
  store i256 %5333, ptr %sp36379, align 16
  br label %OP10424.JUMPDEST.preheader, !annotation !7

OP10424.JUMPDEST.preheader.loopexit:              ; preds = %dynamic_jump_table
  %.phi.trans.insert54168 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.357
  %sp36395.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54168, i64 -3
  %dup33639653472.pre = load i256, ptr %sp36395.phi.trans.insert, align 16
  %sp36399.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert54168, i64 -1
  %dup23640053473.pre = load i256, ptr %sp36399.phi.trans.insert, align 16
  br label %OP10424.JUMPDEST.preheader

OP10424.JUMPDEST.preheader:                       ; preds = %OP10424.JUMPDEST.preheader.loopexit, %OP10421.SWAP2
  %dup23640053473 = phi i256 [ %5333, %OP10421.SWAP2 ], [ %dup23640053473.pre, %OP10424.JUMPDEST.preheader.loopexit ]
  %dup33639653472 = phi i256 [ %swap.a36380, %OP10421.SWAP2 ], [ %dup33639653472.pre, %OP10424.JUMPDEST.preheader.loopexit ]
  %len.addr.354.ph = phi i64 [ %len.addr.353, %OP10421.SWAP2 ], [ %len.addr.357, %OP10424.JUMPDEST.preheader.loopexit ]
  %5334 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.354.ph
  %sp36395 = getelementptr i256, ptr %5334, i64 -3
  %sp36399 = getelementptr i256, ptr %5334, i64 -1
  %sp36401 = getelementptr i256, ptr %5334, i64 1
  store i256 %dup23640053473, ptr %sp36401, align 16
  %5335 = icmp ule i256 %dup23640053473, %dup33639653472
  %5336 = zext i1 %5335 to i256
  store i256 %5336, ptr %5334, align 16
  br i1 %5335, label %OP10349.JUMPDEST, label %OP10431.DUP3.lr.ph

OP10431.DUP3.lr.ph:                               ; preds = %OP10424.JUMPDEST.preheader
  %5337 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val = load ptr, ptr %5337, align 8
  %5338 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val49070 = load i64, ptr %5338, align 8
  %sp36424 = getelementptr i256, ptr %5334, i64 -2
  %dup336425.pre = load i256, ptr %sp36424, align 16
  br label %OP10431.DUP3

OP10431.DUP3:                                     ; preds = %OP10431.DUP3.lr.ph, %OP10435.SWAP2
  %dup336425 = phi i256 [ %dup336425.pre, %OP10431.DUP3.lr.ph ], [ %5342, %OP10435.SWAP2 ]
  %dup336417 = phi i256 [ %dup33639653472, %OP10431.DUP3.lr.ph ], [ %5341, %OP10435.SWAP2 ]
  store i256 %dup336417, ptr %5334, align 16
  %5339 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 %dup336417, ptr %arg.contract.addr.val, i64 %arg.contract.addr.val49070)
  store i256 %5339, ptr %5334, align 16
  store i256 %dup336425, ptr %sp36401, align 16
  %5340 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %5334, i8 17)
  %.not48979 = icmp eq i8 %5340, 0
  br i1 %.not48979, label %OP10435.SWAP2, label %return, !prof !6

OP10435.SWAP2:                                    ; preds = %OP10431.DUP3
  %swap.a36431 = load i256, ptr %sp36399, align 16
  %swap.b36433 = load i256, ptr %sp36395, align 16
  %5341 = add i256 %swap.b36433, 32
  store i256 %5341, ptr %sp36395, align 16
  %swap.b36451 = load i256, ptr %sp36424, align 16
  %5342 = add i256 %swap.b36451, 1
  store i256 %5342, ptr %sp36424, align 16
  store i256 %swap.a36431, ptr %sp36401, align 16
  %5343 = icmp ule i256 %swap.a36431, %5341
  %5344 = zext i1 %5343 to i256
  store i256 %5344, ptr %5334, align 16
  br i1 %5343, label %OP10349.JUMPDEST, label %OP10431.DUP3

OP10446.JUMPDEST.preheader:                       ; preds = %dynamic_jump_table, %dynamic_jump_table, %OP10349.JUMPDEST
  %len.addr.356.ph = phi i64 [ %5295, %OP10349.JUMPDEST ], [ %len.addr.357, %dynamic_jump_table ], [ %len.addr.357, %dynamic_jump_table ]
  %5345 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.356.ph
  %sp36469 = getelementptr i256, ptr %5345, i64 -1
  %sp36473 = getelementptr i256, ptr %5345, i64 -2
  %sp36475 = getelementptr i256, ptr %5345, i64 1
  %dup13647053474 = load i256, ptr %sp36469, align 16
  %dup33647453475 = load i256, ptr %sp36473, align 16
  store i256 %dup33647453475, ptr %sp36475, align 16
  %5346 = icmp ule i256 %dup33647453475, %dup13647053474
  %5347 = zext i1 %5346 to i256
  store i256 %5347, ptr %5345, align 16
  br i1 %5346, label %OP10357.JUMPDEST, label %OP10453.PUSH1

OP10453.PUSH1:                                    ; preds = %OP10446.JUMPDEST.preheader, %OP10456.PUSH1
  %dup236493 = phi i256 [ %5349, %OP10456.PUSH1 ], [ %dup13647053474, %OP10446.JUMPDEST.preheader ]
  store i256 0, ptr %5345, align 16
  store i256 %dup236493, ptr %sp36475, align 16
  %5348 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %5345, i8 17)
  %.not48980 = icmp eq i8 %5348, 0
  br i1 %.not48980, label %OP10456.PUSH1, label %return, !prof !6

OP10456.PUSH1:                                    ; preds = %OP10453.PUSH1
  %b36503 = load i256, ptr %sp36469, align 16
  %5349 = add i256 %b36503, 1
  store i256 %5349, ptr %sp36469, align 16
  %dup336474 = load i256, ptr %sp36473, align 16
  store i256 %dup336474, ptr %sp36475, align 16
  %5350 = icmp ule i256 %dup336474, %5349
  %5351 = zext i1 %5350 to i256
  store i256 %5351, ptr %5345, align 16
  br i1 %5350, label %OP10357.JUMPDEST, label %OP10453.PUSH1

dynamic_jump_table:                               ; preds = %dynamic_jump_table.backedge, %dynamic_jump_table.preheader
  %len.addr.357 = phi i64 [ %len.addr.357.ph, %dynamic_jump_table.preheader ], [ %len.addr.357.be, %dynamic_jump_table.backedge ]
  %5352 = phi i256 [ %.ph52641, %dynamic_jump_table.preheader ], [ %.be, %dynamic_jump_table.backedge ]
  switch i256 %5352, label %return.loopexit55261 [
    i256 16, label %OP11.JUMPDEST
    i256 124, label %OP64.JUMPDEST.loopexit
    i256 162, label %OP82.JUMPDEST.loopexit
    i256 222, label %OP110.JUMPDEST.loopexit
    i256 260, label %OP128.JUMPDEST.loopexit
    i256 331, label %OP161.JUMPDEST.loopexit
    i256 369, label %OP179.JUMPDEST.loopexit
    i256 429, label %OP207.JUMPDEST.loopexit
    i256 467, label %OP225.JUMPDEST.loopexit
    i256 549, label %OP263.JUMPDEST.loopexit
    i256 587, label %OP281.JUMPDEST.loopexit
    i256 647, label %OP309.JUMPDEST.loopexit
    i256 685, label %OP327.JUMPDEST.loopexit
    i256 756, label %OP360.JUMPDEST.loopexit
    i256 794, label %OP378.JUMPDEST.loopexit
    i256 843, label %OP401.JUMPDEST.loopexit
    i256 877, label %OP417.JUMPDEST
    i256 882, label %OP421.JUMPDEST
    i256 890, label %OP425.JUMPDEST
    i256 924, label %OP456.JUMPDEST.preheader
    i256 948, label %OP475.JUMPDEST
    i256 993, label %OP512.JUMPDEST
    i256 1007, label %OP525.JUMPDEST
    i256 1029, label %OP540.JUMPDEST.loopexit
    i256 1064, label %OP552.JUMPDEST
    i256 1084, label %OP570.JUMPDEST
    i256 1092, label %OP574.JUMPDEST
    i256 1110, label %OP590.JUMPDEST
    i256 1132, label %OP605.JUMPDEST.loopexit
    i256 1161, label %return
    i256 1163, label %OP614.JUMPDEST
    i256 1185, label %OP629.JUMPDEST.loopexit
    i256 1230, label %OP650.JUMPDEST
    i256 1252, label %OP665.JUMPDEST.loopexit
    i256 1281, label %OP672.JUMPDEST
    i256 1303, label %OP687.JUMPDEST.loopexit
    i256 1332, label %OP694.JUMPDEST
    i256 1354, label %OP709.JUMPDEST.loopexit
    i256 1383, label %OP716.JUMPDEST
    i256 1391, label %OP720.JUMPDEST
    i256 1399, label %OP724.JUMPDEST
    i256 1421, label %OP743.JUMPDEST
    i256 1444, label %OP758.JUMPDEST.loopexit
    i256 1471, label %OP776.JUMPDEST
    i256 1489, label %OP790.JUMPDEST.loopexit
    i256 1523, label %OP814.JUMPDEST
    i256 1606, label %OP881.JUMPDEST.loopexit
    i256 1624, label %OP895.JUMPDEST.loopexit
    i256 1658, label %OP919.JUMPDEST
    i256 1741, label %OP986.JUMPDEST.loopexit
    i256 1759, label %OP1000.JUMPDEST.loopexit
    i256 1793, label %OP1024.JUMPDEST
    i256 1913, label %OP1110.JUMPDEST
    i256 1921, label %OP1114.JUMPDEST
    i256 1962, label %OP1133.JUMPDEST
    i256 1970, label %OP1137.JUMPDEST
    i256 1978, label %OP1141.JUMPDEST
    i256 2000, label %OP1156.JUMPDEST.loopexit
    i256 2035, label %OP1168.JUMPDEST
    i256 2043, label %OP1172.JUMPDEST
    i256 2065, label %OP1187.JUMPDEST.loopexit
    i256 2100, label %OP1199.JUMPDEST
    i256 2122, label %OP1214.JUMPDEST.loopexit
    i256 2129, label %OP1219.JUMPDEST
    i256 2151, label %OP1234.JUMPDEST.loopexit
    i256 2178, label %OP1252.JUMPDEST
    i256 2196, label %OP1266.JUMPDEST.loopexit
    i256 2230, label %OP1290.JUMPDEST.loopexit
    i256 2260, label %OP1311.JUMPDEST
    i256 2278, label %OP1325.JUMPDEST.loopexit
    i256 2312, label %OP1349.JUMPDEST
    i256 2323, label %OP1358.JUMPDEST
    i256 2345, label %OP1373.JUMPDEST.loopexit
    i256 2380, label %OP1385.JUMPDEST
    i256 2388, label %OP1389.JUMPDEST
    i256 2410, label %OP1404.JUMPDEST.loopexit
    i256 2439, label %OP1411.JUMPDEST
    i256 2461, label %OP1426.JUMPDEST.loopexit
    i256 2517, label %OP1455.JUMPDEST
    i256 2525, label %OP1459.JUMPDEST
    i256 2547, label %OP1474.JUMPDEST.loopexit
    i256 2576, label %OP1481.JUMPDEST
    i256 2598, label %OP1496.JUMPDEST.loopexit
    i256 2627, label %OP1503.JUMPDEST
    i256 2635, label %OP1507.JUMPDEST
    i256 2643, label %OP1511.JUMPDEST
    i256 2665, label %OP1526.JUMPDEST.loopexit
    i256 2754, label %OP1580.JUMPDEST
    i256 2772, label %OP1594.JUMPDEST.loopexit
    i256 2806, label %OP1618.JUMPDEST
    i256 2871, label %OP1674.JUMPDEST
    i256 2893, label %OP1689.JUMPDEST.loopexit
    i256 2922, label %OP1696.JUMPDEST
    i256 2930, label %OP1700.JUMPDEST
    i256 2938, label %OP1704.JUMPDEST
    i256 2946, label %OP1708.JUMPDEST
    i256 2968, label %OP1723.JUMPDEST.loopexit
    i256 3045, label %OP1767.JUMPDEST
    i256 3063, label %OP1781.JUMPDEST.loopexit
    i256 3097, label %OP1805.JUMPDEST
    i256 3162, label %OP1861.JUMPDEST
    i256 3170, label %OP1865.JUMPDEST
    i256 3192, label %OP1880.JUMPDEST.loopexit
    i256 3227, label %OP1892.JUMPDEST
    i256 3249, label %OP1907.JUMPDEST.loopexit
    i256 3284, label %OP1919.JUMPDEST
    i256 3306, label %OP1934.JUMPDEST.loopexit
    i256 3335, label %OP1941.JUMPDEST
    i256 3357, label %OP1956.JUMPDEST.loopexit
    i256 3386, label %OP1963.JUMPDEST
    i256 3408, label %OP1978.JUMPDEST.loopexit
    i256 3437, label %OP1985.JUMPDEST
    i256 3459, label %OP2000.JUMPDEST.loopexit
    i256 3504, label %OP2021.JUMPDEST
    i256 3526, label %OP2036.JUMPDEST.loopexit
    i256 3587, label %OP2066.JUMPDEST
    i256 3605, label %OP2080.JUMPDEST.loopexit
    i256 3639, label %OP2104.JUMPDEST
    i256 3704, label %OP2160.JUMPDEST
    i256 3712, label %OP2164.JUMPDEST
    i256 3734, label %OP2179.JUMPDEST.loopexit
    i256 3823, label %OP2233.JUMPDEST
    i256 3841, label %OP2247.JUMPDEST.loopexit
    i256 3875, label %OP2271.JUMPDEST
    i256 3940, label %OP2327.JUMPDEST
    i256 3962, label %OP2342.JUMPDEST.loopexit
    i256 4034, label %OP2385.JUMPDEST
    i256 4056, label %OP2400.JUMPDEST.loopexit
    i256 4083, label %OP2418.JUMPDEST
    i256 4101, label %OP2432.JUMPDEST.loopexit
    i256 4135, label %OP2456.JUMPDEST
    i256 4146, label %OP2465.JUMPDEST
    i256 4154, label %OP2469.JUMPDEST
    i256 4176, label %OP2484.JUMPDEST.loopexit
    i256 4213, label %OP2498.JUMPDEST
    i256 4236, label %OP2513.JUMPDEST.loopexit
    i256 4321, label %OP2566.JUMPDEST
    i256 4329, label %OP2570.JUMPDEST
    i256 4351, label %OP2585.JUMPDEST.loopexit
    i256 4386, label %OP2597.JUMPDEST.loopexit
    i256 4409, label %OP2612.JUMPDEST.loopexit
    i256 4494, label %OP2665.JUMPDEST.loopexit
    i256 4516, label %OP2680.JUMPDEST.loopexit
    i256 4545, label %OP2687.JUMPDEST.loopexit
    i256 4567, label %OP2702.JUMPDEST.loopexit
    i256 4596, label %OP2709.JUMPDEST.loopexit
    i256 4618, label %OP2724.JUMPDEST.loopexit
    i256 4647, label %OP2731.JUMPDEST
    i256 4768, label %OP2802.JUMPDEST
    i256 4782, label %OP2813.JUMPDEST.preheader.loopexit
    i256 4811, label %OP2837.JUMPDEST
    i256 4819, label %OP2845.JUMPDEST
    i256 4960, label %OP2889.JUMPDEST
    i256 4971, label %OP2896.JUMPDEST
    i256 4980, label %OP2904.JUMPDEST
    i256 4986, label %OP2909.JUMPDEST
    i256 5098, label %OP2956.JUMPDEST.loopexit
    i256 5107, label %OP2961.JUMPDEST
    i256 5175, label %OP2975.JUMPDEST
    i256 5316, label %OP3019.JUMPDEST
    i256 5326, label %OP3025.JUMPDEST
    i256 5412, label %OP3067.JUMPDEST
    i256 5422, label %OP3073.JUMPDEST
    i256 5508, label %OP3115.JUMPDEST
    i256 5518, label %OP3121.JUMPDEST
    i256 5604, label %OP3163.JUMPDEST
    i256 5741, label %OP3232.JUMPDEST.loopexit
    i256 5752, label %OP3239.JUMPDEST
    i256 5811, label %OP3270.JUMPDEST
    i256 5874, label %OP3308.JUMPDEST
    i256 6008, label %OP3349.JUMPDEST.loopexit
    i256 6116, label %OP3393.JUMPDEST.loopexit
    i256 6227, label %OP3417.JUMPDEST
    i256 6245, label %OP3429.JUMPDEST
    i256 6256, label %OP3435.JUMPDEST
    i256 6275, label %OP3448.JUMPDEST.loopexit
    i256 6284, label %OP3453.JUMPDEST
    i256 6331, label %OP3466.JUMPDEST
    i256 6446, label %OP3515.JUMPDEST
    i256 6580, label %OP3559.JUMPDEST
    i256 6616, label %OP3563.JUMPDEST
    i256 6625, label %OP3570.JUMPDEST
    i256 6741, label %OP3619.JUMPDEST.loopexit
    i256 6849, label %OP3663.JUMPDEST.loopexit
    i256 6957, label %OP3707.JUMPDEST.loopexit
    i256 7065, label %OP3751.JUMPDEST.loopexit
    i256 7173, label %OP3795.JUMPDEST.loopexit
    i256 7192, label %OP3808.JUMPDEST
    i256 7212, label %OP3822.JUMPDEST
    i256 7232, label %OP3836.JUMPDEST
    i256 7386, label %OP3897.JUMPDEST
    i256 7459, label %OP3916.JUMPDEST
    i256 7487, label %OP3923.JUMPDEST
    i256 7497, label %OP3928.JUMPDEST
    i256 7502, label %OP3933.JUMPDEST
    i256 7530, label %OP3940.JUMPDEST
    i256 7671, label %OP3984.JUMPDEST
    i256 7682, label %OP3991.JUMPDEST
    i256 7794, label %OP4038.JUMPDEST.loopexit
    i256 7877, label %OP4054.JUMPDEST
    i256 8018, label %OP4098.JUMPDEST
    i256 8122, label %OP4153.JUMPDEST.loopexit
    i256 8132, label %OP4159.JUMPDEST
    i256 8218, label %OP4201.JUMPDEST
    i256 8228, label %OP4207.JUMPDEST
    i256 8314, label %OP4249.JUMPDEST
    i256 8422, label %OP4293.JUMPDEST.loopexit
    i256 8511, label %OP4337.JUMPDEST.loopexit
    i256 8616, label %OP4394.JUMPDEST
    i256 8629, label %OP4402.JUMPDEST
    i256 8649, label %OP4413.JUMPDEST
    i256 8655, label %OP8020.JUMPDEST
    i256 8660, label %OP4420.JUMPDEST
    i256 8670, label %OP4426.JUMPDEST
    i256 8854, label %OP4498.JUMPDEST
    i256 8992, label %OP4540.JUMPDEST.loopexit
    i256 9096, label %OP4595.JUMPDEST.loopexit
    i256 9106, label %OP4601.JUMPDEST
    i256 9192, label %OP4643.JUMPDEST
    i256 9203, label %OP4649.JUMPDEST
    i256 9294, label %OP4695.JUMPDEST
    i256 9383, label %dynamic_jump_table.OP4740.JUMPDEST_crit_edge
    i256 9396, label %OP4748.JUMPDEST
    i256 9413, label %OP4758.JUMPDEST
    i256 9528, label %OP4804.JUMPDEST
    i256 9546, label %OP4816.JUMPDEST
    i256 9558, label %OP4823.JUMPDEST
    i256 9562, label %OP4826.JUMPDEST
    i256 9586, label %OP4844.JUMPDEST
    i256 9722, label %OP4912.JUMPDEST
    i256 9737, label %OP4923.JUMPDEST
    i256 9771, label %OP4934.JUMPDEST
    i256 9787, label %OP4946.JUMPDEST
    i256 9880, label %OP4981.JUMPDEST
    i256 9890, label %OP4987.JUMPDEST
    i256 9967, label %OP5027.JUMPDEST
    i256 10108, label %OP5071.JUMPDEST
    i256 10220, label %OP5118.JUMPDEST.loopexit
    i256 10370, label %OP5177.JUMPDEST
    i256 10425, label %OP5197.JUMPDEST
    i256 10559, label %OP5238.JUMPDEST.loopexit
    i256 10667, label %OP5282.JUMPDEST
    i256 10784, label %OP5312.JUMPDEST
    i256 10922, label %OP5354.JUMPDEST
    i256 10935, label %OP5363.JUMPDEST
    i256 10942, label %OP5370.JUMPDEST
    i256 10975, label %OP5380.JUMPDEST
    i256 10986, label %OP5386.JUMPDEST
    i256 10992, label %OP5392.JUMPDEST
    i256 11032, label %OP5408.JUMPDEST
    i256 11068, label %OP5412.JUMPDEST
    i256 11180, label %OP5459.JUMPDEST.loopexit
    i256 11286, label %OP5477.JUMPDEST
    i256 11424, label %OP5519.JUMPDEST
    i256 11434, label %OP5525.JUMPDEST
    i256 11520, label %OP5567.JUMPDEST
    i256 11530, label %OP5573.JUMPDEST
    i256 11616, label %OP5615.JUMPDEST
    i256 11631, label %OP5626.JUMPDEST
    i256 11642, label %OP5637.JUMPDEST
    i256 11682, label %OP5653.JUMPDEST
    i256 11710, label %OP5660.JUMPDEST
    i256 11831, label %OP5731.JUMPDEST
    i256 11859, label %OP5738.JUMPDEST
    i256 11997, label %OP5780.JUMPDEST
    i256 12010, label %OP5789.JUMPDEST
    i256 12046, label %OP5793.JUMPDEST
    i256 12187, label %OP5837.JUMPDEST
    i256 12198, label %OP5844.JUMPDEST
    i256 12339, label %OP5888.JUMPDEST
    i256 12349, label %OP5894.JUMPDEST
    i256 12435, label %OP5936.JUMPDEST
    i256 12445, label %OP5942.JUMPDEST
    i256 12531, label %OP5984.JUMPDEST
    i256 12542, label %OP5991.JUMPDEST
    i256 12553, label %OP6001.JUMPDEST
    i256 12687, label %OP6042.JUMPDEST.loopexit
    i256 12795, label %OP6086.JUMPDEST
    i256 12912, label %OP6116.JUMPDEST
    i256 12955, label %OP6134.JUMPDEST
    i256 13089, label %OP6175.JUMPDEST.loopexit
    i256 13197, label %OP6219.JUMPDEST
    i256 13314, label %OP6249.JUMPDEST
    i256 13426, label %OP6296.JUMPDEST
    i256 13459, label %OP6305.JUMPDEST
    i256 13464, label %OP6310.JUMPDEST
    i256 13602, label %OP6352.JUMPDEST
    i256 13613, label %OP6359.JUMPDEST
    i256 13641, label %OP6366.JUMPDEST
    i256 13779, label %OP6408.JUMPDEST
    i256 13789, label %OP6414.JUMPDEST
    i256 13875, label %OP6456.JUMPDEST
    i256 13885, label %OP6462.JUMPDEST
    i256 13971, label %OP6504.JUMPDEST
    i256 13986, label %OP6515.JUMPDEST
    i256 14124, label %OP6557.JUMPDEST
    i256 14139, label %OP6568.JUMPDEST
    i256 14148, label %OP6577.JUMPDEST
    i256 14193, label %OP6595.JUMPDEST
    i256 14202, label %OP6601.JUMPDEST
    i256 14214, label %OP6608.JUMPDEST
    i256 14331, label %OP6679.JUMPDEST
    i256 14381, label %OP6694.JUMPDEST
    i256 14417, label %OP6698.JUMPDEST.loopexit
    i256 14473, label %OP6730.JUMPDEST
    i256 14611, label %OP6772.JUMPDEST
    i256 14621, label %OP6778.JUMPDEST
    i256 14707, label %OP6820.JUMPDEST
    i256 14717, label %OP6826.JUMPDEST
    i256 14803, label %OP6868.JUMPDEST
    i256 14820, label %OP6881.JUMPDEST
    i256 14833, label %OP6894.JUMPDEST
    i256 14954, label %OP6965.JUMPDEST.loopexit
    i256 15010, label %OP6996.JUMPDEST
    i256 15148, label %OP7038.JUMPDEST
    i256 15158, label %OP7044.JUMPDEST
    i256 15244, label %OP7086.JUMPDEST
    i256 15254, label %OP7092.JUMPDEST
    i256 15340, label %OP7134.JUMPDEST
    i256 15357, label %OP7147.JUMPDEST
    i256 15491, label %OP7188.JUMPDEST.loopexit
    i256 15599, label %OP7232.JUMPDEST.loopexit
    i256 15693, label %OP7267.JUMPDEST
    i256 15696, label %OP7270.JUMPDEST
    i256 15808, label %OP7317.JUMPDEST.loopexit
    i256 15817, label %OP7322.JUMPDEST
    i256 15885, label %OP7336.JUMPDEST
    i256 15896, label %OP7342.JUMPDEST
    i256 16004, label %OP7386.JUMPDEST.loopexit
    i256 16112, label %OP7430.JUMPDEST
    i256 16223, label %OP9175.JUMPDEST.sink.split
    i256 16234, label %OP7491.JUMPDEST
    i256 16280, label %OP7511.JUMPDEST
    i256 16388, label %OP7555.JUMPDEST.loopexit
    i256 16496, label %OP7599.JUMPDEST
    i256 16505, label %OP7604.JUMPDEST
    i256 16593, label %OP7648.JUMPDEST
    i256 16610, label %OP7657.JUMPDEST
    i256 16616, label %OP7661.JUMPDEST
    i256 16633, label %OP7670.JUMPDEST
    i256 16739, label %OP7701.JUMPDEST
    i256 16852, label %OP7740.JUMPDEST
    i256 16858, label %OP7746.JUMPDEST
    i256 16932, label %OP9175.JUMPDEST.sink.split.loopexit55265
    i256 16943, label %OP7770.JUMPDEST
    i256 17014, label %OP7788.JUMPDEST
    i256 17144, label %OP7865.JUMPDEST
    i256 17158, label %OP7876.JUMPDEST.preheader.loopexit
    i256 17187, label %OP7900.JUMPDEST
    i256 17254, label %OP9228.JUMPDEST
    i256 17259, label %OP7929.JUMPDEST
    i256 17328, label %OP7342.JUMPDEST
    i256 17333, label %OP7971.JUMPDEST
    i256 17449, label %OP8013.JUMPDEST
    i256 17456, label %OP8020.JUMPDEST
    i256 17577, label %OP8065.JUMPDEST.loopexit
    i256 17586, label %OP8070.JUMPDEST
    i256 17672, label %OP8112.JUMPDEST
    i256 17713, label %OP8129.JUMPDEST
    i256 17777, label %OP8179.JUMPDEST
    i256 17887, label %OP8225.JUMPDEST
    i256 17899, label %OP8233.JUMPDEST
    i256 18045, label %OP8314.JUMPDEST
    i256 18055, label %OP8320.JUMPDEST
    i256 18066, label %OP8327.JUMPDEST
    i256 18112, label %OP8339.JUMPDEST
    i256 18219, label %OP8373.JUMPDEST
    i256 18232, label %OP8379.JUMPDEST
    i256 18387, label %OP8470.JUMPDEST
    i256 18504, label %OP8530.JUMPDEST.preheader
    i256 18528, label %OP8549.JUMPDEST
    i256 18573, label %OP8586.JUMPDEST
    i256 18604, label %OP8612.JUMPDEST
    i256 18624, label %OP8628.JUMPDEST
    i256 18646, label %OP8645.JUMPDEST
    i256 18755, label %OP8681.JUMPDEST
    i256 18766, label %OP8688.JUMPDEST
    i256 18774, label %OP8696.JUMPDEST
    i256 18866, label %OP8750.JUMPDEST
    i256 19007, label %OP8802.JUMPDEST
    i256 19017, label %OP8808.JUMPDEST
    i256 19139, label %OP8864.JUMPDEST
    i256 19273, label %OP8909.JUMPDEST
    i256 19285, label %OP8917.JUMPDEST
    i256 19431, label %OP8998.JUMPDEST
    i256 19497, label %OP9050.JUMPDEST
    i256 19511, label %OP9059.JUMPDEST
    i256 19519, label %OP9067.JUMPDEST
    i256 19587, label %OP9121.JUMPDEST
    i256 19655, label %OP9175.JUMPDEST
    i256 19669, label %OP9203.JUMPDEST
    i256 19674, label %OP9186.JUMPDEST
    i256 19747, label %OP9203.JUMPDEST
    i256 19792, label %OP9224.JUMPDEST
    i256 19796, label %OP9228.JUMPDEST
    i256 19912, label %OP9306.JUMPDEST
    i256 20000, label %OP9350.JUMPDEST.loopexit
    i256 20088, label %OP9394.JUMPDEST
    i256 20098, label %OP9400.JUMPDEST
    i256 20104, label %OP9406.JUMPDEST
    i256 20142, label %OP9414.JUMPDEST
    i256 20148, label %OP9418.JUMPDEST
    i256 20235, label %OP9472.JUMPDEST.preheader
    i256 20259, label %OP9491.JUMPDEST
    i256 20304, label %OP9528.JUMPDEST
    i256 20335, label %OP9554.JUMPDEST
    i256 20355, label %OP9570.JUMPDEST
    i256 20377, label %OP9587.JUMPDEST
    i256 20486, label %OP9623.JUMPDEST
    i256 20619, label %OP9667.JUMPDEST
    i256 20677, label %OP9689.JUMPDEST
    i256 20763, label %OP9734.JUMPDEST.preheader
    i256 20787, label %OP9753.JUMPDEST
    i256 20832, label %OP9790.JUMPDEST
    i256 20846, label %OP9803.JUMPDEST
    i256 20854, label %OP9811.JUMPDEST
    i256 20952, label %OP9843.JUMPDEST
    i256 20983, label %OP9867.JUMPDEST
    i256 21070, label %OP9910.JUMPDEST
    i256 21208, label %OP9979.JUMPDEST
    i256 21212, label %OP9983.JUMPDEST
    i256 21232, label %OP9995.JUMPDEST
    i256 21339, label %OP10029.JUMPDEST
    i256 21384, label %OP10050.JUMPDEST.preheader
    i256 21445, label %OP10073.JUMPDEST.loopexit53509
    i256 21543, label %OP10154.JUMPDEST
    i256 21548, label %OP10158.JUMPDEST
    i256 21564, label %OP10170.JUMPDEST
    i256 21575, label %OP10181.JUMPDEST
    i256 21581, label %OP10187.JUMPDEST
    i256 21596, label %OP10197.JUMPDEST
    i256 21612, label %OP10210.JUMPDEST.loopexit
    i256 21709, label %OP10264.JUMPDEST
    i256 21774, label %OP10313.JUMPDEST
    i256 21792, label %OP10328.JUMPDEST.preheader.loopexit
    i256 21819, label %OP10349.JUMPDEST
    i256 21831, label %OP10357.JUMPDEST.loopexit53511
    i256 21835, label %OP10361.JUMPDEST
    i256 21930, label %OP10409.JUMPDEST
    i256 21948, label %OP10424.JUMPDEST.preheader.loopexit
    i256 21975, label %OP10446.JUMPDEST.preheader
    i256 21976, label %OP10446.JUMPDEST.preheader
  ], !prof !1038

dynamic_jump_table.OP4740.JUMPDEST_crit_edge:     ; preds = %dynamic_jump_table
  %.pre54301 = add i64 %len.addr.357, 1
  br label %OP4740.JUMPDEST

suspend:                                          ; preds = %OP10109.MLOAD.contd, %OP9554.JUMPDEST, %OP8612.JUMPDEST
  %len.addr.358 = phi i64 [ %5145, %OP10109.MLOAD.contd ], [ %4712, %OP9554.JUMPDEST ], [ %4084, %OP8612.JUMPDEST ]
  %5353 = phi ptr [ blockaddress(@weth, %OP10118.SWAP3), %OP10109.MLOAD.contd ], [ blockaddress(@weth, %OP9558.ISZERO), %OP9554.JUMPDEST ], [ blockaddress(@weth, %OP8616.ISZERO), %OP8612.JUMPDEST ]
  store ptr %5353, ptr %ecx.resume_at.addr, align 8
  br label %return, !annotation !241

return.loopexit52642.split.loop.exit53114:        ; preds = %OP3459.PUSH32
  %5354 = add i64 %len.addr.357, -2
  br label %return

return.loopexit52642.split.loop.exit53120:        ; preds = %OP3903.PUSH32
  %5355 = add i64 %len.addr.357, -2
  br label %return

return.loopexit52642.split.loop.exit53207:        ; preds = %OP5016.SWAP1
  %5356 = add i64 %len.addr.357, -2
  br label %return

return.loopexit52642.split.loop.exit53243:        ; preds = %OP6687.PUSH32
  %5357 = add i64 %len.addr.357, -3
  br label %return

return.loopexit52642.split.loop.exit53267:        ; preds = %OP8127.SSTORE
  %5358 = add i64 %len.addr.291, -2
  br label %return

return.loopexit52642.split.loop.exit53357:        ; preds = %OP9300.MLOAD.contd
  %5359 = add i64 %len.addr.316, -2
  br label %return

return.loopexit55261:                             ; preds = %dynamic_jump_table
  br label %return

return:                                           ; preds = %OP2961.JUMPDEST, %OP2963.MLOAD.contd, %OP3239.JUMPDEST, %OP3247.PUSH1, %OP3252.PUSH1, %OP3256.CALLER, %OP3259.SWAP1, %OP3262.SWAP1, %OP3264.SLOAD, %OP3270.JUMPDEST, %OP3278.PUSH1, %OP3283.PUSH1, %OP3287.CALLER, %OP3290.SWAP1, %OP3293.SWAP1, %OP3295.SSTORE, %OP3453.JUMPDEST, %OP3897.JUMPDEST, %OP4426.JUMPDEST, %OP4432.PUSH1, %OP4437.PUSH1, %OP4442.SWAP4, %OP4446.DUP1, %OP4447.MLOAD.contd, %OP4451.SWAP1, %OP4452.MLOAD.contd, %OP4465.PUSH1, %OP4467.MLOAD.contd, %OP4471.SWAP1, %OP4472.MLOAD.contd, %OP4740.JUMPDEST, %OP4748.JUMPDEST, %OP4758.JUMPDEST, %OP4761.MLOAD.contd, %OP4765.SWAP1, %OP4766.MLOAD.contd, %OP4779.PUSH1, %OP4781.MLOAD.contd, %OP4785.SWAP1, %OP4786.MLOAD.contd, %OP4987.JUMPDEST, %OP4995.PUSH1, %OP5000.PUSH1, %OP5004.DUP1, %OP5006.PUSH32, %OP5013.PUSH1, %OP6608.JUMPDEST, %OP6625.MLOAD.contd, %OP6631.DUP1, %OP6639.PUSH1, %OP6647.PUSH1, %OP6654.POP, %OP6658.MLOAD.contd, %OP6665.PUSH1, %OP6668.PUSH32, %OP6679.JUMPDEST, %OP6682.POP, %OP7322.JUMPDEST, %OP7324.MLOAD.contd, %OP7670.JUMPDEST, %OP7680.MLOAD.contd, %OP7685.PUSH1, %OP7691.MLOAD.contd, %OP8124.PUSH1, %OP8379.JUMPDEST, %OP8388.PUSH1, %OP8393.PUSH1, %OP8398.DUP1, %OP8400.PUSH1, %OP8406.DUP3, %OP8407.MLOAD.contd, %OP8413.DUP1, %OP8420.SWAP4, %OP8427.PUSH1, %OP8433.PUSH1, %OP8440.PUSH1, %OP8447.DUP2, %OP8448.MLOAD.contd, %OP8457.PUSH1, %OP8463.DUP1, %OP8464.MLOAD.contd, %OP8864.JUMPDEST, %OP8872.PUSH1, %OP8877.PUSH1, %OP8881.DUP7, %OP8884.SWAP1, %OP8887.DUP1, %OP8890.DUP1, %OP8892.PUSH32, %OP8898.MLOAD, %OP8898.MLOAD.contd, %OP9230.MLOAD.contd, %OP9237.MLOAD.contd, %OP9636.PUSH1, %OP9646.DUP1, %OP9649.DUP1, %OP9651.PUSH32, %OP9657.MLOAD.contd, %OP9684.PUSH1, %OP10181.JUMPDEST, %resize.i50899, %resize.i50914, %resize.i51446, %resize.i51462, %resize.i51478, %resize.i51493, %resize.i51508, %resize.i51523, %resize.i51538, %resize.i51553, %resize.i51569, %resize.i51584, %resize.i51599, %resize.i51615, %resize.i51768, %resize.i51783, %resize.i51798, %resize.i51813, %resize.i51829, %resize.i51845, %resize.i51860, %resize.i51875, %resize.i51890, %resize.i52088, %resize.i52073, %resize.i51646, %resize.i51631, %resize.i51052, %resize.i51037, %resize.i52212, %OP10336.MLOAD.contd, %resize.i49327, %resize.i49313, %resize.i51921, %resize.i51906, %OP10431.DUP3, %OP10453.PUSH1, %resize.i50765, %OP7876.JUMPDEST, %resize.i49783, %OP2813.JUMPDEST, %dynamic_jump_table, %return.loopexit55261, %return.loopexit52642.split.loop.exit53114, %return.loopexit52642.split.loop.exit53120, %return.loopexit52642.split.loop.exit53207, %return.loopexit52642.split.loop.exit53243, %return.loopexit52642.split.loop.exit53267, %return.loopexit52642.split.loop.exit53357, %resize.i52226, %resize.i52196, %resize.i52180, %resize.i52166, %resize.i52150, %resize.i52134, %resize.i52119, %resize.i52104, %resize.i52057, %resize.i52042, %resize.i52027, %resize.i52012, %resize.i51998, %resize.i51983, %resize.i51968, %resize.i51953, %resize.i51937, %resize.i51754, %resize.i51738, %resize.i51723, %resize.i51708, %resize.i51693, %resize.i51678, %resize.i51662, %resize.i51430, %resize.i51415, %resize.i51401, %resize.i51386, %resize.i51372, %resize.i51357, %resize.i51342, %resize.i51326, %resize.i51311, %resize.i51296, %resize.i51281, %resize.i51265, %resize.i51250, %resize.i51235, %resize.i51220, %resize.i51206, %resize.i51191, %resize.i51176, %resize.i51160, %resize.i51144, %resize.i51129, %resize.i51114, %resize.i51099, %resize.i51084, %resize.i51068, %resize.i51021, %resize.i51006, %resize.i50991, %resize.i50975, %resize.i50960, %resize.i50945, %resize.i50930, %resize.i50885, %resize.i50870, %resize.i50855, %resize.i50840, %resize.i50826, %resize.i50811, %resize.i50796, %resize.i50781, %resize.i50750, %resize.i50736, %resize.i50721, %resize.i50706, %resize.i50691, %resize.i50675, %resize.i50660, %resize.i50646, %resize.i50631, %resize.i50617, %resize.i50601, %resize.i50586, %resize.i50570, %resize.i50555, %resize.i50540, %resize.i50525, %resize.i50511, %resize.i50495, %resize.i50480, %resize.i50465, %resize.i50450, %resize.i50434, %resize.i50418, %resize.i50403, %resize.i50388, %resize.i50373, %resize.i50357, %resize.i50341, %resize.i50326, %resize.i50311, %resize.i50295, %resize.i50280, %resize.i50265, %resize.i50250, %resize.i50236, %resize.i50221, %resize.i50207, %resize.i50191, %resize.i50176, %resize.i50162, %resize.i50146, %resize.i50131, %resize.i50117, %resize.i50101, %resize.i50086, %resize.i50071, %resize.i50056, %resize.i50040, %resize.i50024, %resize.i50009, %resize.i49993, %resize.i49978, %resize.i49963, %resize.i49949, %resize.i49934, %resize.i49920, %resize.i49905, %resize.i49891, %resize.i49875, %resize.i49859, %resize.i49843, %resize.i49828, %resize.i49813, %resize.i49799, %resize.i49768, %resize.i49754, %resize.i49739, %resize.i49724, %resize.i49709, %resize.i49693, %resize.i49678, %resize.i49663, %resize.i49648, %resize.i49632, %resize.i49617, %resize.i49602, %resize.i49587, %resize.i49571, %resize.i49556, %resize.i49541, %resize.i49526, %resize.i49510, %resize.i49495, %resize.i49480, %resize.i49465, %resize.i49449, %resize.i49434, %resize.i49419, %resize.i49404, %resize.i49388, %resize.i49373, %resize.i49358, %resize.i49343, %resize.i, %OP4912.JUMPDEST, %OP4934.JUMPDEST, %OP10204.MLOAD.contd, %OP10020.MLOAD.contd, %OP9973.MLOAD.contd, %OP9904.MLOAD.contd, %OP9864.PUSH1, %OP9797.MLOAD.contd, %OP9614.MLOAD.contd, %OP9584.PUSH1, %OP9567.RETURNDATASIZE, %OP9551.PUSH1, %OP9388.MLOAD.contd, %OP9344.MLOAD.contd, %OP8672.MLOAD.contd, %OP8642.PUSH1, %OP8625.RETURNDATASIZE, %OP8609.PUSH1, %OP8364.MLOAD.contd, %OP8219.MLOAD.contd, %OP8106.MLOAD.contd, %OP8059.MLOAD.contd, %OP8004.MLOAD.contd, %OP7731.MLOAD.contd, %OP7642.MLOAD.contd, %OP7593.MLOAD.contd, %OP7549.MLOAD.contd, %OP7424.MLOAD.contd, %OP7380.MLOAD.contd, %OP7311.MLOAD.contd, %OP7226.MLOAD.contd, %OP7179.MLOAD.contd, %OP7128.MLOAD.contd, %OP7080.MLOAD.contd, %OP7029.MLOAD.contd, %OP6862.MLOAD.contd, %OP6814.MLOAD.contd, %OP6763.MLOAD.contd, %OP6598.PUSH1, %OP6548.MLOAD.contd, %OP6498.MLOAD.contd, %OP6450.MLOAD.contd, %OP6399.MLOAD.contd, %OP6343.MLOAD.contd, %OP6290.MLOAD.contd, %OP6213.MLOAD.contd, %OP6166.MLOAD.contd, %OP6080.MLOAD.contd, %OP6033.MLOAD.contd, %OP5978.MLOAD.contd, %OP5930.MLOAD.contd, %OP5879.MLOAD.contd, %OP5828.MLOAD.contd, %OP5771.MLOAD.contd, %OP5609.MLOAD.contd, %OP5561.MLOAD.contd, %OP5510.MLOAD.contd, %OP5453.MLOAD.contd, %OP5345.MLOAD.contd, %OP5276.MLOAD.contd, %OP5229.MLOAD.contd, %OP5112.MLOAD.contd, %OP5062.MLOAD.contd, %OP4906.MLOAD.contd, %OP4813.PUSH1, %OP4734.MLOAD.contd, %OP4689.MLOAD.contd, %OP4637.MLOAD.contd, %OP4589.MLOAD.contd, %OP4531.MLOAD.contd, %OP4388.MLOAD.contd, %OP4331.MLOAD.contd, %OP4287.MLOAD.contd, %OP4243.MLOAD.contd, %OP4195.MLOAD.contd, %OP4147.MLOAD.contd, %OP4089.MLOAD.contd, %OP4032.MLOAD.contd, %OP3975.MLOAD.contd, %OP3789.MLOAD.contd, %OP3745.MLOAD.contd, %OP3701.MLOAD.contd, %OP3657.MLOAD.contd, %OP3613.MLOAD.contd, %OP3509.MLOAD.contd, %OP3426.PUSH1, %OP3387.MLOAD.contd, %OP3340.MLOAD.contd, %OP3226.MLOAD.contd, %OP3157.MLOAD.contd, %OP3109.MLOAD.contd, %OP3061.MLOAD.contd, %OP3010.MLOAD.contd, %OP2950.MLOAD.contd, %OP2880.MLOAD.contd, %OP2721.PUSH1, %OP2699.PUSH1, %OP2677.PUSH1, %OP2609.PUSH1, %OP2582.PUSH1, %OP2510.PUSH1, %OP2481.PUSH1, %OP2453.PUSH1, %OP2429.PUSH1, %OP2415.PUSH1, %OP2397.PUSH1, %OP2339.PUSH1, %OP2268.PUSH1, %OP2244.PUSH1, %OP2230.PUSH1, %OP2176.PUSH1, %OP2101.PUSH1, %OP2077.PUSH1, %OP2063.PUSH1, %OP2033.PUSH1, %OP1997.PUSH1, %OP1975.PUSH1, %OP1953.PUSH1, %OP1931.PUSH1, %OP1904.PUSH1, %OP1877.PUSH1, %OP1802.PUSH1, %OP1778.PUSH1, %OP1764.PUSH1, %OP1720.PUSH1, %OP1686.PUSH1, %OP1615.PUSH1, %OP1591.PUSH1, %OP1577.PUSH1, %OP1523.PUSH1, %OP1493.PUSH1, %OP1471.PUSH1, %OP1423.PUSH1, %OP1401.PUSH1, %OP1370.PUSH1, %OP1346.PUSH1, %OP1322.PUSH1, %OP1308.PUSH1, %OP1287.PUSH1, %OP1263.PUSH1, %OP1249.PUSH1, %OP1231.PUSH1, %OP1211.PUSH1, %OP1184.PUSH1, %OP1153.PUSH1, %OP1124.MLOAD.contd, %OP1021.PUSH1, %OP997.PUSH1, %OP983.PUSH1, %OP916.PUSH1, %OP892.PUSH1, %OP878.PUSH1, %OP811.PUSH1, %OP787.PUSH1, %OP773.PUSH1, %OP755.PUSH1, %OP734.MLOAD.contd, %OP706.PUSH1, %OP684.PUSH1, %OP662.PUSH1, %OP626.PUSH1, %OP602.PUSH1, %OP581.MLOAD.contd, %OP561.MLOAD.contd, %OP537.PUSH1, %OP519.MLOAD.contd, %OP417.JUMPDEST, %OP8.PUSH1, %suspend, %OP10409.JUMPDEST, %OP10397.DUP3, %OP10380.PUSH1, %OP10361.JUMPDEST, %OP10313.JUMPDEST, %OP10301.MLOAD.contd, %OP10283.PUSH1, %OP10264.JUMPDEST, %OP10255.MLOAD.contd, %OP10252.DUP2, %OP10229.DUP5, %OP10224.MLOAD.contd, %OP10223.DUP5, %OP10216.PUSH1, %OP10212.MLOAD.contd, %OP10210.JUMPDEST, %OP10146.RETURNDATASIZE, %OP10109.MLOAD.contd, %OP10095.POP, %OP10088.MLOAD.contd, %OP10084.MLOAD.contd, %OP10080.SUB, %OP10073.JUMPDEST, %OP10038.MLOAD.contd, %OP10029.JUMPDEST, %OP10019.SWAP1, %OP10014.PUSH32, %OP10009.PUSH1, %OP10004.PUSH1, %OP10000.MLOAD.contd, %OP9998.PUSH1, %OP9967.PUSH1, %OP9960.PUSH1, %OP9957.PUSH1, %OP9946.PUSH1, %OP9942.MLOAD.contd, %OP9941.PUSH1, %OP9935.SLOAD, %OP9933.SWAP1, %OP9923.PUSH1, %OP9898.PUSH1, %OP9891.PUSH1, %OP9888.PUSH1, %OP9877.PUSH1, %OP9873.MLOAD.contd, %OP9872.PUSH1, %OP9867.JUMPDEST, %OP9852.DUP1, %OP9843.JUMPDEST, %OP9781.SUB, %OP9774.MLOAD.contd, %OP9770.DUP1, %OP9720.PUSH1, %OP9717.MLOAD.contd, %OP9714.DUP4, %OP9703.PUSH1, %OP9699.MLOAD.contd, %OP9698.PUSH1, %OP9570.JUMPDEST, %OP9563.RETURNDATASIZE, %OP9554.JUMPDEST, %OP9538.MLOAD.contd, %OP9528.JUMPDEST, %OP9519.SUB, %OP9512.MLOAD.contd, %OP9508.DUP1, %OP9458.PUSH1, %OP9455.MLOAD.contd, %OP9452.DUP4, %OP9442.PUSH1, %OP9437.PUSH1, %OP9429.PUSH1, %OP9421.MLOAD.contd, %OP9418.JUMPDEST, %OP9382.PUSH1, %OP9375.PUSH1, %OP9372.PUSH1, %OP9361.PUSH1, %OP9357.MLOAD.contd, %OP9356.PUSH1, %OP9338.PUSH1, %OP9331.PUSH1, %OP9328.PUSH1, %OP9317.PUSH1, %OP9313.MLOAD.contd, %OP9312.PUSH1, %OP9218.SWAP2, %OP9215.PUSH1, %OP9200.SLOAD, %OP9197.PUSH1, %OP9170.SWAP1, %OP9162.MLOAD.contd, %OP9154.PUSH1, %OP9145.PUSH1, %OP9140.PUSH1, %OP9133.MLOAD.contd, %OP9121.JUMPDEST, %OP9116.SWAP1, %OP9108.MLOAD.contd, %OP9100.PUSH1, %OP9091.PUSH1, %OP9086.PUSH1, %OP9079.MLOAD.contd, %OP9067.JUMPDEST, %OP8987.MLOAD.contd, %OP8986.DUP1, %OP8979.PUSH2, %OP8970.MLOAD.contd, %OP8969.DUP4, %OP8962.PUSH1, %OP8956.PUSH1, %OP8950.PUSH1, %OP8944.PUSH1, %OP8938.DUP10, %OP8930.PUSH20, %OP8920.MLOAD.contd, %OP8917.JUMPDEST, %OP8856.MLOAD.contd, %OP8855.DUP1, %OP8852.SWAP1, %OP8844.MLOAD.contd, %OP8836.PUSH1, %OP8831.PUSH1, %OP8824.PUSH1, %OP8817.MLOAD.contd, %OP8808.JUMPDEST, %OP8789.MLOAD.contd, %OP8785.PUSH1, %OP8778.PUSH1, %OP8769.MLOAD.contd, %OP8768.DUP3, %OP8761.PUSH1, %OP8753.MLOAD.contd, %OP8750.JUMPDEST, %OP8745.SLOAD, %OP8744.KECCAK256, %OP8732.PUSH1, %OP8713.PUSH1, %OP8628.JUMPDEST, %OP8621.RETURNDATASIZE, %OP8612.JUMPDEST, %OP8596.MLOAD.contd, %OP8586.JUMPDEST, %OP8577.SUB, %OP8570.MLOAD.contd, %OP8566.DUP1, %OP8516.PUSH1, %OP8513.MLOAD.contd, %OP8510.DUP4, %OP8500.PUSH1, %OP8495.PUSH1, %OP8487.PUSH1, %OP8479.MLOAD.contd, %OP8470.JUMPDEST, %OP8363.SWAP1, %OP8358.PUSH32, %OP8353.PUSH1, %OP8348.PUSH1, %OP8344.MLOAD.contd, %OP8342.PUSH1, %OP8303.MLOAD.contd, %OP8302.DUP1, %OP8295.PUSH2, %OP8286.MLOAD.contd, %OP8285.DUP4, %OP8278.PUSH1, %OP8272.PUSH1, %OP8266.PUSH1, %OP8260.PUSH1, %OP8254.DUP10, %OP8246.PUSH20, %OP8236.MLOAD.contd, %OP8233.JUMPDEST, %OP8213.PUSH1, %OP8206.PUSH1, %OP8203.PUSH1, %OP8192.PUSH1, %OP8188.MLOAD.contd, %OP8187.PUSH1, %OP8100.PUSH1, %OP8093.PUSH1, %OP8090.PUSH1, %OP8079.PUSH1, %OP8075.MLOAD.contd, %OP8074.PUSH1, %OP8053.PUSH1, %OP8046.PUSH1, %OP8043.PUSH1, %OP8032.PUSH1, %OP8028.MLOAD.contd, %OP8027.PUSH1, %OP8003.SWAP1, %OP7998.PUSH32, %OP7993.PUSH1, %OP7988.PUSH1, %OP7984.MLOAD.contd, %OP7982.PUSH1, %OP7956.SLOAD, %OP7955.KECCAK256, %OP7943.PUSH1, %OP7872.PUSH1, %OP7851.PUSH2, %OP7788.JUMPDEST, %OP7774.PUSH32, %OP7770.JUMPDEST, %OP7759.SLOAD, %OP7756.PUSH1, %OP7730.SWAP1, %OP7725.PUSH32, %OP7720.PUSH1, %OP7715.PUSH1, %OP7711.MLOAD.contd, %OP7709.PUSH1, %OP7636.PUSH1, %OP7629.PUSH1, %OP7626.PUSH1, %OP7615.PUSH1, %OP7611.MLOAD.contd, %OP7610.PUSH1, %OP7587.PUSH1, %OP7580.PUSH1, %OP7577.PUSH1, %OP7566.PUSH1, %OP7562.MLOAD.contd, %OP7561.PUSH1, %OP7543.PUSH1, %OP7536.PUSH1, %OP7533.PUSH1, %OP7522.PUSH1, %OP7518.MLOAD.contd, %OP7517.PUSH1, %OP7504.SLOAD, %OP7501.PUSH1, %OP7470.MLOAD.contd, %OP7461.DUP6, %OP7457.SWAP2, %OP7444.PUSH1, %OP7411.PUSH1, %OP7367.PUSH1, %OP7305.PUSH1, %OP7298.PUSH1, %OP7295.PUSH1, %OP7284.PUSH1, %OP7280.MLOAD.contd, %OP7279.PUSH1, %OP7270.JUMPDEST, %OP7252.MLOAD.contd, %OP7232.JUMPDEST, %OP7220.PUSH1, %OP7213.PUSH1, %OP7210.PUSH1, %OP7199.PUSH1, %OP7195.MLOAD.contd, %OP7194.PUSH1, %OP7178.SWAP1, %OP7173.PUSH32, %OP7169.PUSH1, %OP7162.PUSH1, %OP7158.MLOAD.contd, %OP7156.PUSH1, %OP7147.JUMPDEST, %OP7122.PUSH1, %OP7115.PUSH1, %OP7112.PUSH1, %OP7101.PUSH1, %OP7097.MLOAD.contd, %OP7096.PUSH1, %OP7074.PUSH1, %OP7067.PUSH1, %OP7064.PUSH1, %OP7053.PUSH1, %OP7049.MLOAD.contd, %OP7048.PUSH1, %OP7028.SWAP1, %OP7023.PUSH32, %OP7018.PUSH1, %OP7013.PUSH1, %OP7009.MLOAD.contd, %OP7007.PUSH1, %OP6996.JUMPDEST, %OP6991.SLOAD, %OP6990.KECCAK256, %OP6980.PUSH1, %OP6955.DIV, %OP6951.PUSH2, %OP6933.DUP2, %OP6900.MLOAD.contd, %OP6898.PUSH1, %OP6894.JUMPDEST, %OP6856.PUSH1, %OP6849.PUSH1, %OP6846.PUSH1, %OP6835.PUSH1, %OP6831.MLOAD.contd, %OP6830.PUSH1, %OP6808.PUSH1, %OP6801.PUSH1, %OP6798.PUSH1, %OP6787.PUSH1, %OP6783.MLOAD.contd, %OP6782.PUSH1, %OP6762.SWAP1, %OP6757.PUSH32, %OP6752.PUSH1, %OP6747.PUSH1, %OP6743.MLOAD.contd, %OP6741.PUSH1, %OP6730.JUMPDEST, %OP6727.SLOAD, %OP6726.KECCAK256, %OP6722.SWAP2, %OP6716.SWAP4, %OP6712.PUSH1, %OP6707.PUSH1, %OP6698.JUMPDEST, %OP6589.POP, %OP6577.JUMPDEST, %OP6547.SWAP1, %OP6542.PUSH32, %OP6537.PUSH1, %OP6532.PUSH1, %OP6528.MLOAD.contd, %OP6526.PUSH1, %OP6515.JUMPDEST, %OP6492.PUSH1, %OP6485.PUSH1, %OP6482.PUSH1, %OP6471.PUSH1, %OP6467.MLOAD.contd, %OP6466.PUSH1, %OP6444.PUSH1, %OP6437.PUSH1, %OP6434.PUSH1, %OP6423.PUSH1, %OP6419.MLOAD.contd, %OP6418.PUSH1, %OP6398.SWAP1, %OP6393.PUSH32, %OP6388.PUSH1, %OP6383.PUSH1, %OP6379.MLOAD.contd, %OP6377.PUSH1, %OP6366.JUMPDEST, %OP6359.JUMPDEST, %OP6342.SWAP1, %OP6337.PUSH32, %OP6332.PUSH1, %OP6327.PUSH1, %OP6323.MLOAD.contd, %OP6321.PUSH1, %OP6310.JUMPDEST, %OP6284.PUSH1, %OP6277.PUSH1, %OP6274.PUSH1, %OP6263.PUSH1, %OP6259.MLOAD.contd, %OP6258.PUSH1, %OP6249.JUMPDEST, %OP6238.MLOAD.contd, %OP6237.PUSH1, %OP6223.PUSH32, %OP6219.JUMPDEST, %OP6207.PUSH1, %OP6200.PUSH1, %OP6197.PUSH1, %OP6186.PUSH1, %OP6182.MLOAD.contd, %OP6181.PUSH1, %OP6165.SWAP1, %OP6160.PUSH32, %OP6156.PUSH1, %OP6149.PUSH1, %OP6145.MLOAD.contd, %OP6143.PUSH1, %OP6134.JUMPDEST, %OP6129.SLOAD, %OP6126.PUSH1, %OP6105.MLOAD.contd, %OP6090.PUSH32, %OP6086.JUMPDEST, %OP6074.PUSH1, %OP6067.PUSH1, %OP6064.PUSH1, %OP6053.PUSH1, %OP6049.MLOAD.contd, %OP6048.PUSH1, %OP6032.SWAP1, %OP6027.PUSH32, %OP6023.PUSH1, %OP6016.PUSH1, %OP6012.MLOAD.contd, %OP6010.PUSH1, %OP6001.JUMPDEST, %OP5972.PUSH1, %OP5965.PUSH1, %OP5962.PUSH1, %OP5951.PUSH1, %OP5947.MLOAD.contd, %OP5946.PUSH1, %OP5924.PUSH1, %OP5917.PUSH1, %OP5914.PUSH1, %OP5903.PUSH1, %OP5899.MLOAD.contd, %OP5898.PUSH1, %OP5878.SWAP1, %OP5873.PUSH32, %OP5868.PUSH1, %OP5863.PUSH1, %OP5859.MLOAD.contd, %OP5857.PUSH1, %OP5844.JUMPDEST, %OP5827.SWAP1, %OP5822.PUSH32, %OP5817.PUSH1, %OP5812.PUSH1, %OP5808.MLOAD.contd, %OP5806.PUSH1, %OP5793.JUMPDEST, %OP5770.SWAP1, %OP5765.PUSH32, %OP5760.PUSH1, %OP5755.PUSH1, %OP5751.MLOAD.contd, %OP5749.PUSH1, %OP5738.JUMPDEST, %OP5731.JUMPDEST, %OP5721.DIV, %OP5717.PUSH2, %OP5699.DUP2, %OP5666.MLOAD.contd, %OP5664.PUSH1, %OP5660.JUMPDEST, %OP5653.JUMPDEST, %OP5650.SLOAD, %OP5647.PUSH1, %OP5603.PUSH1, %OP5596.PUSH1, %OP5593.PUSH1, %OP5582.PUSH1, %OP5578.MLOAD.contd, %OP5577.PUSH1, %OP5555.PUSH1, %OP5548.PUSH1, %OP5545.PUSH1, %OP5534.PUSH1, %OP5530.MLOAD.contd, %OP5529.PUSH1, %OP5509.SWAP1, %OP5504.PUSH32, %OP5499.PUSH1, %OP5494.PUSH1, %OP5490.MLOAD.contd, %OP5488.PUSH1, %OP5477.JUMPDEST, %OP5470.MLOAD.contd, %OP5463.PUSH32, %OP5459.JUMPDEST, %OP5447.PUSH1, %OP5440.PUSH1, %OP5437.PUSH1, %OP5426.PUSH1, %OP5422.MLOAD.contd, %OP5421.PUSH1, %OP5412.JUMPDEST, %OP5405.SLOAD, %OP5402.PUSH1, %OP5370.JUMPDEST, %OP5344.SWAP1, %OP5339.PUSH32, %OP5334.PUSH1, %OP5329.PUSH1, %OP5325.MLOAD.contd, %OP5323.PUSH1, %OP5312.JUMPDEST, %OP5301.MLOAD.contd, %OP5286.PUSH32, %OP5282.JUMPDEST, %OP5270.PUSH1, %OP5263.PUSH1, %OP5260.PUSH1, %OP5249.PUSH1, %OP5245.MLOAD.contd, %OP5244.PUSH1, %OP5228.SWAP1, %OP5223.PUSH32, %OP5219.PUSH1, %OP5212.PUSH1, %OP5208.MLOAD.contd, %OP5206.PUSH1, %OP5197.JUMPDEST, %OP5159.MLOAD.contd, %OP5150.DUP6, %OP5146.SWAP2, %OP5137.PUSH32, %OP5135.DUP1, %OP5131.PUSH1, %OP5106.PUSH1, %OP5099.PUSH1, %OP5096.PUSH1, %OP5085.PUSH1, %OP5081.MLOAD.contd, %OP5080.PUSH1, %OP5071.JUMPDEST, %OP5061.SWAP1, %OP5056.PUSH32, %OP5051.PUSH1, %OP5046.PUSH1, %OP5042.MLOAD.contd, %OP5040.PUSH1, %OP5027.JUMPDEST, %OP4973.PUSH32, %OP4971.DUP1, %OP4967.PUSH1, %OP4960.POP, %OP4946.JUMPDEST, %OP4900.PUSH1, %OP4893.PUSH1, %OP4890.PUSH1, %OP4879.PUSH1, %OP4875.MLOAD.contd, %OP4874.PUSH1, %OP4869.SLOAD, %OP4865.PUSH1, %OP4858.POP, %OP4844.JUMPDEST, %OP4804.JUMPDEST, %OP4728.PUSH1, %OP4721.PUSH1, %OP4718.PUSH1, %OP4707.PUSH1, %OP4703.MLOAD.contd, %OP4702.PUSH1, %OP4683.PUSH1, %OP4676.PUSH1, %OP4673.PUSH1, %OP4662.PUSH1, %OP4658.MLOAD.contd, %OP4657.PUSH1, %OP4631.PUSH1, %OP4624.PUSH1, %OP4621.PUSH1, %OP4610.PUSH1, %OP4606.MLOAD.contd, %OP4605.PUSH1, %OP4583.PUSH1, %OP4576.PUSH1, %OP4573.PUSH1, %OP4562.PUSH1, %OP4558.MLOAD.contd, %OP4557.PUSH1, %OP4552.SLOAD, %OP4549.PUSH1, %OP4530.SWAP1, %OP4525.PUSH32, %OP4520.PUSH1, %OP4515.PUSH1, %OP4511.MLOAD.contd, %OP4509.PUSH1, %OP4498.JUMPDEST, %OP4402.JUMPDEST, %OP4394.JUMPDEST, %OP4382.PUSH1, %OP4375.PUSH1, %OP4372.PUSH1, %OP4361.PUSH1, %OP4357.MLOAD.contd, %OP4356.PUSH1, %OP4349.SLOAD, %OP4346.PUSH1, %OP4343.PUSH1, %OP4337.JUMPDEST, %OP4325.PUSH1, %OP4318.PUSH1, %OP4315.PUSH1, %OP4304.PUSH1, %OP4300.MLOAD.contd, %OP4299.PUSH1, %OP4281.PUSH1, %OP4274.PUSH1, %OP4271.PUSH1, %OP4260.PUSH1, %OP4256.MLOAD.contd, %OP4255.PUSH1, %OP4237.PUSH1, %OP4230.PUSH1, %OP4227.PUSH1, %OP4216.PUSH1, %OP4212.MLOAD.contd, %OP4211.PUSH1, %OP4189.PUSH1, %OP4182.PUSH1, %OP4179.PUSH1, %OP4168.PUSH1, %OP4164.MLOAD.contd, %OP4163.PUSH1, %OP4141.PUSH1, %OP4134.PUSH1, %OP4131.PUSH1, %OP4120.PUSH1, %OP4116.MLOAD.contd, %OP4115.PUSH1, %OP4110.SLOAD, %OP4107.PUSH1, %OP4088.SWAP1, %OP4083.PUSH32, %OP4078.PUSH1, %OP4073.PUSH1, %OP4069.MLOAD.contd, %OP4067.PUSH1, %OP4054.JUMPDEST, %OP4047.MLOAD.contd, %OP4042.PUSH32, %OP4038.JUMPDEST, %OP4026.PUSH1, %OP4019.PUSH1, %OP4016.PUSH1, %OP4005.PUSH1, %OP4001.MLOAD.contd, %OP4000.PUSH1, %OP3991.JUMPDEST, %OP3974.SWAP1, %OP3969.PUSH32, %OP3964.PUSH1, %OP3959.PUSH1, %OP3955.MLOAD.contd, %OP3953.PUSH1, %OP3940.JUMPDEST, %OP3933.JUMPDEST, %OP3916.JUMPDEST, %OP3881.SWAP1, %OP3878.PUSH1, %OP3870.DUP3, %OP3867.PUSH1, %OP3852.PUSH32, %OP3849.PUSH1, %OP3841.PUSH32, %OP3836.JUMPDEST, %OP3822.JUMPDEST, %OP3808.JUMPDEST, %OP3783.PUSH1, %OP3776.PUSH1, %OP3773.PUSH1, %OP3762.PUSH1, %OP3758.MLOAD.contd, %OP3757.PUSH1, %OP3739.PUSH1, %OP3732.PUSH1, %OP3729.PUSH1, %OP3718.PUSH1, %OP3714.MLOAD.contd, %OP3713.PUSH1, %OP3695.PUSH1, %OP3688.PUSH1, %OP3685.PUSH1, %OP3674.PUSH1, %OP3670.MLOAD.contd, %OP3669.PUSH1, %OP3651.PUSH1, %OP3644.PUSH1, %OP3641.PUSH1, %OP3630.PUSH1, %OP3626.MLOAD.contd, %OP3625.PUSH1, %OP3607.PUSH1, %OP3600.PUSH1, %OP3597.PUSH1, %OP3586.PUSH1, %OP3582.MLOAD.contd, %OP3581.PUSH1, %OP3570.JUMPDEST, %OP3563.JUMPDEST, %OP3548.MLOAD.contd, %OP3545.DUP3, %OP3542.DUP1, %OP3534.PUSH32, %OP3532.DUP1, %OP3528.PUSH1, %OP3503.PUSH1, %OP3496.PUSH1, %OP3493.PUSH1, %OP3482.PUSH1, %OP3478.MLOAD.contd, %OP3477.PUSH1, %OP3466.JUMPDEST, %OP3417.JUMPDEST, %OP3409.MLOAD.contd, %OP3397.PUSH32, %OP3393.JUMPDEST, %OP3381.PUSH1, %OP3374.PUSH1, %OP3371.PUSH1, %OP3360.PUSH1, %OP3356.MLOAD.contd, %OP3355.PUSH1, %OP3339.SWAP1, %OP3334.PUSH32, %OP3330.PUSH1, %OP3323.PUSH1, %OP3319.MLOAD.contd, %OP3317.PUSH1, %OP3308.JUMPDEST, %OP3220.PUSH1, %OP3213.PUSH1, %OP3210.PUSH1, %OP3199.PUSH1, %OP3195.MLOAD.contd, %OP3194.PUSH1, %OP3188.SLOAD, %OP3186.SWAP1, %OP3183.SWAP1, %OP3180.CALLER, %OP3176.PUSH1, %OP3171.PUSH1, %OP3163.JUMPDEST, %OP3151.PUSH1, %OP3144.PUSH1, %OP3141.PUSH1, %OP3130.PUSH1, %OP3126.MLOAD.contd, %OP3125.PUSH1, %OP3103.PUSH1, %OP3096.PUSH1, %OP3093.PUSH1, %OP3082.PUSH1, %OP3078.MLOAD.contd, %OP3077.PUSH1, %OP3055.PUSH1, %OP3048.PUSH1, %OP3045.PUSH1, %OP3034.PUSH1, %OP3030.MLOAD.contd, %OP3029.PUSH1, %OP3009.SWAP1, %OP3004.PUSH32, %OP2999.PUSH1, %OP2994.PUSH1, %OP2990.MLOAD.contd, %OP2988.PUSH1, %OP2975.JUMPDEST, %OP2944.PUSH1, %OP2937.PUSH1, %OP2934.PUSH1, %OP2923.PUSH1, %OP2919.MLOAD.contd, %OP2918.PUSH1, %OP2909.JUMPDEST, %OP2904.JUMPDEST, %OP2879.SWAP1, %OP2874.PUSH32, %OP2869.PUSH1, %OP2864.PUSH1, %OP2860.MLOAD.contd, %OP2858.PUSH1, %OP2845.JUMPDEST, %OP2809.PUSH1, %OP2788.PUSH2, %OP2731.JUMPDEST, %OP2300.PUSH1, %OP2133.PUSH1, %OP1842.PUSH1, %OP1834.PUSH1, %OP1826.DUP1, %OP1820.MLOAD.contd, %OP1805.JUMPDEST, %OP1647.PUSH1, %OP1124.MLOAD, %OP1117.MLOAD.contd, %OP1114.JUMPDEST, %OP1053.PUSH1, %OP948.PUSH1, %OP843.PUSH1, %OP734.MLOAD, %OP727.MLOAD.contd, %OP724.JUMPDEST, %OP581.MLOAD, %OP577.MLOAD.contd, %OP574.JUMPDEST, %OP561.MLOAD, %OP555.MLOAD.contd, %OP552.JUMPDEST, %OP512.JUMPDEST, %OP503.SUB, %OP496.MLOAD.contd, %OP492.DUP1, %OP439.DUP4, %OP434.MLOAD.contd, %OP433.DUP4, %OP428.MLOAD.contd, %OP425.JUMPDEST
  %len.addr.360 = phi i64 [ %len.addr.16, %OP417.JUMPDEST ], [ %1309, %OP2731.JUMPDEST ], [ %len.addr.353, %OP10409.JUMPDEST ], [ %5302, %OP10361.JUMPDEST ], [ %5302, %OP10380.PUSH1 ], [ %5302, %OP10397.DUP3 ], [ %len.addr.348, %OP10313.JUMPDEST ], [ %5236, %OP10264.JUMPDEST ], [ %5236, %OP10283.PUSH1 ], [ %5236, %OP10301.MLOAD.contd ], [ %.pre-phi54298, %OP10210.JUMPDEST ], [ %.pre-phi54298, %OP10212.MLOAD.contd ], [ %5215, %OP10216.PUSH1 ], [ %5217, %OP10223.DUP5 ], [ %5215, %OP10224.MLOAD.contd ], [ %5217, %OP10229.DUP5 ], [ %4960, %OP9797.MLOAD.contd ], [ %4936, %OP9770.DUP1 ], [ %4935, %OP9774.MLOAD.contd ], [ %4949, %OP9781.SUB ], [ %5229, %OP10252.DUP2 ], [ %5226, %OP10255.MLOAD.contd ], [ %5189, %OP10204.MLOAD.contd ], [ %5127, %OP10073.JUMPDEST ], [ %5128, %OP10080.SUB ], [ %5135, %OP10084.MLOAD.contd ], [ %5128, %OP10088.MLOAD.contd ], [ %5140, %OP10095.POP ], [ %5145, %OP10109.MLOAD.contd ], [ %len.addr.358, %suspend ], [ %5094, %OP10029.JUMPDEST ], [ %5096, %OP10038.MLOAD.contd ], [ %5079, %OP9998.PUSH1 ], [ %5079, %OP10000.MLOAD.contd ], [ %5079, %OP10004.PUSH1 ], [ %5079, %OP10009.PUSH1 ], [ %5079, %OP10014.PUSH32 ], [ %5079, %OP10019.SWAP1 ], [ %5078, %OP10020.MLOAD.contd ], [ %5033, %OP9923.PUSH1 ], [ %5025, %OP9933.SWAP1 ], [ %5025, %OP9935.SLOAD ], [ %5025, %OP9941.PUSH1 ], [ %5025, %OP9942.MLOAD.contd ], [ %5028, %OP9946.PUSH1 ], [ %5028, %OP9957.PUSH1 ], [ %5028, %OP9960.PUSH1 ], [ %5026, %OP9967.PUSH1 ], [ %len.addr.336, %OP9973.MLOAD.contd ], [ %5007, %OP9867.JUMPDEST ], [ %5007, %OP9872.PUSH1 ], [ %5007, %OP9873.MLOAD.contd ], [ %5011, %OP9877.PUSH1 ], [ %5011, %OP9888.PUSH1 ], [ %5011, %OP9891.PUSH1 ], [ %len.addr.335, %OP9898.PUSH1 ], [ %5008, %OP9904.MLOAD.contd ], [ %4996, %OP9843.JUMPDEST ], [ %4996, %OP9852.DUP1 ], [ %4996, %OP9864.PUSH1 ], [ %4890, %OP9698.PUSH1 ], [ %4890, %OP9699.MLOAD.contd ], [ %4895, %OP9703.PUSH1 ], [ %4900, %OP9714.DUP4 ], [ %4898, %OP9717.MLOAD.contd ], [ %4898, %OP9720.PUSH1 ], [ %4732, %OP9614.MLOAD.contd ], [ %4723, %OP9570.JUMPDEST ], [ %4726, %OP9584.PUSH1 ], [ %4712, %OP9554.JUMPDEST ], [ %4701, %OP9528.JUMPDEST ], [ %len.addr.323, %OP9538.MLOAD.contd ], [ %len.addr.323, %OP9551.PUSH1 ], [ %4683, %OP9508.DUP1 ], [ %4682, %OP9512.MLOAD.contd ], [ %4696, %OP9519.SUB ], [ %4630, %OP9418.JUMPDEST ], [ %4630, %OP9421.MLOAD.contd ], [ %4632, %OP9429.PUSH1 ], [ %4632, %OP9437.PUSH1 ], [ %4633, %OP9442.PUSH1 ], [ %4647, %OP9452.DUP4 ], [ %4644, %OP9455.MLOAD.contd ], [ %4644, %OP9458.PUSH1 ], [ %3609, %OP7788.JUMPDEST ], [ %len.addr.284, %OP7872.PUSH1 ], [ %3652, %OP7851.PUSH2 ], [ %.pre-phi54296, %OP9356.PUSH1 ], [ %.pre-phi54296, %OP9357.MLOAD.contd ], [ %4612, %OP9361.PUSH1 ], [ %4612, %OP9372.PUSH1 ], [ %4612, %OP9375.PUSH1 ], [ %.pre-phi, %OP9382.PUSH1 ], [ %len.addr.318, %OP9388.MLOAD.contd ], [ %4590, %OP9312.PUSH1 ], [ %4590, %OP9313.MLOAD.contd ], [ %4596, %OP9317.PUSH1 ], [ %4596, %OP9328.PUSH1 ], [ %4596, %OP9331.PUSH1 ], [ %4592, %OP9338.PUSH1 ], [ %len.addr.317, %OP9344.MLOAD.contd ], [ %len.addr.314, %OP9215.PUSH1 ], [ %4450, %OP9218.SWAP2 ], [ %4429, %OP9197.PUSH1 ], [ %4429, %OP9200.SLOAD ], [ %len.addr.280, %OP7756.PUSH1 ], [ %len.addr.280, %OP7759.SLOAD ], [ %4409, %OP9121.JUMPDEST ], [ %4411, %OP9133.MLOAD.contd ], [ %4411, %OP9140.PUSH1 ], [ %4411, %OP9145.PUSH1 ], [ %4408, %OP9154.PUSH1 ], [ %4408, %OP9162.MLOAD.contd ], [ %4407, %OP9170.SWAP1 ], [ %3891, %OP8187.PUSH1 ], [ %3891, %OP8188.MLOAD.contd ], [ %3899, %OP8192.PUSH1 ], [ %3899, %OP8203.PUSH1 ], [ %3899, %OP8206.PUSH1 ], [ %3892, %OP8213.PUSH1 ], [ %len.addr.293, %OP8219.MLOAD.contd ], [ %4390, %OP9067.JUMPDEST ], [ %4392, %OP9079.MLOAD.contd ], [ %4392, %OP9086.PUSH1 ], [ %4392, %OP9091.PUSH1 ], [ %4389, %OP9100.PUSH1 ], [ %4389, %OP9108.MLOAD.contd ], [ %4388, %OP9116.SWAP1 ], [ %3950, %OP8342.PUSH1 ], [ %3950, %OP8344.MLOAD.contd ], [ %3950, %OP8348.PUSH1 ], [ %3950, %OP8353.PUSH1 ], [ %3950, %OP8358.PUSH32 ], [ %3950, %OP8363.SWAP1 ], [ %3949, %OP8364.MLOAD.contd ], [ %4292, %OP8917.JUMPDEST ], [ %4294, %OP8920.MLOAD.contd ], [ %4295, %OP8930.PUSH20 ], [ %4294, %OP8938.DUP10 ], [ %4294, %OP8944.PUSH1 ], [ %4294, %OP8950.PUSH1 ], [ %4294, %OP8956.PUSH1 ], [ %4295, %OP8962.PUSH1 ], [ %4296, %OP8969.DUP4 ], [ %4295, %OP8970.MLOAD.contd ], [ %4292, %OP8979.PUSH2 ], [ %4294, %OP8986.DUP1 ], [ %4291, %OP8987.MLOAD.contd ], [ %4254, %OP8808.JUMPDEST ], [ %4256, %OP8817.MLOAD.contd ], [ %4256, %OP8824.PUSH1 ], [ %4256, %OP8831.PUSH1 ], [ %4253, %OP8836.PUSH1 ], [ %4253, %OP8844.MLOAD.contd ], [ %4252, %OP8852.SWAP1 ], [ %4253, %OP8855.DUP1 ], [ %4252, %OP8856.MLOAD.contd ], [ %4232, %OP8750.JUMPDEST ], [ %4232, %OP8753.MLOAD.contd ], [ %4234, %OP8761.PUSH1 ], [ %4235, %OP8768.DUP3 ], [ %4234, %OP8769.MLOAD.contd ], [ %4231, %OP8778.PUSH1 ], [ %4234, %OP8785.PUSH1 ], [ %4231, %OP8789.MLOAD.contd ], [ %4173, %OP8713.PUSH1 ], [ %4206, %OP8732.PUSH1 ], [ %4178, %OP8744.KECCAK256 ], [ %4178, %OP8745.SLOAD ], [ %3432, %OP7444.PUSH1 ], [ %3427, %OP7457.SWAP2 ], [ %3426, %OP7461.DUP6 ], [ %len.addr.271, %OP7470.MLOAD.contd ], [ %3385, %OP7411.PUSH1 ], [ %len.addr.270, %OP7424.MLOAD.contd ], [ %3341, %OP7367.PUSH1 ], [ %len.addr.269, %OP7380.MLOAD.contd ], [ %4104, %OP8672.MLOAD.contd ], [ %4095, %OP8628.JUMPDEST ], [ %4098, %OP8642.PUSH1 ], [ %4084, %OP8612.JUMPDEST ], [ %4073, %OP8586.JUMPDEST ], [ %len.addr.300, %OP8596.MLOAD.contd ], [ %len.addr.300, %OP8609.PUSH1 ], [ %4055, %OP8566.DUP1 ], [ %4054, %OP8570.MLOAD.contd ], [ %4068, %OP8577.SUB ], [ %4002, %OP8470.JUMPDEST ], [ %4002, %OP8479.MLOAD.contd ], [ %4004, %OP8487.PUSH1 ], [ %4004, %OP8495.PUSH1 ], [ %4005, %OP8500.PUSH1 ], [ %4019, %OP8510.DUP4 ], [ %4016, %OP8513.MLOAD.contd ], [ %4016, %OP8516.PUSH1 ], [ %.pre-phi54290, %OP7561.PUSH1 ], [ %.pre-phi54290, %OP7562.MLOAD.contd ], [ %3524, %OP7566.PUSH1 ], [ %3524, %OP7577.PUSH1 ], [ %3524, %OP7580.PUSH1 ], [ %.pre-phi53975, %OP7587.PUSH1 ], [ %len.addr.275, %OP7593.MLOAD.contd ], [ %3506, %OP7517.PUSH1 ], [ %3506, %OP7518.MLOAD.contd ], [ %3510, %OP7522.PUSH1 ], [ %3510, %OP7533.PUSH1 ], [ %3510, %OP7536.PUSH1 ], [ %3507, %OP7543.PUSH1 ], [ %len.addr.274, %OP7549.MLOAD.contd ], [ %3912, %OP8233.JUMPDEST ], [ %3914, %OP8236.MLOAD.contd ], [ %3915, %OP8246.PUSH20 ], [ %3914, %OP8254.DUP10 ], [ %3914, %OP8260.PUSH1 ], [ %3914, %OP8266.PUSH1 ], [ %3914, %OP8272.PUSH1 ], [ %3915, %OP8278.PUSH1 ], [ %3916, %OP8285.DUP4 ], [ %3915, %OP8286.MLOAD.contd ], [ %3912, %OP8295.PUSH2 ], [ %3914, %OP8302.DUP1 ], [ %3911, %OP8303.MLOAD.contd ], [ %len.addr.357, %OP8074.PUSH1 ], [ %len.addr.357, %OP8075.MLOAD.contd ], [ %3805, %OP8079.PUSH1 ], [ %3805, %OP8090.PUSH1 ], [ %3805, %OP8093.PUSH1 ], [ %3804, %OP8100.PUSH1 ], [ %3800, %OP8106.MLOAD.contd ], [ %len.addr.273, %OP7501.PUSH1 ], [ %len.addr.273, %OP7504.SLOAD ], [ %3783, %OP8027.PUSH1 ], [ %3783, %OP8028.MLOAD.contd ], [ %3788, %OP8032.PUSH1 ], [ %3788, %OP8043.PUSH1 ], [ %3788, %OP8046.PUSH1 ], [ %3784, %OP8053.PUSH1 ], [ %len.addr.357, %OP8059.MLOAD.contd ], [ %3766, %OP7982.PUSH1 ], [ %3766, %OP7984.MLOAD.contd ], [ %3766, %OP7988.PUSH1 ], [ %3766, %OP7993.PUSH1 ], [ %3766, %OP7998.PUSH32 ], [ %3766, %OP8003.SWAP1 ], [ %3764, %OP8004.MLOAD.contd ], [ %3738, %OP7943.PUSH1 ], [ %3726, %OP7955.KECCAK256 ], [ %3726, %OP7956.SLOAD ], [ %3601, %OP7770.JUMPDEST ], [ %3606, %OP7774.PUSH32 ], [ %3573, %OP7709.PUSH1 ], [ %3573, %OP7711.MLOAD.contd ], [ %3573, %OP7715.PUSH1 ], [ %3573, %OP7720.PUSH1 ], [ %3573, %OP7725.PUSH32 ], [ %3573, %OP7730.SWAP1 ], [ %3570, %OP7731.MLOAD.contd ], [ %len.addr.357, %OP7610.PUSH1 ], [ %len.addr.357, %OP7611.MLOAD.contd ], [ %3543, %OP7615.PUSH1 ], [ %3543, %OP7626.PUSH1 ], [ %3543, %OP7629.PUSH1 ], [ %3537, %OP7636.PUSH1 ], [ %3539, %OP7642.MLOAD.contd ], [ %3306, %OP7270.JUMPDEST ], [ %3306, %OP7279.PUSH1 ], [ %3306, %OP7280.MLOAD.contd ], [ %3315, %OP7284.PUSH1 ], [ %3315, %OP7295.PUSH1 ], [ %3315, %OP7298.PUSH1 ], [ %3308, %OP7305.PUSH1 ], [ %len.addr.266, %OP7311.MLOAD.contd ], [ %.pre-phi53987, %OP7232.JUMPDEST ], [ %len.addr.265, %OP7252.MLOAD.contd ], [ %.pre-phi54280, %OP7194.PUSH1 ], [ %.pre-phi54280, %OP7195.MLOAD.contd ], [ %3250, %OP7199.PUSH1 ], [ %3250, %OP7210.PUSH1 ], [ %3250, %OP7213.PUSH1 ], [ %.pre-phi53990, %OP7220.PUSH1 ], [ %len.addr.264, %OP7226.MLOAD.contd ], [ %3227, %OP7147.JUMPDEST ], [ %3229, %OP7156.PUSH1 ], [ %3229, %OP7158.MLOAD.contd ], [ %3236, %OP7162.PUSH1 ], [ %3229, %OP7169.PUSH1 ], [ %3229, %OP7173.PUSH32 ], [ %3229, %OP7178.SWAP1 ], [ %len.addr.263, %OP7179.MLOAD.contd ], [ %len.addr.357, %OP7096.PUSH1 ], [ %len.addr.357, %OP7097.MLOAD.contd ], [ %3214, %OP7101.PUSH1 ], [ %3214, %OP7112.PUSH1 ], [ %3214, %OP7115.PUSH1 ], [ %3213, %OP7122.PUSH1 ], [ %3209, %OP7128.MLOAD.contd ], [ %len.addr.357, %OP7048.PUSH1 ], [ %len.addr.357, %OP7049.MLOAD.contd ], [ %3195, %OP7053.PUSH1 ], [ %3195, %OP7064.PUSH1 ], [ %3195, %OP7067.PUSH1 ], [ %3194, %OP7074.PUSH1 ], [ %3190, %OP7080.MLOAD.contd ], [ %3169, %OP6996.JUMPDEST ], [ %3171, %OP7007.PUSH1 ], [ %3171, %OP7009.MLOAD.contd ], [ %3171, %OP7013.PUSH1 ], [ %3171, %OP7018.PUSH1 ], [ %3171, %OP7023.PUSH32 ], [ %3171, %OP7028.SWAP1 ], [ %len.addr.259, %OP7029.MLOAD.contd ], [ %3142, %OP6980.PUSH1 ], [ %3164, %OP6990.KECCAK256 ], [ %3164, %OP6991.SLOAD ], [ %3104, %OP6894.JUMPDEST ], [ %3106, %OP6898.PUSH1 ], [ %3106, %OP6900.MLOAD.contd ], [ %3106, %OP6933.DUP2 ], [ %len.addr.142, %OP2809.PUSH1 ], [ %3126, %OP6951.PUSH2 ], [ %3108, %OP6955.DIV ], [ %len.addr.357, %OP6830.PUSH1 ], [ %len.addr.357, %OP6831.MLOAD.contd ], [ %3090, %OP6835.PUSH1 ], [ %3090, %OP6846.PUSH1 ], [ %3090, %OP6849.PUSH1 ], [ %3089, %OP6856.PUSH1 ], [ %3085, %OP6862.MLOAD.contd ], [ %len.addr.357, %OP6782.PUSH1 ], [ %len.addr.357, %OP6783.MLOAD.contd ], [ %3071, %OP6787.PUSH1 ], [ %3071, %OP6798.PUSH1 ], [ %3071, %OP6801.PUSH1 ], [ %3070, %OP6808.PUSH1 ], [ %3066, %OP6814.MLOAD.contd ], [ %3046, %OP6730.JUMPDEST ], [ %3048, %OP6741.PUSH1 ], [ %3048, %OP6743.MLOAD.contd ], [ %3048, %OP6747.PUSH1 ], [ %3048, %OP6752.PUSH1 ], [ %3048, %OP6757.PUSH32 ], [ %3048, %OP6762.SWAP1 ], [ %len.addr.253, %OP6763.MLOAD.contd ], [ %3032, %OP6698.JUMPDEST ], [ %3033, %OP6707.PUSH1 ], [ %3037, %OP6712.PUSH1 ], [ %3033, %OP6716.SWAP4 ], [ %len.addr.252, %OP6722.SWAP2 ], [ %3042, %OP6726.KECCAK256 ], [ %3042, %OP6727.SLOAD ], [ %2998, %OP6598.PUSH1 ], [ %2988, %OP6577.JUMPDEST ], [ %2988, %OP6589.POP ], [ %2968, %OP6515.JUMPDEST ], [ %2970, %OP6526.PUSH1 ], [ %2970, %OP6528.MLOAD.contd ], [ %2970, %OP6532.PUSH1 ], [ %2970, %OP6537.PUSH1 ], [ %2970, %OP6542.PUSH32 ], [ %2970, %OP6547.SWAP1 ], [ %len.addr.246, %OP6548.MLOAD.contd ], [ %len.addr.357, %OP6466.PUSH1 ], [ %len.addr.357, %OP6467.MLOAD.contd ], [ %2955, %OP6471.PUSH1 ], [ %2955, %OP6482.PUSH1 ], [ %2955, %OP6485.PUSH1 ], [ %2954, %OP6492.PUSH1 ], [ %2950, %OP6498.MLOAD.contd ], [ %len.addr.357, %OP6418.PUSH1 ], [ %len.addr.357, %OP6419.MLOAD.contd ], [ %2936, %OP6423.PUSH1 ], [ %2936, %OP6434.PUSH1 ], [ %2936, %OP6437.PUSH1 ], [ %2935, %OP6444.PUSH1 ], [ %2931, %OP6450.MLOAD.contd ], [ %2910, %OP6366.JUMPDEST ], [ %2912, %OP6377.PUSH1 ], [ %2912, %OP6379.MLOAD.contd ], [ %2912, %OP6383.PUSH1 ], [ %2912, %OP6388.PUSH1 ], [ %2912, %OP6393.PUSH32 ], [ %2912, %OP6398.SWAP1 ], [ %len.addr.357, %OP6399.MLOAD.contd ], [ %2907, %OP6359.JUMPDEST ], [ %2887, %OP6310.JUMPDEST ], [ %2889, %OP6321.PUSH1 ], [ %2889, %OP6323.MLOAD.contd ], [ %2889, %OP6327.PUSH1 ], [ %2889, %OP6332.PUSH1 ], [ %2889, %OP6337.PUSH32 ], [ %2889, %OP6342.SWAP1 ], [ %len.addr.357, %OP6343.MLOAD.contd ], [ %2863, %OP6249.JUMPDEST ], [ %2863, %OP6258.PUSH1 ], [ %2863, %OP6259.MLOAD.contd ], [ %2872, %OP6263.PUSH1 ], [ %2872, %OP6274.PUSH1 ], [ %2872, %OP6277.PUSH1 ], [ %2865, %OP6284.PUSH1 ], [ %len.addr.238, %OP6290.MLOAD.contd ], [ %2852, %OP6219.JUMPDEST ], [ %2852, %OP6223.PUSH32 ], [ %2854, %OP6237.PUSH1 ], [ %len.addr.237, %OP6238.MLOAD.contd ], [ %.pre-phi54230, %OP6181.PUSH1 ], [ %.pre-phi54230, %OP6182.MLOAD.contd ], [ %2840, %OP6186.PUSH1 ], [ %2840, %OP6197.PUSH1 ], [ %2840, %OP6200.PUSH1 ], [ %.pre-phi54120, %OP6207.PUSH1 ], [ %len.addr.236, %OP6213.MLOAD.contd ], [ %2817, %OP6134.JUMPDEST ], [ %2819, %OP6143.PUSH1 ], [ %2819, %OP6145.MLOAD.contd ], [ %2826, %OP6149.PUSH1 ], [ %2819, %OP6156.PUSH1 ], [ %2819, %OP6160.PUSH32 ], [ %2819, %OP6165.SWAP1 ], [ %len.addr.235, %OP6166.MLOAD.contd ], [ %len.addr.234, %OP6126.PUSH1 ], [ %len.addr.234, %OP6129.SLOAD ], [ %2791, %OP6086.JUMPDEST ], [ %2791, %OP6090.PUSH32 ], [ %len.addr.233, %OP6105.MLOAD.contd ], [ %.pre-phi54228, %OP6048.PUSH1 ], [ %.pre-phi54228, %OP6049.MLOAD.contd ], [ %2779, %OP6053.PUSH1 ], [ %2779, %OP6064.PUSH1 ], [ %2779, %OP6067.PUSH1 ], [ %.pre-phi54126, %OP6074.PUSH1 ], [ %len.addr.232, %OP6080.MLOAD.contd ], [ %2756, %OP6001.JUMPDEST ], [ %2758, %OP6010.PUSH1 ], [ %2758, %OP6012.MLOAD.contd ], [ %2765, %OP6016.PUSH1 ], [ %2758, %OP6023.PUSH1 ], [ %2758, %OP6027.PUSH32 ], [ %2758, %OP6032.SWAP1 ], [ %len.addr.231, %OP6033.MLOAD.contd ], [ %len.addr.357, %OP5946.PUSH1 ], [ %len.addr.357, %OP5947.MLOAD.contd ], [ %2739, %OP5951.PUSH1 ], [ %2739, %OP5962.PUSH1 ], [ %2739, %OP5965.PUSH1 ], [ %2738, %OP5972.PUSH1 ], [ %2734, %OP5978.MLOAD.contd ], [ %len.addr.357, %OP5898.PUSH1 ], [ %len.addr.357, %OP5899.MLOAD.contd ], [ %2720, %OP5903.PUSH1 ], [ %2720, %OP5914.PUSH1 ], [ %2720, %OP5917.PUSH1 ], [ %2719, %OP5924.PUSH1 ], [ %2715, %OP5930.MLOAD.contd ], [ %2694, %OP5844.JUMPDEST ], [ %2696, %OP5857.PUSH1 ], [ %2696, %OP5859.MLOAD.contd ], [ %2696, %OP5863.PUSH1 ], [ %2696, %OP5868.PUSH1 ], [ %2696, %OP5873.PUSH32 ], [ %2696, %OP5878.SWAP1 ], [ %2694, %OP5879.MLOAD.contd ], [ %2673, %OP5793.JUMPDEST ], [ %2675, %OP5806.PUSH1 ], [ %2675, %OP5808.MLOAD.contd ], [ %2675, %OP5812.PUSH1 ], [ %2675, %OP5817.PUSH1 ], [ %2675, %OP5822.PUSH32 ], [ %2675, %OP5827.SWAP1 ], [ %2673, %OP5828.MLOAD.contd ], [ %2652, %OP5738.JUMPDEST ], [ %2654, %OP5749.PUSH1 ], [ %2654, %OP5751.MLOAD.contd ], [ %2654, %OP5755.PUSH1 ], [ %2654, %OP5760.PUSH1 ], [ %2654, %OP5765.PUSH32 ], [ %2654, %OP5770.SWAP1 ], [ %len.addr.357, %OP5771.MLOAD.contd ], [ %2649, %OP5731.JUMPDEST ], [ %2621, %OP5660.JUMPDEST ], [ %2623, %OP5664.PUSH1 ], [ %2623, %OP5666.MLOAD.contd ], [ %2623, %OP5699.DUP2 ], [ %2643, %OP5717.PUSH2 ], [ %2625, %OP5721.DIV ], [ %2618, %OP5653.JUMPDEST ], [ %len.addr.219, %OP5647.PUSH1 ], [ %len.addr.219, %OP5650.SLOAD ], [ %len.addr.357, %OP5577.PUSH1 ], [ %len.addr.357, %OP5578.MLOAD.contd ], [ %2593, %OP5582.PUSH1 ], [ %2593, %OP5593.PUSH1 ], [ %2593, %OP5596.PUSH1 ], [ %2592, %OP5603.PUSH1 ], [ %2588, %OP5609.MLOAD.contd ], [ %len.addr.357, %OP5529.PUSH1 ], [ %len.addr.357, %OP5530.MLOAD.contd ], [ %2574, %OP5534.PUSH1 ], [ %2574, %OP5545.PUSH1 ], [ %2574, %OP5548.PUSH1 ], [ %2573, %OP5555.PUSH1 ], [ %2569, %OP5561.MLOAD.contd ], [ %2548, %OP5477.JUMPDEST ], [ %2550, %OP5488.PUSH1 ], [ %2550, %OP5490.MLOAD.contd ], [ %2550, %OP5494.PUSH1 ], [ %2550, %OP5499.PUSH1 ], [ %2550, %OP5504.PUSH32 ], [ %2550, %OP5509.SWAP1 ], [ %len.addr.357, %OP5510.MLOAD.contd ], [ %.pre-phi54222, %OP5459.JUMPDEST ], [ %len.addr.215, %OP5463.PUSH32 ], [ %len.addr.215, %OP5470.MLOAD.contd ], [ %2517, %OP5412.JUMPDEST ], [ %2517, %OP5421.PUSH1 ], [ %2517, %OP5422.MLOAD.contd ], [ %2526, %OP5426.PUSH1 ], [ %2526, %OP5437.PUSH1 ], [ %2526, %OP5440.PUSH1 ], [ %2519, %OP5447.PUSH1 ], [ %len.addr.214, %OP5453.MLOAD.contd ], [ %len.addr.212, %OP5402.PUSH1 ], [ %len.addr.212, %OP5405.SLOAD ], [ %2498, %OP5370.JUMPDEST ], [ %2478, %OP5312.JUMPDEST ], [ %2480, %OP5323.PUSH1 ], [ %2480, %OP5325.MLOAD.contd ], [ %2480, %OP5329.PUSH1 ], [ %2480, %OP5334.PUSH1 ], [ %2480, %OP5339.PUSH32 ], [ %2480, %OP5344.SWAP1 ], [ %len.addr.208, %OP5345.MLOAD.contd ], [ %2464, %OP5282.JUMPDEST ], [ %2464, %OP5286.PUSH32 ], [ %len.addr.207, %OP5301.MLOAD.contd ], [ %.pre-phi54232, %OP5244.PUSH1 ], [ %.pre-phi54232, %OP5245.MLOAD.contd ], [ %2452, %OP5249.PUSH1 ], [ %2452, %OP5260.PUSH1 ], [ %2452, %OP5263.PUSH1 ], [ %.pre-phi54109, %OP5270.PUSH1 ], [ %len.addr.206, %OP5276.MLOAD.contd ], [ %2429, %OP5197.JUMPDEST ], [ %2431, %OP5206.PUSH1 ], [ %2431, %OP5208.MLOAD.contd ], [ %2438, %OP5212.PUSH1 ], [ %2431, %OP5219.PUSH1 ], [ %2431, %OP5223.PUSH32 ], [ %2431, %OP5228.SWAP1 ], [ %len.addr.205, %OP5229.MLOAD.contd ], [ %2341, %OP5131.PUSH1 ], [ %2342, %OP5135.DUP1 ], [ %2333, %OP5137.PUSH32 ], [ %2333, %OP5146.SWAP2 ], [ %2332, %OP5150.DUP6 ], [ %len.addr.203, %OP5159.MLOAD.contd ], [ %2310, %OP5071.JUMPDEST ], [ %2310, %OP5080.PUSH1 ], [ %2310, %OP5081.MLOAD.contd ], [ %2319, %OP5085.PUSH1 ], [ %2319, %OP5096.PUSH1 ], [ %2319, %OP5099.PUSH1 ], [ %2312, %OP5106.PUSH1 ], [ %len.addr.202, %OP5112.MLOAD.contd ], [ %2292, %OP5027.JUMPDEST ], [ %2294, %OP5040.PUSH1 ], [ %2294, %OP5042.MLOAD.contd ], [ %2294, %OP5046.PUSH1 ], [ %2294, %OP5051.PUSH1 ], [ %2294, %OP5056.PUSH32 ], [ %2294, %OP5061.SWAP1 ], [ %2292, %OP5062.MLOAD.contd ], [ %2253, %OP4946.JUMPDEST ], [ %2261, %OP4960.POP ], [ %2261, %OP4967.PUSH1 ], [ %2263, %OP4971.DUP1 ], [ %2268, %OP4973.PUSH32 ], [ %2209, %OP4844.JUMPDEST ], [ %2217, %OP4858.POP ], [ %2217, %OP4865.PUSH1 ], [ %2217, %OP4869.SLOAD ], [ %2217, %OP4874.PUSH1 ], [ %2217, %OP4875.MLOAD.contd ], [ %2228, %OP4879.PUSH1 ], [ %2228, %OP4890.PUSH1 ], [ %2228, %OP4893.PUSH1 ], [ %2234, %OP4900.PUSH1 ], [ %2223, %OP4906.MLOAD.contd ], [ %2197, %OP4804.JUMPDEST ], [ %len.addr.193, %OP4813.PUSH1 ], [ %2156, %OP4702.PUSH1 ], [ %2156, %OP4703.MLOAD.contd ], [ %2162, %OP4707.PUSH1 ], [ %2162, %OP4718.PUSH1 ], [ %2162, %OP4721.PUSH1 ], [ %2160, %OP4728.PUSH1 ], [ %len.addr.191, %OP4734.MLOAD.contd ], [ %len.addr.357, %OP4657.PUSH1 ], [ %len.addr.357, %OP4658.MLOAD.contd ], [ %2144, %OP4662.PUSH1 ], [ %2144, %OP4673.PUSH1 ], [ %2144, %OP4676.PUSH1 ], [ %2142, %OP4683.PUSH1 ], [ %2139, %OP4689.MLOAD.contd ], [ %len.addr.357, %OP4605.PUSH1 ], [ %len.addr.357, %OP4606.MLOAD.contd ], [ %2123, %OP4610.PUSH1 ], [ %2123, %OP4621.PUSH1 ], [ %2123, %OP4624.PUSH1 ], [ %2122, %OP4631.PUSH1 ], [ %2118, %OP4637.MLOAD.contd ], [ %.pre-phi54242, %OP4549.PUSH1 ], [ %.pre-phi54242, %OP4552.SLOAD ], [ %.pre-phi54242, %OP4557.PUSH1 ], [ %.pre-phi54242, %OP4558.MLOAD.contd ], [ %2095, %OP4562.PUSH1 ], [ %2095, %OP4573.PUSH1 ], [ %2095, %OP4576.PUSH1 ], [ %.pre-phi54088, %OP4583.PUSH1 ], [ %len.addr.188, %OP4589.MLOAD.contd ], [ %2075, %OP4498.JUMPDEST ], [ %2077, %OP4509.PUSH1 ], [ %2077, %OP4511.MLOAD.contd ], [ %2077, %OP4515.PUSH1 ], [ %2077, %OP4520.PUSH1 ], [ %2077, %OP4525.PUSH32 ], [ %2077, %OP4530.SWAP1 ], [ %len.addr.187, %OP4531.MLOAD.contd ], [ %2044, %OP4402.JUMPDEST ], [ %2041, %OP4394.JUMPDEST ], [ %.pre-phi53970, %OP4337.JUMPDEST ], [ %.pre-phi53970, %OP4343.PUSH1 ], [ %.pre-phi53970, %OP4346.PUSH1 ], [ %.pre-phi53970, %OP4349.SLOAD ], [ %2020, %OP4356.PUSH1 ], [ %2020, %OP4357.MLOAD.contd ], [ %2029, %OP4361.PUSH1 ], [ %2029, %OP4372.PUSH1 ], [ %2029, %OP4375.PUSH1 ], [ %2021, %OP4382.PUSH1 ], [ %.pre-phi53970, %OP4388.MLOAD.contd ], [ %.pre-phi54292, %OP4299.PUSH1 ], [ %.pre-phi54292, %OP4300.MLOAD.contd ], [ %2006, %OP4304.PUSH1 ], [ %2006, %OP4315.PUSH1 ], [ %2006, %OP4318.PUSH1 ], [ %.pre-phi53968, %OP4325.PUSH1 ], [ %len.addr.184, %OP4331.MLOAD.contd ], [ %1987, %OP4255.PUSH1 ], [ %1987, %OP4256.MLOAD.contd ], [ %1991, %OP4260.PUSH1 ], [ %1991, %OP4271.PUSH1 ], [ %1991, %OP4274.PUSH1 ], [ %1988, %OP4281.PUSH1 ], [ %len.addr.183, %OP4287.MLOAD.contd ], [ %len.addr.357, %OP4211.PUSH1 ], [ %len.addr.357, %OP4212.MLOAD.contd ], [ %1975, %OP4216.PUSH1 ], [ %1975, %OP4227.PUSH1 ], [ %1975, %OP4230.PUSH1 ], [ %1974, %OP4237.PUSH1 ], [ %1970, %OP4243.MLOAD.contd ], [ %len.addr.357, %OP4163.PUSH1 ], [ %len.addr.357, %OP4164.MLOAD.contd ], [ %1956, %OP4168.PUSH1 ], [ %1956, %OP4179.PUSH1 ], [ %1956, %OP4182.PUSH1 ], [ %1955, %OP4189.PUSH1 ], [ %1951, %OP4195.MLOAD.contd ], [ %1924, %OP4107.PUSH1 ], [ %1924, %OP4110.SLOAD ], [ %1924, %OP4115.PUSH1 ], [ %1924, %OP4116.MLOAD.contd ], [ %1928, %OP4120.PUSH1 ], [ %1928, %OP4131.PUSH1 ], [ %1928, %OP4134.PUSH1 ], [ %1927, %OP4141.PUSH1 ], [ %len.addr.180, %OP4147.MLOAD.contd ], [ %1906, %OP4054.JUMPDEST ], [ %1908, %OP4067.PUSH1 ], [ %1908, %OP4069.MLOAD.contd ], [ %1908, %OP4073.PUSH1 ], [ %1908, %OP4078.PUSH1 ], [ %1908, %OP4083.PUSH32 ], [ %1908, %OP4088.SWAP1 ], [ %1906, %OP4089.MLOAD.contd ], [ %.pre-phi54234, %OP4038.JUMPDEST ], [ %len.addr.178, %OP4042.PUSH32 ], [ %len.addr.178, %OP4047.MLOAD.contd ], [ %1876, %OP3991.JUMPDEST ], [ %1876, %OP4000.PUSH1 ], [ %1876, %OP4001.MLOAD.contd ], [ %1885, %OP4005.PUSH1 ], [ %1885, %OP4016.PUSH1 ], [ %1885, %OP4019.PUSH1 ], [ %1878, %OP4026.PUSH1 ], [ %len.addr.177, %OP4032.MLOAD.contd ], [ %1855, %OP3940.JUMPDEST ], [ %1857, %OP3953.PUSH1 ], [ %1857, %OP3955.MLOAD.contd ], [ %1857, %OP3959.PUSH1 ], [ %1857, %OP3964.PUSH1 ], [ %1857, %OP3969.PUSH32 ], [ %1857, %OP3974.SWAP1 ], [ %1855, %OP3975.MLOAD.contd ], [ %1852, %OP3933.JUMPDEST ], [ %1846, %OP3916.JUMPDEST ], [ %1817, %OP3836.JUMPDEST ], [ %1823, %OP3841.PUSH32 ], [ %1817, %OP3849.PUSH1 ], [ %1817, %OP3852.PUSH32 ], [ %1820, %OP3867.PUSH1 ], [ %1817, %OP3870.DUP3 ], [ %1820, %OP3878.PUSH1 ], [ %1823, %OP3881.SWAP1 ], [ %len.addr.357, %OP3822.JUMPDEST ], [ %len.addr.357, %OP3808.JUMPDEST ], [ %.pre-phi54272, %OP3757.PUSH1 ], [ %.pre-phi54272, %OP3758.MLOAD.contd ], [ %1783, %OP3762.PUSH1 ], [ %1783, %OP3773.PUSH1 ], [ %1783, %OP3776.PUSH1 ], [ %.pre-phi54030, %OP3783.PUSH1 ], [ %len.addr.170, %OP3789.MLOAD.contd ], [ %.pre-phi54270, %OP3713.PUSH1 ], [ %.pre-phi54270, %OP3714.MLOAD.contd ], [ %1769, %OP3718.PUSH1 ], [ %1769, %OP3729.PUSH1 ], [ %1769, %OP3732.PUSH1 ], [ %.pre-phi54032, %OP3739.PUSH1 ], [ %len.addr.169, %OP3745.MLOAD.contd ], [ %.pre-phi54268, %OP3669.PUSH1 ], [ %.pre-phi54268, %OP3670.MLOAD.contd ], [ %1755, %OP3674.PUSH1 ], [ %1755, %OP3685.PUSH1 ], [ %1755, %OP3688.PUSH1 ], [ %.pre-phi54034, %OP3695.PUSH1 ], [ %len.addr.168, %OP3701.MLOAD.contd ], [ %.pre-phi54266, %OP3625.PUSH1 ], [ %.pre-phi54266, %OP3626.MLOAD.contd ], [ %1741, %OP3630.PUSH1 ], [ %1741, %OP3641.PUSH1 ], [ %1741, %OP3644.PUSH1 ], [ %.pre-phi54036, %OP3651.PUSH1 ], [ %len.addr.167, %OP3657.MLOAD.contd ], [ %1720, %OP3570.JUMPDEST ], [ %1720, %OP3581.PUSH1 ], [ %1720, %OP3582.MLOAD.contd ], [ %1727, %OP3586.PUSH1 ], [ %1727, %OP3597.PUSH1 ], [ %1727, %OP3600.PUSH1 ], [ %1722, %OP3607.PUSH1 ], [ %len.addr.166, %OP3613.MLOAD.contd ], [ %1717, %OP3563.JUMPDEST ], [ %1687, %OP3528.PUSH1 ], [ %1688, %OP3532.DUP1 ], [ %1679, %OP3534.PUSH32 ], [ %1679, %OP3542.DUP1 ], [ %1678, %OP3545.DUP3 ], [ %len.addr.163, %OP3548.MLOAD.contd ], [ %1654, %OP3466.JUMPDEST ], [ %1656, %OP3477.PUSH1 ], [ %1656, %OP3478.MLOAD.contd ], [ %1664, %OP3482.PUSH1 ], [ %1664, %OP3493.PUSH1 ], [ %1664, %OP3496.PUSH1 ], [ %1657, %OP3503.PUSH1 ], [ %1654, %OP3509.MLOAD.contd ], [ %1629, %OP3417.JUMPDEST ], [ %len.addr.159, %OP3426.PUSH1 ], [ %1617, %OP3393.JUMPDEST ], [ %.pre-phi54040, %OP3397.PUSH32 ], [ %len.addr.158, %OP3409.MLOAD.contd ], [ %.pre-phi54258, %OP3355.PUSH1 ], [ %.pre-phi54258, %OP3356.MLOAD.contd ], [ %1605, %OP3360.PUSH1 ], [ %1605, %OP3371.PUSH1 ], [ %1605, %OP3374.PUSH1 ], [ %.pre-phi54042, %OP3381.PUSH1 ], [ %len.addr.157, %OP3387.MLOAD.contd ], [ %1582, %OP3308.JUMPDEST ], [ %1584, %OP3317.PUSH1 ], [ %1584, %OP3319.MLOAD.contd ], [ %1591, %OP3323.PUSH1 ], [ %1584, %OP3330.PUSH1 ], [ %1584, %OP3334.PUSH32 ], [ %1584, %OP3339.SWAP1 ], [ %len.addr.156, %OP3340.MLOAD.contd ], [ %1525, %OP3163.JUMPDEST ], [ %1526, %OP3171.PUSH1 ], [ %1530, %OP3176.PUSH1 ], [ %1530, %OP3180.CALLER ], [ %1526, %OP3183.SWAP1 ], [ %1525, %OP3186.SWAP1 ], [ %1525, %OP3188.SLOAD ], [ %1525, %OP3194.PUSH1 ], [ %1525, %OP3195.MLOAD.contd ], [ %1528, %OP3199.PUSH1 ], [ %1528, %OP3210.PUSH1 ], [ %1528, %OP3213.PUSH1 ], [ %1526, %OP3220.PUSH1 ], [ %len.addr.154, %OP3226.MLOAD.contd ], [ %len.addr.357, %OP3125.PUSH1 ], [ %len.addr.357, %OP3126.MLOAD.contd ], [ %1513, %OP3130.PUSH1 ], [ %1513, %OP3141.PUSH1 ], [ %1513, %OP3144.PUSH1 ], [ %1512, %OP3151.PUSH1 ], [ %1508, %OP3157.MLOAD.contd ], [ %len.addr.357, %OP3077.PUSH1 ], [ %len.addr.357, %OP3078.MLOAD.contd ], [ %1494, %OP3082.PUSH1 ], [ %1494, %OP3093.PUSH1 ], [ %1494, %OP3096.PUSH1 ], [ %1493, %OP3103.PUSH1 ], [ %1489, %OP3109.MLOAD.contd ], [ %len.addr.357, %OP3029.PUSH1 ], [ %len.addr.357, %OP3030.MLOAD.contd ], [ %1475, %OP3034.PUSH1 ], [ %1475, %OP3045.PUSH1 ], [ %1475, %OP3048.PUSH1 ], [ %1474, %OP3055.PUSH1 ], [ %1470, %OP3061.MLOAD.contd ], [ %1449, %OP2975.JUMPDEST ], [ %1451, %OP2988.PUSH1 ], [ %1451, %OP2990.MLOAD.contd ], [ %1451, %OP2994.PUSH1 ], [ %1451, %OP2999.PUSH1 ], [ %1451, %OP3004.PUSH32 ], [ %1451, %OP3009.SWAP1 ], [ %1449, %OP3010.MLOAD.contd ], [ %1423, %OP2909.JUMPDEST ], [ %1423, %OP2918.PUSH1 ], [ %1423, %OP2919.MLOAD.contd ], [ %1432, %OP2923.PUSH1 ], [ %1432, %OP2934.PUSH1 ], [ %1432, %OP2937.PUSH1 ], [ %1425, %OP2944.PUSH1 ], [ %len.addr.148, %OP2950.MLOAD.contd ], [ %1421, %OP2904.JUMPDEST ], [ %1399, %OP2845.JUMPDEST ], [ %1401, %OP2858.PUSH1 ], [ %1401, %OP2860.MLOAD.contd ], [ %1401, %OP2864.PUSH1 ], [ %1401, %OP2869.PUSH1 ], [ %1401, %OP2874.PUSH32 ], [ %1401, %OP2879.SWAP1 ], [ %1399, %OP2880.MLOAD.contd ], [ %1299, %OP2721.PUSH1 ], [ %1289, %OP2699.PUSH1 ], [ %1279, %OP2677.PUSH1 ], [ %1251, %OP2609.PUSH1 ], [ %1239, %OP2582.PUSH1 ], [ %1209, %OP2510.PUSH1 ], [ %1196, %OP2481.PUSH1 ], [ %1180, %OP2453.PUSH1 ], [ %len.addr.122, %OP2429.PUSH1 ], [ %1167, %OP2415.PUSH1 ], [ %1159, %OP2397.PUSH1 ], [ %1134, %OP2339.PUSH1 ], [ %1120, %OP2300.PUSH1 ], [ %1082, %OP2268.PUSH1 ], [ %len.addr.115, %OP2244.PUSH1 ], [ %1069, %OP2230.PUSH1 ], [ %1048, %OP2176.PUSH1 ], [ %1033, %OP2133.PUSH1 ], [ %995, %OP2101.PUSH1 ], [ %len.addr.109, %OP2077.PUSH1 ], [ %982, %OP2063.PUSH1 ], [ %970, %OP2033.PUSH1 ], [ %954, %OP1997.PUSH1 ], [ %943, %OP1975.PUSH1 ], [ %932, %OP1953.PUSH1 ], [ %921, %OP1931.PUSH1 ], [ %909, %OP1904.PUSH1 ], [ %897, %OP1877.PUSH1 ], [ %882, %OP1805.JUMPDEST ], [ %881, %OP1820.MLOAD.contd ], [ %882, %OP1826.DUP1 ], [ %890, %OP1834.PUSH1 ], [ %882, %OP1842.PUSH1 ], [ %867, %OP1802.PUSH1 ], [ %len.addr.91, %OP1778.PUSH1 ], [ %854, %OP1764.PUSH1 ], [ %837, %OP1720.PUSH1 ], [ %823, %OP1686.PUSH1 ], [ %809, %OP1647.PUSH1 ], [ %771, %OP1615.PUSH1 ], [ %len.addr.81, %OP1591.PUSH1 ], [ %758, %OP1577.PUSH1 ], [ %737, %OP1523.PUSH1 ], [ %724, %OP1493.PUSH1 ], [ %713, %OP1471.PUSH1 ], [ %692, %OP1423.PUSH1 ], [ %681, %OP1401.PUSH1 ], [ %668, %OP1370.PUSH1 ], [ %653, %OP1346.PUSH1 ], [ %len.addr.62, %OP1322.PUSH1 ], [ %641, %OP1308.PUSH1 ], [ %626, %OP1287.PUSH1 ], [ %len.addr.59, %OP1263.PUSH1 ], [ %613, %OP1249.PUSH1 ], [ %605, %OP1231.PUSH1 ], [ %595, %OP1211.PUSH1 ], [ %583, %OP1184.PUSH1 ], [ %570, %OP1153.PUSH1 ], [ %559, %OP1114.JUMPDEST ], [ %558, %OP1117.MLOAD.contd ], [ %558, %OP1124.MLOAD ], [ %566, %OP1124.MLOAD.contd ], [ %528, %OP1053.PUSH1 ], [ %489, %OP1021.PUSH1 ], [ %len.addr.44, %OP997.PUSH1 ], [ %463, %OP948.PUSH1 ], [ %len.addr.43, %OP983.PUSH1 ], [ %425, %OP916.PUSH1 ], [ %len.addr.41, %OP892.PUSH1 ], [ %399, %OP843.PUSH1 ], [ %len.addr.40, %OP878.PUSH1 ], [ %361, %OP811.PUSH1 ], [ %len.addr.38, %OP787.PUSH1 ], [ %348, %OP773.PUSH1 ], [ %340, %OP755.PUSH1 ], [ %331, %OP724.JUMPDEST ], [ %330, %OP727.MLOAD.contd ], [ %330, %OP734.MLOAD ], [ %338, %OP734.MLOAD.contd ], [ %317, %OP706.PUSH1 ], [ %306, %OP684.PUSH1 ], [ %295, %OP662.PUSH1 ], [ %279, %OP626.PUSH1 ], [ %268, %OP602.PUSH1 ], [ %260, %OP574.JUMPDEST ], [ %259, %OP577.MLOAD.contd ], [ %259, %OP581.MLOAD ], [ %266, %OP581.MLOAD.contd ], [ %248, %OP552.JUMPDEST ], [ %247, %OP555.MLOAD.contd ], [ %247, %OP561.MLOAD ], [ %256, %OP561.MLOAD.contd ], [ %235, %OP537.PUSH1 ], [ %230, %OP512.JUMPDEST ], [ %233, %OP519.MLOAD.contd ], [ %212, %OP492.DUP1 ], [ %211, %OP496.MLOAD.contd ], [ %225, %OP503.SUB ], [ %171, %OP425.JUMPDEST ], [ %173, %OP428.MLOAD.contd ], [ %174, %OP433.DUP4 ], [ %173, %OP434.MLOAD.contd ], [ %174, %OP439.DUP4 ], [ %1354, %OP2788.PUSH2 ], [ 1, %OP8.PUSH1 ], [ %stack_len36507, %OP8621.RETURNDATASIZE ], [ %stack_len36507, %OP8625.RETURNDATASIZE ], [ %5148, %OP10146.RETURNDATASIZE ], [ %stack_len36507, %OP9563.RETURNDATASIZE ], [ %stack_len36507, %OP9567.RETURNDATASIZE ], [ %2238, %OP4912.JUMPDEST ], [ %2249, %OP4934.JUMPDEST ], [ 0, %resize.i ], [ %376, %resize.i49343 ], [ %375, %resize.i49358 ], [ %376, %resize.i49373 ], [ %376, %resize.i49388 ], [ %440, %resize.i49404 ], [ %439, %resize.i49419 ], [ %440, %resize.i49434 ], [ %440, %resize.i49449 ], [ %505, %resize.i49465 ], [ %504, %resize.i49480 ], [ %505, %resize.i49495 ], [ %505, %resize.i49510 ], [ %786, %resize.i49526 ], [ %785, %resize.i49541 ], [ %786, %resize.i49556 ], [ %786, %resize.i49571 ], [ %1010, %resize.i49587 ], [ %1009, %resize.i49602 ], [ %1010, %resize.i49617 ], [ %1010, %resize.i49632 ], [ %1097, %resize.i49648 ], [ %1096, %resize.i49663 ], [ %1097, %resize.i49678 ], [ %1097, %resize.i49693 ], [ %1311, %resize.i49709 ], [ %1311, %resize.i49724 ], [ %1311, %resize.i49739 ], [ %1316, %resize.i49754 ], [ %1370, %resize.i49768 ], [ %1617, %resize.i49799 ], [ %1676, %resize.i49813 ], [ %1678, %resize.i49828 ], [ %1678, %resize.i49843 ], [ %1678, %resize.i49859 ], [ %.pre-phi54274, %resize.i49875 ], [ %.pre-phi54095, %resize.i49891 ], [ %1924, %resize.i49905 ], [ %1924, %resize.i49920 ], [ %.pre-phi54242, %resize.i49934 ], [ %.pre-phi54242, %resize.i49949 ], [ %.pre-phi54069, %resize.i49963 ], [ %2332, %resize.i49978 ], [ %2333, %resize.i49993 ], [ %2333, %resize.i50009 ], [ %2333, %resize.i50024 ], [ %2333, %resize.i50040 ], [ %2394, %resize.i50056 ], [ %2393, %resize.i50071 ], [ %2393, %resize.i50086 ], [ %2393, %resize.i50101 ], [ %2466, %resize.i50117 ], [ %len.addr.212, %resize.i50131 ], [ %len.addr.212, %resize.i50146 ], [ %.pre-phi54157, %resize.i50162 ], [ %len.addr.219, %resize.i50176 ], [ %len.addr.219, %resize.i50191 ], [ %2793, %resize.i50207 ], [ %len.addr.234, %resize.i50221 ], [ %len.addr.234, %resize.i50236 ], [ %len.addr.258, %resize.i50250 ], [ %3132, %resize.i50265 ], [ %3134, %resize.i50280 ], [ %len.addr.258, %resize.i50295 ], [ %3264, %resize.i50311 ], [ %3264, %resize.i50326 ], [ %3263, %resize.i50341 ], [ %3264, %resize.i50357 ], [ %3334, %resize.i50373 ], [ %3334, %resize.i50388 ], [ %3341, %resize.i50403 ], [ %3341, %resize.i50418 ], [ %3335, %resize.i50434 ], [ %.pre-phi54254, %resize.i50450 ], [ %.pre-phi54254, %resize.i50465 ], [ %3385, %resize.i50480 ], [ %3385, %resize.i50495 ], [ %.pre-phi54053, %resize.i50511 ], [ %3424, %resize.i50525 ], [ %3426, %resize.i50540 ], [ %3432, %resize.i50555 ], [ %3427, %resize.i50570 ], [ %3427, %resize.i50586 ], [ %3427, %resize.i50601 ], [ %3427, %resize.i50617 ], [ %len.addr.273, %resize.i50631 ], [ %len.addr.273, %resize.i50646 ], [ %len.addr.280, %resize.i50660 ], [ %len.addr.280, %resize.i50675 ], [ %3611, %resize.i50691 ], [ %3611, %resize.i50706 ], [ %3611, %resize.i50721 ], [ %3616, %resize.i50736 ], [ %3668, %resize.i50750 ], [ %3695, %resize.i50781 ], [ %3695, %resize.i50796 ], [ %3706, %resize.i50811 ], [ %3706, %resize.i50826 ], [ %3727, %resize.i50840 ], [ %3728, %resize.i50855 ], [ %3730, %resize.i50870 ], [ %3727, %resize.i50885 ], [ %3830, %resize.i50930 ], [ %3835, %resize.i50945 ], [ %3835, %resize.i50960 ], [ %3835, %resize.i50975 ], [ %3829, %resize.i50991 ], [ %3829, %resize.i51006 ], [ %3828, %resize.i51021 ], [ %4103, %resize.i51068 ], [ %len.addr.303, %resize.i51084 ], [ %len.addr.303, %resize.i51099 ], [ %len.addr.303, %resize.i51114 ], [ %len.addr.303, %resize.i51129 ], [ %len.addr.303, %resize.i51144 ], [ %len.addr.303, %resize.i51160 ], [ %4173, %resize.i51176 ], [ %4173, %resize.i51191 ], [ %4178, %resize.i51206 ], [ %4179, %resize.i51220 ], [ %4185, %resize.i51235 ], [ %4198, %resize.i51250 ], [ %4179, %resize.i51265 ], [ %4324, %resize.i51281 ], [ %4329, %resize.i51296 ], [ %4329, %resize.i51311 ], [ %4329, %resize.i51326 ], [ %4323, %resize.i51342 ], [ %4323, %resize.i51357 ], [ %4322, %resize.i51372 ], [ %4429, %resize.i51386 ], [ %4429, %resize.i51401 ], [ %len.addr.314, %resize.i51415 ], [ %len.addr.314, %resize.i51430 ], [ %4731, %resize.i51662 ], [ %len.addr.326, %resize.i51678 ], [ %len.addr.326, %resize.i51693 ], [ %len.addr.326, %resize.i51708 ], [ %len.addr.326, %resize.i51723 ], [ %len.addr.326, %resize.i51738 ], [ %len.addr.326, %resize.i51754 ], [ %4956, %resize.i51937 ], [ %4965, %resize.i51953 ], [ %4965, %resize.i51968 ], [ %4970, %resize.i51983 ], [ %4970, %resize.i51998 ], [ %5025, %resize.i52012 ], [ %5026, %resize.i52027 ], [ %5033, %resize.i52042 ], [ %5026, %resize.i52057 ], [ %stack_len36507, %resize.i52104 ], [ %5148, %resize.i52119 ], [ %5148, %resize.i52134 ], [ %5189, %resize.i52150 ], [ %5189, %resize.i52166 ], [ %5234, %resize.i52180 ], [ %5238, %resize.i52196 ], [ %5300, %resize.i52226 ], [ %5354, %return.loopexit52642.split.loop.exit53114 ], [ %5355, %return.loopexit52642.split.loop.exit53120 ], [ %5356, %return.loopexit52642.split.loop.exit53207 ], [ %5357, %return.loopexit52642.split.loop.exit53243 ], [ %5358, %return.loopexit52642.split.loop.exit53267 ], [ %5359, %return.loopexit52642.split.loop.exit53357 ], [ %len.addr.357, %dynamic_jump_table ], [ %len.addr.143.ph, %resize.i49783 ], [ %1377, %OP2813.JUMPDEST ], [ %len.addr.285.ph, %resize.i50765 ], [ %3675, %OP7876.JUMPDEST ], [ %len.addr.356.ph, %OP10453.PUSH1 ], [ %len.addr.354.ph, %OP10431.DUP3 ], [ %len.addr.330.ph, %resize.i51921 ], [ %4907, %resize.i51906 ], [ %len.addr.18.ph, %resize.i49327 ], [ %183, %resize.i49313 ], [ %5276, %resize.i52212 ], [ %len.addr.349.ph, %OP10336.MLOAD.contd ], [ %len.addr.298.ph, %resize.i51052 ], [ %4026, %resize.i51037 ], [ %len.addr.321.ph, %resize.i51646 ], [ %4654, %resize.i51631 ], [ %len.addr.339.ph, %resize.i52088 ], [ %5100, %resize.i52073 ], [ %1444, %OP2961.JUMPDEST ], [ %len.addr.357, %OP2963.MLOAD.contd ], [ %1553, %OP3239.JUMPDEST ], [ %1554, %OP3247.PUSH1 ], [ %1558, %OP3252.PUSH1 ], [ %1558, %OP3256.CALLER ], [ %1554, %OP3259.SWAP1 ], [ %1553, %OP3262.SWAP1 ], [ %1553, %OP3264.SLOAD ], [ %1567, %OP3270.JUMPDEST ], [ %1568, %OP3278.PUSH1 ], [ %1571, %OP3283.PUSH1 ], [ %1571, %OP3287.CALLER ], [ %1568, %OP3290.SWAP1 ], [ %1567, %OP3293.SWAP1 ], [ %1579, %OP3295.SSTORE ], [ %len.addr.357, %OP3453.JUMPDEST ], [ %len.addr.357, %OP3897.JUMPDEST ], [ %2051, %OP4426.JUMPDEST ], [ %2052, %OP4432.PUSH1 ], [ %2053, %OP4437.PUSH1 ], [ %2051, %OP4442.SWAP4 ], [ %2052, %OP4446.DUP1 ], [ %2052, %OP4447.MLOAD.contd ], [ %2052, %OP4451.SWAP1 ], [ %2064, %OP4452.MLOAD.contd ], [ %2066, %OP4465.PUSH1 ], [ %2066, %OP4467.MLOAD.contd ], [ %2066, %OP4471.SWAP1 ], [ %2064, %OP4472.MLOAD.contd ], [ %.pre-phi54302, %OP4740.JUMPDEST ], [ %2176, %OP4748.JUMPDEST ], [ %2181, %OP4758.JUMPDEST ], [ %2181, %OP4761.MLOAD.contd ], [ %2181, %OP4765.SWAP1 ], [ %len.addr.357, %OP4766.MLOAD.contd ], [ %2181, %OP4779.PUSH1 ], [ %2181, %OP4781.MLOAD.contd ], [ %2181, %OP4785.SWAP1 ], [ %len.addr.357, %OP4786.MLOAD.contd ], [ %2279, %OP4987.JUMPDEST ], [ %len.addr.357, %OP4995.PUSH1 ], [ %len.addr.357, %OP5000.PUSH1 ], [ %2278, %OP5004.DUP1 ], [ %len.addr.357, %OP5006.PUSH32 ], [ %2281, %OP5013.PUSH1 ], [ %3004, %OP6608.JUMPDEST ], [ %3003, %OP6625.MLOAD.contd ], [ %3004, %OP6631.DUP1 ], [ %3013, %OP6639.PUSH1 ], [ %3004, %OP6647.PUSH1 ], [ %3004, %OP6654.POP ], [ %3003, %OP6658.MLOAD.contd ], [ %3003, %OP6665.PUSH1 ], [ %3003, %OP6668.PUSH32 ], [ %3024, %OP6679.JUMPDEST ], [ %3024, %OP6682.POP ], [ %3327, %OP7322.JUMPDEST ], [ %len.addr.357, %OP7324.MLOAD.contd ], [ %3561, %OP7670.JUMPDEST ], [ %3563, %OP7680.MLOAD.contd ], [ %3561, %OP7685.PUSH1 ], [ %len.addr.357, %OP7691.MLOAD.contd ], [ %len.addr.291, %OP8124.PUSH1 ], [ %3967, %OP8379.JUMPDEST ], [ %3969, %OP8388.PUSH1 ], [ %3970, %OP8393.PUSH1 ], [ %3972, %OP8398.DUP1 ], [ %3970, %OP8400.PUSH1 ], [ %3972, %OP8406.DUP3 ], [ %3972, %OP8407.MLOAD.contd ], [ %3970, %OP8413.DUP1 ], [ %3969, %OP8420.SWAP4 ], [ %3969, %OP8427.PUSH1 ], [ %3967, %OP8433.PUSH1 ], [ %3969, %OP8440.PUSH1 ], [ %3970, %OP8447.DUP2 ], [ %3969, %OP8448.MLOAD.contd ], [ %3966, %OP8457.PUSH1 ], [ %3967, %OP8463.DUP1 ], [ %3965, %OP8464.MLOAD.contd ], [ %4273, %OP8864.JUMPDEST ], [ %4275, %OP8872.PUSH1 ], [ %4278, %OP8877.PUSH1 ], [ %4278, %OP8881.DUP7 ], [ %4275, %OP8884.SWAP1 ], [ %4276, %OP8887.DUP1 ], [ %4278, %OP8890.DUP1 ], [ %4275, %OP8892.PUSH32 ], [ %4275, %OP8898.MLOAD ], [ %len.addr.357, %OP8898.MLOAD.contd ], [ %4454, %OP9230.MLOAD.contd ], [ %4454, %OP9237.MLOAD.contd ], [ %4808, %OP9636.PUSH1 ], [ %4803, %OP9646.DUP1 ], [ %4808, %OP9649.DUP1 ], [ %4802, %OP9651.PUSH32 ], [ %len.addr.327, %OP9657.MLOAD.contd ], [ %4876, %OP9684.PUSH1 ], [ %len.addr.343, %OP10181.JUMPDEST ], [ %len.addr.291, %resize.i50899 ], [ %len.addr.291, %resize.i50914 ], [ %4454, %resize.i51446 ], [ %4466, %resize.i51462 ], [ %4467, %resize.i51478 ], [ %4467, %resize.i51493 ], [ %4466, %resize.i51508 ], [ %4454, %resize.i51523 ], [ %len.addr.316, %resize.i51538 ], [ %4454, %resize.i51553 ], [ %4466, %resize.i51569 ], [ %4454, %resize.i51584 ], [ %4565, %resize.i51599 ], [ %len.addr.316, %resize.i51615 ], [ %4800, %resize.i51768 ], [ %4802, %resize.i51783 ], [ %4808, %resize.i51798 ], [ %4802, %resize.i51813 ], [ %4802, %resize.i51829 ], [ %4850, %resize.i51845 ], [ %4850, %resize.i51860 ], [ %len.addr.328, %resize.i51875 ], [ %4876, %resize.i51890 ], [ %len.addr.357, %return.loopexit55261 ]
  %5360 = phi i8 [ %spec.select36510, %OP417.JUMPDEST ], [ %1310, %OP2731.JUMPDEST ], [ %5330, %OP10409.JUMPDEST ], [ %5303, %OP10361.JUMPDEST ], [ %5314, %OP10380.PUSH1 ], [ %5326, %OP10397.DUP3 ], [ %5272, %OP10313.JUMPDEST ], [ %5237, %OP10264.JUMPDEST ], [ %5249, %OP10283.PUSH1 ], [ %5268, %OP10301.MLOAD.contd ], [ %5214, %OP10210.JUMPDEST ], [ %5216, %OP10212.MLOAD.contd ], [ %5219, %OP10216.PUSH1 ], [ %5220, %OP10223.DUP5 ], [ %5222, %OP10224.MLOAD.contd ], [ %5223, %OP10229.DUP5 ], [ %spec.select36669, %OP9797.MLOAD.contd ], [ %4944, %OP9770.DUP1 ], [ %4946, %OP9774.MLOAD.contd ], [ %4951, %OP9781.SUB ], [ %5230, %OP10252.DUP2 ], [ %5232, %OP10255.MLOAD.contd ], [ %spec.select36674, %OP10204.MLOAD.contd ], [ %5130, %OP10073.JUMPDEST ], [ %5133, %OP10080.SUB ], [ %5136, %OP10084.MLOAD.contd ], [ %5139, %OP10088.MLOAD.contd ], [ %5142, %OP10095.POP ], [ %5146, %OP10109.MLOAD.contd ], [ 32, %suspend ], [ %5095, %OP10029.JUMPDEST ], [ %5097, %OP10038.MLOAD.contd ], [ %5081, %OP9998.PUSH1 ], [ %5082, %OP10000.MLOAD.contd ], [ %5084, %OP10004.PUSH1 ], [ %5086, %OP10009.PUSH1 ], [ %5088, %OP10014.PUSH32 ], [ %5089, %OP10019.SWAP1 ], [ %spec.select36673, %OP10020.MLOAD.contd ], [ %5037, %OP9923.PUSH1 ], [ %5058, %OP9933.SWAP1 ], [ %5059, %OP9935.SLOAD ], [ %5063, %OP9941.PUSH1 ], [ %5064, %OP9942.MLOAD.contd ], [ %5067, %OP9946.PUSH1 ], [ %5068, %OP9957.PUSH1 ], [ %5070, %OP9960.PUSH1 ], [ %5072, %OP9967.PUSH1 ], [ %spec.select36672, %OP9973.MLOAD.contd ], [ %5009, %OP9867.JUMPDEST ], [ %5010, %OP9872.PUSH1 ], [ %5013, %OP9873.MLOAD.contd ], [ %5016, %OP9877.PUSH1 ], [ %5017, %OP9888.PUSH1 ], [ %5019, %OP9891.PUSH1 ], [ %5021, %OP9898.PUSH1 ], [ %spec.select36671, %OP9904.MLOAD.contd ], [ %4998, %OP9843.JUMPDEST ], [ %5003, %OP9852.DUP1 ], [ %spec.select36670, %OP9864.PUSH1 ], [ %4893, %OP9698.PUSH1 ], [ %4894, %OP9699.MLOAD.contd ], [ %4899, %OP9703.PUSH1 ], [ %4901, %OP9714.DUP4 ], [ %4902, %OP9717.MLOAD.contd ], [ %4904, %OP9720.PUSH1 ], [ %spec.select36668, %OP9614.MLOAD.contd ], [ %4725, %OP9570.JUMPDEST ], [ %spec.select36667, %OP9584.PUSH1 ], [ %4713, %OP9554.JUMPDEST ], [ %4702, %OP9528.JUMPDEST ], [ %4704, %OP9538.MLOAD.contd ], [ %spec.select36665, %OP9551.PUSH1 ], [ %4691, %OP9508.DUP1 ], [ %4693, %OP9512.MLOAD.contd ], [ %4698, %OP9519.SUB ], [ %4631, %OP9418.JUMPDEST ], [ %4636, %OP9421.MLOAD.contd ], [ %4639, %OP9429.PUSH1 ], [ %4641, %OP9437.PUSH1 ], [ %4646, %OP9442.PUSH1 ], [ %4648, %OP9452.DUP4 ], [ %4649, %OP9455.MLOAD.contd ], [ %4651, %OP9458.PUSH1 ], [ %3610, %OP7788.JUMPDEST ], [ %3674, %OP7872.PUSH1 ], [ %3653, %OP7851.PUSH2 ], [ %4611, %OP9356.PUSH1 ], [ %4613, %OP9357.MLOAD.contd ], [ %4616, %OP9361.PUSH1 ], [ %4617, %OP9372.PUSH1 ], [ %4619, %OP9375.PUSH1 ], [ %4621, %OP9382.PUSH1 ], [ %spec.select36664, %OP9388.MLOAD.contd ], [ %4595, %OP9312.PUSH1 ], [ %4597, %OP9313.MLOAD.contd ], [ %4600, %OP9317.PUSH1 ], [ %4601, %OP9328.PUSH1 ], [ %4603, %OP9331.PUSH1 ], [ %4605, %OP9338.PUSH1 ], [ %spec.select36663, %OP9344.MLOAD.contd ], [ %4449, %OP9215.PUSH1 ], [ %4451, %OP9218.SWAP2 ], [ %4438, %OP9197.PUSH1 ], [ %4439, %OP9200.SLOAD ], [ %3597, %OP7756.PUSH1 ], [ %3598, %OP7759.SLOAD ], [ %4410, %OP9121.JUMPDEST ], [ %4413, %OP9133.MLOAD.contd ], [ %4415, %OP9140.PUSH1 ], [ %4419, %OP9145.PUSH1 ], [ %4421, %OP9154.PUSH1 ], [ %4424, %OP9162.MLOAD.contd ], [ %4425, %OP9170.SWAP1 ], [ %3898, %OP8187.PUSH1 ], [ %3900, %OP8188.MLOAD.contd ], [ %3903, %OP8192.PUSH1 ], [ %3904, %OP8203.PUSH1 ], [ %3906, %OP8206.PUSH1 ], [ %3908, %OP8213.PUSH1 ], [ %spec.select36657, %OP8219.MLOAD.contd ], [ %4391, %OP9067.JUMPDEST ], [ %4394, %OP9079.MLOAD.contd ], [ %4396, %OP9086.PUSH1 ], [ %4400, %OP9091.PUSH1 ], [ %4402, %OP9100.PUSH1 ], [ %4405, %OP9108.MLOAD.contd ], [ %4406, %OP9116.SWAP1 ], [ %3952, %OP8342.PUSH1 ], [ %3953, %OP8344.MLOAD.contd ], [ %3955, %OP8348.PUSH1 ], [ %3957, %OP8353.PUSH1 ], [ %3959, %OP8358.PUSH32 ], [ %3960, %OP8363.SWAP1 ], [ %spec.select36658, %OP8364.MLOAD.contd ], [ %4293, %OP8917.JUMPDEST ], [ %4298, %OP8920.MLOAD.contd ], [ %4301, %OP8930.PUSH20 ], [ %4304, %OP8938.DUP10 ], [ %4306, %OP8944.PUSH1 ], [ %4308, %OP8950.PUSH1 ], [ %4310, %OP8956.PUSH1 ], [ %4312, %OP8962.PUSH1 ], [ %4313, %OP8969.DUP4 ], [ %4316, %OP8970.MLOAD.contd ], [ %4318, %OP8979.PUSH2 ], [ %4319, %OP8986.DUP1 ], [ %4321, %OP8987.MLOAD.contd ], [ %4255, %OP8808.JUMPDEST ], [ %4258, %OP8817.MLOAD.contd ], [ %4261, %OP8824.PUSH1 ], [ %4263, %OP8831.PUSH1 ], [ %4265, %OP8836.PUSH1 ], [ %4268, %OP8844.MLOAD.contd ], [ %4269, %OP8852.SWAP1 ], [ %4270, %OP8855.DUP1 ], [ %4272, %OP8856.MLOAD.contd ], [ %4233, %OP8750.JUMPDEST ], [ %4238, %OP8753.MLOAD.contd ], [ %4240, %OP8761.PUSH1 ], [ %4241, %OP8768.DUP3 ], [ %4244, %OP8769.MLOAD.contd ], [ %4246, %OP8778.PUSH1 ], [ %4248, %OP8785.PUSH1 ], [ %4251, %OP8789.MLOAD.contd ], [ %4196, %OP8713.PUSH1 ], [ %4207, %OP8732.PUSH1 ], [ %4229, %OP8744.KECCAK256 ], [ %4230, %OP8745.SLOAD ], [ %3436, %OP7444.PUSH1 ], [ %3458, %OP7457.SWAP2 ], [ %3459, %OP7461.DUP6 ], [ %3492, %OP7470.MLOAD.contd ], [ %3416, %OP7411.PUSH1 ], [ %spec.select36649, %OP7424.MLOAD.contd ], [ %3372, %OP7367.PUSH1 ], [ %spec.select36648, %OP7380.MLOAD.contd ], [ %spec.select36662, %OP8672.MLOAD.contd ], [ %4097, %OP8628.JUMPDEST ], [ %spec.select36661, %OP8642.PUSH1 ], [ %4085, %OP8612.JUMPDEST ], [ %4074, %OP8586.JUMPDEST ], [ %4076, %OP8596.MLOAD.contd ], [ %spec.select36659, %OP8609.PUSH1 ], [ %4063, %OP8566.DUP1 ], [ %4065, %OP8570.MLOAD.contd ], [ %4070, %OP8577.SUB ], [ %4003, %OP8470.JUMPDEST ], [ %4008, %OP8479.MLOAD.contd ], [ %4011, %OP8487.PUSH1 ], [ %4013, %OP8495.PUSH1 ], [ %4018, %OP8500.PUSH1 ], [ %4020, %OP8510.DUP4 ], [ %4021, %OP8513.MLOAD.contd ], [ %4023, %OP8516.PUSH1 ], [ %3523, %OP7561.PUSH1 ], [ %3525, %OP7562.MLOAD.contd ], [ %3528, %OP7566.PUSH1 ], [ %3529, %OP7577.PUSH1 ], [ %3531, %OP7580.PUSH1 ], [ %3533, %OP7587.PUSH1 ], [ %spec.select36651, %OP7593.MLOAD.contd ], [ %3509, %OP7517.PUSH1 ], [ %3511, %OP7518.MLOAD.contd ], [ %3514, %OP7522.PUSH1 ], [ %3515, %OP7533.PUSH1 ], [ %3517, %OP7536.PUSH1 ], [ %3519, %OP7543.PUSH1 ], [ %spec.select36650, %OP7549.MLOAD.contd ], [ %3913, %OP8233.JUMPDEST ], [ %3918, %OP8236.MLOAD.contd ], [ %3921, %OP8246.PUSH20 ], [ %3924, %OP8254.DUP10 ], [ %3926, %OP8260.PUSH1 ], [ %3928, %OP8266.PUSH1 ], [ %3930, %OP8272.PUSH1 ], [ %3932, %OP8278.PUSH1 ], [ %3933, %OP8285.DUP4 ], [ %3936, %OP8286.MLOAD.contd ], [ %3938, %OP8295.PUSH2 ], [ %3939, %OP8302.DUP1 ], [ %3941, %OP8303.MLOAD.contd ], [ %3803, %OP8074.PUSH1 ], [ %3806, %OP8075.MLOAD.contd ], [ %3809, %OP8079.PUSH1 ], [ %3810, %OP8090.PUSH1 ], [ %3812, %OP8093.PUSH1 ], [ %3814, %OP8100.PUSH1 ], [ %spec.select36656, %OP8106.MLOAD.contd ], [ %3502, %OP7501.PUSH1 ], [ %3503, %OP7504.SLOAD ], [ %3787, %OP8027.PUSH1 ], [ %3789, %OP8028.MLOAD.contd ], [ %3792, %OP8032.PUSH1 ], [ %3793, %OP8043.PUSH1 ], [ %3795, %OP8046.PUSH1 ], [ %3797, %OP8053.PUSH1 ], [ %spec.select36655, %OP8059.MLOAD.contd ], [ %3769, %OP7982.PUSH1 ], [ %3770, %OP7984.MLOAD.contd ], [ %3772, %OP7988.PUSH1 ], [ %3774, %OP7993.PUSH1 ], [ %3776, %OP7998.PUSH32 ], [ %3777, %OP8003.SWAP1 ], [ %spec.select36654, %OP8004.MLOAD.contd ], [ %3740, %OP7943.PUSH1 ], [ %3762, %OP7955.KECCAK256 ], [ %3763, %OP7956.SLOAD ], [ %3602, %OP7770.JUMPDEST ], [ %3607, %OP7774.PUSH32 ], [ %3574, %OP7709.PUSH1 ], [ %3575, %OP7711.MLOAD.contd ], [ %3577, %OP7715.PUSH1 ], [ %3579, %OP7720.PUSH1 ], [ %3581, %OP7725.PUSH32 ], [ %3582, %OP7730.SWAP1 ], [ %spec.select36653, %OP7731.MLOAD.contd ], [ %3542, %OP7610.PUSH1 ], [ %3544, %OP7611.MLOAD.contd ], [ %3547, %OP7615.PUSH1 ], [ %3548, %OP7626.PUSH1 ], [ %3550, %OP7629.PUSH1 ], [ %3552, %OP7636.PUSH1 ], [ %spec.select36652, %OP7642.MLOAD.contd ], [ %3307, %OP7270.JUMPDEST ], [ %3314, %OP7279.PUSH1 ], [ %3316, %OP7280.MLOAD.contd ], [ %3319, %OP7284.PUSH1 ], [ %3320, %OP7295.PUSH1 ], [ %3322, %OP7298.PUSH1 ], [ %3324, %OP7305.PUSH1 ], [ %spec.select36647, %OP7311.MLOAD.contd ], [ %3262, %OP7232.JUMPDEST ], [ %3304, %OP7252.MLOAD.contd ], [ %3249, %OP7194.PUSH1 ], [ %3251, %OP7195.MLOAD.contd ], [ %3254, %OP7199.PUSH1 ], [ %3255, %OP7210.PUSH1 ], [ %3257, %OP7213.PUSH1 ], [ %3259, %OP7220.PUSH1 ], [ %spec.select36646, %OP7226.MLOAD.contd ], [ %3228, %OP7147.JUMPDEST ], [ %3235, %OP7156.PUSH1 ], [ %3237, %OP7158.MLOAD.contd ], [ %3239, %OP7162.PUSH1 ], [ %3241, %OP7169.PUSH1 ], [ %3243, %OP7173.PUSH32 ], [ %3244, %OP7178.SWAP1 ], [ %spec.select36645, %OP7179.MLOAD.contd ], [ %3212, %OP7096.PUSH1 ], [ %3215, %OP7097.MLOAD.contd ], [ %3218, %OP7101.PUSH1 ], [ %3219, %OP7112.PUSH1 ], [ %3221, %OP7115.PUSH1 ], [ %3223, %OP7122.PUSH1 ], [ %spec.select36644, %OP7128.MLOAD.contd ], [ %3193, %OP7048.PUSH1 ], [ %3196, %OP7049.MLOAD.contd ], [ %3199, %OP7053.PUSH1 ], [ %3200, %OP7064.PUSH1 ], [ %3202, %OP7067.PUSH1 ], [ %3204, %OP7074.PUSH1 ], [ %spec.select36643, %OP7080.MLOAD.contd ], [ %3170, %OP6996.JUMPDEST ], [ %3176, %OP7007.PUSH1 ], [ %3177, %OP7009.MLOAD.contd ], [ %3179, %OP7013.PUSH1 ], [ %3181, %OP7018.PUSH1 ], [ %3183, %OP7023.PUSH32 ], [ %3184, %OP7028.SWAP1 ], [ %spec.select36642, %OP7029.MLOAD.contd ], [ %3143, %OP6980.PUSH1 ], [ %3165, %OP6990.KECCAK256 ], [ %3166, %OP6991.SLOAD ], [ %3105, %OP6894.JUMPDEST ], [ %3107, %OP6898.PUSH1 ], [ %3119, %OP6900.MLOAD.contd ], [ %3120, %OP6933.DUP2 ], [ %1376, %OP2809.PUSH1 ], [ %3127, %OP6951.PUSH2 ], [ %3130, %OP6955.DIV ], [ %3088, %OP6830.PUSH1 ], [ %3091, %OP6831.MLOAD.contd ], [ %3094, %OP6835.PUSH1 ], [ %3095, %OP6846.PUSH1 ], [ %3097, %OP6849.PUSH1 ], [ %3099, %OP6856.PUSH1 ], [ %spec.select36641, %OP6862.MLOAD.contd ], [ %3069, %OP6782.PUSH1 ], [ %3072, %OP6783.MLOAD.contd ], [ %3075, %OP6787.PUSH1 ], [ %3076, %OP6798.PUSH1 ], [ %3078, %OP6801.PUSH1 ], [ %3080, %OP6808.PUSH1 ], [ %spec.select36640, %OP6814.MLOAD.contd ], [ %3047, %OP6730.JUMPDEST ], [ %3052, %OP6741.PUSH1 ], [ %3053, %OP6743.MLOAD.contd ], [ %3055, %OP6747.PUSH1 ], [ %3057, %OP6752.PUSH1 ], [ %3059, %OP6757.PUSH32 ], [ %3060, %OP6762.SWAP1 ], [ %spec.select36639, %OP6763.MLOAD.contd ], [ %3035, %OP6698.JUMPDEST ], [ %3036, %OP6707.PUSH1 ], [ %3038, %OP6712.PUSH1 ], [ %3040, %OP6716.SWAP4 ], [ %3041, %OP6722.SWAP2 ], [ %3043, %OP6726.KECCAK256 ], [ %3044, %OP6727.SLOAD ], [ %spec.select36638, %OP6598.PUSH1 ], [ %2989, %OP6577.JUMPDEST ], [ %2994, %OP6589.POP ], [ %2969, %OP6515.JUMPDEST ], [ %2974, %OP6526.PUSH1 ], [ %2975, %OP6528.MLOAD.contd ], [ %2977, %OP6532.PUSH1 ], [ %2979, %OP6537.PUSH1 ], [ %2981, %OP6542.PUSH32 ], [ %2982, %OP6547.SWAP1 ], [ %spec.select36637, %OP6548.MLOAD.contd ], [ %2953, %OP6466.PUSH1 ], [ %2956, %OP6467.MLOAD.contd ], [ %2959, %OP6471.PUSH1 ], [ %2960, %OP6482.PUSH1 ], [ %2962, %OP6485.PUSH1 ], [ %2964, %OP6492.PUSH1 ], [ %spec.select36636, %OP6498.MLOAD.contd ], [ %2934, %OP6418.PUSH1 ], [ %2937, %OP6419.MLOAD.contd ], [ %2940, %OP6423.PUSH1 ], [ %2941, %OP6434.PUSH1 ], [ %2943, %OP6437.PUSH1 ], [ %2945, %OP6444.PUSH1 ], [ %spec.select36635, %OP6450.MLOAD.contd ], [ %2911, %OP6366.JUMPDEST ], [ %2917, %OP6377.PUSH1 ], [ %2918, %OP6379.MLOAD.contd ], [ %2920, %OP6383.PUSH1 ], [ %2922, %OP6388.PUSH1 ], [ %2924, %OP6393.PUSH32 ], [ %2925, %OP6398.SWAP1 ], [ %spec.select36634, %OP6399.MLOAD.contd ], [ %2908, %OP6359.JUMPDEST ], [ %2888, %OP6310.JUMPDEST ], [ %2894, %OP6321.PUSH1 ], [ %2895, %OP6323.MLOAD.contd ], [ %2897, %OP6327.PUSH1 ], [ %2899, %OP6332.PUSH1 ], [ %2901, %OP6337.PUSH32 ], [ %2902, %OP6342.SWAP1 ], [ %spec.select36633, %OP6343.MLOAD.contd ], [ %2864, %OP6249.JUMPDEST ], [ %2871, %OP6258.PUSH1 ], [ %2873, %OP6259.MLOAD.contd ], [ %2876, %OP6263.PUSH1 ], [ %2877, %OP6274.PUSH1 ], [ %2879, %OP6277.PUSH1 ], [ %2881, %OP6284.PUSH1 ], [ %spec.select36632, %OP6290.MLOAD.contd ], [ %2853, %OP6219.JUMPDEST ], [ %2858, %OP6223.PUSH32 ], [ %2859, %OP6237.PUSH1 ], [ %2861, %OP6238.MLOAD.contd ], [ %2839, %OP6181.PUSH1 ], [ %2841, %OP6182.MLOAD.contd ], [ %2844, %OP6186.PUSH1 ], [ %2845, %OP6197.PUSH1 ], [ %2847, %OP6200.PUSH1 ], [ %2849, %OP6207.PUSH1 ], [ %spec.select36631, %OP6213.MLOAD.contd ], [ %2818, %OP6134.JUMPDEST ], [ %2825, %OP6143.PUSH1 ], [ %2827, %OP6145.MLOAD.contd ], [ %2829, %OP6149.PUSH1 ], [ %2831, %OP6156.PUSH1 ], [ %2833, %OP6160.PUSH32 ], [ %2834, %OP6165.SWAP1 ], [ %spec.select36630, %OP6166.MLOAD.contd ], [ %2813, %OP6126.PUSH1 ], [ %2814, %OP6129.SLOAD ], [ %2792, %OP6086.JUMPDEST ], [ %2797, %OP6090.PUSH32 ], [ %2803, %OP6105.MLOAD.contd ], [ %2778, %OP6048.PUSH1 ], [ %2780, %OP6049.MLOAD.contd ], [ %2783, %OP6053.PUSH1 ], [ %2784, %OP6064.PUSH1 ], [ %2786, %OP6067.PUSH1 ], [ %2788, %OP6074.PUSH1 ], [ %spec.select36629, %OP6080.MLOAD.contd ], [ %2757, %OP6001.JUMPDEST ], [ %2764, %OP6010.PUSH1 ], [ %2766, %OP6012.MLOAD.contd ], [ %2768, %OP6016.PUSH1 ], [ %2770, %OP6023.PUSH1 ], [ %2772, %OP6027.PUSH32 ], [ %2773, %OP6032.SWAP1 ], [ %spec.select36628, %OP6033.MLOAD.contd ], [ %2737, %OP5946.PUSH1 ], [ %2740, %OP5947.MLOAD.contd ], [ %2743, %OP5951.PUSH1 ], [ %2744, %OP5962.PUSH1 ], [ %2746, %OP5965.PUSH1 ], [ %2748, %OP5972.PUSH1 ], [ %spec.select36627, %OP5978.MLOAD.contd ], [ %2718, %OP5898.PUSH1 ], [ %2721, %OP5899.MLOAD.contd ], [ %2724, %OP5903.PUSH1 ], [ %2725, %OP5914.PUSH1 ], [ %2727, %OP5917.PUSH1 ], [ %2729, %OP5924.PUSH1 ], [ %spec.select36626, %OP5930.MLOAD.contd ], [ %2695, %OP5844.JUMPDEST ], [ %2700, %OP5857.PUSH1 ], [ %2701, %OP5859.MLOAD.contd ], [ %2703, %OP5863.PUSH1 ], [ %2705, %OP5868.PUSH1 ], [ %2707, %OP5873.PUSH32 ], [ %2708, %OP5878.SWAP1 ], [ %spec.select36625, %OP5879.MLOAD.contd ], [ %2674, %OP5793.JUMPDEST ], [ %2679, %OP5806.PUSH1 ], [ %2680, %OP5808.MLOAD.contd ], [ %2682, %OP5812.PUSH1 ], [ %2684, %OP5817.PUSH1 ], [ %2686, %OP5822.PUSH32 ], [ %2687, %OP5827.SWAP1 ], [ %spec.select36624, %OP5828.MLOAD.contd ], [ %2653, %OP5738.JUMPDEST ], [ %2659, %OP5749.PUSH1 ], [ %2660, %OP5751.MLOAD.contd ], [ %2662, %OP5755.PUSH1 ], [ %2664, %OP5760.PUSH1 ], [ %2666, %OP5765.PUSH32 ], [ %2667, %OP5770.SWAP1 ], [ %spec.select36623, %OP5771.MLOAD.contd ], [ %2650, %OP5731.JUMPDEST ], [ %2622, %OP5660.JUMPDEST ], [ %2624, %OP5664.PUSH1 ], [ %2636, %OP5666.MLOAD.contd ], [ %2637, %OP5699.DUP2 ], [ %2644, %OP5717.PUSH2 ], [ %2647, %OP5721.DIV ], [ %2619, %OP5653.JUMPDEST ], [ %2615, %OP5647.PUSH1 ], [ %2616, %OP5650.SLOAD ], [ %2591, %OP5577.PUSH1 ], [ %2594, %OP5578.MLOAD.contd ], [ %2597, %OP5582.PUSH1 ], [ %2598, %OP5593.PUSH1 ], [ %2600, %OP5596.PUSH1 ], [ %2602, %OP5603.PUSH1 ], [ %spec.select36622, %OP5609.MLOAD.contd ], [ %2572, %OP5529.PUSH1 ], [ %2575, %OP5530.MLOAD.contd ], [ %2578, %OP5534.PUSH1 ], [ %2579, %OP5545.PUSH1 ], [ %2581, %OP5548.PUSH1 ], [ %2583, %OP5555.PUSH1 ], [ %spec.select36621, %OP5561.MLOAD.contd ], [ %2549, %OP5477.JUMPDEST ], [ %2555, %OP5488.PUSH1 ], [ %2556, %OP5490.MLOAD.contd ], [ %2558, %OP5494.PUSH1 ], [ %2560, %OP5499.PUSH1 ], [ %2562, %OP5504.PUSH32 ], [ %2563, %OP5509.SWAP1 ], [ %spec.select36620, %OP5510.MLOAD.contd ], [ %2538, %OP5459.JUMPDEST ], [ %2541, %OP5463.PUSH32 ], [ %2546, %OP5470.MLOAD.contd ], [ %2518, %OP5412.JUMPDEST ], [ %2525, %OP5421.PUSH1 ], [ %2527, %OP5422.MLOAD.contd ], [ %2530, %OP5426.PUSH1 ], [ %2531, %OP5437.PUSH1 ], [ %2533, %OP5440.PUSH1 ], [ %2535, %OP5447.PUSH1 ], [ %spec.select36619, %OP5453.MLOAD.contd ], [ %2513, %OP5402.PUSH1 ], [ %2514, %OP5405.SLOAD ], [ %2499, %OP5370.JUMPDEST ], [ %2479, %OP5312.JUMPDEST ], [ %2484, %OP5323.PUSH1 ], [ %2485, %OP5325.MLOAD.contd ], [ %2487, %OP5329.PUSH1 ], [ %2489, %OP5334.PUSH1 ], [ %2491, %OP5339.PUSH32 ], [ %2492, %OP5344.SWAP1 ], [ %spec.select36618, %OP5345.MLOAD.contd ], [ %2465, %OP5282.JUMPDEST ], [ %2470, %OP5286.PUSH32 ], [ %2476, %OP5301.MLOAD.contd ], [ %2451, %OP5244.PUSH1 ], [ %2453, %OP5245.MLOAD.contd ], [ %2456, %OP5249.PUSH1 ], [ %2457, %OP5260.PUSH1 ], [ %2459, %OP5263.PUSH1 ], [ %2461, %OP5270.PUSH1 ], [ %spec.select36617, %OP5276.MLOAD.contd ], [ %2430, %OP5197.JUMPDEST ], [ %2437, %OP5206.PUSH1 ], [ %2439, %OP5208.MLOAD.contd ], [ %2441, %OP5212.PUSH1 ], [ %2443, %OP5219.PUSH1 ], [ %2445, %OP5223.PUSH32 ], [ %2446, %OP5228.SWAP1 ], [ %spec.select36616, %OP5229.MLOAD.contd ], [ %2343, %OP5131.PUSH1 ], [ %2344, %OP5135.DUP1 ], [ %2347, %OP5137.PUSH32 ], [ %2357, %OP5146.SWAP2 ], [ %2358, %OP5150.DUP6 ], [ %2391, %OP5159.MLOAD.contd ], [ %2311, %OP5071.JUMPDEST ], [ %2318, %OP5080.PUSH1 ], [ %2320, %OP5081.MLOAD.contd ], [ %2323, %OP5085.PUSH1 ], [ %2324, %OP5096.PUSH1 ], [ %2326, %OP5099.PUSH1 ], [ %2328, %OP5106.PUSH1 ], [ %spec.select36615, %OP5112.MLOAD.contd ], [ %2293, %OP5027.JUMPDEST ], [ %2298, %OP5040.PUSH1 ], [ %2299, %OP5042.MLOAD.contd ], [ %2301, %OP5046.PUSH1 ], [ %2303, %OP5051.PUSH1 ], [ %2305, %OP5056.PUSH32 ], [ %2306, %OP5061.SWAP1 ], [ %spec.select36614, %OP5062.MLOAD.contd ], [ %2259, %OP4946.JUMPDEST ], [ %2262, %OP4960.POP ], [ %2265, %OP4967.PUSH1 ], [ %2266, %OP4971.DUP1 ], [ %2269, %OP4973.PUSH32 ], [ %2215, %OP4844.JUMPDEST ], [ %2218, %OP4858.POP ], [ %2220, %OP4865.PUSH1 ], [ %2221, %OP4869.SLOAD ], [ %2224, %OP4874.PUSH1 ], [ %2225, %OP4875.MLOAD.contd ], [ %2229, %OP4879.PUSH1 ], [ %2230, %OP4890.PUSH1 ], [ %2232, %OP4893.PUSH1 ], [ %2235, %OP4900.PUSH1 ], [ %spec.select36613, %OP4906.MLOAD.contd ], [ %2198, %OP4804.JUMPDEST ], [ %spec.select36612, %OP4813.PUSH1 ], [ %2161, %OP4702.PUSH1 ], [ %2163, %OP4703.MLOAD.contd ], [ %2166, %OP4707.PUSH1 ], [ %2167, %OP4718.PUSH1 ], [ %2169, %OP4721.PUSH1 ], [ %2171, %OP4728.PUSH1 ], [ %spec.select36611, %OP4734.MLOAD.contd ], [ %2143, %OP4657.PUSH1 ], [ %2145, %OP4658.MLOAD.contd ], [ %2148, %OP4662.PUSH1 ], [ %2149, %OP4673.PUSH1 ], [ %2151, %OP4676.PUSH1 ], [ %2153, %OP4683.PUSH1 ], [ %spec.select36610, %OP4689.MLOAD.contd ], [ %2121, %OP4605.PUSH1 ], [ %2124, %OP4606.MLOAD.contd ], [ %2127, %OP4610.PUSH1 ], [ %2128, %OP4621.PUSH1 ], [ %2130, %OP4624.PUSH1 ], [ %2132, %OP4631.PUSH1 ], [ %spec.select36609, %OP4637.MLOAD.contd ], [ %2103, %OP4549.PUSH1 ], [ %2104, %OP4552.SLOAD ], [ %2106, %OP4557.PUSH1 ], [ %2107, %OP4558.MLOAD.contd ], [ %2110, %OP4562.PUSH1 ], [ %2111, %OP4573.PUSH1 ], [ %2113, %OP4576.PUSH1 ], [ %2115, %OP4583.PUSH1 ], [ %spec.select36608, %OP4589.MLOAD.contd ], [ %2076, %OP4498.JUMPDEST ], [ %2081, %OP4509.PUSH1 ], [ %2082, %OP4511.MLOAD.contd ], [ %2084, %OP4515.PUSH1 ], [ %2086, %OP4520.PUSH1 ], [ %2088, %OP4525.PUSH32 ], [ %2089, %OP4530.SWAP1 ], [ %spec.select36607, %OP4531.MLOAD.contd ], [ %2045, %OP4402.JUMPDEST ], [ %2042, %OP4394.JUMPDEST ], [ %2022, %OP4337.JUMPDEST ], [ %2023, %OP4343.PUSH1 ], [ %2024, %OP4346.PUSH1 ], [ %2025, %OP4349.SLOAD ], [ %2028, %OP4356.PUSH1 ], [ %2030, %OP4357.MLOAD.contd ], [ %2033, %OP4361.PUSH1 ], [ %2034, %OP4372.PUSH1 ], [ %2036, %OP4375.PUSH1 ], [ %2038, %OP4382.PUSH1 ], [ %spec.select36606, %OP4388.MLOAD.contd ], [ %2005, %OP4299.PUSH1 ], [ %2007, %OP4300.MLOAD.contd ], [ %2010, %OP4304.PUSH1 ], [ %2011, %OP4315.PUSH1 ], [ %2013, %OP4318.PUSH1 ], [ %2015, %OP4325.PUSH1 ], [ %spec.select36605, %OP4331.MLOAD.contd ], [ %1990, %OP4255.PUSH1 ], [ %1992, %OP4256.MLOAD.contd ], [ %1995, %OP4260.PUSH1 ], [ %1996, %OP4271.PUSH1 ], [ %1998, %OP4274.PUSH1 ], [ %2000, %OP4281.PUSH1 ], [ %spec.select36604, %OP4287.MLOAD.contd ], [ %1973, %OP4211.PUSH1 ], [ %1976, %OP4212.MLOAD.contd ], [ %1979, %OP4216.PUSH1 ], [ %1980, %OP4227.PUSH1 ], [ %1982, %OP4230.PUSH1 ], [ %1984, %OP4237.PUSH1 ], [ %spec.select36603, %OP4243.MLOAD.contd ], [ %1954, %OP4163.PUSH1 ], [ %1957, %OP4164.MLOAD.contd ], [ %1960, %OP4168.PUSH1 ], [ %1961, %OP4179.PUSH1 ], [ %1963, %OP4182.PUSH1 ], [ %1965, %OP4189.PUSH1 ], [ %spec.select36602, %OP4195.MLOAD.contd ], [ %1936, %OP4107.PUSH1 ], [ %1937, %OP4110.SLOAD ], [ %1939, %OP4115.PUSH1 ], [ %1940, %OP4116.MLOAD.contd ], [ %1943, %OP4120.PUSH1 ], [ %1944, %OP4131.PUSH1 ], [ %1946, %OP4134.PUSH1 ], [ %1948, %OP4141.PUSH1 ], [ %spec.select36601, %OP4147.MLOAD.contd ], [ %1907, %OP4054.JUMPDEST ], [ %1912, %OP4067.PUSH1 ], [ %1913, %OP4069.MLOAD.contd ], [ %1915, %OP4073.PUSH1 ], [ %1917, %OP4078.PUSH1 ], [ %1919, %OP4083.PUSH32 ], [ %1920, %OP4088.SWAP1 ], [ %spec.select36600, %OP4089.MLOAD.contd ], [ %1897, %OP4038.JUMPDEST ], [ %1899, %OP4042.PUSH32 ], [ %1904, %OP4047.MLOAD.contd ], [ %1877, %OP3991.JUMPDEST ], [ %1884, %OP4000.PUSH1 ], [ %1886, %OP4001.MLOAD.contd ], [ %1889, %OP4005.PUSH1 ], [ %1890, %OP4016.PUSH1 ], [ %1892, %OP4019.PUSH1 ], [ %1894, %OP4026.PUSH1 ], [ %spec.select36599, %OP4032.MLOAD.contd ], [ %1856, %OP3940.JUMPDEST ], [ %1861, %OP3953.PUSH1 ], [ %1862, %OP3955.MLOAD.contd ], [ %1864, %OP3959.PUSH1 ], [ %1866, %OP3964.PUSH1 ], [ %1868, %OP3969.PUSH32 ], [ %1869, %OP3974.SWAP1 ], [ %spec.select36598, %OP3975.MLOAD.contd ], [ %1853, %OP3933.JUMPDEST ], [ %1847, %OP3916.JUMPDEST ], [ %1818, %OP3836.JUMPDEST ], [ %1824, %OP3841.PUSH32 ], [ %1825, %OP3849.PUSH1 ], [ %1829, %OP3852.PUSH32 ], [ %1830, %OP3867.PUSH1 ], [ %1834, %OP3870.DUP3 ], [ %1835, %OP3878.PUSH1 ], [ %1839, %OP3881.SWAP1 ], [ %1813, %OP3822.JUMPDEST ], [ %1809, %OP3808.JUMPDEST ], [ %1782, %OP3757.PUSH1 ], [ %1784, %OP3758.MLOAD.contd ], [ %1787, %OP3762.PUSH1 ], [ %1788, %OP3773.PUSH1 ], [ %1790, %OP3776.PUSH1 ], [ %1792, %OP3783.PUSH1 ], [ %spec.select36597, %OP3789.MLOAD.contd ], [ %1768, %OP3713.PUSH1 ], [ %1770, %OP3714.MLOAD.contd ], [ %1773, %OP3718.PUSH1 ], [ %1774, %OP3729.PUSH1 ], [ %1776, %OP3732.PUSH1 ], [ %1778, %OP3739.PUSH1 ], [ %spec.select36596, %OP3745.MLOAD.contd ], [ %1754, %OP3669.PUSH1 ], [ %1756, %OP3670.MLOAD.contd ], [ %1759, %OP3674.PUSH1 ], [ %1760, %OP3685.PUSH1 ], [ %1762, %OP3688.PUSH1 ], [ %1764, %OP3695.PUSH1 ], [ %spec.select36595, %OP3701.MLOAD.contd ], [ %1740, %OP3625.PUSH1 ], [ %1742, %OP3626.MLOAD.contd ], [ %1745, %OP3630.PUSH1 ], [ %1746, %OP3641.PUSH1 ], [ %1748, %OP3644.PUSH1 ], [ %1750, %OP3651.PUSH1 ], [ %spec.select36594, %OP3657.MLOAD.contd ], [ %1721, %OP3570.JUMPDEST ], [ %1726, %OP3581.PUSH1 ], [ %1728, %OP3582.MLOAD.contd ], [ %1731, %OP3586.PUSH1 ], [ %1732, %OP3597.PUSH1 ], [ %1734, %OP3600.PUSH1 ], [ %1736, %OP3607.PUSH1 ], [ %spec.select36593, %OP3613.MLOAD.contd ], [ %1718, %OP3563.JUMPDEST ], [ %1689, %OP3528.PUSH1 ], [ %1690, %OP3532.DUP1 ], [ %1692, %OP3534.PUSH32 ], [ %1702, %OP3542.DUP1 ], [ %1703, %OP3545.DUP3 ], [ %1714, %OP3548.MLOAD.contd ], [ %1655, %OP3466.JUMPDEST ], [ %1663, %OP3477.PUSH1 ], [ %1665, %OP3478.MLOAD.contd ], [ %1668, %OP3482.PUSH1 ], [ %1669, %OP3493.PUSH1 ], [ %1671, %OP3496.PUSH1 ], [ %1673, %OP3503.PUSH1 ], [ %spec.select36592, %OP3509.MLOAD.contd ], [ %1630, %OP3417.JUMPDEST ], [ %spec.select36591, %OP3426.PUSH1 ], [ %1618, %OP3393.JUMPDEST ], [ %1622, %OP3397.PUSH32 ], [ %1627, %OP3409.MLOAD.contd ], [ %1604, %OP3355.PUSH1 ], [ %1606, %OP3356.MLOAD.contd ], [ %1609, %OP3360.PUSH1 ], [ %1610, %OP3371.PUSH1 ], [ %1612, %OP3374.PUSH1 ], [ %1614, %OP3381.PUSH1 ], [ %spec.select36590, %OP3387.MLOAD.contd ], [ %1583, %OP3308.JUMPDEST ], [ %1590, %OP3317.PUSH1 ], [ %1592, %OP3319.MLOAD.contd ], [ %1594, %OP3323.PUSH1 ], [ %1596, %OP3330.PUSH1 ], [ %1598, %OP3334.PUSH32 ], [ %1599, %OP3339.SWAP1 ], [ %spec.select36589, %OP3340.MLOAD.contd ], [ %1529, %OP3163.JUMPDEST ], [ %1531, %OP3171.PUSH1 ], [ %1532, %OP3176.PUSH1 ], [ %1535, %OP3180.CALLER ], [ %1536, %OP3183.SWAP1 ], [ %1537, %OP3186.SWAP1 ], [ %1538, %OP3188.SLOAD ], [ %1541, %OP3194.PUSH1 ], [ %1542, %OP3195.MLOAD.contd ], [ %1545, %OP3199.PUSH1 ], [ %1546, %OP3210.PUSH1 ], [ %1548, %OP3213.PUSH1 ], [ %1550, %OP3220.PUSH1 ], [ %spec.select36588, %OP3226.MLOAD.contd ], [ %1511, %OP3125.PUSH1 ], [ %1514, %OP3126.MLOAD.contd ], [ %1517, %OP3130.PUSH1 ], [ %1518, %OP3141.PUSH1 ], [ %1520, %OP3144.PUSH1 ], [ %1522, %OP3151.PUSH1 ], [ %spec.select36587, %OP3157.MLOAD.contd ], [ %1492, %OP3077.PUSH1 ], [ %1495, %OP3078.MLOAD.contd ], [ %1498, %OP3082.PUSH1 ], [ %1499, %OP3093.PUSH1 ], [ %1501, %OP3096.PUSH1 ], [ %1503, %OP3103.PUSH1 ], [ %spec.select36586, %OP3109.MLOAD.contd ], [ %1473, %OP3029.PUSH1 ], [ %1476, %OP3030.MLOAD.contd ], [ %1479, %OP3034.PUSH1 ], [ %1480, %OP3045.PUSH1 ], [ %1482, %OP3048.PUSH1 ], [ %1484, %OP3055.PUSH1 ], [ %spec.select36585, %OP3061.MLOAD.contd ], [ %1450, %OP2975.JUMPDEST ], [ %1455, %OP2988.PUSH1 ], [ %1456, %OP2990.MLOAD.contd ], [ %1458, %OP2994.PUSH1 ], [ %1460, %OP2999.PUSH1 ], [ %1462, %OP3004.PUSH32 ], [ %1463, %OP3009.SWAP1 ], [ %spec.select36584, %OP3010.MLOAD.contd ], [ %1424, %OP2909.JUMPDEST ], [ %1431, %OP2918.PUSH1 ], [ %1433, %OP2919.MLOAD.contd ], [ %1436, %OP2923.PUSH1 ], [ %1437, %OP2934.PUSH1 ], [ %1439, %OP2937.PUSH1 ], [ %1441, %OP2944.PUSH1 ], [ %spec.select36583, %OP2950.MLOAD.contd ], [ %1422, %OP2904.JUMPDEST ], [ %1400, %OP2845.JUMPDEST ], [ %1405, %OP2858.PUSH1 ], [ %1406, %OP2860.MLOAD.contd ], [ %1408, %OP2864.PUSH1 ], [ %1410, %OP2869.PUSH1 ], [ %1412, %OP2874.PUSH32 ], [ %1413, %OP2879.SWAP1 ], [ %spec.select36582, %OP2880.MLOAD.contd ], [ %spec.select36581, %OP2721.PUSH1 ], [ %spec.select36580, %OP2699.PUSH1 ], [ %spec.select36579, %OP2677.PUSH1 ], [ %spec.select36578, %OP2609.PUSH1 ], [ %spec.select36577, %OP2582.PUSH1 ], [ %spec.select36576, %OP2510.PUSH1 ], [ %spec.select36575, %OP2481.PUSH1 ], [ %spec.select36574, %OP2453.PUSH1 ], [ %spec.select36573, %OP2429.PUSH1 ], [ %spec.select36572, %OP2415.PUSH1 ], [ %spec.select36571, %OP2397.PUSH1 ], [ %spec.select36570, %OP2339.PUSH1 ], [ %1122, %OP2300.PUSH1 ], [ %spec.select36569, %OP2268.PUSH1 ], [ %spec.select36568, %OP2244.PUSH1 ], [ %spec.select36567, %OP2230.PUSH1 ], [ %spec.select36566, %OP2176.PUSH1 ], [ %1035, %OP2133.PUSH1 ], [ %spec.select36565, %OP2101.PUSH1 ], [ %spec.select36564, %OP2077.PUSH1 ], [ %spec.select36563, %OP2063.PUSH1 ], [ %spec.select36562, %OP2033.PUSH1 ], [ %spec.select36561, %OP1997.PUSH1 ], [ %spec.select36560, %OP1975.PUSH1 ], [ %spec.select36559, %OP1953.PUSH1 ], [ %spec.select36558, %OP1931.PUSH1 ], [ %spec.select36557, %OP1904.PUSH1 ], [ %spec.select36556, %OP1877.PUSH1 ], [ %886, %OP1805.JUMPDEST ], [ %888, %OP1820.MLOAD.contd ], [ %889, %OP1826.DUP1 ], [ %892, %OP1834.PUSH1 ], [ %894, %OP1842.PUSH1 ], [ %spec.select36555, %OP1802.PUSH1 ], [ %spec.select36554, %OP1778.PUSH1 ], [ %spec.select36553, %OP1764.PUSH1 ], [ %spec.select36552, %OP1720.PUSH1 ], [ %spec.select36551, %OP1686.PUSH1 ], [ %811, %OP1647.PUSH1 ], [ %spec.select36550, %OP1615.PUSH1 ], [ %spec.select36549, %OP1591.PUSH1 ], [ %spec.select36548, %OP1577.PUSH1 ], [ %spec.select36547, %OP1523.PUSH1 ], [ %spec.select36546, %OP1493.PUSH1 ], [ %spec.select36545, %OP1471.PUSH1 ], [ %spec.select36544, %OP1423.PUSH1 ], [ %spec.select36543, %OP1401.PUSH1 ], [ %spec.select36542, %OP1370.PUSH1 ], [ %spec.select36541, %OP1346.PUSH1 ], [ %spec.select36540, %OP1322.PUSH1 ], [ %spec.select36539, %OP1308.PUSH1 ], [ %spec.select36538, %OP1287.PUSH1 ], [ %spec.select36537, %OP1263.PUSH1 ], [ %spec.select36536, %OP1249.PUSH1 ], [ %spec.select36535, %OP1231.PUSH1 ], [ %spec.select36534, %OP1211.PUSH1 ], [ %spec.select36533, %OP1184.PUSH1 ], [ %spec.select36532, %OP1153.PUSH1 ], [ %560, %OP1114.JUMPDEST ], [ %562, %OP1117.MLOAD.contd ], [ %563, %OP1124.MLOAD ], [ %spec.select36531, %OP1124.MLOAD.contd ], [ %530, %OP1053.PUSH1 ], [ %spec.select36530, %OP1021.PUSH1 ], [ %spec.select36529, %OP997.PUSH1 ], [ %465, %OP948.PUSH1 ], [ %spec.select36528, %OP983.PUSH1 ], [ %spec.select36527, %OP916.PUSH1 ], [ %spec.select36526, %OP892.PUSH1 ], [ %401, %OP843.PUSH1 ], [ %spec.select36525, %OP878.PUSH1 ], [ %spec.select36524, %OP811.PUSH1 ], [ %spec.select36523, %OP787.PUSH1 ], [ %spec.select36522, %OP773.PUSH1 ], [ %spec.select36521, %OP755.PUSH1 ], [ %332, %OP724.JUMPDEST ], [ %334, %OP727.MLOAD.contd ], [ %335, %OP734.MLOAD ], [ %spec.select36520, %OP734.MLOAD.contd ], [ %spec.select36519, %OP706.PUSH1 ], [ %spec.select36518, %OP684.PUSH1 ], [ %spec.select36517, %OP662.PUSH1 ], [ %spec.select36516, %OP626.PUSH1 ], [ %spec.select36515, %OP602.PUSH1 ], [ %261, %OP574.JUMPDEST ], [ %262, %OP577.MLOAD.contd ], [ %263, %OP581.MLOAD ], [ %spec.select36514, %OP581.MLOAD.contd ], [ %249, %OP552.JUMPDEST ], [ %252, %OP555.MLOAD.contd ], [ %253, %OP561.MLOAD ], [ %spec.select36513, %OP561.MLOAD.contd ], [ %spec.select36512, %OP537.PUSH1 ], [ %231, %OP512.JUMPDEST ], [ %spec.select36511, %OP519.MLOAD.contd ], [ %220, %OP492.DUP1 ], [ %222, %OP496.MLOAD.contd ], [ %227, %OP503.SUB ], [ %172, %OP425.JUMPDEST ], [ %175, %OP428.MLOAD.contd ], [ %176, %OP433.DUP4 ], [ %178, %OP434.MLOAD.contd ], [ %179, %OP439.DUP4 ], [ %1355, %OP2788.PUSH2 ], [ %spec.select, %OP8.PUSH1 ], [ %4092, %OP8621.RETURNDATASIZE ], [ %spec.select36660, %OP8625.RETURNDATASIZE ], [ %5176, %OP10146.RETURNDATASIZE ], [ %4720, %OP9563.RETURNDATASIZE ], [ %spec.select36666, %OP9567.RETURNDATASIZE ], [ 88, %OP4912.JUMPDEST ], [ 88, %OP4934.JUMPDEST ], [ %3, %resize.i ], [ %382, %resize.i49343 ], [ %387, %resize.i49358 ], [ %397, %resize.i49373 ], [ %411, %resize.i49388 ], [ %446, %resize.i49404 ], [ %451, %resize.i49419 ], [ %461, %resize.i49434 ], [ %475, %resize.i49449 ], [ %511, %resize.i49465 ], [ %516, %resize.i49480 ], [ %526, %resize.i49495 ], [ %540, %resize.i49510 ], [ %792, %resize.i49526 ], [ %797, %resize.i49541 ], [ %807, %resize.i49556 ], [ %821, %resize.i49571 ], [ %1016, %resize.i49587 ], [ %1021, %resize.i49602 ], [ %1031, %resize.i49617 ], [ %1045, %resize.i49632 ], [ %1103, %resize.i49648 ], [ %1108, %resize.i49663 ], [ %1118, %resize.i49678 ], [ %1132, %resize.i49693 ], [ %1314, %resize.i49709 ], [ %1337, %resize.i49724 ], [ %1347, %resize.i49739 ], [ %1366, %resize.i49754 ], [ %1374, %resize.i49768 ], [ %1625, %resize.i49799 ], [ %1682, %resize.i49813 ], [ %1686, %resize.i49828 ], [ %1701, %resize.i49843 ], [ %1712, %resize.i49859 ], [ %1804, %resize.i49875 ], [ %1902, %resize.i49891 ], [ %1931, %resize.i49905 ], [ %1935, %resize.i49920 ], [ %2098, %resize.i49934 ], [ %2102, %resize.i49949 ], [ %2336, %resize.i49963 ], [ %2340, %resize.i49978 ], [ %2356, %resize.i49993 ], [ %2367, %resize.i50009 ], [ %2377, %resize.i50024 ], [ %2387, %resize.i50040 ], [ %2397, %resize.i50056 ], [ %2408, %resize.i50071 ], [ %2418, %resize.i50086 ], [ %2428, %resize.i50101 ], [ %2473, %resize.i50117 ], [ %2508, %resize.i50131 ], [ %2512, %resize.i50146 ], [ %2544, %resize.i50162 ], [ %2610, %resize.i50176 ], [ %2614, %resize.i50191 ], [ %2800, %resize.i50207 ], [ %2808, %resize.i50221 ], [ %2812, %resize.i50236 ], [ %3137, %resize.i50250 ], [ %3141, %resize.i50265 ], [ %3152, %resize.i50280 ], [ %3162, %resize.i50295 ], [ %3267, %resize.i50311 ], [ %3278, %resize.i50326 ], [ %3290, %resize.i50341 ], [ %3300, %resize.i50357 ], [ %3339, %resize.i50373 ], [ %3350, %resize.i50388 ], [ %3361, %resize.i50403 ], [ %3370, %resize.i50418 ], [ %3376, %resize.i50434 ], [ %3383, %resize.i50450 ], [ %3394, %resize.i50465 ], [ %3405, %resize.i50480 ], [ %3414, %resize.i50495 ], [ %3420, %resize.i50511 ], [ %3430, %resize.i50525 ], [ %3435, %resize.i50540 ], [ %3446, %resize.i50555 ], [ %3456, %resize.i50570 ], [ %3468, %resize.i50586 ], [ %3478, %resize.i50601 ], [ %3488, %resize.i50617 ], [ %3497, %resize.i50631 ], [ %3501, %resize.i50646 ], [ %3592, %resize.i50660 ], [ %3596, %resize.i50675 ], [ %3614, %resize.i50691 ], [ %3635, %resize.i50706 ], [ %3645, %resize.i50721 ], [ %3664, %resize.i50736 ], [ %3672, %resize.i50750 ], [ %3699, %resize.i50781 ], [ %3704, %resize.i50796 ], [ %3715, %resize.i50811 ], [ %3725, %resize.i50826 ], [ %3733, %resize.i50840 ], [ %3737, %resize.i50855 ], [ %3750, %resize.i50870 ], [ %3760, %resize.i50885 ], [ %3833, %resize.i50930 ], [ %3845, %resize.i50945 ], [ %3856, %resize.i50960 ], [ %3869, %resize.i50975 ], [ %3873, %resize.i50991 ], [ %3885, %resize.i51006 ], [ %3889, %resize.i51021 ], [ %4113, %resize.i51068 ], [ %4118, %resize.i51084 ], [ %4128, %resize.i51099 ], [ %4138, %resize.i51114 ], [ %4148, %resize.i51129 ], [ %4158, %resize.i51144 ], [ %4167, %resize.i51160 ], [ %4176, %resize.i51176 ], [ %4183, %resize.i51191 ], [ %4194, %resize.i51206 ], [ %4201, %resize.i51220 ], [ %4205, %resize.i51235 ], [ %4217, %resize.i51250 ], [ %4227, %resize.i51265 ], [ %4327, %resize.i51281 ], [ %4339, %resize.i51296 ], [ %4350, %resize.i51311 ], [ %4363, %resize.i51326 ], [ %4367, %resize.i51342 ], [ %4379, %resize.i51357 ], [ %4383, %resize.i51372 ], [ %4433, %resize.i51386 ], [ %4437, %resize.i51401 ], [ %4444, %resize.i51415 ], [ %4448, %resize.i51430 ], [ %4741, %resize.i51662 ], [ %4746, %resize.i51678 ], [ %4756, %resize.i51693 ], [ %4766, %resize.i51708 ], [ %4776, %resize.i51723 ], [ %4786, %resize.i51738 ], [ %4795, %resize.i51754 ], [ %4957, %resize.i51937 ], [ %4968, %resize.i51953 ], [ %4974, %resize.i51968 ], [ %4984, %resize.i51983 ], [ %4994, %resize.i51998 ], [ %5031, %resize.i52012 ], [ %5036, %resize.i52027 ], [ %5046, %resize.i52042 ], [ %5056, %resize.i52057 ], [ %5154, %resize.i52104 ], [ %5161, %resize.i52119 ], [ %5172, %resize.i52134 ], [ %5199, %resize.i52150 ], [ %5210, %resize.i52166 ], [ %5247, %resize.i52180 ], [ %5263, %resize.i52196 ], [ %5312, %resize.i52226 ], [ %1652, %return.loopexit52642.split.loop.exit53114 ], [ %1844, %return.loopexit52642.split.loop.exit53120 ], [ %2290, %return.loopexit52642.split.loop.exit53207 ], [ %3029, %return.loopexit52642.split.loop.exit53243 ], [ %3826, %return.loopexit52642.split.loop.exit53267 ], [ %4587, %return.loopexit52642.split.loop.exit53357 ], [ 1, %dynamic_jump_table ], [ %1388, %resize.i49783 ], [ %1379, %OP2813.JUMPDEST ], [ %3686, %resize.i50765 ], [ %3677, %OP7876.JUMPDEST ], [ %5348, %OP10453.PUSH1 ], [ %5340, %OP10431.DUP3 ], [ %4931, %resize.i51921 ], [ %4920, %resize.i51906 ], [ %207, %resize.i49327 ], [ %196, %resize.i49313 ], [ %5288, %resize.i52212 ], [ %5290, %OP10336.MLOAD.contd ], [ %4050, %resize.i51052 ], [ %4039, %resize.i51037 ], [ %4678, %resize.i51646 ], [ %4667, %resize.i51631 ], [ %5121, %resize.i52088 ], [ %5111, %resize.i52073 ], [ %1445, %OP2961.JUMPDEST ], [ %1447, %OP2963.MLOAD.contd ], [ %1557, %OP3239.JUMPDEST ], [ %1559, %OP3247.PUSH1 ], [ %1560, %OP3252.PUSH1 ], [ %1563, %OP3256.CALLER ], [ %1564, %OP3259.SWAP1 ], [ %1565, %OP3262.SWAP1 ], [ %1566, %OP3264.SLOAD ], [ %1570, %OP3270.JUMPDEST ], [ %1572, %OP3278.PUSH1 ], [ %1573, %OP3283.PUSH1 ], [ %1576, %OP3287.CALLER ], [ %1577, %OP3290.SWAP1 ], [ %1578, %OP3293.SWAP1 ], [ %1580, %OP3295.SSTORE ], [ %1649, %OP3453.JUMPDEST ], [ %1841, %OP3897.JUMPDEST ], [ %2054, %OP4426.JUMPDEST ], [ %2055, %OP4432.PUSH1 ], [ %2056, %OP4437.PUSH1 ], [ %2057, %OP4442.SWAP4 ], [ %2058, %OP4446.DUP1 ], [ %2059, %OP4447.MLOAD.contd ], [ %2060, %OP4451.SWAP1 ], [ %2065, %OP4452.MLOAD.contd ], [ %2067, %OP4465.PUSH1 ], [ %2068, %OP4467.MLOAD.contd ], [ %2069, %OP4471.SWAP1 ], [ %2073, %OP4472.MLOAD.contd ], [ %2174, %OP4740.JUMPDEST ], [ %2177, %OP4748.JUMPDEST ], [ %2182, %OP4758.JUMPDEST ], [ %2183, %OP4761.MLOAD.contd ], [ %2184, %OP4765.SWAP1 ], [ %2189, %OP4766.MLOAD.contd ], [ %2190, %OP4779.PUSH1 ], [ %2191, %OP4781.MLOAD.contd ], [ %2192, %OP4785.SWAP1 ], [ %2195, %OP4786.MLOAD.contd ], [ %2280, %OP4987.JUMPDEST ], [ %2282, %OP4995.PUSH1 ], [ %2283, %OP5000.PUSH1 ], [ %2284, %OP5004.DUP1 ], [ %2286, %OP5006.PUSH32 ], [ %2287, %OP5013.PUSH1 ], [ %3009, %OP6608.JUMPDEST ], [ %3011, %OP6625.MLOAD.contd ], [ %3012, %OP6631.DUP1 ], [ %3015, %OP6639.PUSH1 ], [ %3017, %OP6647.PUSH1 ], [ %3018, %OP6654.POP ], [ %3020, %OP6658.MLOAD.contd ], [ %3021, %OP6665.PUSH1 ], [ %3023, %OP6668.PUSH32 ], [ %3025, %OP6679.JUMPDEST ], [ %3026, %OP6682.POP ], [ %3328, %OP7322.JUMPDEST ], [ %3330, %OP7324.MLOAD.contd ], [ %3562, %OP7670.JUMPDEST ], [ %3564, %OP7680.MLOAD.contd ], [ %3566, %OP7685.PUSH1 ], [ %3568, %OP7691.MLOAD.contd ], [ %3825, %OP8124.PUSH1 ], [ %3971, %OP8379.JUMPDEST ], [ %3973, %OP8388.PUSH1 ], [ %3974, %OP8393.PUSH1 ], [ %3975, %OP8398.DUP1 ], [ %3977, %OP8400.PUSH1 ], [ %3978, %OP8406.DUP3 ], [ %3980, %OP8407.MLOAD.contd ], [ %3982, %OP8413.DUP1 ], [ %3985, %OP8420.SWAP4 ], [ %3987, %OP8427.PUSH1 ], [ %3989, %OP8433.PUSH1 ], [ %3991, %OP8440.PUSH1 ], [ %3992, %OP8447.DUP2 ], [ %3995, %OP8448.MLOAD.contd ], [ %3997, %OP8457.PUSH1 ], [ %3998, %OP8463.DUP1 ], [ %4000, %OP8464.MLOAD.contd ], [ %4277, %OP8864.JUMPDEST ], [ %4279, %OP8872.PUSH1 ], [ %4280, %OP8877.PUSH1 ], [ %4281, %OP8881.DUP7 ], [ %4282, %OP8884.SWAP1 ], [ %4283, %OP8887.DUP1 ], [ %4284, %OP8890.DUP1 ], [ %4287, %OP8892.PUSH32 ], [ %4288, %OP8898.MLOAD ], [ %4289, %OP8898.MLOAD.contd ], [ %4469, %OP9230.MLOAD.contd ], [ %4481, %OP9237.MLOAD.contd ], [ %4812, %OP9636.PUSH1 ], [ %4833, %OP9646.DUP1 ], [ %4834, %OP9649.DUP1 ], [ %4837, %OP9651.PUSH32 ], [ %4848, %OP9657.MLOAD.contd ], [ %4887, %OP9684.PUSH1 ], [ %5182, %OP10181.JUMPDEST ], [ %3820, %resize.i50899 ], [ %3824, %resize.i50914 ], [ %4464, %resize.i51446 ], [ %4478, %resize.i51462 ], [ %4484, %resize.i51478 ], [ %4495, %resize.i51493 ], [ %4505, %resize.i51508 ], [ %4516, %resize.i51523 ], [ %4527, %resize.i51538 ], [ %4540, %resize.i51553 ], [ %4550, %resize.i51569 ], [ %4562, %resize.i51584 ], [ %4574, %resize.i51599 ], [ %4584, %resize.i51615 ], [ %4806, %resize.i51768 ], [ %4811, %resize.i51783 ], [ %4821, %resize.i51798 ], [ %4831, %resize.i51813 ], [ %4846, %resize.i51829 ], [ %4853, %resize.i51845 ], [ %4863, %resize.i51860 ], [ %4873, %resize.i51875 ], [ %4885, %resize.i51890 ], [ 89, %return.loopexit55261 ]
  store i64 %len.addr.360, ptr %arg.stack_len.addr, align 8
  ret i8 %5360
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
define i8 @other(ptr nocapture readnone align 8 %arg.gas.addr, ptr noalias nocapture noundef align 8 dereferenceable(32768) %arg.stack.addr, ptr noalias nocapture noundef align 8 dereferenceable(8) %arg.stack_len.addr, ptr noalias nocapture readnone align 16 %arg.env.addr, ptr noalias nocapture noundef readonly align 8 dereferenceable(224) %arg.contract.addr, ptr noalias nocapture noundef align 8 dereferenceable(88) %arg.ecx.addr) #0 {
entry:
  %ecx.resume_at.addr = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 32
  %ecx.resume_at = load ptr, ptr %ecx.resume_at.addr, align 8
  %0 = icmp eq ptr %ecx.resume_at, null
  br i1 %0, label %no_resume, label %OP1318.SWAP4

no_resume:                                        ; preds = %entry
  store i256 96, ptr %arg.stack.addr, align 16
  %sp2 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 1
  store i256 64, ptr %sp2, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1039)
  %ecx.memory.addr.i = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i = load ptr, ptr %ecx.memory.addr.i, align 8, !alias.scope !1039
  %ecx.memory.len.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 16
  %ecx.memory.len.i = load i64, ptr %ecx.memory.len.addr.i, align 8, !noalias !1039
  %ecx.memory.last_checkpoint.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 48
  %ecx.memory.last_checkpoint.i = load i64, ptr %ecx.memory.last_checkpoint.addr.i, align 8, !noalias !1039
  %1 = sub i64 %ecx.memory.len.i, %ecx.memory.last_checkpoint.i
  %2 = icmp ult i64 %1, 96
  br i1 %2, label %resize.i, label %OP3.PUSH1, !prof !5

resize.i:                                         ; preds = %no_resume
  %3 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i = icmp eq i8 %3, 0
  br i1 %.not.i, label %OP3.PUSH1, label %return, !prof !6

OP3.PUSH1:                                        ; preds = %no_resume, %resize.i
  %ecx.memory.buffer.ptr.shared.addr.i = getelementptr inbounds i8, ptr %ecx.memory.i, i64 8
  %ecx.memory.buffer.ptr.shared.i = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i, align 8, !noalias !1039
  %ecx.memory.buffer.ptr.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i, i64 %ecx.memory.last_checkpoint.i
  %slot.i = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i, i64 64
  store i256 43422033463993573283839119378257965444976244249615211514796594002967423614976, ptr %slot.i, align 1, !noalias !1039
  %contract.input.len.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %contract.input.len = load i64, ptr %contract.input.len.addr, align 8
  %4 = zext i64 %contract.input.len to i256
  store i256 %4, ptr %sp2, align 16
  %5 = icmp ult i64 %contract.input.len, 4
  %6 = zext i1 %5 to i256
  store i256 %6, ptr %arg.stack.addr, align 16
  br i1 %5, label %OP687.JUMPDEST.sink.split, label %OP8.PUSH1

OP8.PUSH1:                                        ; preds = %OP3.PUSH1
  store i256 0, ptr %arg.stack.addr, align 16
  %7 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val7209 = load ptr, ptr %7, align 8
  %8 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 0, ptr %arg.contract.addr.val7209, i64 %contract.input.len)
  %9 = lshr i256 %8, 224
  store i256 %9, ptr %arg.stack.addr, align 16
  %sp48 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 2
  store i256 117300739, ptr %sp48, align 16
  %10 = icmp eq i256 %9, 117300739
  %11 = zext i1 %10 to i256
  store i256 %11, ptr %sp2, align 16
  br i1 %10, label %OP76.JUMPDEST, label %OP20.DUP1

OP20.DUP1:                                        ; preds = %OP8.PUSH1
  store i256 157198259, ptr %sp48, align 16
  %12 = icmp eq i256 %9, 157198259
  %13 = zext i1 %12 to i256
  store i256 %13, ptr %sp2, align 16
  br i1 %12, label %OP192.JUMPDEST, label %OP25.DUP1

OP25.DUP1:                                        ; preds = %OP20.DUP1
  store i256 404098525, ptr %sp48, align 16
  %14 = icmp eq i256 %9, 404098525
  %15 = zext i1 %14 to i256
  store i256 %15, ptr %sp2, align 16
  br i1 %14, label %OP249.JUMPDEST, label %OP30.DUP1

OP30.DUP1:                                        ; preds = %OP25.DUP1
  store i256 599290589, ptr %sp48, align 16
  %16 = icmp eq i256 %9, 599290589
  %17 = zext i1 %16 to i256
  store i256 %17, ptr %sp2, align 16
  br i1 %16, label %OP280.JUMPDEST, label %OP35.DUP1

OP35.DUP1:                                        ; preds = %OP30.DUP1
  store i256 773487949, ptr %sp48, align 16
  %18 = icmp eq i256 %9, 773487949
  %19 = zext i1 %18 to i256
  store i256 %19, ptr %sp2, align 16
  br i1 %18, label %OP347.JUMPDEST, label %OP40.DUP1

OP40.DUP1:                                        ; preds = %OP35.DUP1
  store i256 826074471, ptr %sp48, align 16
  %20 = icmp eq i256 %9, 826074471
  %21 = zext i1 %20 to i256
  store i256 %21, ptr %sp2, align 16
  br i1 %20, label %OP373.JUMPDEST, label %OP45.DUP1

OP45.DUP1:                                        ; preds = %OP40.DUP1
  store i256 1889567281, ptr %sp48, align 16
  %22 = icmp eq i256 %9, 1889567281
  %23 = zext i1 %22 to i256
  store i256 %23, ptr %sp2, align 16
  br i1 %22, label %OP408.JUMPDEST, label %OP50.DUP1

OP50.DUP1:                                        ; preds = %OP45.DUP1
  store i256 2514000705, ptr %sp48, align 16
  %24 = icmp eq i256 %9, 2514000705
  %25 = zext i1 %24 to i256
  store i256 %25, ptr %sp2, align 16
  br i1 %24, label %OP453.JUMPDEST, label %OP55.DUP1

OP55.DUP1:                                        ; preds = %OP50.DUP1
  store i256 2835717307, ptr %sp48, align 16
  %26 = icmp eq i256 %9, 2835717307
  %27 = zext i1 %26 to i256
  store i256 %27, ptr %sp2, align 16
  br i1 %26, label %OP569.JUMPDEST, label %OP60.DUP1

OP60.DUP1:                                        ; preds = %OP55.DUP1
  store i256 3504541104, ptr %sp48, align 16
  %28 = icmp eq i256 %9, 3504541104
  %29 = zext i1 %28 to i256
  store i256 %29, ptr %sp2, align 16
  br i1 %28, label %OP687.JUMPDEST.sink.split, label %OP65.DUP1

OP65.DUP1:                                        ; preds = %OP60.DUP1
  store i256 3714247998, ptr %sp48, align 16
  %30 = icmp eq i256 %9, 3714247998
  %31 = zext i1 %30 to i256
  store i256 %31, ptr %sp2, align 16
  br i1 %30, label %OP632.JUMPDEST, label %OP687.JUMPDEST.sink.split

OP76.JUMPDEST:                                    ; preds = %dynamic_jump_table, %OP8.PUSH1
  %len.addr.1 = phi i64 [ 1, %OP8.PUSH1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value = load i256, ptr %contract.call_value.addr, align 16
  %sp216 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.1
  %32 = icmp eq i256 %contract.call_value, 0
  %33 = zext i1 %32 to i256
  store i256 %33, ptr %sp216, align 16
  br i1 %32, label %OP84.JUMPDEST, label %OP81.PUSH1

OP81.PUSH1:                                       ; preds = %OP76.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp216, i8 0, i64 64, i1 false)
  %34 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp216, i8 16)
  %.not7176 = icmp eq i8 %34, 0
  %spec.select = select i1 %.not7176, i8 16, i8 %34, !prof !6
  br label %return

OP84.JUMPDEST:                                    ; preds = %dynamic_jump_table, %OP76.JUMPDEST
  %len.addr.2 = phi i64 [ %len.addr.1, %OP76.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %35 = add i64 %len.addr.2, 1
  %sp234 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.2
  store i256 204, ptr %sp234, align 16
  br label %OP743.JUMPDEST

OP88.JUMPDEST:                                    ; preds = %dynamic_jump_table
  %36 = add i64 %len.addr.51, 1
  %sp238 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp238, align 16
  %mload.out.slot = alloca i256, align 16
  %37 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot, ptr %arg.ecx.addr)
  %.not7164 = icmp eq i8 %37, 0
  br i1 %.not7164, label %OP90.MLOAD.contd, label %return, !prof !6

OP90.MLOAD.contd:                                 ; preds = %OP88.JUMPDEST
  %mload.out = load i256, ptr %mload.out.slot, align 16
  store i256 %mload.out, ptr %sp238, align 16
  %sp246 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %36
  store i256 %mload.out, ptr %sp246, align 16
  %38 = add i64 %len.addr.51, 3
  %sp250 = getelementptr i256, ptr %sp238, i64 2
  %sp252 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %38
  %39 = add i256 %mload.out, 32
  store i256 %39, ptr %sp250, align 16
  %40 = add i64 %len.addr.51, 5
  %sp264 = getelementptr i256, ptr %sp238, i64 4
  store i256 32, ptr %sp252, align 16
  store i256 %mload.out, ptr %sp264, align 16
  %41 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out, i256 32, ptr %arg.ecx.addr)
  %.not7165 = icmp eq i8 %41, 0
  br i1 %.not7165, label %OP100.DUP4, label %return, !prof !6

OP100.DUP4:                                       ; preds = %OP90.MLOAD.contd
  %sp281 = getelementptr i256, ptr %sp238, i64 -1
  %dup4 = load i256, ptr %sp281, align 16
  store i256 %dup4, ptr %sp252, align 16
  %dup2285 = load i256, ptr %sp250, align 16
  store i256 %dup2285, ptr %sp264, align 16
  %42 = add i64 %len.addr.51, 6
  %sp290 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %40
  store i256 %dup4, ptr %sp290, align 16
  %mload.out.slot294 = alloca i256, align 16
  %43 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup4, ptr %mload.out.slot294, ptr %arg.ecx.addr)
  %.not7166 = icmp eq i8 %43, 0
  br i1 %.not7166, label %OP103.MLOAD.contd, label %return, !prof !6

OP103.MLOAD.contd:                                ; preds = %OP100.DUP4
  %mload.out295 = load i256, ptr %mload.out.slot294, align 16
  store i256 %mload.out295, ptr %sp290, align 16
  %dup2299 = load i256, ptr %sp264, align 16
  %sp300 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %42
  store i256 %dup2299, ptr %sp300, align 16
  %44 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup2299, i256 %mload.out295, ptr %arg.ecx.addr)
  %.not7167 = icmp eq i8 %44, 0
  br i1 %.not7167, label %OP106.PUSH1, label %return, !prof !6

OP106.PUSH1:                                      ; preds = %OP103.MLOAD.contd
  store i256 32, ptr %sp290, align 16
  %b312 = load i256, ptr %sp264, align 16
  %45 = add i256 %b312, 32
  store i256 %45, ptr %sp250, align 16
  %dup1322 = load i256, ptr %sp252, align 16
  store i256 %dup1322, ptr %sp264, align 16
  %mload.out.slot327 = alloca i256, align 16
  %46 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup1322, ptr %mload.out.slot327, ptr %arg.ecx.addr)
  %.not7168 = icmp eq i8 %46, 0
  br i1 %.not7168, label %OP111.MLOAD.contd, label %return, !prof !6

OP111.MLOAD.contd:                                ; preds = %OP106.PUSH1
  %mload.out328 = load i256, ptr %mload.out.slot327, align 16
  %swap.b334 = load i256, ptr %sp252, align 16
  %47 = add i256 %swap.b334, 32
  store i256 %47, ptr %sp252, align 16
  store i256 %mload.out328, ptr %sp264, align 16
  store i256 %mload.out328, ptr %sp290, align 16
  %dup4354 = load i256, ptr %sp250, align 16
  store i256 %dup4354, ptr %sp300, align 16
  %sp359 = getelementptr i256, ptr %sp238, i64 7
  store i256 %47, ptr %sp359, align 16
  %48 = add i64 %len.addr.51, 9
  %sp361 = getelementptr i256, ptr %sp238, i64 8
  store i256 0, ptr %sp361, align 16
  br label %OP120.JUMPDEST.preheader, !annotation !7

OP120.JUMPDEST.preheader:                         ; preds = %dynamic_jump_table, %OP111.MLOAD.contd
  %len.addr.3.ph = phi i64 [ %48, %OP111.MLOAD.contd ], [ %len.addr.51, %dynamic_jump_table ]
  %49 = add i64 %len.addr.3.ph, 1
  %50 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.3.ph
  %sp364 = getelementptr i256, ptr %50, i64 -4
  %sp368 = getelementptr i256, ptr %50, i64 -1
  %sp370 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %49
  %dup43658479 = load i256, ptr %sp364, align 16
  %dup23698480 = load i256, ptr %sp368, align 16
  store i256 %dup23698480, ptr %sp370, align 16
  %51 = icmp uge i256 %dup23698480, %dup43658479
  %52 = zext i1 %51 to i256
  store i256 %52, ptr %50, align 16
  br i1 %51, label %OP142.JUMPDEST, label %OP127.DUP1.lr.ph

OP127.DUP1.lr.ph:                                 ; preds = %OP120.JUMPDEST.preheader
  %sp389 = getelementptr i256, ptr %50, i64 -2
  %ecx.memory.addr.i7211 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp409 = getelementptr i256, ptr %50, i64 -3
  %sp410 = getelementptr i256, ptr %50, i64 2
  br label %OP127.DUP1

OP127.DUP1:                                       ; preds = %OP127.DUP1.lr.ph, %OP135.PUSH1
  %dup23698481 = phi i256 [ %dup23698480, %OP127.DUP1.lr.ph ], [ %74, %OP135.PUSH1 ]
  %dup3390 = load i256, ptr %sp389, align 16
  store i256 %dup3390, ptr %sp370, align 16
  %53 = add i256 %dup3390, %dup23698481
  store i256 %53, ptr %50, align 16
  %ecx.memory.i7212 = load ptr, ptr %ecx.memory.addr.i7211, align 8
  %ecx.memory.len.addr.i7213 = getelementptr inbounds i8, ptr %ecx.memory.i7212, i64 16
  %ecx.memory.len.i7214 = load i64, ptr %ecx.memory.len.addr.i7213, align 8, !noalias !1042
  %ecx.memory.last_checkpoint.addr.i7215 = getelementptr inbounds i8, ptr %ecx.memory.i7212, i64 48
  %ecx.memory.last_checkpoint.i7216 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7215, align 8, !noalias !1042
  %54 = sub i64 %ecx.memory.len.i7214, %ecx.memory.last_checkpoint.i7216
  %55 = icmp ugt i256 %53, 18446744073709551615
  %56 = trunc i256 %53 to i64
  %57 = add i64 %56, 32
  %58 = icmp ugt i64 %56, -33
  %59 = or i1 %55, %58
  %60 = select i1 %59, i64 -1, i64 %57
  %61 = icmp ugt i64 %60, %54
  br i1 %61, label %resize.i7223, label %OP130.MLOAD.contd, !prof !5

resize.i7223:                                     ; preds = %OP127.DUP1
  %62 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %60), !noalias !1046
  %.not.i7224 = icmp eq i8 %62, 0
  br i1 %.not.i7224, label %resize.i7223.OP130.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7223.OP130.MLOAD.contd_crit_edge:         ; preds = %resize.i7223
  %dup2406.pre = load i256, ptr %sp368, align 16
  %ecx.memory.i7226.pre = load ptr, ptr %ecx.memory.addr.i7211, align 8, !alias.scope !1047
  br label %OP130.MLOAD.contd

OP130.MLOAD.contd:                                ; preds = %resize.i7223.OP130.MLOAD.contd_crit_edge, %OP127.DUP1
  %ecx.memory.i7226 = phi ptr [ %ecx.memory.i7226.pre, %resize.i7223.OP130.MLOAD.contd_crit_edge ], [ %ecx.memory.i7212, %OP127.DUP1 ]
  %dup2406 = phi i256 [ %dup2406.pre, %resize.i7223.OP130.MLOAD.contd_crit_edge ], [ %dup23698481, %OP127.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7218 = getelementptr inbounds i8, ptr %ecx.memory.i7212, i64 8
  %ecx.memory.buffer.ptr.shared.i7219 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7218, align 8, !noalias !1042
  %ecx.memory.buffer.ptr.i7220 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7219, i64 %ecx.memory.last_checkpoint.i7216
  %slot.i7221 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7220, i64 %56
  %slot.value.i = load i256, ptr %slot.i7221, align 1, !noalias !1042
  %63 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i)
  store i256 %63, ptr %50, align 16
  %dup5 = load i256, ptr %sp409, align 16
  store i256 %dup5, ptr %sp410, align 16
  %64 = add i256 %dup5, %dup2406
  store i256 %64, ptr %sp370, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1047)
  %ecx.memory.len.addr.i7227 = getelementptr inbounds i8, ptr %ecx.memory.i7226, i64 16
  %ecx.memory.len.i7228 = load i64, ptr %ecx.memory.len.addr.i7227, align 8, !noalias !1047
  %ecx.memory.last_checkpoint.addr.i7229 = getelementptr inbounds i8, ptr %ecx.memory.i7226, i64 48
  %ecx.memory.last_checkpoint.i7230 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7229, align 8, !noalias !1047
  %65 = sub i64 %ecx.memory.len.i7228, %ecx.memory.last_checkpoint.i7230
  %66 = icmp ugt i256 %64, 18446744073709551615
  %67 = trunc i256 %64 to i64
  %68 = add i64 %67, 32
  %69 = icmp ugt i64 %67, -33
  %70 = or i1 %66, %69
  %71 = select i1 %70, i64 -1, i64 %68
  %72 = icmp ugt i64 %71, %65
  br i1 %72, label %resize.i7237, label %OP135.PUSH1, !prof !5

resize.i7237:                                     ; preds = %OP130.MLOAD.contd
  %73 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %71)
  %.not.i7238 = icmp eq i8 %73, 0
  br i1 %.not.i7238, label %OP135.PUSH1, label %return, !prof !6

OP135.PUSH1:                                      ; preds = %OP130.MLOAD.contd, %resize.i7237
  %ecx.memory.buffer.ptr.shared.addr.i7232 = getelementptr inbounds i8, ptr %ecx.memory.i7226, i64 8
  %ecx.memory.buffer.ptr.shared.i7233 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7232, align 8, !noalias !1047
  %ecx.memory.buffer.ptr.i7234 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7233, i64 %ecx.memory.last_checkpoint.i7230
  %slot.i7235 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7234, i64 %67
  store i256 %slot.value.i, ptr %slot.i7235, align 1, !noalias !1047
  %dup2426 = load i256, ptr %sp368, align 16
  %74 = add i256 %dup2426, 32
  store i256 %74, ptr %sp368, align 16
  %dup4365 = load i256, ptr %sp364, align 16
  store i256 %74, ptr %sp370, align 16
  %75 = icmp uge i256 %74, %dup4365
  %76 = zext i1 %75 to i256
  store i256 %76, ptr %50, align 16
  br i1 %75, label %OP142.JUMPDEST, label %OP127.DUP1

OP142.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP135.PUSH1, %OP120.JUMPDEST.preheader
  %len.addr.4 = phi i64 [ %len.addr.3.ph, %OP120.JUMPDEST.preheader ], [ %len.addr.3.ph, %OP135.PUSH1 ], [ %len.addr.51, %dynamic_jump_table ]
  %77 = add i64 %len.addr.4, -1
  %78 = add i64 %len.addr.4, -3
  %79 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.4
  %sp447 = getelementptr i256, ptr %79, i64 -5
  %swap.a448 = load i256, ptr %sp447, align 16
  %sp449 = getelementptr i256, ptr %79, i64 -6
  %80 = add i64 %len.addr.4, -5
  %sp455 = getelementptr i256, ptr %79, i64 -7
  %swap.b456 = load i256, ptr %sp455, align 16
  %sp460 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %80
  %81 = add i256 %swap.b456, %swap.a448
  store i256 %81, ptr %sp455, align 16
  %82 = and i256 %swap.a448, 31
  store i256 %82, ptr %sp449, align 16
  %83 = icmp eq i256 %82, 0
  %84 = zext i1 %83 to i256
  store i256 %84, ptr %sp460, align 16
  br i1 %83, label %OP179.JUMPDEST, label %OP159.DUP1

OP159.DUP1:                                       ; preds = %OP142.JUMPDEST
  %sp498 = getelementptr i256, ptr %79, i64 -4
  %85 = sub i256 %81, %82
  store i256 %85, ptr %sp447, align 16
  store i256 %85, ptr %sp498, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1050)
  %ecx.memory.addr.i7240 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7241 = load ptr, ptr %ecx.memory.addr.i7240, align 8, !alias.scope !1050, !noalias !1053
  %ecx.memory.len.addr.i7242 = getelementptr inbounds i8, ptr %ecx.memory.i7241, i64 16
  %ecx.memory.len.i7243 = load i64, ptr %ecx.memory.len.addr.i7242, align 8, !noalias !1055
  %ecx.memory.last_checkpoint.addr.i7244 = getelementptr inbounds i8, ptr %ecx.memory.i7241, i64 48
  %ecx.memory.last_checkpoint.i7245 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7244, align 8, !noalias !1055
  %86 = sub i64 %ecx.memory.len.i7243, %ecx.memory.last_checkpoint.i7245
  %87 = icmp ugt i256 %85, 18446744073709551615
  %88 = trunc i256 %85 to i64
  %89 = add i64 %88, 32
  %90 = icmp ugt i64 %88, -33
  %91 = or i1 %87, %90
  %92 = select i1 %91, i64 -1, i64 %89
  %93 = icmp ugt i64 %92, %86
  br i1 %93, label %resize.i7253, label %OP163.MLOAD.contd, !prof !5

resize.i7253:                                     ; preds = %OP159.DUP1
  %94 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %92), !noalias !1053
  %.not.i7254 = icmp eq i8 %94, 0
  br i1 %.not.i7254, label %resize.i7253.OP163.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7253.OP163.MLOAD.contd_crit_edge:         ; preds = %resize.i7253
  %dup4519.pre = load i256, ptr %sp449, align 16
  br label %OP163.MLOAD.contd

OP163.MLOAD.contd:                                ; preds = %resize.i7253.OP163.MLOAD.contd_crit_edge, %OP159.DUP1
  %dup4519 = phi i256 [ %dup4519.pre, %resize.i7253.OP163.MLOAD.contd_crit_edge ], [ %82, %OP159.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7247 = getelementptr inbounds i8, ptr %ecx.memory.i7241, i64 8
  %ecx.memory.buffer.ptr.shared.i7248 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7247, align 8, !noalias !1055
  %ecx.memory.buffer.ptr.i7249 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7248, i64 %ecx.memory.last_checkpoint.i7245
  %slot.i7250 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7249, i64 %88
  %slot.value.i7251 = load i256, ptr %slot.i7250, align 1, !noalias !1055
  %95 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7251)
  store i256 %95, ptr %sp498, align 16
  %sp516 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %78
  store i256 1, ptr %sp516, align 16
  %sp520 = getelementptr i256, ptr %79, i64 -2
  %sp522 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %77
  %96 = sub i256 32, %dup4519
  store i256 %96, ptr %sp520, align 16
  store i256 256, ptr %sp522, align 16
  %97 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp520, i8 17)
  %.not7172 = icmp eq i8 %97, 0
  br i1 %.not7172, label %OP170.SUB, label %return, !prof !6

OP170.SUB:                                        ; preds = %OP163.MLOAD.contd
  %a535 = load i256, ptr %sp520, align 16
  %sp536 = getelementptr i256, ptr %79, i64 -3
  %b537 = load i256, ptr %sp536, align 16
  %98 = xor i256 %a535, -1
  %99 = add i256 %b537, %98
  %100 = add i64 %len.addr.4, -4
  %sp546 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %100
  %b547 = load i256, ptr %sp546, align 16
  %101 = and i256 %b547, %99
  store i256 %101, ptr %sp546, align 16
  %dup2551 = load i256, ptr %sp447, align 16
  store i256 %dup2551, ptr %sp516, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1056)
  %ecx.memory.i7257 = load ptr, ptr %ecx.memory.addr.i7240, align 8, !alias.scope !1056
  %ecx.memory.len.addr.i7258 = getelementptr inbounds i8, ptr %ecx.memory.i7257, i64 16
  %ecx.memory.len.i7259 = load i64, ptr %ecx.memory.len.addr.i7258, align 8, !noalias !1056
  %ecx.memory.last_checkpoint.addr.i7260 = getelementptr inbounds i8, ptr %ecx.memory.i7257, i64 48
  %ecx.memory.last_checkpoint.i7261 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7260, align 8, !noalias !1056
  %102 = sub i64 %ecx.memory.len.i7259, %ecx.memory.last_checkpoint.i7261
  %103 = icmp ugt i256 %dup2551, 18446744073709551615
  %104 = trunc i256 %dup2551 to i64
  %105 = add i64 %104, 32
  %106 = icmp ugt i64 %104, -33
  %107 = or i1 %103, %106
  %108 = select i1 %107, i64 -1, i64 %105
  %109 = icmp ugt i64 %108, %102
  br i1 %109, label %resize.i7268, label %OP175.PUSH1, !prof !5

resize.i7268:                                     ; preds = %OP170.SUB
  %110 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %108)
  %.not.i7269 = icmp eq i8 %110, 0
  br i1 %.not.i7269, label %OP175.PUSH1, label %return, !prof !6

OP175.PUSH1:                                      ; preds = %OP170.SUB, %resize.i7268
  %ecx.memory.buffer.ptr.shared.addr.i7263 = getelementptr inbounds i8, ptr %ecx.memory.i7257, i64 8
  %ecx.memory.buffer.ptr.shared.i7264 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7263, align 8, !noalias !1056
  %ecx.memory.buffer.ptr.i7265 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7264, i64 %ecx.memory.last_checkpoint.i7261
  %slot.i7266 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7265, i64 %104
  %111 = tail call i256 @llvm.bswap.i256(i256 %101)
  store i256 %111, ptr %slot.i7266, align 1, !noalias !1056
  store i256 32, ptr %sp546, align 16
  %b564 = load i256, ptr %sp447, align 16
  %112 = add i256 %b564, 32
  %swap.b570 = load i256, ptr %sp455, align 16
  store i256 %112, ptr %sp455, align 16
  store i256 %swap.b570, ptr %sp447, align 16
  br label %OP179.JUMPDEST, !annotation !7

OP179.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP175.PUSH1, %OP142.JUMPDEST
  %len.addr.5 = phi i64 [ %80, %OP142.JUMPDEST ], [ %80, %OP175.PUSH1 ], [ %len.addr.51, %dynamic_jump_table ]
  %113 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.5
  %sp575 = getelementptr i256, ptr %113, i64 -2
  %swap.a576 = load i256, ptr %sp575, align 16
  %sp577 = getelementptr i256, ptr %113, i64 -5
  %swap.b578 = load i256, ptr %sp577, align 16
  store i256 %swap.a576, ptr %sp577, align 16
  store i256 %swap.b578, ptr %sp575, align 16
  %sp583 = getelementptr i256, ptr %113, i64 -4
  store i256 64, ptr %sp583, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1059)
  %ecx.memory.addr.i7271 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7272 = load ptr, ptr %ecx.memory.addr.i7271, align 8, !alias.scope !1059, !noalias !1062
  %ecx.memory.len.addr.i7273 = getelementptr inbounds i8, ptr %ecx.memory.i7272, i64 16
  %ecx.memory.len.i7274 = load i64, ptr %ecx.memory.len.addr.i7273, align 8, !noalias !1064
  %ecx.memory.last_checkpoint.addr.i7275 = getelementptr inbounds i8, ptr %ecx.memory.i7272, i64 48
  %ecx.memory.last_checkpoint.i7276 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7275, align 8, !noalias !1064
  %114 = sub i64 %ecx.memory.len.i7274, %ecx.memory.last_checkpoint.i7276
  %115 = icmp ult i64 %114, 96
  br i1 %115, label %resize.i7284, label %OP186.MLOAD.contd, !prof !5

resize.i7284:                                     ; preds = %OP179.JUMPDEST
  %116 = add i64 %len.addr.5, -3
  %117 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1062
  %.not.i7285 = icmp eq i8 %117, 0
  br i1 %.not.i7285, label %resize.i7284.OP186.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7284.OP186.MLOAD.contd_crit_edge:         ; preds = %resize.i7284
  %swap.b598.pre = load i256, ptr %sp577, align 16
  br label %OP186.MLOAD.contd

OP186.MLOAD.contd:                                ; preds = %resize.i7284.OP186.MLOAD.contd_crit_edge, %OP179.JUMPDEST
  %swap.b598 = phi i256 [ %swap.b598.pre, %resize.i7284.OP186.MLOAD.contd_crit_edge ], [ %swap.a576, %OP179.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i7278 = getelementptr inbounds i8, ptr %ecx.memory.i7272, i64 8
  %ecx.memory.buffer.ptr.shared.i7279 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7278, align 8, !noalias !1064
  %ecx.memory.buffer.ptr.i7280 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7279, i64 %ecx.memory.last_checkpoint.i7276
  %slot.i7281 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7280, i64 64
  %slot.value.i7282 = load i256, ptr %slot.i7281, align 1, !noalias !1064
  %118 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7282)
  %sp595 = getelementptr i256, ptr %113, i64 -3
  store i256 %swap.b598, ptr %sp595, align 16
  %119 = sub i256 %swap.b598, %118
  store i256 %119, ptr %sp577, align 16
  store i256 %118, ptr %sp583, align 16
  %120 = add i64 %len.addr.5, -5
  %121 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp577, i8 2)
  %.not7175 = icmp eq i8 %121, 0
  %spec.select5328 = select i1 %.not7175, i8 2, i8 %121, !prof !6
  br label %return

OP192.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP20.DUP1
  %len.addr.6 = phi i64 [ 1, %OP20.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr614 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value615 = load i256, ptr %contract.call_value.addr614, align 16
  %sp616 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.6
  %122 = icmp eq i256 %contract.call_value615, 0
  %123 = zext i1 %122 to i256
  store i256 %123, ptr %sp616, align 16
  br i1 %122, label %OP200.JUMPDEST, label %OP197.PUSH1

OP197.PUSH1:                                      ; preds = %OP192.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp616, i8 0, i64 64, i1 false)
  %124 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp616, i8 16)
  %.not7152 = icmp eq i8 %124, 0
  %spec.select5329 = select i1 %.not7152, i8 16, i8 %124, !prof !6
  br label %return

OP200.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP192.JUMPDEST
  %len.addr.7 = phi i64 [ %len.addr.6, %OP192.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp634 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.7
  store i256 391, ptr %sp634, align 16
  %sp636 = getelementptr i256, ptr %sp634, i64 1
  store i256 4, ptr %sp636, align 16
  %125 = add i64 %len.addr.7, 3
  %sp640 = getelementptr i256, ptr %sp634, i64 2
  store i256 4, ptr %sp640, align 16
  %sp644 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %125
  store i256 4, ptr %sp644, align 16
  %126 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val7207 = load ptr, ptr %126, align 8
  %127 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val7208 = load i64, ptr %127, align 8
  %128 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val7207, i64 %arg.contract.addr.val7208)
  %sp650 = getelementptr i256, ptr %sp634, i64 4
  %129 = and i256 %128, 1461501637330902918203684832716283019655932542975
  store i256 %129, ptr %sp636, align 16
  store i256 4, ptr %sp640, align 16
  store i256 36, ptr %sp644, align 16
  store i256 36, ptr %sp650, align 16
  %130 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 36, ptr %arg.contract.addr.val7207, i64 %arg.contract.addr.val7208)
  %sp699 = getelementptr i256, ptr %sp634, i64 5
  store i256 32, ptr %sp699, align 16
  store i256 %130, ptr %sp640, align 16
  store i256 4, ptr %sp644, align 16
  store i256 68, ptr %sp650, align 16
  br label %OP866.JUMPDEST

OP226.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %131 = add i64 %len.addr.51, 1
  %sp726 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp726, align 16
  %mload.out.slot730 = alloca i256, align 16
  %132 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot730, ptr %arg.ecx.addr)
  %.not7147 = icmp eq i8 %132, 0
  br i1 %.not7147, label %OP228.MLOAD.contd, label %return, !prof !6

OP228.MLOAD.contd:                                ; preds = %OP226.JUMPDEST
  %mload.out731 = load i256, ptr %mload.out.slot730, align 16
  store i256 %mload.out731, ptr %sp726, align 16
  %133 = add i64 %len.addr.51, 2
  %sp736 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %131
  store i256 %mload.out731, ptr %sp736, align 16
  %sp738 = getelementptr i256, ptr %sp726, i64 -1
  %dup3739 = load i256, ptr %sp738, align 16
  %sp740 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %133
  %.not7148 = icmp ne i256 %dup3739, 0
  %134 = zext i1 %.not7148 to i256
  store i256 %134, ptr %sp740, align 16
  %sp760 = getelementptr i256, ptr %sp726, i64 3
  store i256 %mload.out731, ptr %sp760, align 16
  %135 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out731, i256 %134, ptr %arg.ecx.addr)
  %.not7149 = icmp eq i8 %135, 0
  br i1 %.not7149, label %OP237.PUSH1, label %return, !prof !6

OP237.PUSH1:                                      ; preds = %OP228.MLOAD.contd
  store i256 32, ptr %sp740, align 16
  %b772 = load i256, ptr %sp736, align 16
  %136 = add i256 %b772, 32
  %swap.b778 = load i256, ptr %sp738, align 16
  store i256 %136, ptr %sp738, align 16
  store i256 %swap.b778, ptr %sp736, align 16
  store i256 64, ptr %sp726, align 16
  %mload.out.slot786 = alloca i256, align 16
  %137 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot786, ptr %arg.ecx.addr)
  %.not7150 = icmp eq i8 %137, 0
  br i1 %.not7150, label %OP243.MLOAD.contd, label %return, !prof !6

OP243.MLOAD.contd:                                ; preds = %OP237.PUSH1
  %mload.out787 = load i256, ptr %mload.out.slot786, align 16
  %swap.b797 = load i256, ptr %sp738, align 16
  store i256 %swap.b797, ptr %sp736, align 16
  %138 = sub i256 %swap.b797, %mload.out787
  store i256 %138, ptr %sp738, align 16
  store i256 %mload.out787, ptr %sp726, align 16
  %139 = add i64 %len.addr.51, -1
  %140 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp738, i8 2)
  %.not7151 = icmp eq i8 %140, 0
  %spec.select5330 = select i1 %.not7151, i8 2, i8 %140, !prof !6
  br label %return

OP249.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP25.DUP1
  %len.addr.8 = phi i64 [ 1, %OP25.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr813 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value814 = load i256, ptr %contract.call_value.addr813, align 16
  %sp815 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.8
  %141 = icmp eq i256 %contract.call_value814, 0
  %142 = zext i1 %141 to i256
  store i256 %142, ptr %sp815, align 16
  br i1 %141, label %OP257.JUMPDEST, label %OP254.PUSH1

OP254.PUSH1:                                      ; preds = %OP249.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp815, i8 0, i64 64, i1 false)
  %143 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp815, i8 16)
  %.not7145 = icmp eq i8 %143, 0
  %spec.select5331 = select i1 %.not7145, i8 16, i8 %143, !prof !6
  br label %return

OP257.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP249.JUMPDEST
  %len.addr.9 = phi i64 [ %len.addr.8, %OP249.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %144 = add i64 %len.addr.9, 1
  %sp833 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.9
  store i256 436, ptr %sp833, align 16
  br label %OP942.JUMPDEST

OP261.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %145 = add i64 %len.addr.51, 1
  %sp837 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp837, align 16
  %mload.out.slot841 = alloca i256, align 16
  %146 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot841, ptr %arg.ecx.addr)
  %.not7141 = icmp eq i8 %146, 0
  br i1 %.not7141, label %OP263.MLOAD.contd, label %return, !prof !6

OP263.MLOAD.contd:                                ; preds = %OP261.JUMPDEST
  %mload.out842 = load i256, ptr %mload.out.slot841, align 16
  store i256 %mload.out842, ptr %sp837, align 16
  %147 = add i64 %len.addr.51, 2
  %sp847 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %145
  store i256 %mload.out842, ptr %sp847, align 16
  %sp849 = getelementptr i256, ptr %sp837, i64 -1
  %dup3850 = load i256, ptr %sp849, align 16
  %sp851 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %147
  store i256 %dup3850, ptr %sp851, align 16
  %sp855 = getelementptr i256, ptr %sp837, i64 3
  store i256 %mload.out842, ptr %sp855, align 16
  %148 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out842, i256 %dup3850, ptr %arg.ecx.addr)
  %.not7142 = icmp eq i8 %148, 0
  br i1 %.not7142, label %OP268.PUSH1, label %return, !prof !6

OP268.PUSH1:                                      ; preds = %OP263.MLOAD.contd
  store i256 32, ptr %sp851, align 16
  %b867 = load i256, ptr %sp847, align 16
  %149 = add i256 %b867, 32
  %swap.b873 = load i256, ptr %sp849, align 16
  store i256 %149, ptr %sp849, align 16
  store i256 %swap.b873, ptr %sp847, align 16
  store i256 64, ptr %sp837, align 16
  %mload.out.slot881 = alloca i256, align 16
  %150 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot881, ptr %arg.ecx.addr)
  %.not7143 = icmp eq i8 %150, 0
  br i1 %.not7143, label %OP274.MLOAD.contd, label %return, !prof !6

OP274.MLOAD.contd:                                ; preds = %OP268.PUSH1
  %mload.out882 = load i256, ptr %mload.out.slot881, align 16
  %swap.b892 = load i256, ptr %sp849, align 16
  store i256 %swap.b892, ptr %sp847, align 16
  %151 = sub i256 %swap.b892, %mload.out882
  store i256 %151, ptr %sp849, align 16
  store i256 %mload.out882, ptr %sp837, align 16
  %152 = add i64 %len.addr.51, -1
  %153 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp849, i8 2)
  %.not7144 = icmp eq i8 %153, 0
  %spec.select5332 = select i1 %.not7144, i8 2, i8 %153, !prof !6
  br label %return

OP280.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP30.DUP1
  %len.addr.10 = phi i64 [ 1, %OP30.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr908 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value909 = load i256, ptr %contract.call_value.addr908, align 16
  %sp910 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.10
  %154 = icmp eq i256 %contract.call_value909, 0
  %155 = zext i1 %154 to i256
  store i256 %155, ptr %sp910, align 16
  br i1 %154, label %OP288.JUMPDEST, label %OP285.PUSH1

OP285.PUSH1:                                      ; preds = %OP280.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp910, i8 0, i64 64, i1 false)
  %156 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp910, i8 16)
  %.not7096 = icmp eq i8 %156, 0
  %spec.select5333 = select i1 %.not7096, i8 16, i8 %156, !prof !6
  br label %return

OP288.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP280.JUMPDEST
  %len.addr.11 = phi i64 [ %len.addr.10, %OP280.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp928 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.11
  store i256 553, ptr %sp928, align 16
  %sp930 = getelementptr i256, ptr %sp928, i64 1
  store i256 4, ptr %sp930, align 16
  %sp934 = getelementptr i256, ptr %sp928, i64 2
  store i256 4, ptr %sp934, align 16
  %157 = add i64 %len.addr.11, 4
  %sp938 = getelementptr i256, ptr %sp928, i64 3
  store i256 4, ptr %sp938, align 16
  %158 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val7203 = load ptr, ptr %158, align 8
  %159 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val7204 = load i64, ptr %159, align 8
  %160 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val7203, i64 %arg.contract.addr.val7204)
  %sp944 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %157
  %161 = and i256 %160, 1461501637330902918203684832716283019655932542975
  store i256 %161, ptr %sp930, align 16
  store i256 4, ptr %sp934, align 16
  store i256 36, ptr %sp938, align 16
  store i256 36, ptr %sp944, align 16
  %162 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 36, ptr %arg.contract.addr.val7203, i64 %arg.contract.addr.val7204)
  %sp988 = getelementptr i256, ptr %sp928, i64 5
  %163 = and i256 %162, 1461501637330902918203684832716283019655932542975
  store i256 %163, ptr %sp934, align 16
  store i256 4, ptr %sp938, align 16
  store i256 68, ptr %sp944, align 16
  store i256 68, ptr %sp988, align 16
  %164 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 68, ptr %arg.contract.addr.val7203, i64 %arg.contract.addr.val7204)
  %sp1037 = getelementptr i256, ptr %sp928, i64 6
  store i256 32, ptr %sp1037, align 16
  store i256 %164, ptr %sp938, align 16
  store i256 4, ptr %sp944, align 16
  store i256 100, ptr %sp988, align 16
  br label %OP952.JUMPDEST

OP324.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %165 = add i64 %len.addr.51, 1
  %sp1064 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp1064, align 16
  %mload.out.slot1068 = alloca i256, align 16
  %166 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1068, ptr %arg.ecx.addr)
  %.not7091 = icmp eq i8 %166, 0
  br i1 %.not7091, label %OP326.MLOAD.contd, label %return, !prof !6

OP326.MLOAD.contd:                                ; preds = %OP324.JUMPDEST
  %mload.out1069 = load i256, ptr %mload.out.slot1068, align 16
  store i256 %mload.out1069, ptr %sp1064, align 16
  %167 = add i64 %len.addr.51, 2
  %sp1074 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %165
  store i256 %mload.out1069, ptr %sp1074, align 16
  %sp1076 = getelementptr i256, ptr %sp1064, i64 -1
  %dup31077 = load i256, ptr %sp1076, align 16
  %sp1078 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %167
  %.not7092 = icmp ne i256 %dup31077, 0
  %168 = zext i1 %.not7092 to i256
  store i256 %168, ptr %sp1078, align 16
  %sp1098 = getelementptr i256, ptr %sp1064, i64 3
  store i256 %mload.out1069, ptr %sp1098, align 16
  %169 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1069, i256 %168, ptr %arg.ecx.addr)
  %.not7093 = icmp eq i8 %169, 0
  br i1 %.not7093, label %OP335.PUSH1, label %return, !prof !6

OP335.PUSH1:                                      ; preds = %OP326.MLOAD.contd
  store i256 32, ptr %sp1078, align 16
  %b1110 = load i256, ptr %sp1074, align 16
  %170 = add i256 %b1110, 32
  %swap.b1116 = load i256, ptr %sp1076, align 16
  store i256 %170, ptr %sp1076, align 16
  store i256 %swap.b1116, ptr %sp1074, align 16
  store i256 64, ptr %sp1064, align 16
  %mload.out.slot1124 = alloca i256, align 16
  %171 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1124, ptr %arg.ecx.addr)
  %.not7094 = icmp eq i8 %171, 0
  br i1 %.not7094, label %OP341.MLOAD.contd, label %return, !prof !6

OP341.MLOAD.contd:                                ; preds = %OP335.PUSH1
  %mload.out1125 = load i256, ptr %mload.out.slot1124, align 16
  %swap.b1135 = load i256, ptr %sp1076, align 16
  store i256 %swap.b1135, ptr %sp1074, align 16
  %172 = sub i256 %swap.b1135, %mload.out1125
  store i256 %172, ptr %sp1076, align 16
  store i256 %mload.out1125, ptr %sp1064, align 16
  %173 = add i64 %len.addr.51, -1
  %174 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1076, i8 2)
  %.not7095 = icmp eq i8 %174, 0
  %spec.select5334 = select i1 %.not7095, i8 2, i8 %174, !prof !6
  br label %return

OP347.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP35.DUP1
  %len.addr.12 = phi i64 [ 1, %OP35.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr1151 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value1152 = load i256, ptr %contract.call_value.addr1151, align 16
  %sp1153 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.12
  %175 = icmp eq i256 %contract.call_value1152, 0
  %176 = zext i1 %175 to i256
  store i256 %176, ptr %sp1153, align 16
  br i1 %175, label %OP355.JUMPDEST, label %OP352.PUSH1

OP352.PUSH1:                                      ; preds = %OP347.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1153, i8 0, i64 64, i1 false)
  %177 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1153, i8 16)
  %.not7076 = icmp eq i8 %177, 0
  %spec.select5335 = select i1 %.not7076, i8 16, i8 %177, !prof !6
  br label %return

OP355.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP347.JUMPDEST
  %len.addr.13 = phi i64 [ %len.addr.12, %OP347.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp1171 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.13
  store i256 612, ptr %sp1171, align 16
  %178 = add i64 %len.addr.13, 2
  %sp1173 = getelementptr i256, ptr %sp1171, i64 1
  store i256 4, ptr %sp1173, align 16
  %sp1177 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %178
  store i256 4, ptr %sp1177, align 16
  %sp1181 = getelementptr i256, ptr %sp1171, i64 3
  store i256 4, ptr %sp1181, align 16
  %179 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val7197 = load ptr, ptr %179, align 8
  %180 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val7198 = load i64, ptr %180, align 8
  %181 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val7197, i64 %arg.contract.addr.val7198)
  %sp1192 = getelementptr i256, ptr %sp1171, i64 4
  store i256 32, ptr %sp1192, align 16
  store i256 %181, ptr %sp1173, align 16
  store i256 4, ptr %sp1177, align 16
  store i256 36, ptr %sp1181, align 16
  br label %OP1233.JUMPDEST

OP373.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP40.DUP1
  %len.addr.14 = phi i64 [ 1, %OP40.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr1221 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value1222 = load i256, ptr %contract.call_value.addr1221, align 16
  %sp1223 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.14
  %182 = icmp eq i256 %contract.call_value1222, 0
  %183 = zext i1 %182 to i256
  store i256 %183, ptr %sp1223, align 16
  br i1 %182, label %OP381.JUMPDEST, label %OP378.PUSH1

OP378.PUSH1:                                      ; preds = %OP373.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1223, i8 0, i64 64, i1 false)
  %184 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1223, i8 16)
  %.not7073 = icmp eq i8 %184, 0
  %spec.select5336 = select i1 %.not7073, i8 16, i8 %184, !prof !6
  br label %return

OP381.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP373.JUMPDEST
  %len.addr.15 = phi i64 [ %len.addr.14, %OP373.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %185 = add i64 %len.addr.15, 1
  %sp1241 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.15
  store i256 633, ptr %sp1241, align 16
  br label %OP1356.JUMPDEST

OP385.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %186 = add i64 %len.addr.51, 1
  %sp1245 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp1245, align 16
  %mload.out.slot1249 = alloca i256, align 16
  %187 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1249, ptr %arg.ecx.addr)
  %.not7069 = icmp eq i8 %187, 0
  br i1 %.not7069, label %OP387.MLOAD.contd, label %return, !prof !6

OP387.MLOAD.contd:                                ; preds = %OP385.JUMPDEST
  %mload.out1250 = load i256, ptr %mload.out.slot1249, align 16
  store i256 %mload.out1250, ptr %sp1245, align 16
  %188 = add i64 %len.addr.51, 2
  %sp1255 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %186
  store i256 %mload.out1250, ptr %sp1255, align 16
  %sp1257 = getelementptr i256, ptr %sp1245, i64 -1
  %dup31258 = load i256, ptr %sp1257, align 16
  %sp1259 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %188
  %sp1261 = getelementptr i256, ptr %sp1245, i64 3
  %189 = and i256 %dup31258, 255
  store i256 %189, ptr %sp1259, align 16
  store i256 %mload.out1250, ptr %sp1261, align 16
  %190 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1250, i256 %189, ptr %arg.ecx.addr)
  %.not7070 = icmp eq i8 %190, 0
  br i1 %.not7070, label %OP396.PUSH1, label %return, !prof !6

OP396.PUSH1:                                      ; preds = %OP387.MLOAD.contd
  store i256 32, ptr %sp1259, align 16
  %b1291 = load i256, ptr %sp1255, align 16
  %191 = add i256 %b1291, 32
  %swap.b1297 = load i256, ptr %sp1257, align 16
  store i256 %191, ptr %sp1257, align 16
  store i256 %swap.b1297, ptr %sp1255, align 16
  store i256 64, ptr %sp1245, align 16
  %mload.out.slot1305 = alloca i256, align 16
  %192 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1305, ptr %arg.ecx.addr)
  %.not7071 = icmp eq i8 %192, 0
  br i1 %.not7071, label %OP402.MLOAD.contd, label %return, !prof !6

OP402.MLOAD.contd:                                ; preds = %OP396.PUSH1
  %mload.out1306 = load i256, ptr %mload.out.slot1305, align 16
  %swap.b1316 = load i256, ptr %sp1257, align 16
  store i256 %swap.b1316, ptr %sp1255, align 16
  %193 = sub i256 %swap.b1316, %mload.out1306
  store i256 %193, ptr %sp1257, align 16
  store i256 %mload.out1306, ptr %sp1245, align 16
  %194 = add i64 %len.addr.51, -1
  %195 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1257, i8 2)
  %.not7072 = icmp eq i8 %195, 0
  %spec.select5337 = select i1 %.not7072, i8 2, i8 %195, !prof !6
  br label %return

OP408.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP45.DUP1
  %len.addr.16 = phi i64 [ 1, %OP45.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr1332 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value1333 = load i256, ptr %contract.call_value.addr1332, align 16
  %sp1334 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.16
  %196 = icmp eq i256 %contract.call_value1333, 0
  %197 = zext i1 %196 to i256
  store i256 %197, ptr %sp1334, align 16
  br i1 %196, label %OP416.JUMPDEST, label %OP413.PUSH1

OP413.PUSH1:                                      ; preds = %OP408.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1334, i8 0, i64 64, i1 false)
  %198 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1334, i8 16)
  %.not7064 = icmp eq i8 %198, 0
  %spec.select5338 = select i1 %.not7064, i8 16, i8 %198, !prof !6
  br label %return

OP416.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP408.JUMPDEST
  %len.addr.17 = phi i64 [ %len.addr.16, %OP408.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp1352 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.17
  store i256 716, ptr %sp1352, align 16
  %199 = add i64 %len.addr.17, 2
  %sp1354 = getelementptr i256, ptr %sp1352, i64 1
  store i256 4, ptr %sp1354, align 16
  %sp1358 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %199
  store i256 4, ptr %sp1358, align 16
  %sp1362 = getelementptr i256, ptr %sp1352, i64 3
  store i256 4, ptr %sp1362, align 16
  %200 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val7195 = load ptr, ptr %200, align 8
  %201 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val7196 = load i64, ptr %201, align 8
  %202 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val7195, i64 %arg.contract.addr.val7196)
  %sp1368 = getelementptr i256, ptr %sp1352, i64 4
  %203 = and i256 %202, 1461501637330902918203684832716283019655932542975
  store i256 32, ptr %sp1368, align 16
  store i256 %203, ptr %sp1354, align 16
  store i256 4, ptr %sp1358, align 16
  store i256 36, ptr %sp1362, align 16
  br label %OP1370.JUMPDEST

OP434.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %204 = add i64 %len.addr.51, 1
  %sp1408 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp1408, align 16
  %mload.out.slot1412 = alloca i256, align 16
  %205 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1412, ptr %arg.ecx.addr)
  %.not7060 = icmp eq i8 %205, 0
  br i1 %.not7060, label %OP436.MLOAD.contd, label %return, !prof !6

OP436.MLOAD.contd:                                ; preds = %OP434.JUMPDEST
  %mload.out1413 = load i256, ptr %mload.out.slot1412, align 16
  store i256 %mload.out1413, ptr %sp1408, align 16
  %206 = add i64 %len.addr.51, 2
  %sp1418 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %204
  store i256 %mload.out1413, ptr %sp1418, align 16
  %sp1420 = getelementptr i256, ptr %sp1408, i64 -1
  %dup31421 = load i256, ptr %sp1420, align 16
  %sp1422 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %206
  store i256 %dup31421, ptr %sp1422, align 16
  %sp1426 = getelementptr i256, ptr %sp1408, i64 3
  store i256 %mload.out1413, ptr %sp1426, align 16
  %207 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1413, i256 %dup31421, ptr %arg.ecx.addr)
  %.not7061 = icmp eq i8 %207, 0
  br i1 %.not7061, label %OP441.PUSH1, label %return, !prof !6

OP441.PUSH1:                                      ; preds = %OP436.MLOAD.contd
  store i256 32, ptr %sp1422, align 16
  %b1438 = load i256, ptr %sp1418, align 16
  %208 = add i256 %b1438, 32
  %swap.b1444 = load i256, ptr %sp1420, align 16
  store i256 %208, ptr %sp1420, align 16
  store i256 %swap.b1444, ptr %sp1418, align 16
  store i256 64, ptr %sp1408, align 16
  %mload.out.slot1452 = alloca i256, align 16
  %209 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1452, ptr %arg.ecx.addr)
  %.not7062 = icmp eq i8 %209, 0
  br i1 %.not7062, label %OP447.MLOAD.contd, label %return, !prof !6

OP447.MLOAD.contd:                                ; preds = %OP441.PUSH1
  %mload.out1453 = load i256, ptr %mload.out.slot1452, align 16
  %swap.b1463 = load i256, ptr %sp1420, align 16
  store i256 %swap.b1463, ptr %sp1418, align 16
  %210 = sub i256 %swap.b1463, %mload.out1453
  store i256 %210, ptr %sp1420, align 16
  store i256 %mload.out1453, ptr %sp1408, align 16
  %211 = add i64 %len.addr.51, -1
  %212 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1420, i8 2)
  %.not7063 = icmp eq i8 %212, 0
  %spec.select5339 = select i1 %.not7063, i8 2, i8 %212, !prof !6
  br label %return

OP453.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP50.DUP1
  %len.addr.18 = phi i64 [ 1, %OP50.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr1479 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value1480 = load i256, ptr %contract.call_value.addr1479, align 16
  %sp1481 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.18
  %213 = icmp eq i256 %contract.call_value1480, 0
  %214 = zext i1 %213 to i256
  store i256 %214, ptr %sp1481, align 16
  br i1 %213, label %OP461.JUMPDEST, label %OP458.PUSH1

OP458.PUSH1:                                      ; preds = %OP453.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1481, i8 0, i64 64, i1 false)
  %215 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1481, i8 16)
  %.not7048 = icmp eq i8 %215, 0
  %spec.select5340 = select i1 %.not7048, i8 16, i8 %215, !prof !6
  br label %return

OP461.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP453.JUMPDEST
  %len.addr.19 = phi i64 [ %len.addr.18, %OP453.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %216 = add i64 %len.addr.19, 1
  %sp1499 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.19
  store i256 757, ptr %sp1499, align 16
  br label %OP1388.JUMPDEST

OP465.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %217 = add i64 %len.addr.51, 1
  %sp1503 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp1503, align 16
  %mload.out.slot1507 = alloca i256, align 16
  %218 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot1507, ptr %arg.ecx.addr)
  %.not7036 = icmp eq i8 %218, 0
  br i1 %.not7036, label %OP467.MLOAD.contd, label %return, !prof !6

OP467.MLOAD.contd:                                ; preds = %OP465.JUMPDEST
  %mload.out1508 = load i256, ptr %mload.out.slot1507, align 16
  store i256 %mload.out1508, ptr %sp1503, align 16
  %sp1513 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %217
  store i256 %mload.out1508, ptr %sp1513, align 16
  %219 = add i64 %len.addr.51, 3
  %sp1517 = getelementptr i256, ptr %sp1503, i64 2
  %sp1519 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %219
  %220 = add i256 %mload.out1508, 32
  store i256 %220, ptr %sp1517, align 16
  %221 = add i64 %len.addr.51, 5
  %sp1533 = getelementptr i256, ptr %sp1503, i64 4
  store i256 32, ptr %sp1519, align 16
  store i256 %mload.out1508, ptr %sp1533, align 16
  %222 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out1508, i256 32, ptr %arg.ecx.addr)
  %.not7037 = icmp eq i8 %222, 0
  br i1 %.not7037, label %OP477.DUP4, label %return, !prof !6

OP477.DUP4:                                       ; preds = %OP467.MLOAD.contd
  %sp1550 = getelementptr i256, ptr %sp1503, i64 -1
  %dup41551 = load i256, ptr %sp1550, align 16
  store i256 %dup41551, ptr %sp1519, align 16
  %dup21555 = load i256, ptr %sp1517, align 16
  store i256 %dup21555, ptr %sp1533, align 16
  %223 = add i64 %len.addr.51, 6
  %sp1560 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %221
  store i256 %dup41551, ptr %sp1560, align 16
  %mload.out.slot1564 = alloca i256, align 16
  %224 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup41551, ptr %mload.out.slot1564, ptr %arg.ecx.addr)
  %.not7038 = icmp eq i8 %224, 0
  br i1 %.not7038, label %OP480.MLOAD.contd, label %return, !prof !6

OP480.MLOAD.contd:                                ; preds = %OP477.DUP4
  %mload.out1565 = load i256, ptr %mload.out.slot1564, align 16
  store i256 %mload.out1565, ptr %sp1560, align 16
  %dup21569 = load i256, ptr %sp1533, align 16
  %sp1570 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %223
  store i256 %dup21569, ptr %sp1570, align 16
  %225 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %dup21569, i256 %mload.out1565, ptr %arg.ecx.addr)
  %.not7039 = icmp eq i8 %225, 0
  br i1 %.not7039, label %OP483.PUSH1, label %return, !prof !6

OP483.PUSH1:                                      ; preds = %OP480.MLOAD.contd
  store i256 32, ptr %sp1560, align 16
  %b1582 = load i256, ptr %sp1533, align 16
  %226 = add i256 %b1582, 32
  store i256 %226, ptr %sp1517, align 16
  %dup11592 = load i256, ptr %sp1519, align 16
  store i256 %dup11592, ptr %sp1533, align 16
  %mload.out.slot1597 = alloca i256, align 16
  %227 = call fastcc i8 @__revmc_ir_builtin_mload(i256 %dup11592, ptr %mload.out.slot1597, ptr %arg.ecx.addr)
  %.not7040 = icmp eq i8 %227, 0
  br i1 %.not7040, label %OP488.MLOAD.contd, label %return, !prof !6

OP488.MLOAD.contd:                                ; preds = %OP483.PUSH1
  %mload.out1598 = load i256, ptr %mload.out.slot1597, align 16
  %swap.b1604 = load i256, ptr %sp1519, align 16
  %228 = add i256 %swap.b1604, 32
  store i256 %228, ptr %sp1519, align 16
  store i256 %mload.out1598, ptr %sp1533, align 16
  store i256 %mload.out1598, ptr %sp1560, align 16
  %dup41624 = load i256, ptr %sp1517, align 16
  store i256 %dup41624, ptr %sp1570, align 16
  %sp1629 = getelementptr i256, ptr %sp1503, i64 7
  store i256 %228, ptr %sp1629, align 16
  %229 = add i64 %len.addr.51, 9
  %sp1631 = getelementptr i256, ptr %sp1503, i64 8
  store i256 0, ptr %sp1631, align 16
  br label %OP497.JUMPDEST.preheader, !annotation !7

OP497.JUMPDEST.preheader:                         ; preds = %dynamic_jump_table, %OP488.MLOAD.contd
  %len.addr.20.ph = phi i64 [ %229, %OP488.MLOAD.contd ], [ %len.addr.51, %dynamic_jump_table ]
  %230 = add i64 %len.addr.20.ph, 1
  %231 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.20.ph
  %sp1634 = getelementptr i256, ptr %231, i64 -4
  %sp1638 = getelementptr i256, ptr %231, i64 -1
  %sp1640 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %230
  %dup416358476 = load i256, ptr %sp1634, align 16
  %dup216398477 = load i256, ptr %sp1638, align 16
  store i256 %dup216398477, ptr %sp1640, align 16
  %232 = icmp uge i256 %dup216398477, %dup416358476
  %233 = zext i1 %232 to i256
  store i256 %233, ptr %231, align 16
  br i1 %232, label %OP519.JUMPDEST, label %OP504.DUP1.lr.ph

OP504.DUP1.lr.ph:                                 ; preds = %OP497.JUMPDEST.preheader
  %sp1659 = getelementptr i256, ptr %231, i64 -2
  %ecx.memory.addr.i7287 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp1679 = getelementptr i256, ptr %231, i64 -3
  %sp1681 = getelementptr i256, ptr %231, i64 2
  br label %OP504.DUP1

OP504.DUP1:                                       ; preds = %OP504.DUP1.lr.ph, %OP512.PUSH1
  %dup216398478 = phi i256 [ %dup216398477, %OP504.DUP1.lr.ph ], [ %255, %OP512.PUSH1 ]
  %dup31660 = load i256, ptr %sp1659, align 16
  store i256 %dup31660, ptr %sp1640, align 16
  %234 = add i256 %dup31660, %dup216398478
  store i256 %234, ptr %231, align 16
  %ecx.memory.i7288 = load ptr, ptr %ecx.memory.addr.i7287, align 8
  %ecx.memory.len.addr.i7289 = getelementptr inbounds i8, ptr %ecx.memory.i7288, i64 16
  %ecx.memory.len.i7290 = load i64, ptr %ecx.memory.len.addr.i7289, align 8, !noalias !1065
  %ecx.memory.last_checkpoint.addr.i7291 = getelementptr inbounds i8, ptr %ecx.memory.i7288, i64 48
  %ecx.memory.last_checkpoint.i7292 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7291, align 8, !noalias !1065
  %235 = sub i64 %ecx.memory.len.i7290, %ecx.memory.last_checkpoint.i7292
  %236 = icmp ugt i256 %234, 18446744073709551615
  %237 = trunc i256 %234 to i64
  %238 = add i64 %237, 32
  %239 = icmp ugt i64 %237, -33
  %240 = or i1 %236, %239
  %241 = select i1 %240, i64 -1, i64 %238
  %242 = icmp ugt i64 %241, %235
  br i1 %242, label %resize.i7300, label %OP507.MLOAD.contd, !prof !5

resize.i7300:                                     ; preds = %OP504.DUP1
  %243 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %241), !noalias !1069
  %.not.i7301 = icmp eq i8 %243, 0
  br i1 %.not.i7301, label %resize.i7300.OP507.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7300.OP507.MLOAD.contd_crit_edge:         ; preds = %resize.i7300
  %dup21676.pre = load i256, ptr %sp1638, align 16
  %ecx.memory.i7304.pre = load ptr, ptr %ecx.memory.addr.i7287, align 8, !alias.scope !1070
  br label %OP507.MLOAD.contd

OP507.MLOAD.contd:                                ; preds = %resize.i7300.OP507.MLOAD.contd_crit_edge, %OP504.DUP1
  %ecx.memory.i7304 = phi ptr [ %ecx.memory.i7304.pre, %resize.i7300.OP507.MLOAD.contd_crit_edge ], [ %ecx.memory.i7288, %OP504.DUP1 ]
  %dup21676 = phi i256 [ %dup21676.pre, %resize.i7300.OP507.MLOAD.contd_crit_edge ], [ %dup216398478, %OP504.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7294 = getelementptr inbounds i8, ptr %ecx.memory.i7288, i64 8
  %ecx.memory.buffer.ptr.shared.i7295 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7294, align 8, !noalias !1065
  %ecx.memory.buffer.ptr.i7296 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7295, i64 %ecx.memory.last_checkpoint.i7292
  %slot.i7297 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7296, i64 %237
  %slot.value.i7298 = load i256, ptr %slot.i7297, align 1, !noalias !1065
  %244 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7298)
  store i256 %244, ptr %231, align 16
  %dup51680 = load i256, ptr %sp1679, align 16
  store i256 %dup51680, ptr %sp1681, align 16
  %245 = add i256 %dup51680, %dup21676
  store i256 %245, ptr %sp1640, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1070)
  %ecx.memory.len.addr.i7305 = getelementptr inbounds i8, ptr %ecx.memory.i7304, i64 16
  %ecx.memory.len.i7306 = load i64, ptr %ecx.memory.len.addr.i7305, align 8, !noalias !1070
  %ecx.memory.last_checkpoint.addr.i7307 = getelementptr inbounds i8, ptr %ecx.memory.i7304, i64 48
  %ecx.memory.last_checkpoint.i7308 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7307, align 8, !noalias !1070
  %246 = sub i64 %ecx.memory.len.i7306, %ecx.memory.last_checkpoint.i7308
  %247 = icmp ugt i256 %245, 18446744073709551615
  %248 = trunc i256 %245 to i64
  %249 = add i64 %248, 32
  %250 = icmp ugt i64 %248, -33
  %251 = or i1 %247, %250
  %252 = select i1 %251, i64 -1, i64 %249
  %253 = icmp ugt i64 %252, %246
  br i1 %253, label %resize.i7315, label %OP512.PUSH1, !prof !5

resize.i7315:                                     ; preds = %OP507.MLOAD.contd
  %254 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %252)
  %.not.i7316 = icmp eq i8 %254, 0
  br i1 %.not.i7316, label %OP512.PUSH1, label %return, !prof !6

OP512.PUSH1:                                      ; preds = %OP507.MLOAD.contd, %resize.i7315
  %ecx.memory.buffer.ptr.shared.addr.i7310 = getelementptr inbounds i8, ptr %ecx.memory.i7304, i64 8
  %ecx.memory.buffer.ptr.shared.i7311 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7310, align 8, !noalias !1070
  %ecx.memory.buffer.ptr.i7312 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7311, i64 %ecx.memory.last_checkpoint.i7308
  %slot.i7313 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7312, i64 %248
  store i256 %slot.value.i7298, ptr %slot.i7313, align 1, !noalias !1070
  %dup21697 = load i256, ptr %sp1638, align 16
  %255 = add i256 %dup21697, 32
  store i256 %255, ptr %sp1638, align 16
  %dup41635 = load i256, ptr %sp1634, align 16
  store i256 %255, ptr %sp1640, align 16
  %256 = icmp uge i256 %255, %dup41635
  %257 = zext i1 %256 to i256
  store i256 %257, ptr %231, align 16
  br i1 %256, label %OP519.JUMPDEST, label %OP504.DUP1

OP519.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP512.PUSH1, %OP497.JUMPDEST.preheader
  %len.addr.21 = phi i64 [ %len.addr.20.ph, %OP497.JUMPDEST.preheader ], [ %len.addr.20.ph, %OP512.PUSH1 ], [ %len.addr.51, %dynamic_jump_table ]
  %258 = add i64 %len.addr.21, -1
  %259 = add i64 %len.addr.21, -3
  %260 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.21
  %sp1718 = getelementptr i256, ptr %260, i64 -5
  %swap.a1719 = load i256, ptr %sp1718, align 16
  %sp1720 = getelementptr i256, ptr %260, i64 -6
  %261 = add i64 %len.addr.21, -5
  %sp1726 = getelementptr i256, ptr %260, i64 -7
  %swap.b1727 = load i256, ptr %sp1726, align 16
  %sp1731 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %261
  %262 = add i256 %swap.b1727, %swap.a1719
  store i256 %262, ptr %sp1726, align 16
  %263 = and i256 %swap.a1719, 31
  store i256 %263, ptr %sp1720, align 16
  %264 = icmp eq i256 %263, 0
  %265 = zext i1 %264 to i256
  store i256 %265, ptr %sp1731, align 16
  br i1 %264, label %OP556.JUMPDEST, label %OP536.DUP1

OP536.DUP1:                                       ; preds = %OP519.JUMPDEST
  %sp1769 = getelementptr i256, ptr %260, i64 -4
  %266 = sub i256 %262, %263
  store i256 %266, ptr %sp1718, align 16
  store i256 %266, ptr %sp1769, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1073)
  %ecx.memory.addr.i7318 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7319 = load ptr, ptr %ecx.memory.addr.i7318, align 8, !alias.scope !1073, !noalias !1076
  %ecx.memory.len.addr.i7320 = getelementptr inbounds i8, ptr %ecx.memory.i7319, i64 16
  %ecx.memory.len.i7321 = load i64, ptr %ecx.memory.len.addr.i7320, align 8, !noalias !1078
  %ecx.memory.last_checkpoint.addr.i7322 = getelementptr inbounds i8, ptr %ecx.memory.i7319, i64 48
  %ecx.memory.last_checkpoint.i7323 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7322, align 8, !noalias !1078
  %267 = sub i64 %ecx.memory.len.i7321, %ecx.memory.last_checkpoint.i7323
  %268 = icmp ugt i256 %266, 18446744073709551615
  %269 = trunc i256 %266 to i64
  %270 = add i64 %269, 32
  %271 = icmp ugt i64 %269, -33
  %272 = or i1 %268, %271
  %273 = select i1 %272, i64 -1, i64 %270
  %274 = icmp ugt i64 %273, %267
  br i1 %274, label %resize.i7331, label %OP540.MLOAD.contd, !prof !5

resize.i7331:                                     ; preds = %OP536.DUP1
  %275 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %273), !noalias !1076
  %.not.i7332 = icmp eq i8 %275, 0
  br i1 %.not.i7332, label %resize.i7331.OP540.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7331.OP540.MLOAD.contd_crit_edge:         ; preds = %resize.i7331
  %dup41790.pre = load i256, ptr %sp1720, align 16
  br label %OP540.MLOAD.contd

OP540.MLOAD.contd:                                ; preds = %resize.i7331.OP540.MLOAD.contd_crit_edge, %OP536.DUP1
  %dup41790 = phi i256 [ %dup41790.pre, %resize.i7331.OP540.MLOAD.contd_crit_edge ], [ %263, %OP536.DUP1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7325 = getelementptr inbounds i8, ptr %ecx.memory.i7319, i64 8
  %ecx.memory.buffer.ptr.shared.i7326 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7325, align 8, !noalias !1078
  %ecx.memory.buffer.ptr.i7327 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7326, i64 %ecx.memory.last_checkpoint.i7323
  %slot.i7328 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7327, i64 %269
  %slot.value.i7329 = load i256, ptr %slot.i7328, align 1, !noalias !1078
  %276 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7329)
  store i256 %276, ptr %sp1769, align 16
  %sp1787 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %259
  store i256 1, ptr %sp1787, align 16
  %sp1791 = getelementptr i256, ptr %260, i64 -2
  %sp1793 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %258
  %277 = sub i256 32, %dup41790
  store i256 %277, ptr %sp1791, align 16
  store i256 256, ptr %sp1793, align 16
  %278 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1791, i8 17)
  %.not7044 = icmp eq i8 %278, 0
  br i1 %.not7044, label %OP547.SUB, label %return, !prof !6

OP547.SUB:                                        ; preds = %OP540.MLOAD.contd
  %a1806 = load i256, ptr %sp1791, align 16
  %sp1807 = getelementptr i256, ptr %260, i64 -3
  %b1808 = load i256, ptr %sp1807, align 16
  %279 = xor i256 %a1806, -1
  %280 = add i256 %b1808, %279
  %281 = add i64 %len.addr.21, -4
  %sp1817 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %281
  %b1818 = load i256, ptr %sp1817, align 16
  %282 = and i256 %b1818, %280
  store i256 %282, ptr %sp1817, align 16
  %dup21822 = load i256, ptr %sp1718, align 16
  store i256 %dup21822, ptr %sp1787, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1079)
  %ecx.memory.i7335 = load ptr, ptr %ecx.memory.addr.i7318, align 8, !alias.scope !1079
  %ecx.memory.len.addr.i7336 = getelementptr inbounds i8, ptr %ecx.memory.i7335, i64 16
  %ecx.memory.len.i7337 = load i64, ptr %ecx.memory.len.addr.i7336, align 8, !noalias !1079
  %ecx.memory.last_checkpoint.addr.i7338 = getelementptr inbounds i8, ptr %ecx.memory.i7335, i64 48
  %ecx.memory.last_checkpoint.i7339 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7338, align 8, !noalias !1079
  %283 = sub i64 %ecx.memory.len.i7337, %ecx.memory.last_checkpoint.i7339
  %284 = icmp ugt i256 %dup21822, 18446744073709551615
  %285 = trunc i256 %dup21822 to i64
  %286 = add i64 %285, 32
  %287 = icmp ugt i64 %285, -33
  %288 = or i1 %284, %287
  %289 = select i1 %288, i64 -1, i64 %286
  %290 = icmp ugt i64 %289, %283
  br i1 %290, label %resize.i7346, label %OP552.PUSH1, !prof !5

resize.i7346:                                     ; preds = %OP547.SUB
  %291 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %289)
  %.not.i7347 = icmp eq i8 %291, 0
  br i1 %.not.i7347, label %OP552.PUSH1, label %return, !prof !6

OP552.PUSH1:                                      ; preds = %OP547.SUB, %resize.i7346
  %ecx.memory.buffer.ptr.shared.addr.i7341 = getelementptr inbounds i8, ptr %ecx.memory.i7335, i64 8
  %ecx.memory.buffer.ptr.shared.i7342 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7341, align 8, !noalias !1079
  %ecx.memory.buffer.ptr.i7343 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7342, i64 %ecx.memory.last_checkpoint.i7339
  %slot.i7344 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7343, i64 %285
  %292 = tail call i256 @llvm.bswap.i256(i256 %282)
  store i256 %292, ptr %slot.i7344, align 1, !noalias !1079
  store i256 32, ptr %sp1817, align 16
  %b1835 = load i256, ptr %sp1718, align 16
  %293 = add i256 %b1835, 32
  %swap.b1841 = load i256, ptr %sp1726, align 16
  store i256 %293, ptr %sp1726, align 16
  store i256 %swap.b1841, ptr %sp1718, align 16
  br label %OP556.JUMPDEST, !annotation !7

OP556.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP552.PUSH1, %OP519.JUMPDEST
  %len.addr.22 = phi i64 [ %261, %OP519.JUMPDEST ], [ %261, %OP552.PUSH1 ], [ %len.addr.51, %dynamic_jump_table ]
  %294 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.22
  %sp1846 = getelementptr i256, ptr %294, i64 -2
  %swap.a1847 = load i256, ptr %sp1846, align 16
  %sp1848 = getelementptr i256, ptr %294, i64 -5
  %swap.b1849 = load i256, ptr %sp1848, align 16
  store i256 %swap.a1847, ptr %sp1848, align 16
  store i256 %swap.b1849, ptr %sp1846, align 16
  %sp1854 = getelementptr i256, ptr %294, i64 -4
  store i256 64, ptr %sp1854, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1082)
  %ecx.memory.addr.i7349 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7350 = load ptr, ptr %ecx.memory.addr.i7349, align 8, !alias.scope !1082, !noalias !1085
  %ecx.memory.len.addr.i7351 = getelementptr inbounds i8, ptr %ecx.memory.i7350, i64 16
  %ecx.memory.len.i7352 = load i64, ptr %ecx.memory.len.addr.i7351, align 8, !noalias !1087
  %ecx.memory.last_checkpoint.addr.i7353 = getelementptr inbounds i8, ptr %ecx.memory.i7350, i64 48
  %ecx.memory.last_checkpoint.i7354 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7353, align 8, !noalias !1087
  %295 = sub i64 %ecx.memory.len.i7352, %ecx.memory.last_checkpoint.i7354
  %296 = icmp ult i64 %295, 96
  br i1 %296, label %resize.i7362, label %OP563.MLOAD.contd, !prof !5

resize.i7362:                                     ; preds = %OP556.JUMPDEST
  %297 = add i64 %len.addr.22, -3
  %298 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1085
  %.not.i7363 = icmp eq i8 %298, 0
  br i1 %.not.i7363, label %resize.i7362.OP563.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7362.OP563.MLOAD.contd_crit_edge:         ; preds = %resize.i7362
  %swap.b1869.pre = load i256, ptr %sp1848, align 16
  br label %OP563.MLOAD.contd

OP563.MLOAD.contd:                                ; preds = %resize.i7362.OP563.MLOAD.contd_crit_edge, %OP556.JUMPDEST
  %swap.b1869 = phi i256 [ %swap.b1869.pre, %resize.i7362.OP563.MLOAD.contd_crit_edge ], [ %swap.a1847, %OP556.JUMPDEST ]
  %ecx.memory.buffer.ptr.shared.addr.i7356 = getelementptr inbounds i8, ptr %ecx.memory.i7350, i64 8
  %ecx.memory.buffer.ptr.shared.i7357 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7356, align 8, !noalias !1087
  %ecx.memory.buffer.ptr.i7358 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7357, i64 %ecx.memory.last_checkpoint.i7354
  %slot.i7359 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7358, i64 64
  %slot.value.i7360 = load i256, ptr %slot.i7359, align 1, !noalias !1087
  %299 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7360)
  %sp1866 = getelementptr i256, ptr %294, i64 -3
  store i256 %swap.b1869, ptr %sp1866, align 16
  %300 = sub i256 %swap.b1869, %299
  store i256 %300, ptr %sp1848, align 16
  store i256 %299, ptr %sp1854, align 16
  %301 = add i64 %len.addr.22, -5
  %302 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1848, i8 2)
  %.not7047 = icmp eq i8 %302, 0
  %spec.select5341 = select i1 %.not7047, i8 2, i8 %302, !prof !6
  br label %return

OP569.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP55.DUP1
  %len.addr.23 = phi i64 [ 1, %OP55.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr1885 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value1886 = load i256, ptr %contract.call_value.addr1885, align 16
  %sp1887 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.23
  %303 = icmp eq i256 %contract.call_value1886, 0
  %304 = zext i1 %303 to i256
  store i256 %304, ptr %sp1887, align 16
  br i1 %303, label %OP577.JUMPDEST, label %OP574.PUSH1

OP574.PUSH1:                                      ; preds = %OP569.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp1887, i8 0, i64 64, i1 false)
  %305 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp1887, i8 16)
  %.not7035 = icmp eq i8 %305, 0
  %spec.select5342 = select i1 %.not7035, i8 16, i8 %305, !prof !6
  br label %return

OP577.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP569.JUMPDEST
  %len.addr.24 = phi i64 [ %len.addr.23, %OP569.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp1905 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.24
  store i256 944, ptr %sp1905, align 16
  %sp1907 = getelementptr i256, ptr %sp1905, i64 1
  store i256 4, ptr %sp1907, align 16
  %306 = add i64 %len.addr.24, 3
  %sp1911 = getelementptr i256, ptr %sp1905, i64 2
  store i256 4, ptr %sp1911, align 16
  %sp1915 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %306
  store i256 4, ptr %sp1915, align 16
  %307 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val7193 = load ptr, ptr %307, align 8
  %308 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val7194 = load i64, ptr %308, align 8
  %309 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val7193, i64 %arg.contract.addr.val7194)
  %sp1921 = getelementptr i256, ptr %sp1905, i64 4
  %310 = and i256 %309, 1461501637330902918203684832716283019655932542975
  store i256 %310, ptr %sp1907, align 16
  store i256 4, ptr %sp1911, align 16
  store i256 36, ptr %sp1915, align 16
  store i256 36, ptr %sp1921, align 16
  %311 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 36, ptr %arg.contract.addr.val7193, i64 %arg.contract.addr.val7194)
  %sp1970 = getelementptr i256, ptr %sp1905, i64 5
  store i256 32, ptr %sp1970, align 16
  store i256 %311, ptr %sp1911, align 16
  store i256 4, ptr %sp1915, align 16
  store i256 68, ptr %sp1921, align 16
  br label %OP1511.JUMPDEST

OP603.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %312 = add i64 %len.addr.51, 1
  %sp1997 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp1997, align 16
  %mload.out.slot2001 = alloca i256, align 16
  %313 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2001, ptr %arg.ecx.addr)
  %.not7030 = icmp eq i8 %313, 0
  br i1 %.not7030, label %OP605.MLOAD.contd, label %return, !prof !6

OP605.MLOAD.contd:                                ; preds = %OP603.JUMPDEST
  %mload.out2002 = load i256, ptr %mload.out.slot2001, align 16
  store i256 %mload.out2002, ptr %sp1997, align 16
  %314 = add i64 %len.addr.51, 2
  %sp2007 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %312
  store i256 %mload.out2002, ptr %sp2007, align 16
  %sp2009 = getelementptr i256, ptr %sp1997, i64 -1
  %dup32010 = load i256, ptr %sp2009, align 16
  %sp2011 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %314
  %.not7031 = icmp ne i256 %dup32010, 0
  %315 = zext i1 %.not7031 to i256
  store i256 %315, ptr %sp2011, align 16
  %sp2031 = getelementptr i256, ptr %sp1997, i64 3
  store i256 %mload.out2002, ptr %sp2031, align 16
  %316 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out2002, i256 %315, ptr %arg.ecx.addr)
  %.not7032 = icmp eq i8 %316, 0
  br i1 %.not7032, label %OP614.PUSH1, label %return, !prof !6

OP614.PUSH1:                                      ; preds = %OP605.MLOAD.contd
  store i256 32, ptr %sp2011, align 16
  %b2043 = load i256, ptr %sp2007, align 16
  %317 = add i256 %b2043, 32
  %swap.b2049 = load i256, ptr %sp2009, align 16
  store i256 %317, ptr %sp2009, align 16
  store i256 %swap.b2049, ptr %sp2007, align 16
  store i256 64, ptr %sp1997, align 16
  %mload.out.slot2057 = alloca i256, align 16
  %318 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2057, ptr %arg.ecx.addr)
  %.not7033 = icmp eq i8 %318, 0
  br i1 %.not7033, label %OP620.MLOAD.contd, label %return, !prof !6

OP620.MLOAD.contd:                                ; preds = %OP614.PUSH1
  %mload.out2058 = load i256, ptr %mload.out.slot2057, align 16
  %swap.b2068 = load i256, ptr %sp2009, align 16
  store i256 %swap.b2068, ptr %sp2007, align 16
  %319 = sub i256 %swap.b2068, %mload.out2058
  store i256 %319, ptr %sp2009, align 16
  store i256 %mload.out2058, ptr %sp1997, align 16
  %320 = add i64 %len.addr.51, -1
  %321 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2009, i8 2)
  %.not7034 = icmp eq i8 %321, 0
  %spec.select5343 = select i1 %.not7034, i8 2, i8 %321, !prof !6
  br label %return

OP632.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP65.DUP1
  %len.addr.26 = phi i64 [ 1, %OP65.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.call_value.addr2090 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value2091 = load i256, ptr %contract.call_value.addr2090, align 16
  %sp2092 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.26
  %322 = icmp eq i256 %contract.call_value2091, 0
  %323 = zext i1 %322 to i256
  store i256 %323, ptr %sp2092, align 16
  br i1 %322, label %OP640.JUMPDEST, label %OP637.PUSH1

OP637.PUSH1:                                      ; preds = %OP632.JUMPDEST
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp2092, i8 0, i64 64, i1 false)
  %324 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2092, i8 16)
  %.not7022 = icmp eq i8 %324, 0
  %spec.select5344 = select i1 %.not7022, i8 16, i8 %324, !prof !6
  br label %return

OP640.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP632.JUMPDEST
  %len.addr.27 = phi i64 [ %len.addr.26, %OP632.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp2110 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.27
  store i256 1066, ptr %sp2110, align 16
  %sp2112 = getelementptr i256, ptr %sp2110, i64 1
  store i256 4, ptr %sp2112, align 16
  %325 = add i64 %len.addr.27, 3
  %sp2116 = getelementptr i256, ptr %sp2110, i64 2
  store i256 4, ptr %sp2116, align 16
  %sp2120 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %325
  store i256 4, ptr %sp2120, align 16
  %326 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 72
  %arg.contract.addr.val7189 = load ptr, ptr %326, align 8
  %327 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 80
  %arg.contract.addr.val7190 = load i64, ptr %327, align 8
  %328 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 4, ptr %arg.contract.addr.val7189, i64 %arg.contract.addr.val7190)
  %sp2126 = getelementptr i256, ptr %sp2110, i64 4
  %329 = and i256 %328, 1461501637330902918203684832716283019655932542975
  store i256 %329, ptr %sp2112, align 16
  store i256 4, ptr %sp2116, align 16
  store i256 36, ptr %sp2120, align 16
  store i256 36, ptr %sp2126, align 16
  %330 = tail call fastcc i256 @__revmc_ir_builtin_calldataload(i256 36, ptr %arg.contract.addr.val7189, i64 %arg.contract.addr.val7190)
  %sp2170 = getelementptr i256, ptr %sp2110, i64 5
  %331 = and i256 %330, 1461501637330902918203684832716283019655932542975
  store i256 32, ptr %sp2170, align 16
  store i256 %331, ptr %sp2116, align 16
  store i256 4, ptr %sp2120, align 16
  store i256 68, ptr %sp2126, align 16
  br label %OP1527.JUMPDEST

OP668.JUMPDEST:                                   ; preds = %dynamic_jump_table
  %332 = add i64 %len.addr.51, 1
  %sp2210 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.51
  store i256 64, ptr %sp2210, align 16
  %mload.out.slot2214 = alloca i256, align 16
  %333 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2214, ptr %arg.ecx.addr)
  %.not7018 = icmp eq i8 %333, 0
  br i1 %.not7018, label %OP670.MLOAD.contd, label %return, !prof !6

OP670.MLOAD.contd:                                ; preds = %OP668.JUMPDEST
  %mload.out2215 = load i256, ptr %mload.out.slot2214, align 16
  store i256 %mload.out2215, ptr %sp2210, align 16
  %334 = add i64 %len.addr.51, 2
  %sp2220 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %332
  store i256 %mload.out2215, ptr %sp2220, align 16
  %sp2222 = getelementptr i256, ptr %sp2210, i64 -1
  %dup32223 = load i256, ptr %sp2222, align 16
  %sp2224 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %334
  store i256 %dup32223, ptr %sp2224, align 16
  %sp2228 = getelementptr i256, ptr %sp2210, i64 3
  store i256 %mload.out2215, ptr %sp2228, align 16
  %335 = tail call fastcc i8 @__revmc_ir_builtin_mstore(i256 %mload.out2215, i256 %dup32223, ptr %arg.ecx.addr)
  %.not7019 = icmp eq i8 %335, 0
  br i1 %.not7019, label %OP675.PUSH1, label %return, !prof !6

OP675.PUSH1:                                      ; preds = %OP670.MLOAD.contd
  store i256 32, ptr %sp2224, align 16
  %b2240 = load i256, ptr %sp2220, align 16
  %336 = add i256 %b2240, 32
  %swap.b2246 = load i256, ptr %sp2222, align 16
  store i256 %336, ptr %sp2222, align 16
  store i256 %swap.b2246, ptr %sp2220, align 16
  store i256 64, ptr %sp2210, align 16
  %mload.out.slot2254 = alloca i256, align 16
  %337 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot2254, ptr %arg.ecx.addr)
  %.not7020 = icmp eq i8 %337, 0
  br i1 %.not7020, label %OP681.MLOAD.contd, label %return, !prof !6

OP681.MLOAD.contd:                                ; preds = %OP675.PUSH1
  %mload.out2255 = load i256, ptr %mload.out.slot2254, align 16
  %swap.b2265 = load i256, ptr %sp2222, align 16
  store i256 %swap.b2265, ptr %sp2220, align 16
  %338 = sub i256 %swap.b2265, %mload.out2255
  store i256 %338, ptr %sp2222, align 16
  store i256 %mload.out2255, ptr %sp2210, align 16
  %339 = add i64 %len.addr.51, -1
  %340 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2222, i8 2)
  %.not7021 = icmp eq i8 %340, 0
  %spec.select5345 = select i1 %.not7021, i8 2, i8 %340, !prof !6
  br label %return

OP687.JUMPDEST.sink.split.loopexit8751:           ; preds = %dynamic_jump_table
  br label %OP687.JUMPDEST.sink.split

OP687.JUMPDEST.sink.split:                        ; preds = %dynamic_jump_table, %OP687.JUMPDEST.sink.split.loopexit8751, %OP3.PUSH1, %OP65.DUP1, %OP60.DUP1
  %len.addr.25.sink8666 = phi i64 [ 1, %OP60.DUP1 ], [ 0, %OP3.PUSH1 ], [ 1, %OP65.DUP1 ], [ %len.addr.51, %OP687.JUMPDEST.sink.split.loopexit8751 ], [ %len.addr.51, %dynamic_jump_table ]
  %.sink = phi i256 [ 978, %OP60.DUP1 ], [ 183, %OP3.PUSH1 ], [ 183, %OP65.DUP1 ], [ 183, %OP687.JUMPDEST.sink.split.loopexit8751 ], [ 978, %dynamic_jump_table ]
  %341 = add i64 %len.addr.25.sink8666, 1
  %sp2084 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.25.sink8666
  store i256 %.sink, ptr %sp2084, align 16
  br label %OP687.JUMPDEST

OP687.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP687.JUMPDEST.sink.split
  %len.addr.28 = phi i64 [ %341, %OP687.JUMPDEST.sink.split ], [ %len.addr.51, %dynamic_jump_table ]
  %342 = add i64 %len.addr.28, 1
  %contract.call_value.addr2281 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 96
  %contract.call_value2282 = load i256, ptr %contract.call_value.addr2281, align 16
  %sp2283 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.28
  store i256 %contract.call_value2282, ptr %sp2283, align 16
  %343 = add i64 %len.addr.28, 2
  %sp2285 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %342
  store i256 3, ptr %sp2285, align 16
  %344 = add i64 %len.addr.28, 3
  %sp2287 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %343
  store i256 0, ptr %sp2287, align 16
  %345 = add i64 %len.addr.28, 4
  %contract.caller.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller = load i160, ptr %contract.caller.addr, align 16
  %346 = tail call i160 @llvm.bswap.i160(i160 %contract.caller)
  %347 = zext i160 %346 to i256
  %sp2289 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %344
  %348 = add i64 %len.addr.28, 5
  %sp2291 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %345
  store i256 %347, ptr %sp2289, align 16
  store i256 0, ptr %sp2291, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1088)
  %ecx.memory.addr.i7365 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7366 = load ptr, ptr %ecx.memory.addr.i7365, align 8, !alias.scope !1088
  %ecx.memory.len.addr.i7367 = getelementptr inbounds i8, ptr %ecx.memory.i7366, i64 16
  %ecx.memory.len.i7368 = load i64, ptr %ecx.memory.len.addr.i7367, align 8, !noalias !1088
  %ecx.memory.last_checkpoint.addr.i7369 = getelementptr inbounds i8, ptr %ecx.memory.i7366, i64 48
  %ecx.memory.last_checkpoint.i7370 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7369, align 8, !noalias !1088
  %349 = sub i64 %ecx.memory.len.i7368, %ecx.memory.last_checkpoint.i7370
  %350 = icmp ult i64 %349, 32
  br i1 %350, label %resize.i7377, label %OP698.PUSH1, !prof !5

resize.i7377:                                     ; preds = %OP687.JUMPDEST
  %351 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7378 = icmp eq i8 %351, 0
  br i1 %.not.i7378, label %OP698.PUSH1, label %return, !prof !6

OP698.PUSH1:                                      ; preds = %OP687.JUMPDEST, %resize.i7377
  %ecx.memory.buffer.ptr.shared.addr.i7372 = getelementptr inbounds i8, ptr %ecx.memory.i7366, i64 8
  %ecx.memory.buffer.ptr.shared.i7373 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7372, align 8, !noalias !1088
  %ecx.memory.buffer.ptr.i7374 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7373, i64 %ecx.memory.last_checkpoint.i7370
  %352 = tail call i256 @llvm.bswap.i256(i256 %347)
  store i256 %352, ptr %ecx.memory.buffer.ptr.i7374, align 1, !noalias !1088
  %b2321 = load i256, ptr %sp2287, align 16
  %353 = add i256 %b2321, 32
  %swap.b2327 = load i256, ptr %sp2285, align 16
  store i256 %353, ptr %sp2285, align 16
  store i256 %swap.b2327, ptr %sp2287, align 16
  store i256 %353, ptr %sp2289, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1091)
  %ecx.memory.i7381 = load ptr, ptr %ecx.memory.addr.i7365, align 8, !alias.scope !1091
  %ecx.memory.len.addr.i7382 = getelementptr inbounds i8, ptr %ecx.memory.i7381, i64 16
  %ecx.memory.len.i7383 = load i64, ptr %ecx.memory.len.addr.i7382, align 8, !noalias !1091
  %ecx.memory.last_checkpoint.addr.i7384 = getelementptr inbounds i8, ptr %ecx.memory.i7381, i64 48
  %ecx.memory.last_checkpoint.i7385 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7384, align 8, !noalias !1091
  %354 = sub i64 %ecx.memory.len.i7383, %ecx.memory.last_checkpoint.i7385
  %355 = icmp ugt i256 %353, 18446744073709551615
  %356 = trunc i256 %353 to i64
  %357 = add i64 %356, 32
  %358 = icmp ugt i64 %356, -33
  %359 = or i1 %355, %358
  %360 = select i1 %359, i64 -1, i64 %357
  %361 = icmp ugt i64 %360, %354
  br i1 %361, label %resize.i7392, label %OP703.PUSH1, !prof !5

resize.i7392:                                     ; preds = %OP698.PUSH1
  %362 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %360)
  %.not.i7393 = icmp eq i8 %362, 0
  br i1 %.not.i7393, label %OP703.PUSH1, label %return, !prof !6

OP703.PUSH1:                                      ; preds = %OP698.PUSH1, %resize.i7392
  %ecx.memory.buffer.ptr.shared.addr.i7387 = getelementptr inbounds i8, ptr %ecx.memory.i7381, i64 8
  %ecx.memory.buffer.ptr.shared.i7388 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7387, align 8, !noalias !1091
  %ecx.memory.buffer.ptr.i7389 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7388, i64 %ecx.memory.last_checkpoint.i7385
  %slot.i7390 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7389, i64 %356
  %363 = tail call i256 @llvm.bswap.i256(i256 %swap.b2327)
  store i256 %363, ptr %slot.i7390, align 1, !noalias !1091
  %b2343 = load i256, ptr %sp2285, align 16
  %364 = add i256 %b2343, 32
  store i256 %364, ptr %sp2285, align 16
  store i256 0, ptr %sp2287, align 16
  %365 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2285)
  %.not7007 = icmp eq i8 %365, 0
  br i1 %.not7007, label %OP707.PUSH1, label %return, !prof !6

OP707.PUSH1:                                      ; preds = %OP703.PUSH1
  store i256 0, ptr %sp2287, align 16
  %dup32353 = load i256, ptr %sp2283, align 16
  store i256 %dup32353, ptr %sp2289, align 16
  %dup32357 = load i256, ptr %sp2285, align 16
  store i256 %dup32357, ptr %sp2291, align 16
  %366 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2291, i8 17)
  %.not7008 = icmp eq i8 %366, 0
  br i1 %.not7008, label %OP711.ADD, label %return, !prof !6

OP711.ADD:                                        ; preds = %OP707.PUSH1
  %a2363 = load i256, ptr %sp2291, align 16
  %b2365 = load i256, ptr %sp2289, align 16
  %367 = add i256 %b2365, %a2363
  %swap.b2371 = load i256, ptr %sp2283, align 16
  store i256 %367, ptr %sp2283, align 16
  store i256 %swap.b2371, ptr %sp2289, align 16
  %swap.b2382 = load i256, ptr %sp2285, align 16
  store i256 %367, ptr %sp2285, align 16
  store i256 %swap.b2382, ptr %sp2287, align 16
  %368 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2285, i8 17)
  %.not7009 = icmp eq i8 %368, 0
  br i1 %.not7009, label %OP718.POP, label %return, !prof !6

OP718.POP:                                        ; preds = %OP711.ADD
  store i256 %347, ptr %sp2283, align 16
  store i256 -13569407764933135957707662995615205924891434450008393826643960198943177371492, ptr %sp2285, align 16
  store i256 %contract.call_value2282, ptr %sp2287, align 16
  store i256 64, ptr %sp2289, align 16
  %ecx.memory.i7396 = load ptr, ptr %ecx.memory.addr.i7365, align 8
  %ecx.memory.len.addr.i7397 = getelementptr inbounds i8, ptr %ecx.memory.i7396, i64 16
  %ecx.memory.len.i7398 = load i64, ptr %ecx.memory.len.addr.i7397, align 8, !noalias !1094
  %ecx.memory.last_checkpoint.addr.i7399 = getelementptr inbounds i8, ptr %ecx.memory.i7396, i64 48
  %ecx.memory.last_checkpoint.i7400 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7399, align 8, !noalias !1094
  %369 = sub i64 %ecx.memory.len.i7398, %ecx.memory.last_checkpoint.i7400
  %370 = icmp ult i64 %369, 96
  br i1 %370, label %resize.i7408, label %OP725.MLOAD.contd, !prof !5

resize.i7408:                                     ; preds = %OP718.POP
  %371 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1098
  %.not.i7409 = icmp eq i8 %371, 0
  br i1 %.not.i7409, label %resize.i7408.OP725.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7408.OP725.MLOAD.contd_crit_edge:         ; preds = %resize.i7408
  %dup32418.pre = load i256, ptr %sp2287, align 16
  %ecx.memory.i7412.pre = load ptr, ptr %ecx.memory.addr.i7365, align 8, !alias.scope !1099
  br label %OP725.MLOAD.contd

OP725.MLOAD.contd:                                ; preds = %resize.i7408.OP725.MLOAD.contd_crit_edge, %OP718.POP
  %ecx.memory.i7412 = phi ptr [ %ecx.memory.i7412.pre, %resize.i7408.OP725.MLOAD.contd_crit_edge ], [ %ecx.memory.i7396, %OP718.POP ]
  %dup32418 = phi i256 [ %dup32418.pre, %resize.i7408.OP725.MLOAD.contd_crit_edge ], [ %contract.call_value2282, %OP718.POP ]
  %ecx.memory.buffer.ptr.shared.addr.i7402 = getelementptr inbounds i8, ptr %ecx.memory.i7396, i64 8
  %ecx.memory.buffer.ptr.shared.i7403 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7402, align 8, !noalias !1094
  %ecx.memory.buffer.ptr.i7404 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7403, i64 %ecx.memory.last_checkpoint.i7400
  %slot.i7405 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7404, i64 64
  %slot.value.i7406 = load i256, ptr %slot.i7405, align 1, !noalias !1094
  %372 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7406)
  store i256 %372, ptr %sp2289, align 16
  store i256 %372, ptr %sp2291, align 16
  %sp2419 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %348
  store i256 %dup32418, ptr %sp2419, align 16
  %sp2423 = getelementptr i256, ptr %sp2283, i64 6
  store i256 %372, ptr %sp2423, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1099)
  %ecx.memory.len.addr.i7413 = getelementptr inbounds i8, ptr %ecx.memory.i7412, i64 16
  %ecx.memory.len.i7414 = load i64, ptr %ecx.memory.len.addr.i7413, align 8, !noalias !1099
  %ecx.memory.last_checkpoint.addr.i7415 = getelementptr inbounds i8, ptr %ecx.memory.i7412, i64 48
  %ecx.memory.last_checkpoint.i7416 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7415, align 8, !noalias !1099
  %373 = sub i64 %ecx.memory.len.i7414, %ecx.memory.last_checkpoint.i7416
  %374 = icmp ugt i256 %372, 18446744073709551615
  %375 = trunc i256 %372 to i64
  %376 = add i64 %375, 32
  %377 = icmp ugt i64 %375, -33
  %378 = or i1 %374, %377
  %379 = select i1 %378, i64 -1, i64 %376
  %380 = icmp ugt i64 %379, %373
  br i1 %380, label %resize.i7423, label %OP730.PUSH1, !prof !5

resize.i7423:                                     ; preds = %OP725.MLOAD.contd
  %381 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %379)
  %.not.i7424 = icmp eq i8 %381, 0
  br i1 %.not.i7424, label %OP730.PUSH1, label %return, !prof !6

OP730.PUSH1:                                      ; preds = %OP725.MLOAD.contd, %resize.i7423
  %ecx.memory.buffer.ptr.shared.addr.i7418 = getelementptr inbounds i8, ptr %ecx.memory.i7412, i64 8
  %ecx.memory.buffer.ptr.shared.i7419 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7418, align 8, !noalias !1099
  %ecx.memory.buffer.ptr.i7420 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7419, i64 %ecx.memory.last_checkpoint.i7416
  %slot.i7421 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7420, i64 %375
  %382 = tail call i256 @llvm.bswap.i256(i256 %dup32418)
  store i256 %382, ptr %slot.i7421, align 1, !noalias !1099
  store i256 32, ptr %sp2419, align 16
  %b2435 = load i256, ptr %sp2291, align 16
  %383 = add i256 %b2435, 32
  %swap.b2441 = load i256, ptr %sp2287, align 16
  store i256 %383, ptr %sp2287, align 16
  store i256 %swap.b2441, ptr %sp2291, align 16
  store i256 64, ptr %sp2289, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1102)
  %ecx.memory.i7427 = load ptr, ptr %ecx.memory.addr.i7365, align 8, !alias.scope !1102, !noalias !1105
  %ecx.memory.len.addr.i7428 = getelementptr inbounds i8, ptr %ecx.memory.i7427, i64 16
  %ecx.memory.len.i7429 = load i64, ptr %ecx.memory.len.addr.i7428, align 8, !noalias !1107
  %ecx.memory.last_checkpoint.addr.i7430 = getelementptr inbounds i8, ptr %ecx.memory.i7427, i64 48
  %ecx.memory.last_checkpoint.i7431 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7430, align 8, !noalias !1107
  %384 = sub i64 %ecx.memory.len.i7429, %ecx.memory.last_checkpoint.i7431
  %385 = icmp ult i64 %384, 96
  br i1 %385, label %resize.i7439, label %OP736.MLOAD.contd, !prof !5

resize.i7439:                                     ; preds = %OP730.PUSH1
  %386 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1105
  %.not.i7440 = icmp eq i8 %386, 0
  br i1 %.not.i7440, label %resize.i7439.OP736.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7439.OP736.MLOAD.contd_crit_edge:         ; preds = %resize.i7439
  %swap.b2460.pre = load i256, ptr %sp2287, align 16
  br label %OP736.MLOAD.contd

OP736.MLOAD.contd:                                ; preds = %resize.i7439.OP736.MLOAD.contd_crit_edge, %OP730.PUSH1
  %swap.b2460 = phi i256 [ %swap.b2460.pre, %resize.i7439.OP736.MLOAD.contd_crit_edge ], [ %383, %OP730.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7433 = getelementptr inbounds i8, ptr %ecx.memory.i7427, i64 8
  %ecx.memory.buffer.ptr.shared.i7434 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7433, align 8, !noalias !1107
  %ecx.memory.buffer.ptr.i7435 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7434, i64 %ecx.memory.last_checkpoint.i7431
  %slot.i7436 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7435, i64 64
  %slot.value.i7437 = load i256, ptr %slot.i7436, align 1, !noalias !1107
  %387 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7437)
  store i256 %swap.b2460, ptr %sp2291, align 16
  %388 = sub i256 %swap.b2460, %387
  store i256 %388, ptr %sp2287, align 16
  store i256 %387, ptr %sp2289, align 16
  %389 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2283, i8 2)
  %.not7013 = icmp eq i8 %389, 0
  br i1 %.not7013, label %OP742.JUMP, label %return, !prof !6

OP742.JUMP:                                       ; preds = %OP736.MLOAD.contd
  %390 = add i64 %len.addr.28, -1
  %sp2475 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %390
  %a2476 = load i256, ptr %sp2475, align 16
  br label %dynamic_jump_table.preheader

OP743.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP84.JUMPDEST
  %len.addr.29 = phi i64 [ %35, %OP84.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp2479 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.29
  %391 = add i64 %len.addr.29, 2
  %sp2483 = getelementptr i256, ptr %sp2479, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %sp2479, i8 0, i64 64, i1 false)
  %392 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2483, i8 17)
  %.not7177 = icmp eq i8 %392, 0
  br i1 %.not7177, label %OP747.PUSH1, label %return, !prof !6

OP747.PUSH1:                                      ; preds = %OP743.JUMPDEST
  %393 = add i64 %len.addr.29, 3
  %sp2487 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %391
  %394 = add i64 %len.addr.29, 4
  %dup22490 = load i256, ptr %sp2483, align 16
  %sp2491 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %393
  %sp2493 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %394
  %395 = shl i256 %dup22490, 8
  %396 = and i256 %395, 256
  %397 = xor i256 %396, 256
  %398 = add nsw i256 %397, -1
  %399 = and i256 %398, %dup22490
  %400 = lshr i256 %399, 1
  store i256 %400, ptr %sp2483, align 16
  %401 = add nuw i256 %400, 31
  store i256 %401, ptr %sp2493, align 16
  %402 = and i256 %401, -32
  %403 = add nuw i256 %402, 32
  store i256 %403, ptr %sp2487, align 16
  store i256 64, ptr %sp2491, align 16
  %ecx.memory.addr.i7442 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7443 = load ptr, ptr %ecx.memory.addr.i7442, align 8
  %ecx.memory.len.addr.i7444 = getelementptr inbounds i8, ptr %ecx.memory.i7443, i64 16
  %ecx.memory.len.i7445 = load i64, ptr %ecx.memory.len.addr.i7444, align 8, !noalias !1108
  %ecx.memory.last_checkpoint.addr.i7446 = getelementptr inbounds i8, ptr %ecx.memory.i7443, i64 48
  %ecx.memory.last_checkpoint.i7447 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7446, align 8, !noalias !1108
  %404 = sub i64 %ecx.memory.len.i7445, %ecx.memory.last_checkpoint.i7447
  %405 = icmp ult i64 %404, 96
  br i1 %405, label %resize.i7455, label %OP770.MLOAD.contd, !prof !5

resize.i7455:                                     ; preds = %OP747.PUSH1
  %406 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1112
  %.not.i7456 = icmp eq i8 %406, 0
  br i1 %.not.i7456, label %resize.i7455.OP770.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7455.OP770.MLOAD.contd_crit_edge:         ; preds = %resize.i7455
  %swap.b2592.pre = load i256, ptr %sp2487, align 16
  %ecx.memory.i7459.pre = load ptr, ptr %ecx.memory.addr.i7442, align 8, !alias.scope !1113
  br label %OP770.MLOAD.contd

OP770.MLOAD.contd:                                ; preds = %resize.i7455.OP770.MLOAD.contd_crit_edge, %OP747.PUSH1
  %ecx.memory.i7459 = phi ptr [ %ecx.memory.i7459.pre, %resize.i7455.OP770.MLOAD.contd_crit_edge ], [ %ecx.memory.i7443, %OP747.PUSH1 ]
  %swap.b2592 = phi i256 [ %swap.b2592.pre, %resize.i7455.OP770.MLOAD.contd_crit_edge ], [ %403, %OP747.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7449 = getelementptr inbounds i8, ptr %ecx.memory.i7443, i64 8
  %ecx.memory.buffer.ptr.shared.i7450 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7449, align 8, !noalias !1108
  %ecx.memory.buffer.ptr.i7451 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7450, i64 %ecx.memory.last_checkpoint.i7447
  %slot.i7452 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7451, i64 64
  %slot.value.i7453 = load i256, ptr %slot.i7452, align 1, !noalias !1108
  %407 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7453)
  store i256 %407, ptr %sp2487, align 16
  %408 = add i256 %swap.b2592, %407
  store i256 %408, ptr %sp2491, align 16
  store i256 64, ptr %sp2493, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1113)
  %ecx.memory.len.addr.i7460 = getelementptr inbounds i8, ptr %ecx.memory.i7459, i64 16
  %ecx.memory.len.i7461 = load i64, ptr %ecx.memory.len.addr.i7460, align 8, !noalias !1113
  %ecx.memory.last_checkpoint.addr.i7462 = getelementptr inbounds i8, ptr %ecx.memory.i7459, i64 48
  %ecx.memory.last_checkpoint.i7463 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7462, align 8, !noalias !1113
  %409 = sub i64 %ecx.memory.len.i7461, %ecx.memory.last_checkpoint.i7463
  %410 = icmp ult i64 %409, 96
  br i1 %410, label %resize.i7470, label %OP776.DUP1, !prof !5

resize.i7470:                                     ; preds = %OP770.MLOAD.contd
  %411 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i7471 = icmp eq i8 %411, 0
  br i1 %.not.i7471, label %OP776.DUP1, label %return, !prof !6

OP776.DUP1:                                       ; preds = %OP770.MLOAD.contd, %resize.i7470
  %ecx.memory.buffer.ptr.shared.addr.i7465 = getelementptr inbounds i8, ptr %ecx.memory.i7459, i64 8
  %ecx.memory.buffer.ptr.shared.i7466 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7465, align 8, !noalias !1113
  %ecx.memory.buffer.ptr.i7467 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7466, i64 %ecx.memory.last_checkpoint.i7463
  %slot.i7468 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7467, i64 64
  %412 = tail call i256 @llvm.bswap.i256(i256 %408)
  store i256 %412, ptr %slot.i7468, align 1, !noalias !1113
  %dup12612 = load i256, ptr %sp2487, align 16
  %swap.b2618 = load i256, ptr %sp2479, align 16
  store i256 %dup12612, ptr %sp2479, align 16
  %swap.b2623 = load i256, ptr %sp2483, align 16
  store i256 %swap.b2618, ptr %sp2483, align 16
  store i256 %swap.b2623, ptr %sp2487, align 16
  store i256 %dup12612, ptr %sp2491, align 16
  store i256 %swap.b2623, ptr %sp2493, align 16
  %413 = add i64 %len.addr.29, 6
  %sp2636 = getelementptr i256, ptr %sp2479, i64 5
  store i256 %dup12612, ptr %sp2636, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1116)
  %ecx.memory.i7474 = load ptr, ptr %ecx.memory.addr.i7442, align 8, !alias.scope !1116
  %ecx.memory.len.addr.i7475 = getelementptr inbounds i8, ptr %ecx.memory.i7474, i64 16
  %ecx.memory.len.i7476 = load i64, ptr %ecx.memory.len.addr.i7475, align 8, !noalias !1116
  %ecx.memory.last_checkpoint.addr.i7477 = getelementptr inbounds i8, ptr %ecx.memory.i7474, i64 48
  %ecx.memory.last_checkpoint.i7478 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7477, align 8, !noalias !1116
  %414 = sub i64 %ecx.memory.len.i7476, %ecx.memory.last_checkpoint.i7478
  %415 = icmp ugt i256 %dup12612, 18446744073709551615
  %416 = trunc i256 %dup12612 to i64
  %417 = add i64 %416, 32
  %418 = icmp ugt i64 %416, -33
  %419 = or i1 %415, %418
  %420 = select i1 %419, i64 -1, i64 %417
  %421 = icmp ugt i64 %420, %414
  br i1 %421, label %resize.i7485, label %OP783.PUSH1, !prof !5

resize.i7485:                                     ; preds = %OP776.DUP1
  %422 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %420)
  %.not.i7486 = icmp eq i8 %422, 0
  br i1 %.not.i7486, label %OP783.PUSH1, label %return, !prof !6

OP783.PUSH1:                                      ; preds = %OP776.DUP1, %resize.i7485
  %ecx.memory.buffer.ptr.shared.addr.i7480 = getelementptr inbounds i8, ptr %ecx.memory.i7474, i64 8
  %ecx.memory.buffer.ptr.shared.i7481 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7480, align 8, !noalias !1116
  %ecx.memory.buffer.ptr.i7482 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7481, i64 %ecx.memory.last_checkpoint.i7478
  %slot.i7483 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7482, i64 %416
  %423 = tail call i256 @llvm.bswap.i256(i256 %swap.b2623)
  store i256 %423, ptr %slot.i7483, align 1, !noalias !1116
  %b2648 = load i256, ptr %sp2491, align 16
  %424 = add i256 %b2648, 32
  store i256 %424, ptr %sp2491, align 16
  %dup32652 = load i256, ptr %sp2483, align 16
  store i256 %dup32652, ptr %sp2493, align 16
  store i256 %dup32652, ptr %sp2636, align 16
  %425 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2636, i8 17)
  %.not7181 = icmp eq i8 %425, 0
  br i1 %.not7181, label %OP788.PUSH1, label %return, !prof !6

OP788.PUSH1:                                      ; preds = %OP783.PUSH1
  %sp2661 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %413
  %dup22664 = load i256, ptr %sp2636, align 16
  %sp2665 = getelementptr i256, ptr %sp2479, i64 7
  %426 = add i64 %len.addr.29, 9
  %sp2667 = getelementptr i256, ptr %sp2479, i64 8
  store i256 256, ptr %sp2667, align 16
  %427 = shl i256 %dup22664, 8
  %428 = and i256 %427, 256
  %429 = xor i256 %428, 256
  store i256 %429, ptr %sp2665, align 16
  %430 = add nsw i256 %429, -1
  %431 = and i256 %430, %dup22664
  %432 = lshr i256 %431, 1
  store i256 %432, ptr %sp2636, align 16
  %433 = icmp ult i256 %431, 2
  %434 = zext i1 %433 to i256
  store i256 %434, ptr %sp2661, align 16
  br i1 %433, label %OP858.JUMPDEST, label %OP804.DUP1

OP804.DUP1:                                       ; preds = %OP788.PUSH1
  store i256 31, ptr %sp2665, align 16
  %435 = icmp ugt i256 %431, 63
  %436 = zext i1 %435 to i256
  store i256 %436, ptr %sp2661, align 16
  br i1 %435, label %OP823.JUMPDEST, label %OP809.PUSH2

OP809.PUSH2:                                      ; preds = %OP804.DUP1
  store i256 256, ptr %sp2661, align 16
  store i256 256, ptr %sp2665, align 16
  %sp2744 = getelementptr i256, ptr %sp2479, i64 4
  %dup42745 = load i256, ptr %sp2744, align 16
  store i256 %dup42745, ptr %sp2667, align 16
  %437 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2667, i8 17)
  %.not7182 = icmp eq i8 %437, 0
  br i1 %.not7182, label %OP813.DIV, label %return, !prof !6

OP813.DIV:                                        ; preds = %OP809.PUSH2
  %a2751 = load i256, ptr %sp2667, align 16
  %b2753 = load i256, ptr %sp2665, align 16
  %438 = udiv i256 %a2751, %b2753
  %b2759 = load i256, ptr %sp2661, align 16
  %439 = mul i256 %b2759, %438
  store i256 %439, ptr %sp2661, align 16
  %sp2762 = getelementptr i256, ptr %sp2479, i64 3
  %dup42763 = load i256, ptr %sp2762, align 16
  store i256 %dup42763, ptr %sp2665, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1119)
  %ecx.memory.i7489 = load ptr, ptr %ecx.memory.addr.i7442, align 8, !alias.scope !1119
  %ecx.memory.len.addr.i7490 = getelementptr inbounds i8, ptr %ecx.memory.i7489, i64 16
  %ecx.memory.len.i7491 = load i64, ptr %ecx.memory.len.addr.i7490, align 8, !noalias !1119
  %ecx.memory.last_checkpoint.addr.i7492 = getelementptr inbounds i8, ptr %ecx.memory.i7489, i64 48
  %ecx.memory.last_checkpoint.i7493 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7492, align 8, !noalias !1119
  %440 = sub i64 %ecx.memory.len.i7491, %ecx.memory.last_checkpoint.i7493
  %441 = icmp ugt i256 %dup42763, 18446744073709551615
  %442 = trunc i256 %dup42763 to i64
  %443 = add i64 %442, 32
  %444 = icmp ugt i64 %442, -33
  %445 = or i1 %441, %444
  %446 = select i1 %445, i64 -1, i64 %443
  %447 = icmp ugt i64 %446, %440
  br i1 %447, label %resize.i7500, label %OP817.SWAP2, !prof !5

resize.i7500:                                     ; preds = %OP813.DIV
  %448 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %446)
  %.not.i7501 = icmp eq i8 %448, 0
  br i1 %.not.i7501, label %OP817.SWAP2, label %return, !prof !6

OP817.SWAP2:                                      ; preds = %OP813.DIV, %resize.i7500
  %ecx.memory.buffer.ptr.shared.addr.i7495 = getelementptr inbounds i8, ptr %ecx.memory.i7489, i64 8
  %ecx.memory.buffer.ptr.shared.i7496 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7495, align 8, !noalias !1119
  %ecx.memory.buffer.ptr.i7497 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7496, i64 %ecx.memory.last_checkpoint.i7493
  %slot.i7498 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7497, i64 %442
  %449 = tail call i256 @llvm.bswap.i256(i256 %439)
  store i256 %449, ptr %slot.i7498, align 1, !noalias !1119
  %swap.b2774 = load i256, ptr %sp2491, align 16
  store i256 32, ptr %sp2661, align 16
  %450 = add i256 %swap.b2774, 32
  store i256 %450, ptr %sp2491, align 16
  br label %OP858.JUMPDEST

OP823.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP804.DUP1
  %len.addr.30 = phi i64 [ %413, %OP804.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %451 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.30
  %sp2791 = getelementptr i256, ptr %451, i64 -3
  %dup32792 = load i256, ptr %sp2791, align 16
  %452 = add i64 %len.addr.30, -1
  %sp2797 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %452
  %b2798 = load i256, ptr %sp2797, align 16
  %453 = add i256 %b2798, %dup32792
  %sp2801 = getelementptr i256, ptr %451, i64 -1
  store i256 %453, ptr %sp2791, align 16
  %sp2808 = getelementptr i256, ptr %451, i64 -2
  %swap.b2809 = load i256, ptr %sp2808, align 16
  store i256 %dup32792, ptr %sp2808, align 16
  store i256 %swap.b2809, ptr %sp2801, align 16
  store i256 0, ptr %451, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1122)
  %ecx.memory.addr.i7503 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7504 = load ptr, ptr %ecx.memory.addr.i7503, align 8, !alias.scope !1122
  %ecx.memory.len.addr.i7505 = getelementptr inbounds i8, ptr %ecx.memory.i7504, i64 16
  %ecx.memory.len.i7506 = load i64, ptr %ecx.memory.len.addr.i7505, align 8, !noalias !1122
  %ecx.memory.last_checkpoint.addr.i7507 = getelementptr inbounds i8, ptr %ecx.memory.i7504, i64 48
  %ecx.memory.last_checkpoint.i7508 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7507, align 8, !noalias !1122
  %454 = sub i64 %ecx.memory.len.i7506, %ecx.memory.last_checkpoint.i7508
  %455 = icmp ult i64 %454, 32
  br i1 %455, label %resize.i7514, label %OP830.PUSH1, !prof !5

resize.i7514:                                     ; preds = %OP823.JUMPDEST
  %456 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7515 = icmp eq i8 %456, 0
  br i1 %.not.i7515, label %OP830.PUSH1, label %return, !prof !6

OP830.PUSH1:                                      ; preds = %OP823.JUMPDEST, %resize.i7514
  %ecx.memory.buffer.ptr.shared.addr.i7510 = getelementptr inbounds i8, ptr %ecx.memory.i7504, i64 8
  %ecx.memory.buffer.ptr.shared.i7511 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7510, align 8, !noalias !1122
  %ecx.memory.buffer.ptr.i7512 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7511, i64 %ecx.memory.last_checkpoint.i7508
  %457 = tail call i256 @llvm.bswap.i256(i256 %swap.b2809)
  store i256 %457, ptr %ecx.memory.buffer.ptr.i7512, align 1, !noalias !1122
  store i256 32, ptr %sp2797, align 16
  store i256 0, ptr %451, align 16
  %458 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2801)
  %.not7185 = icmp eq i8 %458, 0
  br i1 %.not7185, label %OP833.SWAP1, label %return, !prof !6

OP833.SWAP1:                                      ; preds = %OP830.PUSH1
  %swap.a2825 = load i256, ptr %sp2801, align 16
  %swap.b2827 = load i256, ptr %sp2808, align 16
  store i256 %swap.a2825, ptr %sp2808, align 16
  store i256 %swap.b2827, ptr %sp2801, align 16
  br label %OP834.JUMPDEST.preheader, !annotation !7

OP834.JUMPDEST.preheader.loopexit:                ; preds = %dynamic_jump_table
  %.phi.trans.insert8584 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.51
  %sp2830.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert8584, i64 -2
  %dup22831.pre.pre = load i256, ptr %sp2830.phi.trans.insert, align 16
  br label %OP834.JUMPDEST.preheader

OP834.JUMPDEST.preheader:                         ; preds = %OP834.JUMPDEST.preheader.loopexit, %OP833.SWAP1
  %dup22831.pre = phi i256 [ %swap.a2825, %OP833.SWAP1 ], [ %dup22831.pre.pre, %OP834.JUMPDEST.preheader.loopexit ]
  %len.addr.31.ph = phi i64 [ %len.addr.30, %OP833.SWAP1 ], [ %len.addr.51, %OP834.JUMPDEST.preheader.loopexit ]
  %459 = add i64 %len.addr.31.ph, 1
  %460 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.31.ph
  %sp2830 = getelementptr i256, ptr %460, i64 -2
  %sp2836 = getelementptr i256, ptr %460, i64 -1
  %sp2838 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %459
  %ecx.memory.addr.i7517 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp2875 = getelementptr i256, ptr %460, i64 -3
  br label %OP834.JUMPDEST

OP834.JUMPDEST:                                   ; preds = %OP834.JUMPDEST.preheader, %OP839.SWAP1
  %dup22831 = phi i256 [ %dup22831.pre, %OP834.JUMPDEST.preheader ], [ %472, %OP839.SWAP1 ]
  store i256 %dup22831, ptr %460, align 16
  %461 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %460, i8 17)
  %.not7186 = icmp eq i8 %461, 0
  br i1 %.not7186, label %OP837.DUP2, label %return, !prof !6

OP837.DUP2:                                       ; preds = %OP834.JUMPDEST
  %dup22837 = load i256, ptr %sp2836, align 16
  store i256 %dup22837, ptr %sp2838, align 16
  %b2843 = load i256, ptr %460, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1125)
  %ecx.memory.i7518 = load ptr, ptr %ecx.memory.addr.i7517, align 8, !alias.scope !1125
  %ecx.memory.len.addr.i7519 = getelementptr inbounds i8, ptr %ecx.memory.i7518, i64 16
  %ecx.memory.len.i7520 = load i64, ptr %ecx.memory.len.addr.i7519, align 8, !noalias !1125
  %ecx.memory.last_checkpoint.addr.i7521 = getelementptr inbounds i8, ptr %ecx.memory.i7518, i64 48
  %ecx.memory.last_checkpoint.i7522 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7521, align 8, !noalias !1125
  %462 = sub i64 %ecx.memory.len.i7520, %ecx.memory.last_checkpoint.i7522
  %463 = icmp ugt i256 %dup22837, 18446744073709551615
  %464 = trunc i256 %dup22837 to i64
  %465 = add i64 %464, 32
  %466 = icmp ugt i64 %464, -33
  %467 = or i1 %463, %466
  %468 = select i1 %467, i64 -1, i64 %465
  %469 = icmp ugt i64 %468, %462
  br i1 %469, label %resize.i7529, label %OP839.SWAP1, !prof !5

resize.i7529:                                     ; preds = %OP837.DUP2
  %470 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %468)
  %.not.i7530 = icmp eq i8 %470, 0
  br i1 %.not.i7530, label %OP839.SWAP1, label %return, !prof !6

OP839.SWAP1:                                      ; preds = %OP837.DUP2, %resize.i7529
  %ecx.memory.buffer.ptr.shared.addr.i7524 = getelementptr inbounds i8, ptr %ecx.memory.i7518, i64 8
  %ecx.memory.buffer.ptr.shared.i7525 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7524, align 8, !noalias !1125
  %ecx.memory.buffer.ptr.i7526 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7525, i64 %ecx.memory.last_checkpoint.i7522
  %slot.i7527 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7526, i64 %464
  %471 = tail call i256 @llvm.bswap.i256(i256 %b2843)
  store i256 %471, ptr %slot.i7527, align 1, !noalias !1125
  %swap.a2846 = load i256, ptr %sp2836, align 16
  %swap.b2848 = load i256, ptr %sp2830, align 16
  %472 = add i256 %swap.b2848, 1
  store i256 %472, ptr %sp2830, align 16
  %473 = add i256 %swap.a2846, 32
  store i256 %473, ptr %sp2836, align 16
  %dup42876 = load i256, ptr %sp2875, align 16
  store i256 %dup42876, ptr %sp2838, align 16
  %474 = icmp ugt i256 %dup42876, %473
  %475 = zext i1 %474 to i256
  store i256 %475, ptr %460, align 16
  br i1 %474, label %OP834.JUMPDEST, label %OP850.DUP3

OP850.DUP3:                                       ; preds = %OP839.SWAP1
  %476 = sub i256 %swap.a2846, %dup42876
  %477 = and i256 %476, 31
  store i256 %dup42876, ptr %460, align 16
  %478 = add i256 %477, %dup42876
  store i256 %478, ptr %sp2875, align 16
  store i256 %dup42876, ptr %sp2836, align 16
  br label %OP858.JUMPDEST, !annotation !7

OP858.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP850.DUP3, %OP817.SWAP2, %OP788.PUSH1
  %len.addr.32 = phi i64 [ %len.addr.31.ph, %OP850.DUP3 ], [ %413, %OP788.PUSH1 ], [ %413, %OP817.SWAP2 ], [ %len.addr.51, %dynamic_jump_table ]
  %479 = add i64 %len.addr.32, -5
  %480 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.32
  %sp2932 = getelementptr i256, ptr %480, i64 -7
  %dup22933 = load i256, ptr %sp2932, align 16
  %sp2934 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %479
  store i256 %dup22933, ptr %sp2934, align 16
  br label %dynamic_jump_table.preheader

OP866.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP200.JUMPDEST
  %len.addr.33 = phi i64 [ %125, %OP200.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp2940 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.33
  store i256 0, ptr %sp2940, align 16
  %481 = add i64 %len.addr.33, 2
  %sp2942 = getelementptr i256, ptr %sp2940, i64 -1
  %dup22943 = load i256, ptr %sp2942, align 16
  %sp2944 = getelementptr i256, ptr %sp2940, i64 1
  store i256 %dup22943, ptr %sp2944, align 16
  %482 = add i64 %len.addr.33, 3
  %sp2946 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %481
  store i256 4, ptr %sp2946, align 16
  %483 = add i64 %len.addr.33, 4
  %sp2948 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %482
  store i256 0, ptr %sp2948, align 16
  %contract.caller.addr2950 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller2951 = load i160, ptr %contract.caller.addr2950, align 16
  %484 = tail call i160 @llvm.bswap.i160(i160 %contract.caller2951)
  %485 = zext i160 %484 to i256
  %sp2952 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %483
  %486 = add i64 %len.addr.33, 6
  %sp2954 = getelementptr i256, ptr %sp2940, i64 5
  store i256 %485, ptr %sp2952, align 16
  store i256 0, ptr %sp2954, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1128)
  %ecx.memory.addr.i7532 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7533 = load ptr, ptr %ecx.memory.addr.i7532, align 8, !alias.scope !1128
  %ecx.memory.len.addr.i7534 = getelementptr inbounds i8, ptr %ecx.memory.i7533, i64 16
  %ecx.memory.len.i7535 = load i64, ptr %ecx.memory.len.addr.i7534, align 8, !noalias !1128
  %ecx.memory.last_checkpoint.addr.i7536 = getelementptr inbounds i8, ptr %ecx.memory.i7533, i64 48
  %ecx.memory.last_checkpoint.i7537 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7536, align 8, !noalias !1128
  %487 = sub i64 %ecx.memory.len.i7535, %ecx.memory.last_checkpoint.i7537
  %488 = icmp ult i64 %487, 32
  br i1 %488, label %resize.i7544, label %OP878.PUSH1, !prof !5

resize.i7544:                                     ; preds = %OP866.JUMPDEST
  %489 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7545 = icmp eq i8 %489, 0
  br i1 %.not.i7545, label %OP878.PUSH1, label %return, !prof !6

OP878.PUSH1:                                      ; preds = %OP866.JUMPDEST, %resize.i7544
  %ecx.memory.buffer.ptr.shared.addr.i7539 = getelementptr inbounds i8, ptr %ecx.memory.i7533, i64 8
  %ecx.memory.buffer.ptr.shared.i7540 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7539, align 8, !noalias !1128
  %ecx.memory.buffer.ptr.i7541 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7540, i64 %ecx.memory.last_checkpoint.i7537
  %490 = tail call i256 @llvm.bswap.i256(i256 %485)
  store i256 %490, ptr %ecx.memory.buffer.ptr.i7541, align 1, !noalias !1128
  %b2984 = load i256, ptr %sp2948, align 16
  %491 = add i256 %b2984, 32
  %swap.b2990 = load i256, ptr %sp2946, align 16
  store i256 %491, ptr %sp2946, align 16
  store i256 %swap.b2990, ptr %sp2948, align 16
  store i256 %491, ptr %sp2952, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1131)
  %ecx.memory.i7548 = load ptr, ptr %ecx.memory.addr.i7532, align 8, !alias.scope !1131
  %ecx.memory.len.addr.i7549 = getelementptr inbounds i8, ptr %ecx.memory.i7548, i64 16
  %ecx.memory.len.i7550 = load i64, ptr %ecx.memory.len.addr.i7549, align 8, !noalias !1131
  %ecx.memory.last_checkpoint.addr.i7551 = getelementptr inbounds i8, ptr %ecx.memory.i7548, i64 48
  %ecx.memory.last_checkpoint.i7552 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7551, align 8, !noalias !1131
  %492 = sub i64 %ecx.memory.len.i7550, %ecx.memory.last_checkpoint.i7552
  %493 = icmp ugt i256 %491, 18446744073709551615
  %494 = trunc i256 %491 to i64
  %495 = add i64 %494, 32
  %496 = icmp ugt i64 %494, -33
  %497 = or i1 %493, %496
  %498 = select i1 %497, i64 -1, i64 %495
  %499 = icmp ugt i64 %498, %492
  br i1 %499, label %resize.i7559, label %OP883.PUSH1, !prof !5

resize.i7559:                                     ; preds = %OP878.PUSH1
  %500 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %498)
  %.not.i7560 = icmp eq i8 %500, 0
  br i1 %.not.i7560, label %OP883.PUSH1, label %return, !prof !6

OP883.PUSH1:                                      ; preds = %OP878.PUSH1, %resize.i7559
  %ecx.memory.buffer.ptr.shared.addr.i7554 = getelementptr inbounds i8, ptr %ecx.memory.i7548, i64 8
  %ecx.memory.buffer.ptr.shared.i7555 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7554, align 8, !noalias !1131
  %ecx.memory.buffer.ptr.i7556 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7555, i64 %ecx.memory.last_checkpoint.i7552
  %slot.i7557 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7556, i64 %494
  %501 = tail call i256 @llvm.bswap.i256(i256 %swap.b2990)
  store i256 %501, ptr %slot.i7557, align 1, !noalias !1131
  %b3006 = load i256, ptr %sp2946, align 16
  %502 = add i256 %b3006, 32
  store i256 %502, ptr %sp2946, align 16
  store i256 0, ptr %sp2948, align 16
  %503 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2946)
  %.not7155 = icmp eq i8 %503, 0
  br i1 %.not7155, label %OP887.PUSH1, label %return, !prof !6

OP887.PUSH1:                                      ; preds = %OP883.PUSH1
  store i256 0, ptr %sp2948, align 16
  %sp3015 = getelementptr i256, ptr %sp2940, i64 -2
  %dup6 = load i256, ptr %sp3015, align 16
  %504 = and i256 %dup6, 1461501637330902918203684832716283019655932542975
  store i256 %504, ptr %sp2952, align 16
  store i256 0, ptr %sp2954, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1134)
  %ecx.memory.i7563 = load ptr, ptr %ecx.memory.addr.i7532, align 8, !alias.scope !1134
  %ecx.memory.len.addr.i7564 = getelementptr inbounds i8, ptr %ecx.memory.i7563, i64 16
  %ecx.memory.len.i7565 = load i64, ptr %ecx.memory.len.addr.i7564, align 8, !noalias !1134
  %ecx.memory.last_checkpoint.addr.i7566 = getelementptr inbounds i8, ptr %ecx.memory.i7563, i64 48
  %ecx.memory.last_checkpoint.i7567 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7566, align 8, !noalias !1134
  %505 = sub i64 %ecx.memory.len.i7565, %ecx.memory.last_checkpoint.i7567
  %506 = icmp ult i64 %505, 32
  br i1 %506, label %resize.i7574, label %OP895.PUSH1, !prof !5

resize.i7574:                                     ; preds = %OP887.PUSH1
  %507 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7575 = icmp eq i8 %507, 0
  br i1 %.not.i7575, label %OP895.PUSH1, label %return, !prof !6

OP895.PUSH1:                                      ; preds = %OP887.PUSH1, %resize.i7574
  %ecx.memory.buffer.ptr.shared.addr.i7569 = getelementptr inbounds i8, ptr %ecx.memory.i7563, i64 8
  %ecx.memory.buffer.ptr.shared.i7570 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7569, align 8, !noalias !1134
  %ecx.memory.buffer.ptr.i7571 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7570, i64 %ecx.memory.last_checkpoint.i7567
  %508 = tail call i256 @llvm.bswap.i256(i256 %504)
  store i256 %508, ptr %ecx.memory.buffer.ptr.i7571, align 1, !noalias !1134
  %b3048 = load i256, ptr %sp2948, align 16
  %509 = add i256 %b3048, 32
  %swap.b3054 = load i256, ptr %sp2946, align 16
  store i256 %509, ptr %sp2946, align 16
  store i256 %swap.b3054, ptr %sp2948, align 16
  store i256 %509, ptr %sp2952, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1137)
  %ecx.memory.i7578 = load ptr, ptr %ecx.memory.addr.i7532, align 8, !alias.scope !1137
  %ecx.memory.len.addr.i7579 = getelementptr inbounds i8, ptr %ecx.memory.i7578, i64 16
  %ecx.memory.len.i7580 = load i64, ptr %ecx.memory.len.addr.i7579, align 8, !noalias !1137
  %ecx.memory.last_checkpoint.addr.i7581 = getelementptr inbounds i8, ptr %ecx.memory.i7578, i64 48
  %ecx.memory.last_checkpoint.i7582 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7581, align 8, !noalias !1137
  %510 = sub i64 %ecx.memory.len.i7580, %ecx.memory.last_checkpoint.i7582
  %511 = icmp ugt i256 %509, 18446744073709551615
  %512 = trunc i256 %509 to i64
  %513 = add i64 %512, 32
  %514 = icmp ugt i64 %512, -33
  %515 = or i1 %511, %514
  %516 = select i1 %515, i64 -1, i64 %513
  %517 = icmp ugt i64 %516, %510
  br i1 %517, label %resize.i7589, label %OP900.PUSH1, !prof !5

resize.i7589:                                     ; preds = %OP895.PUSH1
  %518 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %516)
  %.not.i7590 = icmp eq i8 %518, 0
  br i1 %.not.i7590, label %OP900.PUSH1, label %return, !prof !6

OP900.PUSH1:                                      ; preds = %OP895.PUSH1, %resize.i7589
  %ecx.memory.buffer.ptr.shared.addr.i7584 = getelementptr inbounds i8, ptr %ecx.memory.i7578, i64 8
  %ecx.memory.buffer.ptr.shared.i7585 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7584, align 8, !noalias !1137
  %ecx.memory.buffer.ptr.i7586 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7585, i64 %ecx.memory.last_checkpoint.i7582
  %slot.i7587 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7586, i64 %512
  %519 = tail call i256 @llvm.bswap.i256(i256 %swap.b3054)
  store i256 %519, ptr %slot.i7587, align 1, !noalias !1137
  %b3070 = load i256, ptr %sp2946, align 16
  %520 = add i256 %b3070, 32
  store i256 %520, ptr %sp2946, align 16
  store i256 0, ptr %sp2948, align 16
  %521 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2946)
  %.not7158 = icmp eq i8 %521, 0
  br i1 %.not7158, label %OP904.DUP2, label %return, !prof !6

OP904.DUP2:                                       ; preds = %OP900.PUSH1
  %dup23078 = load i256, ptr %sp2944, align 16
  %swap.b3084 = load i256, ptr %sp2946, align 16
  store i256 %dup23078, ptr %sp2946, align 16
  store i256 %swap.b3084, ptr %sp2948, align 16
  %522 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2946, i8 17)
  %.not7159 = icmp eq i8 %522, 0
  br i1 %.not7159, label %OP907.POP, label %return, !prof !6

OP907.POP:                                        ; preds = %OP904.DUP2
  %dup33090 = load i256, ptr %sp3015, align 16
  %523 = and i256 %dup33090, 1461501637330902918203684832716283019655932542975
  store i256 %523, ptr %sp2944, align 16
  store i256 %485, ptr %sp2946, align 16
  store i256 -52305948261162578668367882225327028569797882979485679342215860919519743330011, ptr %sp2948, align 16
  %dup53116 = load i256, ptr %sp2942, align 16
  store i256 %dup53116, ptr %sp2952, align 16
  store i256 64, ptr %sp2954, align 16
  %ecx.memory.i7593 = load ptr, ptr %ecx.memory.addr.i7532, align 8
  %ecx.memory.len.addr.i7594 = getelementptr inbounds i8, ptr %ecx.memory.i7593, i64 16
  %ecx.memory.len.i7595 = load i64, ptr %ecx.memory.len.addr.i7594, align 8, !noalias !1140
  %ecx.memory.last_checkpoint.addr.i7596 = getelementptr inbounds i8, ptr %ecx.memory.i7593, i64 48
  %ecx.memory.last_checkpoint.i7597 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7596, align 8, !noalias !1140
  %524 = sub i64 %ecx.memory.len.i7595, %ecx.memory.last_checkpoint.i7597
  %525 = icmp ult i64 %524, 96
  br i1 %525, label %resize.i7605, label %OP917.MLOAD.contd, !prof !5

resize.i7605:                                     ; preds = %OP907.POP
  %526 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1144
  %.not.i7606 = icmp eq i8 %526, 0
  br i1 %.not.i7606, label %resize.i7605.OP917.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7605.OP917.MLOAD.contd_crit_edge:         ; preds = %resize.i7605
  %dup33132.pre = load i256, ptr %sp2952, align 16
  %ecx.memory.i7609.pre = load ptr, ptr %ecx.memory.addr.i7532, align 8, !alias.scope !1145
  br label %OP917.MLOAD.contd

OP917.MLOAD.contd:                                ; preds = %resize.i7605.OP917.MLOAD.contd_crit_edge, %OP907.POP
  %ecx.memory.i7609 = phi ptr [ %ecx.memory.i7609.pre, %resize.i7605.OP917.MLOAD.contd_crit_edge ], [ %ecx.memory.i7593, %OP907.POP ]
  %dup33132 = phi i256 [ %dup33132.pre, %resize.i7605.OP917.MLOAD.contd_crit_edge ], [ %dup53116, %OP907.POP ]
  %ecx.memory.buffer.ptr.shared.addr.i7599 = getelementptr inbounds i8, ptr %ecx.memory.i7593, i64 8
  %ecx.memory.buffer.ptr.shared.i7600 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7599, align 8, !noalias !1140
  %ecx.memory.buffer.ptr.i7601 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7600, i64 %ecx.memory.last_checkpoint.i7597
  %slot.i7602 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7601, i64 64
  %slot.value.i7603 = load i256, ptr %slot.i7602, align 1, !noalias !1140
  %527 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7603)
  store i256 %527, ptr %sp2954, align 16
  %528 = add i64 %len.addr.33, 7
  %sp3129 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %486
  store i256 %527, ptr %sp3129, align 16
  %sp3133 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %528
  store i256 %dup33132, ptr %sp3133, align 16
  %sp3137 = getelementptr i256, ptr %sp2940, i64 8
  store i256 %527, ptr %sp3137, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1145)
  %ecx.memory.len.addr.i7610 = getelementptr inbounds i8, ptr %ecx.memory.i7609, i64 16
  %ecx.memory.len.i7611 = load i64, ptr %ecx.memory.len.addr.i7610, align 8, !noalias !1145
  %ecx.memory.last_checkpoint.addr.i7612 = getelementptr inbounds i8, ptr %ecx.memory.i7609, i64 48
  %ecx.memory.last_checkpoint.i7613 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7612, align 8, !noalias !1145
  %529 = sub i64 %ecx.memory.len.i7611, %ecx.memory.last_checkpoint.i7613
  %530 = icmp ugt i256 %527, 18446744073709551615
  %531 = trunc i256 %527 to i64
  %532 = add i64 %531, 32
  %533 = icmp ugt i64 %531, -33
  %534 = or i1 %530, %533
  %535 = select i1 %534, i64 -1, i64 %532
  %536 = icmp ugt i64 %535, %529
  br i1 %536, label %resize.i7620, label %OP922.PUSH1, !prof !5

resize.i7620:                                     ; preds = %OP917.MLOAD.contd
  %537 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %535)
  %.not.i7621 = icmp eq i8 %537, 0
  br i1 %.not.i7621, label %OP922.PUSH1, label %return, !prof !6

OP922.PUSH1:                                      ; preds = %OP917.MLOAD.contd, %resize.i7620
  %ecx.memory.buffer.ptr.shared.addr.i7615 = getelementptr inbounds i8, ptr %ecx.memory.i7609, i64 8
  %ecx.memory.buffer.ptr.shared.i7616 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7615, align 8, !noalias !1145
  %ecx.memory.buffer.ptr.i7617 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7616, i64 %ecx.memory.last_checkpoint.i7613
  %slot.i7618 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7617, i64 %531
  %538 = tail call i256 @llvm.bswap.i256(i256 %dup33132)
  store i256 %538, ptr %slot.i7618, align 1, !noalias !1145
  store i256 32, ptr %sp3133, align 16
  %b3149 = load i256, ptr %sp3129, align 16
  %539 = add i256 %b3149, 32
  %swap.b3155 = load i256, ptr %sp2952, align 16
  store i256 %539, ptr %sp2952, align 16
  store i256 %swap.b3155, ptr %sp3129, align 16
  store i256 64, ptr %sp2954, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1148)
  %ecx.memory.i7624 = load ptr, ptr %ecx.memory.addr.i7532, align 8, !alias.scope !1148, !noalias !1151
  %ecx.memory.len.addr.i7625 = getelementptr inbounds i8, ptr %ecx.memory.i7624, i64 16
  %ecx.memory.len.i7626 = load i64, ptr %ecx.memory.len.addr.i7625, align 8, !noalias !1153
  %ecx.memory.last_checkpoint.addr.i7627 = getelementptr inbounds i8, ptr %ecx.memory.i7624, i64 48
  %ecx.memory.last_checkpoint.i7628 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7627, align 8, !noalias !1153
  %540 = sub i64 %ecx.memory.len.i7626, %ecx.memory.last_checkpoint.i7628
  %541 = icmp ult i64 %540, 96
  br i1 %541, label %resize.i7636, label %OP928.MLOAD.contd, !prof !5

resize.i7636:                                     ; preds = %OP922.PUSH1
  %542 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1151
  %.not.i7637 = icmp eq i8 %542, 0
  br i1 %.not.i7637, label %resize.i7636.OP928.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7636.OP928.MLOAD.contd_crit_edge:         ; preds = %resize.i7636
  %swap.b3174.pre = load i256, ptr %sp2952, align 16
  br label %OP928.MLOAD.contd

OP928.MLOAD.contd:                                ; preds = %resize.i7636.OP928.MLOAD.contd_crit_edge, %OP922.PUSH1
  %swap.b3174 = phi i256 [ %swap.b3174.pre, %resize.i7636.OP928.MLOAD.contd_crit_edge ], [ %539, %OP922.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7630 = getelementptr inbounds i8, ptr %ecx.memory.i7624, i64 8
  %ecx.memory.buffer.ptr.shared.i7631 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7630, align 8, !noalias !1153
  %ecx.memory.buffer.ptr.i7632 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7631, i64 %ecx.memory.last_checkpoint.i7628
  %slot.i7633 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7632, i64 64
  %slot.value.i7634 = load i256, ptr %slot.i7633, align 1, !noalias !1153
  %543 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7634)
  store i256 %swap.b3174, ptr %sp3129, align 16
  %544 = sub i256 %swap.b3174, %543
  store i256 %544, ptr %sp2952, align 16
  store i256 %543, ptr %sp2954, align 16
  %545 = add i64 %len.addr.33, 1
  %546 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp2944, i8 3)
  %.not7163 = icmp eq i8 %546, 0
  br i1 %.not7163, label %OP934.PUSH1, label %return, !prof !6

OP934.PUSH1:                                      ; preds = %OP928.MLOAD.contd
  %sp3189 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %545
  %swap.b3194 = load i256, ptr %sp2940, align 16
  store i256 %swap.b3194, ptr %sp3189, align 16
  %sp3199 = getelementptr i256, ptr %sp2940, i64 -3
  %swap.b3200 = load i256, ptr %sp3199, align 16
  store i256 1, ptr %sp3199, align 16
  %swap.b3205 = load i256, ptr %sp3015, align 16
  store i256 %swap.b3200, ptr %sp3015, align 16
  store i256 %swap.b3205, ptr %sp2940, align 16
  %547 = add i64 %len.addr.33, -2
  br label %dynamic_jump_table.preheader

OP942.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP257.JUMPDEST
  %len.addr.34 = phi i64 [ %144, %OP257.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp3213 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.34
  store i256 0, ptr %sp3213, align 16
  %548 = add i64 %len.addr.34, 2
  %contract.target_address.addr = getelementptr inbounds i8, ptr %arg.contract.addr, i64 128
  %contract.target_address = load i160, ptr %contract.target_address.addr, align 16
  %549 = tail call i160 @llvm.bswap.i160(i160 %contract.target_address)
  %550 = zext i160 %549 to i256
  %sp3215 = getelementptr i256, ptr %sp3213, i64 1
  %sp3217 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %548
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp3217, align 16
  store i256 %550, ptr %sp3215, align 16
  %551 = tail call i8 @__revmc_builtin_balance(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3215, i8 17)
  %.not7146 = icmp eq i8 %551, 0
  br i1 %.not7146, label %OP948.SWAP1, label %return, !prof !6

OP948.SWAP1:                                      ; preds = %OP942.JUMPDEST
  %swap.a3228 = load i256, ptr %sp3215, align 16
  %swap.b3230 = load i256, ptr %sp3213, align 16
  store i256 %swap.b3230, ptr %sp3215, align 16
  %sp3235 = getelementptr i256, ptr %sp3213, i64 -1
  %swap.b3236 = load i256, ptr %sp3235, align 16
  store i256 %swap.a3228, ptr %sp3235, align 16
  store i256 %swap.b3236, ptr %sp3213, align 16
  br label %dynamic_jump_table.preheader

OP952.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP1511.JUMPDEST, %OP288.JUMPDEST
  %len.addr.35 = phi i64 [ %985, %OP1511.JUMPDEST ], [ %157, %OP288.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %552 = add i64 %len.addr.35, 1
  %sp3242 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.35
  store i256 0, ptr %sp3242, align 16
  %sp3244 = getelementptr i256, ptr %sp3242, i64 -1
  %dup23245 = load i256, ptr %sp3244, align 16
  %sp3246 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %552
  store i256 %dup23245, ptr %sp3246, align 16
  %553 = add i64 %len.addr.35, 3
  %sp3248 = getelementptr i256, ptr %sp3242, i64 2
  store i256 3, ptr %sp3248, align 16
  %554 = add i64 %len.addr.35, 4
  %sp3250 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %553
  store i256 0, ptr %sp3250, align 16
  %sp3252 = getelementptr i256, ptr %sp3242, i64 -3
  %dup7 = load i256, ptr %sp3252, align 16
  %sp3253 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %554
  %sp3255 = getelementptr i256, ptr %sp3242, i64 5
  %555 = and i256 %dup7, 1461501637330902918203684832716283019655932542975
  store i256 %555, ptr %sp3253, align 16
  store i256 0, ptr %sp3255, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1154)
  %ecx.memory.addr.i7639 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7640 = load ptr, ptr %ecx.memory.addr.i7639, align 8, !alias.scope !1154
  %ecx.memory.len.addr.i7641 = getelementptr inbounds i8, ptr %ecx.memory.i7640, i64 16
  %ecx.memory.len.i7642 = load i64, ptr %ecx.memory.len.addr.i7641, align 8, !noalias !1154
  %ecx.memory.last_checkpoint.addr.i7643 = getelementptr inbounds i8, ptr %ecx.memory.i7640, i64 48
  %ecx.memory.last_checkpoint.i7644 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7643, align 8, !noalias !1154
  %556 = sub i64 %ecx.memory.len.i7642, %ecx.memory.last_checkpoint.i7644
  %557 = icmp ult i64 %556, 32
  br i1 %557, label %resize.i7651, label %OP964.PUSH1, !prof !5

resize.i7651:                                     ; preds = %OP952.JUMPDEST
  %558 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7652 = icmp eq i8 %558, 0
  br i1 %.not.i7652, label %OP964.PUSH1, label %return, !prof !6

OP964.PUSH1:                                      ; preds = %OP952.JUMPDEST, %resize.i7651
  %ecx.memory.buffer.ptr.shared.addr.i7646 = getelementptr inbounds i8, ptr %ecx.memory.i7640, i64 8
  %ecx.memory.buffer.ptr.shared.i7647 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7646, align 8, !noalias !1154
  %ecx.memory.buffer.ptr.i7648 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7647, i64 %ecx.memory.last_checkpoint.i7644
  %559 = tail call i256 @llvm.bswap.i256(i256 %555)
  store i256 %559, ptr %ecx.memory.buffer.ptr.i7648, align 1, !noalias !1154
  %b3285 = load i256, ptr %sp3250, align 16
  %560 = add i256 %b3285, 32
  %swap.b3291 = load i256, ptr %sp3248, align 16
  store i256 %560, ptr %sp3248, align 16
  store i256 %swap.b3291, ptr %sp3250, align 16
  store i256 %560, ptr %sp3253, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1157)
  %ecx.memory.i7655 = load ptr, ptr %ecx.memory.addr.i7639, align 8, !alias.scope !1157
  %ecx.memory.len.addr.i7656 = getelementptr inbounds i8, ptr %ecx.memory.i7655, i64 16
  %ecx.memory.len.i7657 = load i64, ptr %ecx.memory.len.addr.i7656, align 8, !noalias !1157
  %ecx.memory.last_checkpoint.addr.i7658 = getelementptr inbounds i8, ptr %ecx.memory.i7655, i64 48
  %ecx.memory.last_checkpoint.i7659 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7658, align 8, !noalias !1157
  %561 = sub i64 %ecx.memory.len.i7657, %ecx.memory.last_checkpoint.i7659
  %562 = icmp ugt i256 %560, 18446744073709551615
  %563 = trunc i256 %560 to i64
  %564 = add i64 %563, 32
  %565 = icmp ugt i64 %563, -33
  %566 = or i1 %562, %565
  %567 = select i1 %566, i64 -1, i64 %564
  %568 = icmp ugt i64 %567, %561
  br i1 %568, label %resize.i7666, label %OP969.PUSH1, !prof !5

resize.i7666:                                     ; preds = %OP964.PUSH1
  %569 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %567)
  %.not.i7667 = icmp eq i8 %569, 0
  br i1 %.not.i7667, label %OP969.PUSH1, label %return, !prof !6

OP969.PUSH1:                                      ; preds = %OP964.PUSH1, %resize.i7666
  %ecx.memory.buffer.ptr.shared.addr.i7661 = getelementptr inbounds i8, ptr %ecx.memory.i7655, i64 8
  %ecx.memory.buffer.ptr.shared.i7662 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7661, align 8, !noalias !1157
  %ecx.memory.buffer.ptr.i7663 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7662, i64 %ecx.memory.last_checkpoint.i7659
  %slot.i7664 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7663, i64 %563
  %570 = tail call i256 @llvm.bswap.i256(i256 %swap.b3291)
  store i256 %570, ptr %slot.i7664, align 1, !noalias !1157
  %b3307 = load i256, ptr %sp3248, align 16
  %571 = add i256 %b3307, 32
  store i256 %571, ptr %sp3248, align 16
  store i256 0, ptr %sp3250, align 16
  %572 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3248)
  %.not7099 = icmp eq i8 %572, 0
  br i1 %.not7099, label %OP973.SLOAD, label %return, !prof !6

OP973.SLOAD:                                      ; preds = %OP969.PUSH1
  %573 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3248, i8 17)
  %.not7100 = icmp eq i8 %573, 0
  br i1 %.not7100, label %OP974.LT, label %return, !prof !6

OP974.LT:                                         ; preds = %OP973.SLOAD
  %a3317 = load i256, ptr %sp3248, align 16
  %b3319 = load i256, ptr %sp3246, align 16
  %.not7101 = icmp uge i256 %a3317, %b3319
  %574 = zext i1 %.not7101 to i256
  store i256 %574, ptr %sp3246, align 16
  br i1 %.not7101, label %OP983.JUMPDEST, label %OP980.PUSH1

OP980.PUSH1:                                      ; preds = %OP974.LT
  store i256 0, ptr %sp3246, align 16
  store i256 0, ptr %sp3248, align 16
  %575 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3246, i8 16)
  %.not7102 = icmp eq i8 %575, 0
  %spec.select5346 = select i1 %.not7102, i8 16, i8 %575, !prof !6
  br label %return

OP983.JUMPDEST:                                   ; preds = %dynamic_jump_table, %OP974.LT
  %len.addr.36 = phi i64 [ %552, %OP974.LT ], [ %len.addr.51, %dynamic_jump_table ]
  %576 = add i64 %len.addr.36, 1
  %contract.caller.addr3346 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller3347 = load i160, ptr %contract.caller.addr3346, align 16
  %577 = tail call i160 @llvm.bswap.i160(i160 %contract.caller3347)
  %578 = zext i160 %577 to i256
  %sp3348 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.36
  %579 = add i64 %len.addr.36, 2
  %sp3350 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %576
  %sp3358 = getelementptr i256, ptr %sp3348, i64 -4
  %dup53359 = load i256, ptr %sp3358, align 16
  %580 = add i64 %len.addr.36, 3
  %sp3362 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %579
  store i256 1461501637330902918203684832716283019655932542975, ptr %sp3362, align 16
  %581 = and i256 %dup53359, 1461501637330902918203684832716283019655932542975
  %582 = icmp ne i256 %581, %578
  %583 = zext i1 %582 to i256
  store i256 %583, ptr %sp3348, align 16
  %584 = xor i1 %582, true
  %585 = zext i1 %584 to i256
  store i256 %585, ptr %sp3350, align 16
  br i1 %582, label %OP996.POP, label %OP1036.JUMPDEST

OP996.POP:                                        ; preds = %OP983.JUMPDEST
  store i256 -1, ptr %sp3348, align 16
  store i256 4, ptr %sp3350, align 16
  store i256 0, ptr %sp3362, align 16
  %sp3400 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %580
  %sp3402 = getelementptr i256, ptr %sp3348, i64 4
  store i256 %581, ptr %sp3400, align 16
  store i256 0, ptr %sp3402, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1160)
  %ecx.memory.addr.i7669 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7670 = load ptr, ptr %ecx.memory.addr.i7669, align 8, !alias.scope !1160
  %ecx.memory.len.addr.i7671 = getelementptr inbounds i8, ptr %ecx.memory.i7670, i64 16
  %ecx.memory.len.i7672 = load i64, ptr %ecx.memory.len.addr.i7671, align 8, !noalias !1160
  %ecx.memory.last_checkpoint.addr.i7673 = getelementptr inbounds i8, ptr %ecx.memory.i7670, i64 48
  %ecx.memory.last_checkpoint.i7674 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7673, align 8, !noalias !1160
  %586 = sub i64 %ecx.memory.len.i7672, %ecx.memory.last_checkpoint.i7674
  %587 = icmp ult i64 %586, 32
  br i1 %587, label %resize.i7681, label %OP1007.PUSH1, !prof !5

resize.i7681:                                     ; preds = %OP996.POP
  %588 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7682 = icmp eq i8 %588, 0
  br i1 %.not.i7682, label %OP1007.PUSH1, label %return, !prof !6

OP1007.PUSH1:                                     ; preds = %OP996.POP, %resize.i7681
  %ecx.memory.buffer.ptr.shared.addr.i7676 = getelementptr inbounds i8, ptr %ecx.memory.i7670, i64 8
  %ecx.memory.buffer.ptr.shared.i7677 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7676, align 8, !noalias !1160
  %ecx.memory.buffer.ptr.i7678 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7677, i64 %ecx.memory.last_checkpoint.i7674
  %589 = tail call i256 @llvm.bswap.i256(i256 %581)
  store i256 %589, ptr %ecx.memory.buffer.ptr.i7678, align 1, !noalias !1160
  %b3432 = load i256, ptr %sp3362, align 16
  %590 = add i256 %b3432, 32
  %swap.b3438 = load i256, ptr %sp3350, align 16
  store i256 %590, ptr %sp3350, align 16
  store i256 %swap.b3438, ptr %sp3362, align 16
  store i256 %590, ptr %sp3400, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1163)
  %ecx.memory.i7685 = load ptr, ptr %ecx.memory.addr.i7669, align 8, !alias.scope !1163
  %ecx.memory.len.addr.i7686 = getelementptr inbounds i8, ptr %ecx.memory.i7685, i64 16
  %ecx.memory.len.i7687 = load i64, ptr %ecx.memory.len.addr.i7686, align 8, !noalias !1163
  %ecx.memory.last_checkpoint.addr.i7688 = getelementptr inbounds i8, ptr %ecx.memory.i7685, i64 48
  %ecx.memory.last_checkpoint.i7689 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7688, align 8, !noalias !1163
  %591 = sub i64 %ecx.memory.len.i7687, %ecx.memory.last_checkpoint.i7689
  %592 = icmp ugt i256 %590, 18446744073709551615
  %593 = trunc i256 %590 to i64
  %594 = add i64 %593, 32
  %595 = icmp ugt i64 %593, -33
  %596 = or i1 %592, %595
  %597 = select i1 %596, i64 -1, i64 %594
  %598 = icmp ugt i64 %597, %591
  br i1 %598, label %resize.i7696, label %OP1012.PUSH1, !prof !5

resize.i7696:                                     ; preds = %OP1007.PUSH1
  %599 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %597)
  %.not.i7697 = icmp eq i8 %599, 0
  br i1 %.not.i7697, label %OP1012.PUSH1, label %return, !prof !6

OP1012.PUSH1:                                     ; preds = %OP1007.PUSH1, %resize.i7696
  %ecx.memory.buffer.ptr.shared.addr.i7691 = getelementptr inbounds i8, ptr %ecx.memory.i7685, i64 8
  %ecx.memory.buffer.ptr.shared.i7692 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7691, align 8, !noalias !1163
  %ecx.memory.buffer.ptr.i7693 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7692, i64 %ecx.memory.last_checkpoint.i7689
  %slot.i7694 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7693, i64 %593
  %600 = tail call i256 @llvm.bswap.i256(i256 %swap.b3438)
  store i256 %600, ptr %slot.i7694, align 1, !noalias !1163
  %b3454 = load i256, ptr %sp3350, align 16
  %601 = add i256 %b3454, 32
  store i256 %601, ptr %sp3350, align 16
  store i256 0, ptr %sp3362, align 16
  %602 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3350)
  %.not7105 = icmp eq i8 %602, 0
  br i1 %.not7105, label %OP1016.PUSH1, label %return, !prof !6

OP1016.PUSH1:                                     ; preds = %OP1012.PUSH1
  store i256 0, ptr %sp3362, align 16
  store i256 %578, ptr %sp3400, align 16
  store i256 0, ptr %sp3402, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1166)
  %ecx.memory.i7700 = load ptr, ptr %ecx.memory.addr.i7669, align 8, !alias.scope !1166
  %ecx.memory.len.addr.i7701 = getelementptr inbounds i8, ptr %ecx.memory.i7700, i64 16
  %ecx.memory.len.i7702 = load i64, ptr %ecx.memory.len.addr.i7701, align 8, !noalias !1166
  %ecx.memory.last_checkpoint.addr.i7703 = getelementptr inbounds i8, ptr %ecx.memory.i7700, i64 48
  %ecx.memory.last_checkpoint.i7704 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7703, align 8, !noalias !1166
  %603 = sub i64 %ecx.memory.len.i7702, %ecx.memory.last_checkpoint.i7704
  %604 = icmp ult i64 %603, 32
  br i1 %604, label %resize.i7711, label %OP1024.PUSH1, !prof !5

resize.i7711:                                     ; preds = %OP1016.PUSH1
  %605 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7712 = icmp eq i8 %605, 0
  br i1 %.not.i7712, label %OP1024.PUSH1, label %return, !prof !6

OP1024.PUSH1:                                     ; preds = %OP1016.PUSH1, %resize.i7711
  %ecx.memory.buffer.ptr.shared.addr.i7706 = getelementptr inbounds i8, ptr %ecx.memory.i7700, i64 8
  %ecx.memory.buffer.ptr.shared.i7707 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7706, align 8, !noalias !1166
  %ecx.memory.buffer.ptr.i7708 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7707, i64 %ecx.memory.last_checkpoint.i7704
  %606 = tail call i256 @llvm.bswap.i256(i256 %578)
  store i256 %606, ptr %ecx.memory.buffer.ptr.i7708, align 1, !noalias !1166
  %b3497 = load i256, ptr %sp3362, align 16
  %607 = add i256 %b3497, 32
  %swap.b3503 = load i256, ptr %sp3350, align 16
  store i256 %607, ptr %sp3350, align 16
  store i256 %swap.b3503, ptr %sp3362, align 16
  store i256 %607, ptr %sp3400, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1169)
  %ecx.memory.i7715 = load ptr, ptr %ecx.memory.addr.i7669, align 8, !alias.scope !1169
  %ecx.memory.len.addr.i7716 = getelementptr inbounds i8, ptr %ecx.memory.i7715, i64 16
  %ecx.memory.len.i7717 = load i64, ptr %ecx.memory.len.addr.i7716, align 8, !noalias !1169
  %ecx.memory.last_checkpoint.addr.i7718 = getelementptr inbounds i8, ptr %ecx.memory.i7715, i64 48
  %ecx.memory.last_checkpoint.i7719 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7718, align 8, !noalias !1169
  %608 = sub i64 %ecx.memory.len.i7717, %ecx.memory.last_checkpoint.i7719
  %609 = icmp ugt i256 %607, 18446744073709551615
  %610 = trunc i256 %607 to i64
  %611 = add i64 %610, 32
  %612 = icmp ugt i64 %610, -33
  %613 = or i1 %609, %612
  %614 = select i1 %613, i64 -1, i64 %611
  %615 = icmp ugt i64 %614, %608
  br i1 %615, label %resize.i7726, label %OP1029.PUSH1, !prof !5

resize.i7726:                                     ; preds = %OP1024.PUSH1
  %616 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %614)
  %.not.i7727 = icmp eq i8 %616, 0
  br i1 %.not.i7727, label %OP1029.PUSH1, label %return, !prof !6

OP1029.PUSH1:                                     ; preds = %OP1024.PUSH1, %resize.i7726
  %ecx.memory.buffer.ptr.shared.addr.i7721 = getelementptr inbounds i8, ptr %ecx.memory.i7715, i64 8
  %ecx.memory.buffer.ptr.shared.i7722 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7721, align 8, !noalias !1169
  %ecx.memory.buffer.ptr.i7723 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7722, i64 %ecx.memory.last_checkpoint.i7719
  %slot.i7724 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7723, i64 %610
  %617 = tail call i256 @llvm.bswap.i256(i256 %swap.b3503)
  store i256 %617, ptr %slot.i7724, align 1, !noalias !1169
  %b3519 = load i256, ptr %sp3350, align 16
  %618 = add i256 %b3519, 32
  store i256 %618, ptr %sp3350, align 16
  store i256 0, ptr %sp3362, align 16
  %619 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3350)
  %.not7108 = icmp eq i8 %619, 0
  br i1 %.not7108, label %OP1033.SLOAD, label %return, !prof !6

OP1033.SLOAD:                                     ; preds = %OP1029.PUSH1
  %620 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3350, i8 17)
  %.not7109 = icmp eq i8 %620, 0
  br i1 %.not7109, label %OP1034.EQ, label %return, !prof !6

OP1034.EQ:                                        ; preds = %OP1033.SLOAD
  %a3529 = load i256, ptr %sp3350, align 16
  %b3531 = load i256, ptr %sp3348, align 16
  %621 = icmp ne i256 %a3529, %b3531
  %622 = zext i1 %621 to i256
  store i256 %622, ptr %sp3348, align 16
  br label %OP1036.JUMPDEST, !annotation !7

OP1036.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1034.EQ, %OP983.JUMPDEST
  %len.addr.37 = phi i64 [ %576, %OP983.JUMPDEST ], [ %576, %OP1034.EQ ], [ %len.addr.51, %dynamic_jump_table ]
  %623 = add i64 %len.addr.37, -1
  %sp3539 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %623
  %a3540 = load i256, ptr %sp3539, align 16
  %624 = icmp eq i256 %a3540, 0
  %625 = zext i1 %624 to i256
  store i256 %625, ptr %sp3539, align 16
  br i1 %624, label %OP1135.JUMPDEST, label %OP1040.DUP2

OP1040.DUP2:                                      ; preds = %OP1036.JUMPDEST
  %626 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.37
  %sp3546 = getelementptr i256, ptr %626, i64 -3
  %dup23547 = load i256, ptr %sp3546, align 16
  store i256 %dup23547, ptr %sp3539, align 16
  %627 = add i64 %len.addr.37, 1
  store i256 4, ptr %626, align 16
  %628 = add i64 %len.addr.37, 2
  %sp3552 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %627
  store i256 0, ptr %sp3552, align 16
  %sp3554 = getelementptr i256, ptr %626, i64 -5
  %dup73555 = load i256, ptr %sp3554, align 16
  %sp3556 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %628
  %sp3558 = getelementptr i256, ptr %626, i64 3
  %629 = and i256 %dup73555, 1461501637330902918203684832716283019655932542975
  store i256 %629, ptr %sp3556, align 16
  store i256 0, ptr %sp3558, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1172)
  %ecx.memory.addr.i7729 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7730 = load ptr, ptr %ecx.memory.addr.i7729, align 8, !alias.scope !1172
  %ecx.memory.len.addr.i7731 = getelementptr inbounds i8, ptr %ecx.memory.i7730, i64 16
  %ecx.memory.len.i7732 = load i64, ptr %ecx.memory.len.addr.i7731, align 8, !noalias !1172
  %ecx.memory.last_checkpoint.addr.i7733 = getelementptr inbounds i8, ptr %ecx.memory.i7730, i64 48
  %ecx.memory.last_checkpoint.i7734 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7733, align 8, !noalias !1172
  %630 = sub i64 %ecx.memory.len.i7732, %ecx.memory.last_checkpoint.i7734
  %631 = icmp ult i64 %630, 32
  br i1 %631, label %resize.i7741, label %OP1050.PUSH1, !prof !5

resize.i7741:                                     ; preds = %OP1040.DUP2
  %632 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7742 = icmp eq i8 %632, 0
  br i1 %.not.i7742, label %OP1050.PUSH1, label %return, !prof !6

OP1050.PUSH1:                                     ; preds = %OP1040.DUP2, %resize.i7741
  %ecx.memory.buffer.ptr.shared.addr.i7736 = getelementptr inbounds i8, ptr %ecx.memory.i7730, i64 8
  %ecx.memory.buffer.ptr.shared.i7737 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7736, align 8, !noalias !1172
  %ecx.memory.buffer.ptr.i7738 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7737, i64 %ecx.memory.last_checkpoint.i7734
  %633 = tail call i256 @llvm.bswap.i256(i256 %629)
  store i256 %633, ptr %ecx.memory.buffer.ptr.i7738, align 1, !noalias !1172
  %b3588 = load i256, ptr %sp3552, align 16
  %634 = add i256 %b3588, 32
  %swap.b3594 = load i256, ptr %626, align 16
  store i256 %634, ptr %626, align 16
  store i256 %swap.b3594, ptr %sp3552, align 16
  store i256 %634, ptr %sp3556, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1175)
  %ecx.memory.i7745 = load ptr, ptr %ecx.memory.addr.i7729, align 8, !alias.scope !1175
  %ecx.memory.len.addr.i7746 = getelementptr inbounds i8, ptr %ecx.memory.i7745, i64 16
  %ecx.memory.len.i7747 = load i64, ptr %ecx.memory.len.addr.i7746, align 8, !noalias !1175
  %ecx.memory.last_checkpoint.addr.i7748 = getelementptr inbounds i8, ptr %ecx.memory.i7745, i64 48
  %ecx.memory.last_checkpoint.i7749 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7748, align 8, !noalias !1175
  %635 = sub i64 %ecx.memory.len.i7747, %ecx.memory.last_checkpoint.i7749
  %636 = icmp ugt i256 %634, 18446744073709551615
  %637 = trunc i256 %634 to i64
  %638 = add i64 %637, 32
  %639 = icmp ugt i64 %637, -33
  %640 = or i1 %636, %639
  %641 = select i1 %640, i64 -1, i64 %638
  %642 = icmp ugt i64 %641, %635
  br i1 %642, label %resize.i7756, label %OP1055.PUSH1, !prof !5

resize.i7756:                                     ; preds = %OP1050.PUSH1
  %643 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %641)
  %.not.i7757 = icmp eq i8 %643, 0
  br i1 %.not.i7757, label %OP1055.PUSH1, label %return, !prof !6

OP1055.PUSH1:                                     ; preds = %OP1050.PUSH1, %resize.i7756
  %ecx.memory.buffer.ptr.shared.addr.i7751 = getelementptr inbounds i8, ptr %ecx.memory.i7745, i64 8
  %ecx.memory.buffer.ptr.shared.i7752 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7751, align 8, !noalias !1175
  %ecx.memory.buffer.ptr.i7753 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7752, i64 %ecx.memory.last_checkpoint.i7749
  %slot.i7754 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7753, i64 %637
  %644 = tail call i256 @llvm.bswap.i256(i256 %swap.b3594)
  store i256 %644, ptr %slot.i7754, align 1, !noalias !1175
  %b3610 = load i256, ptr %626, align 16
  %645 = add i256 %b3610, 32
  store i256 %645, ptr %626, align 16
  store i256 0, ptr %sp3552, align 16
  %646 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %626)
  %.not7112 = icmp eq i8 %646, 0
  br i1 %.not7112, label %OP1059.PUSH1, label %return, !prof !6

OP1059.PUSH1:                                     ; preds = %OP1055.PUSH1
  store i256 0, ptr %sp3552, align 16
  %contract.caller.addr3619 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller3620 = load i160, ptr %contract.caller.addr3619, align 16
  %647 = tail call i160 @llvm.bswap.i160(i160 %contract.caller3620)
  %648 = zext i160 %647 to i256
  store i256 %648, ptr %sp3556, align 16
  store i256 0, ptr %sp3558, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1178)
  %ecx.memory.i7760 = load ptr, ptr %ecx.memory.addr.i7729, align 8, !alias.scope !1178
  %ecx.memory.len.addr.i7761 = getelementptr inbounds i8, ptr %ecx.memory.i7760, i64 16
  %ecx.memory.len.i7762 = load i64, ptr %ecx.memory.len.addr.i7761, align 8, !noalias !1178
  %ecx.memory.last_checkpoint.addr.i7763 = getelementptr inbounds i8, ptr %ecx.memory.i7760, i64 48
  %ecx.memory.last_checkpoint.i7764 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7763, align 8, !noalias !1178
  %649 = sub i64 %ecx.memory.len.i7762, %ecx.memory.last_checkpoint.i7764
  %650 = icmp ult i64 %649, 32
  br i1 %650, label %resize.i7771, label %OP1067.PUSH1, !prof !5

resize.i7771:                                     ; preds = %OP1059.PUSH1
  %651 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7772 = icmp eq i8 %651, 0
  br i1 %.not.i7772, label %OP1067.PUSH1, label %return, !prof !6

OP1067.PUSH1:                                     ; preds = %OP1059.PUSH1, %resize.i7771
  %ecx.memory.buffer.ptr.shared.addr.i7766 = getelementptr inbounds i8, ptr %ecx.memory.i7760, i64 8
  %ecx.memory.buffer.ptr.shared.i7767 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7766, align 8, !noalias !1178
  %ecx.memory.buffer.ptr.i7768 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7767, i64 %ecx.memory.last_checkpoint.i7764
  %652 = tail call i256 @llvm.bswap.i256(i256 %648)
  store i256 %652, ptr %ecx.memory.buffer.ptr.i7768, align 1, !noalias !1178
  %b3653 = load i256, ptr %sp3552, align 16
  %653 = add i256 %b3653, 32
  %swap.b3659 = load i256, ptr %626, align 16
  store i256 %653, ptr %626, align 16
  store i256 %swap.b3659, ptr %sp3552, align 16
  store i256 %653, ptr %sp3556, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1181)
  %ecx.memory.i7775 = load ptr, ptr %ecx.memory.addr.i7729, align 8, !alias.scope !1181
  %ecx.memory.len.addr.i7776 = getelementptr inbounds i8, ptr %ecx.memory.i7775, i64 16
  %ecx.memory.len.i7777 = load i64, ptr %ecx.memory.len.addr.i7776, align 8, !noalias !1181
  %ecx.memory.last_checkpoint.addr.i7778 = getelementptr inbounds i8, ptr %ecx.memory.i7775, i64 48
  %ecx.memory.last_checkpoint.i7779 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7778, align 8, !noalias !1181
  %654 = sub i64 %ecx.memory.len.i7777, %ecx.memory.last_checkpoint.i7779
  %655 = icmp ugt i256 %653, 18446744073709551615
  %656 = trunc i256 %653 to i64
  %657 = add i64 %656, 32
  %658 = icmp ugt i64 %656, -33
  %659 = or i1 %655, %658
  %660 = select i1 %659, i64 -1, i64 %657
  %661 = icmp ugt i64 %660, %654
  br i1 %661, label %resize.i7786, label %OP1072.PUSH1, !prof !5

resize.i7786:                                     ; preds = %OP1067.PUSH1
  %662 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %660)
  %.not.i7787 = icmp eq i8 %662, 0
  br i1 %.not.i7787, label %OP1072.PUSH1, label %return, !prof !6

OP1072.PUSH1:                                     ; preds = %OP1067.PUSH1, %resize.i7786
  %ecx.memory.buffer.ptr.shared.addr.i7781 = getelementptr inbounds i8, ptr %ecx.memory.i7775, i64 8
  %ecx.memory.buffer.ptr.shared.i7782 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7781, align 8, !noalias !1181
  %ecx.memory.buffer.ptr.i7783 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7782, i64 %ecx.memory.last_checkpoint.i7779
  %slot.i7784 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7783, i64 %656
  %663 = tail call i256 @llvm.bswap.i256(i256 %swap.b3659)
  store i256 %663, ptr %slot.i7784, align 1, !noalias !1181
  %b3675 = load i256, ptr %626, align 16
  %664 = add i256 %b3675, 32
  store i256 %664, ptr %626, align 16
  store i256 0, ptr %sp3552, align 16
  %665 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %626)
  %.not7115 = icmp eq i8 %665, 0
  br i1 %.not7115, label %OP1076.SLOAD, label %return, !prof !6

OP1076.SLOAD:                                     ; preds = %OP1072.PUSH1
  %666 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %626, i8 17)
  %.not7116 = icmp eq i8 %666, 0
  br i1 %.not7116, label %OP1077.LT, label %return, !prof !6

OP1077.LT:                                        ; preds = %OP1076.SLOAD
  %a3685 = load i256, ptr %626, align 16
  %b3687 = load i256, ptr %sp3539, align 16
  %667 = icmp uge i256 %a3685, %b3687
  %668 = zext i1 %667 to i256
  store i256 %668, ptr %sp3539, align 16
  br i1 %667, label %OP1086.JUMPDEST, label %OP1083.PUSH1

OP1083.PUSH1:                                     ; preds = %OP1077.LT
  store i256 0, ptr %sp3539, align 16
  %sp3707 = getelementptr i256, ptr %626, i64 -1
  store i256 0, ptr %626, align 16
  %669 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3707, i8 16)
  %.not7118 = icmp eq i8 %669, 0
  %spec.select5347 = select i1 %.not7118, i8 16, i8 %669, !prof !6
  br label %return

OP1086.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1077.LT
  %len.addr.38 = phi i64 [ %623, %OP1077.LT ], [ %len.addr.51, %dynamic_jump_table ]
  %670 = add i64 %len.addr.38, 1
  %671 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.38
  %sp3714 = getelementptr i256, ptr %671, i64 -2
  %dup23715 = load i256, ptr %sp3714, align 16
  store i256 %dup23715, ptr %671, align 16
  %672 = add i64 %len.addr.38, 2
  %sp3718 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %670
  store i256 4, ptr %sp3718, align 16
  %673 = add i64 %len.addr.38, 3
  %sp3720 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %672
  store i256 0, ptr %sp3720, align 16
  %sp3722 = getelementptr i256, ptr %671, i64 -4
  %dup73723 = load i256, ptr %sp3722, align 16
  %sp3724 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %673
  %674 = add i64 %len.addr.38, 5
  %sp3726 = getelementptr i256, ptr %671, i64 4
  %675 = and i256 %dup73723, 1461501637330902918203684832716283019655932542975
  store i256 %675, ptr %sp3724, align 16
  store i256 0, ptr %sp3726, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1184)
  %ecx.memory.addr.i7789 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7790 = load ptr, ptr %ecx.memory.addr.i7789, align 8, !alias.scope !1184
  %ecx.memory.len.addr.i7791 = getelementptr inbounds i8, ptr %ecx.memory.i7790, i64 16
  %ecx.memory.len.i7792 = load i64, ptr %ecx.memory.len.addr.i7791, align 8, !noalias !1184
  %ecx.memory.last_checkpoint.addr.i7793 = getelementptr inbounds i8, ptr %ecx.memory.i7790, i64 48
  %ecx.memory.last_checkpoint.i7794 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7793, align 8, !noalias !1184
  %676 = sub i64 %ecx.memory.len.i7792, %ecx.memory.last_checkpoint.i7794
  %677 = icmp ult i64 %676, 32
  br i1 %677, label %resize.i7801, label %OP1097.PUSH1, !prof !5

resize.i7801:                                     ; preds = %OP1086.JUMPDEST
  %678 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7802 = icmp eq i8 %678, 0
  br i1 %.not.i7802, label %OP1097.PUSH1, label %return, !prof !6

OP1097.PUSH1:                                     ; preds = %OP1086.JUMPDEST, %resize.i7801
  %ecx.memory.buffer.ptr.shared.addr.i7796 = getelementptr inbounds i8, ptr %ecx.memory.i7790, i64 8
  %ecx.memory.buffer.ptr.shared.i7797 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7796, align 8, !noalias !1184
  %ecx.memory.buffer.ptr.i7798 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7797, i64 %ecx.memory.last_checkpoint.i7794
  %679 = tail call i256 @llvm.bswap.i256(i256 %675)
  store i256 %679, ptr %ecx.memory.buffer.ptr.i7798, align 1, !noalias !1184
  %b3756 = load i256, ptr %sp3720, align 16
  %680 = add i256 %b3756, 32
  %swap.b3762 = load i256, ptr %sp3718, align 16
  store i256 %680, ptr %sp3718, align 16
  store i256 %swap.b3762, ptr %sp3720, align 16
  store i256 %680, ptr %sp3724, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1187)
  %ecx.memory.i7805 = load ptr, ptr %ecx.memory.addr.i7789, align 8, !alias.scope !1187
  %ecx.memory.len.addr.i7806 = getelementptr inbounds i8, ptr %ecx.memory.i7805, i64 16
  %ecx.memory.len.i7807 = load i64, ptr %ecx.memory.len.addr.i7806, align 8, !noalias !1187
  %ecx.memory.last_checkpoint.addr.i7808 = getelementptr inbounds i8, ptr %ecx.memory.i7805, i64 48
  %ecx.memory.last_checkpoint.i7809 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7808, align 8, !noalias !1187
  %681 = sub i64 %ecx.memory.len.i7807, %ecx.memory.last_checkpoint.i7809
  %682 = icmp ugt i256 %680, 18446744073709551615
  %683 = trunc i256 %680 to i64
  %684 = add i64 %683, 32
  %685 = icmp ugt i64 %683, -33
  %686 = or i1 %682, %685
  %687 = select i1 %686, i64 -1, i64 %684
  %688 = icmp ugt i64 %687, %681
  br i1 %688, label %resize.i7816, label %OP1102.PUSH1, !prof !5

resize.i7816:                                     ; preds = %OP1097.PUSH1
  %689 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %687)
  %.not.i7817 = icmp eq i8 %689, 0
  br i1 %.not.i7817, label %OP1102.PUSH1, label %return, !prof !6

OP1102.PUSH1:                                     ; preds = %OP1097.PUSH1, %resize.i7816
  %ecx.memory.buffer.ptr.shared.addr.i7811 = getelementptr inbounds i8, ptr %ecx.memory.i7805, i64 8
  %ecx.memory.buffer.ptr.shared.i7812 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7811, align 8, !noalias !1187
  %ecx.memory.buffer.ptr.i7813 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7812, i64 %ecx.memory.last_checkpoint.i7809
  %slot.i7814 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7813, i64 %683
  %690 = tail call i256 @llvm.bswap.i256(i256 %swap.b3762)
  store i256 %690, ptr %slot.i7814, align 1, !noalias !1187
  %b3778 = load i256, ptr %sp3718, align 16
  %691 = add i256 %b3778, 32
  store i256 %691, ptr %sp3718, align 16
  store i256 0, ptr %sp3720, align 16
  %692 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3718)
  %.not7121 = icmp eq i8 %692, 0
  br i1 %.not7121, label %OP1106.PUSH1, label %return, !prof !6

OP1106.PUSH1:                                     ; preds = %OP1102.PUSH1
  store i256 0, ptr %sp3720, align 16
  %contract.caller.addr3787 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller3788 = load i160, ptr %contract.caller.addr3787, align 16
  %693 = tail call i160 @llvm.bswap.i160(i160 %contract.caller3788)
  %694 = zext i160 %693 to i256
  store i256 %694, ptr %sp3724, align 16
  store i256 0, ptr %sp3726, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1190)
  %ecx.memory.i7820 = load ptr, ptr %ecx.memory.addr.i7789, align 8, !alias.scope !1190
  %ecx.memory.len.addr.i7821 = getelementptr inbounds i8, ptr %ecx.memory.i7820, i64 16
  %ecx.memory.len.i7822 = load i64, ptr %ecx.memory.len.addr.i7821, align 8, !noalias !1190
  %ecx.memory.last_checkpoint.addr.i7823 = getelementptr inbounds i8, ptr %ecx.memory.i7820, i64 48
  %ecx.memory.last_checkpoint.i7824 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7823, align 8, !noalias !1190
  %695 = sub i64 %ecx.memory.len.i7822, %ecx.memory.last_checkpoint.i7824
  %696 = icmp ult i64 %695, 32
  br i1 %696, label %resize.i7831, label %OP1114.PUSH1, !prof !5

resize.i7831:                                     ; preds = %OP1106.PUSH1
  %697 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7832 = icmp eq i8 %697, 0
  br i1 %.not.i7832, label %OP1114.PUSH1, label %return, !prof !6

OP1114.PUSH1:                                     ; preds = %OP1106.PUSH1, %resize.i7831
  %ecx.memory.buffer.ptr.shared.addr.i7826 = getelementptr inbounds i8, ptr %ecx.memory.i7820, i64 8
  %ecx.memory.buffer.ptr.shared.i7827 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7826, align 8, !noalias !1190
  %ecx.memory.buffer.ptr.i7828 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7827, i64 %ecx.memory.last_checkpoint.i7824
  %698 = tail call i256 @llvm.bswap.i256(i256 %694)
  store i256 %698, ptr %ecx.memory.buffer.ptr.i7828, align 1, !noalias !1190
  %b3821 = load i256, ptr %sp3720, align 16
  %699 = add i256 %b3821, 32
  %swap.b3827 = load i256, ptr %sp3718, align 16
  store i256 %699, ptr %sp3718, align 16
  store i256 %swap.b3827, ptr %sp3720, align 16
  store i256 %699, ptr %sp3724, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1193)
  %ecx.memory.i7835 = load ptr, ptr %ecx.memory.addr.i7789, align 8, !alias.scope !1193
  %ecx.memory.len.addr.i7836 = getelementptr inbounds i8, ptr %ecx.memory.i7835, i64 16
  %ecx.memory.len.i7837 = load i64, ptr %ecx.memory.len.addr.i7836, align 8, !noalias !1193
  %ecx.memory.last_checkpoint.addr.i7838 = getelementptr inbounds i8, ptr %ecx.memory.i7835, i64 48
  %ecx.memory.last_checkpoint.i7839 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7838, align 8, !noalias !1193
  %700 = sub i64 %ecx.memory.len.i7837, %ecx.memory.last_checkpoint.i7839
  %701 = icmp ugt i256 %699, 18446744073709551615
  %702 = trunc i256 %699 to i64
  %703 = add i64 %702, 32
  %704 = icmp ugt i64 %702, -33
  %705 = or i1 %701, %704
  %706 = select i1 %705, i64 -1, i64 %703
  %707 = icmp ugt i64 %706, %700
  br i1 %707, label %resize.i7846, label %OP1119.PUSH1, !prof !5

resize.i7846:                                     ; preds = %OP1114.PUSH1
  %708 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %706)
  %.not.i7847 = icmp eq i8 %708, 0
  br i1 %.not.i7847, label %OP1119.PUSH1, label %return, !prof !6

OP1119.PUSH1:                                     ; preds = %OP1114.PUSH1, %resize.i7846
  %ecx.memory.buffer.ptr.shared.addr.i7841 = getelementptr inbounds i8, ptr %ecx.memory.i7835, i64 8
  %ecx.memory.buffer.ptr.shared.i7842 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7841, align 8, !noalias !1193
  %ecx.memory.buffer.ptr.i7843 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7842, i64 %ecx.memory.last_checkpoint.i7839
  %slot.i7844 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7843, i64 %702
  %709 = tail call i256 @llvm.bswap.i256(i256 %swap.b3827)
  store i256 %709, ptr %slot.i7844, align 1, !noalias !1193
  %b3843 = load i256, ptr %sp3718, align 16
  %710 = add i256 %b3843, 32
  store i256 %710, ptr %sp3718, align 16
  store i256 0, ptr %sp3720, align 16
  %711 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3718)
  %.not7124 = icmp eq i8 %711, 0
  br i1 %.not7124, label %OP1123.PUSH1, label %return, !prof !6

OP1123.PUSH1:                                     ; preds = %OP1119.PUSH1
  store i256 0, ptr %sp3720, align 16
  %dup33853 = load i256, ptr %671, align 16
  store i256 %dup33853, ptr %sp3724, align 16
  %dup33857 = load i256, ptr %sp3718, align 16
  store i256 %dup33857, ptr %sp3726, align 16
  %712 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3726, i8 17)
  %.not7125 = icmp eq i8 %712, 0
  br i1 %.not7125, label %OP1127.SUB, label %return, !prof !6

OP1127.SUB:                                       ; preds = %OP1123.PUSH1
  %a3863 = load i256, ptr %sp3726, align 16
  %b3865 = load i256, ptr %sp3724, align 16
  %713 = sub i256 %a3863, %b3865
  %swap.b3871 = load i256, ptr %671, align 16
  store i256 %713, ptr %671, align 16
  store i256 %swap.b3871, ptr %sp3724, align 16
  %swap.b3882 = load i256, ptr %sp3718, align 16
  store i256 %713, ptr %sp3718, align 16
  store i256 %swap.b3882, ptr %sp3720, align 16
  %714 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3718, i8 17)
  %.not7126 = icmp eq i8 %714, 0
  br i1 %.not7126, label %OP1135.JUMPDEST, label %return, !prof !6

OP1135.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1127.SUB, %OP1036.JUMPDEST
  %len.addr.39 = phi i64 [ %623, %OP1036.JUMPDEST ], [ %len.addr.38, %OP1127.SUB ], [ %len.addr.51, %dynamic_jump_table ]
  %715 = add i64 %len.addr.39, 1
  %716 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.39
  %sp3888 = getelementptr i256, ptr %716, i64 -2
  %dup23889 = load i256, ptr %sp3888, align 16
  store i256 %dup23889, ptr %716, align 16
  %717 = add i64 %len.addr.39, 2
  %sp3892 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %715
  store i256 3, ptr %sp3892, align 16
  %718 = add i64 %len.addr.39, 3
  %sp3894 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %717
  store i256 0, ptr %sp3894, align 16
  %sp3896 = getelementptr i256, ptr %716, i64 -4
  %dup73897 = load i256, ptr %sp3896, align 16
  %sp3898 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %718
  %719 = add i64 %len.addr.39, 5
  %sp3900 = getelementptr i256, ptr %716, i64 4
  %720 = and i256 %dup73897, 1461501637330902918203684832716283019655932542975
  store i256 %720, ptr %sp3898, align 16
  store i256 0, ptr %sp3900, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1196)
  %ecx.memory.addr.i7849 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7850 = load ptr, ptr %ecx.memory.addr.i7849, align 8, !alias.scope !1196
  %ecx.memory.len.addr.i7851 = getelementptr inbounds i8, ptr %ecx.memory.i7850, i64 16
  %ecx.memory.len.i7852 = load i64, ptr %ecx.memory.len.addr.i7851, align 8, !noalias !1196
  %ecx.memory.last_checkpoint.addr.i7853 = getelementptr inbounds i8, ptr %ecx.memory.i7850, i64 48
  %ecx.memory.last_checkpoint.i7854 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7853, align 8, !noalias !1196
  %721 = sub i64 %ecx.memory.len.i7852, %ecx.memory.last_checkpoint.i7854
  %722 = icmp ult i64 %721, 32
  br i1 %722, label %resize.i7861, label %OP1146.PUSH1, !prof !5

resize.i7861:                                     ; preds = %OP1135.JUMPDEST
  %723 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7862 = icmp eq i8 %723, 0
  br i1 %.not.i7862, label %OP1146.PUSH1, label %return, !prof !6

OP1146.PUSH1:                                     ; preds = %OP1135.JUMPDEST, %resize.i7861
  %ecx.memory.buffer.ptr.shared.addr.i7856 = getelementptr inbounds i8, ptr %ecx.memory.i7850, i64 8
  %ecx.memory.buffer.ptr.shared.i7857 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7856, align 8, !noalias !1196
  %ecx.memory.buffer.ptr.i7858 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7857, i64 %ecx.memory.last_checkpoint.i7854
  %724 = tail call i256 @llvm.bswap.i256(i256 %720)
  store i256 %724, ptr %ecx.memory.buffer.ptr.i7858, align 1, !noalias !1196
  %b3930 = load i256, ptr %sp3894, align 16
  %725 = add i256 %b3930, 32
  %swap.b3936 = load i256, ptr %sp3892, align 16
  store i256 %725, ptr %sp3892, align 16
  store i256 %swap.b3936, ptr %sp3894, align 16
  store i256 %725, ptr %sp3898, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1199)
  %ecx.memory.i7865 = load ptr, ptr %ecx.memory.addr.i7849, align 8, !alias.scope !1199
  %ecx.memory.len.addr.i7866 = getelementptr inbounds i8, ptr %ecx.memory.i7865, i64 16
  %ecx.memory.len.i7867 = load i64, ptr %ecx.memory.len.addr.i7866, align 8, !noalias !1199
  %ecx.memory.last_checkpoint.addr.i7868 = getelementptr inbounds i8, ptr %ecx.memory.i7865, i64 48
  %ecx.memory.last_checkpoint.i7869 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7868, align 8, !noalias !1199
  %726 = sub i64 %ecx.memory.len.i7867, %ecx.memory.last_checkpoint.i7869
  %727 = icmp ugt i256 %725, 18446744073709551615
  %728 = trunc i256 %725 to i64
  %729 = add i64 %728, 32
  %730 = icmp ugt i64 %728, -33
  %731 = or i1 %727, %730
  %732 = select i1 %731, i64 -1, i64 %729
  %733 = icmp ugt i64 %732, %726
  br i1 %733, label %resize.i7876, label %OP1151.PUSH1, !prof !5

resize.i7876:                                     ; preds = %OP1146.PUSH1
  %734 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %732)
  %.not.i7877 = icmp eq i8 %734, 0
  br i1 %.not.i7877, label %OP1151.PUSH1, label %return, !prof !6

OP1151.PUSH1:                                     ; preds = %OP1146.PUSH1, %resize.i7876
  %ecx.memory.buffer.ptr.shared.addr.i7871 = getelementptr inbounds i8, ptr %ecx.memory.i7865, i64 8
  %ecx.memory.buffer.ptr.shared.i7872 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7871, align 8, !noalias !1199
  %ecx.memory.buffer.ptr.i7873 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7872, i64 %ecx.memory.last_checkpoint.i7869
  %slot.i7874 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7873, i64 %728
  %735 = tail call i256 @llvm.bswap.i256(i256 %swap.b3936)
  store i256 %735, ptr %slot.i7874, align 1, !noalias !1199
  %b3952 = load i256, ptr %sp3892, align 16
  %736 = add i256 %b3952, 32
  store i256 %736, ptr %sp3892, align 16
  store i256 0, ptr %sp3894, align 16
  %737 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3892)
  %.not7129 = icmp eq i8 %737, 0
  br i1 %.not7129, label %OP1155.PUSH1, label %return, !prof !6

OP1155.PUSH1:                                     ; preds = %OP1151.PUSH1
  store i256 0, ptr %sp3894, align 16
  %dup33962 = load i256, ptr %716, align 16
  store i256 %dup33962, ptr %sp3898, align 16
  %dup33966 = load i256, ptr %sp3892, align 16
  store i256 %dup33966, ptr %sp3900, align 16
  %738 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3900, i8 17)
  %.not7130 = icmp eq i8 %738, 0
  br i1 %.not7130, label %OP1159.SUB, label %return, !prof !6

OP1159.SUB:                                       ; preds = %OP1155.PUSH1
  %a3972 = load i256, ptr %sp3900, align 16
  %b3974 = load i256, ptr %sp3898, align 16
  %739 = sub i256 %a3972, %b3974
  %swap.b3980 = load i256, ptr %716, align 16
  store i256 %739, ptr %716, align 16
  store i256 %swap.b3980, ptr %sp3898, align 16
  %swap.b3991 = load i256, ptr %sp3892, align 16
  store i256 %739, ptr %sp3892, align 16
  store i256 %swap.b3991, ptr %sp3894, align 16
  %740 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3892, i8 17)
  %.not7131 = icmp eq i8 %740, 0
  br i1 %.not7131, label %OP1166.POP, label %return, !prof !6

OP1166.POP:                                       ; preds = %OP1159.SUB
  %dup23997 = load i256, ptr %sp3888, align 16
  store i256 %dup23997, ptr %716, align 16
  store i256 3, ptr %sp3892, align 16
  store i256 0, ptr %sp3894, align 16
  %sp4004 = getelementptr i256, ptr %716, i64 -3
  %dup64005 = load i256, ptr %sp4004, align 16
  %741 = and i256 %dup64005, 1461501637330902918203684832716283019655932542975
  store i256 %741, ptr %sp3898, align 16
  store i256 0, ptr %sp3900, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1202)
  %ecx.memory.i7880 = load ptr, ptr %ecx.memory.addr.i7849, align 8, !alias.scope !1202
  %ecx.memory.len.addr.i7881 = getelementptr inbounds i8, ptr %ecx.memory.i7880, i64 16
  %ecx.memory.len.i7882 = load i64, ptr %ecx.memory.len.addr.i7881, align 8, !noalias !1202
  %ecx.memory.last_checkpoint.addr.i7883 = getelementptr inbounds i8, ptr %ecx.memory.i7880, i64 48
  %ecx.memory.last_checkpoint.i7884 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7883, align 8, !noalias !1202
  %742 = sub i64 %ecx.memory.len.i7882, %ecx.memory.last_checkpoint.i7884
  %743 = icmp ult i64 %742, 32
  br i1 %743, label %resize.i7891, label %OP1177.PUSH1, !prof !5

resize.i7891:                                     ; preds = %OP1166.POP
  %744 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7892 = icmp eq i8 %744, 0
  br i1 %.not.i7892, label %OP1177.PUSH1, label %return, !prof !6

OP1177.PUSH1:                                     ; preds = %OP1166.POP, %resize.i7891
  %ecx.memory.buffer.ptr.shared.addr.i7886 = getelementptr inbounds i8, ptr %ecx.memory.i7880, i64 8
  %ecx.memory.buffer.ptr.shared.i7887 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7886, align 8, !noalias !1202
  %ecx.memory.buffer.ptr.i7888 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7887, i64 %ecx.memory.last_checkpoint.i7884
  %745 = tail call i256 @llvm.bswap.i256(i256 %741)
  store i256 %745, ptr %ecx.memory.buffer.ptr.i7888, align 1, !noalias !1202
  %b4038 = load i256, ptr %sp3894, align 16
  %746 = add i256 %b4038, 32
  %swap.b4044 = load i256, ptr %sp3892, align 16
  store i256 %746, ptr %sp3892, align 16
  store i256 %swap.b4044, ptr %sp3894, align 16
  store i256 %746, ptr %sp3898, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1205)
  %ecx.memory.i7895 = load ptr, ptr %ecx.memory.addr.i7849, align 8, !alias.scope !1205
  %ecx.memory.len.addr.i7896 = getelementptr inbounds i8, ptr %ecx.memory.i7895, i64 16
  %ecx.memory.len.i7897 = load i64, ptr %ecx.memory.len.addr.i7896, align 8, !noalias !1205
  %ecx.memory.last_checkpoint.addr.i7898 = getelementptr inbounds i8, ptr %ecx.memory.i7895, i64 48
  %ecx.memory.last_checkpoint.i7899 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7898, align 8, !noalias !1205
  %747 = sub i64 %ecx.memory.len.i7897, %ecx.memory.last_checkpoint.i7899
  %748 = icmp ugt i256 %746, 18446744073709551615
  %749 = trunc i256 %746 to i64
  %750 = add i64 %749, 32
  %751 = icmp ugt i64 %749, -33
  %752 = or i1 %748, %751
  %753 = select i1 %752, i64 -1, i64 %750
  %754 = icmp ugt i64 %753, %747
  br i1 %754, label %resize.i7906, label %OP1182.PUSH1, !prof !5

resize.i7906:                                     ; preds = %OP1177.PUSH1
  %755 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %753)
  %.not.i7907 = icmp eq i8 %755, 0
  br i1 %.not.i7907, label %OP1182.PUSH1, label %return, !prof !6

OP1182.PUSH1:                                     ; preds = %OP1177.PUSH1, %resize.i7906
  %ecx.memory.buffer.ptr.shared.addr.i7901 = getelementptr inbounds i8, ptr %ecx.memory.i7895, i64 8
  %ecx.memory.buffer.ptr.shared.i7902 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7901, align 8, !noalias !1205
  %ecx.memory.buffer.ptr.i7903 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7902, i64 %ecx.memory.last_checkpoint.i7899
  %slot.i7904 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7903, i64 %749
  %756 = tail call i256 @llvm.bswap.i256(i256 %swap.b4044)
  store i256 %756, ptr %slot.i7904, align 1, !noalias !1205
  %b4060 = load i256, ptr %sp3892, align 16
  %757 = add i256 %b4060, 32
  store i256 %757, ptr %sp3892, align 16
  store i256 0, ptr %sp3894, align 16
  %758 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3892)
  %.not7134 = icmp eq i8 %758, 0
  br i1 %.not7134, label %OP1186.PUSH1, label %return, !prof !6

OP1186.PUSH1:                                     ; preds = %OP1182.PUSH1
  store i256 0, ptr %sp3894, align 16
  %dup34070 = load i256, ptr %716, align 16
  store i256 %dup34070, ptr %sp3898, align 16
  %dup34074 = load i256, ptr %sp3892, align 16
  store i256 %dup34074, ptr %sp3900, align 16
  %759 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3900, i8 17)
  %.not7135 = icmp eq i8 %759, 0
  br i1 %.not7135, label %OP1190.ADD, label %return, !prof !6

OP1190.ADD:                                       ; preds = %OP1186.PUSH1
  %a4080 = load i256, ptr %sp3900, align 16
  %b4082 = load i256, ptr %sp3898, align 16
  %760 = add i256 %b4082, %a4080
  %swap.b4088 = load i256, ptr %716, align 16
  store i256 %760, ptr %716, align 16
  store i256 %swap.b4088, ptr %sp3898, align 16
  %swap.b4099 = load i256, ptr %sp3892, align 16
  store i256 %760, ptr %sp3892, align 16
  store i256 %swap.b4099, ptr %sp3894, align 16
  %761 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp3892, i8 17)
  %.not7136 = icmp eq i8 %761, 0
  br i1 %.not7136, label %OP1197.POP, label %return, !prof !6

OP1197.POP:                                       ; preds = %OP1190.ADD
  %dup34105 = load i256, ptr %sp4004, align 16
  %762 = and i256 %dup34105, 1461501637330902918203684832716283019655932542975
  store i256 %762, ptr %716, align 16
  %dup54117 = load i256, ptr %sp3896, align 16
  %763 = and i256 %dup54117, 1461501637330902918203684832716283019655932542975
  store i256 %763, ptr %sp3892, align 16
  store i256 -15402802100530019096323380498944738953123845089667699673314898783681816316945, ptr %sp3894, align 16
  %dup54131 = load i256, ptr %sp3888, align 16
  store i256 %dup54131, ptr %sp3898, align 16
  store i256 64, ptr %sp3900, align 16
  %ecx.memory.i7910 = load ptr, ptr %ecx.memory.addr.i7849, align 8
  %ecx.memory.len.addr.i7911 = getelementptr inbounds i8, ptr %ecx.memory.i7910, i64 16
  %ecx.memory.len.i7912 = load i64, ptr %ecx.memory.len.addr.i7911, align 8, !noalias !1208
  %ecx.memory.last_checkpoint.addr.i7913 = getelementptr inbounds i8, ptr %ecx.memory.i7910, i64 48
  %ecx.memory.last_checkpoint.i7914 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7913, align 8, !noalias !1208
  %764 = sub i64 %ecx.memory.len.i7912, %ecx.memory.last_checkpoint.i7914
  %765 = icmp ult i64 %764, 96
  br i1 %765, label %resize.i7922, label %OP1207.MLOAD.contd, !prof !5

resize.i7922:                                     ; preds = %OP1197.POP
  %766 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1212
  %.not.i7923 = icmp eq i8 %766, 0
  br i1 %.not.i7923, label %resize.i7922.OP1207.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7922.OP1207.MLOAD.contd_crit_edge:        ; preds = %resize.i7922
  %dup34147.pre = load i256, ptr %sp3898, align 16
  %ecx.memory.i7926.pre = load ptr, ptr %ecx.memory.addr.i7849, align 8, !alias.scope !1213
  br label %OP1207.MLOAD.contd

OP1207.MLOAD.contd:                               ; preds = %resize.i7922.OP1207.MLOAD.contd_crit_edge, %OP1197.POP
  %ecx.memory.i7926 = phi ptr [ %ecx.memory.i7926.pre, %resize.i7922.OP1207.MLOAD.contd_crit_edge ], [ %ecx.memory.i7910, %OP1197.POP ]
  %dup34147 = phi i256 [ %dup34147.pre, %resize.i7922.OP1207.MLOAD.contd_crit_edge ], [ %dup54131, %OP1197.POP ]
  %ecx.memory.buffer.ptr.shared.addr.i7916 = getelementptr inbounds i8, ptr %ecx.memory.i7910, i64 8
  %ecx.memory.buffer.ptr.shared.i7917 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7916, align 8, !noalias !1208
  %ecx.memory.buffer.ptr.i7918 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7917, i64 %ecx.memory.last_checkpoint.i7914
  %slot.i7919 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7918, i64 64
  %slot.value.i7920 = load i256, ptr %slot.i7919, align 1, !noalias !1208
  %767 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7920)
  store i256 %767, ptr %sp3900, align 16
  %768 = add i64 %len.addr.39, 6
  %sp4144 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %719
  store i256 %767, ptr %sp4144, align 16
  %sp4148 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %768
  store i256 %dup34147, ptr %sp4148, align 16
  %sp4152 = getelementptr i256, ptr %716, i64 7
  store i256 %767, ptr %sp4152, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1213)
  %ecx.memory.len.addr.i7927 = getelementptr inbounds i8, ptr %ecx.memory.i7926, i64 16
  %ecx.memory.len.i7928 = load i64, ptr %ecx.memory.len.addr.i7927, align 8, !noalias !1213
  %ecx.memory.last_checkpoint.addr.i7929 = getelementptr inbounds i8, ptr %ecx.memory.i7926, i64 48
  %ecx.memory.last_checkpoint.i7930 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7929, align 8, !noalias !1213
  %769 = sub i64 %ecx.memory.len.i7928, %ecx.memory.last_checkpoint.i7930
  %770 = icmp ugt i256 %767, 18446744073709551615
  %771 = trunc i256 %767 to i64
  %772 = add i64 %771, 32
  %773 = icmp ugt i64 %771, -33
  %774 = or i1 %770, %773
  %775 = select i1 %774, i64 -1, i64 %772
  %776 = icmp ugt i64 %775, %769
  br i1 %776, label %resize.i7937, label %OP1212.PUSH1, !prof !5

resize.i7937:                                     ; preds = %OP1207.MLOAD.contd
  %777 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %775)
  %.not.i7938 = icmp eq i8 %777, 0
  br i1 %.not.i7938, label %OP1212.PUSH1, label %return, !prof !6

OP1212.PUSH1:                                     ; preds = %OP1207.MLOAD.contd, %resize.i7937
  %ecx.memory.buffer.ptr.shared.addr.i7932 = getelementptr inbounds i8, ptr %ecx.memory.i7926, i64 8
  %ecx.memory.buffer.ptr.shared.i7933 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7932, align 8, !noalias !1213
  %ecx.memory.buffer.ptr.i7934 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7933, i64 %ecx.memory.last_checkpoint.i7930
  %slot.i7935 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7934, i64 %771
  %778 = tail call i256 @llvm.bswap.i256(i256 %dup34147)
  store i256 %778, ptr %slot.i7935, align 1, !noalias !1213
  store i256 32, ptr %sp4148, align 16
  %b4164 = load i256, ptr %sp4144, align 16
  %779 = add i256 %b4164, 32
  %swap.b4170 = load i256, ptr %sp3898, align 16
  store i256 %779, ptr %sp3898, align 16
  store i256 %swap.b4170, ptr %sp4144, align 16
  store i256 64, ptr %sp3900, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1216)
  %ecx.memory.i7941 = load ptr, ptr %ecx.memory.addr.i7849, align 8, !alias.scope !1216, !noalias !1219
  %ecx.memory.len.addr.i7942 = getelementptr inbounds i8, ptr %ecx.memory.i7941, i64 16
  %ecx.memory.len.i7943 = load i64, ptr %ecx.memory.len.addr.i7942, align 8, !noalias !1221
  %ecx.memory.last_checkpoint.addr.i7944 = getelementptr inbounds i8, ptr %ecx.memory.i7941, i64 48
  %ecx.memory.last_checkpoint.i7945 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7944, align 8, !noalias !1221
  %780 = sub i64 %ecx.memory.len.i7943, %ecx.memory.last_checkpoint.i7945
  %781 = icmp ult i64 %780, 96
  br i1 %781, label %resize.i7953, label %OP1218.MLOAD.contd, !prof !5

resize.i7953:                                     ; preds = %OP1212.PUSH1
  %782 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1219
  %.not.i7954 = icmp eq i8 %782, 0
  br i1 %.not.i7954, label %resize.i7953.OP1218.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i7953.OP1218.MLOAD.contd_crit_edge:        ; preds = %resize.i7953
  %swap.b4189.pre = load i256, ptr %sp3898, align 16
  br label %OP1218.MLOAD.contd

OP1218.MLOAD.contd:                               ; preds = %resize.i7953.OP1218.MLOAD.contd_crit_edge, %OP1212.PUSH1
  %swap.b4189 = phi i256 [ %swap.b4189.pre, %resize.i7953.OP1218.MLOAD.contd_crit_edge ], [ %779, %OP1212.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i7947 = getelementptr inbounds i8, ptr %ecx.memory.i7941, i64 8
  %ecx.memory.buffer.ptr.shared.i7948 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7947, align 8, !noalias !1221
  %ecx.memory.buffer.ptr.i7949 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7948, i64 %ecx.memory.last_checkpoint.i7945
  %slot.i7950 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7949, i64 64
  %slot.value.i7951 = load i256, ptr %slot.i7950, align 1, !noalias !1221
  %783 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i7951)
  store i256 %swap.b4189, ptr %sp4144, align 16
  %784 = sub i256 %swap.b4189, %783
  store i256 %784, ptr %sp3898, align 16
  store i256 %783, ptr %sp3900, align 16
  %785 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %716, i8 3)
  %.not7140 = icmp eq i8 %785, 0
  br i1 %.not7140, label %OP1224.PUSH1, label %return, !prof !6

OP1224.PUSH1:                                     ; preds = %OP1218.MLOAD.contd
  %sp4208 = getelementptr i256, ptr %716, i64 -1
  %swap.b4209 = load i256, ptr %sp4208, align 16
  store i256 %swap.b4209, ptr %716, align 16
  %sp4214 = getelementptr i256, ptr %716, i64 -5
  %swap.b4215 = load i256, ptr %sp4214, align 16
  store i256 1, ptr %sp4214, align 16
  %swap.b4220 = load i256, ptr %sp3896, align 16
  store i256 %swap.b4215, ptr %sp3896, align 16
  store i256 %swap.b4220, ptr %sp4208, align 16
  %786 = add i64 %len.addr.39, -4
  br label %dynamic_jump_table.preheader

OP1233.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP355.JUMPDEST
  %len.addr.40 = phi i64 [ %178, %OP355.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %787 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.40
  %sp4229 = getelementptr i256, ptr %787, i64 -1
  %dup14230 = load i256, ptr %sp4229, align 16
  store i256 %dup14230, ptr %787, align 16
  %788 = add i64 %len.addr.40, 2
  %sp4233 = getelementptr i256, ptr %787, i64 1
  store i256 3, ptr %sp4233, align 16
  %789 = add i64 %len.addr.40, 3
  %sp4235 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %788
  store i256 0, ptr %sp4235, align 16
  %contract.caller.addr4237 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller4238 = load i160, ptr %contract.caller.addr4237, align 16
  %790 = tail call i160 @llvm.bswap.i160(i160 %contract.caller4238)
  %791 = zext i160 %790 to i256
  %sp4239 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %789
  %sp4241 = getelementptr i256, ptr %787, i64 4
  store i256 %791, ptr %sp4239, align 16
  store i256 0, ptr %sp4241, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1222)
  %ecx.memory.addr.i7956 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7957 = load ptr, ptr %ecx.memory.addr.i7956, align 8, !alias.scope !1222
  %ecx.memory.len.addr.i7958 = getelementptr inbounds i8, ptr %ecx.memory.i7957, i64 16
  %ecx.memory.len.i7959 = load i64, ptr %ecx.memory.len.addr.i7958, align 8, !noalias !1222
  %ecx.memory.last_checkpoint.addr.i7960 = getelementptr inbounds i8, ptr %ecx.memory.i7957, i64 48
  %ecx.memory.last_checkpoint.i7961 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7960, align 8, !noalias !1222
  %792 = sub i64 %ecx.memory.len.i7959, %ecx.memory.last_checkpoint.i7961
  %793 = icmp ult i64 %792, 32
  br i1 %793, label %resize.i7968, label %OP1244.PUSH1, !prof !5

resize.i7968:                                     ; preds = %OP1233.JUMPDEST
  %794 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7969 = icmp eq i8 %794, 0
  br i1 %.not.i7969, label %OP1244.PUSH1, label %return, !prof !6

OP1244.PUSH1:                                     ; preds = %OP1233.JUMPDEST, %resize.i7968
  %ecx.memory.buffer.ptr.shared.addr.i7963 = getelementptr inbounds i8, ptr %ecx.memory.i7957, i64 8
  %ecx.memory.buffer.ptr.shared.i7964 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7963, align 8, !noalias !1222
  %ecx.memory.buffer.ptr.i7965 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7964, i64 %ecx.memory.last_checkpoint.i7961
  %795 = tail call i256 @llvm.bswap.i256(i256 %791)
  store i256 %795, ptr %ecx.memory.buffer.ptr.i7965, align 1, !noalias !1222
  %b4271 = load i256, ptr %sp4235, align 16
  %796 = add i256 %b4271, 32
  %swap.b4277 = load i256, ptr %sp4233, align 16
  store i256 %796, ptr %sp4233, align 16
  store i256 %swap.b4277, ptr %sp4235, align 16
  store i256 %796, ptr %sp4239, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1225)
  %ecx.memory.i7972 = load ptr, ptr %ecx.memory.addr.i7956, align 8, !alias.scope !1225
  %ecx.memory.len.addr.i7973 = getelementptr inbounds i8, ptr %ecx.memory.i7972, i64 16
  %ecx.memory.len.i7974 = load i64, ptr %ecx.memory.len.addr.i7973, align 8, !noalias !1225
  %ecx.memory.last_checkpoint.addr.i7975 = getelementptr inbounds i8, ptr %ecx.memory.i7972, i64 48
  %ecx.memory.last_checkpoint.i7976 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7975, align 8, !noalias !1225
  %797 = sub i64 %ecx.memory.len.i7974, %ecx.memory.last_checkpoint.i7976
  %798 = icmp ugt i256 %796, 18446744073709551615
  %799 = trunc i256 %796 to i64
  %800 = add i64 %799, 32
  %801 = icmp ugt i64 %799, -33
  %802 = or i1 %798, %801
  %803 = select i1 %802, i64 -1, i64 %800
  %804 = icmp ugt i64 %803, %797
  br i1 %804, label %resize.i7983, label %OP1249.PUSH1, !prof !5

resize.i7983:                                     ; preds = %OP1244.PUSH1
  %805 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %803)
  %.not.i7984 = icmp eq i8 %805, 0
  br i1 %.not.i7984, label %OP1249.PUSH1, label %return, !prof !6

OP1249.PUSH1:                                     ; preds = %OP1244.PUSH1, %resize.i7983
  %ecx.memory.buffer.ptr.shared.addr.i7978 = getelementptr inbounds i8, ptr %ecx.memory.i7972, i64 8
  %ecx.memory.buffer.ptr.shared.i7979 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7978, align 8, !noalias !1225
  %ecx.memory.buffer.ptr.i7980 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7979, i64 %ecx.memory.last_checkpoint.i7976
  %slot.i7981 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i7980, i64 %799
  %806 = tail call i256 @llvm.bswap.i256(i256 %swap.b4277)
  store i256 %806, ptr %slot.i7981, align 1, !noalias !1225
  %b4293 = load i256, ptr %sp4233, align 16
  %807 = add i256 %b4293, 32
  store i256 %807, ptr %sp4233, align 16
  store i256 0, ptr %sp4235, align 16
  %808 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4233)
  %.not7079 = icmp eq i8 %808, 0
  br i1 %.not7079, label %OP1253.SLOAD, label %return, !prof !6

OP1253.SLOAD:                                     ; preds = %OP1249.PUSH1
  %809 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4233, i8 17)
  %.not7080 = icmp eq i8 %809, 0
  br i1 %.not7080, label %OP1254.LT, label %return, !prof !6

OP1254.LT:                                        ; preds = %OP1253.SLOAD
  %a4303 = load i256, ptr %sp4233, align 16
  %b4305 = load i256, ptr %787, align 16
  %.not7081 = icmp uge i256 %a4303, %b4305
  %810 = zext i1 %.not7081 to i256
  store i256 %810, ptr %787, align 16
  br i1 %.not7081, label %OP1263.JUMPDEST, label %OP1260.PUSH1

OP1260.PUSH1:                                     ; preds = %OP1254.LT
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(64) %787, i8 0, i64 64, i1 false)
  %811 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %787, i8 16)
  %.not7082 = icmp eq i8 %811, 0
  %spec.select5348 = select i1 %.not7082, i8 16, i8 %811, !prof !6
  br label %return

OP1263.JUMPDEST.loopexit:                         ; preds = %dynamic_jump_table
  %contract.caller.addr4340.phi.trans.insert = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller4341.pre = load i160, ptr %contract.caller.addr4340.phi.trans.insert, align 16
  %.pre = add i64 %len.addr.51, 3
  %.pre8586 = add i64 %len.addr.51, 2
  %.pre8588 = tail call i160 @llvm.bswap.i160(i160 %contract.caller4341.pre)
  %.pre8590 = zext i160 %.pre8588 to i256
  br label %OP1263.JUMPDEST

OP1263.JUMPDEST:                                  ; preds = %OP1263.JUMPDEST.loopexit, %OP1254.LT
  %.pre-phi8591 = phi i256 [ %.pre8590, %OP1263.JUMPDEST.loopexit ], [ %791, %OP1254.LT ]
  %.pre-phi8587 = phi i64 [ %.pre8586, %OP1263.JUMPDEST.loopexit ], [ %788, %OP1254.LT ]
  %.pre-phi = phi i64 [ %.pre, %OP1263.JUMPDEST.loopexit ], [ %789, %OP1254.LT ]
  %len.addr.41 = phi i64 [ %len.addr.51, %OP1263.JUMPDEST.loopexit ], [ %len.addr.40, %OP1254.LT ]
  %812 = add i64 %len.addr.41, 1
  %813 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.41
  %sp4332 = getelementptr i256, ptr %813, i64 -1
  %dup14333 = load i256, ptr %sp4332, align 16
  store i256 %dup14333, ptr %813, align 16
  %sp4336 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %812
  store i256 3, ptr %sp4336, align 16
  %sp4338 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi8587
  store i256 0, ptr %sp4338, align 16
  %814 = add i64 %len.addr.41, 4
  %sp4342 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %.pre-phi
  %815 = add i64 %len.addr.41, 5
  %sp4344 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %814
  store i256 %.pre-phi8591, ptr %sp4342, align 16
  store i256 0, ptr %sp4344, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1228)
  %ecx.memory.addr.i7986 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i7987 = load ptr, ptr %ecx.memory.addr.i7986, align 8, !alias.scope !1228
  %ecx.memory.len.addr.i7988 = getelementptr inbounds i8, ptr %ecx.memory.i7987, i64 16
  %ecx.memory.len.i7989 = load i64, ptr %ecx.memory.len.addr.i7988, align 8, !noalias !1228
  %ecx.memory.last_checkpoint.addr.i7990 = getelementptr inbounds i8, ptr %ecx.memory.i7987, i64 48
  %ecx.memory.last_checkpoint.i7991 = load i64, ptr %ecx.memory.last_checkpoint.addr.i7990, align 8, !noalias !1228
  %816 = sub i64 %ecx.memory.len.i7989, %ecx.memory.last_checkpoint.i7991
  %817 = icmp ult i64 %816, 32
  br i1 %817, label %resize.i7998, label %OP1274.PUSH1, !prof !5

resize.i7998:                                     ; preds = %OP1263.JUMPDEST
  %818 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i7999 = icmp eq i8 %818, 0
  br i1 %.not.i7999, label %OP1274.PUSH1, label %return, !prof !6

OP1274.PUSH1:                                     ; preds = %OP1263.JUMPDEST, %resize.i7998
  %ecx.memory.buffer.ptr.shared.addr.i7993 = getelementptr inbounds i8, ptr %ecx.memory.i7987, i64 8
  %ecx.memory.buffer.ptr.shared.i7994 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i7993, align 8, !noalias !1228
  %ecx.memory.buffer.ptr.i7995 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i7994, i64 %ecx.memory.last_checkpoint.i7991
  %819 = tail call i256 @llvm.bswap.i256(i256 %.pre-phi8591)
  store i256 %819, ptr %ecx.memory.buffer.ptr.i7995, align 1, !noalias !1228
  store i256 32, ptr %sp4342, align 16
  %b4374 = load i256, ptr %sp4338, align 16
  %820 = add i256 %b4374, 32
  store i256 %820, ptr %sp4338, align 16
  %swap.b4380 = load i256, ptr %sp4336, align 16
  store i256 %820, ptr %sp4336, align 16
  store i256 %swap.b4380, ptr %sp4338, align 16
  store i256 %820, ptr %sp4342, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1231)
  %ecx.memory.i8002 = load ptr, ptr %ecx.memory.addr.i7986, align 8, !alias.scope !1231
  %ecx.memory.len.addr.i8003 = getelementptr inbounds i8, ptr %ecx.memory.i8002, i64 16
  %ecx.memory.len.i8004 = load i64, ptr %ecx.memory.len.addr.i8003, align 8, !noalias !1231
  %ecx.memory.last_checkpoint.addr.i8005 = getelementptr inbounds i8, ptr %ecx.memory.i8002, i64 48
  %ecx.memory.last_checkpoint.i8006 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8005, align 8, !noalias !1231
  %821 = sub i64 %ecx.memory.len.i8004, %ecx.memory.last_checkpoint.i8006
  %822 = icmp ugt i256 %820, 18446744073709551615
  %823 = trunc i256 %820 to i64
  %824 = add i64 %823, 32
  %825 = icmp ugt i64 %823, -33
  %826 = or i1 %822, %825
  %827 = select i1 %826, i64 -1, i64 %824
  %828 = icmp ugt i64 %827, %821
  br i1 %828, label %resize.i8013, label %OP1279.PUSH1, !prof !5

resize.i8013:                                     ; preds = %OP1274.PUSH1
  %829 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %827)
  %.not.i8014 = icmp eq i8 %829, 0
  br i1 %.not.i8014, label %OP1279.PUSH1, label %return, !prof !6

OP1279.PUSH1:                                     ; preds = %OP1274.PUSH1, %resize.i8013
  %ecx.memory.buffer.ptr.shared.addr.i8008 = getelementptr inbounds i8, ptr %ecx.memory.i8002, i64 8
  %ecx.memory.buffer.ptr.shared.i8009 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8008, align 8, !noalias !1231
  %ecx.memory.buffer.ptr.i8010 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8009, i64 %ecx.memory.last_checkpoint.i8006
  %slot.i8011 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8010, i64 %823
  %830 = tail call i256 @llvm.bswap.i256(i256 %swap.b4380)
  store i256 %830, ptr %slot.i8011, align 1, !noalias !1231
  store i256 32, ptr %sp4338, align 16
  %b4396 = load i256, ptr %sp4336, align 16
  %831 = add i256 %b4396, 32
  store i256 %831, ptr %sp4336, align 16
  store i256 0, ptr %sp4338, align 16
  %832 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4336)
  %.not7085 = icmp eq i8 %832, 0
  br i1 %.not7085, label %OP1283.PUSH1, label %return, !prof !6

OP1283.PUSH1:                                     ; preds = %OP1279.PUSH1
  store i256 0, ptr %sp4338, align 16
  %dup34406 = load i256, ptr %813, align 16
  store i256 %dup34406, ptr %sp4342, align 16
  %dup34410 = load i256, ptr %sp4336, align 16
  store i256 %dup34410, ptr %sp4344, align 16
  %833 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4344, i8 17)
  %.not7086 = icmp eq i8 %833, 0
  br i1 %.not7086, label %OP1287.SUB, label %return, !prof !6

OP1287.SUB:                                       ; preds = %OP1283.PUSH1
  %a4416 = load i256, ptr %sp4344, align 16
  %b4418 = load i256, ptr %sp4342, align 16
  %834 = sub i256 %a4416, %b4418
  store i256 %834, ptr %sp4342, align 16
  %swap.b4424 = load i256, ptr %813, align 16
  store i256 %834, ptr %813, align 16
  store i256 %swap.b4424, ptr %sp4342, align 16
  store i256 %834, ptr %sp4338, align 16
  %swap.b4435 = load i256, ptr %sp4336, align 16
  store i256 %834, ptr %sp4336, align 16
  store i256 %swap.b4435, ptr %sp4338, align 16
  %835 = tail call i8 @__revmc_builtin_sstore(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4336, i8 17)
  %.not7087 = icmp eq i8 %835, 0
  br i1 %.not7087, label %OP1294.POP, label %return, !prof !6

OP1294.POP:                                       ; preds = %OP1287.SUB
  store i256 %.pre-phi8591, ptr %813, align 16
  %dup34455 = load i256, ptr %sp4332, align 16
  %836 = icmp eq i256 %dup34455, 0
  %837 = select i1 %836, i256 2300, i256 0
  store i256 %837, ptr %sp4336, align 16
  store i256 %dup34455, ptr %sp4338, align 16
  store i256 64, ptr %sp4342, align 16
  %ecx.memory.i8017 = load ptr, ptr %ecx.memory.addr.i7986, align 8, !noalias !1234
  %ecx.memory.len.addr.i8018 = getelementptr inbounds i8, ptr %ecx.memory.i8017, i64 16
  %ecx.memory.len.i8019 = load i64, ptr %ecx.memory.len.addr.i8018, align 8, !noalias !1235
  %ecx.memory.last_checkpoint.addr.i8020 = getelementptr inbounds i8, ptr %ecx.memory.i8017, i64 48
  %ecx.memory.last_checkpoint.i8021 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8020, align 8, !noalias !1235
  %838 = sub i64 %ecx.memory.len.i8019, %ecx.memory.last_checkpoint.i8021
  %839 = icmp ult i64 %838, 96
  br i1 %839, label %resize.i8029, label %OP1306.MLOAD.contd, !prof !5

resize.i8029:                                     ; preds = %OP1294.POP
  %840 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1239
  %.not.i8030 = icmp eq i8 %840, 0
  br i1 %.not.i8030, label %resize.i8029.OP1306.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i8029.OP1306.MLOAD.contd_crit_edge:        ; preds = %resize.i8029
  %ecx.memory.i8033.pre = load ptr, ptr %ecx.memory.addr.i7986, align 8, !alias.scope !1240, !noalias !1243
  br label %OP1306.MLOAD.contd

OP1306.MLOAD.contd:                               ; preds = %resize.i8029.OP1306.MLOAD.contd_crit_edge, %OP1294.POP
  %ecx.memory.i8033 = phi ptr [ %ecx.memory.i8033.pre, %resize.i8029.OP1306.MLOAD.contd_crit_edge ], [ %ecx.memory.i8017, %OP1294.POP ]
  %ecx.memory.buffer.ptr.shared.addr.i8023 = getelementptr inbounds i8, ptr %ecx.memory.i8017, i64 8
  %ecx.memory.buffer.ptr.shared.i8024 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8023, align 8, !noalias !1235
  %ecx.memory.buffer.ptr.i8025 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8024, i64 %ecx.memory.last_checkpoint.i8021
  %slot.i8026 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8025, i64 64
  %slot.value.i8027 = load i256, ptr %slot.i8026, align 1, !noalias !1235
  %841 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i8027)
  store i256 %841, ptr %sp4342, align 16
  store i256 0, ptr %sp4344, align 16
  %842 = add i64 %len.addr.41, 6
  %sp4492 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %815
  store i256 64, ptr %sp4492, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1240)
  %ecx.memory.len.addr.i8034 = getelementptr inbounds i8, ptr %ecx.memory.i8033, i64 16
  %ecx.memory.len.i8035 = load i64, ptr %ecx.memory.len.addr.i8034, align 8, !noalias !1245
  %ecx.memory.last_checkpoint.addr.i8036 = getelementptr inbounds i8, ptr %ecx.memory.i8033, i64 48
  %ecx.memory.last_checkpoint.i8037 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8036, align 8, !noalias !1245
  %843 = sub i64 %ecx.memory.len.i8035, %ecx.memory.last_checkpoint.i8037
  %844 = icmp ult i64 %843, 96
  br i1 %844, label %resize.i8045, label %OP1309.MLOAD.contd, !prof !5

resize.i8045:                                     ; preds = %OP1306.MLOAD.contd
  %845 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1243
  %.not.i8046 = icmp eq i8 %845, 0
  br i1 %.not.i8046, label %OP1309.MLOAD.contd, label %return, !prof !6

OP1309.MLOAD.contd:                               ; preds = %OP1306.MLOAD.contd, %resize.i8045
  %ecx.memory.buffer.ptr.shared.addr.i8039 = getelementptr inbounds i8, ptr %ecx.memory.i8033, i64 8
  %ecx.memory.buffer.ptr.shared.i8040 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8039, align 8, !noalias !1245
  %ecx.memory.buffer.ptr.i8041 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8040, i64 %ecx.memory.last_checkpoint.i8037
  %slot.i8042 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8041, i64 64
  %slot.value.i8043 = load i256, ptr %slot.i8042, align 1, !noalias !1245
  %846 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i8043)
  store i256 %846, ptr %sp4492, align 16
  %sp4502 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %842
  %sp4504 = getelementptr i256, ptr %813, i64 3
  %dup44505 = load i256, ptr %sp4504, align 16
  %sp4506 = getelementptr i256, ptr %813, i64 7
  %847 = sub i256 %dup44505, %846
  store i256 %847, ptr %sp4502, align 16
  store i256 %846, ptr %sp4506, align 16
  %sp4518 = getelementptr i256, ptr %813, i64 2
  %dup64519 = load i256, ptr %sp4518, align 16
  %sp4520 = getelementptr i256, ptr %813, i64 8
  store i256 %dup64519, ptr %sp4520, align 16
  %dup9 = load i256, ptr %813, align 16
  %sp4523 = getelementptr i256, ptr %813, i64 9
  store i256 %dup9, ptr %sp4523, align 16
  %sp4525 = getelementptr i256, ptr %813, i64 1
  %dup94526 = load i256, ptr %sp4525, align 16
  %sp4527 = getelementptr i256, ptr %813, i64 10
  store i256 %dup94526, ptr %sp4527, align 16
  %sp4529 = getelementptr i256, ptr %813, i64 4
  %848 = tail call i8 @__revmc_builtin_call(ptr nonnull %arg.ecx.addr, ptr %sp4529, i8 17, i8 0)
  %.not7090 = icmp eq i8 %848, 0
  br i1 %.not7090, label %suspend, label %return, !prof !6

OP1318.SWAP4:                                     ; preds = %entry
  %stack_len5325 = load i64, ptr %arg.stack_len.addr, align 8
  %849 = getelementptr i256, ptr %arg.stack.addr, i64 %stack_len5325
  %sp4531 = getelementptr i256, ptr %849, i64 -1
  %swap.a4532 = load i256, ptr %sp4531, align 16
  %sp4533 = getelementptr i256, ptr %849, i64 -5
  %swap.b4534 = load i256, ptr %sp4533, align 16
  store i256 %swap.b4534, ptr %sp4531, align 16
  %850 = add i64 %stack_len5325, -5
  %sp4540 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %850
  %851 = icmp ne i256 %swap.a4532, 0
  %852 = zext i1 %851 to i256
  store i256 %852, ptr %sp4540, align 16
  br i1 %851, label %OP1330.JUMPDEST, label %OP1327.PUSH1

OP1327.PUSH1:                                     ; preds = %OP1318.SWAP4
  store i256 0, ptr %sp4540, align 16
  %sp4555 = getelementptr i256, ptr %849, i64 -4
  store i256 0, ptr %sp4555, align 16
  %853 = tail call i8 @__revmc_builtin_do_return(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4533, i8 16)
  %.not = icmp eq i8 %853, 0
  %spec.select5349 = select i1 %.not, i8 16, i8 %853, !prof !6
  br label %return

OP1330.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1318.SWAP4
  %len.addr.42 = phi i64 [ %850, %OP1318.SWAP4 ], [ %len.addr.51, %dynamic_jump_table ]
  %contract.caller.addr4560 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller4561 = load i160, ptr %contract.caller.addr4560, align 16
  %854 = tail call i160 @llvm.bswap.i160(i160 %contract.caller4561)
  %855 = zext i160 %854 to i256
  %sp4562 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.42
  %sp4564 = getelementptr i256, ptr %sp4562, i64 1
  store i256 %855, ptr %sp4562, align 16
  store i256 57810043145978950376228313794938171962422655018555593468903716172405399886693, ptr %sp4564, align 16
  %sp4574 = getelementptr i256, ptr %sp4562, i64 -1
  %dup34575 = load i256, ptr %sp4574, align 16
  %sp4576 = getelementptr i256, ptr %sp4562, i64 2
  store i256 %dup34575, ptr %sp4576, align 16
  %856 = add i64 %len.addr.42, 4
  %sp4578 = getelementptr i256, ptr %sp4562, i64 3
  store i256 64, ptr %sp4578, align 16
  %mload.out.slot4582 = alloca i256, align 16
  %857 = call fastcc i8 @__revmc_ir_builtin_mload(i256 64, ptr %mload.out.slot4582, ptr %arg.ecx.addr)
  %.not7014 = icmp eq i8 %857, 0
  br i1 %.not7014, label %OP1337.MLOAD.contd, label %return, !prof !6

OP1337.MLOAD.contd:                               ; preds = %OP1330.JUMPDEST
  %mload.out4583 = load i256, ptr %mload.out.slot4582, align 16
  store i256 %mload.out4583, ptr %sp4578, align 16
  %858 = add i64 %len.addr.42, 5
  %sp4588 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %856
  store i256 %mload.out4583, ptr %sp4588, align 16
  %dup34591 = load i256, ptr %sp4576, align 16
  %sp4592 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %858
  store i256 %dup34591, ptr %sp4592, align 16
  %sp4596 = getelementptr i256, ptr %sp4562, i64 6
  store i256 %mload.out4583, ptr %sp4596, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1246)
  %ecx.memory.addr.i8048 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i8049 = load ptr, ptr %ecx.memory.addr.i8048, align 8, !alias.scope !1246
  %ecx.memory.len.addr.i8050 = getelementptr inbounds i8, ptr %ecx.memory.i8049, i64 16
  %ecx.memory.len.i8051 = load i64, ptr %ecx.memory.len.addr.i8050, align 8, !noalias !1246
  %ecx.memory.last_checkpoint.addr.i8052 = getelementptr inbounds i8, ptr %ecx.memory.i8049, i64 48
  %ecx.memory.last_checkpoint.i8053 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8052, align 8, !noalias !1246
  %859 = sub i64 %ecx.memory.len.i8051, %ecx.memory.last_checkpoint.i8053
  %860 = icmp ugt i256 %mload.out4583, 18446744073709551615
  %861 = trunc i256 %mload.out4583 to i64
  %862 = add i64 %861, 32
  %863 = icmp ugt i64 %861, -33
  %864 = or i1 %860, %863
  %865 = select i1 %864, i64 -1, i64 %862
  %866 = icmp ugt i64 %865, %859
  br i1 %866, label %resize.i8060, label %OP1342.PUSH1, !prof !5

resize.i8060:                                     ; preds = %OP1337.MLOAD.contd
  %867 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %865)
  %.not.i8061 = icmp eq i8 %867, 0
  br i1 %.not.i8061, label %OP1342.PUSH1, label %return, !prof !6

OP1342.PUSH1:                                     ; preds = %OP1337.MLOAD.contd, %resize.i8060
  %ecx.memory.buffer.ptr.shared.addr.i8055 = getelementptr inbounds i8, ptr %ecx.memory.i8049, i64 8
  %ecx.memory.buffer.ptr.shared.i8056 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8055, align 8, !noalias !1246
  %ecx.memory.buffer.ptr.i8057 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8056, i64 %ecx.memory.last_checkpoint.i8053
  %slot.i8058 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8057, i64 %861
  %868 = tail call i256 @llvm.bswap.i256(i256 %dup34591)
  store i256 %868, ptr %slot.i8058, align 1, !noalias !1246
  store i256 32, ptr %sp4592, align 16
  %b4608 = load i256, ptr %sp4588, align 16
  %869 = add i256 %b4608, 32
  %swap.b4614 = load i256, ptr %sp4576, align 16
  store i256 %869, ptr %sp4576, align 16
  store i256 %swap.b4614, ptr %sp4588, align 16
  store i256 64, ptr %sp4578, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1249)
  %ecx.memory.i8064 = load ptr, ptr %ecx.memory.addr.i8048, align 8, !alias.scope !1249, !noalias !1252
  %ecx.memory.len.addr.i8065 = getelementptr inbounds i8, ptr %ecx.memory.i8064, i64 16
  %ecx.memory.len.i8066 = load i64, ptr %ecx.memory.len.addr.i8065, align 8, !noalias !1254
  %ecx.memory.last_checkpoint.addr.i8067 = getelementptr inbounds i8, ptr %ecx.memory.i8064, i64 48
  %ecx.memory.last_checkpoint.i8068 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8067, align 8, !noalias !1254
  %870 = sub i64 %ecx.memory.len.i8066, %ecx.memory.last_checkpoint.i8068
  %871 = icmp ult i64 %870, 96
  br i1 %871, label %resize.i8076, label %OP1348.MLOAD.contd, !prof !5

resize.i8076:                                     ; preds = %OP1342.PUSH1
  %872 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1252
  %.not.i8077 = icmp eq i8 %872, 0
  br i1 %.not.i8077, label %resize.i8076.OP1348.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i8076.OP1348.MLOAD.contd_crit_edge:        ; preds = %resize.i8076
  %swap.b4633.pre = load i256, ptr %sp4576, align 16
  br label %OP1348.MLOAD.contd

OP1348.MLOAD.contd:                               ; preds = %resize.i8076.OP1348.MLOAD.contd_crit_edge, %OP1342.PUSH1
  %swap.b4633 = phi i256 [ %swap.b4633.pre, %resize.i8076.OP1348.MLOAD.contd_crit_edge ], [ %869, %OP1342.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i8070 = getelementptr inbounds i8, ptr %ecx.memory.i8064, i64 8
  %ecx.memory.buffer.ptr.shared.i8071 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8070, align 8, !noalias !1254
  %ecx.memory.buffer.ptr.i8072 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8071, i64 %ecx.memory.last_checkpoint.i8068
  %slot.i8073 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8072, i64 64
  %slot.value.i8074 = load i256, ptr %slot.i8073, align 1, !noalias !1254
  %873 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i8074)
  store i256 %swap.b4633, ptr %sp4588, align 16
  %874 = sub i256 %swap.b4633, %873
  store i256 %874, ptr %sp4576, align 16
  store i256 %873, ptr %sp4578, align 16
  %875 = tail call i8 @__revmc_builtin_log(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4562, i8 2)
  %.not7017 = icmp eq i8 %875, 0
  br i1 %.not7017, label %OP1354.POP, label %return, !prof !6

OP1354.POP:                                       ; preds = %OP1348.MLOAD.contd
  %876 = add i64 %len.addr.42, -2
  %sp4649 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %876
  %a4650 = load i256, ptr %sp4649, align 16
  br label %dynamic_jump_table.preheader

OP1356.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP381.JUMPDEST
  %len.addr.43 = phi i64 [ %185, %OP381.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %877 = add i64 %len.addr.43, 1
  %sp4653 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.43
  %878 = add i64 %len.addr.43, 2
  %sp4655 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %877
  store i256 0, ptr %sp4653, align 16
  store i256 2, ptr %sp4655, align 16
  %879 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4655, i8 17)
  %.not7074 = icmp eq i8 %879, 0
  br i1 %.not7074, label %OP1361.SWAP1, label %return, !prof !6

OP1361.SWAP1:                                     ; preds = %OP1356.JUMPDEST
  %swap.a4665 = load i256, ptr %sp4655, align 16
  %swap.b4667 = load i256, ptr %sp4653, align 16
  store i256 %swap.a4665, ptr %sp4653, align 16
  store i256 %swap.b4667, ptr %sp4655, align 16
  %sp4669 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %878
  store i256 256, ptr %sp4669, align 16
  %880 = tail call i8 @__revmc_builtin_exp(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4655, i8 17)
  %.not7075 = icmp eq i8 %880, 0
  br i1 %.not7075, label %OP1364.SWAP1, label %return, !prof !6

OP1364.SWAP1:                                     ; preds = %OP1361.SWAP1
  %swap.a4674 = load i256, ptr %sp4655, align 16
  %swap.b4676 = load i256, ptr %sp4653, align 16
  %881 = udiv i256 %swap.b4676, %swap.a4674
  %882 = and i256 %881, 255
  store i256 %882, ptr %sp4653, align 16
  %sp4692 = getelementptr i256, ptr %sp4653, i64 -1
  %dup24693 = load i256, ptr %sp4692, align 16
  store i256 %dup24693, ptr %sp4655, align 16
  br label %dynamic_jump_table.preheader

OP1370.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP416.JUMPDEST
  %len.addr.44 = phi i64 [ %199, %OP416.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %883 = add i64 %len.addr.44, 1
  %sp4700 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.44
  store i256 3, ptr %sp4700, align 16
  %sp4702 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %883
  store i256 32, ptr %sp4702, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1255)
  %ecx.memory.addr.i8079 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i8080 = load ptr, ptr %ecx.memory.addr.i8079, align 8, !alias.scope !1255
  %ecx.memory.len.addr.i8081 = getelementptr inbounds i8, ptr %ecx.memory.i8080, i64 16
  %ecx.memory.len.i8082 = load i64, ptr %ecx.memory.len.addr.i8081, align 8, !noalias !1255
  %ecx.memory.last_checkpoint.addr.i8083 = getelementptr inbounds i8, ptr %ecx.memory.i8080, i64 48
  %ecx.memory.last_checkpoint.i8084 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8083, align 8, !noalias !1255
  %884 = sub i64 %ecx.memory.len.i8082, %ecx.memory.last_checkpoint.i8084
  %885 = icmp ult i64 %884, 64
  br i1 %885, label %resize.i8091, label %OP1374.DUP1, !prof !5

resize.i8091:                                     ; preds = %OP1370.JUMPDEST
  %886 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i8092 = icmp eq i8 %886, 0
  br i1 %.not.i8092, label %OP1374.DUP1, label %return, !prof !6

OP1374.DUP1:                                      ; preds = %OP1370.JUMPDEST, %resize.i8091
  %ecx.memory.buffer.ptr.shared.addr.i8086 = getelementptr inbounds i8, ptr %ecx.memory.i8080, i64 8
  %ecx.memory.buffer.ptr.shared.i8087 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8086, align 8, !noalias !1255
  %ecx.memory.buffer.ptr.i8088 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8087, i64 %ecx.memory.last_checkpoint.i8084
  %slot.i8089 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8088, i64 32
  store i256 1356938545749799165119972480570561420155507632800475359837393562592731987968, ptr %slot.i8089, align 1, !noalias !1255
  %sp4709 = getelementptr i256, ptr %sp4700, i64 -1
  %dup14710 = load i256, ptr %sp4709, align 16
  store i256 %dup14710, ptr %sp4700, align 16
  store i256 0, ptr %sp4702, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1258)
  %ecx.memory.i8095 = load ptr, ptr %ecx.memory.addr.i8079, align 8, !alias.scope !1258
  %ecx.memory.len.addr.i8096 = getelementptr inbounds i8, ptr %ecx.memory.i8095, i64 16
  %ecx.memory.len.i8097 = load i64, ptr %ecx.memory.len.addr.i8096, align 8, !noalias !1258
  %ecx.memory.last_checkpoint.addr.i8098 = getelementptr inbounds i8, ptr %ecx.memory.i8095, i64 48
  %ecx.memory.last_checkpoint.i8099 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8098, align 8, !noalias !1258
  %887 = sub i64 %ecx.memory.len.i8097, %ecx.memory.last_checkpoint.i8099
  %888 = icmp ult i64 %887, 32
  br i1 %888, label %resize.i8105, label %OP1377.PUSH1, !prof !5

resize.i8105:                                     ; preds = %OP1374.DUP1
  %889 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i8106 = icmp eq i8 %889, 0
  br i1 %.not.i8106, label %OP1377.PUSH1, label %return, !prof !6

OP1377.PUSH1:                                     ; preds = %OP1374.DUP1, %resize.i8105
  %ecx.memory.buffer.ptr.shared.addr.i8101 = getelementptr inbounds i8, ptr %ecx.memory.i8095, i64 8
  %ecx.memory.buffer.ptr.shared.i8102 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8101, align 8, !noalias !1258
  %ecx.memory.buffer.ptr.i8103 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8102, i64 %ecx.memory.last_checkpoint.i8099
  %890 = tail call i256 @llvm.bswap.i256(i256 %dup14710)
  store i256 %890, ptr %ecx.memory.buffer.ptr.i8103, align 1, !noalias !1258
  store i256 64, ptr %sp4700, align 16
  store i256 0, ptr %sp4702, align 16
  %891 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4700)
  %.not7067 = icmp eq i8 %891, 0
  br i1 %.not7067, label %OP1380.PUSH1, label %return, !prof !6

OP1380.PUSH1:                                     ; preds = %OP1377.PUSH1
  %swap.b4731 = load i256, ptr %sp4709, align 16
  store i256 %swap.b4731, ptr %sp4702, align 16
  %swap.a4735 = load i256, ptr %sp4700, align 16
  store i256 %swap.a4735, ptr %sp4709, align 16
  store i256 0, ptr %sp4700, align 16
  %892 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4709, i8 17)
  %.not7068 = icmp eq i8 %892, 0
  br i1 %.not7068, label %OP1386.DUP2, label %return, !prof !6

OP1386.DUP2:                                      ; preds = %OP1380.PUSH1
  %sp4742 = getelementptr i256, ptr %sp4700, i64 -2
  %dup24743 = load i256, ptr %sp4742, align 16
  store i256 %dup24743, ptr %sp4700, align 16
  br label %dynamic_jump_table.preheader

OP1388.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP461.JUMPDEST
  %len.addr.45 = phi i64 [ %216, %OP461.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp4750 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.45
  store i256 1, ptr %sp4750, align 16
  %893 = add i64 %len.addr.45, 2
  %sp4754 = getelementptr i256, ptr %sp4750, i64 1
  store i256 1, ptr %sp4754, align 16
  %894 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4754, i8 17)
  %.not7049 = icmp eq i8 %894, 0
  br i1 %.not7049, label %OP1392.PUSH1, label %return, !prof !6

OP1392.PUSH1:                                     ; preds = %OP1388.JUMPDEST
  %895 = add i64 %len.addr.45, 3
  %sp4758 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %893
  %896 = add i64 %len.addr.45, 4
  %dup24761 = load i256, ptr %sp4754, align 16
  %sp4762 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %895
  %sp4764 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %896
  %897 = shl i256 %dup24761, 8
  %898 = and i256 %897, 256
  %899 = xor i256 %898, 256
  %900 = add nsw i256 %899, -1
  %901 = and i256 %900, %dup24761
  %902 = lshr i256 %901, 1
  store i256 %902, ptr %sp4754, align 16
  %903 = add nuw i256 %902, 31
  store i256 %903, ptr %sp4764, align 16
  %904 = and i256 %903, -32
  %905 = add nuw i256 %904, 32
  store i256 %905, ptr %sp4758, align 16
  store i256 64, ptr %sp4762, align 16
  %ecx.memory.addr.i8108 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i8109 = load ptr, ptr %ecx.memory.addr.i8108, align 8
  %ecx.memory.len.addr.i8110 = getelementptr inbounds i8, ptr %ecx.memory.i8109, i64 16
  %ecx.memory.len.i8111 = load i64, ptr %ecx.memory.len.addr.i8110, align 8, !noalias !1261
  %ecx.memory.last_checkpoint.addr.i8112 = getelementptr inbounds i8, ptr %ecx.memory.i8109, i64 48
  %ecx.memory.last_checkpoint.i8113 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8112, align 8, !noalias !1261
  %906 = sub i64 %ecx.memory.len.i8111, %ecx.memory.last_checkpoint.i8113
  %907 = icmp ult i64 %906, 96
  br i1 %907, label %resize.i8121, label %OP1415.MLOAD.contd, !prof !5

resize.i8121:                                     ; preds = %OP1392.PUSH1
  %908 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96), !noalias !1265
  %.not.i8122 = icmp eq i8 %908, 0
  br i1 %.not.i8122, label %resize.i8121.OP1415.MLOAD.contd_crit_edge, label %return, !prof !6

resize.i8121.OP1415.MLOAD.contd_crit_edge:        ; preds = %resize.i8121
  %swap.b4863.pre = load i256, ptr %sp4758, align 16
  %ecx.memory.i8125.pre = load ptr, ptr %ecx.memory.addr.i8108, align 8, !alias.scope !1266
  br label %OP1415.MLOAD.contd

OP1415.MLOAD.contd:                               ; preds = %resize.i8121.OP1415.MLOAD.contd_crit_edge, %OP1392.PUSH1
  %ecx.memory.i8125 = phi ptr [ %ecx.memory.i8125.pre, %resize.i8121.OP1415.MLOAD.contd_crit_edge ], [ %ecx.memory.i8109, %OP1392.PUSH1 ]
  %swap.b4863 = phi i256 [ %swap.b4863.pre, %resize.i8121.OP1415.MLOAD.contd_crit_edge ], [ %905, %OP1392.PUSH1 ]
  %ecx.memory.buffer.ptr.shared.addr.i8115 = getelementptr inbounds i8, ptr %ecx.memory.i8109, i64 8
  %ecx.memory.buffer.ptr.shared.i8116 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8115, align 8, !noalias !1261
  %ecx.memory.buffer.ptr.i8117 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8116, i64 %ecx.memory.last_checkpoint.i8113
  %slot.i8118 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8117, i64 64
  %slot.value.i8119 = load i256, ptr %slot.i8118, align 1, !noalias !1261
  %909 = tail call i256 @llvm.bswap.i256(i256 %slot.value.i8119)
  store i256 %909, ptr %sp4758, align 16
  %910 = add i256 %swap.b4863, %909
  store i256 %910, ptr %sp4762, align 16
  store i256 64, ptr %sp4764, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1266)
  %ecx.memory.len.addr.i8126 = getelementptr inbounds i8, ptr %ecx.memory.i8125, i64 16
  %ecx.memory.len.i8127 = load i64, ptr %ecx.memory.len.addr.i8126, align 8, !noalias !1266
  %ecx.memory.last_checkpoint.addr.i8128 = getelementptr inbounds i8, ptr %ecx.memory.i8125, i64 48
  %ecx.memory.last_checkpoint.i8129 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8128, align 8, !noalias !1266
  %911 = sub i64 %ecx.memory.len.i8127, %ecx.memory.last_checkpoint.i8129
  %912 = icmp ult i64 %911, 96
  br i1 %912, label %resize.i8136, label %OP1421.DUP1, !prof !5

resize.i8136:                                     ; preds = %OP1415.MLOAD.contd
  %913 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 96)
  %.not.i8137 = icmp eq i8 %913, 0
  br i1 %.not.i8137, label %OP1421.DUP1, label %return, !prof !6

OP1421.DUP1:                                      ; preds = %OP1415.MLOAD.contd, %resize.i8136
  %ecx.memory.buffer.ptr.shared.addr.i8131 = getelementptr inbounds i8, ptr %ecx.memory.i8125, i64 8
  %ecx.memory.buffer.ptr.shared.i8132 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8131, align 8, !noalias !1266
  %ecx.memory.buffer.ptr.i8133 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8132, i64 %ecx.memory.last_checkpoint.i8129
  %slot.i8134 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8133, i64 64
  %914 = tail call i256 @llvm.bswap.i256(i256 %910)
  store i256 %914, ptr %slot.i8134, align 1, !noalias !1266
  %dup14883 = load i256, ptr %sp4758, align 16
  %swap.b4889 = load i256, ptr %sp4750, align 16
  store i256 %dup14883, ptr %sp4750, align 16
  %swap.b4894 = load i256, ptr %sp4754, align 16
  store i256 %swap.b4889, ptr %sp4754, align 16
  store i256 %swap.b4894, ptr %sp4758, align 16
  store i256 %dup14883, ptr %sp4762, align 16
  store i256 %swap.b4894, ptr %sp4764, align 16
  %915 = add i64 %len.addr.45, 6
  %sp4907 = getelementptr i256, ptr %sp4750, i64 5
  store i256 %dup14883, ptr %sp4907, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1269)
  %ecx.memory.i8140 = load ptr, ptr %ecx.memory.addr.i8108, align 8, !alias.scope !1269
  %ecx.memory.len.addr.i8141 = getelementptr inbounds i8, ptr %ecx.memory.i8140, i64 16
  %ecx.memory.len.i8142 = load i64, ptr %ecx.memory.len.addr.i8141, align 8, !noalias !1269
  %ecx.memory.last_checkpoint.addr.i8143 = getelementptr inbounds i8, ptr %ecx.memory.i8140, i64 48
  %ecx.memory.last_checkpoint.i8144 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8143, align 8, !noalias !1269
  %916 = sub i64 %ecx.memory.len.i8142, %ecx.memory.last_checkpoint.i8144
  %917 = icmp ugt i256 %dup14883, 18446744073709551615
  %918 = trunc i256 %dup14883 to i64
  %919 = add i64 %918, 32
  %920 = icmp ugt i64 %918, -33
  %921 = or i1 %917, %920
  %922 = select i1 %921, i64 -1, i64 %919
  %923 = icmp ugt i64 %922, %916
  br i1 %923, label %resize.i8151, label %OP1428.PUSH1, !prof !5

resize.i8151:                                     ; preds = %OP1421.DUP1
  %924 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %922)
  %.not.i8152 = icmp eq i8 %924, 0
  br i1 %.not.i8152, label %OP1428.PUSH1, label %return, !prof !6

OP1428.PUSH1:                                     ; preds = %OP1421.DUP1, %resize.i8151
  %ecx.memory.buffer.ptr.shared.addr.i8146 = getelementptr inbounds i8, ptr %ecx.memory.i8140, i64 8
  %ecx.memory.buffer.ptr.shared.i8147 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8146, align 8, !noalias !1269
  %ecx.memory.buffer.ptr.i8148 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8147, i64 %ecx.memory.last_checkpoint.i8144
  %slot.i8149 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8148, i64 %918
  %925 = tail call i256 @llvm.bswap.i256(i256 %swap.b4894)
  store i256 %925, ptr %slot.i8149, align 1, !noalias !1269
  %b4919 = load i256, ptr %sp4762, align 16
  %926 = add i256 %b4919, 32
  store i256 %926, ptr %sp4762, align 16
  %dup34923 = load i256, ptr %sp4754, align 16
  store i256 %dup34923, ptr %sp4764, align 16
  store i256 %dup34923, ptr %sp4907, align 16
  %927 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4907, i8 17)
  %.not7053 = icmp eq i8 %927, 0
  br i1 %.not7053, label %OP1433.PUSH1, label %return, !prof !6

OP1433.PUSH1:                                     ; preds = %OP1428.PUSH1
  %sp4932 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %915
  %dup24935 = load i256, ptr %sp4907, align 16
  %sp4936 = getelementptr i256, ptr %sp4750, i64 7
  %928 = add i64 %len.addr.45, 9
  %sp4938 = getelementptr i256, ptr %sp4750, i64 8
  store i256 256, ptr %sp4938, align 16
  %929 = shl i256 %dup24935, 8
  %930 = and i256 %929, 256
  %931 = xor i256 %930, 256
  store i256 %931, ptr %sp4936, align 16
  %932 = add nsw i256 %931, -1
  %933 = and i256 %932, %dup24935
  %934 = lshr i256 %933, 1
  store i256 %934, ptr %sp4907, align 16
  %935 = icmp ult i256 %933, 2
  %936 = zext i1 %935 to i256
  store i256 %936, ptr %sp4932, align 16
  br i1 %935, label %OP1503.JUMPDEST, label %OP1449.DUP1

OP1449.DUP1:                                      ; preds = %OP1433.PUSH1
  store i256 31, ptr %sp4936, align 16
  %937 = icmp ugt i256 %933, 63
  %938 = zext i1 %937 to i256
  store i256 %938, ptr %sp4932, align 16
  br i1 %937, label %OP1468.JUMPDEST, label %OP1454.PUSH2

OP1454.PUSH2:                                     ; preds = %OP1449.DUP1
  store i256 256, ptr %sp4932, align 16
  store i256 256, ptr %sp4936, align 16
  %sp5015 = getelementptr i256, ptr %sp4750, i64 4
  %dup45016 = load i256, ptr %sp5015, align 16
  store i256 %dup45016, ptr %sp4938, align 16
  %939 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp4938, i8 17)
  %.not7054 = icmp eq i8 %939, 0
  br i1 %.not7054, label %OP1458.DIV, label %return, !prof !6

OP1458.DIV:                                       ; preds = %OP1454.PUSH2
  %a5022 = load i256, ptr %sp4938, align 16
  %b5024 = load i256, ptr %sp4936, align 16
  %940 = udiv i256 %a5022, %b5024
  %b5030 = load i256, ptr %sp4932, align 16
  %941 = mul i256 %b5030, %940
  store i256 %941, ptr %sp4932, align 16
  %sp5033 = getelementptr i256, ptr %sp4750, i64 3
  %dup45034 = load i256, ptr %sp5033, align 16
  store i256 %dup45034, ptr %sp4936, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1272)
  %ecx.memory.i8155 = load ptr, ptr %ecx.memory.addr.i8108, align 8, !alias.scope !1272
  %ecx.memory.len.addr.i8156 = getelementptr inbounds i8, ptr %ecx.memory.i8155, i64 16
  %ecx.memory.len.i8157 = load i64, ptr %ecx.memory.len.addr.i8156, align 8, !noalias !1272
  %ecx.memory.last_checkpoint.addr.i8158 = getelementptr inbounds i8, ptr %ecx.memory.i8155, i64 48
  %ecx.memory.last_checkpoint.i8159 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8158, align 8, !noalias !1272
  %942 = sub i64 %ecx.memory.len.i8157, %ecx.memory.last_checkpoint.i8159
  %943 = icmp ugt i256 %dup45034, 18446744073709551615
  %944 = trunc i256 %dup45034 to i64
  %945 = add i64 %944, 32
  %946 = icmp ugt i64 %944, -33
  %947 = or i1 %943, %946
  %948 = select i1 %947, i64 -1, i64 %945
  %949 = icmp ugt i64 %948, %942
  br i1 %949, label %resize.i8166, label %OP1462.SWAP2, !prof !5

resize.i8166:                                     ; preds = %OP1458.DIV
  %950 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %948)
  %.not.i8167 = icmp eq i8 %950, 0
  br i1 %.not.i8167, label %OP1462.SWAP2, label %return, !prof !6

OP1462.SWAP2:                                     ; preds = %OP1458.DIV, %resize.i8166
  %ecx.memory.buffer.ptr.shared.addr.i8161 = getelementptr inbounds i8, ptr %ecx.memory.i8155, i64 8
  %ecx.memory.buffer.ptr.shared.i8162 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8161, align 8, !noalias !1272
  %ecx.memory.buffer.ptr.i8163 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8162, i64 %ecx.memory.last_checkpoint.i8159
  %slot.i8164 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8163, i64 %944
  %951 = tail call i256 @llvm.bswap.i256(i256 %941)
  store i256 %951, ptr %slot.i8164, align 1, !noalias !1272
  %swap.b5045 = load i256, ptr %sp4762, align 16
  store i256 32, ptr %sp4932, align 16
  %952 = add i256 %swap.b5045, 32
  store i256 %952, ptr %sp4762, align 16
  br label %OP1503.JUMPDEST

OP1468.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1449.DUP1
  %len.addr.46 = phi i64 [ %915, %OP1449.DUP1 ], [ %len.addr.51, %dynamic_jump_table ]
  %953 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.46
  %sp5062 = getelementptr i256, ptr %953, i64 -3
  %dup35063 = load i256, ptr %sp5062, align 16
  %954 = add i64 %len.addr.46, -1
  %sp5068 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %954
  %b5069 = load i256, ptr %sp5068, align 16
  %955 = add i256 %b5069, %dup35063
  %sp5072 = getelementptr i256, ptr %953, i64 -1
  store i256 %955, ptr %sp5062, align 16
  %sp5079 = getelementptr i256, ptr %953, i64 -2
  %swap.b5080 = load i256, ptr %sp5079, align 16
  store i256 %dup35063, ptr %sp5079, align 16
  store i256 %swap.b5080, ptr %sp5072, align 16
  store i256 0, ptr %953, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1275)
  %ecx.memory.addr.i8169 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i8170 = load ptr, ptr %ecx.memory.addr.i8169, align 8, !alias.scope !1275
  %ecx.memory.len.addr.i8171 = getelementptr inbounds i8, ptr %ecx.memory.i8170, i64 16
  %ecx.memory.len.i8172 = load i64, ptr %ecx.memory.len.addr.i8171, align 8, !noalias !1275
  %ecx.memory.last_checkpoint.addr.i8173 = getelementptr inbounds i8, ptr %ecx.memory.i8170, i64 48
  %ecx.memory.last_checkpoint.i8174 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8173, align 8, !noalias !1275
  %956 = sub i64 %ecx.memory.len.i8172, %ecx.memory.last_checkpoint.i8174
  %957 = icmp ult i64 %956, 32
  br i1 %957, label %resize.i8180, label %OP1475.PUSH1, !prof !5

resize.i8180:                                     ; preds = %OP1468.JUMPDEST
  %958 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i8181 = icmp eq i8 %958, 0
  br i1 %.not.i8181, label %OP1475.PUSH1, label %return, !prof !6

OP1475.PUSH1:                                     ; preds = %OP1468.JUMPDEST, %resize.i8180
  %ecx.memory.buffer.ptr.shared.addr.i8176 = getelementptr inbounds i8, ptr %ecx.memory.i8170, i64 8
  %ecx.memory.buffer.ptr.shared.i8177 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8176, align 8, !noalias !1275
  %ecx.memory.buffer.ptr.i8178 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8177, i64 %ecx.memory.last_checkpoint.i8174
  %959 = tail call i256 @llvm.bswap.i256(i256 %swap.b5080)
  store i256 %959, ptr %ecx.memory.buffer.ptr.i8178, align 1, !noalias !1275
  store i256 32, ptr %sp5068, align 16
  store i256 0, ptr %953, align 16
  %960 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5072)
  %.not7057 = icmp eq i8 %960, 0
  br i1 %.not7057, label %OP1478.SWAP1, label %return, !prof !6

OP1478.SWAP1:                                     ; preds = %OP1475.PUSH1
  %swap.a5096 = load i256, ptr %sp5072, align 16
  %swap.b5098 = load i256, ptr %sp5079, align 16
  store i256 %swap.a5096, ptr %sp5079, align 16
  store i256 %swap.b5098, ptr %sp5072, align 16
  br label %OP1479.JUMPDEST.preheader, !annotation !7

OP1479.JUMPDEST.preheader.loopexit:               ; preds = %dynamic_jump_table
  %.phi.trans.insert = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.51
  %sp5101.phi.trans.insert = getelementptr i256, ptr %.phi.trans.insert, i64 -2
  %dup25102.pre.pre = load i256, ptr %sp5101.phi.trans.insert, align 16
  br label %OP1479.JUMPDEST.preheader

OP1479.JUMPDEST.preheader:                        ; preds = %OP1479.JUMPDEST.preheader.loopexit, %OP1478.SWAP1
  %dup25102.pre = phi i256 [ %swap.a5096, %OP1478.SWAP1 ], [ %dup25102.pre.pre, %OP1479.JUMPDEST.preheader.loopexit ]
  %len.addr.47.ph = phi i64 [ %len.addr.46, %OP1478.SWAP1 ], [ %len.addr.51, %OP1479.JUMPDEST.preheader.loopexit ]
  %961 = add i64 %len.addr.47.ph, 1
  %962 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.47.ph
  %sp5101 = getelementptr i256, ptr %962, i64 -2
  %sp5107 = getelementptr i256, ptr %962, i64 -1
  %sp5109 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %961
  %ecx.memory.addr.i8183 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %sp5146 = getelementptr i256, ptr %962, i64 -3
  br label %OP1479.JUMPDEST

OP1479.JUMPDEST:                                  ; preds = %OP1479.JUMPDEST.preheader, %OP1484.SWAP1
  %dup25102 = phi i256 [ %dup25102.pre, %OP1479.JUMPDEST.preheader ], [ %974, %OP1484.SWAP1 ]
  store i256 %dup25102, ptr %962, align 16
  %963 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %962, i8 17)
  %.not7058 = icmp eq i8 %963, 0
  br i1 %.not7058, label %OP1482.DUP2, label %return, !prof !6

OP1482.DUP2:                                      ; preds = %OP1479.JUMPDEST
  %dup25108 = load i256, ptr %sp5107, align 16
  store i256 %dup25108, ptr %sp5109, align 16
  %b5114 = load i256, ptr %962, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1278)
  %ecx.memory.i8184 = load ptr, ptr %ecx.memory.addr.i8183, align 8, !alias.scope !1278
  %ecx.memory.len.addr.i8185 = getelementptr inbounds i8, ptr %ecx.memory.i8184, i64 16
  %ecx.memory.len.i8186 = load i64, ptr %ecx.memory.len.addr.i8185, align 8, !noalias !1278
  %ecx.memory.last_checkpoint.addr.i8187 = getelementptr inbounds i8, ptr %ecx.memory.i8184, i64 48
  %ecx.memory.last_checkpoint.i8188 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8187, align 8, !noalias !1278
  %964 = sub i64 %ecx.memory.len.i8186, %ecx.memory.last_checkpoint.i8188
  %965 = icmp ugt i256 %dup25108, 18446744073709551615
  %966 = trunc i256 %dup25108 to i64
  %967 = add i64 %966, 32
  %968 = icmp ugt i64 %966, -33
  %969 = or i1 %965, %968
  %970 = select i1 %969, i64 -1, i64 %967
  %971 = icmp ugt i64 %970, %964
  br i1 %971, label %resize.i8195, label %OP1484.SWAP1, !prof !5

resize.i8195:                                     ; preds = %OP1482.DUP2
  %972 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 %970)
  %.not.i8196 = icmp eq i8 %972, 0
  br i1 %.not.i8196, label %OP1484.SWAP1, label %return, !prof !6

OP1484.SWAP1:                                     ; preds = %OP1482.DUP2, %resize.i8195
  %ecx.memory.buffer.ptr.shared.addr.i8190 = getelementptr inbounds i8, ptr %ecx.memory.i8184, i64 8
  %ecx.memory.buffer.ptr.shared.i8191 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8190, align 8, !noalias !1278
  %ecx.memory.buffer.ptr.i8192 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8191, i64 %ecx.memory.last_checkpoint.i8188
  %slot.i8193 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8192, i64 %966
  %973 = tail call i256 @llvm.bswap.i256(i256 %b5114)
  store i256 %973, ptr %slot.i8193, align 1, !noalias !1278
  %swap.a5117 = load i256, ptr %sp5107, align 16
  %swap.b5119 = load i256, ptr %sp5101, align 16
  %974 = add i256 %swap.b5119, 1
  store i256 %974, ptr %sp5101, align 16
  %975 = add i256 %swap.a5117, 32
  store i256 %975, ptr %sp5107, align 16
  %dup45147 = load i256, ptr %sp5146, align 16
  store i256 %dup45147, ptr %sp5109, align 16
  %976 = icmp ugt i256 %dup45147, %975
  %977 = zext i1 %976 to i256
  store i256 %977, ptr %962, align 16
  br i1 %976, label %OP1479.JUMPDEST, label %OP1495.DUP3

OP1495.DUP3:                                      ; preds = %OP1484.SWAP1
  %978 = sub i256 %swap.a5117, %dup45147
  %979 = and i256 %978, 31
  store i256 %dup45147, ptr %962, align 16
  %980 = add i256 %979, %dup45147
  store i256 %980, ptr %sp5146, align 16
  store i256 %dup45147, ptr %sp5107, align 16
  br label %OP1503.JUMPDEST, !annotation !7

OP1503.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP1495.DUP3, %OP1462.SWAP2, %OP1433.PUSH1
  %len.addr.48 = phi i64 [ %len.addr.47.ph, %OP1495.DUP3 ], [ %915, %OP1433.PUSH1 ], [ %915, %OP1462.SWAP2 ], [ %len.addr.51, %dynamic_jump_table ]
  %981 = add i64 %len.addr.48, -5
  %982 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.48
  %sp5203 = getelementptr i256, ptr %982, i64 -7
  %dup25204 = load i256, ptr %sp5203, align 16
  %sp5205 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %981
  store i256 %dup25204, ptr %sp5205, align 16
  br label %dynamic_jump_table.preheader

OP1511.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP577.JUMPDEST
  %len.addr.49 = phi i64 [ %306, %OP577.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %sp5211 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.49
  store i256 0, ptr %sp5211, align 16
  %sp5213 = getelementptr i256, ptr %sp5211, i64 1
  store i256 3035, ptr %sp5213, align 16
  %contract.caller.addr5215 = getelementptr inbounds i8, ptr %arg.contract.addr, i64 148
  %contract.caller5216 = load i160, ptr %contract.caller.addr5215, align 16
  %983 = tail call i160 @llvm.bswap.i160(i160 %contract.caller5216)
  %984 = zext i160 %983 to i256
  %sp5217 = getelementptr i256, ptr %sp5211, i64 2
  store i256 %984, ptr %sp5217, align 16
  %sp5219 = getelementptr i256, ptr %sp5211, i64 -2
  %dup55220 = load i256, ptr %sp5219, align 16
  %sp5221 = getelementptr i256, ptr %sp5211, i64 3
  store i256 %dup55220, ptr %sp5221, align 16
  %985 = add i64 %len.addr.49, 5
  %sp5223 = getelementptr i256, ptr %sp5211, i64 -1
  %dup55224 = load i256, ptr %sp5223, align 16
  %sp5225 = getelementptr i256, ptr %sp5211, i64 4
  store i256 %dup55224, ptr %sp5225, align 16
  br label %OP952.JUMPDEST

OP1519.JUMPDEST:                                  ; preds = %dynamic_jump_table
  %986 = getelementptr i256, ptr %arg.stack.addr, i64 %len.addr.51
  %sp5229 = getelementptr i256, ptr %986, i64 -1
  %swap.a5230 = load i256, ptr %sp5229, align 16
  %sp5231 = getelementptr i256, ptr %986, i64 -2
  %swap.b5232 = load i256, ptr %sp5231, align 16
  store i256 %swap.b5232, ptr %sp5229, align 16
  %sp5237 = getelementptr i256, ptr %986, i64 -5
  %swap.b5238 = load i256, ptr %sp5237, align 16
  store i256 %swap.a5230, ptr %sp5237, align 16
  %sp5242 = getelementptr i256, ptr %986, i64 -4
  %swap.b5243 = load i256, ptr %sp5242, align 16
  store i256 %swap.b5238, ptr %sp5242, align 16
  store i256 %swap.b5243, ptr %sp5231, align 16
  %987 = add i64 %len.addr.51, -4
  br label %dynamic_jump_table

OP1527.JUMPDEST:                                  ; preds = %dynamic_jump_table, %OP640.JUMPDEST
  %len.addr.50 = phi i64 [ %325, %OP640.JUMPDEST ], [ %len.addr.51, %dynamic_jump_table ]
  %988 = add i64 %len.addr.50, 1
  %sp5251 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %len.addr.50
  store i256 4, ptr %sp5251, align 16
  %sp5253 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %988
  store i256 32, ptr %sp5253, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1281)
  %ecx.memory.addr.i8198 = getelementptr inbounds i8, ptr %arg.ecx.addr, i64 40
  %ecx.memory.i8199 = load ptr, ptr %ecx.memory.addr.i8198, align 8, !alias.scope !1281
  %ecx.memory.len.addr.i8200 = getelementptr inbounds i8, ptr %ecx.memory.i8199, i64 16
  %ecx.memory.len.i8201 = load i64, ptr %ecx.memory.len.addr.i8200, align 8, !noalias !1281
  %ecx.memory.last_checkpoint.addr.i8202 = getelementptr inbounds i8, ptr %ecx.memory.i8199, i64 48
  %ecx.memory.last_checkpoint.i8203 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8202, align 8, !noalias !1281
  %989 = sub i64 %ecx.memory.len.i8201, %ecx.memory.last_checkpoint.i8203
  %990 = icmp ult i64 %989, 64
  br i1 %990, label %resize.i8210, label %OP1531.DUP2, !prof !5

resize.i8210:                                     ; preds = %OP1527.JUMPDEST
  %991 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i8211 = icmp eq i8 %991, 0
  br i1 %.not.i8211, label %OP1531.DUP2, label %return, !prof !6

OP1531.DUP2:                                      ; preds = %OP1527.JUMPDEST, %resize.i8210
  %ecx.memory.buffer.ptr.shared.addr.i8205 = getelementptr inbounds i8, ptr %ecx.memory.i8199, i64 8
  %ecx.memory.buffer.ptr.shared.i8206 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8205, align 8, !noalias !1281
  %ecx.memory.buffer.ptr.i8207 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8206, i64 %ecx.memory.last_checkpoint.i8203
  %slot.i8208 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8207, i64 32
  store i256 1809251394333065553493296640760748560207343510400633813116524750123642650624, ptr %slot.i8208, align 1, !noalias !1281
  %sp5260 = getelementptr i256, ptr %sp5251, i64 -2
  %dup25261 = load i256, ptr %sp5260, align 16
  store i256 %dup25261, ptr %sp5251, align 16
  store i256 0, ptr %sp5253, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1284)
  %ecx.memory.i8214 = load ptr, ptr %ecx.memory.addr.i8198, align 8, !alias.scope !1284
  %ecx.memory.len.addr.i8215 = getelementptr inbounds i8, ptr %ecx.memory.i8214, i64 16
  %ecx.memory.len.i8216 = load i64, ptr %ecx.memory.len.addr.i8215, align 8, !noalias !1284
  %ecx.memory.last_checkpoint.addr.i8217 = getelementptr inbounds i8, ptr %ecx.memory.i8214, i64 48
  %ecx.memory.last_checkpoint.i8218 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8217, align 8, !noalias !1284
  %992 = sub i64 %ecx.memory.len.i8216, %ecx.memory.last_checkpoint.i8218
  %993 = icmp ult i64 %992, 32
  br i1 %993, label %resize.i8224, label %OP1534.PUSH1, !prof !5

resize.i8224:                                     ; preds = %OP1531.DUP2
  %994 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i8225 = icmp eq i8 %994, 0
  br i1 %.not.i8225, label %OP1534.PUSH1, label %return, !prof !6

OP1534.PUSH1:                                     ; preds = %OP1531.DUP2, %resize.i8224
  %ecx.memory.buffer.ptr.shared.addr.i8220 = getelementptr inbounds i8, ptr %ecx.memory.i8214, i64 8
  %ecx.memory.buffer.ptr.shared.i8221 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8220, align 8, !noalias !1284
  %ecx.memory.buffer.ptr.i8222 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8221, i64 %ecx.memory.last_checkpoint.i8218
  %995 = tail call i256 @llvm.bswap.i256(i256 %dup25261)
  store i256 %995, ptr %ecx.memory.buffer.ptr.i8222, align 1, !noalias !1284
  store i256 64, ptr %sp5251, align 16
  store i256 0, ptr %sp5253, align 16
  %996 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5251)
  %.not7025 = icmp eq i8 %996, 0
  br i1 %.not7025, label %OP1537.PUSH1, label %return, !prof !6

OP1537.PUSH1:                                     ; preds = %OP1534.PUSH1
  store i256 32, ptr %sp5253, align 16
  %b5282 = load i256, ptr %sp5251, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1287)
  %ecx.memory.i8228 = load ptr, ptr %ecx.memory.addr.i8198, align 8, !alias.scope !1287
  %ecx.memory.len.addr.i8229 = getelementptr inbounds i8, ptr %ecx.memory.i8228, i64 16
  %ecx.memory.len.i8230 = load i64, ptr %ecx.memory.len.addr.i8229, align 8, !noalias !1287
  %ecx.memory.last_checkpoint.addr.i8231 = getelementptr inbounds i8, ptr %ecx.memory.i8228, i64 48
  %ecx.memory.last_checkpoint.i8232 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8231, align 8, !noalias !1287
  %997 = sub i64 %ecx.memory.len.i8230, %ecx.memory.last_checkpoint.i8232
  %998 = icmp ult i64 %997, 64
  br i1 %998, label %resize.i8239, label %OP1539.DUP1, !prof !5

resize.i8239:                                     ; preds = %OP1537.PUSH1
  %999 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 64)
  %.not.i8240 = icmp eq i8 %999, 0
  br i1 %.not.i8240, label %OP1539.DUP1, label %return, !prof !6

OP1539.DUP1:                                      ; preds = %OP1537.PUSH1, %resize.i8239
  %ecx.memory.buffer.ptr.shared.addr.i8234 = getelementptr inbounds i8, ptr %ecx.memory.i8228, i64 8
  %ecx.memory.buffer.ptr.shared.i8235 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8234, align 8, !noalias !1287
  %ecx.memory.buffer.ptr.i8236 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8235, i64 %ecx.memory.last_checkpoint.i8232
  %slot.i8237 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.i8236, i64 32
  %1000 = tail call i256 @llvm.bswap.i256(i256 %b5282)
  store i256 %1000, ptr %slot.i8237, align 1, !noalias !1287
  %sp5284 = getelementptr i256, ptr %sp5251, i64 -1
  %dup15285 = load i256, ptr %sp5284, align 16
  store i256 %dup15285, ptr %sp5251, align 16
  store i256 0, ptr %sp5253, align 16
  tail call void @llvm.experimental.noalias.scope.decl(metadata !1290)
  %ecx.memory.i8243 = load ptr, ptr %ecx.memory.addr.i8198, align 8, !alias.scope !1290
  %ecx.memory.len.addr.i8244 = getelementptr inbounds i8, ptr %ecx.memory.i8243, i64 16
  %ecx.memory.len.i8245 = load i64, ptr %ecx.memory.len.addr.i8244, align 8, !noalias !1290
  %ecx.memory.last_checkpoint.addr.i8246 = getelementptr inbounds i8, ptr %ecx.memory.i8243, i64 48
  %ecx.memory.last_checkpoint.i8247 = load i64, ptr %ecx.memory.last_checkpoint.addr.i8246, align 8, !noalias !1290
  %1001 = sub i64 %ecx.memory.len.i8245, %ecx.memory.last_checkpoint.i8247
  %1002 = icmp ult i64 %1001, 32
  br i1 %1002, label %resize.i8253, label %OP1542.PUSH1, !prof !5

resize.i8253:                                     ; preds = %OP1539.DUP1
  %1003 = tail call i8 @__revmc_builtin_resize_memory(ptr nonnull %arg.ecx.addr, i64 32)
  %.not.i8254 = icmp eq i8 %1003, 0
  br i1 %.not.i8254, label %OP1542.PUSH1, label %return, !prof !6

OP1542.PUSH1:                                     ; preds = %OP1539.DUP1, %resize.i8253
  %ecx.memory.buffer.ptr.shared.addr.i8249 = getelementptr inbounds i8, ptr %ecx.memory.i8243, i64 8
  %ecx.memory.buffer.ptr.shared.i8250 = load ptr, ptr %ecx.memory.buffer.ptr.shared.addr.i8249, align 8, !noalias !1290
  %ecx.memory.buffer.ptr.i8251 = getelementptr inbounds i8, ptr %ecx.memory.buffer.ptr.shared.i8250, i64 %ecx.memory.last_checkpoint.i8247
  %1004 = tail call i256 @llvm.bswap.i256(i256 %dup15285)
  store i256 %1004, ptr %ecx.memory.buffer.ptr.i8251, align 1, !noalias !1290
  store i256 64, ptr %sp5251, align 16
  store i256 0, ptr %sp5253, align 16
  %1005 = tail call i8 @__revmc_builtin_keccak256(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5251)
  %.not7028 = icmp eq i8 %1005, 0
  br i1 %.not7028, label %OP1545.PUSH1, label %return, !prof !6

OP1545.PUSH1:                                     ; preds = %OP1542.PUSH1
  %swap.b5306 = load i256, ptr %sp5284, align 16
  store i256 0, ptr %sp5284, align 16
  store i256 %swap.b5306, ptr %sp5253, align 16
  %swap.a5310 = load i256, ptr %sp5251, align 16
  %swap.b5312 = load i256, ptr %sp5260, align 16
  store i256 %swap.a5310, ptr %sp5260, align 16
  store i256 %swap.b5312, ptr %sp5251, align 16
  %1006 = add i64 %len.addr.50, -1
  %1007 = tail call i8 @__revmc_builtin_sload(ptr nonnull %arg.ecx.addr, ptr nonnull %sp5260, i8 17)
  %.not7029 = icmp eq i8 %1007, 0
  br i1 %.not7029, label %OP1552.DUP2, label %return, !prof !6

OP1552.DUP2:                                      ; preds = %OP1545.PUSH1
  %sp5318 = getelementptr i256, ptr %sp5251, i64 -3
  %dup25319 = load i256, ptr %sp5318, align 16
  %sp5320 = getelementptr inbounds i256, ptr %arg.stack.addr, i64 %1006
  store i256 %dup25319, ptr %sp5320, align 16
  br label %dynamic_jump_table.preheader

dynamic_jump_table.preheader:                     ; preds = %OP742.JUMP, %OP858.JUMPDEST, %OP934.PUSH1, %OP948.SWAP1, %OP1224.PUSH1, %OP1354.POP, %OP1364.SWAP1, %OP1386.DUP2, %OP1503.JUMPDEST, %OP1552.DUP2
  %len.addr.51.ph = phi i64 [ %390, %OP742.JUMP ], [ %1006, %OP1552.DUP2 ], [ %786, %OP1224.PUSH1 ], [ %981, %OP1503.JUMPDEST ], [ %len.addr.44, %OP1386.DUP2 ], [ %877, %OP1364.SWAP1 ], [ %876, %OP1354.POP ], [ %len.addr.34, %OP948.SWAP1 ], [ %547, %OP934.PUSH1 ], [ %479, %OP858.JUMPDEST ]
  %.ph8749 = phi i256 [ %a2476, %OP742.JUMP ], [ %dup25319, %OP1552.DUP2 ], [ %swap.b4215, %OP1224.PUSH1 ], [ %dup25204, %OP1503.JUMPDEST ], [ %dup24743, %OP1386.DUP2 ], [ %dup24693, %OP1364.SWAP1 ], [ %a4650, %OP1354.POP ], [ %swap.b3236, %OP948.SWAP1 ], [ %swap.b3200, %OP934.PUSH1 ], [ %dup22933, %OP858.JUMPDEST ]
  br label %dynamic_jump_table

dynamic_jump_table:                               ; preds = %dynamic_jump_table.preheader, %OP1519.JUMPDEST
  %len.addr.51 = phi i64 [ %987, %OP1519.JUMPDEST ], [ %len.addr.51.ph, %dynamic_jump_table.preheader ]
  %1008 = phi i256 [ %swap.b5238, %OP1519.JUMPDEST ], [ %.ph8749, %dynamic_jump_table.preheader ]
  switch i256 %1008, label %return.loopexit8750 [
    i256 175, label %OP687.JUMPDEST.sink.split.loopexit8751
    i256 183, label %return
    i256 185, label %OP76.JUMPDEST
    i256 196, label %OP84.JUMPDEST
    i256 204, label %OP88.JUMPDEST
    i256 241, label %OP120.JUMPDEST.preheader
    i256 268, label %OP142.JUMPDEST
    i256 313, label %OP179.JUMPDEST
    i256 327, label %OP192.JUMPDEST
    i256 338, label %OP200.JUMPDEST
    i256 391, label %OP226.JUMPDEST
    i256 417, label %OP249.JUMPDEST
    i256 428, label %OP257.JUMPDEST
    i256 436, label %OP261.JUMPDEST
    i256 458, label %OP280.JUMPDEST
    i256 469, label %OP288.JUMPDEST
    i256 553, label %OP324.JUMPDEST
    i256 579, label %OP347.JUMPDEST
    i256 590, label %OP355.JUMPDEST
    i256 612, label %return
    i256 614, label %OP373.JUMPDEST
    i256 625, label %OP381.JUMPDEST
    i256 633, label %OP385.JUMPDEST
    i256 661, label %OP408.JUMPDEST
    i256 672, label %OP416.JUMPDEST
    i256 716, label %OP434.JUMPDEST
    i256 738, label %OP453.JUMPDEST
    i256 749, label %OP461.JUMPDEST
    i256 757, label %OP465.JUMPDEST
    i256 794, label %OP497.JUMPDEST.preheader
    i256 821, label %OP519.JUMPDEST
    i256 866, label %OP556.JUMPDEST
    i256 880, label %OP569.JUMPDEST
    i256 891, label %OP577.JUMPDEST
    i256 944, label %OP603.JUMPDEST
    i256 970, label %OP687.JUMPDEST.sink.split
    i256 978, label %return
    i256 980, label %OP632.JUMPDEST
    i256 991, label %OP640.JUMPDEST
    i256 1066, label %OP668.JUMPDEST
    i256 1088, label %OP687.JUMPDEST
    i256 1245, label %OP743.JUMPDEST
    i256 1352, label %OP823.JUMPDEST
    i256 1366, label %OP834.JUMPDEST.preheader.loopexit
    i256 1395, label %OP858.JUMPDEST
    i256 1403, label %OP866.JUMPDEST
    i256 1645, label %OP942.JUMPDEST
    i256 1676, label %OP952.JUMPDEST
    i256 1756, label %OP983.JUMPDEST
    i256 1972, label %OP1036.JUMPDEST
    i256 2116, label %OP1086.JUMPDEST
    i256 2255, label %OP1135.JUMPDEST
    i256 2521, label %OP1233.JUMPDEST
    i256 2599, label %OP1263.JUMPDEST.loopexit
    i256 2740, label %OP1330.JUMPDEST
    i256 2821, label %OP1356.JUMPDEST
    i256 2840, label %OP1370.JUMPDEST
    i256 2864, label %OP1388.JUMPDEST
    i256 2971, label %OP1468.JUMPDEST
    i256 2985, label %OP1479.JUMPDEST.preheader.loopexit
    i256 3014, label %OP1503.JUMPDEST
    i256 3022, label %OP1511.JUMPDEST
    i256 3035, label %OP1519.JUMPDEST
    i256 3043, label %OP1527.JUMPDEST
  ], !prof !1293

suspend:                                          ; preds = %OP1309.MLOAD.contd
  store ptr blockaddress(@other, %OP1318.SWAP4), ptr %ecx.resume_at.addr, align 8
  br label %return, !annotation !241

return.loopexit8750:                              ; preds = %dynamic_jump_table
  br label %return

return:                                           ; preds = %resize.i7315, %resize.i7300, %resize.i8195, %OP1479.JUMPDEST, %resize.i7237, %resize.i7223, %resize.i7529, %OP834.JUMPDEST, %dynamic_jump_table, %dynamic_jump_table, %dynamic_jump_table, %return.loopexit8750, %resize.i8253, %resize.i8239, %resize.i8224, %resize.i8210, %resize.i8180, %resize.i8166, %resize.i8151, %resize.i8136, %resize.i8121, %resize.i8105, %resize.i8091, %resize.i8076, %resize.i8060, %resize.i8045, %resize.i8029, %resize.i8013, %resize.i7998, %resize.i7983, %resize.i7968, %resize.i7953, %resize.i7937, %resize.i7922, %resize.i7906, %resize.i7891, %resize.i7876, %resize.i7861, %resize.i7846, %resize.i7831, %resize.i7816, %resize.i7801, %resize.i7786, %resize.i7771, %resize.i7756, %resize.i7741, %resize.i7726, %resize.i7711, %resize.i7696, %resize.i7681, %resize.i7666, %resize.i7651, %resize.i7636, %resize.i7620, %resize.i7605, %resize.i7589, %resize.i7574, %resize.i7559, %resize.i7544, %resize.i7514, %resize.i7500, %resize.i7485, %resize.i7470, %resize.i7455, %resize.i7439, %resize.i7423, %resize.i7408, %resize.i7392, %resize.i7377, %resize.i7362, %resize.i7346, %resize.i7331, %resize.i7284, %resize.i7268, %resize.i7253, %resize.i, %OP1327.PUSH1, %OP1260.PUSH1, %OP1083.PUSH1, %OP980.PUSH1, %OP681.MLOAD.contd, %OP637.PUSH1, %OP620.MLOAD.contd, %OP574.PUSH1, %OP563.MLOAD.contd, %OP458.PUSH1, %OP447.MLOAD.contd, %OP413.PUSH1, %OP402.MLOAD.contd, %OP378.PUSH1, %OP352.PUSH1, %OP341.MLOAD.contd, %OP285.PUSH1, %OP274.MLOAD.contd, %OP254.PUSH1, %OP243.MLOAD.contd, %OP197.PUSH1, %OP186.MLOAD.contd, %OP81.PUSH1, %suspend, %OP1545.PUSH1, %OP1542.PUSH1, %OP1534.PUSH1, %OP1475.PUSH1, %OP1454.PUSH2, %OP1428.PUSH1, %OP1388.JUMPDEST, %OP1380.PUSH1, %OP1377.PUSH1, %OP1361.SWAP1, %OP1356.JUMPDEST, %OP1348.MLOAD.contd, %OP1330.JUMPDEST, %OP1309.MLOAD.contd, %OP1287.SUB, %OP1283.PUSH1, %OP1279.PUSH1, %OP1253.SLOAD, %OP1249.PUSH1, %OP1218.MLOAD.contd, %OP1190.ADD, %OP1186.PUSH1, %OP1182.PUSH1, %OP1159.SUB, %OP1155.PUSH1, %OP1151.PUSH1, %OP1127.SUB, %OP1123.PUSH1, %OP1119.PUSH1, %OP1102.PUSH1, %OP1076.SLOAD, %OP1072.PUSH1, %OP1055.PUSH1, %OP1033.SLOAD, %OP1029.PUSH1, %OP1012.PUSH1, %OP973.SLOAD, %OP969.PUSH1, %OP942.JUMPDEST, %OP928.MLOAD.contd, %OP904.DUP2, %OP900.PUSH1, %OP883.PUSH1, %OP830.PUSH1, %OP809.PUSH2, %OP783.PUSH1, %OP743.JUMPDEST, %OP736.MLOAD.contd, %OP711.ADD, %OP707.PUSH1, %OP703.PUSH1, %OP675.PUSH1, %OP670.MLOAD.contd, %OP668.JUMPDEST, %OP614.PUSH1, %OP605.MLOAD.contd, %OP603.JUMPDEST, %OP540.MLOAD.contd, %OP483.PUSH1, %OP480.MLOAD.contd, %OP477.DUP4, %OP467.MLOAD.contd, %OP465.JUMPDEST, %OP441.PUSH1, %OP436.MLOAD.contd, %OP434.JUMPDEST, %OP396.PUSH1, %OP387.MLOAD.contd, %OP385.JUMPDEST, %OP335.PUSH1, %OP326.MLOAD.contd, %OP324.JUMPDEST, %OP268.PUSH1, %OP263.MLOAD.contd, %OP261.JUMPDEST, %OP237.PUSH1, %OP228.MLOAD.contd, %OP226.JUMPDEST, %OP163.MLOAD.contd, %OP106.PUSH1, %OP103.MLOAD.contd, %OP100.DUP4, %OP90.MLOAD.contd, %OP88.JUMPDEST
  %len.addr.52 = phi i64 [ %343, %OP703.PUSH1 ], [ %348, %OP707.PUSH1 ], [ %342, %OP711.ADD ], [ %len.addr.28, %OP736.MLOAD.contd ], [ %988, %OP1534.PUSH1 ], [ %988, %OP1542.PUSH1 ], [ %1006, %OP1545.PUSH1 ], [ %553, %OP969.PUSH1 ], [ %553, %OP973.SLOAD ], [ %717, %OP1151.PUSH1 ], [ %719, %OP1155.PUSH1 ], [ %715, %OP1159.SUB ], [ %717, %OP1182.PUSH1 ], [ %719, %OP1186.PUSH1 ], [ %715, %OP1190.ADD ], [ %len.addr.39, %OP1218.MLOAD.contd ], [ %627, %OP1055.PUSH1 ], [ %627, %OP1072.PUSH1 ], [ %627, %OP1076.SLOAD ], [ %672, %OP1102.PUSH1 ], [ %672, %OP1119.PUSH1 ], [ %674, %OP1123.PUSH1 ], [ %670, %OP1127.SUB ], [ %623, %OP1083.PUSH1 ], [ %579, %OP1012.PUSH1 ], [ %579, %OP1029.PUSH1 ], [ %579, %OP1033.SLOAD ], [ %552, %OP980.PUSH1 ], [ %len.addr.46, %OP1475.PUSH1 ], [ %893, %OP1388.JUMPDEST ], [ %915, %OP1428.PUSH1 ], [ %928, %OP1454.PUSH2 ], [ %883, %OP1377.PUSH1 ], [ %len.addr.44, %OP1380.PUSH1 ], [ %878, %OP1356.JUMPDEST ], [ %878, %OP1361.SWAP1 ], [ %856, %OP1330.JUMPDEST ], [ %len.addr.42, %OP1348.MLOAD.contd ], [ %.pre-phi8587, %OP1279.PUSH1 ], [ %815, %OP1283.PUSH1 ], [ %812, %OP1287.SUB ], [ %814, %OP1309.MLOAD.contd ], [ %814, %suspend ], [ %788, %OP1249.PUSH1 ], [ %788, %OP1253.SLOAD ], [ %len.addr.40, %OP1260.PUSH1 ], [ %548, %OP942.JUMPDEST ], [ %482, %OP883.PUSH1 ], [ %482, %OP900.PUSH1 ], [ %481, %OP904.DUP2 ], [ %545, %OP928.MLOAD.contd ], [ %len.addr.30, %OP830.PUSH1 ], [ %391, %OP743.JUMPDEST ], [ %413, %OP783.PUSH1 ], [ %426, %OP809.PUSH2 ], [ %332, %OP668.JUMPDEST ], [ %334, %OP670.MLOAD.contd ], [ %332, %OP675.PUSH1 ], [ %339, %OP681.MLOAD.contd ], [ %len.addr.26, %OP637.PUSH1 ], [ %312, %OP603.JUMPDEST ], [ %314, %OP605.MLOAD.contd ], [ %312, %OP614.PUSH1 ], [ %320, %OP620.MLOAD.contd ], [ %len.addr.23, %OP574.PUSH1 ], [ %301, %OP563.MLOAD.contd ], [ %258, %OP540.MLOAD.contd ], [ %217, %OP465.JUMPDEST ], [ %219, %OP467.MLOAD.contd ], [ %223, %OP477.DUP4 ], [ %221, %OP480.MLOAD.contd ], [ %221, %OP483.PUSH1 ], [ %len.addr.18, %OP458.PUSH1 ], [ %204, %OP434.JUMPDEST ], [ %206, %OP436.MLOAD.contd ], [ %204, %OP441.PUSH1 ], [ %211, %OP447.MLOAD.contd ], [ %len.addr.16, %OP413.PUSH1 ], [ %186, %OP385.JUMPDEST ], [ %188, %OP387.MLOAD.contd ], [ %186, %OP396.PUSH1 ], [ %194, %OP402.MLOAD.contd ], [ %len.addr.14, %OP378.PUSH1 ], [ %len.addr.12, %OP352.PUSH1 ], [ %165, %OP324.JUMPDEST ], [ %167, %OP326.MLOAD.contd ], [ %165, %OP335.PUSH1 ], [ %173, %OP341.MLOAD.contd ], [ %len.addr.10, %OP285.PUSH1 ], [ %145, %OP261.JUMPDEST ], [ %147, %OP263.MLOAD.contd ], [ %145, %OP268.PUSH1 ], [ %152, %OP274.MLOAD.contd ], [ %len.addr.8, %OP254.PUSH1 ], [ %131, %OP226.JUMPDEST ], [ %133, %OP228.MLOAD.contd ], [ %131, %OP237.PUSH1 ], [ %139, %OP243.MLOAD.contd ], [ %len.addr.6, %OP197.PUSH1 ], [ %120, %OP186.MLOAD.contd ], [ %77, %OP163.MLOAD.contd ], [ %36, %OP88.JUMPDEST ], [ %38, %OP90.MLOAD.contd ], [ %42, %OP100.DUP4 ], [ %40, %OP103.MLOAD.contd ], [ %40, %OP106.PUSH1 ], [ %len.addr.1, %OP81.PUSH1 ], [ %850, %OP1327.PUSH1 ], [ 0, %resize.i ], [ %78, %resize.i7253 ], [ %100, %resize.i7268 ], [ %116, %resize.i7284 ], [ %259, %resize.i7331 ], [ %281, %resize.i7346 ], [ %297, %resize.i7362 ], [ %344, %resize.i7377 ], [ %343, %resize.i7392 ], [ %345, %resize.i7408 ], [ %348, %resize.i7423 ], [ %345, %resize.i7439 ], [ %394, %resize.i7455 ], [ %393, %resize.i7470 ], [ %394, %resize.i7485 ], [ %413, %resize.i7500 ], [ %452, %resize.i7514 ], [ %483, %resize.i7544 ], [ %482, %resize.i7559 ], [ %483, %resize.i7574 ], [ %482, %resize.i7589 ], [ %486, %resize.i7605 ], [ %528, %resize.i7620 ], [ %486, %resize.i7636 ], [ %554, %resize.i7651 ], [ %553, %resize.i7666 ], [ %580, %resize.i7681 ], [ %579, %resize.i7696 ], [ %580, %resize.i7711 ], [ %579, %resize.i7726 ], [ %628, %resize.i7741 ], [ %627, %resize.i7756 ], [ %628, %resize.i7771 ], [ %627, %resize.i7786 ], [ %673, %resize.i7801 ], [ %672, %resize.i7816 ], [ %673, %resize.i7831 ], [ %672, %resize.i7846 ], [ %718, %resize.i7861 ], [ %717, %resize.i7876 ], [ %718, %resize.i7891 ], [ %717, %resize.i7906 ], [ %719, %resize.i7922 ], [ %768, %resize.i7937 ], [ %719, %resize.i7953 ], [ %789, %resize.i7968 ], [ %788, %resize.i7983 ], [ %.pre-phi, %resize.i7998 ], [ %.pre-phi8587, %resize.i8013 ], [ %814, %resize.i8029 ], [ %842, %resize.i8045 ], [ %858, %resize.i8060 ], [ %856, %resize.i8076 ], [ %len.addr.44, %resize.i8091 ], [ %len.addr.44, %resize.i8105 ], [ %896, %resize.i8121 ], [ %895, %resize.i8136 ], [ %896, %resize.i8151 ], [ %915, %resize.i8166 ], [ %954, %resize.i8180 ], [ %len.addr.50, %resize.i8210 ], [ %len.addr.50, %resize.i8224 ], [ %len.addr.50, %resize.i8239 ], [ %len.addr.50, %resize.i8253 ], [ %len.addr.51, %return.loopexit8750 ], [ %len.addr.51, %dynamic_jump_table ], [ %len.addr.51, %dynamic_jump_table ], [ %len.addr.51, %dynamic_jump_table ], [ %len.addr.31.ph, %resize.i7529 ], [ %459, %OP834.JUMPDEST ], [ %len.addr.3.ph, %resize.i7237 ], [ %49, %resize.i7223 ], [ %len.addr.47.ph, %resize.i8195 ], [ %961, %OP1479.JUMPDEST ], [ %len.addr.20.ph, %resize.i7315 ], [ %230, %resize.i7300 ]
  %1009 = phi i8 [ %365, %OP703.PUSH1 ], [ %366, %OP707.PUSH1 ], [ %368, %OP711.ADD ], [ %389, %OP736.MLOAD.contd ], [ %996, %OP1534.PUSH1 ], [ %1005, %OP1542.PUSH1 ], [ %1007, %OP1545.PUSH1 ], [ %572, %OP969.PUSH1 ], [ %573, %OP973.SLOAD ], [ %737, %OP1151.PUSH1 ], [ %738, %OP1155.PUSH1 ], [ %740, %OP1159.SUB ], [ %758, %OP1182.PUSH1 ], [ %759, %OP1186.PUSH1 ], [ %761, %OP1190.ADD ], [ %785, %OP1218.MLOAD.contd ], [ %646, %OP1055.PUSH1 ], [ %665, %OP1072.PUSH1 ], [ %666, %OP1076.SLOAD ], [ %692, %OP1102.PUSH1 ], [ %711, %OP1119.PUSH1 ], [ %712, %OP1123.PUSH1 ], [ %714, %OP1127.SUB ], [ %spec.select5347, %OP1083.PUSH1 ], [ %602, %OP1012.PUSH1 ], [ %619, %OP1029.PUSH1 ], [ %620, %OP1033.SLOAD ], [ %spec.select5346, %OP980.PUSH1 ], [ %960, %OP1475.PUSH1 ], [ %894, %OP1388.JUMPDEST ], [ %927, %OP1428.PUSH1 ], [ %939, %OP1454.PUSH2 ], [ %891, %OP1377.PUSH1 ], [ %892, %OP1380.PUSH1 ], [ %879, %OP1356.JUMPDEST ], [ %880, %OP1361.SWAP1 ], [ %857, %OP1330.JUMPDEST ], [ %875, %OP1348.MLOAD.contd ], [ %832, %OP1279.PUSH1 ], [ %833, %OP1283.PUSH1 ], [ %835, %OP1287.SUB ], [ %848, %OP1309.MLOAD.contd ], [ 32, %suspend ], [ %808, %OP1249.PUSH1 ], [ %809, %OP1253.SLOAD ], [ %spec.select5348, %OP1260.PUSH1 ], [ %551, %OP942.JUMPDEST ], [ %503, %OP883.PUSH1 ], [ %521, %OP900.PUSH1 ], [ %522, %OP904.DUP2 ], [ %546, %OP928.MLOAD.contd ], [ %458, %OP830.PUSH1 ], [ %392, %OP743.JUMPDEST ], [ %425, %OP783.PUSH1 ], [ %437, %OP809.PUSH2 ], [ %333, %OP668.JUMPDEST ], [ %335, %OP670.MLOAD.contd ], [ %337, %OP675.PUSH1 ], [ %spec.select5345, %OP681.MLOAD.contd ], [ %spec.select5344, %OP637.PUSH1 ], [ %313, %OP603.JUMPDEST ], [ %316, %OP605.MLOAD.contd ], [ %318, %OP614.PUSH1 ], [ %spec.select5343, %OP620.MLOAD.contd ], [ %spec.select5342, %OP574.PUSH1 ], [ %spec.select5341, %OP563.MLOAD.contd ], [ %278, %OP540.MLOAD.contd ], [ %218, %OP465.JUMPDEST ], [ %222, %OP467.MLOAD.contd ], [ %224, %OP477.DUP4 ], [ %225, %OP480.MLOAD.contd ], [ %227, %OP483.PUSH1 ], [ %spec.select5340, %OP458.PUSH1 ], [ %205, %OP434.JUMPDEST ], [ %207, %OP436.MLOAD.contd ], [ %209, %OP441.PUSH1 ], [ %spec.select5339, %OP447.MLOAD.contd ], [ %spec.select5338, %OP413.PUSH1 ], [ %187, %OP385.JUMPDEST ], [ %190, %OP387.MLOAD.contd ], [ %192, %OP396.PUSH1 ], [ %spec.select5337, %OP402.MLOAD.contd ], [ %spec.select5336, %OP378.PUSH1 ], [ %spec.select5335, %OP352.PUSH1 ], [ %166, %OP324.JUMPDEST ], [ %169, %OP326.MLOAD.contd ], [ %171, %OP335.PUSH1 ], [ %spec.select5334, %OP341.MLOAD.contd ], [ %spec.select5333, %OP285.PUSH1 ], [ %146, %OP261.JUMPDEST ], [ %148, %OP263.MLOAD.contd ], [ %150, %OP268.PUSH1 ], [ %spec.select5332, %OP274.MLOAD.contd ], [ %spec.select5331, %OP254.PUSH1 ], [ %132, %OP226.JUMPDEST ], [ %135, %OP228.MLOAD.contd ], [ %137, %OP237.PUSH1 ], [ %spec.select5330, %OP243.MLOAD.contd ], [ %spec.select5329, %OP197.PUSH1 ], [ %spec.select5328, %OP186.MLOAD.contd ], [ %97, %OP163.MLOAD.contd ], [ %37, %OP88.JUMPDEST ], [ %41, %OP90.MLOAD.contd ], [ %43, %OP100.DUP4 ], [ %44, %OP103.MLOAD.contd ], [ %46, %OP106.PUSH1 ], [ %spec.select, %OP81.PUSH1 ], [ %spec.select5349, %OP1327.PUSH1 ], [ %3, %resize.i ], [ %94, %resize.i7253 ], [ %110, %resize.i7268 ], [ %117, %resize.i7284 ], [ %275, %resize.i7331 ], [ %291, %resize.i7346 ], [ %298, %resize.i7362 ], [ %351, %resize.i7377 ], [ %362, %resize.i7392 ], [ %371, %resize.i7408 ], [ %381, %resize.i7423 ], [ %386, %resize.i7439 ], [ %406, %resize.i7455 ], [ %411, %resize.i7470 ], [ %422, %resize.i7485 ], [ %448, %resize.i7500 ], [ %456, %resize.i7514 ], [ %489, %resize.i7544 ], [ %500, %resize.i7559 ], [ %507, %resize.i7574 ], [ %518, %resize.i7589 ], [ %526, %resize.i7605 ], [ %537, %resize.i7620 ], [ %542, %resize.i7636 ], [ %558, %resize.i7651 ], [ %569, %resize.i7666 ], [ %588, %resize.i7681 ], [ %599, %resize.i7696 ], [ %605, %resize.i7711 ], [ %616, %resize.i7726 ], [ %632, %resize.i7741 ], [ %643, %resize.i7756 ], [ %651, %resize.i7771 ], [ %662, %resize.i7786 ], [ %678, %resize.i7801 ], [ %689, %resize.i7816 ], [ %697, %resize.i7831 ], [ %708, %resize.i7846 ], [ %723, %resize.i7861 ], [ %734, %resize.i7876 ], [ %744, %resize.i7891 ], [ %755, %resize.i7906 ], [ %766, %resize.i7922 ], [ %777, %resize.i7937 ], [ %782, %resize.i7953 ], [ %794, %resize.i7968 ], [ %805, %resize.i7983 ], [ %818, %resize.i7998 ], [ %829, %resize.i8013 ], [ %840, %resize.i8029 ], [ %845, %resize.i8045 ], [ %867, %resize.i8060 ], [ %872, %resize.i8076 ], [ %886, %resize.i8091 ], [ %889, %resize.i8105 ], [ %908, %resize.i8121 ], [ %913, %resize.i8136 ], [ %924, %resize.i8151 ], [ %950, %resize.i8166 ], [ %958, %resize.i8180 ], [ %991, %resize.i8210 ], [ %994, %resize.i8224 ], [ %999, %resize.i8239 ], [ %1003, %resize.i8253 ], [ 89, %return.loopexit8750 ], [ 1, %dynamic_jump_table ], [ 1, %dynamic_jump_table ], [ 1, %dynamic_jump_table ], [ %470, %resize.i7529 ], [ %461, %OP834.JUMPDEST ], [ %73, %resize.i7237 ], [ %62, %resize.i7223 ], [ %972, %resize.i8195 ], [ %963, %OP1479.JUMPDEST ], [ %254, %resize.i7315 ], [ %243, %resize.i7300 ]
  store i64 %len.addr.52, ptr %arg.stack_len.addr, align 8
  ret i8 %1009
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn
declare i8 @__revmc_builtin_balance(ptr noalias nocapture noundef align 8 dereferenceable(88), ptr noalias nocapture noundef align 8 dereferenceable(32), i8 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.experimental.noalias.scope.decl(metadata) #5

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn "target-cpu"="skylake" }
attributes #1 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite) "target-cpu"="skylake" }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #6 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{!3}
!3 = distinct !{!3, !4, !"__revmc_ir_builtin_mstore: argument 0"}
!4 = distinct !{!4, !"__revmc_ir_builtin_mstore"}
!5 = !{!"branch_weights", i32 1, i32 20000}
!6 = !{!"branch_weights", i32 20000, i32 1}
!7 = !{!"normal exit"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"__revmc_ir_builtin_mload: argument 0"}
!10 = distinct !{!10, !"__revmc_ir_builtin_mload"}
!11 = distinct !{!11, !10, !"__revmc_ir_builtin_mload: argument 1"}
!12 = !{!9}
!13 = !{!14}
!14 = distinct !{!14, !15, !"__revmc_ir_builtin_mstore: argument 0"}
!15 = distinct !{!15, !"__revmc_ir_builtin_mstore"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"__revmc_ir_builtin_mload: argument 1"}
!18 = distinct !{!18, !"__revmc_ir_builtin_mload"}
!19 = !{!20}
!20 = distinct !{!20, !18, !"__revmc_ir_builtin_mload: argument 0"}
!21 = !{!20, !17}
!22 = !{!23, !25}
!23 = distinct !{!23, !24, !"__revmc_ir_builtin_mload: argument 0"}
!24 = distinct !{!24, !"__revmc_ir_builtin_mload"}
!25 = distinct !{!25, !24, !"__revmc_ir_builtin_mload: argument 1"}
!26 = !{!23}
!27 = !{!28}
!28 = distinct !{!28, !29, !"__revmc_ir_builtin_mstore: argument 0"}
!29 = distinct !{!29, !"__revmc_ir_builtin_mstore"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"__revmc_ir_builtin_mstore: argument 0"}
!32 = distinct !{!32, !"__revmc_ir_builtin_mstore"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"__revmc_ir_builtin_mstore: argument 0"}
!35 = distinct !{!35, !"__revmc_ir_builtin_mstore"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"__revmc_ir_builtin_mstore: argument 0"}
!38 = distinct !{!38, !"__revmc_ir_builtin_mstore"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"__revmc_ir_builtin_mstore: argument 0"}
!41 = distinct !{!41, !"__revmc_ir_builtin_mstore"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"__revmc_ir_builtin_mstore: argument 0"}
!44 = distinct !{!44, !"__revmc_ir_builtin_mstore"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"__revmc_ir_builtin_mstore: argument 0"}
!47 = distinct !{!47, !"__revmc_ir_builtin_mstore"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"__revmc_ir_builtin_mstore: argument 0"}
!50 = distinct !{!50, !"__revmc_ir_builtin_mstore"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"__revmc_ir_builtin_mstore: argument 0"}
!53 = distinct !{!53, !"__revmc_ir_builtin_mstore"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"__revmc_ir_builtin_mstore: argument 0"}
!56 = distinct !{!56, !"__revmc_ir_builtin_mstore"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"__revmc_ir_builtin_mstore: argument 0"}
!59 = distinct !{!59, !"__revmc_ir_builtin_mstore"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"__revmc_ir_builtin_mload: argument 1"}
!62 = distinct !{!62, !"__revmc_ir_builtin_mload"}
!63 = !{!64}
!64 = distinct !{!64, !62, !"__revmc_ir_builtin_mload: argument 0"}
!65 = !{!64, !61}
!66 = !{!67, !69}
!67 = distinct !{!67, !68, !"__revmc_ir_builtin_mload: argument 0"}
!68 = distinct !{!68, !"__revmc_ir_builtin_mload"}
!69 = distinct !{!69, !68, !"__revmc_ir_builtin_mload: argument 1"}
!70 = !{!67}
!71 = !{!72}
!72 = distinct !{!72, !73, !"__revmc_ir_builtin_mstore: argument 0"}
!73 = distinct !{!73, !"__revmc_ir_builtin_mstore"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"__revmc_ir_builtin_mstore: argument 0"}
!76 = distinct !{!76, !"__revmc_ir_builtin_mstore"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"__revmc_ir_builtin_mload: argument 1"}
!79 = distinct !{!79, !"__revmc_ir_builtin_mload"}
!80 = !{!81}
!81 = distinct !{!81, !79, !"__revmc_ir_builtin_mload: argument 0"}
!82 = !{!81, !78}
!83 = !{!84}
!84 = distinct !{!84, !85, !"__revmc_ir_builtin_mstore: argument 0"}
!85 = distinct !{!85, !"__revmc_ir_builtin_mstore"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"__revmc_ir_builtin_mstore: argument 0"}
!88 = distinct !{!88, !"__revmc_ir_builtin_mstore"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"__revmc_ir_builtin_mload: argument 1"}
!91 = distinct !{!91, !"__revmc_ir_builtin_mload"}
!92 = !{!93}
!93 = distinct !{!93, !91, !"__revmc_ir_builtin_mload: argument 0"}
!94 = !{!93, !90}
!95 = !{!96, !98}
!96 = distinct !{!96, !97, !"__revmc_ir_builtin_mload: argument 0"}
!97 = distinct !{!97, !"__revmc_ir_builtin_mload"}
!98 = distinct !{!98, !97, !"__revmc_ir_builtin_mload: argument 1"}
!99 = !{!96}
!100 = !{!101}
!101 = distinct !{!101, !102, !"__revmc_ir_builtin_mstore: argument 0"}
!102 = distinct !{!102, !"__revmc_ir_builtin_mstore"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"__revmc_ir_builtin_mstore: argument 0"}
!105 = distinct !{!105, !"__revmc_ir_builtin_mstore"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"__revmc_ir_builtin_mload: argument 1"}
!108 = distinct !{!108, !"__revmc_ir_builtin_mload"}
!109 = !{!110}
!110 = distinct !{!110, !108, !"__revmc_ir_builtin_mload: argument 0"}
!111 = !{!110, !107}
!112 = !{!113}
!113 = distinct !{!113, !114, !"__revmc_ir_builtin_mload: argument 1"}
!114 = distinct !{!114, !"__revmc_ir_builtin_mload"}
!115 = !{!116}
!116 = distinct !{!116, !114, !"__revmc_ir_builtin_mload: argument 0"}
!117 = !{!116, !113}
!118 = !{!119}
!119 = distinct !{!119, !120, !"__revmc_ir_builtin_mload: argument 1"}
!120 = distinct !{!120, !"__revmc_ir_builtin_mload"}
!121 = !{!122}
!122 = distinct !{!122, !120, !"__revmc_ir_builtin_mload: argument 0"}
!123 = !{!122, !119}
!124 = !{!125}
!125 = distinct !{!125, !126, !"__revmc_ir_builtin_mstore: argument 0"}
!126 = distinct !{!126, !"__revmc_ir_builtin_mstore"}
!127 = !{!128}
!128 = distinct !{!128, !129, !"__revmc_ir_builtin_mstore: argument 0"}
!129 = distinct !{!129, !"__revmc_ir_builtin_mstore"}
!130 = !{!131}
!131 = distinct !{!131, !132, !"__revmc_ir_builtin_mstore: argument 0"}
!132 = distinct !{!132, !"__revmc_ir_builtin_mstore"}
!133 = !{!134}
!134 = distinct !{!134, !135, !"__revmc_ir_builtin_mstore: argument 0"}
!135 = distinct !{!135, !"__revmc_ir_builtin_mstore"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"__revmc_ir_builtin_mload: argument 1"}
!138 = distinct !{!138, !"__revmc_ir_builtin_mload"}
!139 = !{!140}
!140 = distinct !{!140, !138, !"__revmc_ir_builtin_mload: argument 0"}
!141 = !{!140, !137}
!142 = !{!143, !145}
!143 = distinct !{!143, !144, !"__revmc_ir_builtin_mload: argument 0"}
!144 = distinct !{!144, !"__revmc_ir_builtin_mload"}
!145 = distinct !{!145, !144, !"__revmc_ir_builtin_mload: argument 1"}
!146 = !{!143}
!147 = !{!148}
!148 = distinct !{!148, !149, !"__revmc_ir_builtin_mstore: argument 0"}
!149 = distinct !{!149, !"__revmc_ir_builtin_mstore"}
!150 = !{!151, !153}
!151 = distinct !{!151, !152, !"__revmc_ir_builtin_mload: argument 0"}
!152 = distinct !{!152, !"__revmc_ir_builtin_mload"}
!153 = distinct !{!153, !152, !"__revmc_ir_builtin_mload: argument 1"}
!154 = !{!151}
!155 = !{!156}
!156 = distinct !{!156, !157, !"__revmc_ir_builtin_mstore: argument 0"}
!157 = distinct !{!157, !"__revmc_ir_builtin_mstore"}
!158 = !{!159}
!159 = distinct !{!159, !160, !"__revmc_ir_builtin_mstore: argument 0"}
!160 = distinct !{!160, !"__revmc_ir_builtin_mstore"}
!161 = !{!162}
!162 = distinct !{!162, !163, !"__revmc_ir_builtin_mload: argument 1"}
!163 = distinct !{!163, !"__revmc_ir_builtin_mload"}
!164 = !{!165}
!165 = distinct !{!165, !163, !"__revmc_ir_builtin_mload: argument 0"}
!166 = !{!165, !162}
!167 = !{!168}
!168 = distinct !{!168, !169, !"__revmc_ir_builtin_mload: argument 1"}
!169 = distinct !{!169, !"__revmc_ir_builtin_mload"}
!170 = !{!171}
!171 = distinct !{!171, !169, !"__revmc_ir_builtin_mload: argument 0"}
!172 = !{!171, !168}
!173 = !{!174}
!174 = distinct !{!174, !175, !"__revmc_ir_builtin_mload: argument 1"}
!175 = distinct !{!175, !"__revmc_ir_builtin_mload"}
!176 = !{!177}
!177 = distinct !{!177, !175, !"__revmc_ir_builtin_mload: argument 0"}
!178 = !{!177, !174}
!179 = !{!180, !182}
!180 = distinct !{!180, !181, !"__revmc_ir_builtin_mload: argument 0"}
!181 = distinct !{!181, !"__revmc_ir_builtin_mload"}
!182 = distinct !{!182, !181, !"__revmc_ir_builtin_mload: argument 1"}
!183 = !{!180}
!184 = !{!185}
!185 = distinct !{!185, !186, !"__revmc_ir_builtin_mstore: argument 0"}
!186 = distinct !{!186, !"__revmc_ir_builtin_mstore"}
!187 = !{!188}
!188 = distinct !{!188, !189, !"__revmc_ir_builtin_mstore: argument 0"}
!189 = distinct !{!189, !"__revmc_ir_builtin_mstore"}
!190 = !{!191}
!191 = distinct !{!191, !192, !"__revmc_ir_builtin_mload: argument 1"}
!192 = distinct !{!192, !"__revmc_ir_builtin_mload"}
!193 = !{!194}
!194 = distinct !{!194, !192, !"__revmc_ir_builtin_mload: argument 0"}
!195 = !{!194, !191}
!196 = !{!197}
!197 = distinct !{!197, !198, !"__revmc_ir_builtin_mstore: argument 0"}
!198 = distinct !{!198, !"__revmc_ir_builtin_mstore"}
!199 = !{!200}
!200 = distinct !{!200, !201, !"__revmc_ir_builtin_mstore: argument 0"}
!201 = distinct !{!201, !"__revmc_ir_builtin_mstore"}
!202 = !{!203}
!203 = distinct !{!203, !204, !"__revmc_ir_builtin_mstore: argument 0"}
!204 = distinct !{!204, !"__revmc_ir_builtin_mstore"}
!205 = !{!206}
!206 = distinct !{!206, !207, !"__revmc_ir_builtin_mstore: argument 0"}
!207 = distinct !{!207, !"__revmc_ir_builtin_mstore"}
!208 = !{!209, !211}
!209 = distinct !{!209, !210, !"__revmc_ir_builtin_mload: argument 0"}
!210 = distinct !{!210, !"__revmc_ir_builtin_mload"}
!211 = distinct !{!211, !210, !"__revmc_ir_builtin_mload: argument 1"}
!212 = !{!209}
!213 = !{!214}
!214 = distinct !{!214, !215, !"__revmc_ir_builtin_mstore: argument 0"}
!215 = distinct !{!215, !"__revmc_ir_builtin_mstore"}
!216 = !{!217}
!217 = distinct !{!217, !218, !"__revmc_ir_builtin_mload: argument 1"}
!218 = distinct !{!218, !"__revmc_ir_builtin_mload"}
!219 = !{!220}
!220 = distinct !{!220, !218, !"__revmc_ir_builtin_mload: argument 0"}
!221 = !{!220, !217}
!222 = !{!223}
!223 = distinct !{!223, !224, !"__revmc_ir_builtin_mstore: argument 0"}
!224 = distinct !{!224, !"__revmc_ir_builtin_mstore"}
!225 = !{!226}
!226 = distinct !{!226, !227, !"__revmc_ir_builtin_mstore: argument 0"}
!227 = distinct !{!227, !"__revmc_ir_builtin_mstore"}
!228 = !{!229}
!229 = distinct !{!229, !230, !"__revmc_ir_builtin_mload: argument 1"}
!230 = distinct !{!230, !"__revmc_ir_builtin_mload"}
!231 = !{!232}
!232 = distinct !{!232, !230, !"__revmc_ir_builtin_mload: argument 0"}
!233 = !{!232, !229}
!234 = !{!235}
!235 = distinct !{!235, !236, !"__revmc_ir_builtin_mstore: argument 0"}
!236 = distinct !{!236, !"__revmc_ir_builtin_mstore"}
!237 = !{!238}
!238 = distinct !{!238, !239, !"__revmc_ir_builtin_mstore: argument 0"}
!239 = distinct !{!239, !"__revmc_ir_builtin_mstore"}
!240 = !{!"branch_weights", i32 1, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000}
!241 = !{!"return CallOrCreate"}
!242 = !{!243}
!243 = distinct !{!243, !244, !"__revmc_ir_builtin_mstore: argument 0"}
!244 = distinct !{!244, !"__revmc_ir_builtin_mstore"}
!245 = !{!246, !248}
!246 = distinct !{!246, !247, !"__revmc_ir_builtin_mload: argument 0"}
!247 = distinct !{!247, !"__revmc_ir_builtin_mload"}
!248 = distinct !{!248, !247, !"__revmc_ir_builtin_mload: argument 1"}
!249 = !{!246}
!250 = !{!251}
!251 = distinct !{!251, !252, !"__revmc_ir_builtin_mstore: argument 0"}
!252 = distinct !{!252, !"__revmc_ir_builtin_mstore"}
!253 = !{!254}
!254 = distinct !{!254, !255, !"__revmc_ir_builtin_mload: argument 1"}
!255 = distinct !{!255, !"__revmc_ir_builtin_mload"}
!256 = !{!257}
!257 = distinct !{!257, !255, !"__revmc_ir_builtin_mload: argument 0"}
!258 = !{!257, !254}
!259 = !{!260, !262}
!260 = distinct !{!260, !261, !"__revmc_ir_builtin_mload: argument 0"}
!261 = distinct !{!261, !"__revmc_ir_builtin_mload"}
!262 = distinct !{!262, !261, !"__revmc_ir_builtin_mload: argument 1"}
!263 = !{!260}
!264 = !{!265}
!265 = distinct !{!265, !266, !"__revmc_ir_builtin_mstore: argument 0"}
!266 = distinct !{!266, !"__revmc_ir_builtin_mstore"}
!267 = !{!268}
!268 = distinct !{!268, !269, !"__revmc_ir_builtin_mload: argument 1"}
!269 = distinct !{!269, !"__revmc_ir_builtin_mload"}
!270 = !{!271}
!271 = distinct !{!271, !269, !"__revmc_ir_builtin_mload: argument 0"}
!272 = !{!271, !268}
!273 = !{!274}
!274 = distinct !{!274, !275, !"__revmc_ir_builtin_mload: argument 1"}
!275 = distinct !{!275, !"__revmc_ir_builtin_mload"}
!276 = !{!277}
!277 = distinct !{!277, !275, !"__revmc_ir_builtin_mload: argument 0"}
!278 = !{!277, !274}
!279 = !{!280}
!280 = distinct !{!280, !281, !"__revmc_ir_builtin_mload: argument 1"}
!281 = distinct !{!281, !"__revmc_ir_builtin_mload"}
!282 = !{!283}
!283 = distinct !{!283, !281, !"__revmc_ir_builtin_mload: argument 0"}
!284 = !{!283, !280}
!285 = !{!286, !288}
!286 = distinct !{!286, !287, !"__revmc_ir_builtin_mload: argument 0"}
!287 = distinct !{!287, !"__revmc_ir_builtin_mload"}
!288 = distinct !{!288, !287, !"__revmc_ir_builtin_mload: argument 1"}
!289 = !{!286}
!290 = !{!291}
!291 = distinct !{!291, !292, !"__revmc_ir_builtin_mstore: argument 0"}
!292 = distinct !{!292, !"__revmc_ir_builtin_mstore"}
!293 = !{!294}
!294 = distinct !{!294, !295, !"__revmc_ir_builtin_mstore: argument 0"}
!295 = distinct !{!295, !"__revmc_ir_builtin_mstore"}
!296 = !{!297}
!297 = distinct !{!297, !298, !"__revmc_ir_builtin_mload: argument 1"}
!298 = distinct !{!298, !"__revmc_ir_builtin_mload"}
!299 = !{!300}
!300 = distinct !{!300, !298, !"__revmc_ir_builtin_mload: argument 0"}
!301 = !{!300, !297}
!302 = !{!303, !305}
!303 = distinct !{!303, !304, !"__revmc_ir_builtin_mload: argument 0"}
!304 = distinct !{!304, !"__revmc_ir_builtin_mload"}
!305 = distinct !{!305, !304, !"__revmc_ir_builtin_mload: argument 1"}
!306 = !{!303}
!307 = !{!308}
!308 = distinct !{!308, !309, !"__revmc_ir_builtin_mstore: argument 0"}
!309 = distinct !{!309, !"__revmc_ir_builtin_mstore"}
!310 = !{!311}
!311 = distinct !{!311, !312, !"__revmc_ir_builtin_mload: argument 1"}
!312 = distinct !{!312, !"__revmc_ir_builtin_mload"}
!313 = !{!314}
!314 = distinct !{!314, !312, !"__revmc_ir_builtin_mload: argument 0"}
!315 = !{!314, !311}
!316 = !{!"branch_weights", i32 1, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000}
!317 = !{!318}
!318 = distinct !{!318, !319, !"__revmc_ir_builtin_mstore: argument 0"}
!319 = distinct !{!319, !"__revmc_ir_builtin_mstore"}
!320 = !{!321, !323}
!321 = distinct !{!321, !322, !"__revmc_ir_builtin_mload: argument 0"}
!322 = distinct !{!322, !"__revmc_ir_builtin_mload"}
!323 = distinct !{!323, !322, !"__revmc_ir_builtin_mload: argument 1"}
!324 = !{!321}
!325 = !{!326}
!326 = distinct !{!326, !327, !"__revmc_ir_builtin_mstore: argument 0"}
!327 = distinct !{!327, !"__revmc_ir_builtin_mstore"}
!328 = !{!329, !331}
!329 = distinct !{!329, !330, !"__revmc_ir_builtin_mload: argument 0"}
!330 = distinct !{!330, !"__revmc_ir_builtin_mload"}
!331 = distinct !{!331, !330, !"__revmc_ir_builtin_mload: argument 1"}
!332 = !{!329}
!333 = !{!334}
!334 = distinct !{!334, !335, !"__revmc_ir_builtin_mstore: argument 0"}
!335 = distinct !{!335, !"__revmc_ir_builtin_mstore"}
!336 = !{!337}
!337 = distinct !{!337, !338, !"__revmc_ir_builtin_mstore: argument 0"}
!338 = distinct !{!338, !"__revmc_ir_builtin_mstore"}
!339 = !{!340}
!340 = distinct !{!340, !341, !"__revmc_ir_builtin_mstore: argument 0"}
!341 = distinct !{!341, !"__revmc_ir_builtin_mstore"}
!342 = !{!343, !345}
!343 = distinct !{!343, !344, !"__revmc_ir_builtin_mload: argument 0"}
!344 = distinct !{!344, !"__revmc_ir_builtin_mload"}
!345 = distinct !{!345, !344, !"__revmc_ir_builtin_mload: argument 1"}
!346 = !{!343}
!347 = !{!348}
!348 = distinct !{!348, !349, !"__revmc_ir_builtin_mstore: argument 0"}
!349 = distinct !{!349, !"__revmc_ir_builtin_mstore"}
!350 = !{!351}
!351 = distinct !{!351, !352, !"__revmc_ir_builtin_mstore: argument 0"}
!352 = distinct !{!352, !"__revmc_ir_builtin_mstore"}
!353 = !{!354}
!354 = distinct !{!354, !355, !"__revmc_ir_builtin_mstore: argument 0"}
!355 = distinct !{!355, !"__revmc_ir_builtin_mstore"}
!356 = !{!357, !359}
!357 = distinct !{!357, !358, !"__revmc_ir_builtin_mload: argument 0"}
!358 = distinct !{!358, !"__revmc_ir_builtin_mload"}
!359 = distinct !{!359, !358, !"__revmc_ir_builtin_mload: argument 1"}
!360 = !{!357}
!361 = !{!362}
!362 = distinct !{!362, !363, !"__revmc_ir_builtin_mstore: argument 0"}
!363 = distinct !{!363, !"__revmc_ir_builtin_mstore"}
!364 = !{!365}
!365 = distinct !{!365, !366, !"__revmc_ir_builtin_mstore: argument 0"}
!366 = distinct !{!366, !"__revmc_ir_builtin_mstore"}
!367 = !{!368}
!368 = distinct !{!368, !369, !"__revmc_ir_builtin_mstore: argument 0"}
!369 = distinct !{!369, !"__revmc_ir_builtin_mstore"}
!370 = !{!371, !373}
!371 = distinct !{!371, !372, !"__revmc_ir_builtin_mload: argument 0"}
!372 = distinct !{!372, !"__revmc_ir_builtin_mload"}
!373 = distinct !{!373, !372, !"__revmc_ir_builtin_mload: argument 1"}
!374 = !{!371}
!375 = !{!376}
!376 = distinct !{!376, !377, !"__revmc_ir_builtin_mstore: argument 0"}
!377 = distinct !{!377, !"__revmc_ir_builtin_mstore"}
!378 = !{!379}
!379 = distinct !{!379, !380, !"__revmc_ir_builtin_mstore: argument 0"}
!380 = distinct !{!380, !"__revmc_ir_builtin_mstore"}
!381 = !{!382}
!382 = distinct !{!382, !383, !"__revmc_ir_builtin_mstore: argument 0"}
!383 = distinct !{!383, !"__revmc_ir_builtin_mstore"}
!384 = !{!385, !387}
!385 = distinct !{!385, !386, !"__revmc_ir_builtin_mload: argument 0"}
!386 = distinct !{!386, !"__revmc_ir_builtin_mload"}
!387 = distinct !{!387, !386, !"__revmc_ir_builtin_mload: argument 1"}
!388 = !{!385}
!389 = !{!390}
!390 = distinct !{!390, !391, !"__revmc_ir_builtin_mstore: argument 0"}
!391 = distinct !{!391, !"__revmc_ir_builtin_mstore"}
!392 = !{!393}
!393 = distinct !{!393, !394, !"__revmc_ir_builtin_mstore: argument 0"}
!394 = distinct !{!394, !"__revmc_ir_builtin_mstore"}
!395 = !{!396}
!396 = distinct !{!396, !397, !"__revmc_ir_builtin_mstore: argument 0"}
!397 = distinct !{!397, !"__revmc_ir_builtin_mstore"}
!398 = !{!399, !401}
!399 = distinct !{!399, !400, !"__revmc_ir_builtin_mload: argument 0"}
!400 = distinct !{!400, !"__revmc_ir_builtin_mload"}
!401 = distinct !{!401, !400, !"__revmc_ir_builtin_mload: argument 1"}
!402 = !{!399}
!403 = !{!404}
!404 = distinct !{!404, !405, !"__revmc_ir_builtin_mstore: argument 0"}
!405 = distinct !{!405, !"__revmc_ir_builtin_mstore"}
!406 = !{!407}
!407 = distinct !{!407, !408, !"__revmc_ir_builtin_mstore: argument 0"}
!408 = distinct !{!408, !"__revmc_ir_builtin_mstore"}
!409 = !{!410}
!410 = distinct !{!410, !411, !"__revmc_ir_builtin_mstore: argument 0"}
!411 = distinct !{!411, !"__revmc_ir_builtin_mstore"}
!412 = !{!413, !415}
!413 = distinct !{!413, !414, !"__revmc_ir_builtin_mload: argument 0"}
!414 = distinct !{!414, !"__revmc_ir_builtin_mload"}
!415 = distinct !{!415, !414, !"__revmc_ir_builtin_mload: argument 1"}
!416 = !{!413}
!417 = !{!418}
!418 = distinct !{!418, !419, !"__revmc_ir_builtin_mstore: argument 0"}
!419 = distinct !{!419, !"__revmc_ir_builtin_mstore"}
!420 = !{!421}
!421 = distinct !{!421, !422, !"__revmc_ir_builtin_mstore: argument 0"}
!422 = distinct !{!422, !"__revmc_ir_builtin_mstore"}
!423 = !{!424}
!424 = distinct !{!424, !425, !"__revmc_ir_builtin_mstore: argument 0"}
!425 = distinct !{!425, !"__revmc_ir_builtin_mstore"}
!426 = !{!427}
!427 = distinct !{!427, !428, !"__revmc_ir_builtin_mstore: argument 0"}
!428 = distinct !{!428, !"__revmc_ir_builtin_mstore"}
!429 = !{!430}
!430 = distinct !{!430, !431, !"__revmc_ir_builtin_mstore: argument 0"}
!431 = distinct !{!431, !"__revmc_ir_builtin_mstore"}
!432 = !{!433}
!433 = distinct !{!433, !434, !"__revmc_ir_builtin_mload: argument 1"}
!434 = distinct !{!434, !"__revmc_ir_builtin_mload"}
!435 = !{!436}
!436 = distinct !{!436, !434, !"__revmc_ir_builtin_mload: argument 0"}
!437 = !{!436, !433}
!438 = !{!439}
!439 = distinct !{!439, !440, !"__revmc_ir_builtin_mstore: argument 0"}
!440 = distinct !{!440, !"__revmc_ir_builtin_mstore"}
!441 = !{!442}
!442 = distinct !{!442, !443, !"__revmc_ir_builtin_mstore: argument 0"}
!443 = distinct !{!443, !"__revmc_ir_builtin_mstore"}
!444 = !{!445}
!445 = distinct !{!445, !446, !"__revmc_ir_builtin_mstore: argument 0"}
!446 = distinct !{!446, !"__revmc_ir_builtin_mstore"}
!447 = !{!448}
!448 = distinct !{!448, !449, !"__revmc_ir_builtin_mload: argument 1"}
!449 = distinct !{!449, !"__revmc_ir_builtin_mload"}
!450 = !{!451}
!451 = distinct !{!451, !449, !"__revmc_ir_builtin_mload: argument 0"}
!452 = !{!451, !448}
!453 = !{!454}
!454 = distinct !{!454, !455, !"__revmc_ir_builtin_mload: argument 1"}
!455 = distinct !{!455, !"__revmc_ir_builtin_mload"}
!456 = !{!457}
!457 = distinct !{!457, !455, !"__revmc_ir_builtin_mload: argument 0"}
!458 = !{!457, !454}
!459 = !{!460}
!460 = distinct !{!460, !461, !"__revmc_ir_builtin_mload: argument 1"}
!461 = distinct !{!461, !"__revmc_ir_builtin_mload"}
!462 = !{!463}
!463 = distinct !{!463, !461, !"__revmc_ir_builtin_mload: argument 0"}
!464 = !{!463, !460}
!465 = !{!466}
!466 = distinct !{!466, !467, !"__revmc_ir_builtin_mstore: argument 0"}
!467 = distinct !{!467, !"__revmc_ir_builtin_mstore"}
!468 = !{!469}
!469 = distinct !{!469, !470, !"__revmc_ir_builtin_mstore: argument 0"}
!470 = distinct !{!470, !"__revmc_ir_builtin_mstore"}
!471 = !{!472}
!472 = distinct !{!472, !473, !"__revmc_ir_builtin_mstore: argument 0"}
!473 = distinct !{!473, !"__revmc_ir_builtin_mstore"}
!474 = !{!475}
!475 = distinct !{!475, !476, !"__revmc_ir_builtin_mstore: argument 0"}
!476 = distinct !{!476, !"__revmc_ir_builtin_mstore"}
!477 = !{!478}
!478 = distinct !{!478, !479, !"__revmc_ir_builtin_mstore: argument 0"}
!479 = distinct !{!479, !"__revmc_ir_builtin_mstore"}
!480 = !{!481}
!481 = distinct !{!481, !482, !"__revmc_ir_builtin_mstore: argument 0"}
!482 = distinct !{!482, !"__revmc_ir_builtin_mstore"}
!483 = !{!484}
!484 = distinct !{!484, !485, !"__revmc_ir_builtin_mstore: argument 0"}
!485 = distinct !{!485, !"__revmc_ir_builtin_mstore"}
!486 = !{!487, !489}
!487 = distinct !{!487, !488, !"__revmc_ir_builtin_mload: argument 0"}
!488 = distinct !{!488, !"__revmc_ir_builtin_mload"}
!489 = distinct !{!489, !488, !"__revmc_ir_builtin_mload: argument 1"}
!490 = !{!487}
!491 = !{!492}
!492 = distinct !{!492, !493, !"__revmc_ir_builtin_mstore: argument 0"}
!493 = distinct !{!493, !"__revmc_ir_builtin_mstore"}
!494 = !{!495}
!495 = distinct !{!495, !496, !"__revmc_ir_builtin_mload: argument 1"}
!496 = distinct !{!496, !"__revmc_ir_builtin_mload"}
!497 = !{!498}
!498 = distinct !{!498, !496, !"__revmc_ir_builtin_mload: argument 0"}
!499 = !{!498, !495}
!500 = !{!501, !503}
!501 = distinct !{!501, !502, !"__revmc_ir_builtin_mload: argument 0"}
!502 = distinct !{!502, !"__revmc_ir_builtin_mload"}
!503 = distinct !{!503, !502, !"__revmc_ir_builtin_mload: argument 1"}
!504 = !{!501}
!505 = !{!506}
!506 = distinct !{!506, !507, !"__revmc_ir_builtin_mstore: argument 0"}
!507 = distinct !{!507, !"__revmc_ir_builtin_mstore"}
!508 = !{!509}
!509 = distinct !{!509, !510, !"__revmc_ir_builtin_mstore: argument 0"}
!510 = distinct !{!510, !"__revmc_ir_builtin_mstore"}
!511 = !{!512}
!512 = distinct !{!512, !513, !"__revmc_ir_builtin_mstore: argument 0"}
!513 = distinct !{!513, !"__revmc_ir_builtin_mstore"}
!514 = !{!515}
!515 = distinct !{!515, !516, !"__revmc_ir_builtin_mload: argument 1"}
!516 = distinct !{!516, !"__revmc_ir_builtin_mload"}
!517 = !{!518}
!518 = distinct !{!518, !516, !"__revmc_ir_builtin_mload: argument 0"}
!519 = !{!518, !515}
!520 = !{!521}
!521 = distinct !{!521, !522, !"__revmc_ir_builtin_mstore: argument 0"}
!522 = distinct !{!522, !"__revmc_ir_builtin_mstore"}
!523 = !{!524}
!524 = distinct !{!524, !525, !"__revmc_ir_builtin_mstore: argument 0"}
!525 = distinct !{!525, !"__revmc_ir_builtin_mstore"}
!526 = !{!527}
!527 = distinct !{!527, !528, !"__revmc_ir_builtin_mload: argument 1"}
!528 = distinct !{!528, !"__revmc_ir_builtin_mload"}
!529 = !{!530}
!530 = distinct !{!530, !528, !"__revmc_ir_builtin_mload: argument 0"}
!531 = !{!530, !527}
!532 = !{!533}
!533 = distinct !{!533, !534, !"__revmc_ir_builtin_mstore: argument 0"}
!534 = distinct !{!534, !"__revmc_ir_builtin_mstore"}
!535 = !{!536}
!536 = distinct !{!536, !537, !"__revmc_ir_builtin_mstore: argument 0"}
!537 = distinct !{!537, !"__revmc_ir_builtin_mstore"}
!538 = !{!539}
!539 = distinct !{!539, !540, !"__revmc_ir_builtin_mload: argument 1"}
!540 = distinct !{!540, !"__revmc_ir_builtin_mload"}
!541 = !{!542}
!542 = distinct !{!542, !540, !"__revmc_ir_builtin_mload: argument 0"}
!543 = !{!542, !539}
!544 = !{!545}
!545 = distinct !{!545, !546, !"__revmc_ir_builtin_mstore: argument 0"}
!546 = distinct !{!546, !"__revmc_ir_builtin_mstore"}
!547 = !{!548}
!548 = distinct !{!548, !549, !"__revmc_ir_builtin_mstore: argument 0"}
!549 = distinct !{!549, !"__revmc_ir_builtin_mstore"}
!550 = !{!551}
!551 = distinct !{!551, !552, !"__revmc_ir_builtin_mstore: argument 0"}
!552 = distinct !{!552, !"__revmc_ir_builtin_mstore"}
!553 = !{!554}
!554 = distinct !{!554, !555, !"__revmc_ir_builtin_mstore: argument 0"}
!555 = distinct !{!555, !"__revmc_ir_builtin_mstore"}
!556 = !{!557}
!557 = distinct !{!557, !558, !"__revmc_ir_builtin_mstore: argument 0"}
!558 = distinct !{!558, !"__revmc_ir_builtin_mstore"}
!559 = !{!560}
!560 = distinct !{!560, !561, !"__revmc_ir_builtin_mstore: argument 0"}
!561 = distinct !{!561, !"__revmc_ir_builtin_mstore"}
!562 = !{!563, !565}
!563 = distinct !{!563, !564, !"__revmc_ir_builtin_mload: argument 0"}
!564 = distinct !{!564, !"__revmc_ir_builtin_mload"}
!565 = distinct !{!565, !564, !"__revmc_ir_builtin_mload: argument 1"}
!566 = !{!563}
!567 = !{!568}
!568 = distinct !{!568, !569, !"__revmc_ir_builtin_mstore: argument 0"}
!569 = distinct !{!569, !"__revmc_ir_builtin_mstore"}
!570 = !{!571}
!571 = distinct !{!571, !572, !"__revmc_ir_builtin_mstore: argument 0"}
!572 = distinct !{!572, !"__revmc_ir_builtin_mstore"}
!573 = !{!574}
!574 = distinct !{!574, !575, !"__revmc_ir_builtin_mload: argument 1"}
!575 = distinct !{!575, !"__revmc_ir_builtin_mload"}
!576 = !{!577}
!577 = distinct !{!577, !575, !"__revmc_ir_builtin_mload: argument 0"}
!578 = !{!577, !574}
!579 = !{!580, !582}
!580 = distinct !{!580, !581, !"__revmc_ir_builtin_mload: argument 0"}
!581 = distinct !{!581, !"__revmc_ir_builtin_mload"}
!582 = distinct !{!582, !581, !"__revmc_ir_builtin_mload: argument 1"}
!583 = !{!580}
!584 = !{!585}
!585 = distinct !{!585, !586, !"__revmc_ir_builtin_mstore: argument 0"}
!586 = distinct !{!586, !"__revmc_ir_builtin_mstore"}
!587 = !{!588}
!588 = distinct !{!588, !589, !"__revmc_ir_builtin_mstore: argument 0"}
!589 = distinct !{!589, !"__revmc_ir_builtin_mstore"}
!590 = !{!591}
!591 = distinct !{!591, !592, !"__revmc_ir_builtin_mstore: argument 0"}
!592 = distinct !{!592, !"__revmc_ir_builtin_mstore"}
!593 = !{!594}
!594 = distinct !{!594, !595, !"__revmc_ir_builtin_mload: argument 1"}
!595 = distinct !{!595, !"__revmc_ir_builtin_mload"}
!596 = !{!597}
!597 = distinct !{!597, !595, !"__revmc_ir_builtin_mload: argument 0"}
!598 = !{!597, !594}
!599 = !{!600, !602}
!600 = distinct !{!600, !601, !"__revmc_ir_builtin_mload: argument 0"}
!601 = distinct !{!601, !"__revmc_ir_builtin_mload"}
!602 = distinct !{!602, !601, !"__revmc_ir_builtin_mload: argument 1"}
!603 = !{!600}
!604 = !{!605}
!605 = distinct !{!605, !606, !"__revmc_ir_builtin_mstore: argument 0"}
!606 = distinct !{!606, !"__revmc_ir_builtin_mstore"}
!607 = !{!608}
!608 = distinct !{!608, !609, !"__revmc_ir_builtin_mstore: argument 0"}
!609 = distinct !{!609, !"__revmc_ir_builtin_mstore"}
!610 = !{!611}
!611 = distinct !{!611, !612, !"__revmc_ir_builtin_mstore: argument 0"}
!612 = distinct !{!612, !"__revmc_ir_builtin_mstore"}
!613 = !{!614}
!614 = distinct !{!614, !615, !"__revmc_ir_builtin_mload: argument 1"}
!615 = distinct !{!615, !"__revmc_ir_builtin_mload"}
!616 = !{!617}
!617 = distinct !{!617, !615, !"__revmc_ir_builtin_mload: argument 0"}
!618 = !{!617, !614}
!619 = !{!620}
!620 = distinct !{!620, !621, !"__revmc_ir_builtin_mstore: argument 0"}
!621 = distinct !{!621, !"__revmc_ir_builtin_mstore"}
!622 = !{!623}
!623 = distinct !{!623, !624, !"__revmc_ir_builtin_mstore: argument 0"}
!624 = distinct !{!624, !"__revmc_ir_builtin_mstore"}
!625 = !{!626}
!626 = distinct !{!626, !627, !"__revmc_ir_builtin_mstore: argument 0"}
!627 = distinct !{!627, !"__revmc_ir_builtin_mstore"}
!628 = !{!629}
!629 = distinct !{!629, !630, !"__revmc_ir_builtin_mstore: argument 0"}
!630 = distinct !{!630, !"__revmc_ir_builtin_mstore"}
!631 = !{!632, !634}
!632 = distinct !{!632, !633, !"__revmc_ir_builtin_mload: argument 0"}
!633 = distinct !{!633, !"__revmc_ir_builtin_mload"}
!634 = distinct !{!634, !633, !"__revmc_ir_builtin_mload: argument 1"}
!635 = !{!632}
!636 = !{!637}
!637 = distinct !{!637, !638, !"__revmc_ir_builtin_mstore: argument 0"}
!638 = distinct !{!638, !"__revmc_ir_builtin_mstore"}
!639 = !{!640}
!640 = distinct !{!640, !641, !"__revmc_ir_builtin_mload: argument 1"}
!641 = distinct !{!641, !"__revmc_ir_builtin_mload"}
!642 = !{!643}
!643 = distinct !{!643, !641, !"__revmc_ir_builtin_mload: argument 0"}
!644 = !{!643, !640}
!645 = !{!646}
!646 = distinct !{!646, !647, !"__revmc_ir_builtin_mstore: argument 0"}
!647 = distinct !{!647, !"__revmc_ir_builtin_mstore"}
!648 = !{!649}
!649 = distinct !{!649, !650, !"__revmc_ir_builtin_mstore: argument 0"}
!650 = distinct !{!650, !"__revmc_ir_builtin_mstore"}
!651 = !{!652}
!652 = distinct !{!652, !653, !"__revmc_ir_builtin_mstore: argument 0"}
!653 = distinct !{!653, !"__revmc_ir_builtin_mstore"}
!654 = !{!655}
!655 = distinct !{!655, !656, !"__revmc_ir_builtin_mstore: argument 0"}
!656 = distinct !{!656, !"__revmc_ir_builtin_mstore"}
!657 = !{!658, !660}
!658 = distinct !{!658, !659, !"__revmc_ir_builtin_mload: argument 0"}
!659 = distinct !{!659, !"__revmc_ir_builtin_mload"}
!660 = distinct !{!660, !659, !"__revmc_ir_builtin_mload: argument 1"}
!661 = !{!658}
!662 = !{!663}
!663 = distinct !{!663, !664, !"__revmc_ir_builtin_mstore: argument 0"}
!664 = distinct !{!664, !"__revmc_ir_builtin_mstore"}
!665 = !{!666}
!666 = distinct !{!666, !667, !"__revmc_ir_builtin_mstore: argument 0"}
!667 = distinct !{!667, !"__revmc_ir_builtin_mstore"}
!668 = !{!669}
!669 = distinct !{!669, !670, !"__revmc_ir_builtin_mstore: argument 0"}
!670 = distinct !{!670, !"__revmc_ir_builtin_mstore"}
!671 = !{!672}
!672 = distinct !{!672, !673, !"__revmc_ir_builtin_mstore: argument 0"}
!673 = distinct !{!673, !"__revmc_ir_builtin_mstore"}
!674 = !{!675}
!675 = distinct !{!675, !676, !"__revmc_ir_builtin_mstore: argument 0"}
!676 = distinct !{!676, !"__revmc_ir_builtin_mstore"}
!677 = !{!678, !680}
!678 = distinct !{!678, !679, !"__revmc_ir_builtin_mload: argument 0"}
!679 = distinct !{!679, !"__revmc_ir_builtin_mload"}
!680 = distinct !{!680, !679, !"__revmc_ir_builtin_mload: argument 1"}
!681 = !{!678}
!682 = !{!683}
!683 = distinct !{!683, !684, !"__revmc_ir_builtin_mstore: argument 0"}
!684 = distinct !{!684, !"__revmc_ir_builtin_mstore"}
!685 = !{!686}
!686 = distinct !{!686, !687, !"__revmc_ir_builtin_mstore: argument 0"}
!687 = distinct !{!687, !"__revmc_ir_builtin_mstore"}
!688 = !{!689}
!689 = distinct !{!689, !690, !"__revmc_ir_builtin_mstore: argument 0"}
!690 = distinct !{!690, !"__revmc_ir_builtin_mstore"}
!691 = !{!692}
!692 = distinct !{!692, !693, !"__revmc_ir_builtin_mstore: argument 0"}
!693 = distinct !{!693, !"__revmc_ir_builtin_mstore"}
!694 = !{!695}
!695 = distinct !{!695, !696, !"__revmc_ir_builtin_mstore: argument 0"}
!696 = distinct !{!696, !"__revmc_ir_builtin_mstore"}
!697 = !{!698}
!698 = distinct !{!698, !699, !"__revmc_ir_builtin_mstore: argument 0"}
!699 = distinct !{!699, !"__revmc_ir_builtin_mstore"}
!700 = !{!701}
!701 = distinct !{!701, !702, !"__revmc_ir_builtin_mstore: argument 0"}
!702 = distinct !{!702, !"__revmc_ir_builtin_mstore"}
!703 = !{!704}
!704 = distinct !{!704, !705, !"__revmc_ir_builtin_mstore: argument 0"}
!705 = distinct !{!705, !"__revmc_ir_builtin_mstore"}
!706 = !{!707}
!707 = distinct !{!707, !708, !"__revmc_ir_builtin_mstore: argument 0"}
!708 = distinct !{!708, !"__revmc_ir_builtin_mstore"}
!709 = !{!710, !712}
!710 = distinct !{!710, !711, !"__revmc_ir_builtin_mload: argument 0"}
!711 = distinct !{!711, !"__revmc_ir_builtin_mload"}
!712 = distinct !{!712, !711, !"__revmc_ir_builtin_mload: argument 1"}
!713 = !{!710}
!714 = !{!715}
!715 = distinct !{!715, !716, !"__revmc_ir_builtin_mstore: argument 0"}
!716 = distinct !{!716, !"__revmc_ir_builtin_mstore"}
!717 = !{!718}
!718 = distinct !{!718, !719, !"__revmc_ir_builtin_mstore: argument 0"}
!719 = distinct !{!719, !"__revmc_ir_builtin_mstore"}
!720 = !{!721}
!721 = distinct !{!721, !722, !"__revmc_ir_builtin_mstore: argument 0"}
!722 = distinct !{!722, !"__revmc_ir_builtin_mstore"}
!723 = !{!724, !726}
!724 = distinct !{!724, !725, !"__revmc_ir_builtin_mload: argument 0"}
!725 = distinct !{!725, !"__revmc_ir_builtin_mload"}
!726 = distinct !{!726, !725, !"__revmc_ir_builtin_mload: argument 1"}
!727 = !{!724}
!728 = !{!729}
!729 = distinct !{!729, !730, !"__revmc_ir_builtin_mstore: argument 0"}
!730 = distinct !{!730, !"__revmc_ir_builtin_mstore"}
!731 = !{!732}
!732 = distinct !{!732, !733, !"__revmc_ir_builtin_mstore: argument 0"}
!733 = distinct !{!733, !"__revmc_ir_builtin_mstore"}
!734 = !{!735, !737}
!735 = distinct !{!735, !736, !"__revmc_ir_builtin_mload: argument 0"}
!736 = distinct !{!736, !"__revmc_ir_builtin_mload"}
!737 = distinct !{!737, !736, !"__revmc_ir_builtin_mload: argument 1"}
!738 = !{!735}
!739 = !{!740}
!740 = distinct !{!740, !741, !"__revmc_ir_builtin_mstore: argument 0"}
!741 = distinct !{!741, !"__revmc_ir_builtin_mstore"}
!742 = !{!743}
!743 = distinct !{!743, !744, !"__revmc_ir_builtin_mload: argument 1"}
!744 = distinct !{!744, !"__revmc_ir_builtin_mload"}
!745 = !{!746}
!746 = distinct !{!746, !744, !"__revmc_ir_builtin_mload: argument 0"}
!747 = !{!746, !743}
!748 = !{!749, !751}
!749 = distinct !{!749, !750, !"__revmc_ir_builtin_mload: argument 0"}
!750 = distinct !{!750, !"__revmc_ir_builtin_mload"}
!751 = distinct !{!751, !750, !"__revmc_ir_builtin_mload: argument 1"}
!752 = !{!749}
!753 = !{!754}
!754 = distinct !{!754, !755, !"__revmc_ir_builtin_mstore: argument 0"}
!755 = distinct !{!755, !"__revmc_ir_builtin_mstore"}
!756 = !{!757}
!757 = distinct !{!757, !758, !"__revmc_ir_builtin_mstore: argument 0"}
!758 = distinct !{!758, !"__revmc_ir_builtin_mstore"}
!759 = !{!760}
!760 = distinct !{!760, !761, !"__revmc_ir_builtin_mstore: argument 0"}
!761 = distinct !{!761, !"__revmc_ir_builtin_mstore"}
!762 = !{!763}
!763 = distinct !{!763, !764, !"__revmc_ir_builtin_mstore: argument 0"}
!764 = distinct !{!764, !"__revmc_ir_builtin_mstore"}
!765 = !{!766}
!766 = distinct !{!766, !767, !"__revmc_ir_builtin_mload: argument 1"}
!767 = distinct !{!767, !"__revmc_ir_builtin_mload"}
!768 = !{!769}
!769 = distinct !{!769, !767, !"__revmc_ir_builtin_mload: argument 0"}
!770 = !{!769, !766}
!771 = !{!772, !774}
!772 = distinct !{!772, !773, !"__revmc_ir_builtin_mload: argument 0"}
!773 = distinct !{!773, !"__revmc_ir_builtin_mload"}
!774 = distinct !{!774, !773, !"__revmc_ir_builtin_mload: argument 1"}
!775 = !{!772}
!776 = !{!777}
!777 = distinct !{!777, !778, !"__revmc_ir_builtin_mstore: argument 0"}
!778 = distinct !{!778, !"__revmc_ir_builtin_mstore"}
!779 = !{!780}
!780 = distinct !{!780, !781, !"__revmc_ir_builtin_mstore: argument 0"}
!781 = distinct !{!781, !"__revmc_ir_builtin_mstore"}
!782 = !{!783}
!783 = distinct !{!783, !784, !"__revmc_ir_builtin_mstore: argument 0"}
!784 = distinct !{!784, !"__revmc_ir_builtin_mstore"}
!785 = !{!786}
!786 = distinct !{!786, !787, !"__revmc_ir_builtin_mstore: argument 0"}
!787 = distinct !{!787, !"__revmc_ir_builtin_mstore"}
!788 = !{!789}
!789 = distinct !{!789, !790, !"__revmc_ir_builtin_mstore: argument 0"}
!790 = distinct !{!790, !"__revmc_ir_builtin_mstore"}
!791 = !{!792}
!792 = distinct !{!792, !793, !"__revmc_ir_builtin_mstore: argument 0"}
!793 = distinct !{!793, !"__revmc_ir_builtin_mstore"}
!794 = !{!795, !797}
!795 = distinct !{!795, !796, !"__revmc_ir_builtin_mload: argument 0"}
!796 = distinct !{!796, !"__revmc_ir_builtin_mload"}
!797 = distinct !{!797, !796, !"__revmc_ir_builtin_mload: argument 1"}
!798 = !{!795}
!799 = !{!800}
!800 = distinct !{!800, !801, !"__revmc_ir_builtin_mstore: argument 0"}
!801 = distinct !{!801, !"__revmc_ir_builtin_mstore"}
!802 = !{!803}
!803 = distinct !{!803, !804, !"__revmc_ir_builtin_mstore: argument 0"}
!804 = distinct !{!804, !"__revmc_ir_builtin_mstore"}
!805 = !{!806}
!806 = distinct !{!806, !807, !"__revmc_ir_builtin_mstore: argument 0"}
!807 = distinct !{!807, !"__revmc_ir_builtin_mstore"}
!808 = !{!809, !811}
!809 = distinct !{!809, !810, !"__revmc_ir_builtin_mload: argument 0"}
!810 = distinct !{!810, !"__revmc_ir_builtin_mload"}
!811 = distinct !{!811, !810, !"__revmc_ir_builtin_mload: argument 1"}
!812 = !{!809}
!813 = !{!814}
!814 = distinct !{!814, !815, !"__revmc_ir_builtin_mstore: argument 0"}
!815 = distinct !{!815, !"__revmc_ir_builtin_mstore"}
!816 = !{!817}
!817 = distinct !{!817, !818, !"__revmc_ir_builtin_mstore: argument 0"}
!818 = distinct !{!818, !"__revmc_ir_builtin_mstore"}
!819 = !{!820}
!820 = distinct !{!820, !821, !"__revmc_ir_builtin_mstore: argument 0"}
!821 = distinct !{!821, !"__revmc_ir_builtin_mstore"}
!822 = !{!823}
!823 = distinct !{!823, !824, !"__revmc_ir_builtin_mstore: argument 0"}
!824 = distinct !{!824, !"__revmc_ir_builtin_mstore"}
!825 = !{!826}
!826 = distinct !{!826, !827, !"__revmc_ir_builtin_mstore: argument 0"}
!827 = distinct !{!827, !"__revmc_ir_builtin_mstore"}
!828 = !{!829}
!829 = distinct !{!829, !830, !"__revmc_ir_builtin_mstore: argument 0"}
!830 = distinct !{!830, !"__revmc_ir_builtin_mstore"}
!831 = !{!832}
!832 = distinct !{!832, !833, !"__revmc_ir_builtin_mload: argument 1"}
!833 = distinct !{!833, !"__revmc_ir_builtin_mload"}
!834 = !{!835}
!835 = distinct !{!835, !833, !"__revmc_ir_builtin_mload: argument 0"}
!836 = !{!835, !832}
!837 = !{!838}
!838 = distinct !{!838, !839, !"__revmc_ir_builtin_mload: argument 1"}
!839 = distinct !{!839, !"__revmc_ir_builtin_mload"}
!840 = !{!841}
!841 = distinct !{!841, !839, !"__revmc_ir_builtin_mload: argument 0"}
!842 = !{!841, !838}
!843 = !{!844, !846}
!844 = distinct !{!844, !845, !"__revmc_ir_builtin_mload: argument 0"}
!845 = distinct !{!845, !"__revmc_ir_builtin_mload"}
!846 = distinct !{!846, !845, !"__revmc_ir_builtin_mload: argument 1"}
!847 = !{!844}
!848 = !{!849}
!849 = distinct !{!849, !850, !"__revmc_ir_builtin_mstore: argument 0"}
!850 = distinct !{!850, !"__revmc_ir_builtin_mstore"}
!851 = !{!852}
!852 = distinct !{!852, !853, !"__revmc_ir_builtin_mstore: argument 0"}
!853 = distinct !{!853, !"__revmc_ir_builtin_mstore"}
!854 = !{!855}
!855 = distinct !{!855, !856, !"__revmc_ir_builtin_mstore: argument 0"}
!856 = distinct !{!856, !"__revmc_ir_builtin_mstore"}
!857 = !{!858}
!858 = distinct !{!858, !859, !"__revmc_ir_builtin_mstore: argument 0"}
!859 = distinct !{!859, !"__revmc_ir_builtin_mstore"}
!860 = !{!861}
!861 = distinct !{!861, !862, !"__revmc_ir_builtin_mstore: argument 0"}
!862 = distinct !{!862, !"__revmc_ir_builtin_mstore"}
!863 = !{!864, !866}
!864 = distinct !{!864, !865, !"__revmc_ir_builtin_mload: argument 0"}
!865 = distinct !{!865, !"__revmc_ir_builtin_mload"}
!866 = distinct !{!866, !865, !"__revmc_ir_builtin_mload: argument 1"}
!867 = !{!864}
!868 = !{!869}
!869 = distinct !{!869, !870, !"__revmc_ir_builtin_mstore: argument 0"}
!870 = distinct !{!870, !"__revmc_ir_builtin_mstore"}
!871 = !{!872}
!872 = distinct !{!872, !873, !"__revmc_ir_builtin_mstore: argument 0"}
!873 = distinct !{!873, !"__revmc_ir_builtin_mstore"}
!874 = !{!875}
!875 = distinct !{!875, !876, !"__revmc_ir_builtin_mload: argument 1"}
!876 = distinct !{!876, !"__revmc_ir_builtin_mload"}
!877 = !{!878}
!878 = distinct !{!878, !876, !"__revmc_ir_builtin_mload: argument 0"}
!879 = !{!878, !875}
!880 = !{!881, !883}
!881 = distinct !{!881, !882, !"__revmc_ir_builtin_mload: argument 0"}
!882 = distinct !{!882, !"__revmc_ir_builtin_mload"}
!883 = distinct !{!883, !882, !"__revmc_ir_builtin_mload: argument 1"}
!884 = !{!881}
!885 = !{!886}
!886 = distinct !{!886, !887, !"__revmc_ir_builtin_mstore: argument 0"}
!887 = distinct !{!887, !"__revmc_ir_builtin_mstore"}
!888 = !{!889}
!889 = distinct !{!889, !890, !"__revmc_ir_builtin_mload: argument 1"}
!890 = distinct !{!890, !"__revmc_ir_builtin_mload"}
!891 = !{!892}
!892 = distinct !{!892, !890, !"__revmc_ir_builtin_mload: argument 0"}
!893 = !{!892, !889}
!894 = !{!895, !897}
!895 = distinct !{!895, !896, !"__revmc_ir_builtin_mload: argument 0"}
!896 = distinct !{!896, !"__revmc_ir_builtin_mload"}
!897 = distinct !{!897, !896, !"__revmc_ir_builtin_mload: argument 1"}
!898 = !{!895}
!899 = !{!900}
!900 = distinct !{!900, !901, !"__revmc_ir_builtin_mstore: argument 0"}
!901 = distinct !{!901, !"__revmc_ir_builtin_mstore"}
!902 = !{!903}
!903 = distinct !{!903, !904, !"__revmc_ir_builtin_mstore: argument 0"}
!904 = distinct !{!904, !"__revmc_ir_builtin_mstore"}
!905 = !{!906}
!906 = distinct !{!906, !907, !"__revmc_ir_builtin_mstore: argument 0"}
!907 = distinct !{!907, !"__revmc_ir_builtin_mstore"}
!908 = !{!909}
!909 = distinct !{!909, !910, !"__revmc_ir_builtin_mstore: argument 0"}
!910 = distinct !{!910, !"__revmc_ir_builtin_mstore"}
!911 = !{!912}
!912 = distinct !{!912, !913, !"__revmc_ir_builtin_mload: argument 1"}
!913 = distinct !{!913, !"__revmc_ir_builtin_mload"}
!914 = !{!915}
!915 = distinct !{!915, !913, !"__revmc_ir_builtin_mload: argument 0"}
!916 = !{!915, !912}
!917 = !{!918}
!918 = distinct !{!918, !919, !"__revmc_ir_builtin_mstore: argument 0"}
!919 = distinct !{!919, !"__revmc_ir_builtin_mstore"}
!920 = !{!921}
!921 = distinct !{!921, !922, !"__revmc_ir_builtin_mstore: argument 0"}
!922 = distinct !{!922, !"__revmc_ir_builtin_mstore"}
!923 = !{!924}
!924 = distinct !{!924, !925, !"__revmc_ir_builtin_mstore: argument 0"}
!925 = distinct !{!925, !"__revmc_ir_builtin_mstore"}
!926 = !{!927}
!927 = distinct !{!927, !928, !"__revmc_ir_builtin_mstore: argument 0"}
!928 = distinct !{!928, !"__revmc_ir_builtin_mstore"}
!929 = !{!930}
!930 = distinct !{!930, !931, !"__revmc_ir_builtin_mload: argument 1"}
!931 = distinct !{!931, !"__revmc_ir_builtin_mload"}
!932 = !{!933}
!933 = distinct !{!933, !931, !"__revmc_ir_builtin_mload: argument 0"}
!934 = !{!933, !930}
!935 = !{!936, !938}
!936 = distinct !{!936, !937, !"__revmc_ir_builtin_mload: argument 0"}
!937 = distinct !{!937, !"__revmc_ir_builtin_mload"}
!938 = distinct !{!938, !937, !"__revmc_ir_builtin_mload: argument 1"}
!939 = !{!936}
!940 = !{!941}
!941 = distinct !{!941, !942, !"__revmc_ir_builtin_mstore: argument 0"}
!942 = distinct !{!942, !"__revmc_ir_builtin_mstore"}
!943 = !{!944}
!944 = distinct !{!944, !945, !"__revmc_ir_builtin_mstore: argument 0"}
!945 = distinct !{!945, !"__revmc_ir_builtin_mstore"}
!946 = !{!947}
!947 = distinct !{!947, !948, !"__revmc_ir_builtin_mstore: argument 0"}
!948 = distinct !{!948, !"__revmc_ir_builtin_mstore"}
!949 = !{!950, !952}
!950 = distinct !{!950, !951, !"__revmc_ir_builtin_mload: argument 0"}
!951 = distinct !{!951, !"__revmc_ir_builtin_mload"}
!952 = distinct !{!952, !951, !"__revmc_ir_builtin_mload: argument 1"}
!953 = !{!950}
!954 = !{!955}
!955 = distinct !{!955, !956, !"__revmc_ir_builtin_mstore: argument 0"}
!956 = distinct !{!956, !"__revmc_ir_builtin_mstore"}
!957 = !{!958}
!958 = distinct !{!958, !959, !"__revmc_ir_builtin_mload: argument 1"}
!959 = distinct !{!959, !"__revmc_ir_builtin_mload"}
!960 = !{!961}
!961 = distinct !{!961, !959, !"__revmc_ir_builtin_mload: argument 0"}
!962 = !{!961, !958}
!963 = !{!964, !966}
!964 = distinct !{!964, !965, !"__revmc_ir_builtin_mload: argument 0"}
!965 = distinct !{!965, !"__revmc_ir_builtin_mload"}
!966 = distinct !{!966, !965, !"__revmc_ir_builtin_mload: argument 1"}
!967 = !{!964}
!968 = !{!969}
!969 = distinct !{!969, !970, !"__revmc_ir_builtin_mstore: argument 0"}
!970 = distinct !{!970, !"__revmc_ir_builtin_mstore"}
!971 = !{!972}
!972 = distinct !{!972, !973, !"__revmc_ir_builtin_mstore: argument 0"}
!973 = distinct !{!973, !"__revmc_ir_builtin_mstore"}
!974 = !{!975}
!975 = distinct !{!975, !976, !"__revmc_ir_builtin_mstore: argument 0"}
!976 = distinct !{!976, !"__revmc_ir_builtin_mstore"}
!977 = !{!978}
!978 = distinct !{!978, !979, !"__revmc_ir_builtin_mstore: argument 0"}
!979 = distinct !{!979, !"__revmc_ir_builtin_mstore"}
!980 = !{!981}
!981 = distinct !{!981, !982, !"__revmc_ir_builtin_mstore: argument 0"}
!982 = distinct !{!982, !"__revmc_ir_builtin_mstore"}
!983 = !{!984}
!984 = distinct !{!984, !985, !"__revmc_ir_builtin_mstore: argument 0"}
!985 = distinct !{!985, !"__revmc_ir_builtin_mstore"}
!986 = !{!987}
!987 = distinct !{!987, !988, !"__revmc_ir_builtin_mstore: argument 0"}
!988 = distinct !{!988, !"__revmc_ir_builtin_mstore"}
!989 = !{!990, !992}
!990 = distinct !{!990, !991, !"__revmc_ir_builtin_mload: argument 0"}
!991 = distinct !{!991, !"__revmc_ir_builtin_mload"}
!992 = distinct !{!992, !991, !"__revmc_ir_builtin_mload: argument 1"}
!993 = !{!990}
!994 = !{!995}
!995 = distinct !{!995, !996, !"__revmc_ir_builtin_mstore: argument 0"}
!996 = distinct !{!996, !"__revmc_ir_builtin_mstore"}
!997 = !{!998, !1000}
!998 = distinct !{!998, !999, !"__revmc_ir_builtin_mload: argument 0"}
!999 = distinct !{!999, !"__revmc_ir_builtin_mload"}
!1000 = distinct !{!1000, !999, !"__revmc_ir_builtin_mload: argument 1"}
!1001 = !{!998}
!1002 = !{!1003}
!1003 = distinct !{!1003, !1004, !"__revmc_ir_builtin_mstore: argument 0"}
!1004 = distinct !{!1004, !"__revmc_ir_builtin_mstore"}
!1005 = !{!1006}
!1006 = distinct !{!1006, !1007, !"__revmc_ir_builtin_mstore: argument 0"}
!1007 = distinct !{!1007, !"__revmc_ir_builtin_mstore"}
!1008 = !{!1009}
!1009 = distinct !{!1009, !1010, !"__revmc_ir_builtin_mload: argument 1"}
!1010 = distinct !{!1010, !"__revmc_ir_builtin_mload"}
!1011 = !{!1012}
!1012 = distinct !{!1012, !1010, !"__revmc_ir_builtin_mload: argument 0"}
!1013 = !{!1012, !1009}
!1014 = !{!1015}
!1015 = distinct !{!1015, !1016, !"__revmc_ir_builtin_mload: argument 1"}
!1016 = distinct !{!1016, !"__revmc_ir_builtin_mload"}
!1017 = !{!1018}
!1018 = distinct !{!1018, !1016, !"__revmc_ir_builtin_mload: argument 0"}
!1019 = !{!1018, !1015}
!1020 = !{!1021}
!1021 = distinct !{!1021, !1022, !"__revmc_ir_builtin_mstore: argument 0"}
!1022 = distinct !{!1022, !"__revmc_ir_builtin_mstore"}
!1023 = !{!1024}
!1024 = distinct !{!1024, !1025, !"__revmc_ir_builtin_mload: argument 1"}
!1025 = distinct !{!1025, !"__revmc_ir_builtin_mload"}
!1026 = !{!1027}
!1027 = distinct !{!1027, !1025, !"__revmc_ir_builtin_mload: argument 0"}
!1028 = !{!1027, !1024}
!1029 = !{!1030}
!1030 = distinct !{!1030, !1031, !"__revmc_ir_builtin_mload: argument 1"}
!1031 = distinct !{!1031, !"__revmc_ir_builtin_mload"}
!1032 = !{!1033}
!1033 = distinct !{!1033, !1031, !"__revmc_ir_builtin_mload: argument 0"}
!1034 = !{!1033, !1030}
!1035 = !{!1036}
!1036 = distinct !{!1036, !1037, !"__revmc_ir_builtin_mstore: argument 0"}
!1037 = distinct !{!1037, !"__revmc_ir_builtin_mstore"}
!1038 = !{!"branch_weights", i32 1, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000}
!1039 = !{!1040}
!1040 = distinct !{!1040, !1041, !"__revmc_ir_builtin_mstore: argument 0"}
!1041 = distinct !{!1041, !"__revmc_ir_builtin_mstore"}
!1042 = !{!1043, !1045}
!1043 = distinct !{!1043, !1044, !"__revmc_ir_builtin_mload: argument 0"}
!1044 = distinct !{!1044, !"__revmc_ir_builtin_mload"}
!1045 = distinct !{!1045, !1044, !"__revmc_ir_builtin_mload: argument 1"}
!1046 = !{!1043}
!1047 = !{!1048}
!1048 = distinct !{!1048, !1049, !"__revmc_ir_builtin_mstore: argument 0"}
!1049 = distinct !{!1049, !"__revmc_ir_builtin_mstore"}
!1050 = !{!1051}
!1051 = distinct !{!1051, !1052, !"__revmc_ir_builtin_mload: argument 1"}
!1052 = distinct !{!1052, !"__revmc_ir_builtin_mload"}
!1053 = !{!1054}
!1054 = distinct !{!1054, !1052, !"__revmc_ir_builtin_mload: argument 0"}
!1055 = !{!1054, !1051}
!1056 = !{!1057}
!1057 = distinct !{!1057, !1058, !"__revmc_ir_builtin_mstore: argument 0"}
!1058 = distinct !{!1058, !"__revmc_ir_builtin_mstore"}
!1059 = !{!1060}
!1060 = distinct !{!1060, !1061, !"__revmc_ir_builtin_mload: argument 1"}
!1061 = distinct !{!1061, !"__revmc_ir_builtin_mload"}
!1062 = !{!1063}
!1063 = distinct !{!1063, !1061, !"__revmc_ir_builtin_mload: argument 0"}
!1064 = !{!1063, !1060}
!1065 = !{!1066, !1068}
!1066 = distinct !{!1066, !1067, !"__revmc_ir_builtin_mload: argument 0"}
!1067 = distinct !{!1067, !"__revmc_ir_builtin_mload"}
!1068 = distinct !{!1068, !1067, !"__revmc_ir_builtin_mload: argument 1"}
!1069 = !{!1066}
!1070 = !{!1071}
!1071 = distinct !{!1071, !1072, !"__revmc_ir_builtin_mstore: argument 0"}
!1072 = distinct !{!1072, !"__revmc_ir_builtin_mstore"}
!1073 = !{!1074}
!1074 = distinct !{!1074, !1075, !"__revmc_ir_builtin_mload: argument 1"}
!1075 = distinct !{!1075, !"__revmc_ir_builtin_mload"}
!1076 = !{!1077}
!1077 = distinct !{!1077, !1075, !"__revmc_ir_builtin_mload: argument 0"}
!1078 = !{!1077, !1074}
!1079 = !{!1080}
!1080 = distinct !{!1080, !1081, !"__revmc_ir_builtin_mstore: argument 0"}
!1081 = distinct !{!1081, !"__revmc_ir_builtin_mstore"}
!1082 = !{!1083}
!1083 = distinct !{!1083, !1084, !"__revmc_ir_builtin_mload: argument 1"}
!1084 = distinct !{!1084, !"__revmc_ir_builtin_mload"}
!1085 = !{!1086}
!1086 = distinct !{!1086, !1084, !"__revmc_ir_builtin_mload: argument 0"}
!1087 = !{!1086, !1083}
!1088 = !{!1089}
!1089 = distinct !{!1089, !1090, !"__revmc_ir_builtin_mstore: argument 0"}
!1090 = distinct !{!1090, !"__revmc_ir_builtin_mstore"}
!1091 = !{!1092}
!1092 = distinct !{!1092, !1093, !"__revmc_ir_builtin_mstore: argument 0"}
!1093 = distinct !{!1093, !"__revmc_ir_builtin_mstore"}
!1094 = !{!1095, !1097}
!1095 = distinct !{!1095, !1096, !"__revmc_ir_builtin_mload: argument 0"}
!1096 = distinct !{!1096, !"__revmc_ir_builtin_mload"}
!1097 = distinct !{!1097, !1096, !"__revmc_ir_builtin_mload: argument 1"}
!1098 = !{!1095}
!1099 = !{!1100}
!1100 = distinct !{!1100, !1101, !"__revmc_ir_builtin_mstore: argument 0"}
!1101 = distinct !{!1101, !"__revmc_ir_builtin_mstore"}
!1102 = !{!1103}
!1103 = distinct !{!1103, !1104, !"__revmc_ir_builtin_mload: argument 1"}
!1104 = distinct !{!1104, !"__revmc_ir_builtin_mload"}
!1105 = !{!1106}
!1106 = distinct !{!1106, !1104, !"__revmc_ir_builtin_mload: argument 0"}
!1107 = !{!1106, !1103}
!1108 = !{!1109, !1111}
!1109 = distinct !{!1109, !1110, !"__revmc_ir_builtin_mload: argument 0"}
!1110 = distinct !{!1110, !"__revmc_ir_builtin_mload"}
!1111 = distinct !{!1111, !1110, !"__revmc_ir_builtin_mload: argument 1"}
!1112 = !{!1109}
!1113 = !{!1114}
!1114 = distinct !{!1114, !1115, !"__revmc_ir_builtin_mstore: argument 0"}
!1115 = distinct !{!1115, !"__revmc_ir_builtin_mstore"}
!1116 = !{!1117}
!1117 = distinct !{!1117, !1118, !"__revmc_ir_builtin_mstore: argument 0"}
!1118 = distinct !{!1118, !"__revmc_ir_builtin_mstore"}
!1119 = !{!1120}
!1120 = distinct !{!1120, !1121, !"__revmc_ir_builtin_mstore: argument 0"}
!1121 = distinct !{!1121, !"__revmc_ir_builtin_mstore"}
!1122 = !{!1123}
!1123 = distinct !{!1123, !1124, !"__revmc_ir_builtin_mstore: argument 0"}
!1124 = distinct !{!1124, !"__revmc_ir_builtin_mstore"}
!1125 = !{!1126}
!1126 = distinct !{!1126, !1127, !"__revmc_ir_builtin_mstore: argument 0"}
!1127 = distinct !{!1127, !"__revmc_ir_builtin_mstore"}
!1128 = !{!1129}
!1129 = distinct !{!1129, !1130, !"__revmc_ir_builtin_mstore: argument 0"}
!1130 = distinct !{!1130, !"__revmc_ir_builtin_mstore"}
!1131 = !{!1132}
!1132 = distinct !{!1132, !1133, !"__revmc_ir_builtin_mstore: argument 0"}
!1133 = distinct !{!1133, !"__revmc_ir_builtin_mstore"}
!1134 = !{!1135}
!1135 = distinct !{!1135, !1136, !"__revmc_ir_builtin_mstore: argument 0"}
!1136 = distinct !{!1136, !"__revmc_ir_builtin_mstore"}
!1137 = !{!1138}
!1138 = distinct !{!1138, !1139, !"__revmc_ir_builtin_mstore: argument 0"}
!1139 = distinct !{!1139, !"__revmc_ir_builtin_mstore"}
!1140 = !{!1141, !1143}
!1141 = distinct !{!1141, !1142, !"__revmc_ir_builtin_mload: argument 0"}
!1142 = distinct !{!1142, !"__revmc_ir_builtin_mload"}
!1143 = distinct !{!1143, !1142, !"__revmc_ir_builtin_mload: argument 1"}
!1144 = !{!1141}
!1145 = !{!1146}
!1146 = distinct !{!1146, !1147, !"__revmc_ir_builtin_mstore: argument 0"}
!1147 = distinct !{!1147, !"__revmc_ir_builtin_mstore"}
!1148 = !{!1149}
!1149 = distinct !{!1149, !1150, !"__revmc_ir_builtin_mload: argument 1"}
!1150 = distinct !{!1150, !"__revmc_ir_builtin_mload"}
!1151 = !{!1152}
!1152 = distinct !{!1152, !1150, !"__revmc_ir_builtin_mload: argument 0"}
!1153 = !{!1152, !1149}
!1154 = !{!1155}
!1155 = distinct !{!1155, !1156, !"__revmc_ir_builtin_mstore: argument 0"}
!1156 = distinct !{!1156, !"__revmc_ir_builtin_mstore"}
!1157 = !{!1158}
!1158 = distinct !{!1158, !1159, !"__revmc_ir_builtin_mstore: argument 0"}
!1159 = distinct !{!1159, !"__revmc_ir_builtin_mstore"}
!1160 = !{!1161}
!1161 = distinct !{!1161, !1162, !"__revmc_ir_builtin_mstore: argument 0"}
!1162 = distinct !{!1162, !"__revmc_ir_builtin_mstore"}
!1163 = !{!1164}
!1164 = distinct !{!1164, !1165, !"__revmc_ir_builtin_mstore: argument 0"}
!1165 = distinct !{!1165, !"__revmc_ir_builtin_mstore"}
!1166 = !{!1167}
!1167 = distinct !{!1167, !1168, !"__revmc_ir_builtin_mstore: argument 0"}
!1168 = distinct !{!1168, !"__revmc_ir_builtin_mstore"}
!1169 = !{!1170}
!1170 = distinct !{!1170, !1171, !"__revmc_ir_builtin_mstore: argument 0"}
!1171 = distinct !{!1171, !"__revmc_ir_builtin_mstore"}
!1172 = !{!1173}
!1173 = distinct !{!1173, !1174, !"__revmc_ir_builtin_mstore: argument 0"}
!1174 = distinct !{!1174, !"__revmc_ir_builtin_mstore"}
!1175 = !{!1176}
!1176 = distinct !{!1176, !1177, !"__revmc_ir_builtin_mstore: argument 0"}
!1177 = distinct !{!1177, !"__revmc_ir_builtin_mstore"}
!1178 = !{!1179}
!1179 = distinct !{!1179, !1180, !"__revmc_ir_builtin_mstore: argument 0"}
!1180 = distinct !{!1180, !"__revmc_ir_builtin_mstore"}
!1181 = !{!1182}
!1182 = distinct !{!1182, !1183, !"__revmc_ir_builtin_mstore: argument 0"}
!1183 = distinct !{!1183, !"__revmc_ir_builtin_mstore"}
!1184 = !{!1185}
!1185 = distinct !{!1185, !1186, !"__revmc_ir_builtin_mstore: argument 0"}
!1186 = distinct !{!1186, !"__revmc_ir_builtin_mstore"}
!1187 = !{!1188}
!1188 = distinct !{!1188, !1189, !"__revmc_ir_builtin_mstore: argument 0"}
!1189 = distinct !{!1189, !"__revmc_ir_builtin_mstore"}
!1190 = !{!1191}
!1191 = distinct !{!1191, !1192, !"__revmc_ir_builtin_mstore: argument 0"}
!1192 = distinct !{!1192, !"__revmc_ir_builtin_mstore"}
!1193 = !{!1194}
!1194 = distinct !{!1194, !1195, !"__revmc_ir_builtin_mstore: argument 0"}
!1195 = distinct !{!1195, !"__revmc_ir_builtin_mstore"}
!1196 = !{!1197}
!1197 = distinct !{!1197, !1198, !"__revmc_ir_builtin_mstore: argument 0"}
!1198 = distinct !{!1198, !"__revmc_ir_builtin_mstore"}
!1199 = !{!1200}
!1200 = distinct !{!1200, !1201, !"__revmc_ir_builtin_mstore: argument 0"}
!1201 = distinct !{!1201, !"__revmc_ir_builtin_mstore"}
!1202 = !{!1203}
!1203 = distinct !{!1203, !1204, !"__revmc_ir_builtin_mstore: argument 0"}
!1204 = distinct !{!1204, !"__revmc_ir_builtin_mstore"}
!1205 = !{!1206}
!1206 = distinct !{!1206, !1207, !"__revmc_ir_builtin_mstore: argument 0"}
!1207 = distinct !{!1207, !"__revmc_ir_builtin_mstore"}
!1208 = !{!1209, !1211}
!1209 = distinct !{!1209, !1210, !"__revmc_ir_builtin_mload: argument 0"}
!1210 = distinct !{!1210, !"__revmc_ir_builtin_mload"}
!1211 = distinct !{!1211, !1210, !"__revmc_ir_builtin_mload: argument 1"}
!1212 = !{!1209}
!1213 = !{!1214}
!1214 = distinct !{!1214, !1215, !"__revmc_ir_builtin_mstore: argument 0"}
!1215 = distinct !{!1215, !"__revmc_ir_builtin_mstore"}
!1216 = !{!1217}
!1217 = distinct !{!1217, !1218, !"__revmc_ir_builtin_mload: argument 1"}
!1218 = distinct !{!1218, !"__revmc_ir_builtin_mload"}
!1219 = !{!1220}
!1220 = distinct !{!1220, !1218, !"__revmc_ir_builtin_mload: argument 0"}
!1221 = !{!1220, !1217}
!1222 = !{!1223}
!1223 = distinct !{!1223, !1224, !"__revmc_ir_builtin_mstore: argument 0"}
!1224 = distinct !{!1224, !"__revmc_ir_builtin_mstore"}
!1225 = !{!1226}
!1226 = distinct !{!1226, !1227, !"__revmc_ir_builtin_mstore: argument 0"}
!1227 = distinct !{!1227, !"__revmc_ir_builtin_mstore"}
!1228 = !{!1229}
!1229 = distinct !{!1229, !1230, !"__revmc_ir_builtin_mstore: argument 0"}
!1230 = distinct !{!1230, !"__revmc_ir_builtin_mstore"}
!1231 = !{!1232}
!1232 = distinct !{!1232, !1233, !"__revmc_ir_builtin_mstore: argument 0"}
!1233 = distinct !{!1233, !"__revmc_ir_builtin_mstore"}
!1234 = !{}
!1235 = !{!1236, !1238}
!1236 = distinct !{!1236, !1237, !"__revmc_ir_builtin_mload: argument 0"}
!1237 = distinct !{!1237, !"__revmc_ir_builtin_mload"}
!1238 = distinct !{!1238, !1237, !"__revmc_ir_builtin_mload: argument 1"}
!1239 = !{!1236}
!1240 = !{!1241}
!1241 = distinct !{!1241, !1242, !"__revmc_ir_builtin_mload: argument 1"}
!1242 = distinct !{!1242, !"__revmc_ir_builtin_mload"}
!1243 = !{!1244}
!1244 = distinct !{!1244, !1242, !"__revmc_ir_builtin_mload: argument 0"}
!1245 = !{!1244, !1241}
!1246 = !{!1247}
!1247 = distinct !{!1247, !1248, !"__revmc_ir_builtin_mstore: argument 0"}
!1248 = distinct !{!1248, !"__revmc_ir_builtin_mstore"}
!1249 = !{!1250}
!1250 = distinct !{!1250, !1251, !"__revmc_ir_builtin_mload: argument 1"}
!1251 = distinct !{!1251, !"__revmc_ir_builtin_mload"}
!1252 = !{!1253}
!1253 = distinct !{!1253, !1251, !"__revmc_ir_builtin_mload: argument 0"}
!1254 = !{!1253, !1250}
!1255 = !{!1256}
!1256 = distinct !{!1256, !1257, !"__revmc_ir_builtin_mstore: argument 0"}
!1257 = distinct !{!1257, !"__revmc_ir_builtin_mstore"}
!1258 = !{!1259}
!1259 = distinct !{!1259, !1260, !"__revmc_ir_builtin_mstore: argument 0"}
!1260 = distinct !{!1260, !"__revmc_ir_builtin_mstore"}
!1261 = !{!1262, !1264}
!1262 = distinct !{!1262, !1263, !"__revmc_ir_builtin_mload: argument 0"}
!1263 = distinct !{!1263, !"__revmc_ir_builtin_mload"}
!1264 = distinct !{!1264, !1263, !"__revmc_ir_builtin_mload: argument 1"}
!1265 = !{!1262}
!1266 = !{!1267}
!1267 = distinct !{!1267, !1268, !"__revmc_ir_builtin_mstore: argument 0"}
!1268 = distinct !{!1268, !"__revmc_ir_builtin_mstore"}
!1269 = !{!1270}
!1270 = distinct !{!1270, !1271, !"__revmc_ir_builtin_mstore: argument 0"}
!1271 = distinct !{!1271, !"__revmc_ir_builtin_mstore"}
!1272 = !{!1273}
!1273 = distinct !{!1273, !1274, !"__revmc_ir_builtin_mstore: argument 0"}
!1274 = distinct !{!1274, !"__revmc_ir_builtin_mstore"}
!1275 = !{!1276}
!1276 = distinct !{!1276, !1277, !"__revmc_ir_builtin_mstore: argument 0"}
!1277 = distinct !{!1277, !"__revmc_ir_builtin_mstore"}
!1278 = !{!1279}
!1279 = distinct !{!1279, !1280, !"__revmc_ir_builtin_mstore: argument 0"}
!1280 = distinct !{!1280, !"__revmc_ir_builtin_mstore"}
!1281 = !{!1282}
!1282 = distinct !{!1282, !1283, !"__revmc_ir_builtin_mstore: argument 0"}
!1283 = distinct !{!1283, !"__revmc_ir_builtin_mstore"}
!1284 = !{!1285}
!1285 = distinct !{!1285, !1286, !"__revmc_ir_builtin_mstore: argument 0"}
!1286 = distinct !{!1286, !"__revmc_ir_builtin_mstore"}
!1287 = !{!1288}
!1288 = distinct !{!1288, !1289, !"__revmc_ir_builtin_mstore: argument 0"}
!1289 = distinct !{!1289, !"__revmc_ir_builtin_mstore"}
!1290 = !{!1291}
!1291 = distinct !{!1291, !1292, !"__revmc_ir_builtin_mstore: argument 0"}
!1292 = distinct !{!1292, !"__revmc_ir_builtin_mstore"}
!1293 = !{!"branch_weights", i32 1, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000, i32 20000}
