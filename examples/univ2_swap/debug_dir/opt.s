	.text
	.intel_syntax noprefix
	.file	"evm"
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function univ2_pair
.LCPI0_0:
	.long	64                              # 0x40
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_1:
	.long	128                             # 0x80
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_19:
	.long	599                             # 0x257
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_20:
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_21:
	.long	12                              # 0xc
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_22:
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_23:
	.quad	32                              # 0x20
	.quad	0                               # 0x0
.LCPI0_24:
	.quad	17                              # 0x11
	.quad	0                               # 0x0
.LCPI0_26:
	.long	1895                            # 0x767
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_27:
	.long	8                               # 0x8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_28:
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_29:
	.quad	20                              # 0x14
	.quad	0                               # 0x0
.LCPI0_31:
	.long	10754                           # 0x2a02
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_32:
	.quad	8814                            # 0x226e
	.quad	0                               # 0x0
.LCPI0_33:
	.long	10517                           # 0x2915
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_34:
	.quad	10940                           # 0x2abc
	.quad	0                               # 0x0
.LCPI0_35:
	.long	10328                           # 0x2858
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_36:
	.long	10296                           # 0x2838
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_37:
	.long	10284                           # 0x282c
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_38:
	.quad	5                               # 0x5
	.quad	0                               # 0x0
.LCPI0_39:
	.quad	8680                            # 0x21e8
	.quad	0                               # 0x0
.LCPI0_40:
	.long	10259                           # 0x2813
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_41:
	.long	10244                           # 0x2804
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_42:
	.long	10213                           # 0x27e5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_43:
	.long	10200                           # 0x27d8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_44:
	.long	4695                            # 0x1257
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_45:
	.long	11                              # 0xb
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_47:
	.long	9859                            # 0x2683
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_48:
	.long	10                              # 0xa
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_49:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_50:
	.quad	10875                           # 0x2a7b
	.quad	0                               # 0x0
.LCPI0_51:
	.quad	21                              # 0x15
	.quad	0                               # 0x0
.LCPI0_54:
	.long	96                              # 0x60
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_55:
	.quad	26                              # 0x1a
	.quad	0                               # 0x0
.LCPI0_57:
	.long	7629                            # 0x1dcd
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_58:
	.quad	28                              # 0x1c
	.quad	0                               # 0x0
.LCPI0_60:
	.long	6179                            # 0x1823
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_61:
	.long	6117                            # 0x17e5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_62:
	.long	5795                            # 0x16a3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_63:
	.long	5784                            # 0x1698
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_64:
	.long	5773                            # 0x168d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_66:
	.long	10696                           # 0x29c8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_67:
	.quad	40                              # 0x28
	.quad	0                               # 0x0
.LCPI0_68:
	.long	5652                            # 0x1614
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_69:
	.long	5625                            # 0x15f9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_70:
	.long	5602                            # 0x15e2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_71:
	.long	6                               # 0x6
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_72:
	.long	7                               # 0x7
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_73:
	.long	1889567281                      # 0x70a08231
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_74:
	.long	4986                            # 0x137a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_75:
	.long	4924                            # 0x133c
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_77:
	.long	4912                            # 0x1330
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_78:
	.long	4715                            # 0x126b
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_79:
	.long	1000                            # 0x3e8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_80:
	.long	10461                           # 0x28dd
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_81:
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_82:
	.long	4810                            # 0x12ca
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_84:
	.long	4700                            # 0x125c
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_85:
	.long	3069                            # 0xbfd
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_86:
	.long	4659                            # 0x1233
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_87:
	.long	256                             # 0x100
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_88:
	.long	4645                            # 0x1225
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_91:
	.long	3300                            # 0xce4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_93:
	.long	9211                            # 0x23fb
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_97:
	.quad	19                              # 0x13
	.quad	0                               # 0x0
.LCPI0_99:
	.long	3177                            # 0xc69
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_100:
	.long	3161                            # 0xc59
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_101:
	.long	1000000                         # 0xf4240
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_102:
	.long	3149                            # 0xc4d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_103:
	.long	3105                            # 0xc21
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_104:
	.long	3051                            # 0xbeb
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_105:
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_106:
	.long	3081                            # 0xc09
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_107:
	.quad	36                              # 0x24
	.quad	0                               # 0x0
.LCPI0_108:
	.long	2256                            # 0x8d0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_109:
	.long	2273                            # 0x8e1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_110:
	.quad	25                              # 0x19
	.quad	0                               # 0x0
.LCPI0_112:
	.quad	68                              # 0x44
	.quad	0                               # 0x0
.LCPI0_115:
	.quad	33                              # 0x21
	.quad	0                               # 0x0
.LCPI0_116:
	.long	923                             # 0x39b
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_118:
	.quad	18                              # 0x12
	.quad	0                               # 0x0
.LCPI0_120:
	.quad	192                             # 0xc0
	.quad	0                               # 0x0
.LCPI0_122:
	.quad	290                             # 0x122
	.quad	0                               # 0x0
.LCPI0_123:
	.long	874                             # 0x36a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_126:
	.long	846                             # 0x34e
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_127:
	.long	3570                            # 0xdf2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_129:
	.long	734                             # 0x2de
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_130:
	.long	609                             # 0x261
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_135:
	.long	1024                            # 0x400
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_137:
	.long	3766                            # 0xeb6
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_138:
	.long	3827                            # 0xef3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_143:
	.long	9793                            # 0x2641
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_144:
	.long	1341                            # 0x53d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI0_151:
	.quad	37                              # 0x25
	.quad	0                               # 0x0
.LCPI0_152:
	.zero	16
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0
.LCPI0_2:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	-9223372036854775808            # 0x8000000000000000
.LCPI0_3:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3130686038                      # 0xba9a7a56
.LCPI0_4:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3524403367                      # 0xd21220a7
.LCPI0_5:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3573918927                      # 0xd505accf
.LCPI0_6:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3714247998                      # 0xdd62ed3e
.LCPI0_7:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4294363881                      # 0xfff6cae9
.LCPI0_8:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	599290589                       # 0x23b872dd
.LCPI0_9:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	910484757                       # 0x3644e515
.LCPI0_10:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1214040405                      # 0x485cc955
.LCPI0_11:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1493811413                      # 0x5909c0d5
.LCPI0_12:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1513968787                      # 0x5a3d5493
.LCPI0_13:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	157198259                       # 0x95ea7b3
.LCPI0_14:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	234755713                       # 0xdfe1681
.LCPI0_15:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	404098525                       # 0x18160ddd
.LCPI0_16:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	36441503                        # 0x22c0d9f
.LCPI0_17:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	117300739                       # 0x6fdde03
.LCPI0_18:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	151187884                       # 0x902f1ac
.LCPI0_25:
	.quad	0                               # 0x0
	.quad	4899916394579099648             # 0x4400000000000000
	.quad	3619240762665028421             # 0x323a204c4f434b45
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_30:
	.quad	0                               # 0x0
	.quad	7380396446245191680             # 0x666c6f7700000000
	.quad	7017844265656411506             # 0x6164642d6f766572
	.quad	7238178973924223021             # 0x64732d6d6174682d
.LCPI0_46:
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
	.quad	4294967295                      # 0xffffffff
	.quad	0                               # 0x0
.LCPI0_52:
	.quad	0                               # 0x0
	.quad	8243395393941929984             # 0x72666c6f77000000
	.quad	8319663834020078693             # 0x7375622d756e6465
	.quad	7238178973924223021             # 0x64732d6d6174682d
.LCPI0_53:
	.quad	0                               # 0x0
	.quad	7380396446245191680             # 0x666c6f7700000000
	.quad	7887329264808650098             # 0x6d756c2d6f766572
	.quad	7238178973924223021             # 0x64732d6d6174682d
.LCPI0_56:
	.quad	4991114287033352192             # 0x4544000000000000
	.quad	5063543925202045260             # 0x4645525f4641494c
	.quad	3619240797074968147             # 0x323a205452414e53
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_59:
	.quad	6076853728512573440             # 0x5455524500000000
	.quad	5279449474501398081             # 0x49445f5349474e41
	.quad	3619240749764591948             # 0x323a20494e56414c
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_65:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	72057594037927936               # 0x100000000000000
.LCPI0_76:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4797                            # 0x12bd
	.quad	0                               # 0x0
.LCPI0_83:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4756                            # 0x1294
	.quad	0                               # 0x0
.LCPI0_89:
	.quad	-2030788613450901470            # 0xe3d130840159d822
	.quad	-1867922683107231531            # 0xe613ce37657fb8d5
	.quad	7300846107913627487             # 0x6551d0da85fc275f
	.quad	-2915278803965273781            # 0xd78ad95fa46c994b
.LCPI0_90:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3619240757040250880             # 0x323a204b00000000
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_92:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	9253                            # 0x2425
.LCPI0_94:
	.quad	0                               # 0x0
	.quad	281474976710656                 # 0x1000000000000
	.quad	0                               # 0x0
	.quad	0                               # 0x0
.LCPI0_95:
	.quad	-1                              # 0xffffffffffffffff
	.quad	281474976710655                 # 0xffffffffffff
	.quad	0                               # 0x0
	.quad	0                               # 0x0
.LCPI0_96:
	.quad	444453016905169617              # 0x62b03a9fffbbad1
	.quad	-8510735993009347314            # 0x89e3cab4c78be50e
	.quad	2030879303627642798             # 0x1c2f21f7726b17ae
	.quad	2035942155853263140             # 0x1c411e9a96e07124
.LCPI0_98:
	.quad	0                               # 0x0
	.quad	5498709327554281472             # 0x4c4f570000000000
	.quad	3619240775667503686             # 0x323a204f56455246
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_111:
	.quad	2954361355555045376             # 0x2900000000000000
	.quad	3203582633060742454             # 0x2c75696e74323536
	.quad	2909717216836809587             # 0x2861646472657373
	.quad	8390876182755042674             # 0x7472616e73666572
.LCPI0_113:
	.quad	0                               # 0x0
	.quad	282191964                       # 0x10d1e85c
	.quad	0                               # 0x0
	.quad	0                               # 0x0
.LCPI0_114:
	.quad	0                               # 0x0
	.quad	5279449478892355584             # 0x49445f544f000000
	.quad	3619240749764591948             # 0x323a20494e56414c
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_117:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	144115188075855872              # 0x200000000000000
.LCPI0_119:
	.quad	0                               # 0x0
	.quad	4991114287033352192             # 0x4544000000000000
	.quad	3619240732752103762             # 0x323a204558504952
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_121:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1801721325924909056             # 0x1901000000000000
.LCPI0_124:
	.quad	0                               # 0x0
	.quad	4919132894305189888             # 0x4444454e00000000
	.quad	3619240736896205385             # 0x323a20464f524249
	.quad	6155973685307076694             # 0x556e697377617056
.LCPI0_125:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	-4294967296                     # 0xffffffff00000000
	.quad	-1                              # 0xffffffffffffffff
.LCPI0_128:
	.quad	6566260114167413029             # 0x5b200ac8c7c3b925
	.quad	-2521148547375421154            # 0xdd0314c0f7b2291e
	.quad	-3364345866241538829            # 0xd14f71427d1e84f3
	.quad	-8332818307897066149            # 0x8c5be1e5ebec7d5b
.LCPI0_131:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	720575940379279360              # 0xa00000000000000
.LCPI0_132:
	.quad	2337475372270579285             # 0x2070617773696e55
	.quad	12886                           # 0x3256
	.quad	0                               # 0x0
	.quad	0                               # 0x0
.LCPI0_133:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	816707615                       # 0x30adf81f
.LCPI0_134:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	826074471                       # 0x313ce567
.LCPI0_136:
	.quad	1629287684866385609             # 0x169c64845d6126c9
	.quad	6891346005080805706             # 0x5fa2faae0126114a
	.quad	5557266254805274640             # 0x4d1f60370fef1010
	.quad	7958403348434106751             # 0x6e71edae12b1b97f
.LCPI0_139:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2127478272                      # 0x7ecebe00
.LCPI0_140:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2309999428                      # 0x89afcb44
.LCPI0_141:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2514000705                      # 0x95d89b41
.LCPI0_142:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2835717307                      # 0xa9059cbb
.LCPI0_145:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	288230376151711744              # 0x400000000000000
.LCPI0_146:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1784838210                      # 0x6a627842
.LCPI0_147:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1889567281                      # 0x70a08231
.LCPI0_148:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1952775229                      # 0x7464fc3d
.LCPI0_149:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3156594551                      # 0xbc25cf77
.LCPI0_150:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3294232917                      # 0xc45a0155
.LCPI0_153:
	.zero	32
	.text
	.globl	univ2_pair
	.p2align	4, 0x90
	.type	univ2_pair,@function
univ2_pair:                             # @univ2_pair
# %bb.0:                                # %entry
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 2632
	mov	r11, r9
	mov	qword ptr [rbp - 328], rcx      # 8-byte Spill
	mov	r12, rsi
	mov	r9, rdi
	mov	rax, qword ptr [r11 + 32]
	test	rax, rax
	mov	qword ptr [rbp - 64], r11       # 8-byte Spill
	mov	qword ptr [rbp - 56], rsi       # 8-byte Spill
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	je	.LBB0_14
# %bb.1:                                # %resume
	mov	r13, qword ptr [rdx]
	jmp	rax
.Ltmp0:                                 # Block address taken
.LBB0_2:                                # %OP1293.ISZERO
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, rdx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_382
# %bb.3:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
.LBB0_4:                                # %OP1305.JUMPDEST
	add	r13, -4
.LBB0_5:                                # %OP1310.JUMPDEST
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	lea	r15, [r13 + 2]
	vmovdqu	ymmword ptr [r12 + r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.6:                                # %OP1313.MLOAD.contd
	add	r14, r12
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.7:                                # %OP1317.ADDRESS
	add	rbx, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 48]
	mov	rsi, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 120], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.8:                                # %OP1322.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14 + 32]
	vmovdqa	xmm1, xmmword ptr [r14 + 48]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 40], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.9:                                # %OP1323.MLOAD.contd
	mov	rsi, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	eax, dword ptr [r14 - 48]
	mov	rcx, qword ptr [r14 - 64]
	mov	rdx, qword ptr [r14 - 56]
	mov	r8, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14 + 16]
	mov	r10, qword ptr [r14 + 8]
	mov	r11, qword ptr [r14]
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	mov	qword ptr [r14 + 32], 1889567281
	mov	qword ptr [r14 + 40], 0
	mov	r15, r11
	add	r15, 36
	mov	qword ptr [r14 + 64], r15
	mov	r15, r10
	adc	r15, 0
	mov	qword ptr [r14 + 72], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [r14 + 80], r15
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [r14 + 88], r15
	mov	r15, qword ptr [rbx + 24]
	mov	rbx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 112], 0
	mov	qword ptr [r14 + 120], 0
	mov	qword ptr [r14 + 96], 32
	mov	qword ptr [r14 + 104], 0
	mov	qword ptr [r14 + 144], rbx
	mov	qword ptr [r14 + 152], r15
	mov	qword ptr [r14 + 128], rsi
	mov	qword ptr [r14 + 136], rdi
	sub	r11, rsi
	sbb	r10, rdi
	sbb	r9, rbx
	sbb	r8, r15
	add	r11, 36
	mov	qword ptr [r14 + 160], r11
	adc	r10, 0
	mov	qword ptr [r14 + 168], r10
	adc	r9, 0
	mov	qword ptr [r14 + 176], r9
	adc	r8, 0
	mov	qword ptr [r14 + 184], r8
	mov	qword ptr [r14 + 208], rbx
	mov	qword ptr [r14 + 216], r15
	mov	qword ptr [r14 + 192], rsi
	mov	qword ptr [r14 + 200], rdi
	mov	qword ptr [r14 + 224], rcx
	mov	qword ptr [r14 + 232], rdx
	mov	qword ptr [r14 + 240], rax
	mov	qword ptr [r14 + 248], 0
	mov	qword ptr [r14 + 256], rcx
	mov	qword ptr [r14 + 264], rdx
	add	r13, 9
	mov	qword ptr [r14 + 272], rax
	lea	rbx, [r14 + 256]
	mov	qword ptr [r14 + 280], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.10:                               # %OP1347.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_407
# %bb.11:
	mov	r11, r15
.LBB0_12:                               # %OP1355.JUMPDEST
	mov	rax, r13
	mov	rcx, qword ptr [rcx + 8]
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rcx
	mov	qword ptr [r12 + rax - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rax]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.13:
	lea	rax, [rip + .Ltmp1]
	jmp	.LBB0_1561
.LBB0_14:                               # %no_resume
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	mov	rbx, qword ptr [r11 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 95
	jbe	.LBB0_509
.LBB0_15:                               # %OP3.CALLVALUE
	mov	rax, qword ptr [rbx + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_2] # ymm0 = [0,0,0,9223372036854775808]
	vmovdqu	ymmword ptr [rax + r14 + 64], ymm0
	mov	rax, qword ptr [r8 + 120]
	mov	rcx, qword ptr [r8 + 112]
	mov	rdi, qword ptr [r8 + 96]
	mov	rsi, qword ptr [r8 + 104]
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	or	rsi, rax
	or	rdi, rcx
	xor	eax, eax
	or	rdi, rsi
	sete	al
	mov	qword ptr [r12 + 32], rax
	mov	qword ptr [r12 + 48], 0
	mov	qword ptr [r12 + 56], 0
	mov	qword ptr [r12 + 40], 0
	je	.LBB0_18
# %bb.16:                               # %OP8.PUSH1
	mov	rbx, rdx
	add	r12, 32
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, r11
	mov	rsi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB0_521
.LBB0_17:                               # %select.end
	mov	r13d, 1
	mov	rdx, rbx
	jmp	.LBB0_1577
.LBB0_18:
	mov	r13d, 1
.LBB0_19:                               # %OP11.JUMPDEST
	mov	r15, r11
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	rax, [r13 - 1]
	mov	rdx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rdx + 80]
	mov	r14, r13
	shl	r14, 5
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	mov	qword ptr [r12 + r14], r10
	mov	qword ptr [r12 + r14 + 24], 0
	vmovdqu	xmmword ptr [r12 + r14 - 24], xmm0
	mov	qword ptr [r12 + r14 - 8], 0
	cmp	r10, 4
	setb	cl
	mov	qword ptr [r12 + r14 - 32], rcx
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	jb	.LBB0_417
# %bb.20:                               # %OP18.PUSH1
	add	r14, r12
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r9, qword ptr [rdx + 72]
	sub	rsp, 8
	xor	ebx, ebx
	lea	rdi, [rbp - 2672]
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rcx, qword ptr [rbp - 2648]
	mov	rax, rcx
	shr	rax, 32
	mov	qword ptr [r14 - 32], rax
	mov	qword ptr [r14 - 16], 0
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 - 24], 0
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	mov	qword ptr [r14 + 32], 1784838210
	mov	qword ptr [r14 + 40], 0
	mov	rdx, rcx
	shr	rdx, 33
	xor	esi, esi
	cmp	rdx, 892419105
	setb	sil
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	cmp	edx, 892419105
	jae	.LBB0_77
# %bb.21:
	xor	ecx, ecx
	xor	edx, edx
	mov	r11, r15
.LBB0_22:                               # %OP123.JUMPDEST
	mov	rsi, r13
	shl	rsi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rsi + 40], xmm0
	mov	qword ptr [r12 + rsi + 56], 0
	cmp	rax, 599290589
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_8] # ymm1 = [0,0,0,599290589]
	vmovdqu	ymmword ptr [r12 + rsi + 8], ymm1
	mov	qword ptr [r12 + rsi], rdi
	jae	.LBB0_57
.LBB0_23:                               # %OP174.JUMPDEST
	mov	rsi, r13
	shl	rsi, 5
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [r12 + rsi + 40], xmm1
	mov	qword ptr [r12 + rsi + 56], 0
	cmp	rax, 157198259
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_13] # ymm0 = [0,0,0,157198259]
	vmovdqu	ymmword ptr [r12 + rsi + 8], ymm0
	mov	qword ptr [r12 + rsi], rdi
	jae	.LBB0_52
.LBB0_24:                               # %OP197.JUMPDEST
	or	rbx, rdx
	mov	rdx, r13
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rdx + 40], xmm0
	mov	qword ptr [r12 + rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 36441503
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_16] # ymm1 = [0,0,0,36441503]
	vmovdqu	ymmword ptr [r12 + rdx + 8], ymm1
	mov	qword ptr [r12 + rdx], rdi
	jne	.LBB0_44
.LBB0_25:                               # %OP217.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_19] # xmm0 = [599,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rcx + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r11
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r12 + rax + 64], rdx
	mov	qword ptr [r12 + rax + 80], r8
	mov	qword ptr [r12 + rax + 72], rdi
	mov	qword ptr [r12 + rax + 88], r9
	mov	qword ptr [r12 + rax + 128], rdx
	mov	qword ptr [r12 + rax + 144], r8
	mov	qword ptr [r12 + rax + 136], rdi
	mov	qword ptr [r12 + rax + 152], r9
	mov	r10d, 127
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r12 + rsi], rcx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_428
.LBB0_26:                               # %OP232.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	rbx, r13
	shl	rbx, 5
	mov	r15, qword ptr [r12 + rbx - 64]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + rbx - 56]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rax + rbx - 48]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rax + rbx - 40]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], r15
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 752]
	mov	rsi, r15
	mov	rdx, r12
	mov	rcx, r13
	mov	r8, r14
	push	r11
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 752]
	mov	rcx, qword ptr [rbp - 744]
	mov	rdx, qword ptr [rbp - 728]
	mov	rsi, qword ptr [rbp - 736]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 48], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 40], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rbx - 64], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx - 56], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 224], r15      # 8-byte Spill
	mov	qword ptr [rax + rbx], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 80], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 88], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 64], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 72], r12
	add	r15, 32
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 32], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 40], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 720]
	mov	rsi, r15
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 720]
	mov	rcx, qword ptr [rbp - 712]
	mov	rdx, qword ptr [rbp - 696]
	mov	rsi, qword ptr [rbp - 704]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [rdi + rbx - 32]
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rdi + rbx - 24]
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rdi + rbx - 8]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rdi + rbx - 16]
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rbx - 32], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx - 24], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 48], r9
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 56], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 32], r10
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 40], r8
	mov	eax, 4294967295
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + rbx + 80], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 88], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 64], -1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 72], -1
	add	qword ptr [rbp - 72], 5         # 8-byte Folded Spill
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 144], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, r14
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	mov	qword ptr [rax + rbx + 152], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rax + rbx + 128], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 136], r12
	mov	rsi, r14
	add	rsi, 64
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 120], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 104], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 2608]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2592]
	mov	rcx, qword ptr [rbp - 2608]
	mov	rdx, qword ptr [rbp - 2600]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx + 8], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rbx + 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	add	rcx, r14
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rdx, r12
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	adc	rsi, r13
	mov	r8, qword ptr [rbp - 112]       # 8-byte Reload
	adc	r15, r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 56], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 48], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 72], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 80], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 64], r14
	mov	rax, r14
	add	rax, 128
	mov	rcx, r12
	adc	rcx, 0
	mov	rdx, r13
	adc	rdx, 0
	mov	rsi, r8
	adc	rsi, 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 120], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx + 104], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + rbx + 112], rdx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + rbx + 96], rax
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	shl	r15, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r13
	add	r14, 96
	adc	r12, 0
	adc	r13, 0
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 136], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 128], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 144], r13
	sub	rsp, 8
	lea	rdi, [rbp - 688]
	mov	rsi, r14
	mov	rdx, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, r13
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 664]
	mov	rcx, qword ptr [rbp - 688]
	mov	rdx, qword ptr [rbp - 680]
	mov	rsi, qword ptr [rbp - 672]
	mov	qword ptr [r12 + rbx + 144], rsi
	mov	qword ptr [r12 + rbx + 128], rcx
	mov	qword ptr [r12 + rbx + 152], rax
	mov	qword ptr [r12 + rbx + 136], rdx
	mov	qword ptr [r12 + rbx + 208], rsi
	mov	qword ptr [r12 + rbx + 192], rcx
	mov	qword ptr [r12 + rbx + 216], rax
	mov	qword ptr [r12 + rbx + 200], rdx
	movabs	rdi, 4294967297
	cmp	rcx, rdi
	sbb	rdx, 0
	sbb	rsi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r12 + r15], rax
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15 + 8], 0
	mov	qword ptr [r12 + r15 + 24], 0
	jae	.LBB0_416
# %bb.27:
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB0_28:                               # %OP268.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	r9, qword ptr [r12 + rax - 8]
	mov	rdx, qword ptr [r12 + rax - 24]
	mov	rsi, qword ptr [r12 + rax - 32]
	add	rsi, qword ptr [r12 + rax - 96]
	adc	rdx, qword ptr [r12 + rax - 88]
	mov	rcx, qword ptr [r12 + rax - 16]
	adc	rcx, qword ptr [r12 + rax - 80]
	adc	r9, qword ptr [r12 + rax - 72]
	mov	qword ptr [r12 + rax - 32], rsi
	mov	qword ptr [r12 + rax - 24], rdx
	mov	qword ptr [r12 + rax - 16], rcx
	mov	qword ptr [r12 + rax - 8], r9
	mov	rdi, qword ptr [r12 + rax - 104]
	mov	r15, qword ptr [r12 + rax - 112]
	mov	r14, qword ptr [r12 + rax - 128]
	mov	r13, qword ptr [r12 + rax - 120]
	mov	qword ptr [r12 + rax + 64], rsi
	mov	qword ptr [r12 + rax + 72], rdx
	mov	qword ptr [r12 + rax + 80], rcx
	mov	qword ptr [r12 + rax + 88], r9
	mov	r11, rsi
	add	r11, 32
	mov	r10, rdx
	adc	r10, 0
	mov	rbx, rcx
	adc	rbx, 0
	mov	r8, r9
	adc	r8, 0
	mov	qword ptr [r12 + rax + 32], r11
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	cmp	r14, r11
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	sbb	r13, r10
	mov	qword ptr [r12 + rax + 40], r10
	mov	r10, r15
	sbb	r10, rbx
	mov	qword ptr [r12 + rax + 48], rbx
	mov	r10, rdi
	sbb	r10, r8
	mov	qword ptr [r12 + rax + 56], r8
	setae	r8b
	movzx	r8d, r8b
	mov	qword ptr [r12 + rax], r8
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax + 24], 0
	jb	.LBB0_420
# %bb.29:
	mov	qword ptr [rbp - 128], r15      # 8-byte Spill
	mov	qword ptr [rbp - 224], rdi      # 8-byte Spill
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB0_30:                               # %OP282.JUMPDEST
	lea	rax, [r13 + 1]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	shl	r13, 5
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + r13 + 8], rdx
	mov	qword ptr [r12 + r13], rsi
	mov	qword ptr [r12 + r13 + 16], rcx
	mov	qword ptr [r12 + r13 + 24], r9
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8, r9
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 656]
	push	qword ptr [rax + 80]
	mov	r15, rdx
	mov	rbx, rsi
	mov	r14, rcx
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 656]
	mov	rcx, qword ptr [rbp - 648]
	mov	rdx, qword ptr [rbp - 640]
	mov	rdi, qword ptr [rbp - 632]
	mov	qword ptr [r12 + r13 - 8], rdi
	mov	qword ptr [r12 + r13 - 16], rdx
	mov	qword ptr [r12 + r13 - 24], rcx
	mov	qword ptr [r12 + r13 - 32], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	shl	rsi, 5
	add	rbx, 32
	adc	r15, 0
	adc	r14, 0
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	adc	r9, 0
	mov	r8, qword ptr [r12 + r13 - 40]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	qword ptr [r12 + r13 - 40], r9
	mov	r8, qword ptr [r12 + r13 - 48]
	mov	qword ptr [r12 + r13 - 48], r14
	mov	r10, qword ptr [r12 + r13 - 56]
	mov	qword ptr [r12 + r13 - 56], r15
	mov	r11, qword ptr [r12 + r13 - 64]
	mov	qword ptr [r12 + r13 - 64], rbx
	add	rbx, rax
	adc	r15, rcx
	adc	r14, rdx
	adc	r9, rdi
	cmp	qword ptr [rbp - 88], rbx       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 80], r15       # 8-byte Folded Spill
	sbb	qword ptr [rbp - 128], r14      # 8-byte Folded Spill
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r12 + r13 + 24], rbx
	mov	qword ptr [r12 + r13 + 16], r8
	mov	qword ptr [r12 + r13 + 8], r10
	mov	qword ptr [r12 + r13], r11
	sbb	qword ptr [rbp - 224], r9       # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	sbb	r10, rdi
	mov	qword ptr [r12 + r13 + 120], rdi
	mov	qword ptr [r12 + r13 + 112], rdx
	mov	qword ptr [r12 + r13 + 104], rcx
	mov	qword ptr [r12 + r13 + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r12 + r13 + 64], rax
	mov	qword ptr [r12 + r13 + 88], 0
	mov	qword ptr [r12 + r13 + 80], 0
	mov	qword ptr [r12 + r13 + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r12 + rsi + 8], xmm0
	mov	qword ptr [r12 + rsi], rax
	mov	qword ptr [r12 + rsi + 24], 0
	test	al, al
	je	.LBB0_419
# %bb.31:
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB0_32:                               # %OP306.JUMPDEST
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [r12 + rcx - 64]
	vmovdqa	xmm1, xmmword ptr [r12 + rcx - 48]
	vmovaps	xmm2, xmmword ptr [r12 + rcx - 96]
	vmovaps	xmm3, xmmword ptr [r12 + rcx - 80]
	vmovaps	xmm4, xmmword ptr [r12 + rcx - 160]
	vmovaps	xmm5, xmmword ptr [r12 + rcx - 144]
	vmovaps	xmm6, xmmword ptr [r12 + rcx - 128]
	vmovaps	xmm7, xmmword ptr [r12 + rcx - 112]
	vmovaps	xmmword ptr [r12 + rcx - 144], xmm3
	vmovaps	xmmword ptr [r12 + rcx - 160], xmm2
	vmovaps	xmmword ptr [r12 + rcx - 48], xmm5
	vmovaps	xmmword ptr [r12 + rcx - 64], xmm4
	vmovdqa	xmmword ptr [r12 + rcx - 112], xmm1
	vmovaps	xmmword ptr [r12 + rcx - 128], xmm0
	vmovaps	xmmword ptr [r12 + rcx - 80], xmm7
	vmovaps	xmmword ptr [r12 + rcx - 96], xmm6
	add	r13, -3
.LBB0_33:                               # %OP922.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r13, 5
	lea	rbx, [r12 + r13]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	r13, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1655
# %bb.34:                               # %OP925.PUSH1
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	vpxor	ymm0, ymm0, ymmword ptr [rbx]
	xor	eax, eax
	vptest	ymm0, ymm0
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jne	.LBB0_432
# %bb.35:
	mov	r11, r13
	mov	r13, r14
.LBB0_36:                               # %OP960.JUMPDEST
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r15, r14
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovups	ymmword ptr [r12 + r15], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.37:                               # %OP964.DUP5
	add	r15, r12
	mov	rax, qword ptr [rbx - 160]
	mov	rcx, qword ptr [rbx - 152]
	or	rcx, qword ptr [rbx - 136]
	or	rax, qword ptr [rbx - 144]
	xor	edx, edx
	or	rax, rcx
	setne	dl
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	jne	.LBB0_39
# %bb.38:                               # %OP970.POP
	mov	rax, qword ptr [rbx - 104]
	mov	rcx, qword ptr [rbx - 128]
	mov	rdx, qword ptr [rbx - 120]
	mov	rsi, qword ptr [rbx - 112]
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rdx
	or	rdx, rax
	or	rcx, rsi
	xor	eax, eax
	or	rcx, rdx
	setne	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
.LBB0_39:                               # %OP974.JUMPDEST
	lea	r13, [r14 - 1]
	mov	r15, r13
	shl	r13, 5
	mov	rax, qword ptr [r12 + r13]
	mov	rcx, qword ptr [r12 + r13 + 8]
	or	rcx, qword ptr [r12 + r13 + 24]
	or	rax, qword ptr [r12 + r13 + 16]
	or	rax, rcx
	je	.LBB0_421
# %bb.40:
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, r15
.LBB0_41:                               # %OP1015.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_26] # xmm0 = [1895,0,0,0]
	vmovups	ymmword ptr [r12 + rax + 64], ymm0
.LBB0_42:                               # %OP1770.JUMPDEST
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_27] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r15, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.43:                               # %OP1773.PUSH14
	mov	r9, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	r11b, 48
	bzhi	rdi, r8, r11
	mov	rax, qword ptr [rbx - 16]
	mov	rsi, qword ptr [rbx - 8]
	mov	rdx, qword ptr [rbx - 24]
	mov	qword ptr [rbx - 24], rdi
	mov	rdi, qword ptr [rbx - 32]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx - 16], xmm0
	mov	qword ptr [rbx - 32], r10
	mov	qword ptr [rbx + 128], r10
	mov	qword ptr [rbx + 144], r9
	mov	qword ptr [rbx + 136], r8
	shrd	r8, r9, 48
	shrd	r9, rcx, 48
	bzhi	r9, r9, r11
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	vmovaps	xmm1, xmmword ptr [rip + .LCPI0_28] # xmm1 = [4294967295,0,0,0]
	vmovups	ymmword ptr [rbx + 96], ymm1
	shl	r14, 5
	shr	rcx, 32
	mov	qword ptr [r12 + r14], rcx
	add	r13, 2
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	mov	qword ptr [r12 + r14 + 24], 0
	mov	r14, rax
	mov	rax, rdx
	mov	rcx, r13
	shl	rcx, 5
	mov	qword ptr [r12 + rcx + 8], rdx
	mov	qword ptr [r12 + rcx], rdi
	mov	qword ptr [r12 + rcx + 24], rsi
	mov	qword ptr [r12 + rcx + 16], r14
	mov	rcx, rdi
	mov	r11, r15
	jmp	.LBB0_1546
.LBB0_44:                               # %OP203.DUP1
	add	rdx, r12
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 117300739
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_17] # ymm0 = [0,0,0,117300739]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	jne	.LBB0_89
.LBB0_45:                               # %OP317.JUMPDEST
	lea	rcx, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_130] # xmm0 = [609,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	r13, rcx
.LBB0_46:                               # %OP1750.JUMPDEST
	lea	rsi, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	lea	r9, [r12 + rax]
	mov	r15, qword ptr [r11 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	mov	rdi, r15
	cmp	rax, 95
	mov	rdx, r12
	mov	rcx, r13
	jbe	.LBB0_524
.LBB0_47:                               # %OP1752.MLOAD.contd
	mov	rax, qword ptr [r15 + 8]
	mov	r12, qword ptr [rax + r14 + 88]
	mov	r15, qword ptr [rax + r14 + 80]
	mov	r13, qword ptr [rax + r14 + 64]
	mov	r14, qword ptr [rax + r14 + 72]
	movbe	qword ptr [r9], r12
	bswap	r12
	movbe	qword ptr [r9 + 16], r14
	bswap	r14
	movbe	qword ptr [r9 + 24], r13
	bswap	r13
	movbe	qword ptr [r9 + 8], r15
	bswap	r15
	add	rcx, 2
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	rax, rsi
	shl	rax, 5
	lea	r10, [rdx + rax]
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	shl	rcx, 5
	lea	r11, [rdx + rcx]
	add	r12, 64
	adc	r15, 0
	adc	r14, 0
	adc	r13, 0
	mov	qword ptr [rdx + rax], r12
	mov	qword ptr [rdx + rax + 16], r14
	mov	qword ptr [rdx + rax + 8], r15
	mov	qword ptr [rdx + rax + 24], r13
	mov	qword ptr [rdx + rcx + 16], 0
	mov	qword ptr [rdx + rcx], 64
	mov	qword ptr [rdx + rcx + 24], 0
	mov	qword ptr [rdx + rcx + 8], 0
	mov	rax, qword ptr [rdi + 16]
	mov	rbx, qword ptr [rdi + 48]
	sub	rax, rbx
	cmp	rax, 95
	jbe	.LBB0_692
.LBB0_48:                               # %OP1758.DUP1
	mov	rax, qword ptr [rdi + 8]
	movbe	qword ptr [rax + rbx + 88], r12
	movbe	qword ptr [rax + rbx + 80], r15
	movbe	qword ptr [rax + rbx + 72], r14
	movbe	qword ptr [rax + rbx + 64], r13
	mov	rax, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9]
	mov	rdx, qword ptr [r9 + 8]
	mov	rcx, qword ptr [r9 + 24]
	mov	qword ptr [r10 + 24], rcx
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rax
	mov	qword ptr [r10], r14
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 10
	mov	qword ptr [r9 + 120], rcx
	mov	qword ptr [r9 + 104], rdx
	mov	qword ptr [r9 + 112], rax
	mov	qword ptr [r9 + 96], r14
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, qword ptr [rbx + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rdi, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r12, -1
	cmovb	rsi, r12
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r8, rcx
	cmovb	rsi, r12
	cmp	rsi, rdi
	ja	.LBB0_715
.LBB0_49:                               # %OP1762.PUSH1
	add	r13, qword ptr [r15 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_131] # ymm0 = [0,0,0,720575940379279360]
	vmovups	ymmword ptr [r14 + r13], ymm0
	mov	rax, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10]
	mov	rdx, qword ptr [r10 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r10], r15
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 24], rax
	movabs	rsi, 6211026836097335296
	mov	qword ptr [r11 + 16], rsi
	movabs	rsi, 6155973685307076640
	mov	qword ptr [r11 + 24], rsi
	mov	qword ptr [r11], 0
	mov	qword ptr [r11 + 8], 0
	mov	qword ptr [r9 + 112], rcx
	mov	qword ptr [r9 + 96], r15
	mov	qword ptr [r9 + 120], rax
	mov	qword ptr [r9 + 104], rdx
	mov	r14, qword ptr [rbx + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r12
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r12
	cmp	rsi, rdi
	ja	.LBB0_526
.LBB0_50:                               # %OP1767.POP
	add	r13, qword ptr [r14 + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_132] # ymm0 = [2337475372270579285,12886,0,0]
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	mov	r14, qword ptr [r9 - 16]
	mov	rcx, qword ptr [r9 - 32]
	mov	rax, qword ptr [r9 - 24]
	mov	rsi, qword ptr [r9 - 8]
	mov	qword ptr [r10 + 24], rsi
	mov	qword ptr [r10 + 8], rax
	mov	qword ptr [r10 + 16], r14
	mov	qword ptr [r10], rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB0_51
.LBB0_52:                               # %OP180.DUP1
	add	rsi, r12
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdi, rax
	xor	rdi, 157198259
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	jne	.LBB0_91
.LBB0_53:                               # %OP459.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_126] # xmm0 = [846,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rbx, qword ptr [rcx + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, rbx
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r12 + rax + 64], rdx
	mov	qword ptr [r12 + rax + 80], r8
	mov	qword ptr [r12 + rax + 72], rdi
	mov	qword ptr [r12 + rax + 88], r9
	mov	qword ptr [r12 + rax + 128], rdx
	mov	qword ptr [r12 + rax + 144], r8
	mov	qword ptr [r12 + rax + 136], rdi
	mov	qword ptr [r12 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r12 + rsi], rcx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_654
# %bb.54:
	mov	r10, rbx
.LBB0_55:                               # %OP474.JUMPDEST
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r12 + r13 - 32], ymm0
	mov	rbx, qword ptr [r12 + r13 - 64]
	mov	r14, qword ptr [r12 + r13 - 56]
	mov	r15, qword ptr [r12 + r13 - 48]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + r13 - 40]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rbx
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 2448]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	mov	r8, r12
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	edx, dword ptr [rbp - 2432]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	rcx, qword ptr [rbp - 2448]
	mov	r8, qword ptr [rbp - 2440]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 48], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], 32
	add	rbx, 32
	adc	r14, 0
	adc	r15, 0
	adc	r12, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 432]
	mov	rsi, rbx
	mov	rbx, rcx
	mov	rdx, r14
	mov	r14, r8
	mov	rcx, r15
	xor	r15d, r15d
	mov	r8, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 408]
	mov	rdx, qword ptr [rbp - 416]
	mov	rsi, qword ptr [rbp - 432]
	mov	rcx, qword ptr [rbp - 424]
	mov	qword ptr [r12 + r13 - 16], rdx
	mov	qword ptr [r12 + r13 - 8], rax
	mov	qword ptr [r12 + r13 - 32], rsi
	mov	qword ptr [r12 + r13 - 24], rcx
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
.LBB0_56:                               # %OP1792.JUMPDEST
	mov	rdi, r13
	shl	rdi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rdi], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_127] # xmm0 = [3570,0,0,0]
	vmovdqu	ymmword ptr [r12 + rdi + 32], ymm0
	mov	r8d, dword ptr [r10 + 164]
	movbe	r9, qword ptr [r10 + 156]
	bswap	r8
	shrd	r8, r9, 32
	movbe	r10, qword ptr [r10 + 148]
	shrd	r9, r10, 32
	shr	r10, 32
	mov	qword ptr [r12 + rdi + 80], r10
	mov	qword ptr [r12 + rdi + 72], r9
	mov	qword ptr [r12 + rdi + 64], r8
	mov	qword ptr [r12 + rdi + 88], 0
	mov	qword ptr [r12 + rdi + 112], r11
	mov	qword ptr [r12 + rdi + 120], r15
	mov	qword ptr [r12 + rdi + 96], rbx
	mov	qword ptr [r12 + rdi + 104], r14
	mov	qword ptr [r12 + rdi + 144], rdx
	mov	qword ptr [r12 + rdi + 152], rax
	mov	qword ptr [r12 + rdi + 128], rsi
	mov	qword ptr [r12 + rdi + 136], rcx
	add	r13, 5
	jmp	.LBB0_301
.LBB0_57:                               # %OP129.DUP1
	add	rsi, r12
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	cmp	rax, 910484757
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_9] # ymm0 = [0,0,0,910484757]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jae	.LBB0_96
.LBB0_58:                               # %OP156.JUMPDEST
	or	rbx, rdx
	mov	rdx, r13
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rdx + 40], xmm0
	mov	qword ptr [r12 + rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 599290589
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_8] # ymm1 = [0,0,0,599290589]
	vmovdqu	ymmword ptr [r12 + rdx + 8], ymm1
	mov	qword ptr [r12 + rdx], rdi
	jne	.LBB0_104
.LBB0_59:                               # %OP547.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_126] # xmm0 = [846,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rbx, qword ptr [rcx + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, rbx
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r12 + rax + 64], rdx
	mov	qword ptr [r12 + rax + 80], r8
	mov	qword ptr [r12 + rax + 72], rdi
	mov	qword ptr [r12 + rax + 88], r9
	mov	qword ptr [r12 + rax + 128], rdx
	mov	qword ptr [r12 + rax + 144], r8
	mov	qword ptr [r12 + rax + 136], rdi
	mov	qword ptr [r12 + rax + 152], r9
	mov	r10d, 95
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r12 + rsi], rcx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_654
.LBB0_60:                               # %OP562.JUMPDEST
	mov	rax, r13
	shl	r13, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r12 + r13 - 32], ymm0
	inc	rax
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rsi, qword ptr [r12 + r13 - 64]
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	r14, qword ptr [r12 + r13 - 56]
	mov	r15, qword ptr [r12 + r13 - 48]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + r13 - 40]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rsi
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 2416]
	mov	rdx, r14
	mov	rcx, r15
	mov	r8, r12
	push	rbx
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2400]
	mov	rcx, qword ptr [rbp - 2416]
	mov	rdx, qword ptr [rbp - 2408]
	mov	r10, rbx
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	shl	rbx, 5
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r13 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r13 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax + r13], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 88], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 80], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 64], rsi
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r15
	adc	rcx, 0
	mov	r8, r12
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 2384]
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	r10
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2368]
	mov	rcx, qword ptr [rbp - 2384]
	mov	rdx, qword ptr [rbp - 2376]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r13 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r13 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], 64
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], 0
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	add	rsi, 64
	adc	r14, 0
	adc	r15, 0
	adc	r12, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 400]
	mov	rdx, r14
	mov	rcx, r15
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r8, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 400]
	mov	rcx, qword ptr [rbp - 392]
	mov	rdx, qword ptr [rbp - 376]
	mov	rsi, qword ptr [rbp - 384]
	mov	qword ptr [r12 + r13 + 16], rsi
	mov	qword ptr [r12 + r13 + 24], rdx
	mov	qword ptr [r12 + r13], rax
	mov	qword ptr [r12 + r13 + 8], rcx
.LBB0_61:                               # %OP1821.JUMPDEST
	lea	rsi, [r15 + 1]
	mov	rax, r15
	shl	rax, 5
	lea	rcx, [r12 + rax]
	mov	qword ptr [rbp - 128], rcx      # 8-byte Spill
	lea	rdx, [r15 + 2]
	mov	r8d, dword ptr [r12 + rax - 80]
	mov	r9, qword ptr [r12 + rax - 96]
	mov	r10, qword ptr [r12 + rax - 88]
	mov	qword ptr [rbp - 248], rsi      # 8-byte Spill
	mov	rcx, rsi
	shl	rcx, 5
	lea	rbx, [r12 + rcx]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	qword ptr [r12 + rcx + 8], r10
	mov	qword ptr [r12 + rcx + 16], r8
	mov	qword ptr [r12 + rcx], r9
	mov	qword ptr [r12 + rcx + 24], 0
	lea	rsi, [r15 + 3]
	mov	qword ptr [rbp - 240], rdx      # 8-byte Spill
	mov	rax, rdx
	shl	rax, 5
	lea	rcx, [r12 + rax]
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	qword ptr [r12 + rax], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r13, r15
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 31
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 288], rsi      # 8-byte Spill
	jbe	.LBB0_529
.LBB0_62:                               # %OP1829.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + r15 + 24], r9
	movbe	qword ptr [rax + r15 + 16], r10
	movbe	qword ptr [rax + r15 + 8], r8
	mov	qword ptr [rax + r15], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_81] # xmm1 = [2,0,0,0]
	vmovdqu	ymmword ptr [rcx], ymm1
	lea	r9, [r13 + 4]
	mov	rax, rsi
	shl	rax, 5
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	lea	rsi, [r12 + rax]
	mov	rbx, qword ptr [rdi + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 63
	mov	r15, r13
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	jbe	.LBB0_531
.LBB0_63:                               # %OP1834.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_117] # ymm0 = [0,0,0,144115188075855872]
	vmovups	ymmword ptr [rax + r14 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqu	ymmword ptr [rsi], ymm0
	mov	r14, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	r8, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	r13, r9
	shl	r13, 5
	mov	qword ptr [r12 + r13 + 24], r8
	mov	qword ptr [r12 + r13 + 8], rdx
	mov	qword ptr [r12 + r13 + 16], rax
	mov	qword ptr [r12 + r13], rcx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_693
# %bb.64:                               # %OP1838.CALLER
	add	r15, 5
	add	r13, r12
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	rax, qword ptr [rcx + 156]
	mov	r11d, dword ptr [rcx + 164]
	movbe	rcx, qword ptr [rcx + 148]
	mov	rdx, rcx
	shld	rdx, rax, 32
	bswap	r11
	shrd	r11, rax, 32
	shr	rcx, 32
	mov	qword ptr [rbp - 224], rcx      # 8-byte Spill
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], r11
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [rbp - 280], r13      # 8-byte Spill
	mov	qword ptr [r13 + 24], 0
	mov	r10, r12
	mov	r12, qword ptr [r14]
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	mov	rdi, r15
	shl	rdi, 5
	mov	qword ptr [r10 + rdi + 24], rdx
	mov	qword ptr [r10 + rdi + 8], rcx
	mov	qword ptr [r10 + rdi + 16], rax
	mov	qword ptr [r10 + rdi], r12
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	r8, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	r8, rbx
	mov	rsi, r12
	add	rsi, 32
	mov	r13, -1
	cmovb	rsi, r13
	xor	r9d, r9d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r9, rdx
	lea	rax, [r10 + rdi]
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	cmovb	rsi, r13
	cmp	rsi, r8
	ja	.LBB0_532
.LBB0_65:                               # %OP1841.SWAP1
	add	rbx, qword ptr [r15 + 8]
	movbe	qword ptr [r12 + rbx + 24], r11
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 16], rax
	xor	ecx, ecx
	mov	qword ptr [rbp - 256], rcx      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 224]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 8], rcx
	mov	qword ptr [r12 + rbx], 0
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rsi + 24]
	mov	rdx, qword ptr [rsi]
	mov	r8, qword ptr [rsi + 8]
	mov	r10, qword ptr [rsi + 16]
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [r9]
	mov	qword ptr [rbp - 184], r10      # 8-byte Spill
	mov	qword ptr [r9 + 16], r10
	mov	qword ptr [rbp - 176], rdx      # 8-byte Spill
	mov	qword ptr [r9], rdx
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	mov	qword ptr [r9 + 24], rcx
	mov	qword ptr [rbp - 168], r8       # 8-byte Spill
	mov	qword ptr [r9 + 8], r8
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r12, qword ptr [r13]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 24]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	qword ptr [rsi + 24], r10
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 8], rdx
	mov	qword ptr [rsi], r12
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	r8, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	r8, rbx
	mov	rsi, r12
	add	rsi, 32
	mov	rdi, -1
	cmovb	rsi, rdi
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	qword ptr [rbp - 256], r10      # 8-byte Folded Spill
	mov	qword ptr [rbp - 256], r11      # 8-byte Spill
	bswap	r11
	mov	qword ptr [rbp - 264], r11      # 8-byte Spill
	bswap	rax
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	cmovb	rsi, rdi
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	bswap	rax
	mov	qword ptr [rbp - 232], rax      # 8-byte Spill
	cmp	rsi, r8
	ja	.LBB0_533
.LBB0_66:                               # %OP1844.DUP2
	add	rbx, qword ptr [r15 + 8]
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 168]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 184]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx], rax
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r9 + 24], rsi
	mov	qword ptr [r9 + 8], rdx
	mov	qword ptr [r9 + 16], rax
	mov	qword ptr [r9], rcx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r13
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_535
# %bb.67:                               # %OP1846.SLOAD
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB0_535
# %bb.68:                               # %OP1847.PUSH32
	vpcmpeqd	ymm0, ymm0, ymm0
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqu	ymm1, ymmword ptr [r13]
	xor	eax, eax
	vptest	ymm1, ymm0
	setb	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 24], 0
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jb	.LBB0_1292
# %bb.69:                               # %OP1851.PUSH20
	mov	esi, dword ptr [r14 - 80]
	mov	r15, qword ptr [r14 - 96]
	mov	r12, qword ptr [r14 - 88]
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [rcx + 8], r12
	mov	qword ptr [rcx + 16], rsi
	mov	qword ptr [rcx], r15
	mov	qword ptr [rcx + 24], 0
	mov	qword ptr [rdx + 24], 0
	mov	qword ptr [rdx + 8], 0
	mov	qword ptr [rdx + 16], 0
	mov	qword ptr [rdx], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rax, rbx
	cmp	rax, 31
	jbe	.LBB0_534
.LBB0_70:                               # %OP1858.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + rbx + 24], r15
	movbe	qword ptr [rax + rbx + 16], r12
	movbe	qword ptr [rax + rbx + 8], rsi
	mov	qword ptr [rax + rbx], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovups	ymmword ptr [rcx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_81] # xmm1 = [2,0,0,0]
	vmovdqu	ymmword ptr [rdx], ymm1
	mov	r13, qword ptr [rbp - 280]      # 8-byte Reload
	vmovups	ymmword ptr [r13], ymm0
	mov	rbx, qword ptr [rdi + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 63
	jbe	.LBB0_536
.LBB0_71:                               # %OP1863.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_117] # ymm0 = [0,0,0,144115188075855872]
	vmovups	ymmword ptr [rax + r14 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rdx], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r14 + 48]
	mov	rcx, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 40]
	mov	rsi, qword ptr [r14 + 56]
	mov	rbx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], rcx
	mov	rsi, r13
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 224]      # 8-byte Reload
	jne	.LBB0_717
# %bb.72:                               # %OP1867.CALLER
	mov	rax, qword ptr [rbp - 256]      # 8-byte Reload
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [rbx + 24], 0
	mov	r12, qword ptr [r14 + 32]
	mov	rax, qword ptr [r14 + 48]
	mov	rcx, qword ptr [r14 + 40]
	mov	rdx, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 216], rdx
	mov	qword ptr [r14 + 200], rcx
	mov	qword ptr [r14 + 208], rax
	mov	qword ptr [r14 + 192], r12
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	r9, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	r9, rbx
	mov	rsi, r12
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r11
	cmp	rsi, r9
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	ja	.LBB0_716
.LBB0_73:                               # %OP1870.SWAP1
	add	rbx, qword ptr [r15 + 8]
	mov	rax, qword ptr [rbp - 232]      # 8-byte Reload
	mov	qword ptr [r12 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	mov	qword ptr [r12 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx], 0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	r8, qword ptr [r13 + 16]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovups	ymm0, ymmword ptr [rax]
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rbp - 224], rdx      # 8-byte Spill
	mov	qword ptr [rax], rdx
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [rax + 8], rsi
	mov	r12, qword ptr [r9]
	mov	rax, qword ptr [r9 + 16]
	mov	rcx, qword ptr [r9 + 8]
	mov	rdx, qword ptr [r9 + 24]
	vmovups	ymmword ptr [r9], ymm0
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13], r12
	mov	r15, qword ptr [rdi + 40]
	mov	r10, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	r10, rbx
	mov	rsi, r12
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r11
	cmp	rsi, r10
	ja	.LBB0_537
.LBB0_74:                               # %OP1873.SWAP1
	add	rbx, qword ptr [r15 + 8]
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r12 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r12 + rbx], rax
	mov	rax, qword ptr [r9 + 16]
	mov	rcx, qword ptr [r9]
	mov	rdx, qword ptr [r9 + 8]
	mov	rsi, qword ptr [r9 + 24]
	mov	rbx, qword ptr [rbp - 104]      # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], rcx
	vmovdqu	ymmword ptr [r9], ymm0
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_535
# %bb.75:                               # %OP1875.SLOAD
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB0_535
# %bb.76:                               # %OP1876.PUSH2
	vmovups	ymm0, ymmword ptr [rbx]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_137] # xmm1 = [3766,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	vmovups	ymm0, ymmword ptr [r14 - 32]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_32] # xmm0 = [8814,0]
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	xor	eax, eax
	mov	ecx, 8814
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_51
.LBB0_77:                               # %OP27.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + 40], xmm0
	mov	qword ptr [r14 + 56], 0
	xor	esi, esi
	cmp	rdx, 1565343019
	setb	sil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_3] # ymm1 = [0,0,0,3130686038]
	vmovdqu	ymmword ptr [r14 + 8], ymm1
	mov	qword ptr [r14], rsi
	cmp	edx, 1565343019
	jae	.LBB0_99
# %bb.78:
	xor	ecx, ecx
	xor	esi, esi
	mov	r11, r15
.LBB0_79:                               # %OP77.JUMPDEST
	mov	rdx, r13
	shl	rdx, 5
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [r12 + rdx + 40], xmm1
	mov	qword ptr [r12 + rdx + 56], 0
	cmp	rax, 2127478272
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rsi
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_139] # ymm0 = [0,0,0,2127478272]
	vmovdqu	ymmword ptr [r12 + rdx + 8], ymm0
	mov	qword ptr [r12 + rdx], rdi
	jae	.LBB0_125
.LBB0_80:                               # %OP105.JUMPDEST
	or	rbx, rsi
	mov	rdx, r13
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rdx + 40], xmm0
	mov	qword ptr [r12 + rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 1784838210
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_146] # ymm1 = [0,0,0,1784838210]
	vmovdqu	ymmword ptr [r12 + rdx + 8], ymm1
	mov	qword ptr [r12 + rdx], rdi
	jne	.LBB0_331
# %bb.81:
	mov	rdi, r11
.LBB0_82:                               # %OP651.JUMPDEST
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovups	ymmword ptr [r12 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rcx + 32], ymm0
	add	r13, 3
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	edx, edx
	mov	rbx, rax
	add	rbx, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r12 + rcx + 64], rbx
	mov	qword ptr [r12 + rcx + 80], r9
	mov	qword ptr [r12 + rcx + 72], r8
	mov	qword ptr [r12 + rcx + 88], r10
	mov	qword ptr [r12 + rcx + 128], rbx
	mov	qword ptr [r12 + rcx + 144], r9
	mov	qword ptr [r12 + rcx + 136], r8
	mov	qword ptr [r12 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rbx
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r12 + rsi], rdx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_638
.LBB0_83:                               # %OP666.JUMPDEST
	lea	r15, [r13 - 1]
	shl	r13, 5
	mov	r8, qword ptr [r12 + r13 - 40]
	mov	rcx, qword ptr [r12 + r13 - 48]
	mov	rsi, qword ptr [r12 + r13 - 64]
	mov	rdx, qword ptr [r12 + r13 - 56]
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rdi + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2224]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2208]
	mov	rcx, qword ptr [rbp - 2224]
	mov	rdx, qword ptr [rbp - 2216]
	mov	rsi, r15
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r12 + rsi + 16], rdi
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], -1
	mov	qword ptr [r12 + rsi], -1
	mov	qword ptr [r12 + r13 - 56], rdx
	mov	qword ptr [r12 + r13 - 64], rcx
	mov	qword ptr [r12 + r13 - 48], rax
	mov	qword ptr [r12 + r13 - 40], 0
.LBB0_84:                               # %OP2017.JUMPDEST
	lea	rax, [r15 + 1]
	mov	r13, r15
	shl	r13, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	r14, r12
	lea	r12, [r15 + 2]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r14 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r14 + rax], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1644
# %bb.85:                               # %OP2021.PUSH1
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	vpxor	ymm0, ymm0, ymmword ptr [rbx]
	xor	eax, eax
	vptest	ymm0, ymm0
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jne	.LBB0_474
# %bb.86:
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_87:                               # %OP2056.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	rax, r15
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14 + 64], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_494
# %bb.88:                               # %OP2062.DUP1
	add	r14, r12
	add	r13, 3
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r14 + 80], 0
	mov	qword ptr [r14 + 64], 4244
	jmp	.LBB0_359
.LBB0_89:                               # %OP208.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	xor	rax, 151187884
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_18] # ymm0 = [0,0,0,151187884]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB0_418
.LBB0_90:                               # %OP421.JUMPDEST
	mov	rax, r13
	inc	r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_129] # xmm0 = [734,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	jmp	.LBB0_42
.LBB0_91:                               # %OP185.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 234755713
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_14] # ymm1 = [0,0,0,234755713]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	jne	.LBB0_107
.LBB0_92:                               # %OP504.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_123] # xmm0 = [874,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_93:                               # %OP1809.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_71] # xmm0 = [6,0,0,0]
	jmp	.LBB0_94
.LBB0_96:                               # %OP134.DUP1
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdi, rax
	xor	rdi, 910484757
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	jne	.LBB0_113
.LBB0_97:                               # %OP610.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_98:                               # %OP1933.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_105] # xmm0 = [3,0,0,0]
	jmp	.LBB0_110
.LBB0_99:                               # %OP32.DUP1
	vmovdqu	xmmword ptr [r14 + 40], xmm0
	mov	qword ptr [r14 + 56], 0
	movabs	rdx, -3309546874532265984
	xor	esi, esi
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_4] # ymm0 = [0,0,0,3524403367]
	vmovdqu	ymmword ptr [r14 + 8], ymm0
	cmp	rcx, rdx
	setb	sil
	mov	qword ptr [r14], rsi
	mov	r11, r15
	jae	.LBB0_133
# %bb.100:
	xor	ecx, ecx
	xor	esi, esi
.LBB0_101:                              # %OP59.JUMPDEST
	mov	rdx, r13
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rdx + 40], xmm0
	or	rbx, rsi
	mov	qword ptr [r12 + rdx + 56], 0
	mov	esi, 3130686038
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_3] # ymm1 = [0,0,0,3130686038]
	vmovdqu	ymmword ptr [r12 + rdx + 8], ymm1
	mov	qword ptr [r12 + rdx], rdi
	jne	.LBB0_343
.LBB0_102:                              # %OP797.JUMPDEST
	lea	rdx, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_103:                              # %OP3158.JUMPDEST
	lea	r13, [rdx + 1]
	shl	rdx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_79] # xmm0 = [1000,0,0,0]
	jmp	.LBB0_342
.LBB0_104:                              # %OP162.DUP1
	add	rdx, r12
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 816707615
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_133] # ymm0 = [0,0,0,816707615]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	jne	.LBB0_339
.LBB0_105:                              # %OP583.JUMPDEST
	lea	rdx, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_106:                              # %OP1925.JUMPDEST
	lea	r13, [rdx + 1]
	shl	rdx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_136] # ymm0 = [1629287684866385609,6891346005080805706,5557266254805274640,7958403348434106751]
	jmp	.LBB0_342
.LBB0_107:                              # %OP190.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	xor	rax, 404098525
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_15] # ymm0 = [0,0,0,404098525]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB0_418
.LBB0_108:                              # %OP527.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_109:                              # %OP1816.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	jmp	.LBB0_110
.LBB0_113:                              # %OP139.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 1214040405
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_10] # ymm0 = [0,0,0,1214040405]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jne	.LBB0_348
.LBB0_114:                              # %OP614.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_19] # xmm0 = [599,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rbx, qword ptr [rcx + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, rbx
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r12 + rax + 64], rdx
	mov	qword ptr [r12 + rax + 80], r8
	mov	qword ptr [r12 + rax + 72], rdi
	mov	qword ptr [r12 + rax + 88], r9
	mov	qword ptr [r12 + rax + 128], rdx
	mov	qword ptr [r12 + rax + 144], r8
	mov	qword ptr [r12 + rax + 136], rdi
	mov	qword ptr [r12 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r12 + rsi], rcx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_654
# %bb.115:
	mov	r10, rbx
.LBB0_116:                              # %OP629.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	shl	r13, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r12 + r13 - 32], ymm0
	mov	rbx, qword ptr [r12 + r13 - 64]
	mov	r14, qword ptr [r12 + r13 - 56]
	mov	r15, qword ptr [r12 + r13 - 48]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + r13 - 40]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rbx
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 2480]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	mov	r8, r12
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2464]
	mov	rcx, qword ptr [rbp - 2480]
	mov	rdx, qword ptr [rbp - 2472]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r13 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r13 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 56], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 48], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 32], 32
	add	rbx, 32
	adc	r14, 0
	adc	r15, 0
	adc	r12, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 464]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	mov	r8, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 464]
	mov	rcx, qword ptr [rbp - 456]
	mov	rdx, qword ptr [rbp - 440]
	mov	rsi, qword ptr [rbp - 448]
	mov	qword ptr [r12 + r13 + 16], rsi
	mov	qword ptr [r12 + r13 + 24], rdx
	mov	qword ptr [r12 + r13], rax
	mov	qword ptr [r12 + r13 + 8], rcx
	mov	edx, esi
	mov	qword ptr [r12 + r13 - 32], rax
	mov	qword ptr [r12 + r13 - 24], rcx
	mov	qword ptr [r12 + r13 - 16], rdx
	mov	qword ptr [r12 + r13 - 8], 0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB0_117:                              # %OP1938.JUMPDEST
	lea	r15, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	mov	r14, r12
	add	r12, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_38] # xmm0 = [5,0]
	vmovdqu	ymmword ptr [r14 + rax], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_494
# %bb.118:                              # %OP1941.PUSH20
	lea	rbx, [r13 + 2]
	mov	r8, r15
	shl	r8, 5
	mov	eax, dword ptr [r12 + 16]
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	movbe	rsi, qword ptr [rsi + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [r12]
	xor	rdx, rcx
	mov	qword ptr [r14 + r8 + 16], rsi
	mov	qword ptr [r14 + r8], rcx
	mov	rcx, qword ptr [r12 + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r8 + 8], rdi
	mov	qword ptr [r14 + r8 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [r12 + 16], 0
	jne	.LBB0_479
# %bb.119:
	mov	rax, r15
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_120:                              # %OP1978.JUMPDEST
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_71] # xmm0 = [6,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	shl	rax, 5
	lea	r14, [r12 + rax]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1639
# %bb.121:                              # %OP1982.PUSH20
	add	r15, r12
	shl	rbx, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [r12 + rbx], ymm0
	vmovdqa	xmm1, xmmword ptr [r15 - 64]
	mov	eax, dword ptr [r15 - 48]
	vmovups	ymmword ptr [r15 - 64], ymm0
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	lea	rcx, [r13 + 3]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	shl	rcx, 5
	mov	qword ptr [r12 + rbx + 16], rax
	vmovdqa	xmmword ptr [r12 + rbx], xmm1
	mov	qword ptr [r12 + rbx + 24], 0
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_125] # ymm0 = [0,0,18446744069414584320,18446744073709551615]
	vmovups	ymmword ptr [r12 + rcx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	edx, dword ptr [r14 + 20]
	shl	rdx, 32
	vmovups	ymmword ptr [r14], ymm0
	vmovups	ymmword ptr [r15 + 128], ymm0
	mov	qword ptr [r12 + rcx + 16], rdx
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [r12 + rcx], xmm0
	mov	qword ptr [r12 + rcx + 24], rax
	mov	rcx, qword ptr [r12 + rbx]
	or	rax, qword ptr [r12 + rbx + 24]
	mov	rsi, qword ptr [r12 + rbx + 8]
	or	rdx, qword ptr [r12 + rbx + 16]
	mov	qword ptr [r12 + rbx + 16], rdx
	mov	qword ptr [r12 + rbx + 24], rax
	mov	rdi, qword ptr [r14 + 24]
	mov	qword ptr [r14 + 24], rax
	mov	rax, qword ptr [r14 + 8]
	mov	qword ptr [r14 + 8], rsi
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	rdx, qword ptr [r14]
	mov	qword ptr [r14], rcx
	mov	qword ptr [r12 + rbx + 24], rdi
	mov	qword ptr [r12 + rbx + 8], rax
	mov	qword ptr [r12 + rbx], rdx
	mov	qword ptr [r12 + rbx + 16], rsi
	vmovdqu	ymm0, ymmword ptr [r15]
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rax
	mov	qword ptr [r15 + 16], rsi
	vmovdqu	ymmword ptr [r12 + rbx], ymm0
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r13
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1636
# %bb.122:                              # %OP1994.PUSH1
	add	rbx, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_72] # xmm0 = [7,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1629
# %bb.123:                              # %OP1997.SWAP3
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	rsi, qword ptr [r15 - 16]
	mov	r9, qword ptr [r15 - 32]
	mov	r8, qword ptr [r15 - 24]
	mov	rdi, qword ptr [r15 - 8]
	mov	qword ptr [r15 - 8], r10
	mov	qword ptr [r15 - 24], rdx
	mov	qword ptr [r15 - 16], rax
	mov	qword ptr [r15 - 32], rcx
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], r9
	mov	r10, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	r11, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], r11
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], r10
	mov	rax, qword ptr [r15 - 40]
	mov	qword ptr [r15 - 40], rcx
	mov	rcx, qword ptr [r15 - 48]
	mov	qword ptr [r15 - 48], rdx
	mov	rdx, qword ptr [r15 - 56]
	mov	qword ptr [r15 - 56], r10
	mov	r10, qword ptr [r15 - 64]
	mov	qword ptr [r15 - 64], r11
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx], r10
	and	r10, r9
	and	rdx, r8
	and	rcx, rsi
	and	rax, rdi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], r10
	mov	rsi, qword ptr [r15 - 32]
	mov	rdi, qword ptr [r15 - 24]
	mov	r8, qword ptr [r15 - 16]
	mov	r9, qword ptr [r15 - 8]
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], rdi
	mov	qword ptr [r14], rsi
	and	rsi, qword ptr [r15]
	mov	qword ptr [r15], rsi
	or	rsi, r10
	and	rdi, qword ptr [r15 + 8]
	mov	qword ptr [r15 + 8], rdi
	or	rdi, rdx
	and	r8, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], r8
	or	r8, rcx
	and	r9, qword ptr [r15 + 24]
	mov	qword ptr [r15 + 24], r9
	or	r9, rax
	vmovdqu	ymm0, ymmword ptr [r15 - 64]
	mov	qword ptr [r15 - 40], r9
	mov	qword ptr [r15 - 48], r8
	mov	qword ptr [r15 - 56], rdi
	mov	qword ptr [r15 - 64], rsi
	vmovdqu	ymmword ptr [r15 - 32], ymm0
	lea	rsi, [r15 - 64]
	mov	rbx, r13
	mov	rdi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_539
# %bb.124:                              # %OP2006.JUMP
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, -3
	jmp	.LBB0_1544
.LBB0_125:                              # %OP83.DUP1
	add	rdx, r12
	vmovdqu	xmmword ptr [rdx + 40], xmm1
	mov	qword ptr [rdx + 56], 0
	mov	rdi, rax
	xor	rdi, 2127478272
	or	rdi, rcx
	or	rbx, rsi
	xor	esi, esi
	or	rdi, rbx
	sete	sil
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rsi
	jne	.LBB0_351
.LBB0_126:                              # %OP699.JUMPDEST.loopexit
	mov	r14, r11
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovups	ymmword ptr [r12 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rcx + 32], ymm0
	add	r13, 3
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r12 + rcx + 64], rdi
	mov	qword ptr [r12 + rcx + 80], r9
	mov	qword ptr [r12 + rcx + 72], r8
	mov	qword ptr [r12 + rcx + 88], r10
	mov	qword ptr [r12 + rcx + 128], rdi
	mov	qword ptr [r12 + rcx + 144], r9
	mov	qword ptr [r12 + rcx + 136], r8
	mov	qword ptr [r12 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r12 + rsi], rdx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_495
.LBB0_127:                              # %OP714.JUMPDEST
	mov	rbx, r13
	dec	r13
	shl	rbx, 5
	mov	r8, qword ptr [r12 + rbx - 40]
	mov	rcx, qword ptr [r12 + rbx - 48]
	mov	rsi, qword ptr [r12 + rbx - 64]
	mov	rdx, qword ptr [r12 + rbx - 56]
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rdi + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2288]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2272]
	mov	rcx, qword ptr [rbp - 2288]
	mov	rdx, qword ptr [rbp - 2280]
	mov	rsi, r13
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r12 + rsi + 16], rdi
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], -1
	mov	qword ptr [r12 + rsi], -1
	mov	qword ptr [r12 + rbx - 56], rdx
	mov	qword ptr [r12 + rbx - 64], rcx
	mov	qword ptr [r12 + rbx - 48], rax
	mov	qword ptr [r12 + rbx - 40], 0
	mov	r11, r14
.LBB0_128:                              # %OP2499.JUMPDEST
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovups	ymmword ptr [r12 + r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12 + r13 + 32], ymm0
	lea	r14, [r12 + r13]
	mov	rbx, qword ptr [r11 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	rax, r15
	cmp	rax, 63
	jbe	.LBB0_540
.LBB0_129:                              # %OP2503.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_145] # ymm0 = [0,0,0,288230376151711744]
	vmovdqu	ymmword ptr [rax + r15 + 32], ymm0
	mov	rdx, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rbx, qword ptr [r14 - 16]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r14 - 16], xmm0
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [r14 + 16], rbx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	vmovdqa	xmmword ptr [r14 + 48], xmm0
	vmovdqa	xmmword ptr [r14 + 32], xmm0
	lea	r13, [r14 - 32]
	mov	r12, qword ptr [r11 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rax, r15
	cmp	rax, 31
	jbe	.LBB0_541
.LBB0_130:                              # %OP2507.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r15 + 24], rdx
	movbe	qword ptr [rax + r15 + 16], rsi
	movbe	qword ptr [rax + r15 + 8], rbx
	movbe	qword ptr [rax + r15], rcx
	vmovdqa	xmm0, xmmword ptr [r14 - 32]
	vmovdqa	xmm1, xmmword ptr [r14 - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [r14 - 32], ymm2
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	rbx, r11
	mov	rdi, r11
	mov	rsi, r13
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_693
# %bb.131:                              # %OP2510.SLOAD
	mov	rdi, rbx
	mov	rsi, r13
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB0_95
# %bb.132:                              # %OP2511.DUP2
	mov	rcx, qword ptr [r14 - 64]
	mov	rdx, qword ptr [r14 - 56]
	mov	rax, qword ptr [r14 - 48]
	mov	rsi, qword ptr [r14 - 40]
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], rcx
	mov	r14, rax
	mov	rax, rdx
	jmp	.LBB0_1545
.LBB0_133:                              # %OP37.DUP1
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [r14 + 40], xmm1
	mov	qword ptr [r14 + 56], 0
	mov	ecx, 3524403367
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovdqu	ymmword ptr [r14 + 8], ymm0
	mov	qword ptr [r14], rdx
	cmp	eax, -770563929
	jne	.LBB0_366
.LBB0_134:                              # %OP827.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_123] # xmm0 = [874,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_135:                              # %OP3394.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_72] # xmm0 = [7,0,0,0]
	jmp	.LBB0_94
.Ltmp2:                                 # Block address taken
.LBB0_136:                              # %OP4775.ISZERO
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	r8, qword ptr [r12 + rax - 24]
	or	r8, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_379
.LBB0_137:                              # %OP4787.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	jne	.LBB0_564
# %bb.138:                              # %OP4793.MLOAD.contd
	mov	rsi, r15
	add	rsi, r12
	add	r13, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	shl	rax, 5
	mov	qword ptr [r12 + r14], rcx
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_439
.LBB0_139:                              # %OP4804.JUMPDEST.loopexit
	mov	r9, r13
	mov	rax, r13
	shl	rax, 5
	mov	r15, qword ptr [r12 + rax - 64]
	mov	r13, qword ptr [r11 + 40]
	mov	rcx, qword ptr [r13 + 16]
	mov	rbx, r12
	mov	r12, qword ptr [r13 + 48]
	sub	rcx, r12
	mov	rsi, r15
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [rbx + rax - 56]
	mov	r8d, 0
	sbb	r8, qword ptr [rbx + rax - 48]
	sbb	rdi, qword ptr [rbx + rax - 40]
	cmovb	rsi, rdx
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	lea	rdi, [r9 - 1]
	lea	r14, [rbx + rax]
	cmp	rsi, rcx
	ja	.LBB0_513
.LBB0_140:                              # %OP4806.MLOAD.contd
	add	r12, qword ptr [r13 + 8]
	mov	rax, qword ptr [r15 + r12 + 24]
	mov	rcx, qword ptr [r15 + r12 + 16]
	mov	rdx, qword ptr [r15 + r12]
	mov	rsi, qword ptr [r15 + r12 + 8]
	movbe	qword ptr [r14 - 40], rdx
	movbe	qword ptr [r14 - 56], rcx
	movbe	qword ptr [r14 - 64], rax
	movbe	qword ptr [r14 - 48], rsi
	mov	r15, rdi
	shl	r15, 5
	mov	qword ptr [rbx + r15 + 24], 0
	mov	qword ptr [rbx + r15 + 8], 0
	mov	qword ptr [rbx + r15 + 16], 0
	mov	qword ptr [rbx + r15], 11
	lea	rsi, [r14 - 32]
	mov	r13, rdi
	mov	rdi, r11
	mov	edx, 17
	mov	r12, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1642
# %bb.141:                              # %OP4809.PUSH20
	mov	r11, r12
	mov	r12, rbx
	mov	rdx, qword ptr [r14 - 40]
	mov	rcx, qword ptr [r14 - 56]
	mov	rsi, qword ptr [r14 - 64]
	mov	rdi, qword ptr [r14 - 48]
	mov	r8d, edi
	or	r8, rsi
	xor	r9d, r9d
	xor	eax, eax
	or	r8, rcx
	setne	r9b
	sete	al
	vmovdqu	ymm1, ymmword ptr [r14 - 128]
	vmovups	ymm2, ymmword ptr [r14 - 96]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 - 120], xmm0
	mov	qword ptr [r14 - 128], r9
	mov	qword ptr [r14 - 104], 0
	vmovdqu	ymmword ptr [r14 + 32], ymm1
	mov	qword ptr [r14 - 80], rdi
	mov	qword ptr [r14 - 72], rdx
	mov	qword ptr [r14 - 96], rsi
	mov	qword ptr [r14 - 88], rcx
	vmovups	ymmword ptr [r14], ymm2
	mov	rcx, qword ptr [r14 - 24]
	mov	rdx, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 8]
	mov	rdi, qword ptr [r14 - 16]
	mov	qword ptr [r14 - 48], rdi
	mov	qword ptr [r14 - 40], rsi
	mov	qword ptr [r14 - 64], rdx
	mov	qword ptr [r14 - 56], rcx
	vmovdqu	xmmword ptr [r14 - 24], xmm0
	mov	qword ptr [r14 - 32], rax
	mov	qword ptr [r14 - 8], 0
	je	.LBB0_1132
# %bb.142:                              # %OP4823.DUP1
	add	r15, r12
	or	rdx, rdi
	or	rcx, rsi
	xor	eax, eax
	or	rcx, rdx
	sete	al
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 24], 0
	je	.LBB0_1135
# %bb.143:                              # %OP4827.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_43] # xmm0 = [10200,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_44] # xmm0 = [4695,0,0,0]
	vmovups	ymmword ptr [r14 + 32], ymm0
	mov	al, 48
	bzhi	rcx, qword ptr [r14 - 184], rax
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 4
	mov	rdx, r13
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [r14 + 80], xmm0
	mov	rsi, qword ptr [r14 - 192]
	mov	rdi, qword ptr [r14 - 160]
	mov	qword ptr [r14 + 64], rsi
	mov	qword ptr [r14 + 72], rcx
	bzhi	rax, qword ptr [r14 - 152], rax
	vmovaps	xmmword ptr [r14 + 112], xmm0
	shl	rdx, 5
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 104], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_39] # xmm0 = [8680,0]
	vmovdqu	ymmword ptr [r14 + 160], ymm0
	vmovdqu	ymmword ptr [r12 + rdx], ymm0
	xor	eax, eax
	mov	ecx, 8680
	jmp	.LBB0_192
.Ltmp3:                                 # Block address taken
.LBB0_144:                              # %OP3840.ISZERO
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, rdx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_382
# %bb.145:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
.LBB0_146:                              # %OP3852.JUMPDEST
	lea	r15, [r13 - 3]
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx - 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.147:                              # %OP3858.MLOAD.contd
	add	rbx, r12
	add	r13, -2
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx - 112], rsi
	mov	qword ptr [rbx - 104], rdx
	mov	qword ptr [rbx - 128], rax
	mov	qword ptr [rbx - 120], rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r15, 5
	mov	r14, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	shl	r13, 5
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [rbx - 16], 0
	mov	qword ptr [rbx - 24], 0
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [r12 + r13], rdx
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [r12 + r13 + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_254
# %bb.148:
	mov	r13, r14
.LBB0_149:                              # %OP3869.JUMPDEST
	lea	r15, [r13 - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rcx, qword ptr [r12 + r14 - 40]
	mov	rdx, qword ptr [r12 + r14 - 48]
	mov	rdi, qword ptr [r12 + r14 - 64]
	mov	rsi, qword ptr [r12 + r14 - 56]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.150:                              # %OP3871.MLOAD.contd
	add	r14, r12
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 - 48], rsi
	mov	qword ptr [r14 - 64], rcx
	mov	qword ptr [r14 - 40], rax
	mov	qword ptr [r14 - 56], rdx
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 7
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	lea	rsi, [r14 - 32]
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.151:                              # %OP3874.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	lea	r15, [r13 + 2]
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.152:                              # %OP3876.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.153:                              # %OP3880.ADDRESS
	add	rbx, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 48]
	mov	rsi, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 120], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.154:                              # %OP3885.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14 + 32]
	vmovdqa	xmm1, xmmword ptr [r14 + 48]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 40], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.155:                              # %OP3886.MLOAD.contd
	mov	rsi, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	mov	eax, dword ptr [r14 - 16]
	mov	qword ptr [r14 - 16], rax
	mov	qword ptr [r14 - 8], 0
	mov	r8, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14 + 16]
	mov	r10, qword ptr [r14 + 8]
	mov	r11, qword ptr [r14]
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14], 1889567281
	mov	qword ptr [r14 + 8], 0
	mov	r15, r11
	add	r15, 36
	mov	qword ptr [r14 + 32], r15
	mov	r15, r10
	adc	r15, 0
	mov	qword ptr [r14 + 40], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [r14 + 48], r15
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [r14 + 56], r15
	mov	r15, qword ptr [rbx + 24]
	mov	rbx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 80], 0
	mov	qword ptr [r14 + 88], 0
	mov	qword ptr [r14 + 64], 32
	mov	qword ptr [r14 + 72], 0
	mov	qword ptr [r14 + 112], rbx
	mov	qword ptr [r14 + 120], r15
	mov	qword ptr [r14 + 96], rsi
	mov	qword ptr [r14 + 104], rdi
	sub	r11, rsi
	sbb	r10, rdi
	sbb	r9, rbx
	sbb	r8, r15
	add	r11, 36
	mov	qword ptr [r14 + 128], r11
	adc	r10, 0
	mov	qword ptr [r14 + 136], r10
	adc	r9, 0
	mov	qword ptr [r14 + 144], r9
	adc	r8, 0
	mov	qword ptr [r14 + 152], r8
	mov	qword ptr [r14 + 176], rbx
	mov	qword ptr [r14 + 184], r15
	mov	qword ptr [r14 + 160], rsi
	mov	qword ptr [r14 + 168], rdi
	mov	qword ptr [r14 + 192], rcx
	mov	qword ptr [r14 + 200], rdx
	mov	qword ptr [r14 + 208], rax
	mov	qword ptr [r14 + 216], 0
	mov	qword ptr [r14 + 224], rcx
	mov	qword ptr [r14 + 232], rdx
	add	r13, 8
	mov	qword ptr [r14 + 240], rax
	lea	rbx, [r14 + 224]
	mov	qword ptr [r14 + 248], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.156:                              # %OP3912.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_462
# %bb.157:
	mov	r11, r15
.LBB0_158:                              # %OP3920.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.159:
	lea	rax, [rip + .Ltmp4]
	jmp	.LBB0_1561
.Ltmp5:                                 # Block address taken
.LBB0_160:                              # %OP2216.ISZERO
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	r8, qword ptr [r12 + rax - 24]
	or	r8, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_387
.LBB0_161:                              # %OP2228.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	jne	.LBB0_564
# %bb.162:                              # %OP2234.MLOAD.contd
	mov	rsi, r15
	add	rsi, r12
	add	r13, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	shl	rax, 5
	mov	qword ptr [r12 + r14], rcx
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_439
.LBB0_163:                              # %OP2245.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	mov	r14, qword ptr [r12 + rax - 64]
	mov	r9, r13
	mov	r10, qword ptr [r11 + 40]
	mov	rcx, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10 + 48]
	sub	rcx, r15
	mov	rsi, r14
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r12 + rax - 56]
	mov	r8d, 0
	sbb	r8, qword ptr [r12 + rax - 48]
	sbb	rdi, qword ptr [r12 + rax - 40]
	cmovb	rsi, rdx
	mov	r13, r12
	lea	r12, [r9 - 1]
	lea	rbx, [rax + r13]
	cmp	rsi, rcx
	ja	.LBB0_1643
.LBB0_164:                              # %OP2247.MLOAD.contd
	add	r15, qword ptr [r10 + 8]
	mov	rax, qword ptr [r14 + r15 + 24]
	mov	rcx, qword ptr [r14 + r15 + 16]
	mov	rdx, qword ptr [r14 + r15]
	mov	rsi, qword ptr [r14 + r15 + 8]
	movbe	qword ptr [rbx - 72], rdx
	movbe	qword ptr [rbx - 88], rcx
	movbe	qword ptr [rbx - 80], rsi
	movbe	qword ptr [rbx - 96], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx - 48], xmm0
	vmovdqa	xmmword ptr [rbx - 64], xmm0
	shl	r12, 5
	mov	qword ptr [r13 + r12 + 24], 0
	mov	qword ptr [r13 + r12 + 16], 0
	mov	qword ptr [r13 + r12 + 8], 0
	mov	qword ptr [r13 + r12], 4609
	vmovdqu	ymm1, ymmword ptr [rbx - 128]
	vmovdqu	ymmword ptr [rbx], ymm1
	add	r9, 2
	mov	rax, qword ptr [rbx - 192]
	mov	rcx, r9
	mov	dl, 48
	bzhi	rdx, qword ptr [rbx - 184], rdx
	vmovdqa	xmmword ptr [rbx + 48], xmm0
	shl	rcx, 5
	mov	qword ptr [rbx + 32], rax
	mov	qword ptr [rbx + 40], rdx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_32] # xmm0 = [8814,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	vmovdqu	ymmword ptr [r13 + rcx], ymm0
	mov	ecx, 8814
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, r13
	mov	r13, r9
	jmp	.LBB0_1546
.Ltmp4:                                 # Block address taken
.LBB0_165:                              # %OP3924.ISZERO
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	r8, qword ptr [r12 + rax - 24]
	or	r8, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_387
.LBB0_166:                              # %OP3936.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	jne	.LBB0_564
# %bb.167:                              # %OP3942.MLOAD.contd
	mov	rsi, r15
	add	rsi, r12
	add	r13, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	shl	rax, 5
	mov	qword ptr [r12 + r14], rcx
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_439
.LBB0_168:                              # %OP3953.JUMPDEST.loopexit
	mov	rbx, r13
	mov	rax, r13
	shl	rax, 5
	mov	r9, qword ptr [r12 + rax - 64]
	mov	r10, qword ptr [r11 + 40]
	mov	rcx, qword ptr [r10 + 16]
	mov	r15, r12
	mov	r12, qword ptr [r10 + 48]
	sub	rcx, r12
	mov	rsi, r9
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r15 + rax - 56]
	mov	r8d, 0
	sbb	r8, qword ptr [r15 + rax - 48]
	sbb	rdi, qword ptr [r15 + rax - 40]
	cmovb	rsi, rdx
	dec	r13
	lea	r14, [r15 + rax]
	cmp	rsi, rcx
	ja	.LBB0_520
.LBB0_169:                              # %OP3955.MLOAD.contd
	add	r12, qword ptr [r10 + 8]
	mov	rax, qword ptr [r9 + r12 + 24]
	mov	rcx, qword ptr [r9 + r12 + 16]
	mov	rdx, qword ptr [r9 + r12]
	mov	rsi, qword ptr [r9 + r12 + 8]
	movbe	qword ptr [r14 - 40], rdx
	movbe	qword ptr [r14 - 56], rcx
	movbe	qword ptr [r14 - 64], rax
	movbe	qword ptr [r14 - 48], rsi
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 8
	lea	rsi, [r14 - 32]
	mov	r12, r11
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1639
# %bb.170:                              # %OP3958.PUSH14
	mov	r11, r12
	mov	r12, r15
	inc	rbx
	mov	rax, rbx
	shl	rax, 5
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	mov	rsi, qword ptr [r14 - 32]
	mov	rdi, qword ptr [r14 - 24]
	mov	r8b, 48
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r14 - 16], xmm0
	bzhi	r9, rdi, r8
	mov	qword ptr [r14 - 24], r9
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rsi
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rdi
	mov	rsi, rcx
	shld	rsi, rdx, 16
	shld	rdx, rdi, 16
	shr	rcx, 48
	mov	qword ptr [r15 + rax + 16], rcx
	mov	qword ptr [r15 + rax], rdx
	mov	qword ptr [r15 + rax + 8], rsi
	mov	qword ptr [r15 + rax + 24], 0
	bzhi	rax, rsi, r8
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rax
	vmovdqa	xmmword ptr [r14 + 16], xmm0
	jmp	.LBB0_319
.Ltmp6:                                 # Block address taken
.LBB0_171:                              # %OP3277.ISZERO
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	r8, qword ptr [r12 + rax - 24]
	or	r8, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_387
.LBB0_172:                              # %OP3289.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	jne	.LBB0_564
# %bb.173:                              # %OP3295.MLOAD.contd
	mov	rsi, r15
	add	rsi, r12
	add	r13, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	shl	rax, 5
	mov	qword ptr [r12 + r14], rcx
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_439
.LBB0_174:                              # %OP3306.JUMPDEST.loopexit
	mov	rax, r13
	dec	r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	mov	r14, qword ptr [r12 + rax - 64]
	mov	r9, r12
	mov	r12, qword ptr [r11 + 40]
	mov	rcx, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rcx, r15
	mov	rsi, r14
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r9 + rax - 56]
	mov	r8d, 0
	sbb	r8, qword ptr [r9 + rax - 48]
	sbb	rdi, qword ptr [r9 + rax - 40]
	cmovb	rsi, rdx
	cmp	rsi, rcx
	ja	.LBB0_517
.LBB0_175:                              # %OP3308.MLOAD.contd
	add	r15, qword ptr [r12 + 8]
	mov	rax, qword ptr [r14 + r15 + 16]
	mov	rcx, qword ptr [r14 + r15 + 24]
	mov	rdx, qword ptr [r14 + r15]
	mov	rsi, qword ptr [r14 + r15 + 8]
	vmovaps	xmm0, xmmword ptr [rbx - 96]
	vmovdqa	xmm1, xmmword ptr [rbx - 80]
	movbe	qword ptr [rbx - 80], rsi
	movbe	qword ptr [rbx - 72], rdx
	movbe	qword ptr [rbx - 96], rcx
	movbe	qword ptr [rbx - 88], rax
	vmovdqa	xmmword ptr [rbx - 48], xmm1
	vmovaps	xmmword ptr [rbx - 64], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_32] # xmm0 = [8814,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	mov	ecx, 8814
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB0_1546
.Ltmp7:                                 # Block address taken
.LBB0_176:                              # %OP1443.ISZERO
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	r8, qword ptr [r12 + rax - 24]
	or	r8, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_387
.LBB0_177:                              # %OP1455.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	jne	.LBB0_564
# %bb.178:                              # %OP1461.MLOAD.contd
	mov	rsi, r15
	add	rsi, r12
	add	r13, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	shl	rax, 5
	mov	qword ptr [r12 + r14], rcx
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_439
.LBB0_179:                              # %OP1472.JUMPDEST
	lea	rax, [r13 - 2]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	mov	r15, qword ptr [r12 + rax]
	mov	r9, r13
	mov	r13, qword ptr [r11 + 40]
	mov	rcx, qword ptr [r13 + 16]
	mov	rbx, qword ptr [r13 + 48]
	sub	rcx, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r12 + rax + 8]
	mov	r8d, 0
	sbb	r8, qword ptr [r12 + rax + 16]
	sbb	rdi, qword ptr [r12 + rax + 24]
	cmovb	rsi, rdx
	lea	r14, [r12 + rax]
	cmp	rsi, rcx
	ja	.LBB0_518
.LBB0_180:                              # %OP1474.MLOAD.contd
	add	rbx, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r15 + rbx + 16]
	mov	rdx, qword ptr [r15 + rbx + 24]
	mov	rsi, qword ptr [r15 + rbx]
	mov	rdi, qword ptr [r15 + rbx + 8]
	mov	rax, r9
	shl	rax, 5
	movbe	qword ptr [r12 + rax - 144], rdi
	movbe	qword ptr [r12 + rax - 160], rdx
	movbe	qword ptr [r12 + rax - 136], rsi
	movbe	qword ptr [r12 + rax - 152], rcx
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r12 + rax - 112], xmm0
	vmovdqa	xmmword ptr [r12 + rax - 128], xmm0
	add	r9, -3
	mov	cl, 48
	bzhi	rcx, qword ptr [r12 + rax - 248], rcx
	mov	rdx, qword ptr [r12 + rax - 256]
	xor	esi, esi
	sub	rdx, qword ptr [r12 + rax - 416]
	sbb	rcx, qword ptr [r12 + rax - 408]
	mov	edi, 0
	sbb	rdi, qword ptr [r12 + rax - 400]
	sbb	rsi, qword ptr [r12 + rax - 392]
	mov	r8, qword ptr [r12 + rax - 192]
	mov	r13, r9
	mov	r9, qword ptr [r12 + rax - 184]
	mov	r10, qword ptr [r12 + rax - 168]
	mov	r11, qword ptr [r12 + rax - 176]
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	cmp	rdx, r8
	sbb	rcx, r9
	sbb	rdi, r11
	sbb	rsi, r10
	setb	cl
	movzx	ecx, cl
	vmovdqu	xmmword ptr [r12 + rax - 88], xmm0
	mov	qword ptr [r12 + rax - 96], rcx
	mov	qword ptr [r12 + rax - 72], 0
	jae	.LBB0_182
.LBB0_181:                              # %OP1494.JUMPDEST
	lea	rbx, [r13 + 1]
	shl	r13, 5
	mov	rcx, qword ptr [r12 + r13 - 296]
	mov	rdx, qword ptr [r12 + r13 - 304]
	mov	rsi, qword ptr [r12 + r13 - 320]
	mov	rdi, qword ptr [r12 + r13 - 312]
	mov	r8, rbx
	shl	r8, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_95] # ymm0 = [18446744073709551615,281474976710655,0,0]
	vmovdqu	ymmword ptr [r12 + r13 + 64], ymm0
	mov	r9b, 48
	bzhi	r9, qword ptr [r12 + r13 - 152], r9
	sub	rsi, qword ptr [r12 + r13 - 160]
	sbb	rdi, r9
	sbb	rdx, 0
	sbb	rcx, 0
	mov	r9, qword ptr [r12 + r13 - 88]
	mov	r10, qword ptr [r12 + r13 - 72]
	mov	r11, qword ptr [r12 + r13 - 96]
	mov	r14, qword ptr [r12 + r13 - 80]
	mov	qword ptr [r12 + r8 + 16], r14
	mov	qword ptr [r12 + r8], r11
	mov	qword ptr [r12 + r8 + 24], r10
	mov	qword ptr [r12 + r8 + 8], r9
	add	rsi, r11
	adc	rdi, r9
	adc	rdx, r14
	adc	rcx, r10
	mov	qword ptr [r12 + r13], rsi
	mov	qword ptr [r12 + r13 + 8], rdi
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13 + 24], rcx
	jmp	.LBB0_183
.LBB0_182:                              # %OP1491.PUSH1
	shl	r13, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
.LBB0_183:                              # %OP1502.JUMPDEST
	mov	r11, rbx
	shl	r11, 5
	vmovdqu	ymm0, ymmword ptr [r12 + r11 - 32]
	vmovdqu	ymmword ptr [r12 + r11 - 64], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r12 + r11 - 16], xmm0
	vmovdqa	xmmword ptr [r12 + r11 - 32], xmm0
	lea	r13, [rbx + 1]
	mov	r14, r13
	shl	r14, 5
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_95] # ymm1 = [18446744073709551615,281474976710655,0,0]
	vmovdqu	ymmword ptr [r12 + r11 + 64], ymm1
	mov	al, 48
	bzhi	rdx, qword ptr [r12 + r11 - 152], rax
	mov	rax, qword ptr [r12 + r11 - 160]
	xor	esi, esi
	sub	rax, qword ptr [r12 + r11 - 320]
	sbb	rdx, qword ptr [r12 + r11 - 312]
	mov	r10d, 0
	sbb	r10, qword ptr [r12 + r11 - 304]
	sbb	rsi, qword ptr [r12 + r11 - 296]
	mov	r9, qword ptr [r12 + r11 - 96]
	mov	rdi, qword ptr [r12 + r11 - 88]
	mov	rcx, qword ptr [r12 + r11 - 72]
	mov	r8, qword ptr [r12 + r11 - 80]
	mov	qword ptr [r12 + r14], r9
	mov	qword ptr [r12 + r14 + 16], r8
	mov	qword ptr [r12 + r14 + 24], rcx
	mov	qword ptr [r12 + r14 + 8], rdi
	cmp	rax, r9
	mov	r14, rdx
	sbb	r14, rdi
	mov	r14, r10
	sbb	r14, r8
	mov	r14, rsi
	sbb	r14, rcx
	setb	r14b
	movzx	r14d, r14b
	vmovdqu	xmmword ptr [r12 + r11 + 8], xmm0
	mov	qword ptr [r12 + r11], r14
	mov	qword ptr [r12 + r11 + 24], 0
	jae	.LBB0_186
# %bb.184:
	mov	r11, r13
	mov	r13, rbx
.LBB0_185:                              # %OP1518.JUMPDEST
	shl	r13, 5
	mov	r14, r11
	shl	r14, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_95] # ymm0 = [18446744073709551615,281474976710655,0,0]
	vmovdqu	ymmword ptr [r12 + r13 + 64], ymm0
	mov	qword ptr [r12 + r14 + 16], r8
	mov	qword ptr [r12 + r14], r9
	mov	qword ptr [r12 + r14 + 8], rdi
	mov	qword ptr [r12 + r14 + 24], rcx
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r8, r10
	sbb	rcx, rsi
	mov	qword ptr [r12 + r13], r9
	mov	qword ptr [r12 + r13 + 16], r8
	mov	qword ptr [r12 + r13 + 8], rdi
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	r13, r11
	jmp	.LBB0_187
.LBB0_186:                              # %OP1515.PUSH1
	add	r11, r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11], ymm0
.LBB0_187:                              # %OP1526.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	mov	rdi, qword ptr [r12 + rax - 16]
	mov	rsi, qword ptr [r12 + rax - 8]
	mov	qword ptr [r12 + rax - 40], rsi
	mov	qword ptr [r12 + rax - 48], rdi
	mov	qword ptr [r12 + rax - 56], rdx
	mov	qword ptr [r12 + rax - 64], rcx
	mov	r8, qword ptr [r12 + rax - 96]
	mov	r9, qword ptr [r12 + rax - 88]
	or	r9, qword ptr [r12 + rax - 72]
	or	r8, qword ptr [r12 + rax - 80]
	xor	r10d, r10d
	or	r8, r9
	setne	r10b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], r10
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], r10
	mov	qword ptr [r12 + rax + 24], 0
	jne	.LBB0_189
# %bb.188:                              # %OP1535.POP
	add	rax, r12
	mov	qword ptr [rax], rcx
	mov	qword ptr [rax + 8], rdx
	mov	qword ptr [rax + 16], rdi
	mov	qword ptr [rax + 24], rsi
	or	rcx, rdi
	or	rdx, rsi
	xor	esi, esi
	or	rdx, rcx
	setne	sil
	vmovdqu	xmmword ptr [rax - 24], xmm0
	mov	qword ptr [rax - 32], rsi
	mov	qword ptr [rax - 8], 0
.LBB0_189:                              # %OP1539.JUMPDEST.loopexit
	mov	r14, r13
	dec	r13
	mov	r15, r13
	shl	r13, 5
	mov	rax, qword ptr [r12 + r13]
	mov	rcx, qword ptr [r12 + r13 + 8]
	or	rcx, qword ptr [r12 + r13 + 24]
	or	rax, qword ptr [r12 + r13 + 16]
	or	rax, rcx
	je	.LBB0_440
# %bb.190:
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, r15
.LBB0_191:                              # %OP1580.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_106] # xmm0 = [3081,0,0,0]
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_104] # xmm0 = [3051,0,0,0]
	vmovups	ymmword ptr [r12 + rax + 64], ymm0
	vmovups	ymm0, ymmword ptr [r12 + rax - 64]
	vmovups	ymmword ptr [r12 + rax + 96], ymm0
	add	r13, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_105] # xmm0 = [3,0,0,0]
	vmovups	ymmword ptr [r12 + rax + 128], ymm0
	mov	rcx, r13
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_39] # xmm0 = [8680,0]
	vmovdqu	ymmword ptr [r12 + rax + 192], ymm0
	vmovdqu	ymmword ptr [r12 + rcx], ymm0
	mov	ecx, 8680
	xor	eax, eax
.LBB0_192:                              # %dynamic_jump_table.preheader
	xor	r14d, r14d
	xor	esi, esi
	jmp	.LBB0_1546
.Ltmp8:                                 # Block address taken
.LBB0_193:                              # %OP2127.ISZERO
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, rdx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_382
# %bb.194:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
.LBB0_195:                              # %OP2139.JUMPDEST
	lea	r15, [r13 - 3]
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx - 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.196:                              # %OP2145.MLOAD.contd
	add	rbx, r12
	add	r13, -2
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx - 112], rsi
	mov	qword ptr [rbx - 104], rdx
	mov	qword ptr [rbx - 128], rax
	mov	qword ptr [rbx - 120], rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r15, 5
	mov	r14, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	shl	r13, 5
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [rbx - 16], 0
	mov	qword ptr [rbx - 24], 0
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [r12 + r13], rdx
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [r12 + r13 + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_254
# %bb.197:
	mov	r13, r14
.LBB0_198:                              # %OP2156.JUMPDEST
	lea	r15, [r13 - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rcx, qword ptr [r12 + r14 - 40]
	mov	rdx, qword ptr [r12 + r14 - 48]
	mov	rdi, qword ptr [r12 + r14 - 64]
	mov	rsi, qword ptr [r12 + r14 - 56]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.199:                              # %OP2158.MLOAD.contd
	add	r14, r12
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 - 48], rsi
	mov	qword ptr [r14 - 64], rcx
	mov	qword ptr [r14 - 40], rax
	mov	qword ptr [r14 - 56], rdx
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 7
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	lea	rsi, [r14 - 32]
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.200:                              # %OP2161.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	lea	r15, [r13 + 2]
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.201:                              # %OP2163.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.202:                              # %OP2167.ADDRESS
	add	rbx, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 48]
	mov	rsi, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 120], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.203:                              # %OP2172.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14 + 32]
	vmovdqa	xmm1, xmmword ptr [r14 + 48]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 40], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.204:                              # %OP2173.MLOAD.contd
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [r14 - 64]
	mov	rsi, qword ptr [r14 - 56]
	mov	rdi, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 80], r8
	mov	qword ptr [r14 - 72], rdi
	mov	qword ptr [r14 - 96], rdx
	mov	qword ptr [r14 - 88], rsi
	mov	qword ptr [r14 - 48], 0
	mov	qword ptr [r14 - 40], 0
	mov	qword ptr [r14 - 64], 0
	mov	qword ptr [r14 - 56], 0
	mov	rdx, qword ptr [r14 - 24]
	mov	rdi, qword ptr [r14 - 32]
	mov	esi, dword ptr [r14 - 16]
	mov	qword ptr [r14 - 16], rsi
	mov	qword ptr [r14 - 8], 0
	mov	r8, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14 + 16]
	mov	r10, qword ptr [r14 + 8]
	mov	r11, qword ptr [r14]
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14], 1889567281
	mov	qword ptr [r14 + 8], 0
	mov	r15, r11
	add	r15, 36
	mov	qword ptr [r14 + 32], r15
	mov	r15, r10
	adc	r15, 0
	mov	qword ptr [r14 + 40], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [r14 + 48], r15
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [r14 + 56], r15
	mov	r15, qword ptr [rbx + 24]
	mov	rbx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 80], 0
	mov	qword ptr [r14 + 88], 0
	mov	qword ptr [r14 + 64], 32
	mov	qword ptr [r14 + 72], 0
	mov	qword ptr [r14 + 112], rbx
	mov	qword ptr [r14 + 120], r15
	mov	qword ptr [r14 + 96], rax
	mov	qword ptr [r14 + 104], rcx
	sub	r11, rax
	sbb	r10, rcx
	sbb	r9, rbx
	sbb	r8, r15
	add	r11, 36
	mov	qword ptr [r14 + 128], r11
	adc	r10, 0
	mov	qword ptr [r14 + 136], r10
	adc	r9, 0
	mov	qword ptr [r14 + 144], r9
	adc	r8, 0
	mov	qword ptr [r14 + 152], r8
	mov	qword ptr [r14 + 176], rbx
	mov	qword ptr [r14 + 184], r15
	mov	qword ptr [r14 + 160], rax
	mov	qword ptr [r14 + 168], rcx
	mov	qword ptr [r14 + 192], rdi
	mov	qword ptr [r14 + 200], rdx
	mov	qword ptr [r14 + 208], rsi
	mov	qword ptr [r14 + 216], 0
	mov	qword ptr [r14 + 224], rdi
	mov	qword ptr [r14 + 232], rdx
	add	r13, 8
	mov	qword ptr [r14 + 240], rsi
	lea	rbx, [r14 + 224]
	mov	qword ptr [r14 + 248], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.205:                              # %OP2204.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_462
# %bb.206:
	mov	r11, r15
.LBB0_207:                              # %OP2212.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.208:
	lea	rax, [rip + .Ltmp5]
	jmp	.LBB0_1561
.Ltmp9:                                 # Block address taken
.LBB0_209:                              # %OP2929.ISZERO
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, rdx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_382
# %bb.210:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
.LBB0_211:                              # %OP2941.JUMPDEST
	lea	r15, [r13 - 3]
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx - 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.212:                              # %OP2947.MLOAD.contd
	add	rbx, r12
	add	r13, -2
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx - 112], rsi
	mov	qword ptr [rbx - 104], rdx
	mov	qword ptr [rbx - 128], rax
	mov	qword ptr [rbx - 120], rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r15, 5
	mov	r14, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	shl	r13, 5
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [rbx - 16], 0
	mov	qword ptr [rbx - 24], 0
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [r12 + r13], rdx
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [r12 + r13 + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_254
# %bb.213:
	mov	r13, r14
.LBB0_214:                              # %OP2958.JUMPDEST
	lea	r15, [r13 - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rcx, qword ptr [r12 + r14 - 40]
	mov	rdx, qword ptr [r12 + r14 - 48]
	mov	rdi, qword ptr [r12 + r14 - 64]
	mov	rsi, qword ptr [r12 + r14 - 56]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.215:                              # %OP2960.MLOAD.contd
	add	r14, r12
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 - 48], rsi
	mov	qword ptr [r14 - 64], rcx
	mov	qword ptr [r14 - 40], rax
	mov	qword ptr [r14 - 56], rdx
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 64
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	lea	r15, [r13 + 1]
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 64
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.216:                              # %OP2963.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.217:                              # %OP2967.ADDRESS
	add	rbx, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 88], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.218:                              # %OP2972.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.219:                              # %OP2973.MLOAD.contd
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [r14 - 56]
	mov	rsi, qword ptr [r14 - 64]
	mov	rdi, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 208], r8
	mov	qword ptr [r14 - 200], rdi
	mov	qword ptr [r14 - 224], rsi
	mov	qword ptr [r14 - 216], rdx
	mov	edx, dword ptr [r14 - 240]
	mov	rsi, qword ptr [r14 - 256]
	mov	rdi, qword ptr [r14 - 248]
	mov	qword ptr [r14 - 64], rsi
	mov	qword ptr [r14 - 56], rdi
	mov	qword ptr [r14 - 48], rdx
	mov	qword ptr [r14 - 40], 0
	mov	r8, qword ptr [r14 - 8]
	mov	r9, qword ptr [r14 - 16]
	mov	r10, qword ptr [r14 - 24]
	mov	r11, qword ptr [r14 - 32]
	mov	qword ptr [r14 - 16], 0
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 - 32], 1889567281
	mov	qword ptr [r14 - 24], 0
	mov	r15, r11
	add	r15, 36
	mov	qword ptr [r14], r15
	mov	r15, r10
	adc	r15, 0
	mov	qword ptr [r14 + 8], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [r14 + 16], r15
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [r14 + 24], r15
	mov	r15, qword ptr [rbx + 24]
	mov	rbx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	mov	qword ptr [r14 + 32], 32
	mov	qword ptr [r14 + 40], 0
	mov	qword ptr [r14 + 80], rbx
	mov	qword ptr [r14 + 88], r15
	mov	qword ptr [r14 + 64], rax
	mov	qword ptr [r14 + 72], rcx
	sub	r11, rax
	sbb	r10, rcx
	sbb	r9, rbx
	sbb	r8, r15
	add	r11, 36
	mov	qword ptr [r14 + 96], r11
	adc	r10, 0
	mov	qword ptr [r14 + 104], r10
	adc	r9, 0
	mov	qword ptr [r14 + 112], r9
	adc	r8, 0
	mov	qword ptr [r14 + 120], r8
	mov	qword ptr [r14 + 144], rbx
	mov	qword ptr [r14 + 152], r15
	mov	qword ptr [r14 + 128], rax
	mov	qword ptr [r14 + 136], rcx
	mov	qword ptr [r14 + 160], rsi
	mov	qword ptr [r14 + 168], rdi
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], 0
	mov	qword ptr [r14 + 192], rsi
	mov	qword ptr [r14 + 200], rdi
	add	r13, 7
	mov	qword ptr [r14 + 208], rdx
	lea	rbx, [r14 + 192]
	mov	qword ptr [r14 + 216], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.220:                              # %OP3001.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_1573
# %bb.221:
	mov	r11, r15
.LBB0_222:                              # %OP3009.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.223:
	lea	rax, [rip + .Ltmp10]
	jmp	.LBB0_1561
.Ltmp1:                                 # Block address taken
.LBB0_224:                              # %OP1359.ISZERO
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, rdx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_382
# %bb.225:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
.LBB0_226:                              # %OP1371.JUMPDEST
	lea	r15, [r13 - 3]
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx - 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.227:                              # %OP1377.MLOAD.contd
	add	rbx, r12
	add	r13, -2
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx - 112], rsi
	mov	qword ptr [rbx - 104], rdx
	mov	qword ptr [rbx - 128], rax
	mov	qword ptr [rbx - 120], rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r15, 5
	mov	r14, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	shl	r13, 5
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [rbx - 16], 0
	mov	qword ptr [rbx - 24], 0
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [r12 + r13], rdx
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [r12 + r13 + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_254
# %bb.228:
	mov	r13, r14
.LBB0_229:                              # %OP1388.JUMPDEST
	lea	r15, [r13 - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rcx, qword ptr [r12 + r14 - 40]
	mov	rdx, qword ptr [r12 + r14 - 48]
	mov	rdi, qword ptr [r12 + r14 - 64]
	mov	rsi, qword ptr [r12 + r14 - 56]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.230:                              # %OP1390.MLOAD.contd
	add	r14, r12
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 - 48], rsi
	mov	qword ptr [r14 - 64], rcx
	mov	qword ptr [r14 - 40], rax
	mov	qword ptr [r14 - 56], rdx
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 64
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	lea	r15, [r13 + 1]
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 64
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.231:                              # %OP1393.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.232:                              # %OP1397.ADDRESS
	add	rbx, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 88], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.233:                              # %OP1402.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.234:                              # %OP1403.MLOAD.contd
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [r14 - 56]
	mov	rsi, qword ptr [r14 - 64]
	mov	rdi, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 176], r8
	mov	qword ptr [r14 - 168], rdi
	mov	qword ptr [r14 - 192], rsi
	mov	qword ptr [r14 - 184], rdx
	mov	edx, dword ptr [r14 - 80]
	mov	rsi, qword ptr [r14 - 96]
	mov	rdi, qword ptr [r14 - 88]
	mov	qword ptr [r14 - 64], rsi
	mov	qword ptr [r14 - 56], rdi
	mov	qword ptr [r14 - 48], rdx
	mov	qword ptr [r14 - 40], 0
	mov	r8, qword ptr [r14 - 8]
	mov	r9, qword ptr [r14 - 16]
	mov	r10, qword ptr [r14 - 24]
	mov	r11, qword ptr [r14 - 32]
	mov	qword ptr [r14 - 16], 0
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 - 32], 1889567281
	mov	qword ptr [r14 - 24], 0
	mov	r15, r11
	add	r15, 36
	mov	qword ptr [r14], r15
	mov	r15, r10
	adc	r15, 0
	mov	qword ptr [r14 + 8], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [r14 + 16], r15
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [r14 + 24], r15
	mov	r15, qword ptr [rbx + 24]
	mov	rbx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	mov	qword ptr [r14 + 32], 32
	mov	qword ptr [r14 + 40], 0
	mov	qword ptr [r14 + 80], rbx
	mov	qword ptr [r14 + 88], r15
	mov	qword ptr [r14 + 64], rax
	mov	qword ptr [r14 + 72], rcx
	sub	r11, rax
	sbb	r10, rcx
	sbb	r9, rbx
	sbb	r8, r15
	add	r11, 36
	mov	qword ptr [r14 + 96], r11
	adc	r10, 0
	mov	qword ptr [r14 + 104], r10
	adc	r9, 0
	mov	qword ptr [r14 + 112], r9
	adc	r8, 0
	mov	qword ptr [r14 + 120], r8
	mov	qword ptr [r14 + 144], rbx
	mov	qword ptr [r14 + 152], r15
	mov	qword ptr [r14 + 128], rax
	mov	qword ptr [r14 + 136], rcx
	mov	qword ptr [r14 + 160], rsi
	mov	qword ptr [r14 + 168], rdi
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], 0
	mov	qword ptr [r14 + 192], rsi
	mov	qword ptr [r14 + 200], rdi
	add	r13, 7
	mov	qword ptr [r14 + 208], rdx
	lea	rbx, [r14 + 192]
	mov	qword ptr [r14 + 216], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.235:                              # %OP1431.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_1573
# %bb.236:
	mov	r11, r15
.LBB0_237:                              # %OP1439.JUMPDEST
	mov	rax, r13
	mov	rcx, qword ptr [rcx + 8]
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rcx
	mov	qword ptr [r12 + rax - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rax]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.238:
	lea	rax, [rip + .Ltmp7]
	jmp	.LBB0_1561
.Ltmp11:                                # Block address taken
.LBB0_239:                              # %OP2631.ISZERO
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, rdx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_382
# %bb.240:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
.LBB0_241:                              # %OP2643.JUMPDEST
	lea	r15, [r13 - 3]
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx - 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.242:                              # %OP2649.MLOAD.contd
	add	rbx, r12
	add	r13, -2
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx - 112], rsi
	mov	qword ptr [rbx - 104], rdx
	mov	qword ptr [rbx - 128], rax
	mov	qword ptr [rbx - 120], rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r15, 5
	mov	r14, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	shl	r13, 5
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [rbx - 16], 0
	mov	qword ptr [rbx - 24], 0
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [r12 + r13], rdx
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [r12 + r13 + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_254
# %bb.243:
	mov	r13, r14
.LBB0_244:                              # %OP2660.JUMPDEST
	lea	r15, [r13 - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rcx, qword ptr [r12 + r14 - 40]
	mov	rdx, qword ptr [r12 + r14 - 48]
	mov	rdi, qword ptr [r12 + r14 - 64]
	mov	rsi, qword ptr [r12 + r14 - 56]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.245:                              # %OP2662.MLOAD.contd
	add	r14, r12
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 - 48], rsi
	mov	qword ptr [r14 - 64], rcx
	mov	qword ptr [r14 - 40], rax
	mov	qword ptr [r14 - 56], rdx
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 64
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	lea	r15, [r13 + 1]
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 64
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.246:                              # %OP2665.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.247:                              # %OP2669.ADDRESS
	add	rbx, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 88], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.248:                              # %OP2674.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.249:                              # %OP2675.MLOAD.contd
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [r14 - 56]
	mov	rsi, qword ptr [r14 - 64]
	mov	rdi, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 80], r8
	mov	qword ptr [r14 - 72], rdi
	mov	qword ptr [r14 - 96], rsi
	mov	qword ptr [r14 - 88], rdx
	mov	qword ptr [r14 - 48], 0
	mov	qword ptr [r14 - 40], 0
	mov	qword ptr [r14 - 64], 0
	mov	qword ptr [r14 - 56], 0
	mov	edx, dword ptr [r14 - 112]
	mov	rsi, qword ptr [r14 - 128]
	mov	rdi, qword ptr [r14 - 120]
	mov	r8, qword ptr [r14 - 8]
	mov	r9, qword ptr [r14 - 16]
	mov	r10, qword ptr [r14 - 24]
	mov	r11, qword ptr [r14 - 32]
	mov	qword ptr [r14 - 32], rsi
	mov	qword ptr [r14 - 24], rdi
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14], 1889567281
	mov	qword ptr [r14 + 8], 0
	mov	r15, r11
	add	r15, 36
	mov	qword ptr [r14 + 32], r15
	mov	r15, r10
	adc	r15, 0
	mov	qword ptr [r14 + 40], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [r14 + 48], r15
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [r14 + 56], r15
	mov	r15, qword ptr [rbx + 24]
	mov	rbx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 80], 0
	mov	qword ptr [r14 + 88], 0
	mov	qword ptr [r14 + 64], 32
	mov	qword ptr [r14 + 72], 0
	mov	qword ptr [r14 + 112], rbx
	mov	qword ptr [r14 + 120], r15
	mov	qword ptr [r14 + 96], rax
	mov	qword ptr [r14 + 104], rcx
	sub	r11, rax
	sbb	r10, rcx
	sbb	r9, rbx
	sbb	r8, r15
	add	r11, 36
	mov	qword ptr [r14 + 128], r11
	adc	r10, 0
	mov	qword ptr [r14 + 136], r10
	adc	r9, 0
	mov	qword ptr [r14 + 144], r9
	adc	r8, 0
	mov	qword ptr [r14 + 152], r8
	mov	qword ptr [r14 + 176], rbx
	mov	qword ptr [r14 + 184], r15
	mov	qword ptr [r14 + 160], rax
	mov	qword ptr [r14 + 168], rcx
	mov	qword ptr [r14 + 192], rsi
	mov	qword ptr [r14 + 200], rdi
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 216], 0
	mov	qword ptr [r14 + 224], rsi
	mov	qword ptr [r14 + 232], rdi
	add	r13, 8
	mov	qword ptr [r14 + 240], rdx
	lea	rbx, [r14 + 224]
	mov	qword ptr [r14 + 248], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.250:                              # %OP2704.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	r8, qword ptr [rbp - 160]       # 8-byte Reload
	je	.LBB0_462
# %bb.251:
	mov	r11, r15
.LBB0_252:                              # %OP2712.JUMPDEST
	mov	rax, qword ptr [r8 + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.253:
	lea	rax, [rip + .Ltmp12]
	jmp	.LBB0_1561
.LBB0_254:                              # %OP1385.PUSH1
	add	r12, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	add	rbx, -64
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB0_528
.LBB0_255:                              # %select.end27010
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, r14
	jmp	.LBB0_1577
.Ltmp13:                                # Block address taken
.LBB0_256:                              # %OP4123.SWAP2
	mov	rsi, r13
	shl	rsi, 5
	vmovdqu	ymm0, ymmword ptr [r12 + rsi - 32]
	vmovdqu	ymmword ptr [r12 + rsi - 96], ymm0
	mov	r14, qword ptr [r11 + 24]
	lea	r15, [r13 + 1]
	mov	rbx, r15
	shl	rbx, 5
	xor	eax, eax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rsi - 56], xmm0
	mov	qword ptr [r12 + rsi - 64], r14
	mov	qword ptr [r12 + rsi - 40], 0
	vmovdqu	xmmword ptr [r12 + rsi - 24], xmm0
	mov	qword ptr [r12 + rsi - 32], r14
	mov	qword ptr [r12 + rsi - 8], 0
	mov	qword ptr [r12 + rbx], r14
	mov	qword ptr [r12 + rbx + 24], 0
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx + 8], 0
	vmovdqu	xmmword ptr [r12 + rsi + 8], xmm0
	mov	qword ptr [r12 + rsi + 24], 0
	test	r14, r14
	sete	al
	mov	qword ptr [r12 + rsi], rax
	je	.LBB0_397
# %bb.257:                              # %OP4133.PUSH1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	rsi, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rsi], ymm0
	mov	r13, qword ptr [r11 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	cmp	rax, 95
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	jbe	.LBB0_542
# %bb.258:
	xor	r15d, r15d
	mov	rdi, r13
.LBB0_259:                              # %OP4134.MLOAD.contd
	mov	rdx, qword ptr [r13 + 8]
	mov	rcx, qword ptr [rdx + r12 + 88]
	mov	rax, qword ptr [rdx + r12 + 80]
	mov	r8, qword ptr [rdx + r12 + 64]
	mov	r12, qword ptr [rdx + r12 + 72]
	movbe	qword ptr [rsi - 40], r8
	bswap	r8
	movbe	qword ptr [rsi - 64], rcx
	bswap	rcx
	movbe	qword ptr [rsi - 56], rax
	bswap	rax
	movbe	qword ptr [rsi - 48], r12
	bswap	r12
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	qword ptr [rsi + 80], r15
	mov	qword ptr [rsi + 64], r14
	mov	qword ptr [rsi + 72], r15
	mov	qword ptr [rsi + 88], r15
	add	r14, 63
	adc	r15, 0
	and	r15d, 1
	and	r14, -32
	add	r14, rcx
	adc	r15, rax
	adc	r12, 0
	adc	r8, 0
	mov	qword ptr [rsi], r14
	mov	qword ptr [rsi + 8], r15
	mov	qword ptr [rsi + 16], r12
	mov	qword ptr [rsi + 24], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [rdi + 16]
	mov	r13, qword ptr [rdi + 48]
	sub	rax, r13
	cmp	rax, 95
	jbe	.LBB0_544
.LBB0_260:                              # %OP4147.RETURNDATASIZE
	mov	rax, qword ptr [rdi + 8]
	movbe	qword ptr [rax + r13 + 88], r14
	movbe	qword ptr [rax + r13 + 80], r15
	movbe	qword ptr [rax + r13 + 72], r12
	movbe	qword ptr [rax + r13 + 64], r8
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r11, qword ptr [r14 + 24]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 8], xmm0
	mov	qword ptr [rsi], r11
	mov	qword ptr [rsi + 24], 0
	mov	rcx, qword ptr [rsi - 40]
	mov	rdx, qword ptr [rsi - 48]
	mov	r15, qword ptr [rsi - 64]
	mov	rdi, qword ptr [rsi - 56]
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 24], rcx
	mov	r13, qword ptr [r14 + 40]
	mov	r8, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	r8, r12
	mov	rax, r15
	add	rax, 32
	mov	r9, -1
	cmovb	rax, r9
	xor	r10d, r10d
	neg	rdi
	mov	edi, 0
	sbb	rdi, rdx
	sbb	r10, rcx
	cmovb	rax, r9
	cmp	rax, r8
	ja	.LBB0_545
.LBB0_261:                              # %OP4150.RETURNDATASIZE
	add	r12, qword ptr [r13 + 8]
	movbe	qword ptr [r15 + r12 + 24], r11
	vmovdqu	xmmword ptr [r15 + r12], xmm0
	mov	qword ptr [r15 + r12 + 16], 0
	mov	rax, qword ptr [r14 + 24]
	vmovdqu	xmmword ptr [rsi + 8], xmm0
	mov	qword ptr [rsi], rax
	mov	qword ptr [rsi + 24], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	rax, qword ptr [rsi - 56]
	mov	rcx, qword ptr [rsi - 40]
	mov	rdx, qword ptr [rsi - 64]
	mov	rdi, qword ptr [rsi - 48]
	mov	qword ptr [rsi + 112], rdi
	mov	qword ptr [rsi + 120], rcx
	mov	qword ptr [rsi + 96], rdx
	mov	qword ptr [rsi + 104], rax
	add	rdx, 32
	adc	rax, 0
	adc	rdi, 0
	adc	rcx, 0
	mov	qword ptr [rsi + 64], rdx
	mov	qword ptr [rsi + 72], rax
	mov	qword ptr [rsi + 80], rdi
	mov	qword ptr [rsi + 88], rcx
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_returndatacopy@PLT
	test	al, al
	jne	.LBB0_457
# %bb.262:
	mov	r11, r14
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB0_263:                              # %OP4162.JUMPDEST
	mov	rsi, r13
	shl	rsi, 5
	mov	r15, qword ptr [r12 + rsi - 64]
	mov	rdi, qword ptr [r12 + rsi - 56]
	mov	rdx, qword ptr [r12 + rsi - 48]
	mov	rcx, qword ptr [r12 + rsi - 40]
	mov	qword ptr [r12 + rsi - 104], rcx
	mov	qword ptr [r12 + rsi - 112], rdx
	mov	qword ptr [r12 + rsi - 120], rdi
	mov	qword ptr [r12 + rsi - 128], r15
	lea	r14, [r13 - 2]
	mov	rax, qword ptr [r12 + rsi - 96]
	mov	r8, qword ptr [r12 + rsi - 88]
	mov	r9, qword ptr [r12 + rsi - 80]
	mov	r10, qword ptr [r12 + rsi - 72]
	mov	qword ptr [r12 + rsi - 136], r10
	mov	qword ptr [r12 + rsi - 144], r9
	mov	qword ptr [r12 + rsi - 152], r8
	mov	qword ptr [r12 + rsi - 160], rax
	mov	rbx, r14
	shl	rbx, 5
	or	r8, r10
	or	rax, r9
	xor	r9d, r9d
	or	rax, r8
	sete	r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rbx + 8], xmm0
	mov	qword ptr [r12 + rbx], r9
	mov	qword ptr [r12 + rbx + 24], 0
	je	.LBB0_271
# %bb.264:                              # %OP4173.POP
	dec	r13
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	rsi, r12
	add	rbx, r12
	mov	qword ptr [rsi - 96], r15
	mov	qword ptr [rsi - 88], rdi
	mov	qword ptr [rsi - 80], rdx
	mov	qword ptr [rsi - 72], rcx
	mov	r13, qword ptr [r11 + 40]
	mov	r8, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	r8, r12
	mov	rax, r15
	add	rax, 32
	mov	r9, -1
	cmovb	rax, r9
	xor	r10d, r10d
	neg	rdi
	mov	edi, 0
	sbb	rdi, rdx
	sbb	r10, rcx
	cmovb	rax, r9
	cmp	rax, r8
	ja	.LBB0_563
.LBB0_265:                              # %OP4175.MLOAD.contd
	add	r12, qword ptr [r13 + 8]
	mov	rax, qword ptr [r15 + r12]
	mov	rcx, qword ptr [r15 + r12 + 8]
	or	rcx, qword ptr [r15 + r12 + 24]
	or	rax, qword ptr [r15 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi - 88], xmm0
	mov	qword ptr [rsi - 96], rdx
	mov	qword ptr [rsi - 72], 0
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	je	.LBB0_271
# %bb.266:                              # %OP4180.POP
	mov	rcx, qword ptr [rsi - 128]
	mov	rdx, qword ptr [rsi - 120]
	mov	r10, rcx
	add	r10, 32
	mov	rdi, -1
	mov	rax, r10
	cmovb	rax, rdi
	mov	rdi, qword ptr [rsi - 104]
	mov	r8, qword ptr [rsi - 112]
	mov	r13, r11
	mov	r11, rdx
	adc	r11, 0
	mov	r14, r8
	adc	r14, 0
	mov	r12, rdi
	adc	r12, 0
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	shl	r9, 5
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r15 + r9], 32
	mov	qword ptr [r15 + r9 + 16], 0
	mov	qword ptr [r15 + r9 + 8], 0
	mov	qword ptr [r15 + r9 + 24], 0
	mov	qword ptr [rsi - 96], r10
	mov	qword ptr [rsi - 88], r11
	mov	qword ptr [rsi - 80], r14
	mov	qword ptr [rsi - 72], r12
	mov	qword ptr [rsi - 48], r8
	mov	qword ptr [rsi - 40], rdi
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rsi - 64], rcx
	mov	qword ptr [rsi - 56], rdx
	mov	r13, qword ptr [r13 + 40]
	mov	r10, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	r10, r12
	xor	r11d, r11d
	neg	rdx
	mov	edx, 0
	sbb	rdx, r8
	sbb	r11, rdi
	mov	rcx, -1
	cmovb	rax, rcx
	lea	r14, [r15 + r9]
	cmp	rax, r10
	ja	.LBB0_522
.LBB0_267:                              # %OP4186.MLOAD.contd
	add	r12, qword ptr [r13 + 8]
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rdi + r12 + 24]
	mov	rcx, qword ptr [rdi + r12 + 16]
	mov	rdx, qword ptr [rdi + r12]
	mov	rdi, qword ptr [rdi + r12 + 8]
	movbe	qword ptr [rbx], rax
	movbe	qword ptr [rbx + 16], rdi
	movbe	qword ptr [rbx + 24], rdx
	movbe	qword ptr [rbx + 8], rcx
	movbe	qword ptr [rsi + 24], rdx
	bswap	rdx
	movbe	qword ptr [rsi + 16], rdi
	bswap	rdi
	movbe	qword ptr [rsi + 8], rcx
	movbe	qword ptr [rsi], rax
	bswap	rcx
	bswap	rax
	xor	r8d, r8d
	mov	r9d, 31
	cmp	r9, rax
	mov	eax, 0
	sbb	rax, rcx
	mov	eax, 0
	sbb	rax, rdi
	sbb	r8, rdx
	setb	al
	movzx	eax, al
	mov	qword ptr [r14], rax
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r14 + 16], 0
	jae	.LBB0_1575
# %bb.268:
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_269:                              # %OP4196.JUMPDEST
	lea	r14, [rax - 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	mov	r15, qword ptr [r12 + rax - 64]
	mov	r13, qword ptr [r11 + 40]
	mov	rcx, qword ptr [r13 + 16]
	mov	r9, r12
	mov	r12, qword ptr [r13 + 48]
	sub	rcx, r12
	mov	rsi, r15
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r9 + rax - 56]
	mov	r8d, 0
	sbb	r8, qword ptr [r9 + rax - 48]
	sbb	rdi, qword ptr [r9 + rax - 40]
	cmovb	rsi, rdx
	cmp	rsi, rcx
	ja	.LBB0_523
.LBB0_270:                              # %OP4198.MLOAD.contd
	add	r12, qword ptr [r13 + 8]
	mov	rax, qword ptr [r15 + r12 + 16]
	mov	rcx, qword ptr [r15 + r12 + 24]
	mov	rdx, qword ptr [r15 + r12]
	mov	rsi, qword ptr [r15 + r12 + 8]
	movbe	qword ptr [rbx - 48], rsi
	movbe	qword ptr [rbx - 40], rdx
	movbe	qword ptr [rbx - 64], rcx
	movbe	qword ptr [rbx - 56], rax
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
.LBB0_271:                              # %OP4199.JUMPDEST
	lea	r13, [r14 - 1]
	mov	rax, r13
	shl	rax, 5
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [r12 + rax]
	mov	rdx, qword ptr [r12 + rax + 8]
	or	rdx, qword ptr [r12 + rax + 24]
	or	rcx, qword ptr [r12 + rax + 16]
	or	rcx, rdx
	je	.LBB0_448
.LBB0_272:                              # %OP4233.JUMPDEST
	add	r13, -6
	mov	rax, r13
	shl	rax, 5
	jmp	.LBB0_313
.Ltmp12:                                # Block address taken
.LBB0_273:                              # %OP2716.ISZERO
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, rdx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_382
# %bb.274:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
.LBB0_275:                              # %OP2728.JUMPDEST
	lea	r15, [r13 - 3]
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx - 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.276:                              # %OP2734.MLOAD.contd
	add	rbx, r12
	add	r13, -2
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx - 112], rsi
	mov	qword ptr [rbx - 104], rdx
	mov	qword ptr [rbx - 128], rax
	mov	qword ptr [rbx - 120], rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r15, 5
	mov	rax, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	shl	rax, 5
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [rbx - 16], 0
	mov	qword ptr [rbx - 24], 0
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_402
.LBB0_277:                              # %OP2745.JUMPDEST
	mov	rbx, r13
	shl	rbx, 5
	mov	rcx, qword ptr [r12 + rbx - 40]
	mov	rdx, qword ptr [r12 + rbx - 48]
	mov	rdi, qword ptr [r12 + rbx - 64]
	mov	rsi, qword ptr [r12 + rbx - 56]
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r11
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	jne	.LBB0_548
# %bb.278:                              # %OP2747.MLOAD.contd
	add	rbx, r12
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx - 40], rsi
	mov	qword ptr [rbx - 48], rdx
	mov	qword ptr [rbx - 56], rcx
	mov	qword ptr [rbx - 64], rax
	mov	r8d, dword ptr [rdi + 144]
	movbe	r9, qword ptr [rdi + 136]
	bswap	r8
	shrd	r8, r9, 32
	movbe	rax, qword ptr [rdi + 128]
	shrd	r9, rax, 32
	shr	rax, 32
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	lea	r14, [r13 + 1]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], 0
	mov	r13, r12
	mov	r12, r14
	shl	r12, 5
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r15
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.279:                              # %OP2753.PUSH1
	add	r12, r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 1
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.280:                              # %OP2756.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 8]
	mov	rsi, qword ptr [rbx - 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, r15
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_564
# %bb.281:                              # %OP2759.SLOAD
	mov	r13, r15
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.282:                              # %OP2760.SWAP2
	vmovaps	xmm0, xmmword ptr [rbx + 16]
	vmovdqa	xmm1, xmmword ptr [rbx]
	vmovups	ymm2, ymmword ptr [rbx - 256]
	vmovups	ymm3, ymmword ptr [rbx - 64]
	vmovdqa	xmmword ptr [rbx - 64], xmm1
	vmovaps	xmmword ptr [rbx - 48], xmm0
	vmovups	ymmword ptr [rbx - 96], ymm3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_70] # xmm0 = [5602,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovups	ymmword ptr [r12], ymm2
	add	rbx, -224
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB0_283:                              # %OP4725.JUMPDEST.sink.split
	mov	rax, r13
	shl	rax, 5
	add	r13, 3
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [r12 + rax + 80], rdi
	mov	qword ptr [r12 + rax + 88], rsi
	mov	qword ptr [r12 + rax + 64], rcx
	mov	qword ptr [r12 + rax + 72], rdx
.LBB0_284:                              # %OP4725.JUMPDEST
	mov	r15, r13
	shl	r15, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r15 + 32], ymm0
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	lea	rax, [r13 + 4]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	lea	rbx, [r12 + r15 + 96]
	vmovdqu	ymmword ptr [r12 + r15 + 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_38] # xmm0 = [5,0]
	vmovdqu	ymmword ptr [r12 + r15 + 96], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_693
# %bb.285:                              # %OP4732.SWAP1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 168], r15      # 8-byte Spill
	lea	r13, [r12 + r15]
	add	r13, 64
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	rdi, qword ptr [r13 + 24]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 8], r9
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_87] # xmm0 = [256,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB0_693
# %bb.286:                              # %OP4735.SWAP1_udiv-special-cases
	add	r15, r12
	mov	qword ptr [rbp - 328], r15      # 8-byte Spill
	mov	rsi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	qword ptr [rbp - 184], rbx      # 8-byte Spill
	mov	rdi, qword ptr [rbx + 16]
	mov	rax, qword ptr [r13 + 24]
	mov	r11, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	qword ptr [rbp - 256], r13      # 8-byte Spill
	mov	r14, qword ptr [r13 + 16]
	mov	r13, rax
	mov	rax, r10
	or	rax, rsi
	mov	rcx, r8
	or	rcx, rdi
	or	rcx, rax
	sete	cl
	mov	rax, r9
	or	rax, r13
	mov	rdx, r11
	or	rdx, r14
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, rsi
	lzcnt	rdx, rdi
	add	rdx, 64
	test	rsi, rsi
	cmovne	rdx, rcx
	lzcnt	rcx, r10
	mov	qword ptr [rbp - 224], r8       # 8-byte Spill
	lzcnt	rbx, r8
	add	rbx, 64
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	test	r10, r10
	cmovne	rbx, rcx
	sub	rbx, -128
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rcx, rdi
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	or	rcx, rsi
	cmovne	rbx, rdx
	lzcnt	rcx, r13
	lzcnt	rdx, r14
	add	rdx, 64
	test	r13, r13
	cmovne	rdx, rcx
	lzcnt	rcx, r9
	lzcnt	rsi, r11
	add	rsi, 64
	test	r9, r9
	cmovne	rsi, rcx
	sub	rsi, -128
	mov	rcx, r14
	or	rcx, r13
	cmovne	rsi, rdx
	xor	r8d, r8d
	sub	rbx, rsi
	mov	esi, 0
	sbb	rsi, rsi
	mov	edi, 0
	sbb	rdi, rdi
	mov	r15d, 0
	sbb	r15, r15
	mov	ecx, 255
	cmp	rcx, rbx
	mov	ecx, 0
	sbb	rcx, rsi
	mov	ecx, 0
	sbb	rcx, rdi
	mov	ecx, 0
	sbb	rcx, r15
	setb	cl
	or	cl, al
	mov	r10, r11
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	mov	r11, r14
	cmovne	r11, r8
	mov	r14, r9
	cmovne	r9, r8
	cmove	r8, r10
	jne	.LBB0_465
# %bb.287:                              # %OP4735.SWAP1_udiv-special-cases
	mov	rax, rbx
	xor	rax, 255
	or	rax, rdi
	mov	rcx, rsi
	or	rcx, r15
	or	rcx, rax
	je	.LBB0_465
# %bb.288:                              # %udiv-bb126765
	mov	rax, rbx
	add	rbx, 1
	adc	rsi, 0
	adc	rdi, 0
	adc	r15, 0
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	mov	qword ptr [rbp - 976], r10
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 1008], ymm0
	mov	r9, r14
	mov	qword ptr [rbp - 968], r14
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 960], r10
	mov	qword ptr [rbp - 952], r13
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 960]
	mov	r12, qword ptr [rbp + rax - 952]
	shld	r12, rdx, cl
	mov	r11, rsi
	shlx	rsi, rdx, rcx
	mov	edx, ecx
	not	dl
	mov	r14, r13
	mov	r13, rdi
	mov	rdi, qword ptr [rbp + rax - 976]
	mov	rax, qword ptr [rbp + rax - 968]
	mov	r8, rax
	shr	r8
	shld	rax, rdi, cl
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	shrx	rax, r8, rdx
	or	rax, rsi
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	rax, r11
	mov	qword ptr [rbp - 232], r15      # 8-byte Spill
	or	rax, r15
	mov	rsi, rbx
	mov	qword ptr [rbp - 272], r13      # 8-byte Spill
	or	rsi, r13
	or	rsi, rax
	shlx	r8, rdi, rcx
	je	.LBB0_463
# %bb.289:                              # %udiv-preheader26764
	vmovdqu	ymmword ptr [rbp - 912], ymm0
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbp - 944], rax
	mov	qword ptr [rbp - 936], r9
	mov	qword ptr [rbp - 928], r10
	mov	qword ptr [rbp - 920], r14
	mov	ecx, ebx
	and	cl, 7
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	eax, ebx
	shr	al, 3
	movzx	eax, al
	mov	rdx, r8
	mov	r8, qword ptr [rbp + rax - 920]
	mov	r9, qword ptr [rbp + rax - 928]
	mov	rsi, r9
	shrd	rsi, r8, cl
	mov	rdi, qword ptr [rbp + rax - 944]
	mov	rax, qword ptr [rbp + rax - 936]
	shrx	r10, rax, rcx
	shrx	rbx, r8, rcx
	mov	r8d, ecx
	not	r8b
                                        # kill: def $cl killed $cl killed $rcx
	shrd	rdi, rax, cl
	add	r9, r9
	shlx	rax, r9, r8
	mov	r8, rdx
	or	rax, r10
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	add	r11, -1
	mov	qword ptr [rbp - 136], r11      # 8-byte Spill
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	adc	r15, -1
	mov	qword ptr [rbp - 152], r15      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rcx, -1
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	adc	rcx, -1
	mov	qword ptr [rbp - 176], rcx      # 8-byte Spill
	xor	ecx, ecx
	mov	qword ptr [rbp - 264], rcx      # 8-byte Spill
	xor	ecx, ecx
	xor	r14d, r14d
	xor	r10d, r10d
	xor	r9d, r9d
	mov	r13, qword ptr [rbp - 272]      # 8-byte Reload
	mov	r15, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 280]      # 8-byte Reload
	.p2align	4, 0x90
.LBB0_290:                              # %udiv-do-while26763
                                        # =>This Inner Loop Header: Depth=1
	shld	rbx, rsi, 1
	shld	rsi, rax, 1
	shld	rax, rdi, 1
	shld	rdi, r12, 1
	shld	r12, r11, 1
	or	r12, r9
	shld	r11, rdx, 1
	or	r11, r10
	shld	rdx, r8, 1
	or	rdx, r14
	add	r8, r8
	or	r8, rcx
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	cmp	qword ptr [rbp - 136], rdi      # 8-byte Folded Reload
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	rcx, rax
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	sbb	rcx, rsi
	mov	r9, qword ptr [rbp - 176]       # 8-byte Reload
	sbb	r9, rbx
	sar	r9, 63
	mov	ecx, r9d
	and	ecx, 1
	mov	r10, r9
	and	r10, qword ptr [rbp - 104]      # 8-byte Folded Reload
	mov	r14, r9
	and	r14, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	r8, r9
	and	r8, qword ptr [rbp - 128]       # 8-byte Folded Reload
	and	r9, qword ptr [rbp - 224]       # 8-byte Folded Reload
	sub	rdi, r9
	sbb	rax, r8
	sbb	rsi, r14
	sbb	rbx, r10
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	add	r9, -1
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	adc	r8, -1
	adc	r13, -1
	adc	r15, -1
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	or	r8, r15
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	or	r9, r13
	or	r9, r8
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r14d, 0
	mov	r10d, 0
	mov	r9d, 0
	jne	.LBB0_290
	jmp	.LBB0_464
.LBB0_382:                              # %OP3845.RETURNDATASIZE
	add	r12, rax
	mov	rax, qword ptr [r11 + 24]
	vmovdqu	xmmword ptr [r12 + 8], xmm0
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	vmovdqu	ymmword ptr [r12 + 64], ymm0
	mov	rdi, r11
	mov	rsi, r12
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_returndatacopy@PLT
	test	al, al
	jne	.LBB0_95
# %bb.383:                              # %OP3849.RETURNDATASIZE
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [r12], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 8], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + 40], xmm0
	mov	qword ptr [r12 + 56], 0
	mov	rdi, rbx
	jmp	.LBB0_384
.Ltmp14:                                # Block address taken
.LBB0_291:                              # %OP3630.ISZERO
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	r8, qword ptr [r12 + rax - 24]
	or	r8, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_387
# %bb.292:
	mov	r15, r13
.LBB0_293:                              # %OP3642.JUMPDEST
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	r14, [r15 - 1]
	lea	rax, [r15 - 2]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, r14
	test	al, al
	jne	.LBB0_511
# %bb.294:                              # %OP3646.MLOAD.contd
	mov	rax, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	rcx, r11
	shl	rcx, 5
	mov	qword ptr [r12 + rcx + 16], -1
	mov	qword ptr [r12 + rcx], -32
	mov	qword ptr [r12 + rcx + 24], -1
	mov	qword ptr [r12 + rcx + 8], -1
	shl	r15, 5
	add	r14, -32
	adc	rdi, -1
	adc	rdx, -1
	adc	rax, -1
	mov	qword ptr [r12 + r15 - 64], r14
	mov	qword ptr [r12 + r15 - 56], rdi
	mov	qword ptr [r12 + r15 - 48], rdx
	mov	qword ptr [r12 + r15 - 40], rax
	mov	r13, qword ptr [r13 + 40]
	mov	r8, qword ptr [r13 + 16]
	mov	rbx, r15
	mov	r15, qword ptr [r13 + 48]
	sub	r8, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r10d, r10d
	neg	rdi
	mov	edi, 0
	sbb	rdi, rdx
	sbb	r10, rax
	cmovb	rsi, r9
	lea	r9, [r12 + rcx]
	add	rbx, r12
	cmp	rsi, r8
	ja	.LBB0_512
.LBB0_295:                              # %OP3649.MLOAD.contd
	add	r15, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r14 + r15]
	mov	rsi, qword ptr [r14 + r15 + 8]
	mov	rax, qword ptr [r14 + r15 + 24]
	mov	rcx, qword ptr [r14 + r15 + 16]
	movbe	qword ptr [rbx - 112], rsi
	bswap	rsi
	movbe	qword ptr [rbx - 104], rdx
	movbe	qword ptr [rbx - 128], rax
	bswap	rax
	movbe	qword ptr [rbx - 120], rcx
	bswap	rcx
	mov	edx, esi
	mov	rsi, rax
	or	rsi, rdx
	xor	edi, edi
	xor	r8d, r8d
	or	rsi, rcx
	setne	dil
	sete	r8b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx - 88], xmm0
	mov	qword ptr [rbx - 96], rdi
	mov	qword ptr [rbx - 72], 0
	vmovdqu	xmmword ptr [rbx - 56], xmm0
	mov	qword ptr [rbx - 64], r8
	mov	qword ptr [rbx - 40], 0
	je	.LBB0_297
# %bb.296:                              # %OP3662.POP
	mov	esi, dword ptr [rbx - 368]
	mov	rdi, qword ptr [rbx - 384]
	xor	rdi, rax
	mov	r8d, 4294967295
	mov	qword ptr [r9 + 16], r8
	mov	qword ptr [r9], -1
	mov	r8, qword ptr [rbx - 376]
	xor	r8, rcx
	mov	qword ptr [r9 + 24], 0
	mov	qword ptr [r9 + 8], -1
	mov	qword ptr [rbx - 48], rdx
	mov	qword ptr [rbx - 64], rax
	mov	qword ptr [rbx - 56], rcx
	mov	qword ptr [rbx - 40], 0
	xor	rsi, rdx
	or	rsi, rdi
	xor	eax, eax
	or	rsi, r8
	sete	al
	mov	qword ptr [rbx - 96], rax
	mov	qword ptr [rbx - 80], 0
	mov	qword ptr [rbx - 72], 0
	mov	qword ptr [rbx - 88], 0
.LBB0_297:
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
.LBB0_298:                              # %OP3670.JUMPDEST
	lea	rsi, [r13 - 1]
	mov	rax, rsi
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax]
	mov	rdx, qword ptr [r12 + rax + 8]
	or	rdx, qword ptr [r12 + rax + 24]
	or	rcx, qword ptr [r12 + rax + 16]
	or	rcx, rdx
	je	.LBB0_409
# %bb.299:
	mov	r13, rsi
.LBB0_300:                              # %OP3704.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_57] # xmm0 = [7629,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 + rax - 288]
	vmovdqu	ymm1, ymmword ptr [r12 + rax - 256]
	vmovups	ymm2, ymmword ptr [r12 + rax - 224]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r12 + rax + 64], ymm1
	add	r13, 4
	vmovups	ymmword ptr [r12 + rax + 96], ymm2
.LBB0_301:                              # %OP4565.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	lea	r8, [r13 + 3]
	mov	edi, dword ptr [r12 + rax - 80]
	mov	r9, qword ptr [r12 + rax - 96]
	mov	r10, qword ptr [r12 + rax - 88]
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r12 + rax + 56], ymm0
	mov	qword ptr [r12 + rax + 40], r10
	mov	qword ptr [r12 + rax + 32], r9
	mov	qword ptr [r12 + rax + 48], rdi
	mov	qword ptr [r12 + rax + 88], 0
	lea	rsi, [r13 + 4]
	mov	rax, r8
	shl	rax, 5
	lea	rcx, [r12 + rax]
	mov	qword ptr [r12 + rax + 8], r10
	mov	qword ptr [r12 + rax], r9
	mov	qword ptr [r12 + rax + 16], rdi
	mov	qword ptr [r12 + rax + 24], 0
	lea	rdx, [r13 + 5]
	mov	qword ptr [rbp - 168], rsi      # 8-byte Spill
	mov	rax, rsi
	shl	rax, 5
	vmovups	ymmword ptr [r12 + rax], ymm0
	lea	rsi, [r12 + rax]
	mov	r11, r13
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, qword ptr [r13 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	cmp	rax, 31
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	jbe	.LBB0_496
.LBB0_302:                              # %OP4574.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], r9
	movbe	qword ptr [rax + r14 + 16], r10
	movbe	qword ptr [rax + r14 + 8], rdi
	mov	qword ptr [rax + r14], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovups	ymmword ptr [rcx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_81] # xmm1 = [2,0,0,0]
	vmovdqu	ymmword ptr [rsi], ymm1
	lea	rdi, [r11 + 6]
	mov	rax, rdx
	shl	rax, 5
	vmovups	ymmword ptr [r12 + rax], ymm0
	lea	r8, [r12 + rax]
	mov	r14, qword ptr [r13 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	jbe	.LBB0_498
.LBB0_303:                              # %OP4579.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_117] # ymm0 = [0,0,0,144115188075855872]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [rsi], ymm0
	vmovups	ymmword ptr [r8], ymm0
	mov	rax, qword ptr [rbx + 80]
	mov	rcx, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 72]
	mov	rsi, qword ptr [rbx + 88]
	mov	r14, rdi
	shl	r14, 5
	mov	qword ptr [r12 + r14 + 24], rsi
	mov	qword ptr [r12 + r14 + 8], rdx
	mov	qword ptr [r12 + r14 + 16], rax
	mov	qword ptr [r12 + r14], rcx
	mov	rdi, r13
	mov	rsi, r8
	mov	r15, r13
	mov	r13, r8
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_501
# %bb.304:                              # %OP4583.SWAP5
	mov	rdi, r15
	add	r14, r12
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r13 + 16]
	mov	r8, qword ptr [rbx - 48]
	and	r8, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	rsi, qword ptr [rbx - 64]
	mov	r9, qword ptr [rbx - 56]
	and	rsi, qword ptr [rbx]
	mov	qword ptr [rbx], rcx
	mov	r12, qword ptr [rbx - 40]
	and	r12, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rax
	and	r9, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13 + 16], r8
	mov	qword ptr [r13], rsi
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], r12
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], r12
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [r14 + 8], r9
	mov	r10, r14
	mov	r14, qword ptr [rbx + 64]
	mov	rax, qword ptr [rbx + 80]
	mov	rcx, qword ptr [rbx + 72]
	mov	rdx, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 232], rcx
	mov	qword ptr [rbx + 224], r14
	mov	qword ptr [rbx + 248], rdx
	mov	qword ptr [rbx + 240], rax
	mov	rsi, qword ptr [r15 + 40]
	mov	r9, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 152], rsi      # 8-byte Spill
	mov	r15, qword ptr [rsi + 48]
	sub	r9, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r11
	cmp	rsi, r9
	mov	r9, r13
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	ja	.LBB0_500
.LBB0_305:                              # %OP4589.SWAP5
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 8], rax
	movbe	qword ptr [r14 + r15], r12
	mov	rax, qword ptr [r9 + 24]
	mov	rcx, qword ptr [r9 + 16]
	mov	rdx, qword ptr [r9]
	mov	rsi, qword ptr [r9 + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r14, qword ptr [rbx]
	mov	r15, qword ptr [rbx + 8]
	mov	r12, qword ptr [rbx + 16]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 152], r12      # 8-byte Spill
	mov	qword ptr [r9 + 16], r12
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	mov	qword ptr [r9], r14
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	mov	qword ptr [r9 + 24], r8
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	mov	qword ptr [r9 + 8], r15
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 16]
	mov	rcx, qword ptr [rdx + 8]
	mov	rdx, qword ptr [rdx + 24]
	mov	qword ptr [r10 + 24], rdx
	mov	qword ptr [r10 + 8], rcx
	mov	qword ptr [r10], r14
	mov	qword ptr [r10 + 16], rax
	mov	r13, qword ptr [rdi + 40]
	mov	r10, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13 + 48]
	sub	r10, r15
	mov	rsi, r14
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r11
	cmp	rsi, r10
	mov	r12, qword ptr [rbp - 224]      # 8-byte Reload
	ja	.LBB0_507
.LBB0_306:                              # %OP4592.SWAP2
	add	r15, qword ptr [r13 + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 8], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r14 + r15], rax
	mov	rax, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12 + 24]
	vmovups	ymm0, ymmword ptr [rbx + 64]
	mov	qword ptr [rbx + 88], rsi
	mov	qword ptr [rbx + 72], rdx
	mov	qword ptr [rbx + 80], rax
	mov	qword ptr [rbx + 64], rcx
	vmovups	ymmword ptr [r9], ymm0
	mov	rsi, r12
	mov	r15, r9
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_508
# %bb.307:                              # %OP4596.DUP6
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 16]
	mov	rdi, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], r9
	mov	rdi, r14
	mov	rsi, r12
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_499
# %bb.308:                              # %OP4599.DUP2
	mov	r15, qword ptr [rbx + 64]
	mov	rax, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 8], rax
	mov	r14, qword ptr [r14 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r9
	mov	r10, r14
	cmp	rsi, rdi
	ja	.LBB0_502
.LBB0_309:                              # %OP4600.MLOAD.contd
	add	r13, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r15 + r13 + 24]
	mov	rdx, qword ptr [r15 + r13 + 16]
	mov	rax, qword ptr [r15 + r13]
	mov	rsi, qword ptr [r15 + r13 + 8]
	movbe	qword ptr [r12 + 24], rax
	movbe	qword ptr [r12 + 8], rdx
	movbe	qword ptr [r12 + 16], rsi
	movbe	qword ptr [r12], rcx
	mov	r8, qword ptr [rbx - 24]
	mov	r11, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 32]
	mov	r14, qword ptr [rbx - 16]
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rdi], r13
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	mov	qword ptr [rdi + 16], r14
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	mov	qword ptr [rdi + 8], r8
	mov	qword ptr [rdi + 24], r11
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	movbe	qword ptr [r8 + 16], rsi
	mov	rdi, rsi
	bswap	rdi
	movbe	qword ptr [r8 + 8], rdx
	bswap	rdx
	movbe	qword ptr [r8], rcx
	mov	r15, rcx
	bswap	r15
	movbe	qword ptr [r8 + 24], rax
	mov	rcx, qword ptr [r10 + 16]
	mov	r14, qword ptr [r10 + 48]
	sub	rcx, r14
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r9
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rdi
	bswap	rax
	sbb	r8, rax
	cmovb	rsi, r9
	cmp	rsi, rcx
	ja	.LBB0_504
.LBB0_310:                              # %OP4604.SWAP2
	add	r14, qword ptr [r10 + 8]
	movbe	qword ptr [r15 + r14 + 24], r13
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	movbe	qword ptr [r15 + r14], r11
	mov	rcx, qword ptr [r12 + 16]
	mov	rax, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12]
	mov	rdi, qword ptr [r12 + 8]
	mov	rsi, qword ptr [rbx + 80]
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	r14, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 72], rdi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 64], rdx
	mov	qword ptr [rbx + 80], rcx
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], r14
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r8, qword ptr [rsi + 40]
	mov	r11, qword ptr [r8 + 16]
	mov	r15, qword ptr [r8 + 48]
	sub	r11, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r13, -1
	cmovb	rsi, r13
	xor	r13d, r13d
	neg	r9
	mov	r9d, 0
	sbb	r9, qword ptr [rbp - 128]       # 8-byte Folded Reload
	sbb	r13, r10
	mov	r9, -1
	cmovb	rsi, r9
	cmp	rsi, r11
	mov	r9, r12
	ja	.LBB0_505
.LBB0_311:                              # %OP4605.MLOAD.contd
	add	r15, qword ptr [r8 + 8]
	mov	r13, qword ptr [r14 + r15 + 24]
	mov	qword ptr [rbp - 128], r13      # 8-byte Spill
	mov	r12, qword ptr [r14 + r15 + 16]
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	mov	rsi, qword ptr [r14 + r15]
	mov	r10, qword ptr [r14 + r15 + 8]
	mov	r11, rsi
	bswap	r11
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_128] # ymm0 = [6566260114167413029,15925595526334130462,15082398207468012787,10113925765812485467]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [r8 + 24], rax
	mov	qword ptr [r8 + 8], rdi
	mov	qword ptr [r8 + 16], rcx
	mov	qword ptr [r8], rdx
	mov	r14, r13
	bswap	r14
	sub	rdx, r14
	mov	r14, r12
	bswap	r14
	sbb	rdi, r14
	mov	r14, r10
	bswap	r14
	sbb	rcx, r14
	sbb	rax, r11
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [r12 + 8]
	mov	r14, qword ptr [r12 + 24]
	mov	r15, qword ptr [r12]
	mov	r13, qword ptr [r12 + 16]
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	qword ptr [r8 + 16], r13
	mov	qword ptr [r8], r15
	mov	qword ptr [r8 + 24], r14
	mov	qword ptr [r8 + 8], r11
	add	rdx, r15
	adc	rdi, r11
	adc	rcx, r13
	adc	rax, r14
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 24], rax
	movbe	qword ptr [r9 + 16], r10
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r9], rax
	movbe	qword ptr [r9 + 24], rsi
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r9 + 8], rax
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_693
# %bb.312:                              # %OP4616.POP
	mov	r11, r14
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, -4
	mov	rax, r13
	shl	rax, 5
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_313:                              # %dynamic_jump_table.preheader
	mov	rsi, qword ptr [r12 + rax + 24]
	mov	r14, qword ptr [r12 + rax + 16]
	mov	rcx, qword ptr [r12 + rax]
	mov	rax, qword ptr [r12 + rax + 8]
	jmp	.LBB0_1546
.Ltmp10:                                # Block address taken
.LBB0_314:                              # %OP3013.ISZERO
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	r8, qword ptr [r12 + rax - 24]
	or	r8, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rdi
	mov	qword ptr [r12 + rax - 8], 0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_387
.LBB0_315:                              # %OP3025.JUMPDEST
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	jne	.LBB0_564
# %bb.316:                              # %OP3031.MLOAD.contd
	mov	rsi, r15
	add	rsi, r12
	add	r13, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r11 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r14 + 8], xmm0
	shl	rax, 5
	mov	qword ptr [r12 + r14], rcx
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	cmp	rcx, 31
	jbe	.LBB0_439
.LBB0_317:                              # %OP3042.JUMPDEST.loopexit
	mov	rbx, r13
	mov	rax, r13
	shl	rax, 5
	mov	r15, qword ptr [r12 + rax - 64]
	mov	r9, qword ptr [r11 + 40]
	mov	rcx, qword ptr [r9 + 16]
	mov	r13, r12
	mov	r12, qword ptr [r9 + 48]
	sub	rcx, r12
	mov	rsi, r15
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r13 + rax - 56]
	mov	r8d, 0
	sbb	r8, qword ptr [r13 + rax - 48]
	sbb	rdi, qword ptr [r13 + rax - 40]
	cmovb	rsi, rdx
	lea	rdi, [rbx - 1]
	lea	r14, [rax + r13]
	cmp	rsi, rcx
	ja	.LBB0_515
.LBB0_318:                              # %OP3044.MLOAD.contd
	add	r12, qword ptr [r9 + 8]
	mov	rax, qword ptr [r15 + r12 + 16]
	mov	rcx, qword ptr [r15 + r12 + 24]
	mov	rdx, qword ptr [r15 + r12]
	mov	rsi, qword ptr [r15 + r12 + 8]
	movbe	qword ptr [r14 - 168], rdx
	movbe	qword ptr [r14 - 192], rcx
	movbe	qword ptr [r14 - 184], rax
	movbe	qword ptr [r14 - 176], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_61] # xmm0 = [6117,0,0,0]
	vmovups	ymmword ptr [r14 - 64], ymm0
	vmovups	ymm0, ymmword ptr [r14 - 224]
	shl	rdi, 5
	vmovups	ymmword ptr [r13 + rdi], ymm0
	movbe	qword ptr [r14 + 24], rdx
	movbe	qword ptr [r14 + 16], rsi
	movbe	qword ptr [r14 + 8], rax
	movbe	qword ptr [r14], rcx
	vmovdqu	ymm0, ymmword ptr [r14 - 352]
	vmovdqu	ymm1, ymmword ptr [r14 - 320]
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	add	rbx, 3
	vmovdqu	ymmword ptr [r14 + 64], ymm1
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, r13
.LBB0_319:                              # %OP4337.JUMPDEST
	lea	r14, [rbx + 1]
	shl	rbx, 5
	mov	rdx, qword ptr [r12 + rbx - 104]
	mov	rsi, qword ptr [r12 + rbx - 120]
	mov	rdi, qword ptr [r12 + rbx - 112]
	mov	rax, r14
	shl	rax, 5
	movabs	rcx, 281474976710656
	cmp	rsi, rcx
	mov	r8, rdi
	sbb	r8, 0
	mov	r8, rdx
	sbb	r8, 0
	setb	r8b
	xor	r9d, r9d
	movabs	r10, 281474976710655
	cmp	r10, rsi
	mov	esi, 0
	sbb	rsi, rdi
	sbb	r9, rdx
	setb	dl
	movzx	edx, dl
	movzx	esi, r8b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rbx + 8], xmm0
	mov	qword ptr [r12 + rbx], rsi
	mov	qword ptr [r12 + rbx + 24], 0
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	jb	.LBB0_321
# %bb.320:                              # %OP4346.POP
	add	rbx, r12
	add	rax, r12
	mov	rdx, qword ptr [rbx - 72]
	mov	rsi, qword ptr [rbx - 96]
	mov	rdi, qword ptr [rbx - 88]
	mov	r8, qword ptr [rbx - 80]
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax], rsi
	mov	qword ptr [rax + 24], rdx
	mov	qword ptr [rax + 8], rdi
	cmp	rdi, rcx
	sbb	r8, 0
	sbb	rdx, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
.LBB0_321:                              # %OP4351.JUMPDEST
	lea	r13, [r14 - 1]
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax]
	mov	rdx, qword ptr [r12 + rax + 8]
	or	rdx, qword ptr [r12 + rax + 24]
	or	rcx, qword ptr [r12 + rax + 16]
	or	rcx, rdx
	je	.LBB0_360
.LBB0_322:                              # %OP4385.JUMPDEST
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_27] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r15, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.323:                              # %OP4388.PUSH4
	shl	r14, 5
	add	r13, 3
	mov	rax, qword ptr [rbp - 328]      # 8-byte Reload
	mov	ecx, dword ptr [rax + 80]
	mov	rax, r13
	shl	rax, 5
	mov	edx, dword ptr [rbx + 28]
	mov	qword ptr [rbx], rcx
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	qword ptr [rbx + 8], 0
	xor	esi, esi
	sub	rcx, rdx
	mov	edx, 0
	sbb	rdx, rdx
	mov	edi, 0
	sbb	rdi, rdi
	sbb	rsi, rsi
	mov	qword ptr [r12 + r14], rcx
	mov	qword ptr [r12 + r14 + 16], rdi
	mov	qword ptr [r12 + r14 + 8], rdx
	mov	qword ptr [r12 + r14 + 24], rsi
	xor	edx, edx
	xor	esi, esi
	shl	rcx, 32
	setne	dl
	sete	sil
	mov	qword ptr [rbx + 64], rdx
	mov	qword ptr [rbx + 80], 0
	mov	qword ptr [rbx + 88], 0
	mov	qword ptr [rbx + 72], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	je	.LBB0_325
# %bb.324:                              # %OP4409.POP
	add	rax, r12
	mov	rcx, qword ptr [rbx - 40]
	mov	rdx, qword ptr [rbx - 64]
	mov	rsi, qword ptr [rbx - 56]
	mov	rdi, qword ptr [rbx - 48]
	mov	qword ptr [rax + 16], rdi
	mov	qword ptr [rax], rdx
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	mov	al, 48
	bzhi	rax, rsi, rax
	xor	ecx, ecx
	or	rax, rdx
	setne	cl
	mov	qword ptr [rbx + 64], rcx
	mov	qword ptr [rbx + 80], 0
	mov	qword ptr [rbx + 88], 0
	mov	qword ptr [rbx + 72], 0
.LBB0_325:                              # %OP4415.JUMPDEST
	mov	r11, r15
.LBB0_326:                              # %OP4415.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	or	rdx, qword ptr [r12 + rax - 8]
	or	rcx, qword ptr [r12 + rax - 16]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_328
# %bb.327:                              # %OP4420.POP
	add	rax, r12
	vmovdqa	xmm1, xmmword ptr [rax - 112]
	mov	rcx, qword ptr [rax - 128]
	mov	rdx, qword ptr [rax - 120]
	mov	qword ptr [rax + 8], rdx
	mov	qword ptr [rax], rcx
	vmovdqa	xmmword ptr [rax + 16], xmm1
	mov	sil, 48
	bzhi	rdx, rdx, rsi
	xor	esi, esi
	or	rdx, rcx
	setne	sil
	vmovdqu	xmmword ptr [rax - 24], xmm0
	mov	qword ptr [rax - 32], rsi
	mov	qword ptr [rax - 8], 0
.LBB0_328:                              # %OP4426.JUMPDEST
	lea	r14, [r13 - 1]
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax]
	mov	rdx, qword ptr [r12 + rax + 8]
	or	rdx, qword ptr [r12 + rax + 24]
	or	rcx, qword ptr [r12 + rax + 16]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_1529
# %bb.329:                              # %OP4430.DUP1
	mov	rax, r13
	shl	rax, 5
	mov	ecx, dword ptr [r12 + rax - 64]
	vmovaps	ymm1, ymmword ptr [rip + .LCPI0_92] # ymm1 = [0,0,0,9253]
	vmovups	ymmword ptr [r12 + rax - 24], ymm1
	mov	qword ptr [r12 + rax - 32], rcx
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax + 24], 0
	vmovups	ymm0, ymmword ptr [r12 + rax - 160]
	vmovdqu	ymm1, ymmword ptr [r12 + rax - 128]
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_93] # xmm0 = [9211,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax + 64], ymm0
	add	r13, 4
	vmovdqu	ymmword ptr [r12 + rax + 96], ymm1
.LBB0_330:                              # %OP5181.JUMPDEST
	mov	rdi, r13
	shl	rdi, 5
	mov	r8, qword ptr [r12 + rdi - 32]
	mov	rax, qword ptr [r12 + rdi - 24]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_94] # ymm0 = [0,281474976710656,0,0]
	vmovdqu	ymmword ptr [r12 + rdi], ymm0
	mov	r9, rax
	shld	r9, r8, 48
	shl	r8, 48
	shr	rax, 16
	mov	r10d, eax
	mov	rcx, qword ptr [r12 + rdi - 64]
	mov	rax, qword ptr [r12 + rdi - 56]
	mov	rsi, qword ptr [r12 + rdi - 40]
	mov	r14, qword ptr [r12 + rdi - 48]
	mov	qword ptr [r12 + rdi - 48], r9
	mov	qword ptr [r12 + rdi - 56], r8
	mov	qword ptr [r12 + rdi - 40], r10
	mov	qword ptr [r12 + rdi - 64], 0
	mov	qword ptr [r12 + rdi - 16], r14
	mov	qword ptr [r12 + rdi - 8], rsi
	mov	qword ptr [r12 + rdi - 32], rcx
	mov	qword ptr [r12 + rdi - 24], rax
	dec	r13
	jmp	.LBB0_1546
.LBB0_387:                              # %OP2221.RETURNDATASIZE
	mov	rbx, rdx
	add	r12, rax
	mov	rax, qword ptr [r11 + 24]
	vmovdqu	xmmword ptr [r12 + 8], xmm0
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	vmovdqu	ymmword ptr [r12 + 64], ymm0
	mov	rdi, r11
	mov	rsi, r12
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_returndatacopy@PLT
	test	al, al
	jne	.LBB0_381
.LBB0_380:                              # %OP4784.RETURNDATASIZE
	mov	rax, qword ptr [r14 + 24]
	mov	qword ptr [r12], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 8], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + 40], xmm0
	mov	qword ptr [r12 + 56], 0
	mov	rdi, r14
	mov	rsi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB0_388
.LBB0_381:
	mov	rdx, rbx
	jmp	.LBB0_1577
.LBB0_439:                              # %OP3950.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [rsi - 32], ymm0
	add	rsi, -64
	jmp	.LBB0_713
.LBB0_331:                              # %OP111.DUP1
	add	rdx, r12
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 1889567281
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_147] # ymm0 = [0,0,0,1889567281]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	jne	.LBB0_404
.LBB0_332:                              # %OP673.JUMPDEST.loopexit
	mov	r14, r11
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovups	ymmword ptr [r12 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rcx + 32], ymm0
	add	r13, 3
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r12 + rcx + 64], rdi
	mov	qword ptr [r12 + rcx + 80], r9
	mov	qword ptr [r12 + rcx + 72], r8
	mov	qword ptr [r12 + rcx + 88], r10
	mov	qword ptr [r12 + rcx + 128], rdi
	mov	qword ptr [r12 + rcx + 144], r9
	mov	qword ptr [r12 + rcx + 136], r8
	mov	qword ptr [r12 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r12 + rsi], rdx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_495
.LBB0_333:                              # %OP688.JUMPDEST
	mov	rbx, r13
	dec	r13
	shl	rbx, 5
	mov	r8, qword ptr [r12 + rbx - 40]
	mov	rcx, qword ptr [r12 + rbx - 48]
	mov	rsi, qword ptr [r12 + rbx - 64]
	mov	rdx, qword ptr [r12 + rbx - 56]
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rdi + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2256]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2240]
	mov	rcx, qword ptr [rbp - 2256]
	mov	rdx, qword ptr [rbp - 2248]
	mov	rsi, r13
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r12 + rsi + 16], rdi
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], -1
	mov	qword ptr [r12 + rsi], -1
	mov	qword ptr [r12 + rbx - 56], rdx
	mov	qword ptr [r12 + rbx - 64], rcx
	mov	qword ptr [r12 + rbx - 48], rax
	mov	qword ptr [r12 + rbx - 40], 0
	mov	r11, r14
.LBB0_334:                              # %OP2480.JUMPDEST
	mov	r14, r13
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [r12 + r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12 + r14 + 32], ymm0
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 1
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.335:                              # %OP2484.PUSH1
	add	r14, r12
	mov	r8, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	rax, qword ptr [r14 - 16]
	mov	r10, qword ptr [r14 - 8]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r14 - 16], xmm0
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14], r8
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r15
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.336:                              # %OP2488.PUSH1
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	lea	rbx, [r14 - 32]
	vmovdqu	ymm0, ymmword ptr [r14 - 32]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_0] # xmm1 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14 - 32], ymm1
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rdi, r15
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_693
# %bb.337:                              # %OP2491.SLOAD
	mov	r13, r15
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_693
# %bb.338:                              # %OP2492.DUP2
	mov	rcx, qword ptr [r14 - 64]
	mov	rdx, qword ptr [r14 - 56]
	mov	rax, qword ptr [r14 - 48]
	mov	rsi, qword ptr [r14 - 40]
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], rcx
	mov	r14, rax
	mov	rax, rdx
	jmp	.LBB0_822
.LBB0_339:                              # %OP167.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	xor	rax, 826074471
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_134] # ymm0 = [0,0,0,826074471]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB0_418
.LBB0_340:                              # %OP587.JUMPDEST
	lea	rdx, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_135] # xmm0 = [1024,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_341:                              # %OP1929.JUMPDEST
	lea	r13, [rdx + 1]
	shl	rdx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_118] # xmm0 = [18,0]
.LBB0_342:                              # %dynamic_jump_table.preheader
	vmovdqu	ymmword ptr [r12 + rdx], ymm0
	mov	rcx, qword ptr [r12 + rdx - 32]
	mov	rax, qword ptr [r12 + rdx - 24]
	mov	rsi, qword ptr [r12 + rdx - 8]
	mov	r14, qword ptr [r12 + rdx - 16]
	mov	rdi, r13
	shl	rdi, 5
	mov	qword ptr [r12 + rdi + 16], r14
	mov	qword ptr [r12 + rdi + 24], rsi
	mov	qword ptr [r12 + rdi], rcx
	mov	qword ptr [r12 + rdi + 8], rax
	jmp	.LBB0_1546
.LBB0_343:                              # %OP65.DUP1
	add	rdx, r12
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 3156594551
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_149] # ymm0 = [0,0,0,3156594551]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	je	.LBB0_636
# %bb.344:                              # %OP70.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 3294232917
	xor	rax, rsi
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_150] # ymm0 = [0,0,0,3294232917]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB0_418
.LBB0_345:                              # %OP823.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_123] # xmm0 = [874,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_346:                              # %OP3387.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_38] # xmm0 = [5,0]
.LBB0_94:                               # %OP1809.JUMPDEST
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r14, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.347:                              # %OP1812.PUSH20
	mov	rcx, r13
	shl	rcx, 5
	mov	dword ptr [rbx + 20], 0
	mov	qword ptr [rbx + 24], 0
	mov	rsi, qword ptr [rbx - 8]
	mov	rax, qword ptr [rbx - 16]
	mov	rdi, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	qword ptr [r12 + rcx], rdi
	mov	qword ptr [r12 + rcx + 16], rax
	mov	qword ptr [r12 + rcx + 8], rdx
	mov	qword ptr [r12 + rcx + 24], rsi
	mov	rcx, rdi
	jmp	.LBB0_112
.LBB0_348:                              # %OP144.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 1493811413
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_11] # ymm1 = [0,0,0,1493811413]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	jne	.LBB0_429
.LBB0_349:                              # %OP643.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_350:                              # %OP2007.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_49] # xmm0 = [9,0,0,0]
	jmp	.LBB0_110
.LBB0_351:                              # %OP88.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 2309999428
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_140] # ymm1 = [0,0,0,2309999428]
	vmovdqu	ymmword ptr [rdx + 8], ymm1
	mov	qword ptr [rdx], rdi
	jne	.LBB0_458
.LBB0_352:                              # %OP721.JUMPDEST.loopexit
	mov	rdi, r11
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_144] # xmm0 = [1341,0,0,0]
	vmovups	ymmword ptr [r12 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rcx + 32], ymm0
	add	r13, 3
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	edx, edx
	mov	rbx, rax
	add	rbx, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r12 + rcx + 64], rbx
	mov	qword ptr [r12 + rcx + 80], r9
	mov	qword ptr [r12 + rcx + 72], r8
	mov	qword ptr [r12 + rcx + 88], r10
	mov	qword ptr [r12 + rcx + 128], rbx
	mov	qword ptr [r12 + rcx + 144], r9
	mov	qword ptr [r12 + rcx + 136], r8
	mov	qword ptr [r12 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rbx
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r12 + rsi], rdx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_638
.LBB0_353:                              # %OP736.JUMPDEST
	lea	r15, [r13 - 1]
	shl	r13, 5
	mov	r8, qword ptr [r12 + r13 - 40]
	mov	rcx, qword ptr [r12 + r13 - 48]
	mov	rsi, qword ptr [r12 + r13 - 64]
	mov	rdx, qword ptr [r12 + r13 - 56]
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rdi + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2320]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2304]
	mov	rcx, qword ptr [rbp - 2320]
	mov	rdx, qword ptr [rbp - 2312]
	mov	rsi, r15
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r12 + rsi + 16], rdi
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], -1
	mov	qword ptr [r12 + rsi], -1
	mov	qword ptr [r12 + r13 - 56], rdx
	mov	qword ptr [r12 + r13 - 64], rcx
	mov	qword ptr [r12 + r13 - 48], rax
	mov	qword ptr [r12 + r13 - 40], 0
.LBB0_354:                              # %OP2513.JUMPDEST
	mov	r14, r12
	mov	r13, r15
	shl	r13, 5
	lea	rax, [r15 + 2]
	lea	r12, [r15 + 3]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + r13 + 32], ymm0
	lea	rbx, [r14 + rax]
	vmovdqu	ymmword ptr [r14 + r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r14 + rax], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1644
# %bb.355:                              # %OP2518.PUSH1
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	vpxor	ymm0, ymm0, ymmword ptr [rbx]
	xor	eax, eax
	vptest	ymm0, ymm0
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jne	.LBB0_487
# %bb.356:
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_357:                              # %OP2553.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	rax, r15
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14 + 64], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_494
# %bb.358:                              # %OP2559.DUP1
	add	r14, r12
	add	r13, 3
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r14 + 80], 0
	mov	qword ptr [r14 + 64], 5241
.LBB0_359:                              # %OP1770.JUMPDEST
	mov	qword ptr [r14 + 88], 0
	mov	qword ptr [r14 + 72], 0
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_42
.LBB0_360:                              # %OP4354.PUSH1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	lea	r13, [r14 + 1]
	shl	r14, 5
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.361:                              # %OP4356.MLOAD.contd
	mov	r15, r12
	add	r12, r14
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.362:                              # %OP4360.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.363:                              # %OP4365.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_97] # xmm0 = [19,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 19
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.364:                              # %OP4370.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_98] # ymm0 = [0,5498709327554281472,3619240775667503686,6155973685307076694]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240775667503686
	movabs	r9, 5498709327554281472
.LBB0_365:                              # %OP4281.PUSH32
	xor	r8d, r8d
	jmp	.LBB0_453
.LBB0_366:                              # %OP42.DUP1
	vmovdqu	xmmword ptr [r14 + 40], xmm1
	mov	qword ptr [r14 + 56], 0
	mov	ecx, 3573918927
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_5] # ymm0 = [0,0,0,3573918927]
	vmovdqu	ymmword ptr [r14 + 8], ymm0
	mov	qword ptr [r14], rdx
	xor	ecx, ecx
	cmp	eax, -721048369
	je	.LBB0_486
# %bb.367:                              # %OP47.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + 40], xmm0
	mov	qword ptr [r14 + 56], 0
	mov	edx, 3714247998
	xor	esi, esi
	cmp	rax, rdx
	sete	sil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_6] # ymm1 = [0,0,0,3714247998]
	vmovdqu	ymmword ptr [r14 + 8], ymm1
	mov	qword ptr [r14], rsi
	cmp	eax, -580719298
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jne	.LBB0_551
.LBB0_368:                              # %OP889.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	mov	rsi, r13
	shl	rsi, 5
	mov	rbx, rdx
	add	rdx, -4
	mov	rdi, rcx
	adc	rdi, -1
	mov	r8, rcx
	adc	r8, -1
	adc	rcx, -1
	mov	qword ptr [r12 + rax + 64], rdx
	mov	qword ptr [r12 + rax + 72], rdi
	mov	qword ptr [r12 + rax + 80], r8
	mov	qword ptr [r12 + rax + 88], rcx
	mov	qword ptr [r12 + rax + 128], rdx
	mov	qword ptr [r12 + rax + 136], rdi
	mov	qword ptr [r12 + rax + 144], r8
	mov	qword ptr [r12 + rax + 152], rcx
	xor	r9d, r9d
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	r9, rcx
	setb	cl
	movzx	ecx, cl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rsi + 8], xmm0
	mov	qword ptr [r12 + rsi], rcx
	mov	qword ptr [r12 + rsi + 24], 0
	jae	.LBB0_654
# %bb.369:
	mov	r10, rbx
.LBB0_370:                              # %OP904.JUMPDEST
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r12 + r13 - 32], ymm0
	mov	rbx, qword ptr [r12 + r13 - 64]
	mov	r14, qword ptr [r12 + r13 - 56]
	mov	r15, qword ptr [r12 + r13 - 48]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + r13 - 40]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rbx
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 2576]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	mov	r8, r12
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2560]
	mov	rcx, qword ptr [rbp - 2576]
	mov	rdx, qword ptr [rbp - 2568]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r13 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r13 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 56], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 48], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 32], 32
	add	rbx, 32
	adc	r14, 0
	adc	r15, 0
	adc	r12, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 624]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	mov	r8, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 624]
	mov	rcx, qword ptr [rbp - 616]
	mov	rdx, qword ptr [rbp - 600]
	mov	rsi, qword ptr [rbp - 608]
	mov	qword ptr [r12 + r13 + 16], rsi
	mov	qword ptr [r12 + r13 + 24], rdx
	mov	qword ptr [r12 + r13], rax
	mov	qword ptr [r12 + r13 + 8], rcx
	mov	edx, esi
	mov	qword ptr [r12 + r13 - 32], rax
	mov	qword ptr [r12 + r13 - 24], rcx
	mov	qword ptr [r12 + r13 - 16], rdx
	mov	qword ptr [r12 + r13 - 8], 0
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
.LBB0_371:                              # %OP3722.JUMPDEST
	lea	rcx, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	r14, [r12 + rax]
	mov	qword ptr [rbp - 128], rcx      # 8-byte Spill
	shl	rcx, 5
	lea	r15, [r12 + rcx]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_81] # xmm1 = [2,0,0,0]
	vmovdqu	ymmword ptr [r12 + rcx], ymm1
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	lea	r8, [r13 + 3]
	vmovdqu	ymmword ptr [r12 + rax + 64], ymm0
	lea	rsi, [r12 + rax + 64]
	mov	rbx, qword ptr [r11 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r12, qword ptr [rbx + 48]
	sub	rax, r12
	cmp	rax, 63
	jbe	.LBB0_666
.LBB0_372:                              # %OP3728.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_117] # ymm0 = [0,0,0,144115188075855872]
	vmovdqu	ymmword ptr [rax + r12 + 32], ymm0
	mov	rcx, qword ptr [r14 - 40]
	mov	rdx, qword ptr [r14 - 64]
	mov	r13, qword ptr [r14 - 56]
	mov	r9, qword ptr [r14 - 48]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r14 - 64], xmm0
	vmovdqa	xmmword ptr [r14 - 48], xmm0
	mov	qword ptr [r15 + 16], r9
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 64], ymm0
	lea	rdi, [r14 - 64]
	mov	r12, qword ptr [r11 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	rbx, qword ptr [r12 + 48]
	sub	rax, rbx
	cmp	rax, 31
	mov	qword ptr [rbp - 72], rdi       # 8-byte Spill
	jbe	.LBB0_546
.LBB0_373:                              # %OP3732.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + rbx + 24], rdx
	movbe	qword ptr [rax + rbx + 16], r13
	movbe	qword ptr [rax + rbx + 8], r9
	movbe	qword ptr [rax + rbx], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	vmovdqu	ymmword ptr [rsi], ymm0
	mov	rax, qword ptr [rdi + 16]
	mov	rcx, qword ptr [rdi]
	mov	rdx, qword ptr [rdi + 8]
	mov	rdi, qword ptr [rdi + 24]
	mov	r13, r8
	shl	r8, 5
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r8 + 24], rdi
	mov	qword ptr [r9 + r8 + 8], rdx
	mov	qword ptr [r9 + r8 + 16], rax
	mov	qword ptr [r9 + r8], rcx
	mov	rdi, r11
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_95
# %bb.374:                              # %OP3736.SWAP1
	mov	r11, qword ptr [r14 + 80]
	mov	rcx, qword ptr [r14 + 64]
	mov	rdx, qword ptr [r14 + 72]
	mov	rax, qword ptr [r14 + 88]
	vmovdqu	ymm0, ymmword ptr [r15]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbp - 224], rdx      # 8-byte Spill
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [r15], rcx
	mov	rax, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	r13, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 64], r13
	mov	qword ptr [r14 + 72], rax
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rdi + 40]
	mov	r9, qword ptr [r12 + 16]
	mov	rbx, qword ptr [r12 + 48]
	sub	r9, rbx
	mov	rsi, r13
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB0_1637
.LBB0_375:                              # %OP3739.SWAP1
	add	rbx, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r13 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	movbe	qword ptr [r13 + rbx + 16], rax
	movbe	qword ptr [r13 + rbx + 8], r11
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r13 + rbx], rax
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	mov	rax, qword ptr [r14 - 24]
	mov	r11, qword ptr [r14 - 8]
	mov	r12, qword ptr [r14 - 32]
	mov	rcx, qword ptr [r14 - 16]
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], r12
	mov	qword ptr [r14 + 24], r11
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	qword ptr [r14 + 8], rax
	mov	r13, qword ptr [r14 - 64]
	mov	rax, qword ptr [r14 - 56]
	mov	rcx, qword ptr [r14 - 40]
	mov	rdx, qword ptr [r14 - 48]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15], r13
	mov	qword ptr [r15 + 8], rax
	mov	rbx, qword ptr [rdi + 40]
	mov	r9, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	r9, r15
	mov	rsi, r13
	add	rsi, 32
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB0_1625
.LBB0_376:                              # %OP3742.SWAP1
	add	r15, qword ptr [rbx + 8]
	movbe	qword ptr [r13 + r15 + 24], r12
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 8], rax
	movbe	qword ptr [r13 + r15], r11
	vmovdqa	xmm0, xmmword ptr [r14 - 64]
	vmovdqa	xmm1, xmmword ptr [r14 - 48]
	vmovaps	xmm2, xmmword ptr [r14 - 32]
	vmovaps	xmm3, xmmword ptr [r14 - 16]
	vmovaps	xmmword ptr [r14 - 48], xmm3
	vmovaps	xmmword ptr [r14 - 64], xmm2
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	dec	r13
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r15
	mov	rbx, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_95
# %bb.377:                              # %OP3744.SLOAD
	mov	rdi, rbx
	mov	rsi, r15
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB0_95
# %bb.378:                              # %OP3745.DUP2
	mov	rcx, qword ptr [r14 - 96]
	mov	rax, qword ptr [r14 - 88]
	mov	rsi, qword ptr [r14 - 72]
	mov	r14, qword ptr [r14 - 80]
	mov	rdi, r13
	shl	rdi, 5
	mov	qword ptr [r12 + rdi + 16], r14
	mov	qword ptr [r12 + rdi + 24], rsi
	mov	qword ptr [r12 + rdi], rcx
	mov	qword ptr [r12 + rdi + 8], rax
	jmp	.LBB0_1545
.LBB0_462:                              # %OP2709.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [r14 + 288], ymm0
	jmp	.LBB0_408
.LBB0_379:                              # %OP4780.RETURNDATASIZE
	mov	rbx, rdx
	add	r12, rax
	mov	rax, qword ptr [r11 + 24]
	vmovdqu	xmmword ptr [r12 + 8], xmm0
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	vmovdqu	ymmword ptr [r12 + 64], ymm0
	mov	rdi, r11
	mov	rsi, r12
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_returndatacopy@PLT
	test	al, al
	je	.LBB0_380
# %bb.549:
	mov	rdx, rbx
	jmp	.LBB0_1577
.LBB0_397:
	xor	eax, eax
	xor	esi, esi
	xor	r8d, r8d
	xor	ecx, ecx
	mov	rdi, r13
.LBB0_398:                              # %OP4158.JUMPDEST
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	shl	rdi, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_54] # xmm0 = [96,0,0,0]
	vmovdqu	ymmword ptr [r12 + rdi - 64], ymm0
	mov	qword ptr [r12 + rdi + 8], rsi
	mov	qword ptr [r12 + rdi], rax
	mov	qword ptr [r12 + rdi + 16], r8
	mov	qword ptr [r12 + rdi + 24], rcx
	jmp	.LBB0_263
.LBB0_402:                              # %OP2742.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	add	rbx, -64
	mov	rdi, r11
	jmp	.LBB0_403
.LBB0_404:                              # %OP116.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	xor	rax, 1952775229
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_148] # ymm0 = [0,0,0,1952775229]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB0_418
.LBB0_405:                              # %OP695.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_406:                              # %OP2494.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_45] # xmm0 = [11,0,0,0]
	jmp	.LBB0_110
.LBB0_407:                              # %OP1352.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [r14 + 320], ymm0
	jmp	.LBB0_408
.LBB0_409:                              # %OP3673.PUSH1
	mov	qword ptr [rbp - 72], rsi       # 8-byte Spill
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	lea	rax, [r13 + 1]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	shl	r13, 5
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1629
# %bb.410:                              # %OP3675.MLOAD.contd
	mov	r15, r12
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	add	r12, r13
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rbx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r13, rbx
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r14
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1639
# %bb.411:                              # %OP3679.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1639
# %bb.412:                              # %OP3684.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_58] # xmm0 = [28,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 28
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1639
# %bb.413:                              # %OP3689.PUSH32
	mov	r15, rbx
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_59] # ymm0 = [6076853728512573440,5279449474501398081,3619240749764591948,6155973685307076694]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240749764591948
	movabs	r8, 6076853728512573440
	movabs	r9, 5279449474501398081
	push	r14
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.414:                              # %OP3694.SWAP1
	vmovdqa	xmm0, xmmword ptr [r12]
	vmovdqa	xmm1, xmmword ptr [r12 + 16]
	mov	rdi, qword ptr [r12 - 32]
	mov	rsi, qword ptr [r12 - 24]
	mov	rcx, qword ptr [r12 - 8]
	mov	rdx, qword ptr [r12 - 16]
	vmovdqa	xmmword ptr [r12 - 16], xmm1
	vmovdqa	xmmword ptr [r12 - 32], xmm0
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r14
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.415:                              # %OP3695.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r8, qword ptr [r12 - 8]
	mov	r9, qword ptr [r12 - 16]
	mov	r10, qword ptr [r12 - 32]
	mov	r11, qword ptr [r12 - 24]
	sub	r10, rcx
	sbb	r11, rdx
	sbb	r9, rdi
	sbb	r8, rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 100
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	r10, 100
	adc	r11, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r12 - 32], r10
	mov	qword ptr [r12 - 24], r11
	mov	qword ptr [r12 - 16], r9
	mov	qword ptr [r12 - 8], r8
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	rdi, r14
	jmp	.LBB0_456
.LBB0_416:                              # %OP265.PUSH1
	add	rbx, r12
	add	r15, r12
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15], ymm0
	vmovups	ymmword ptr [rbx + 192], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r15
	jmp	.LBB0_456
.LBB0_417:
	mov	r13, rax
	mov	r11, r15
.LBB0_418:                              # %OP213.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	lea	rsi, [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	jmp	.LBB0_713
.LBB0_419:                              # %OP303.PUSH1
	add	r13, r12
	add	rsi, r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [r13 + 64], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_456
.LBB0_420:                              # %OP279.PUSH1
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsi, rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rsi + 32], ymm0
	vmovups	ymmword ptr [rsi], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_456
.LBB0_421:                              # %OP977.PUSH1
	add	r13, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_593
# %bb.422:                              # %OP978.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	lea	r8, [r14 + 1]
	mov	rbx, r14
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	shl	r8, 5
	mov	qword ptr [r12 + r8 + 16], rdx
	mov	qword ptr [r12 + r8], rdi
	mov	qword ptr [r12 + r8 + 24], rcx
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [r12 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_593
# %bb.423:                              # %OP982.PUSH1
	mov	rax, r12
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	add	r12, rbx
	add	r14, 2
	mov	r11, qword ptr [rbp - 72]       # 8-byte Reload
	add	r11, rax
	mov	rax, qword ptr [r13 + 24]
	mov	r10, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r8, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	rbx, r14
	shl	rbx, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	adc	rax, 0
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 72], r11       # 8-byte Spill
	mov	qword ptr [r11 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax + rbx], ymm0
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_593
# %bb.424:                              # %OP993.PUSH1
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_151] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_593
# %bb.425:                              # %OP996.PUSH1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [r12 + 112], 0
	mov	qword ptr [r12 + 96], 11055
	mov	qword ptr [r12 + 120], 0
	mov	qword ptr [r12 + 104], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 37
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 128], rdx
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 136], rsi
	mov	rdi, r13
	mov	rsi, rbx
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB0_593
# %bb.426:                              # %OP1003.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [r12 - 32]
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	mov	qword ptr [r12 - 8], rax
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	je	.LBB0_446
.LBB0_427:
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_428:                              # %OP229.PUSH1
	add	rax, r12
	add	rsi, r12
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rsi], ymm0
	vmovups	ymmword ptr [rax + 128], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_385
.LBB0_429:                              # %OP149.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	xor	rax, 1513968787
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_12] # ymm0 = [0,0,0,1513968787]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB0_418
.LBB0_430:                              # %OP647.JUMPDEST
	lea	rax, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_116] # xmm0 = [923,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
.LBB0_431:                              # %OP2012.JUMPDEST
	lea	r13, [rax + 1]
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_48] # xmm0 = [10,0,0,0]
.LBB0_110:                              # %OP1816.JUMPDEST
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r14, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.111:                              # %OP1819.DUP2
	mov	rcx, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 8]
	mov	rax, qword ptr [rbx - 16]
	mov	rdi, r13
	shl	rdi, 5
	mov	qword ptr [r12 + rdi + 16], rax
	mov	qword ptr [r12 + rdi + 24], rsi
	mov	qword ptr [r12 + rdi], rcx
	mov	qword ptr [r12 + rdi + 8], rdx
.LBB0_112:                              # %dynamic_jump_table.preheader
	mov	r11, r14
	mov	r14, rax
	mov	rax, rdx
	jmp	.LBB0_1546
.LBB0_432:                              # %OP929.PUSH1
	lea	rax, [r14 + 2]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	add	r15, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r12, rsp
	add	r12, -32
	mov	rsp, r12
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r12
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1642
# %bb.433:                              # %OP931.MLOAD.contd
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	shl	r12, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r12 + 24], rax
	mov	qword ptr [r8 + r12 + 16], 0
	mov	qword ptr [r8 + r12], 0
	mov	qword ptr [r8 + r12 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r13
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.434:                              # %OP935.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	qword ptr [rbp - 56], rax       # 8-byte Spill
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	r12, r13
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.435:                              # %OP940.PUSH1
	mov	r13, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_24] # xmm0 = [17,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 17
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.436:                              # %OP945.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_25] # ymm0 = [0,4899916394579099648,3619240762665028421,6155973685307076694]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240762665028421
	movabs	r9, 4899916394579099648
	xor	r8d, r8d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.437:                              # %OP950.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1642
# %bb.438:                              # %OP951.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rcx
	mov	rdi, r12
.LBB0_403:                              # %OP2742.PUSH1
	mov	rsi, rbx
	jmp	.LBB0_385
.LBB0_440:                              # %OP1542.PUSH1
	add	r13, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_564
# %bb.441:                              # %OP1543.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	lea	r8, [r14 + 1]
	mov	rbx, r14
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	shl	r8, 5
	mov	qword ptr [r12 + r8 + 16], rdx
	mov	qword ptr [r12 + r8], rdi
	mov	qword ptr [r12 + r8 + 24], rcx
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [r12 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_564
# %bb.442:                              # %OP1547.PUSH1
	mov	rax, r12
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	add	r12, rbx
	add	r14, 2
	mov	r11, qword ptr [rbp - 72]       # 8-byte Reload
	add	r11, rax
	mov	rax, qword ptr [r13 + 24]
	mov	r10, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r8, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	rbx, r14
	shl	rbx, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	adc	rax, 0
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 72], r11       # 8-byte Spill
	mov	qword ptr [r11 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax + rbx], ymm0
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_564
# %bb.443:                              # %OP1558.PUSH1
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_107] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 36
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_564
# %bb.444:                              # %OP1561.PUSH1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [r12 + 112], 0
	mov	qword ptr [r12 + 96], 11092
	mov	qword ptr [r12 + 120], 0
	mov	qword ptr [r12 + 104], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 36
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 128], rdx
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 136], rsi
	mov	rdi, r13
	mov	rsi, rbx
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB0_564
# %bb.445:                              # %OP1568.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [r12 - 32]
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	mov	qword ptr [r12 - 8], rax
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1629
.LBB0_446:                              # %OP1009.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r12 - 8]
	mov	r9, qword ptr [r12 - 32]
	mov	r10, qword ptr [r12 - 24]
	mov	r11, qword ptr [r12 - 16]
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [r12 - 32], r9
	mov	qword ptr [r12 - 24], r10
	mov	qword ptr [r12 - 16], r11
	mov	qword ptr [r12 - 8], r8
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rdi
	mov	rdi, r13
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB0_547
.LBB0_447:                              # %select.end26942
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, r15
	jmp	.LBB0_1577
.LBB0_448:                              # %OP4202.PUSH1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	lea	r13, [r14 + 1]
	shl	r14, 5
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.449:                              # %OP4204.MLOAD.contd
	mov	r15, r12
	add	r12, r14
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.450:                              # %OP4208.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.451:                              # %OP4213.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_55] # xmm0 = [26,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 26
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.452:                              # %OP4218.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_56] # ymm0 = [4991114287033352192,5063543925202045260,3619240797074968147,6155973685307076694]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240797074968147
	movabs	r8, 4991114287033352192
	movabs	r9, 5063543925202045260
.LBB0_453:                              # %OP4281.PUSH32
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.454:                              # %OP4223.SWAP1
	vmovdqa	xmm0, xmmword ptr [r12]
	vmovdqa	xmm1, xmmword ptr [r12 + 16]
	mov	rdi, qword ptr [r12 - 32]
	mov	rsi, qword ptr [r12 - 24]
	mov	rcx, qword ptr [r12 - 8]
	mov	rdx, qword ptr [r12 - 16]
	vmovdqa	xmmword ptr [r12 - 16], xmm1
	vmovdqa	xmmword ptr [r12 - 32], xmm0
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.455:                              # %OP1144.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rsi, [rax + r14]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r8, qword ptr [r12 - 8]
	mov	r9, qword ptr [r12 - 16]
	mov	r10, qword ptr [r12 - 32]
	mov	r11, qword ptr [r12 - 24]
	sub	r10, rcx
	sbb	r11, rdx
	sbb	r9, rdi
	sbb	r8, rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 100
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	r10, 100
	adc	r11, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r12 - 32], r10
	mov	qword ptr [r12 - 24], r11
	mov	qword ptr [r12 - 16], r9
	mov	qword ptr [r12 - 8], r8
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	rdi, r15
.LBB0_456:                              # %OP265.PUSH1
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB0_527
.LBB0_457:                              # %select.end26836
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_458:                              # %OP93.DUP1
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 2514000705
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_141] # ymm0 = [0,0,0,2514000705]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	je	.LBB0_632
# %bb.459:                              # %OP98.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 2835717307
	xor	rax, rsi
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_142] # ymm0 = [0,0,0,2835717307]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	je	.LBB0_460
	jmp	.LBB0_418
.LBB0_1575:                             # %OP4193.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rsi], ymm0
	add	rsi, -32
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	je	.LBB0_1576
	jmp	.LBB0_386
.LBB0_463:
	xor	ecx, ecx
	xor	eax, eax
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 280]      # 8-byte Reload
.LBB0_464:                              # %udiv-loop-exit26762
	shld	r11, rdx, 1
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	or	r11, rax
	shld	rdx, r8, 1
	or	rdx, rax
	add	r8, r8
	or	r8, rcx
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, rdx
.LBB0_465:                              # %udiv-end26761
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	lea	r14, [rax + 5]
	mov	eax, r11d
	mov	rcx, qword ptr [rbp - 256]      # 8-byte Reload
	mov	qword ptr [rcx + 8], r9
	mov	qword ptr [rcx], r8
	mov	qword ptr [rcx + 16], rax
	mov	qword ptr [rcx + 24], 0
	mov	rax, qword ptr [rbp - 184]      # 8-byte Reload
	mov	qword ptr [rax + 24], 0
	mov	qword ptr [rax + 8], 0
	mov	qword ptr [rax + 16], 0
	mov	qword ptr [rax], 25067096
	mov	r13, qword ptr [rbp - 328]      # 8-byte Reload
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 64
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_564
# %bb.466:                              # %OP4743.MLOAD.contd
	mov	r15, qword ptr [rbp - 168]      # 8-byte Reload
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	rax, qword ptr [r15 + 96]
	mov	rbx, r14
	shl	rbx, 5
	shl	rax, 32
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r15 + 208], rdx
	mov	qword ptr [r15 + 192], rdi
	mov	qword ptr [r15 + 216], rcx
	mov	qword ptr [r15 + 200], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_564
# %bb.467:                              # %OP4751.PUSH1
	add	rbx, r12
	add	qword ptr [r13], 4
	adc	qword ptr [r13 + 8], 0
	adc	qword ptr [r13 + 16], 0
	adc	qword ptr [r13 + 24], 0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	lea	r14, [r13 + 7]
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 32
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [r15 + 208], 0
	mov	qword ptr [r15 + 192], 64
	mov	qword ptr [r15 + 216], 0
	mov	qword ptr [r15 + 200], 0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_564
# %bb.468:                              # %OP4755.MLOAD.contd
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 208], rsi
	mov	qword ptr [r15 + 192], rcx
	mov	qword ptr [r15 + 216], rax
	mov	qword ptr [r15 + 200], rdx
	shl	r14, 5
	mov	rdi, qword ptr [r15 + 152]
	mov	r8, qword ptr [r15 + 144]
	mov	r9, qword ptr [r15 + 128]
	mov	r10, qword ptr [r15 + 136]
	sub	r9, rcx
	sbb	r10, rdx
	sbb	r8, rsi
	sbb	rdi, rax
	mov	qword ptr [r12 + r14], r9
	mov	qword ptr [r12 + r14 + 16], r8
	mov	qword ptr [r12 + r14 + 8], r10
	mov	qword ptr [r12 + r14 + 24], rdi
	mov	qword ptr [r15 + 272], rsi
	mov	qword ptr [r15 + 256], rcx
	mov	qword ptr [r15 + 280], rax
	mov	qword ptr [r15 + 264], rdx
	mov	rax, qword ptr [r15 + 72]
	mov	rcx, qword ptr [r15 + 88]
	mov	rdx, qword ptr [r15 + 64]
	mov	rsi, qword ptr [r15 + 80]
	mov	qword ptr [r15 + 304], rsi
	mov	qword ptr [r15 + 288], rdx
	mov	qword ptr [r15 + 312], rcx
	mov	qword ptr [r15 + 296], rax
	add	r13, 11
	lea	rbx, [r15 + 320]
	mov	qword ptr [r15 + 336], rsi
	mov	qword ptr [r15 + 320], rdx
	mov	qword ptr [r15 + 344], rcx
	mov	qword ptr [rbp - 168], r15      # 8-byte Spill
	mov	qword ptr [r15 + 328], rax
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r14, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.469:                              # %OP4763.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_473
# %bb.470:
	mov	r11, r14
.LBB0_471:                              # %OP4771.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.472:
	lea	rax, [rip + .Ltmp2]
	jmp	.LBB0_1561
.LBB0_473:                              # %OP4768.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbp - 168]      # 8-byte Reload
	vmovdqu	ymmword ptr [rax + 384], ymm0
	mov	rdi, r14
	jmp	.LBB0_384
.LBB0_495:                              # %OP711.PUSH1
	add	rcx, r12
	add	rsi, r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rcx + 128], ymm0
	mov	rdi, r14
	jmp	.LBB0_385
.LBB0_474:                              # %OP2025.PUSH1
	add	r15, 3
	add	r12, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.475:                              # %OP2027.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	r14, r15
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r8 + r14 + 24], rax
	mov	qword ptr [r8 + r14 + 16], 0
	mov	qword ptr [r8 + r14], 0
	mov	qword ptr [r8 + r14 + 8], 0
	mov	qword ptr [r13 + 144], rdx
	mov	qword ptr [r13 + 128], rdi
	mov	qword ptr [r13 + 152], rcx
	mov	qword ptr [r13 + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.476:                              # %OP2031.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	qword ptr [rbp - 56], rax       # 8-byte Spill
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r13 + 160], rdi
	mov	qword ptr [r13 + 176], rdx
	mov	qword ptr [r13 + 168], rsi
	mov	qword ptr [r13 + 184], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 128], rdi
	mov	qword ptr [r13 + 136], rsi
	mov	qword ptr [r13 + 144], rdx
	mov	qword ptr [r13 + 152], rcx
	sub	rsp, 32
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.477:                              # %OP2036.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_24] # xmm0 = [17,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r13 + 160], rdi
	mov	qword ptr [r13 + 176], rdx
	mov	qword ptr [r13 + 168], rsi
	mov	qword ptr [r13 + 184], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 128], rdi
	mov	qword ptr [r13 + 136], rsi
	mov	qword ptr [r13 + 144], rdx
	mov	qword ptr [r13 + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 17
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.478:                              # %OP2041.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_25] # ymm0 = [0,4899916394579099648,3619240762665028421,6155973685307076694]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r13 + 160], rdi
	mov	qword ptr [r13 + 176], rdx
	mov	qword ptr [r13 + 168], rsi
	mov	qword ptr [r13 + 184], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 128], rdi
	mov	qword ptr [r13 + 136], rsi
	mov	qword ptr [r13 + 144], rdx
	mov	qword ptr [r13 + 152], rcx
	jmp	.LBB0_492
.LBB0_479:                              # %OP1947.PUSH1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	add	r8, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r15, r8
	vmovdqu	ymmword ptr [r8], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1639
# %bb.480:                              # %OP1949.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	r14, rbx
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r14 + 24], rax
	mov	qword ptr [r13 + r14 + 16], 0
	mov	qword ptr [r13 + r14], 0
	mov	qword ptr [r13 + r14 + 8], 0
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1639
# %bb.481:                              # %OP1953.PUSH1
	add	r13, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 152], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1639
# %bb.482:                              # %OP1958.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_29] # xmm0 = [20,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 152], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 20
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1639
# %bb.483:                              # %OP1963.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_124] # ymm0 = [0,4919132894305189888,3619240736896205385,6155973685307076694]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240736896205385
	movabs	r9, 4919132894305189888
	xor	r8d, r8d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1639
# %bb.484:                              # %OP1968.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB0_1639
# %bb.485:                              # %OP1969.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12]
	mov	r10, qword ptr [r12 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rcx
	jmp	.LBB0_1572
.LBB0_486:
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	xor	edi, edi
	jmp	.LBB0_652
.LBB0_551:                              # %OP52.DUP1
	vmovdqu	xmmword ptr [r14 + 40], xmm0
	mov	qword ptr [r14 + 56], 0
	mov	ecx, 4294363881
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_7] # ymm0 = [0,0,0,4294363881]
	vmovdqu	ymmword ptr [r14 + 8], ymm0
	mov	qword ptr [r14], rdx
	cmp	eax, -603415
	jne	.LBB0_418
	jmp	.LBB0_552
.LBB0_487:                              # %OP2522.PUSH1
	add	r15, 4
	add	r12, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.488:                              # %OP2524.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	r14, r15
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r8 + r14 + 24], rax
	mov	qword ptr [r8 + r14 + 16], 0
	mov	qword ptr [r8 + r14], 0
	mov	qword ptr [r8 + r14 + 8], 0
	mov	qword ptr [r13 + 176], rdx
	mov	qword ptr [r13 + 160], rdi
	mov	qword ptr [r13 + 184], rcx
	mov	qword ptr [r13 + 168], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.489:                              # %OP2528.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	qword ptr [rbp - 56], rax       # 8-byte Spill
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r13 + 192], rdi
	mov	qword ptr [r13 + 208], rdx
	mov	qword ptr [r13 + 200], rsi
	mov	qword ptr [r13 + 216], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 160], rdi
	mov	qword ptr [r13 + 168], rsi
	mov	qword ptr [r13 + 176], rdx
	mov	qword ptr [r13 + 184], rcx
	sub	rsp, 32
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.490:                              # %OP2533.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_24] # xmm0 = [17,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r13 + 192], rdi
	mov	qword ptr [r13 + 208], rdx
	mov	qword ptr [r13 + 200], rsi
	mov	qword ptr [r13 + 216], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 160], rdi
	mov	qword ptr [r13 + 168], rsi
	mov	qword ptr [r13 + 176], rdx
	mov	qword ptr [r13 + 184], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 17
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.491:                              # %OP2538.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_25] # ymm0 = [0,4899916394579099648,3619240762665028421,6155973685307076694]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r13 + 192], rdi
	mov	qword ptr [r13 + 208], rdx
	mov	qword ptr [r13 + 200], rsi
	mov	qword ptr [r13 + 216], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 160], rdi
	mov	qword ptr [r13 + 168], rsi
	mov	qword ptr [r13 + 176], rdx
	mov	qword ptr [r13 + 184], rcx
.LBB0_492:                              # %OP2538.PUSH32
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240762665028421
	movabs	r9, 4899916394579099648
	xor	r8d, r8d
	push	r14
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.493:                              # %OP2543.SWAP1
	mov	r13, r14
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r13
	call	.L__revmc_ir_builtin_mload
	test	al, al
	je	.LBB0_650
	jmp	.LBB0_494
.LBB0_496:                              # %resize.i24782
	mov	esi, 32
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, r13
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 128]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 224]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB0_302
# %bb.497:
	mov	r13, r8
	jmp	.LBB0_1576
.LBB0_498:                              # %resize.i24797
	mov	esi, 64
	mov	rdi, r13
	mov	r13, r8
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 224]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 176]      # 8-byte Reload
	mov	r8, r13
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_303
.LBB0_499:
	mov	r13, qword ptr [rbp - 168]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_500:                              # %resize.i24812
	mov	r13, rdi
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r11, -1
	mov	rdi, r13
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	test	al, al
	je	.LBB0_305
.LBB0_501:
	mov	r13, qword ptr [rbp - 176]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_507:                              # %resize.i24827
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	test	al, al
	je	.LBB0_306
	jmp	.LBB0_508
.LBB0_502:                              # %resize.i24843
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_508
# %bb.503:                              # %resize.i24843.OP4600.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r10, qword ptr [rax + 40]
	mov	r12, qword ptr [rbp - 224]      # 8-byte Reload
	mov	r9, -1
	jmp	.LBB0_309
.LBB0_504:                              # %resize.i24858
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 152], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 152]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	test	al, al
	je	.LBB0_310
	jmp	.LBB0_508
.LBB0_505:                              # %resize.i24874
	mov	r12, r8
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_508
# %bb.506:                              # %resize.i24874.OP4605.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbx + 88]
	mov	rcx, qword ptr [rbx + 80]
	mov	rdx, qword ptr [rbx + 64]
	mov	rdi, qword ptr [rbx + 72]
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	mov	r8, r12
	jmp	.LBB0_311
.LBB0_508:
	mov	r13, qword ptr [rbp - 144]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_509:                              # %resize.i
	mov	esi, 96
	mov	rdi, r11
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	r13, r9
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, r15
	mov	r9, r13
	mov	r8, qword ptr [rbp - 136]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	test	al, al
	je	.LBB0_15
# %bb.510:
	xor	r13d, r13d
	jmp	.LBB0_1577
.LBB0_511:
	mov	r13, r11
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_512:                              # %resize.i24506
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 72], r11       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB0_295
.LBB0_1662:
	mov	r13, rcx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_513:                              # %resize.i24919
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, r11
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_140
# %bb.514:
	mov	r13, rdi
	jmp	.LBB0_1576
.LBB0_1643:                             # %resize.i24305
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB0_164
	jmp	.LBB0_1644
.LBB0_515:                              # %resize.i24412
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	test	al, al
	je	.LBB0_318
# %bb.516:
	mov	r13, rdi
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_517:                              # %resize.i24490
	mov	rdi, r11
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r13, r11
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, r13
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB0_175
	jmp	.LBB0_95
.LBB0_518:                              # %resize.i24110
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	test	al, al
	je	.LBB0_180
# %bb.519:
	mov	r13, r9
	dec	r13
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_520:                              # %resize.i24581
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	test	al, al
	je	.LBB0_169
	jmp	.LBB0_95
.LBB0_521:                              # %select.false
	mov	eax, ecx
	jmp	.LBB0_17
.LBB0_563:                              # %resize.i24674
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	rsi, rax
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB0_265
	jmp	.LBB0_564
.LBB0_522:                              # %resize.i24690
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	rsi, rax
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB0_267
	jmp	.LBB0_457
.LBB0_523:                              # %resize.i24706
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB0_270
	jmp	.LBB0_564
.LBB0_388:                              # %select.false27555
	mov	eax, ecx
	jmp	.LBB0_381
.LBB0_524:                              # %resize.i24126
	mov	r12, r9
	mov	r13, rsi
	mov	rbx, rcx
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_95
# %bb.525:                              # %resize.i24126.OP1752.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, qword ptr [rax + 40]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, rbx
	mov	rsi, r13
	mov	r9, r12
	jmp	.LBB0_47
.LBB0_692:                              # %resize.i24141
	mov	esi, 96
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [rbp - 224], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	test	al, al
	je	.LBB0_48
	jmp	.LBB0_693
.LBB0_715:                              # %resize.i24156
	mov	rdi, rbx
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [rbp - 224], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	test	al, al
	je	.LBB0_49
	jmp	.LBB0_457
.LBB0_526:                              # %resize.i24171
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rbx, r9
	mov	r12, r10
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, r12
	mov	r9, rbx
	test	al, al
	je	.LBB0_50
	jmp	.LBB0_457
.LBB0_527:                              # %select.false26837
	mov	eax, ecx
	jmp	.LBB0_457
.LBB0_528:                              # %select.false27011
	mov	eax, ecx
	jmp	.LBB0_255
.LBB0_529:                              # %resize.i24185
	mov	esi, 32
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 288]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB0_62
# %bb.530:
	mov	r13, qword ptr [rbp - 248]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_531:                              # %resize.i24200
	mov	esi, 64
	mov	r13, r9
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, r13
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB0_63
	jmp	.LBB0_535
.LBB0_532:                              # %resize.i24215
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, r11
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, r13
	test	al, al
	je	.LBB0_65
	jmp	.LBB0_693
.LBB0_533:                              # %resize.i24230
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	test	al, al
	je	.LBB0_66
	jmp	.LBB0_535
.LBB0_534:                              # %resize.i24244
	mov	r13, rsi
	mov	esi, 32
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, r13
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB0_70
.LBB0_535:
	mov	r13, qword ptr [rbp - 240]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_536:                              # %resize.i24259
	mov	esi, 64
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB0_71
	jmp	.LBB0_538
.LBB0_716:                              # %resize.i24274
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, -1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	test	al, al
	je	.LBB0_73
	jmp	.LBB0_717
.LBB0_537:                              # %resize.i24289
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	test	al, al
	je	.LBB0_74
.LBB0_538:
	mov	r13, qword ptr [rbp - 288]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_539:
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, -2
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_540:                              # %resize.i24382
	mov	esi, 64
	mov	r12, r11
	mov	rdi, r11
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, r12
	test	al, al
	je	.LBB0_129
	jmp	.LBB0_693
.LBB0_541:                              # %resize.i24396
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_130
	jmp	.LBB0_693
.LBB0_542:                              # %resize.i24628
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_494
# %bb.543:                              # %resize.i24628.OP4134.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r14, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax + 40]
	xor	r15d, r15d
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_259
.LBB0_544:                              # %resize.i24643
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	esi, 96
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB0_260
	jmp	.LBB0_457
.LBB0_545:                              # %resize.i24658
	mov	rdi, r14
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	rsi, rax
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB0_261
	jmp	.LBB0_457
.LBB0_666:                              # %resize.i24521
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 64
	mov	rdi, r11
	mov	r13, r8
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, r13
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB0_372
	jmp	.LBB0_667
.LBB0_546:                              # %resize.i24535
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r11
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	qword ptr [rbp - 224], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 104], rdx      # 8-byte Spill
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 224]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB0_373
	jmp	.LBB0_667
.LBB0_1637:                             # %resize.i24550
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r10, -1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_375
	jmp	.LBB0_667
.LBB0_1625:                             # %resize.i24565
	mov	qword ptr [rbp - 224], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_376
	jmp	.LBB0_693
.LBB0_547:                              # %select.false26943
	mov	eax, ecx
	jmp	.LBB0_447
.LBB0_548:
	dec	r13
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_51:                               # %dynamic_jump_table.preheader
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1546
.LBB0_95:
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_384:                              # %OP3849.RETURNDATASIZE
	mov	rsi, r12
.LBB0_385:                              # %OP3849.RETURNDATASIZE
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB0_386
.LBB0_1576:                             # %return
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_386:                              # %select.false27389
	mov	eax, ecx
	jmp	.LBB0_1576
.LBB0_408:                              # %OP1352.PUSH1
	mov	rdi, r15
	jmp	.LBB0_384
.LBB0_460:                              # %OP770.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_126] # xmm0 = [846,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rbx, qword ptr [rcx + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, rbx
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r12 + rax + 64], rdx
	mov	qword ptr [r12 + rax + 80], r8
	mov	qword ptr [r12 + rax + 72], rdi
	mov	qword ptr [r12 + rax + 88], r9
	mov	qword ptr [r12 + rax + 128], rdx
	mov	qword ptr [r12 + rax + 144], r8
	mov	qword ptr [r12 + rax + 136], rdi
	mov	qword ptr [r12 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r12 + rsi], rcx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_654
# %bb.461:
	mov	r10, rbx
	jmp	.LBB0_634
.LBB0_494:
	mov	r13, r15
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_550:                              # %OP11.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_19
.LBB0_552:                              # %OP918.JUMPDEST
	lea	rcx, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_19] # xmm0 = [599,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	r13, rcx
.LBB0_553:                              # %OP3747.JUMPDEST
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.554:                              # %OP3750.PUSH1
	mov	r15, r14
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	vpxor	ymm0, ymm0, ymmword ptr [rbx]
	xor	eax, eax
	vptest	ymm0, ymm0
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jne	.LBB0_556
# %bb.555:
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_1509
.LBB0_556:                              # %OP3754.PUSH1
	lea	rax, [r13 + 2]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	add	r15, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1642
# %bb.557:                              # %OP3756.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.558:                              # %OP3760.PUSH1
	add	r12, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.559:                              # %OP3765.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_24] # xmm0 = [17,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 17
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.560:                              # %OP3770.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_25] # ymm0 = [0,4899916394579099648,3619240762665028421,6155973685307076694]
	mov	qword ptr [rbp - 56], r12       # 8-byte Spill
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240762665028421
	movabs	r9, 4899916394579099648
	xor	r8d, r8d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.561:                              # %OP3775.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1642
# %bb.562:                              # %OP3776.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rcx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_403
.LBB0_564:
	mov	r13, r14
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_565:                              # %OP77.JUMPDEST.loopexit
	mov	rdx, r13
	shl	rdx, 5
	mov	rsi, qword ptr [r12 + rdx - 8]
	mov	rcx, qword ptr [r12 + rdx - 16]
	mov	rax, qword ptr [r12 + rdx - 32]
	mov	rbx, qword ptr [r12 + rdx - 24]
	jmp	.LBB0_79
.LBB0_566:                              # %OP123.JUMPDEST.loopexit
	mov	rsi, r13
	shl	rsi, 5
	mov	rdx, qword ptr [r12 + rsi - 8]
	mov	rcx, qword ptr [r12 + rsi - 16]
	mov	rax, qword ptr [r12 + rsi - 32]
	mov	rbx, qword ptr [r12 + rsi - 24]
	jmp	.LBB0_22
.LBB0_567:                              # %OP174.JUMPDEST.loopexit
	mov	rsi, r13
	shl	rsi, 5
	mov	rdx, qword ptr [r12 + rsi - 8]
	mov	rcx, qword ptr [r12 + rsi - 16]
	mov	rax, qword ptr [r12 + rsi - 32]
	mov	rbx, qword ptr [r12 + rsi - 24]
	jmp	.LBB0_23
.LBB0_568:                              # %OP197.JUMPDEST.loopexit
	mov	rsi, r13
	shl	rsi, 5
	mov	rdx, qword ptr [r12 + rsi - 8]
	mov	rcx, qword ptr [r12 + rsi - 16]
	mov	rax, qword ptr [r12 + rsi - 32]
	mov	rbx, qword ptr [r12 + rsi - 24]
	jmp	.LBB0_24
.LBB0_569:                              # %OP232.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rax + 80]
	jmp	.LBB0_26
.LBB0_570:                              # %OP282.JUMPDEST.loopexit
	mov	rax, r13
	shl	rax, 5
	mov	r9, qword ptr [r12 + rax - 8]
	mov	rcx, qword ptr [r12 + rax - 16]
	mov	rdx, qword ptr [r12 + rax - 24]
	mov	rsi, qword ptr [r12 + rax - 32]
	mov	rdi, qword ptr [r12 + rax - 104]
	mov	qword ptr [rbp - 224], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r12 + rax - 112]
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r12 + rax - 128]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rax, qword ptr [r12 + rax - 120]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	jmp	.LBB0_30
.LBB0_571:                              # %OP321.JUMPDEST
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	lea	r15, [r13 + 2]
	vmovdqu	ymmword ptr [r12 + r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1655
# %bb.572:                              # %OP324.MLOAD.contd
	add	r14, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	lea	r8, [r13 + 3]
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 32
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	lea	rax, [r13 + 4]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	r13, r8
	shl	r13, 5
	mov	qword ptr [r12 + r13 + 16], 0
	mov	qword ptr [r12 + r13], 32
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	shl	rax, 5
	mov	qword ptr [r12 + rax + 16], rdx
	mov	qword ptr [r12 + rax], rdi
	mov	qword ptr [r12 + rax + 24], rcx
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [r12 + rax + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_584
# %bb.573:                              # %OP329.DUP4
	add	r13, r12
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_427
# %bb.574:                              # %OP330.MLOAD.contd
	add	r15, r12
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	rax, r12
	mov	r12, rax
	mov	rax, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	r11, qword ptr [r14 + 40]
	mov	rbx, qword ptr [r14 + 56]
	mov	rcx, qword ptr [r14 + 32]
	mov	rax, qword ptr [r14 + 48]
	mov	rdi, qword ptr [r15]
	add	rdi, rcx
	mov	rsi, qword ptr [r15 + 8]
	adc	rsi, r11
	mov	rdx, qword ptr [r15 + 16]
	adc	rdx, rax
	mov	qword ptr [r14 + 176], rax
	mov	qword ptr [r14 + 160], rcx
	mov	rcx, qword ptr [r15 + 24]
	adc	rcx, rbx
	mov	qword ptr [r14 + 184], rbx
	mov	qword ptr [r14 + 168], r11
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	r10
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_584
# %bb.575:                              # %OP335.DUP4
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_427
# %bb.576:                              # %OP336.MLOAD.contd
	mov	rdi, qword ptr [r14 + 56]
	mov	r8, qword ptr [r14 + 48]
	mov	r9, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 40]
	mov	rax, qword ptr [r14]
	add	rax, r9
	mov	rcx, qword ptr [r14 + 8]
	adc	rcx, rdx
	mov	qword ptr [r14 + 8], rdx
	mov	rdx, qword ptr [r14 + 16]
	adc	rdx, r8
	mov	rsi, qword ptr [r14 + 24]
	adc	rsi, rdi
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	r8, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	r9, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 24], rsi
	mov	r10, qword ptr [r15 + 8]
	mov	qword ptr [r15 + 8], rcx
	add	rdi, qword ptr [r14 - 32]
	adc	r10, qword ptr [r14 - 24]
	adc	r9, qword ptr [r14 - 16]
	adc	r8, qword ptr [r14 - 8]
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 16], r9
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13], rdi
	mov	r11, qword ptr [rbx]
	mov	r15, qword ptr [rbx + 8]
	mov	r13, qword ptr [rbx + 16]
	mov	rbx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rbx
	mov	qword ptr [r12 + 16], r13
	mov	qword ptr [r12 + 8], r15
	mov	qword ptr [r12], r11
	mov	qword ptr [r14 + 184], rbx
	mov	qword ptr [r14 + 176], r13
	mov	qword ptr [r14 + 168], r15
	mov	qword ptr [r14 + 160], r11
	mov	qword ptr [r14 + 216], rsi
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 200], rcx
	mov	qword ptr [r14 + 192], rax
	mov	qword ptr [r14 + 248], r8
	mov	qword ptr [r14 + 240], r9
	mov	qword ptr [r14 + 232], r10
	mov	qword ptr [r14 + 224], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 256], ymm0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 9
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_577:                              # %OP352.JUMPDEST.preheader
	lea	r8, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	mov	r10, r8
	shl	r10, 5
	mov	rax, qword ptr [r12 + r14 - 8]
	mov	rcx, qword ptr [r12 + r14 - 16]
	mov	rdi, r12
	mov	r12, qword ptr [r12 + r14 - 32]
	cmp	r12, qword ptr [rdi + r14 - 128]
	mov	rdx, qword ptr [rdi + r14 - 24]
	mov	rsi, rdx
	sbb	rsi, qword ptr [rdi + r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [rdi + r14 - 112]
	mov	qword ptr [rdi + r10 + 16], rcx
	mov	qword ptr [rdi + r10], r12
	mov	rsi, rax
	sbb	rsi, qword ptr [rdi + r14 - 104]
	mov	qword ptr [rdi + r10 + 24], rax
	mov	qword ptr [rdi + r10 + 8], rdx
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdi + r14 + 8], xmm0
	mov	qword ptr [rdi + r14], rsi
	mov	qword ptr [rdi + r14 + 24], 0
	jb	.LBB0_585
# %bb.578:
	mov	r12, rdi
	jmp	.LBB0_579
.LBB0_585:                              # %OP359.DUP2.lr.ph
	mov	qword ptr [rbp - 224], r8       # 8-byte Spill
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r14, rdi
	add	r10, rdi
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
.LBB0_586:                              # %OP359.DUP2
                                        # =>This Inner Loop Header: Depth=1
	mov	rbx, qword ptr [r14 - 64]
	add	rbx, r12
	mov	rdi, qword ptr [r14 - 56]
	adc	rdi, rdx
	mov	r8, qword ptr [r14 - 48]
	adc	r8, rcx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r12
	mov	r9, qword ptr [r14 - 40]
	adc	r9, rax
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14], rbx
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], rdi
	mov	r15, qword ptr [r11 + 40]
	mov	r10, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	r10, r13
	mov	rsi, rbx
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	neg	rdi
	mov	edi, 0
	sbb	rdi, r8
	mov	r8, -1
	mov	edi, 0
	sbb	rdi, r9
	cmovb	rsi, r8
	mov	r11, r15
	cmp	rsi, r10
	ja	.LBB0_590
.LBB0_587:                              # %OP362.MLOAD.contd
                                        #   in Loop: Header=BB0_586 Depth=1
	add	r13, qword ptr [r15 + 8]
	mov	rsi, qword ptr [rbx + r13 + 16]
	mov	rdi, qword ptr [rbx + r13 + 24]
	mov	r9, qword ptr [rbx + r13]
	mov	rbx, qword ptr [rbx + r13 + 8]
	mov	r13, rsi
	movbe	qword ptr [r14 + 16], rbx
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	movbe	qword ptr [r14], rdi
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	movbe	qword ptr [r14 + 24], r9
	movbe	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 80], rcx
	mov	qword ptr [r14 + 64], r12
	mov	qword ptr [r14 + 72], rdx
	mov	qword ptr [r14 + 88], rax
	add	r12, qword ptr [r14 - 96]
	adc	rdx, qword ptr [r14 - 88]
	adc	rcx, qword ptr [r14 - 80]
	adc	rax, qword ptr [r14 - 72]
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [r9 + 16], rcx
	mov	qword ptr [r9], r12
	mov	qword ptr [r9 + 24], rax
	mov	qword ptr [r9 + 8], rdx
	mov	rdi, qword ptr [r11 + 16]
	mov	r15, qword ptr [r11 + 48]
	sub	rdi, r15
	mov	rsi, r12
	add	rsi, 32
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r10, r9
	ja	.LBB0_592
.LBB0_588:                              # %OP367.PUSH1
                                        #   in Loop: Header=BB0_586 Depth=1
	add	r15, qword ptr [r11 + 8]
	mov	qword ptr [r12 + r15 + 8], rbx
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12 + r15], rax
	mov	qword ptr [r12 + r15 + 16], r13
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + r15 + 24], rax
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r12, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	add	r12, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 - 24], rdx
	mov	qword ptr [r14 - 8], rax
	mov	qword ptr [r14 - 32], r12
	mov	qword ptr [r14 - 16], rcx
	cmp	r12, qword ptr [r14 - 128]
	mov	rsi, rdx
	sbb	rsi, qword ptr [r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [r14 - 112]
	mov	rsi, rax
	sbb	rsi, qword ptr [r14 - 104]
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r12
	setae	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], 0
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jb	.LBB0_586
	jmp	.LBB0_589
.LBB0_590:                              # %resize.i24080
                                        #   in Loop: Header=BB0_586 Depth=1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_1109
# %bb.591:                              # %resize.i24080.OP362.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB0_586 Depth=1
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r12, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r11, qword ptr [rsi + 40]
	vpxor	xmm0, xmm0, xmm0
	mov	r8, -1
	jmp	.LBB0_587
.LBB0_592:                              # %resize.i24094
                                        #   in Loop: Header=BB0_586 Depth=1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r13, r10
	mov	qword ptr [rbp - 128], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 128]      # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	r10, r13
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	test	al, al
	je	.LBB0_588
	jmp	.LBB0_457
.LBB0_589:
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB0_579:                              # %OP371.JUMPDEST
	mov	r15, r13
	shl	r15, 5
	mov	rax, qword ptr [r12 + r15 - 160]
	lea	r8, [r13 - 5]
	mov	rcx, qword ptr [r12 + r15 - 200]
	mov	rsi, qword ptr [r12 + r15 - 216]
	mov	rdx, qword ptr [r12 + r15 - 208]
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	shl	r8, 5
	mov	rdi, qword ptr [r12 + r15 - 224]
	add	rdi, rax
	adc	rsi, qword ptr [r12 + r15 - 152]
	adc	rdx, qword ptr [r12 + r15 - 144]
	adc	rcx, qword ptr [r12 + r15 - 136]
	mov	qword ptr [r12 + r15 - 224], rdi
	mov	qword ptr [r12 + r15 - 208], rdx
	mov	qword ptr [r12 + r15 - 216], rsi
	mov	qword ptr [r12 + r15 - 200], rcx
	xor	r9d, r9d
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 - 184], xmm0
	and	rax, 31
	mov	qword ptr [r12 + r15 - 192], rax
	mov	qword ptr [r12 + r15 - 168], 0
	sete	r9b
	mov	qword ptr [r12 + r8], r9
	vmovdqu	xmmword ptr [r12 + r8 + 8], xmm0
	mov	qword ptr [r12 + r8 + 24], 0
	je	.LBB0_595
# %bb.580:                              # %OP388.DUP1
	lea	r14, [r13 - 3]
	add	r15, r12
	sub	rdi, rax
	sbb	rsi, 0
	sbb	rdx, 0
	sbb	rcx, 0
	mov	qword ptr [r15 - 160], rdi
	mov	qword ptr [r15 - 152], rsi
	mov	qword ptr [r15 - 144], rdx
	mov	qword ptr [r15 - 136], rcx
	mov	qword ptr [r15 - 128], rdi
	mov	qword ptr [r15 - 120], rsi
	mov	qword ptr [r15 - 112], rdx
	mov	qword ptr [r15 - 104], rcx
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r11
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB0_593
# %bb.581:                              # %OP392.MLOAD.contd
	lea	rdi, [rcx - 1]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	rbx, rdi
	mov	qword ptr [r15 - 112], rsi
	mov	qword ptr [r15 - 128], rcx
	mov	qword ptr [r15 - 104], rax
	mov	qword ptr [r15 - 120], rdx
	shl	r14, 5
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 1
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [r12 + r14 + 8], 0
	lea	rsi, [r15 - 64]
	mov	rax, rdi
	shl	rax, 5
	xor	ecx, ecx
	mov	edx, 32
	sub	rdx, qword ptr [r15 - 192]
	mov	edi, 0
	sbb	rdi, qword ptr [r15 - 184]
	mov	r8d, 0
	sbb	r8, qword ptr [r15 - 176]
	sbb	rcx, qword ptr [r15 - 168]
	mov	qword ptr [r15 - 64], rdx
	mov	qword ptr [r15 - 56], rdi
	mov	qword ptr [r15 - 48], r8
	mov	qword ptr [r15 - 40], rcx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_87] # xmm0 = [256,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	mov	rdi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB0_594
# %bb.582:                              # %OP399.SUB
	add	r14, r12
	mov	r8, qword ptr [r15 - 64]
	mov	r9, qword ptr [r15 - 56]
	mov	rax, qword ptr [r15 - 48]
	mov	r10, qword ptr [r15 - 40]
	not	r10
	not	rax
	not	r9
	not	r8
	add	r8, qword ptr [r15 - 96]
	adc	r9, qword ptr [r15 - 88]
	adc	rax, qword ptr [r15 - 80]
	adc	r10, qword ptr [r15 - 72]
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	add	rbx, -4
	mov	qword ptr [rbp - 72], rbx       # 8-byte Spill
	shl	rbx, 5
	and	rax, qword ptr [r12 + rbx + 16]
	and	r8, qword ptr [r12 + rbx]
	and	r10, qword ptr [r12 + rbx + 24]
	and	r9, qword ptr [r12 + rbx + 8]
	mov	qword ptr [r12 + rbx + 8], r9
	mov	qword ptr [r12 + rbx + 24], r10
	mov	qword ptr [r12 + rbx], r8
	mov	qword ptr [r12 + rbx + 16], rax
	mov	rsi, qword ptr [r15 - 152]
	mov	rcx, qword ptr [r15 - 136]
	mov	rdi, qword ptr [r15 - 160]
	mov	rdx, qword ptr [r15 - 144]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	push	r14
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_457
# %bb.583:                              # %OP404.PUSH1
	mov	r11, r14
	add	rbx, r12
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 - 136]
	mov	rcx, qword ptr [r15 - 144]
	mov	rdx, qword ptr [r15 - 152]
	mov	rsi, qword ptr [r15 - 160]
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm0, xmmword ptr [r15 - 224]
	vmovdqa	xmm1, xmmword ptr [r15 - 208]
	mov	qword ptr [r15 - 224], rsi
	mov	qword ptr [r15 - 216], rdx
	mov	qword ptr [r15 - 208], rcx
	mov	qword ptr [r15 - 200], rax
	vmovdqa	xmmword ptr [r15 - 144], xmm1
	vmovdqa	xmmword ptr [r15 - 160], xmm0
	jmp	.LBB0_596
.LBB0_595:
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_596
.LBB0_584:
	mov	r13, qword ptr [rbp - 96]       # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_593:
	mov	r13, r14
	jmp	.LBB0_1576
.LBB0_594:
	mov	r13, rbx
	jmp	.LBB0_1576
.LBB0_596:                              # %OP408.JUMPDEST
	mov	r15, r13
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [r12 + r15 - 160]
	vmovdqa	xmm1, xmmword ptr [r12 + r15 - 144]
	vmovaps	xmm2, xmmword ptr [r12 + r15 - 64]
	vmovaps	xmm3, xmmword ptr [r12 + r15 - 48]
	vmovaps	xmmword ptr [r12 + r15 - 144], xmm3
	vmovaps	xmmword ptr [r12 + r15 - 160], xmm2
	vmovdqa	xmmword ptr [r12 + r15 - 48], xmm1
	vmovaps	xmmword ptr [r12 + r15 - 64], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_600
# %bb.597:                              # %OP415.MLOAD.contd
	lea	rax, [r12 + r15]
	lea	rsi, [r12 + r15]
	add	rsi, -160
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rax - 160]
	mov	r10, qword ptr [rax - 152]
	mov	r11, qword ptr [rax - 136]
	mov	rbx, qword ptr [rax - 144]
	mov	qword ptr [rax - 80], rbx
	mov	qword ptr [rax - 72], r11
	mov	qword ptr [rax - 96], r9
	mov	qword ptr [rax - 88], r10
	sub	r9, rdi
	sbb	r10, r8
	sbb	rbx, rdx
	sbb	r11, rcx
	mov	qword ptr [rax - 160], r9
	mov	qword ptr [rax - 152], r10
	mov	qword ptr [rax - 144], rbx
	mov	qword ptr [rax - 136], r11
	mov	qword ptr [rax - 112], rdx
	mov	qword ptr [rax - 104], rcx
	mov	qword ptr [rax - 128], rdi
	mov	qword ptr [rax - 120], r8
	mov	rdi, r14
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB0_599
.LBB0_598:                              # %select.end26866
	add	r13, -5
	jmp	.LBB0_1576
.LBB0_599:                              # %select.false26867
	mov	eax, ecx
	jmp	.LBB0_598
.LBB0_600:
	add	r13, -3
	jmp	.LBB0_1576
.LBB0_601:                              # %OP425.JUMPDEST
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	lea	rax, [r13 + 2]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	vmovdqu	ymmword ptr [r12 + r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_622
# %bb.602:                              # %OP428.MLOAD.contd
	add	r14, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	shl	rbx, 5
	mov	r8, qword ptr [r14 - 96]
	mov	al, 48
	bzhi	r9, qword ptr [r14 - 88], rax
	movabs	rax, 281474976710655
	mov	qword ptr [r14 - 88], rax
	mov	qword ptr [r14 - 80], 0
	mov	qword ptr [r14 - 96], -1
	mov	qword ptr [r14 - 72], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r12 + rbx + 16], xmm0
	mov	qword ptr [r12 + rbx], r8
	mov	qword ptr [r12 + rbx + 8], r9
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vmovdqu	xmmword ptr [rsp], xmm0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_622
# %bb.603:                              # %OP435.SWAP3
	add	rbx, r12
	mov	rsi, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	rdi, qword ptr [r14 + 32]
	mov	rax, qword ptr [r14 - 80]
	and	rax, qword ptr [r14 - 48]
	mov	rdx, qword ptr [r14 + 48]
	mov	qword ptr [r14 - 48], rdx
	mov	r8, qword ptr [r14 - 96]
	mov	r9, qword ptr [r14 - 88]
	and	r8, qword ptr [r14 - 64]
	mov	qword ptr [r14 - 64], rdi
	mov	r10, qword ptr [r14 - 72]
	and	r10, qword ptr [r14 - 40]
	and	r9, qword ptr [r14 - 56]
	mov	qword ptr [r14 - 40], rcx
	mov	qword ptr [r14 - 56], rsi
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14 - 80], xmm1
	vmovdqa	xmmword ptr [r14 - 96], xmm0
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 56], rcx
	sub	rsp, 8
	push	r15
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1576
# %bb.604:                              # %OP443.PUSH4
	lea	rax, [r13 - 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	mov	r8d, dword ptr [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], r8
	mov	qword ptr [r12 + rax + 24], 0
	mov	rdi, qword ptr [r14 - 96]
	mov	rdx, qword ptr [r14 - 80]
	mov	rsi, qword ptr [r14 - 88]
	mov	rcx, qword ptr [r14 - 72]
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	add	rdi, qword ptr [r14 - 64]
	adc	rsi, qword ptr [r14 - 56]
	adc	rdx, qword ptr [r14 - 48]
	adc	rcx, qword ptr [r14 - 40]
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r9d, r9d
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_622
# %bb.605:                              # %OP449.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14 - 64]
	vmovdqa	xmm1, xmmword ptr [r14 - 48]
	mov	rdi, qword ptr [r14 - 96]
	mov	rsi, qword ptr [r14 - 88]
	mov	rcx, qword ptr [r14 - 72]
	mov	rdx, qword ptr [r14 - 80]
	vmovdqa	xmmword ptr [r14 - 80], xmm1
	vmovdqa	xmmword ptr [r14 - 96], xmm0
	mov	qword ptr [r14 - 48], rdx
	mov	qword ptr [r14 - 40], rcx
	mov	qword ptr [r14 - 64], rdi
	mov	qword ptr [r14 - 56], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_622
# %bb.606:                              # %OP450.MLOAD.contd
	lea	rsi, [r14 - 96]
	mov	rax, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r8, qword ptr [r14 - 72]
	mov	r9, qword ptr [r14 - 80]
	mov	r10, qword ptr [r14 - 96]
	mov	r11, qword ptr [r14 - 88]
	sub	r10, rcx
	sbb	r11, rdx
	sbb	r9, rdi
	sbb	r8, rax
	mov	qword ptr [r14 - 16], 0
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 - 32], 96
	mov	qword ptr [r14 - 24], 0
	add	r10, 96
	adc	r11, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r14 - 96], r10
	mov	qword ptr [r14 - 88], r11
	mov	qword ptr [r14 - 80], r9
	mov	qword ptr [r14 - 72], r8
	mov	qword ptr [r14 - 48], rdi
	mov	qword ptr [r14 - 40], rax
	mov	qword ptr [r14 - 64], rcx
	mov	qword ptr [r14 - 56], rdx
	mov	rdi, r15
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	je	.LBB0_600
# %bb.607:                              # %select.false26879
	mov	eax, ecx
	add	r13, -3
	jmp	.LBB0_1576
.LBB0_608:                              # %OP486.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 2
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1576
# %bb.609:                              # %OP489.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	or	rax, qword ptr [r14 - 16]
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r14 - 24], rsi
	or	r9, qword ptr [r14 - 8]
	mov	qword ptr [r14 - 8], rcx
	xor	r8d, r8d
	or	r9, rax
	setne	r8b
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	shl	r13, 5
	jmp	.LBB0_620
.LBB0_610:                              # %OP495.MLOAD
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB0_622
# %bb.611:                              # %OP495.MLOAD.contd
	lea	rsi, [r14 - 32]
	mov	rax, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r8, qword ptr [r14 - 8]
	mov	r9, qword ptr [r14 - 16]
	mov	r10, qword ptr [r14 - 32]
	mov	r11, qword ptr [r14 - 24]
	sub	r10, rcx
	sbb	r11, rdx
	sbb	r9, rdi
	sbb	r8, rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 32
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	add	r10, 32
	adc	r11, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r14 - 32], r10
	mov	qword ptr [r14 - 24], r11
	mov	qword ptr [r14 - 16], r9
	mov	qword ptr [r14 - 8], r8
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	rdi, r12
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB0_613
.LBB0_612:                              # %select.end26884
	dec	r13
	jmp	.LBB0_1576
.LBB0_613:                              # %select.false26885
	mov	eax, ecx
	jmp	.LBB0_612
.LBB0_614:                              # %OP508.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 2
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1576
# %bb.615:                              # %OP511.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	shl	r13, 5
	mov	eax, dword ptr [r14 - 16]
	mov	r8, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	qword ptr [r14 - 8], rcx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	qword ptr [r12 + r13 + 8], rsi
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13], rdi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	push	r12
	push	0
	push	rax
	jmp	.LBB0_621
.LBB0_616:                              # %OP531.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 2
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1576
# %bb.617:                              # %OP534.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	rax, qword ptr [r14 - 8]
	mov	r8, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	r10, qword ptr [r14 - 16]
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 8], rcx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	shl	r13, 5
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13], rdi
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	qword ptr [r12 + r13 + 8], rsi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	push	r12
	push	rax
	push	r10
	jmp	.LBB0_621
.LBB0_618:                              # %OP591.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 2
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1576
# %bb.619:                              # %OP594.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	shl	r13, 5
	movzx	r8d, byte ptr [r14 - 32]
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 8], rcx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
.LBB0_620:                              # %OP594.MLOAD.contd
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	qword ptr [r12 + r13 + 8], rsi
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13], rdi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r9d, r9d
.LBB0_621:                              # %OP594.MLOAD.contd
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	je	.LBB0_610
.LBB0_622:
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_623:                              # %OP666.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	jmp	.LBB0_83
.LBB0_624:                              # %OP688.JUMPDEST.loopexit
	mov	r14, r11
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	jmp	.LBB0_333
.LBB0_625:                              # %OP743.JUMPDEST
	lea	r15, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 2
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1576
# %bb.626:                              # %OP746.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	rax, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 64]
	mov	r9, qword ptr [r14 - 56]
	mov	r10, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 48], rdx
	mov	qword ptr [r14 - 64], rdi
	mov	qword ptr [r14 - 40], rcx
	mov	qword ptr [r14 - 56], rsi
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	shl	r13, 5
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13], rdi
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	qword ptr [r12 + r13 + 8], rsi
	sub	rsp, 8
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	push	rbx
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_622
# %bb.627:                              # %OP750.PUSH1
	add	r12, r13
	mov	rdx, qword ptr [r14 - 48]
	mov	rdi, qword ptr [r14 - 64]
	mov	rsi, qword ptr [r14 - 56]
	mov	rcx, qword ptr [r14 - 40]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	r9, qword ptr [r14 - 24]
	mov	rax, qword ptr [r14 - 8]
	mov	r8, qword ptr [r14 - 32]
	mov	r10, qword ptr [r14 - 16]
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], rax
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	sub	rsp, 8
	push	rbx
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_457
# %bb.628:                              # %OP757.DUP1
	mov	r12, rbx
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rdx, qword ptr [r14 - 16]
	mov	rcx, qword ptr [r14 - 8]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14], rdi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB0_622
# %bb.629:                              # %OP758.MLOAD.contd
	lea	rsi, [r14 - 64]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r14 - 40]
	mov	r9, qword ptr [r14 - 64]
	mov	r10, qword ptr [r14 - 56]
	mov	r11, qword ptr [r14 - 48]
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14 + 24], r8
	add	r9, qword ptr [r14 - 32]
	adc	r10, qword ptr [r14 - 24]
	adc	r11, qword ptr [r14 - 16]
	adc	r8, qword ptr [r14 - 8]
	mov	qword ptr [r14 - 64], r9
	mov	qword ptr [r14 - 56], r10
	mov	qword ptr [r14 - 48], r11
	mov	qword ptr [r14 - 40], r8
	mov	qword ptr [r14 - 32], rdx
	mov	qword ptr [r14 - 24], rdi
	mov	qword ptr [r14 - 16], rcx
	mov	qword ptr [r14 - 8], rax
	mov	rdi, r12
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB0_631
.LBB0_630:                              # %select.end26917
	add	r13, -2
	jmp	.LBB0_1576
.LBB0_631:                              # %select.false26918
	mov	eax, ecx
	jmp	.LBB0_630
.LBB0_632:                              # %OP766.JUMPDEST
	lea	r14, [r13 + 1]
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_130] # xmm0 = [609,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	jmp	.LBB0_817
.LBB0_633:                              # %OP785.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
.LBB0_634:                              # %OP785.JUMPDEST
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r12 + r13 - 32], ymm0
	mov	rbx, qword ptr [r12 + r13 - 64]
	mov	r14, qword ptr [r12 + r13 - 56]
	mov	r15, qword ptr [r12 + r13 - 48]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + r13 - 40]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rbx
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 2352]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	mov	r8, r12
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	edx, dword ptr [rbp - 2336]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	rcx, qword ptr [rbp - 2352]
	mov	r8, qword ptr [rbp - 2344]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 48], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], 32
	add	rbx, 32
	adc	r14, 0
	adc	r15, 0
	adc	r12, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 16], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 368]
	mov	rsi, rbx
	mov	rbx, rcx
	mov	rdx, r14
	mov	r14, r8
	mov	rcx, r15
	xor	r15d, r15d
	mov	r8, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 344]
	mov	rdx, qword ptr [rbp - 352]
	mov	rsi, qword ptr [rbp - 368]
	mov	rcx, qword ptr [rbp - 360]
	mov	qword ptr [r12 + r13 - 16], rdx
	mov	qword ptr [r12 + r13 - 8], rax
	mov	qword ptr [r12 + r13 - 32], rsi
	mov	qword ptr [r12 + r13 - 24], rcx
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
.LBB0_635:                              # %OP3150.JUMPDEST
	mov	rdi, r13
	shl	rdi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rdi], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_127] # xmm0 = [3570,0,0,0]
	vmovdqu	ymmword ptr [r12 + rdi + 32], ymm0
	mov	r8d, dword ptr [r10 + 164]
	movbe	r9, qword ptr [r10 + 156]
	bswap	r8
	shrd	r8, r9, 32
	movbe	r10, qword ptr [r10 + 148]
	shrd	r9, r10, 32
	shr	r10, 32
	mov	qword ptr [r12 + rdi + 80], r10
	mov	qword ptr [r12 + rdi + 72], r9
	mov	qword ptr [r12 + rdi + 64], r8
	mov	qword ptr [r12 + rdi + 88], 0
	mov	qword ptr [r12 + rdi + 112], r11
	mov	qword ptr [r12 + rdi + 120], r15
	mov	qword ptr [r12 + rdi + 96], rbx
	mov	qword ptr [r12 + rdi + 104], r14
	mov	qword ptr [r12 + rdi + 144], rdx
	mov	qword ptr [r12 + rdi + 152], rax
	mov	qword ptr [r12 + rdi + 128], rsi
	mov	qword ptr [r12 + rdi + 136], rcx
	add	r13, 5
	jmp	.LBB0_1293
.LBB0_636:                              # %OP801.JUMPDEST.loopexit
	mov	rdi, r11
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_19] # xmm0 = [599,0,0,0]
	vmovups	ymmword ptr [r12 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rcx + 32], ymm0
	add	r13, 3
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	rsi, r13
	shl	rsi, 5
	xor	edx, edx
	mov	rbx, rax
	add	rbx, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r12 + rcx + 64], rbx
	mov	qword ptr [r12 + rcx + 80], r9
	mov	qword ptr [r12 + rcx + 72], r8
	mov	qword ptr [r12 + rcx + 88], r10
	mov	qword ptr [r12 + rcx + 128], rbx
	mov	qword ptr [r12 + rcx + 144], r9
	mov	qword ptr [r12 + rcx + 136], r8
	mov	qword ptr [r12 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rbx
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r12 + rsi], rdx
	mov	qword ptr [r12 + rsi + 16], 0
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], 0
	jae	.LBB0_638
# %bb.637:
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	jmp	.LBB0_640
.LBB0_638:                              # %OP663.PUSH1
	add	rcx, r12
	add	rsi, r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rcx + 128], ymm0
	jmp	.LBB0_385
.LBB0_639:                              # %OP816.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 80]
.LBB0_640:                              # %OP816.JUMPDEST
	lea	r14, [r13 - 1]
	shl	r13, 5
	mov	r8, qword ptr [r12 + r13 - 40]
	mov	rcx, qword ptr [r12 + r13 - 48]
	mov	rsi, qword ptr [r12 + r13 - 64]
	mov	rdx, qword ptr [r12 + r13 - 56]
	mov	r9, qword ptr [rdi + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2192]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2176]
	mov	rcx, qword ptr [rbp - 2192]
	mov	rdx, qword ptr [rbp - 2184]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r12 + rsi + 16], rdi
	mov	qword ptr [r12 + rsi + 24], 0
	mov	qword ptr [r12 + rsi + 8], -1
	mov	qword ptr [r12 + rsi], -1
	mov	qword ptr [r12 + r13 - 56], rdx
	mov	qword ptr [r12 + r13 - 64], rcx
	mov	qword ptr [r12 + r13 - 48], rax
	mov	qword ptr [r12 + r13 - 40], 0
	mov	r13, r14
.LBB0_641:                              # %OP3162.JUMPDEST
	mov	r14, r13
	inc	r13
	mov	rax, r14
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.642:                              # %OP3165.PUSH1
	mov	r15, r12
	mov	r12, r13
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	mov	qword ptr [rbp - 72], r14       # 8-byte Spill
	lea	rax, [r14 + 2]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	vpxor	ymm0, ymm0, ymmword ptr [rbx]
	xor	eax, eax
	vptest	ymm0, ymm0
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jne	.LBB0_644
# %bb.643:
	mov	r12, r15
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB0_1227
.LBB0_644:                              # %OP3169.PUSH1
	add	r12, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.645:                              # %OP3171.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r14 + 24], rax
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14], 0
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r13
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.646:                              # %OP3175.PUSH1
	add	r15, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.647:                              # %OP3180.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_24] # xmm0 = [17,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 17
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.648:                              # %OP3185.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_25] # ymm0 = [0,4899916394579099648,3619240762665028421,6155973685307076694]
	mov	qword ptr [rbp - 56], r15       # 8-byte Spill
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240762665028421
	movabs	r9, 4899916394579099648
	xor	r8d, r8d
	push	r13
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.649:                              # %OP3190.SWAP1
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r13
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
.LBB0_650:                              # %OP2047.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, r13
	mov	rsi, rbx
	jmp	.LBB0_456
.LBB0_651:                              # %OP831.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 80]
	xor	ecx, ecx
	xor	edi, edi
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
.LBB0_652:                              # %OP831.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_19] # xmm0 = [599,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_20] # xmm0 = [4,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	add	r13, 3
	mov	rsi, r13
	shl	rsi, 5
	add	rdx, -4
	adc	rcx, -1
	mov	r8, rdi
	adc	r8, -1
	adc	rdi, -1
	mov	qword ptr [r12 + rax + 64], rdx
	mov	qword ptr [r12 + rax + 72], rcx
	mov	qword ptr [r12 + rax + 80], r8
	mov	qword ptr [r12 + rax + 88], rdi
	mov	qword ptr [r12 + rax + 128], rdx
	mov	qword ptr [r12 + rax + 136], rcx
	mov	qword ptr [r12 + rax + 144], r8
	mov	qword ptr [r12 + rax + 152], rdi
	xor	r9d, r9d
	mov	r10d, 223
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, r8
	sbb	r9, rdi
	setb	cl
	movzx	ecx, cl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rsi + 8], xmm0
	mov	qword ptr [r12 + rsi], rcx
	mov	qword ptr [r12 + rsi + 24], 0
	jae	.LBB0_654
# %bb.653:
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_656
.LBB0_654:                              # %OP471.PUSH1
	add	rax, r12
	add	rsi, r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
.LBB0_713:                              # %OP1286.PUSH1
	mov	rdi, r11
	jmp	.LBB0_385
.LBB0_655:                              # %OP846.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rcx + 80]
.LBB0_656:                              # %OP846.JUMPDEST
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r15, r13
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r12 + r15 - 32], ymm0
	mov	rbx, qword ptr [r12 + r15 - 64]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + r15 - 56]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rax + r15 - 48]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rax + r15 - 40]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rbx
	mov	r9, qword ptr [rcx + 72]
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 2544]
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, r13
	mov	r8, r14
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2528]
	mov	rcx, qword ptr [rbp - 2544]
	mov	rdx, qword ptr [rbp - 2536]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 2512]
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 2496]
	mov	rcx, qword ptr [rbp - 2512]
	mov	rdx, qword ptr [rbp - 2504]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	mov	rsi, rbx
	add	rsi, 64
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 592]
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 592]
	mov	rcx, qword ptr [rbp - 584]
	mov	rdx, qword ptr [rbp - 568]
	mov	rsi, qword ptr [rbp - 576]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r12
	mov	rsi, rbx
	add	rsi, 96
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 560]
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 544]
	mov	rcx, qword ptr [rbp - 560]
	mov	rdx, qword ptr [rbp - 552]
	mov	rsi, qword ptr [rbp - 536]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 56], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 40], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, r14
	mov	qword ptr [rbp - 96], r14       # 8-byte Spill
	mov	qword ptr [rax + r15 + 88], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], 255
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	add	r14, 5
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 24], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 16], r13
	mov	rsi, rbx
	add	rsi, 128
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	sub	rsp, 8
	lea	rdi, [rbp - 2640]
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	movzx	eax, byte ptr [rbp - 2640]
	vpxor	xmm0, xmm0, xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	xmmword ptr [rcx + r15 + 72], xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 64], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 16], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 24], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 8], r12
	mov	rsi, rbx
	add	rsi, 160
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 528]
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 504]
	mov	rcx, qword ptr [rbp - 528]
	mov	rdx, qword ptr [rbp - 520]
	mov	rsi, qword ptr [rbp - 512]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 112], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 96], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 120], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14], 192
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 24], 0
	add	rbx, 192
	adc	r12, 0
	adc	r13, 0
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r12
	sub	rsp, 8
	lea	rdi, [rbp - 496]
	mov	rsi, rbx
	mov	rdx, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, r13
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 496]
	mov	rcx, qword ptr [rbp - 488]
	mov	rdx, qword ptr [rbp - 472]
	mov	rsi, qword ptr [rbp - 480]
	mov	qword ptr [r12 + r15 + 144], rsi
	mov	qword ptr [r12 + r15 + 152], rdx
	mov	qword ptr [r12 + r15 + 128], rax
	mov	qword ptr [r12 + r15 + 136], rcx
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
.LBB0_657:                              # %OP3401.JUMPDEST
	mov	rbx, r13
	shl	rbx, 5
	mov	rax, qword ptr [r12 + rbx - 104]
	mov	rcx, qword ptr [r12 + rbx - 112]
	mov	rdx, qword ptr [r12 + rbx - 128]
	mov	rsi, qword ptr [r12 + rbx - 120]
	mov	rdi, qword ptr [rbp - 328]      # 8-byte Reload
	cmp	rdx, qword ptr [rdi + 80]
	mov	qword ptr [r12 + rbx + 40], rsi
	sbb	rsi, qword ptr [rdi + 88]
	mov	qword ptr [r12 + rbx + 48], rcx
	sbb	rcx, qword ptr [rdi + 96]
	mov	qword ptr [r12 + rbx + 32], rdx
	mov	qword ptr [r12 + rbx + 56], rax
	sbb	rax, qword ptr [rdi + 104]
	setae	al
	movzx	eax, al
	mov	qword ptr [r12 + rbx], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx + 24], 0
	mov	qword ptr [r12 + rbx + 8], 0
	jae	.LBB0_1399
# %bb.658:                              # %OP3408.PUSH1
	add	rbx, r12
	lea	r15, [r13 + 2]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.659:                              # %OP3410.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 40], rsi
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbp - 72], r15       # 8-byte Spill
	mov	r14, r15
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	push	r15
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.660:                              # %OP3414.PUSH1
	add	r12, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.661:                              # %OP3419.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_118] # xmm0 = [18,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 18
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.662:                              # %OP3424.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_119] # ymm0 = [0,4991114287033352192,3619240732752103762,6155973685307076694]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240732752103762
	movabs	r9, 4991114287033352192
	xor	r8d, r8d
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.663:                              # %OP3429.SWAP1
	vmovdqa	xmm0, xmmword ptr [rbx + 32]
	vmovdqa	xmm1, xmmword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	vmovdqa	xmmword ptr [rbx + 16], xmm1
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1636
# %bb.664:                              # %OP3430.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rcx
	sbb	r10, rdx
	sbb	r8, rsi
	sbb	rdi, rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 100
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 48], rsi
	mov	qword ptr [rbx + 56], rax
	mov	qword ptr [rbx + 32], rcx
	mov	qword ptr [rbx + 40], rdx
	mov	rdi, r15
	jmp	.LBB0_403
.LBB0_665:                              # %OP889.JUMPDEST.loopexit
	mov	r11, r14
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 80]
	xor	ecx, ecx
	jmp	.LBB0_368
.LBB0_667:
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_668:                              # %OP974.JUMPDEST.loopexit
	mov	r14, r13
	jmp	.LBB0_39
.LBB0_669:                              # %OP1021.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 64]
	mov	rdx, qword ptr [r12 + rax - 56]
	mov	rsi, qword ptr [r12 + rax - 48]
	mov	rdi, qword ptr [r12 + rax - 40]
	mov	qword ptr [r12 + rax - 104], rdi
	mov	qword ptr [r12 + rax - 112], rsi
	mov	qword ptr [r12 + rax - 120], rdx
	mov	qword ptr [r12 + rax - 128], rcx
	add	r13, -2
	mov	r8, qword ptr [r12 + rax - 96]
	mov	r9, qword ptr [r12 + rax - 88]
	vmovdqa	xmm0, xmmword ptr [r12 + rax - 80]
	vmovdqa	xmmword ptr [r12 + rax - 144], xmm0
	mov	qword ptr [r12 + rax - 152], r9
	mov	qword ptr [r12 + rax - 160], r8
	mov	rsi, r13
	shl	rsi, 5
	mov	dil, 48
	bzhi	r9, r9, rdi
	mov	r10, qword ptr [r12 + rax - 296]
	mov	r11, qword ptr [r12 + rax - 304]
	mov	rbx, qword ptr [r12 + rax - 312]
	cmp	qword ptr [r12 + rax - 320], r8
	sbb	rbx, r9
	sbb	r11, 0
	sbb	r10, 0
	setae	r8b
	setb	r9b
	movzx	r9d, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 88], xmm0
	mov	qword ptr [r12 + rax - 96], r9
	mov	qword ptr [r12 + rax - 72], 0
	movzx	r8d, r8b
	vmovdqu	xmmword ptr [r12 + rsi + 8], xmm0
	mov	qword ptr [r12 + rsi], r8
	mov	qword ptr [r12 + rsi + 24], 0
	jae	.LBB0_671
# %bb.670:                              # %OP1036.POP
	add	rax, r12
	add	rsi, r12
	bzhi	rdx, rdx, rdi
	mov	rdi, qword ptr [rax - 264]
	mov	r8, qword ptr [rax - 288]
	mov	r9, qword ptr [rax - 280]
	mov	r10, qword ptr [rax - 272]
	mov	qword ptr [rsi + 16], r10
	mov	qword ptr [rsi], r8
	mov	qword ptr [rsi + 24], rdi
	mov	qword ptr [rsi + 8], r9
	cmp	r8, rcx
	sbb	r9, rdx
	sbb	r10, 0
	sbb	rdi, 0
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [rax - 96], rcx
	mov	qword ptr [rax - 80], 0
	mov	qword ptr [rax - 72], 0
	mov	qword ptr [rax - 88], 0
.LBB0_671:                              # %OP1042.JUMPDEST.loopexit
	mov	r14, r13
	dec	r13
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	shl	r13, 5
	mov	rax, qword ptr [r12 + r13]
	mov	rcx, qword ptr [r12 + r13 + 8]
	or	rcx, qword ptr [r12 + r13 + 24]
	or	rax, qword ptr [r12 + r13 + 16]
	or	rax, rcx
	je	.LBB0_678
# %bb.672:
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB0_673
.LBB0_678:                              # %OP1045.PUSH1
	add	r13, r12
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_593
# %bb.679:                              # %OP1046.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	lea	r15, [r14 + 1]
	mov	rbx, r14
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], rdx
	mov	qword ptr [r12 + r15], rdi
	mov	qword ptr [r12 + r15 + 24], rcx
	mov	qword ptr [r12 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_594
# %bb.680:                              # %OP1050.PUSH1
	mov	rax, r12
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	add	r12, r14
	mov	r14, rax
	add	rbx, 2
	add	r15, rax
	mov	rax, qword ptr [r13 + 24]
	mov	r10, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r8, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	shl	rbx, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	adc	rax, 0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r8
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovups	ymmword ptr [r14 + rbx], ymm0
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_427
# %bb.681:                              # %OP1061.PUSH1
	add	rbx, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_115] # xmm0 = [33,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 33
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_427
# %bb.682:                              # %OP1064.PUSH1
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r12 + 112], 0
	mov	qword ptr [r12 + 96], 11128
	mov	qword ptr [r12 + 120], 0
	mov	qword ptr [r12 + 104], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 33
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 128], rdx
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 136], rsi
	mov	rdi, r13
	mov	rsi, rbx
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB0_427
# %bb.683:                              # %OP1071.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [r12 - 32]
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	mov	qword ptr [r12 - 8], rax
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_584
# %bb.684:                              # %OP1077.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rsi, [rax + r14]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r12 - 8]
	mov	r9, qword ptr [r12 - 32]
	mov	r10, qword ptr [r12 - 24]
	mov	r11, qword ptr [r12 - 16]
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [r12 - 32], r9
	mov	qword ptr [r12 - 24], r10
	mov	qword ptr [r12 - 16], r11
	mov	qword ptr [r12 - 8], r8
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rdi
	mov	rdi, r13
	jmp	.LBB0_456
.LBB0_673:                              # %OP1083.JUMPDEST
	mov	r14, r13
	inc	r13
	mov	rax, r14
	shl	rax, 5
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rbx, [r12 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_71] # xmm0 = [6,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.674:                              # %OP1086.PUSH1
	mov	qword ptr [rbp - 72], r14       # 8-byte Spill
	lea	r15, [r14 + 2]
	shl	r13, 5
	lea	r14, [r12 + r13]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_72] # xmm0 = [7,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1655
# %bb.675:                              # %OP1088.PUSH1
	shl	r15, 5
	mov	r13, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	r11d, dword ptr [rbx + 16]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	rdx, qword ptr [r14]
	mov	rax, qword ptr [r14 + 8]
	mov	ecx, dword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14], xmm0
	vmovdqa	xmmword ptr [r14 + 16], xmm0
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	add	rsi, 5
	mov	qword ptr [rbp - 72], rsi       # 8-byte Spill
	shl	rsi, 5
	mov	qword ptr [r12 + r15 + 16], r11
	mov	qword ptr [r12 + r15], r13
	mov	qword ptr [r12 + r15 + 8], r10
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx + 112], rcx
	mov	qword ptr [rbx + 104], rax
	mov	qword ptr [rbx + 96], rdx
	mov	qword ptr [rbx + 120], 0
	mov	rdi, qword ptr [rbx - 152]
	mov	r8d, dword ptr [rbx - 144]
	mov	r9, qword ptr [rbx - 160]
	xor	r13, r9
	xor	r11, r8
	or	r11, r13
	xor	r10, rdi
	xor	r14d, r14d
	xor	r15d, r15d
	or	r10, r11
	setne	r14b
	mov	qword ptr [rbx + 128], r14
	vmovdqu	xmmword ptr [rbx + 136], xmm0
	sete	r15b
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [r12 + rsi], r15
	vmovdqu	xmmword ptr [r12 + rsi + 8], xmm0
	mov	qword ptr [r12 + rsi + 24], 0
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	je	.LBB0_677
# %bb.676:                              # %OP1110.POP
	add	rsi, r12
	vmovdqu	ymmword ptr [rbx + 192], ymm0
	mov	qword ptr [rsi], r9
	mov	qword ptr [rsi + 16], r8
	mov	qword ptr [rsi + 8], rdi
	mov	qword ptr [rsi + 24], 0
	xor	rdx, r9
	xor	rcx, r8
	or	rcx, rdx
	xor	rax, rdi
	xor	edx, edx
	or	rax, rcx
	setne	dl
	mov	qword ptr [rbx + 128], rdx
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	mov	qword ptr [rbx + 144], 0
.LBB0_677:
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_686
.LBB0_685:                              # %OP1119.JUMPDEST.loopexit
	mov	r14, r13
.LBB0_686:                              # %OP1119.JUMPDEST
	lea	r13, [r14 - 1]
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax]
	mov	rdx, qword ptr [r12 + rax + 8]
	or	rdx, qword ptr [r12 + rax + 24]
	or	rcx, qword ptr [r12 + rax + 16]
	or	rcx, rdx
	jne	.LBB0_694
# %bb.687:                              # %OP1122.PUSH1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	lea	r13, [r14 + 1]
	shl	r14, 5
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1576
# %bb.688:                              # %OP1124.MLOAD.contd
	mov	r15, r12
	add	r12, r14
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.689:                              # %OP1128.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.690:                              # %OP1133.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_51] # xmm0 = [21,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 21
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.691:                              # %OP1138.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_114] # ymm0 = [0,5279449478892355584,3619240749764591948,6155973685307076694]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240749764591948
	movabs	r9, 5279449478892355584
	xor	r8d, r8d
	jmp	.LBB0_453
.LBB0_693:
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_694:                              # %OP1153.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	mov	rdx, qword ptr [r12 + rax - 336]
	mov	rcx, qword ptr [r12 + rax - 328]
	mov	rdi, qword ptr [r12 + rax - 352]
	mov	rsi, qword ptr [r12 + rax - 344]
	mov	r8, rsi
	or	r8, rcx
	mov	r9, rdi
	or	r9, rdx
	xor	r10d, r10d
	or	r9, r8
	sete	r10b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], r10
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_697
# %bb.695:                              # %OP1158.PUSH2
	add	rax, r12
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_108] # xmm0 = [2256,0,0,0]
	vmovups	ymmword ptr [rax], ymm0
	vmovdqu	ymm0, ymmword ptr [rax - 288]
	vmovdqu	ymm1, ymmword ptr [rax - 64]
.LBB0_696:                              # %OP3974.JUMPDEST.sink.split
	vmovdqu	ymmword ptr [rax + 32], ymm1
	vmovdqu	ymmword ptr [rax + 64], ymm0
	jmp	.LBB0_1453
.LBB0_697:                              # %OP1164.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	mov	rdx, qword ptr [r12 + rax - 304]
	mov	rcx, qword ptr [r12 + rax - 296]
	mov	rdi, qword ptr [r12 + rax - 320]
	mov	rsi, qword ptr [r12 + rax - 312]
	mov	r8, rsi
	or	r8, rcx
	mov	r9, rdi
	or	r9, rdx
	xor	r10d, r10d
	or	r9, r8
	sete	r10b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax + 8], xmm0
	mov	qword ptr [r12 + rax], r10
	mov	qword ptr [r12 + rax + 24], 0
	je	.LBB0_699
# %bb.698:                              # %OP1169.PUSH2
	add	rax, r12
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_109] # xmm0 = [2273,0,0,0]
	vmovups	ymmword ptr [rax], ymm0
	vmovdqu	ymm0, ymmword ptr [rax - 288]
	vmovdqu	ymm1, ymmword ptr [rax - 32]
	jmp	.LBB0_696
.LBB0_699:                              # %OP1175.JUMPDEST.loopexit
	mov	r14, r13
	mov	r15, r13
	shl	r15, 5
	mov	rcx, qword ptr [r12 + r15 - 208]
	mov	rsi, qword ptr [r12 + r15 - 200]
	mov	rax, qword ptr [r12 + r15 - 224]
	mov	rdx, qword ptr [r12 + r15 - 216]
	mov	rdi, rdx
	or	rdi, rsi
	mov	r8, rax
	or	r8, rcx
	xor	r9d, r9d
	or	r8, rdi
	sete	r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	mov	qword ptr [r12 + r15], r9
	mov	qword ptr [r12 + r15 + 24], 0
	mov	r9, qword ptr [rbp - 136]       # 8-byte Reload
	je	.LBB0_714
# %bb.700:                              # %OP1180.DUP9
	add	r15, r12
	mov	edi, dword ptr [r15 - 272]
	vmovaps	xmm0, xmmword ptr [r15 - 288]
	vmovaps	ymm1, ymmword ptr [rip + .LCPI0_113] # ymm1 = [0,282191964,0,0]
	vmovups	ymmword ptr [r15 + 24], ymm1
	vmovaps	xmmword ptr [r15], xmm0
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15 + 56], 0
	mov	edi, dword ptr [r9 + 164]
	movbe	r8, qword ptr [r9 + 156]
	bswap	rdi
	shrd	rdi, r8, 32
	movbe	r9, qword ptr [r9 + 148]
	shrd	r8, r9, 32
	shr	r9, 32
	mov	qword ptr [r15 + 80], r9
	mov	qword ptr [r15 + 72], r8
	mov	qword ptr [r15 + 64], rdi
	mov	qword ptr [r15 + 88], 0
	vmovups	ymm0, ymmword ptr [r15 - 352]
	vmovdqu	ymm1, ymmword ptr [r15 - 320]
	vmovups	ymmword ptr [r15 + 96], ymm0
	lea	rdi, [r14 + 5]
	vmovdqu	ymmword ptr [r15 + 128], ymm1
	vmovups	ymm0, ymmword ptr [r15 - 256]
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	shl	rdi, 5
	mov	qword ptr [rbp - 224], rdi      # 8-byte Spill
	vmovups	ymmword ptr [r12 + rdi], ymm0
	mov	qword ptr [r15 + 216], rsi
	mov	qword ptr [r15 + 208], rcx
	mov	qword ptr [r15 + 200], rdx
	mov	qword ptr [r15 + 192], rax
	lea	r13, [r14 + 8]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 + 224], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.701:                              # %OP1190.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 248], rcx
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 240], rdx
	mov	qword ptr [r15 + 224], rdi
	lea	r8, [r14 + 9]
	mov	rax, qword ptr [r15 + 32]
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	shl	r13, 5
	mov	rbx, r14
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	r14, r8
	shl	r14, 5
	shl	rax, 32
	mov	qword ptr [r12 + r13 + 24], rax
	mov	qword ptr [r12 + r13], 0
	mov	qword ptr [r12 + r13 + 16], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [r12 + r14 + 16], rdx
	mov	qword ptr [r12 + r14], rdi
	mov	qword ptr [r12 + r14 + 24], rcx
	mov	qword ptr [r12 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_457
# %bb.702:                              # %OP1198.PUSH1
	add	r13, r12
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	lea	r10, [rbx + 10]
	add	r14, r12
	mov	rcx, qword ptr [r15 + 248]
	mov	rdx, qword ptr [r15 + 240]
	mov	rdi, qword ptr [r15 + 224]
	mov	rsi, qword ptr [r15 + 232]
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 224], rdi
	mov	qword ptr [r15 + 240], rdx
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 248], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	eax, dword ptr [r15 + 80]
	mov	r8, qword ptr [r15 + 64]
	mov	r9, qword ptr [r15 + 72]
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	mov	rbx, r10
	shl	rbx, 5
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r12 + rbx + 24], rcx
	mov	qword ptr [r12 + rbx + 8], rsi
	mov	qword ptr [r12 + rbx], rdi
	mov	qword ptr [r12 + rbx + 16], rdx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1629
# %bb.703:                              # %OP1208.PUSH1
	add	rbx, r12
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	r9, qword ptr [r15 + 104]
	mov	rax, qword ptr [r15 + 120]
	mov	r8, qword ptr [r15 + 96]
	mov	r10, qword ptr [r15 + 112]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1629
# %bb.704:                              # %OP1213.PUSH1
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	r9, qword ptr [r15 + 136]
	mov	rax, qword ptr [r15 + 152]
	mov	r8, qword ptr [r15 + 128]
	mov	r10, qword ptr [r15 + 144]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1629
# %bb.705:                              # %OP1218.PUSH1
	mov	r10, qword ptr [r13 + 24]
	mov	rax, qword ptr [r13 + 16]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	rdi, r8
	add	rdi, 32
	mov	rsi, r9
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r10
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	add	r8, 64
	adc	r9, 0
	adc	rax, 0
	adc	r10, 0
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	sub	r8, qword ptr [r15 + 224]
	sbb	r9, qword ptr [r15 + 232]
	sbb	rax, qword ptr [r15 + 240]
	sbb	r10, qword ptr [r15 + 248]
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 352], rdi
	mov	qword ptr [r15 + 368], rdx
	mov	qword ptr [r15 + 376], rcx
	mov	qword ptr [r15 + 360], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_457
# %bb.706:                              # %OP1228.DUP5
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rcx, [rax + 12]
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	rdi, qword ptr [r15 + 176]
	mov	rcx, qword ptr [r15 + 160]
	mov	rdx, qword ptr [r15 + 168]
	mov	rsi, qword ptr [r15 + 184]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbx], rcx
	mov	r9, qword ptr [r15 + 200]
	mov	r11, qword ptr [r15 + 216]
	mov	r8, qword ptr [r15 + 192]
	mov	r10, qword ptr [r15 + 208]
	mov	qword ptr [r15 + 368], r10
	mov	qword ptr [r15 + 352], r8
	mov	qword ptr [r15 + 376], r11
	mov	qword ptr [r15 + 360], r9
	add	rax, 13
	mov	rdi, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 8]
	mov	qword ptr [rbp - 128], r14      # 8-byte Spill
	mov	rcx, qword ptr [r14 + 24]
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	shl	r14, 5
	mov	qword ptr [r12 + r14 + 24], rcx
	mov	qword ptr [r12 + r14 + 8], rsi
	mov	qword ptr [r12 + r14], rdi
	mov	qword ptr [r12 + r14 + 16], rdx
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rbx, rax
	shl	rbx, 5
	mov	qword ptr [r12 + rbx + 8], r9
	mov	qword ptr [r12 + rbx + 24], r11
	mov	qword ptr [r12 + rbx + 16], r10
	mov	qword ptr [r12 + rbx], r8
	mov	qword ptr [r15 + 472], rcx
	mov	qword ptr [r15 + 464], rdx
	mov	qword ptr [r15 + 456], rsi
	mov	qword ptr [r15 + 448], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	r11
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.707:                              # %OP1234.PUSH1
	add	r14, r12
	add	rbx, r12
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15 + 288], rdx
	mov	qword ptr [r15 + 304], rcx
	mov	qword ptr [r15 + 296], rsi
	mov	qword ptr [r15 + 312], rax
	mov	rdi, qword ptr [r15 + 376]
	mov	r8, qword ptr [r15 + 352]
	mov	r9, qword ptr [r15 + 360]
	mov	r10, qword ptr [r15 + 368]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], r9
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rdi]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r15 + 472], rax
	mov	qword ptr [r15 + 464], rcx
	mov	qword ptr [r15 + 456], rsi
	mov	qword ptr [r15 + 448], rdx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB0_717
# %bb.708:                              # %OP1242.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r15 + 312]
	mov	rdi, qword ptr [r15 + 288]
	mov	rsi, qword ptr [r15 + 296]
	mov	rdx, qword ptr [r15 + 304]
	mov	qword ptr [r15 + 464], rdx
	mov	qword ptr [r15 + 448], rdi
	mov	qword ptr [r15 + 472], rcx
	mov	qword ptr [r15 + 456], rsi
	add	rdi, qword ptr [r15 + 352]
	adc	rsi, qword ptr [r15 + 360]
	adc	rdx, qword ptr [r15 + 368]
	adc	rcx, qword ptr [r15 + 376]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r8d, r8d
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_717
# %bb.709:                              # %OP1247.PUSH1
	mov	rax, qword ptr [r15 + 360]
	mov	rsi, qword ptr [r15 + 376]
	mov	rdx, qword ptr [r15 + 352]
	mov	rcx, qword ptr [r15 + 368]
	mov	qword ptr [r15 + 464], rcx
	mov	qword ptr [r15 + 448], rdx
	mov	qword ptr [r15 + 472], rsi
	mov	qword ptr [r15 + 456], rax
	add	rdx, 31
	adc	rax, 0
	adc	rcx, 0
	adc	rsi, 0
	and	rdx, -32
	mov	qword ptr [r15 + 352], rdx
	mov	qword ptr [r15 + 368], rcx
	mov	qword ptr [r15 + 360], rax
	mov	qword ptr [r15 + 376], rsi
	mov	rdi, qword ptr [r15 + 312]
	mov	r8, qword ptr [r15 + 288]
	mov	r9, qword ptr [r15 + 296]
	mov	r10, qword ptr [r15 + 304]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 8], r9
	add	rdx, r8
	adc	rax, r9
	adc	rcx, r10
	adc	rsi, rdi
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], r9
	vmovups	ymm0, ymmword ptr [r15 + 64]
	mov	qword ptr [r15 + 88], rsi
	mov	qword ptr [r15 + 64], rdx
	mov	qword ptr [r15 + 72], rax
	mov	qword ptr [r15 + 80], rcx
	mov	rbx, qword ptr [rbp - 128]      # 8-byte Reload
	vmovups	ymmword ptr [rbx], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 + 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1638
# %bb.710:                              # %OP1272.MLOAD.contd
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	add	r11, r12
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 144], rsi
	mov	qword ptr [r15 + 128], rcx
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 136], rdx
	mov	rdi, qword ptr [r15 + 88]
	mov	r8, qword ptr [r15 + 80]
	mov	r9, qword ptr [r15 + 64]
	mov	r10, qword ptr [r15 + 72]
	sub	r9, rcx
	sbb	r10, rdx
	sbb	r8, rsi
	sbb	rdi, rax
	mov	qword ptr [r11], r9
	mov	qword ptr [r11 + 16], r8
	mov	qword ptr [r11 + 8], r10
	mov	qword ptr [r11 + 24], rdi
	mov	qword ptr [r15 + 208], rsi
	mov	qword ptr [r15 + 192], rcx
	mov	qword ptr [r15 + 216], rax
	mov	qword ptr [r15 + 200], rdx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r15 + 224], ymm0
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 16]
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rax
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx], rdx
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_457
# %bb.711:                              # %OP1281.ISZERO
	mov	r11, r14
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	or	rax, qword ptr [rbx + 16]
	xor	edx, edx
	xor	esi, esi
	or	rax, rcx
	setne	dl
	sete	sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 24], 0
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rsi], rdx
	mov	qword ptr [rsi + 24], 0
	mov	qword ptr [rsi + 8], 0
	mov	qword ptr [rsi + 16], 0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jne	.LBB0_719
# %bb.712:                              # %OP1286.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [r15 + 352], ymm0
	jmp	.LBB0_713
.LBB0_714:
	mov	r13, r14
	jmp	.LBB0_5
.LBB0_717:
	mov	r13, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_718:                              # %OP1289.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
.LBB0_719:                              # %OP1289.JUMPDEST
	mov	rax, r13
	mov	rcx, qword ptr [rcx + 8]
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rax - 24], xmm0
	mov	qword ptr [r12 + rax - 32], rcx
	mov	qword ptr [r12 + rax - 8], 0
	add	r13, -7
	lea	rsi, [r12 + rax]
	add	rsi, -224
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	xor	ecx, ecx
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.720:
	lea	rax, [rip + .Ltmp0]
	jmp	.LBB0_1561
.LBB0_721:                              # %OP1355.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB0_12
.LBB0_722:                              # %OP1455.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_177
.LBB0_723:                              # %OP1518.JUMPDEST.loopexit
	mov	rbx, r13
	shl	rbx, 5
	mov	rcx, qword ptr [r12 + rbx - 72]
	mov	r8, qword ptr [r12 + rbx - 80]
	mov	rdi, qword ptr [r12 + rbx - 88]
	mov	rax, qword ptr [r12 + rbx - 160]
	mov	dl, 48
	bzhi	rdx, qword ptr [r12 + rbx - 152], rdx
	mov	r9, qword ptr [r12 + rbx - 96]
	xor	esi, esi
	sub	rax, qword ptr [r12 + rbx - 320]
	sbb	rdx, qword ptr [r12 + rbx - 312]
	lea	r11, [r13 + 1]
	mov	r10d, 0
	sbb	r10, qword ptr [r12 + rbx - 304]
	sbb	rsi, qword ptr [r12 + rbx - 296]
	jmp	.LBB0_185
	.p2align	4, 0x90
.LBB0_724:                              # %dynamic_jump_table
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_994 Depth 2
                                        #     Child Loop BB0_1040 Depth 2
                                        #     Child Loop BB0_841 Depth 2
                                        #     Child Loop BB0_963 Depth 2
                                        #     Child Loop BB0_956 Depth 2
                                        #     Child Loop BB0_982 Depth 2
                                        #     Child Loop BB0_975 Depth 2
                                        #     Child Loop BB0_1034 Depth 2
                                        #     Child Loop BB0_1127 Depth 2
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	mov	edx, 3080
	mov	ebx, 2846
	mov	r15d, 3471
	cmp	r10, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_732
# %bb.725:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 7942
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_740
# %bb.726:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 5902
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_748
# %bb.727:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 5370
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_767
# %bb.728:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 4985
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_45] # xmm0 = [11,0,0,0]
	jl	.LBB0_828
# %bb.729:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 4901
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_906
# %bb.730:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rcx, -4756
	adc	rax, -1
	adc	r14, -1
	adc	rsi, -1
	mov	edx, 57
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	eax, 0
	sbb	rax, r14
	mov	eax, 0
	sbb	rax, rsi
	jb	.LBB0_1569
# %bb.731:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rdx, [rip + .LJTI0_6]
	movsxd	rax, dword ptr [rdx + 4*rcx]
	add	rax, rdx
	jmp	rax
.LBB0_1598:                             # %OP2327.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	r9, qword ptr [r12 + rax - 64]
	mov	r8, qword ptr [r12 + rax - 56]
	mov	rsi, qword ptr [r12 + rax - 48]
	mov	rdi, qword ptr [r12 + rax - 40]
	mov	qword ptr [r12 + rax + 24], rdi
	mov	qword ptr [r12 + rax + 16], rsi
	mov	qword ptr [r12 + rax + 8], r8
	mov	qword ptr [r12 + rax], r9
	mov	rax, r8
	or	rax, rdi
	mov	rcx, r9
	or	rcx, rsi
	or	rcx, rax
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_76] # ymm0 = [0,0,4797,0]
	jne	.LBB0_971
	jmp	.LBB0_1599
	.p2align	4, 0x90
.LBB0_732:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	cmp	r8, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1136
# %bb.733:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	cmp	r15, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_760
# %bb.734:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 4106
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_792
# %bb.735:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 4570
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1163
# %bb.736:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 4658
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_898
# %bb.737:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 4571
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	je	.LBB0_163
# %bb.738:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, rcx
	xor	rsi, 4609
	or	rsi, r14
	or	rsi, rax
	jne	.LBB0_1438
# %bb.739:                              # %OP2260.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovups	ymm0, ymmword ptr [r12 + rax - 32]
	vmovups	ymmword ptr [r12 + rax - 64], ymm0
	vmovaps	xmmword ptr [r12 + rax - 16], xmm9
	vmovaps	xmmword ptr [r12 + rax - 32], xmm9
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_88] # xmm0 = [4645,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r12 + rax - 96]
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	add	r13, 3
	mov	rcx, qword ptr [r12 + rax - 160]
	mov	rdx, r13
	shl	rdx, 5
	mov	sil, 48
	bzhi	rsi, qword ptr [r12 + rax - 152], rsi
	vmovaps	xmmword ptr [r12 + rax + 80], xmm9
	mov	qword ptr [r12 + rax + 72], rsi
	mov	qword ptr [r12 + rax + 64], rcx
	vmovups	ymmword ptr [r12 + rax + 128], ymm7
	vmovups	ymmword ptr [r12 + rdx], ymm7
	mov	ecx, 8814
	jmp	.LBB0_1011
.LBB0_740:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 10112
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_755
# %bb.741:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 8927
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_772
# %bb.742:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 8519
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_21] # xmm1 = [12,0,0,0]
	jl	.LBB0_832
# %bb.743:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 8147
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1247
# %bb.744:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 8355
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1278
# %bb.745:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 8148
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	jne	.LBB0_1445
# %bb.746:                              # %OP3969.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, r13
	shl	rax, 5
	lea	rsi, [r12 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm1
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_95
# %bb.747:                              # %OP3973.JUMP
                                        #   in Loop: Header=BB0_724 Depth=1
	dec	r13
	jmp	.LBB0_848
.LBB0_748:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6679
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_778
# %bb.749:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 7387
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_842
# %bb.750:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 7639
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1195
# %bb.751:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 7617
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1388
# %bb.752:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 7618
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_300
# %bb.753:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	rcx, 7629
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.754:                              # %OP3711.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r13, -10
	mov	rax, r13
	shl	rax, 5
	mov	rsi, qword ptr [r12 + rax + 24]
	mov	r14, qword ptr [r12 + rax + 16]
	mov	rcx, qword ptr [r12 + rax]
	mov	rax, qword ptr [r12 + rax + 8]
	jmp	.LBB0_934
.LBB0_755:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 10460
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_796
# %bb.756:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 10243
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_869
# %bb.757:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, r11
	mov	rdi, rcx
	add	rdi, -10284
	mov	r8, rax
	adc	r8, -1
	mov	r9, r14
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	edx, 158
	cmp	rdx, rdi
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	mov	r8d, 0
	sbb	r8, r10
	jb	.LBB0_930
# %bb.758:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [rip + .LJTI0_10]
	movsxd	rax, dword ptr [rcx + 4*rdi]
	add	rax, rcx
	mov	r11, r15
	jmp	rax
.LBB0_759:                              # %OP4888.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm1, xmmword ptr [r12 + rax - 64]
	vmovaps	xmmword ptr [rbp - 128], xmm1   # 16-byte Spill
	vmovaps	xmm1, xmmword ptr [r12 + rax - 48]
	vmovaps	xmmword ptr [rbp - 224], xmm1   # 16-byte Spill
	vmovaps	xmm6, xmmword ptr [r12 + rax - 32]
	vmovdqa	ymm1, ymm0
	vmovaps	ymm0, ymm3
	vmovaps	xmm3, xmmword ptr [r12 + rax - 16]
	vmovaps	xmmword ptr [r12 + rax - 48], xmm3
	vmovaps	ymm3, ymm0
	vmovdqa	ymm0, ymm1
	vmovaps	xmmword ptr [r12 + rax - 64], xmm6
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovaps	xmm6, xmmword ptr [rbp - 224]   # 16-byte Reload
	vmovaps	xmmword ptr [r12 + rax - 16], xmm6
	vmovaps	xmm6, xmmword ptr [rbp - 128]   # 16-byte Reload
	vmovaps	xmmword ptr [r12 + rax - 32], xmm6
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_34] # xmm6 = [10940,0]
	vmovups	ymmword ptr [r12 + rax + 32], ymm6
	vmovups	ymmword ptr [r12 + rax], ymm6
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_85] # xmm6 = [3069,0,0,0]
	mov	ecx, 10940
	jmp	.LBB0_933
.LBB0_760:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	cmp	rbx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1153
# %bb.761:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_849
# %bb.762:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 2943
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jge	.LBB0_1251
# %bb.763:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 3050
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1386
# %bb.764:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 3051
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1010
# %bb.765:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	rcx, 3069
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.766:                              # %OP1598.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm1, xmmword ptr [r12 + rax - 64]
	vmovaps	xmmword ptr [rbp - 224], xmm1   # 16-byte Spill
	vmovaps	xmm7, xmmword ptr [r12 + rax - 48]
	vmovaps	xmm2, xmmword ptr [r12 + rax - 32]
	vmovdqa	ymm1, ymm0
	vmovaps	ymm0, ymm3
	vmovaps	xmm3, xmmword ptr [r12 + rax - 16]
	vmovaps	xmmword ptr [r12 + rax - 48], xmm3
	vmovaps	ymm3, ymm0
	vmovdqa	ymm0, ymm1
	vmovaps	xmmword ptr [r12 + rax - 64], xmm2
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovaps	xmmword ptr [r12 + rax - 16], xmm7
	vmovaps	xmm7, xmmword ptr [rbp - 224]   # 16-byte Reload
	vmovaps	xmmword ptr [r12 + rax - 32], xmm7
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
	vmovups	ymmword ptr [r12 + rax + 32], ymm7
	vmovups	ymmword ptr [r12 + rax], ymm7
	mov	ecx, 8814
	jmp	.LBB0_929
.LBB0_767:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 5624
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_854
# %bb.768:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	add	rdi, -5625
	mov	r8, rax
	adc	r8, -1
	mov	r9, r14
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	edx, 34
	cmp	rdx, rdi
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	mov	r8d, 0
	sbb	r8, r10
	jae	.LBB0_896
# %bb.769:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	add	rdi, -5763
	mov	r8, rax
	adc	r8, -1
	mov	r9, r14
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	edx, 32
	cmp	rdx, rdi
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	mov	r8d, 0
	sbb	r8, r10
	jb	.LBB0_942
# %bb.770:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [rip + .LJTI0_8]
	movsxd	rax, dword ptr [rcx + 4*rdi]
	add	rax, rcx
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	rax
.LBB0_771:                              #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vpxor	xmm1, xmm1, xmm1
	vmovaps	xmm3, xmmword ptr [rip + .LCPI0_64] # xmm3 = [5773,0,0,0]
	jmp	.LBB0_1066
.LBB0_772:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 9361
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_800
# %bb.773:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 9185
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1239
# %bb.774:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 9252
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1341
# %bb.775:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 9186
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_328
# %bb.776:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	rcx, 9211
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.777:                              # %OP4439.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	ecx, dword ptr [r12 + rax - 8]
	vmovaps	xmm6, xmmword ptr [r12 + rax - 64]
	vmovaps	xmm1, xmmword ptr [r12 + rax - 48]
	vmovaps	xmmword ptr [rbp - 224], xmm1   # 16-byte Spill
	vmovdqa	ymm1, ymm0
	vmovaps	ymm0, ymm2
	vmovaps	xmm2, xmmword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 16]
	mov	qword ptr [r12 + rax - 48], rdx
	vmovaps	xmmword ptr [r12 + rax - 64], xmm2
	vmovaps	ymm2, ymm0
	vmovdqa	ymm0, ymm1
	mov	qword ptr [r12 + rax - 40], rcx
	vmovaps	xmmword ptr [r12 + rax - 32], xmm6
	vmovaps	xmm1, xmmword ptr [rbp - 224]   # 16-byte Reload
	vmovaps	xmmword ptr [r12 + rax - 16], xmm1
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_50] # xmm6 = [10875,0]
	vmovups	ymmword ptr [r12 + rax + 32], ymm6
	vmovups	ymmword ptr [r12 + rax], ymm6
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_85] # xmm6 = [3069,0,0,0]
	mov	ecx, 10875
	jmp	.LBB0_929
.LBB0_778:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6182
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_812
# %bb.779:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6078
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_27] # xmm0 = [8,0,0,0]
	jge	.LBB0_1199
# %bb.780:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6116
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1339
# %bb.781:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 6117
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_995
# %bb.782:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 6179
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.783:                              # %OP3076.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_45] # xmm0 = [11,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	dec	r13
	lea	rsi, [r12 + rax]
	add	rsi, -32
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_95
# %bb.784:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r11, rbx
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	jmp	.LBB0_785
.LBB0_792:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 3815
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	jl	.LBB0_823
# %bb.793:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, r11
	mov	rdi, rcx
	add	rdi, -3557
	mov	r8, rax
	adc	r8, -1
	mov	r9, r14
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	edx, 57
	cmp	rdx, rdi
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	mov	r8d, 0
	sbb	r8, r10
	jb	.LBB0_1282
# %bb.794:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [rip + .LJTI0_4]
	movsxd	rax, dword ptr [rcx + 4*rdi]
	add	rax, rcx
	mov	r11, rbx
	mov	rcx, r15
	jmp	rax
.LBB0_795:                              # %OP1800.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	mov	rbx, rcx
	vmovdqu	ymmword ptr [rcx + rax], ymm0
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	jmp	.LBB0_965
.LBB0_796:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 10695
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_860
# %bb.797:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, r11
	mov	rdi, rcx
	add	rdi, -10618
	mov	r8, rax
	adc	r8, -1
	mov	r9, r14
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	edx, 24
	cmp	rdx, rdi
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	mov	r8d, 0
	sbb	r8, r10
	jb	.LBB0_912
# %bb.798:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [rip + .LJTI0_11]
	movsxd	rax, dword ptr [rcx + 4*rdi]
	add	rax, rcx
	mov	r11, r15
	jmp	rax
.LBB0_799:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r14, r13
	jmp	.LBB0_1076
.LBB0_800:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 9858
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_874
# %bb.801:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 9738
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1382
# %bb.802:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 9739
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1293
# %bb.803:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 9793
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.804:                              # %OP4642.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r15, [r13 + 1]
	mov	rax, r13
	shl	r13, 5
	vmovups	ymmword ptr [r12 + r13], ymm8
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	lea	rbx, [rax + 2]
	mov	qword ptr [rbp - 128], r15      # 8-byte Spill
	shl	r15, 5
	mov	eax, dword ptr [r12 + r13 - 112]
	mov	r8, qword ptr [r12 + r13 - 128]
	mov	r9, qword ptr [r12 + r13 - 120]
	mov	qword ptr [rbp - 224], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 0
	mov	qword ptr [r12 + rbx + 8], r9
	mov	qword ptr [r12 + rbx + 16], rax
	mov	qword ptr [r12 + rbx], r8
	mov	qword ptr [r12 + rbx + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r13 + 96], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r11
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1109
# %bb.805:                              # %OP4651.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rbx, r12
	lea	r14, [r12 + r13]
	add	r14, 96
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm0
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 1
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1109
# %bb.806:                              # %OP4654.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r15, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	lea	rdi, [rax + 4]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 16]
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	shl	rdi, 5
	mov	qword ptr [r12 + rdi + 16], rsi
	mov	qword ptr [r12 + rdi], rcx
	mov	qword ptr [r12 + rdi + 24], rax
	mov	qword ptr [r12 + rdi + 8], rdx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_1638
# %bb.807:                              # %OP4658.SWAP4
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r13, r12
	mov	rax, qword ptr [r13 - 8]
	mov	rcx, qword ptr [r13 - 32]
	mov	rdx, qword ptr [r13 - 24]
	mov	rsi, qword ptr [r13 - 16]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13 - 16], r10
	mov	qword ptr [r13 - 32], r8
	mov	qword ptr [r13 - 8], rdi
	mov	qword ptr [r13 - 24], r9
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1109
# %bb.808:                              # %OP4662.SWAP1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rax, qword ptr [r13 - 72]
	and	rax, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	r8, qword ptr [r13 - 96]
	mov	r9, qword ptr [r13 - 88]
	and	r9, qword ptr [r13 + 8]
	mov	qword ptr [r13 + 8], rsi
	mov	r10, qword ptr [r13 - 80]
	and	r10, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], rdx
	and	r8, qword ptr [r13]
	mov	qword ptr [r13], rdi
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	sub	rsp, 8
	push	r12
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.809:                              # %OP4667.KECCAK256
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r14, [r13 - 32]
	mov	rdi, r12
	mov	rsi, r14
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_457
# %bb.810:                              # %OP4668.SLOAD
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_457
# %bb.811:                              # %OP4669.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovups	ymm0, ymmword ptr [r13 - 64]
	vmovdqu	ymm1, ymmword ptr [r13 - 32]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_47] # xmm2 = [9859,0,0,0]
	vmovups	ymmword ptr [r13 - 32], ymm2
	vmovdqu	ymmword ptr [r13], ymm1
	vmovups	ymmword ptr [r15], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_34] # xmm0 = [10940,0]
	vmovdqu	ymmword ptr [r13 + 96], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	ecx, 10940
	mov	r13, qword ptr [rbp - 224]      # 8-byte Reload
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB0_1096
.LBB0_812:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6365
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1223
# %bb.813:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6346
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1394
# %bb.814:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 6183
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	jne	.LBB0_815
	jmp	.LBB0_785
.LBB0_823:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 3877
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1220
# %bb.824:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 3836
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1346
# %bb.825:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 3816
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1291
# %bb.826:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	rcx, 3827
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.827:                              # %OP1916.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r13
	shl	rdi, 5
	mov	rcx, qword ptr [r12 + rdi - 160]
	mov	rax, qword ptr [r12 + rdi - 152]
	mov	rsi, qword ptr [r12 + rdi - 136]
	mov	r14, qword ptr [r12 + rdi - 144]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [r12 + rdi - 160], ymm0
	vmovups	ymm0, ymmword ptr [r12 + rdi - 128]
	mov	qword ptr [r12 + rdi - 112], r14
	mov	qword ptr [r12 + rdi - 104], rsi
	mov	qword ptr [r12 + rdi - 128], rcx
	mov	qword ptr [r12 + rdi - 120], rax
	vmovups	ymmword ptr [r12 + rdi - 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	add	r13, -4
	jmp	.LBB0_934
.LBB0_828:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 5090
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1243
# %bb.829:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 5066
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1333
# %bb.830:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 4986
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_999
# %bb.831:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 4990
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_1001
	jmp	.LBB0_1569
.LBB0_832:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 8672
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1265
# %bb.833:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, r11
	mov	rdi, rcx
	add	rdi, -8673
	mov	r8, rax
	adc	r8, -1
	mov	r9, r14
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	edx, 34
	cmp	rdx, rdi
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	mov	r8d, 0
	sbb	r8, r10
	jb	.LBB0_944
# %bb.834:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [rip + .LJTI0_9]
	movsxd	rax, dword ptr [rcx + 4*rdi]
	add	rax, rcx
	jmp	rax
.LBB0_835:                              # %OP4240.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r9, r13
	shl	r9, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r9], ymm0
	lea	r14, [r13 + 2]
	mov	rbx, qword ptr [r12 + r9 - 16]
	mov	rax, qword ptr [r12 + r9 - 8]
	mov	rcx, qword ptr [r12 + r9 - 32]
	mov	r10, qword ptr [r12 + r9 - 24]
	mov	rdx, r10
	or	rdx, rax
	mov	rsi, rcx
	or	rsi, rbx
	mov	r11, r14
	shl	r11, 5
	xor	edi, edi
	or	rsi, rdx
	sete	dil
	vmovups	xmmword ptr [r12 + r9 + 40], xmm9
	mov	qword ptr [r12 + r9 + 32], rdi
	mov	qword ptr [r12 + r9 + 56], 0
	mov	qword ptr [r12 + r11], rdi
	mov	qword ptr [r12 + r11 + 24], 0
	mov	qword ptr [r12 + r11 + 8], 0
	mov	qword ptr [r12 + r11 + 16], 0
	mov	r8d, 1894
	je	.LBB0_1104
# %bb.836:                              # %OP4247.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r9, r12
	mov	rdi, qword ptr [r9 - 64]
	mov	rsi, qword ptr [r9 - 56]
	mov	r14, qword ptr [r9 - 48]
	mov	qword ptr [rbp - 128], r14      # 8-byte Spill
	mov	r8, qword ptr [r9 - 40]
	mov	qword ptr [rbp - 224], r8       # 8-byte Spill
	mov	rdx, rcx
	imul	rdx, r8
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	r13, r10
	imul	r13, r14
	add	r13, rdx
	mov	rdx, rcx
	mov	r12, rax
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mulx	rdx, rax, r14
	add	r13, rdx
	mov	rdx, rbx
	imul	rdx, rsi
	imul	r12, rdi
	add	r12, rdx
	mov	rdx, rbx
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	mulx	rdx, rbx, rdi
	add	r12, rdx
	add	r11, qword ptr [rbp - 56]       # 8-byte Folded Reload
	add	rbx, rax
	mov	rdx, rdi
	mulx	r8, rax, rcx
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	adc	r12, r13
	mov	rdx, rsi
	mulx	rax, r14, rcx
	add	r14, r8
	adc	rax, 0
	mov	rdx, rdi
	mulx	r8, r13, r10
	mov	rdx, rsi
	mulx	rdx, r15, r10
	add	r13, r14
	adc	r8, rax
	setb	al
	add	r15, r8
	movzx	eax, al
	adc	rdx, rax
	add	r15, rbx
	adc	rdx, r12
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 152]       # 8-byte Reload
	mov	qword ptr [r9], r8
	mov	qword ptr [r9 + 16], r15
	mov	qword ptr [r9 + 8], r13
	mov	qword ptr [r9 + 24], rdx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [r9 + 48], rax
	mov	qword ptr [r9 + 32], rdi
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [r9 + 56], rax
	mov	qword ptr [r9 + 40], rsi
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r11 + 16], rdi
	mov	qword ptr [r11], rcx
	mov	rsi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r11 + 24], rsi
	mov	qword ptr [r11 + 8], r10
	mov	qword ptr [r9 + 112], r15
	mov	qword ptr [r9 + 96], r8
	mov	qword ptr [r9 + 120], rdx
	mov	qword ptr [r9 + 104], r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 4
	mov	rax, r13
	shl	rax, 5
	mov	qword ptr [r12 + rax], rcx
	mov	qword ptr [r12 + rax + 16], rdi
	mov	qword ptr [r12 + rax + 24], rsi
	mov	qword ptr [r12 + rax + 8], r10
.LBB0_837:                              # %OP4259.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rdi, r13
	shl	rdi, 5
	mov	rbx, qword ptr [r12 + rdi - 24]
	mov	r11, qword ptr [r12 + rdi - 8]
	mov	r15, qword ptr [r12 + rdi - 32]
	mov	rax, r12
	mov	r12, qword ptr [r12 + rdi - 16]
	mov	r9, qword ptr [rax + rdi - 40]
	mov	r10, qword ptr [rax + rdi - 64]
	mov	r8, qword ptr [rax + rdi - 56]
	mov	rsi, qword ptr [rax + rdi - 48]
	mov	rax, r8
	or	rax, r9
	mov	rcx, r10
	or	rcx, rsi
	or	rcx, rax
	sete	cl
	mov	rax, rbx
	or	rax, r11
	mov	rdx, r15
	or	rdx, r12
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, r9
	lzcnt	rdx, rsi
	add	rdx, 64
	test	r9, r9
	cmovne	rdx, rcx
	lzcnt	rcx, r8
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	lzcnt	r10, r10
	add	r10, 64
	test	r8, r8
	cmovne	r10, rcx
	sub	r10, -128
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	rcx, rsi
	mov	qword ptr [rbp - 144], r9       # 8-byte Spill
	or	rcx, r9
	cmovne	r10, rdx
	lzcnt	rcx, r11
	lzcnt	rdx, r12
	add	rdx, 64
	test	r11, r11
	cmovne	rdx, rcx
	lzcnt	rcx, r15
	add	rcx, 64
	lzcnt	rsi, rbx
	test	rbx, rbx
	cmovne	rcx, rsi
	sub	rcx, -128
	mov	rsi, r12
	or	rsi, r11
	mov	rsi, r10
	cmovne	rcx, rdx
	sub	rsi, rcx
	mov	edx, 0
	sbb	rdx, rdx
	mov	r13d, 0
	sbb	r13, r13
	mov	r14d, 0
	sbb	r14, r14
	mov	ecx, 255
	cmp	rcx, rsi
	mov	ecx, 0
	sbb	rcx, rdx
	mov	ecx, 0
	sbb	rcx, r13
	mov	ecx, 0
	sbb	rcx, r14
	setb	cl
	or	cl, al
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	r10, r11
	mov	eax, 0
	cmovne	r10, rax
	mov	r11, r12
	cmovne	r11, rax
	mov	qword ptr [rbp - 128], rbx      # 8-byte Spill
	cmovne	rbx, rax
	mov	r9, r15
	cmovne	r15, rax
	jne	.LBB0_1056
# %bb.838:                              # %OP4259.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 176], r8       # 8-byte Spill
	mov	rax, rsi
	xor	rax, 255
	or	rax, r13
	mov	rcx, rdx
	or	rcx, r14
	or	rcx, rax
	mov	r8d, 1894
	je	.LBB0_1103
# %bb.839:                              # %udiv-bb126775
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 288], rdi      # 8-byte Spill
	mov	rax, rsi
	add	rsi, 1
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	adc	rdx, 0
	adc	r13, 0
	adc	r14, 0
	mov	r15, r9
	mov	qword ptr [rbp - 1872], r9
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 1904], ymm0
	mov	rbx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 1864], rbx
	mov	qword ptr [rbp - 1856], r12
	mov	r9, qword ptr [rbp - 104]       # 8-byte Reload
	mov	qword ptr [rbp - 1848], r9
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	r8, rdx
	mov	rdx, qword ptr [rbp + rax - 1856]
	mov	rsi, qword ptr [rbp + rax - 1848]
	shld	rsi, rdx, cl
	mov	qword ptr [rbp - 232], rsi      # 8-byte Spill
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 1872]
	mov	r10, qword ptr [rbp + rax - 1864]
	mov	rax, r10
	shr	rax
	shld	r10, rdi, cl
	mov	qword ptr [rbp - 240], r10      # 8-byte Spill
	shrx	r11, rax, rsi
	mov	rsi, qword ptr [rbp - 224]      # 8-byte Reload
	or	r11, rdx
	mov	rax, r8
	or	rax, r14
	mov	rdx, rsi
	or	rdx, r13
	or	rdx, rax
	shlx	rax, rdi, rcx
	mov	qword ptr [rbp - 248], rax      # 8-byte Spill
	je	.LBB0_1101
# %bb.840:                              # %udiv-preheader26774
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r10, r8
	vmovdqu	ymmword ptr [rbp - 1808], ymm0
	mov	qword ptr [rbp - 1840], r15
	mov	qword ptr [rbp - 1832], rbx
	mov	qword ptr [rbp - 1824], r12
	mov	qword ptr [rbp - 1816], r9
	mov	ecx, esi
	and	cl, 7
	mov	eax, esi
	shr	al, 3
	movzx	eax, al
	mov	rdx, qword ptr [rbp + rax - 1816]
	mov	rsi, qword ptr [rbp + rax - 1824]
	mov	r15, rsi
	shrd	r15, rdx, cl
	mov	r12, qword ptr [rbp + rax - 1840]
	mov	rax, qword ptr [rbp + rax - 1832]
	shrx	rdi, rax, rcx
	mov	qword ptr [rbp - 128], r14      # 8-byte Spill
	shrx	r8, rdx, rcx
	mov	edx, ecx
	not	dl
	add	rsi, rsi
	shlx	rdx, rsi, rdx
	or	rdx, rdi
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rax, cl
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 256], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	xor	ecx, ecx
	xor	eax, eax
	xor	esi, esi
	xor	edi, edi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r13, r10
	mov	r10, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 240]      # 8-byte Reload
	mov	r14, qword ptr [rbp - 248]      # 8-byte Reload
.LBB0_841:                              # %udiv-do-while26773
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	r8, r15, 1
	shld	r15, rdx, 1
	shld	rdx, r12, 1
	shld	r12, r10, 1
	shld	r10, r11, 1
	or	r10, rdi
	shld	r11, rbx, 1
	or	r11, rsi
	shld	rbx, r14, 1
	or	rbx, rax
	add	r14, r14
	or	r14, rcx
	cmp	qword ptr [rbp - 256], r12      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, rdx
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, r8
	sar	rax, 63
	mov	ecx, eax
	and	ecx, 1
	mov	rsi, rax
	and	rsi, qword ptr [rbp - 144]      # 8-byte Folded Reload
	mov	rdi, rax
	and	rdi, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	r9, rax
	and	r9, qword ptr [rbp - 176]       # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 152]      # 8-byte Folded Reload
	sub	r12, rax
	sbb	rdx, r9
	sbb	r15, rdi
	sbb	r8, rsi
	mov	rsi, qword ptr [rbp - 224]      # 8-byte Reload
	add	rsi, -1
	adc	r13, -1
	mov	r9, qword ptr [rbp - 104]       # 8-byte Reload
	adc	r9, -1
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rdi, -1
	mov	rax, r13
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	or	rax, rdi
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	or	rsi, r9
	or	rsi, rax
	mov	eax, 0
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	mov	r9d, 0
	mov	eax, 0
	mov	esi, 0
	mov	edi, 0
	jne	.LBB0_841
	jmp	.LBB0_1102
.LBB0_842:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6867
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1255
# %bb.843:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 6698
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1392
# %bb.844:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 6699
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1492
# %bb.845:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 6858
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.846:                              # %OP3379.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, r13
	shl	rax, 5
	lea	rsi, [r12 + rax]
	add	rsi, -64
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [r12 + rax - 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax - 32], ymm0
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_630
# %bb.847:                              # %OP3385.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r13, -4
.LBB0_848:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	rsi, qword ptr [r12 + rax + 24]
	mov	r14, qword ptr [r12 + rax + 16]
	mov	rcx, qword ptr [r12 + rax]
	mov	rax, qword ptr [r12 + rax + 8]
	mov	r11, rbx
	mov	rbx, r15
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_85] # xmm4 = [3069,0,0,0]
	vmovaps	ymm6, ymm4
	vmovaps	xmm5, xmmword ptr [rip + .LCPI0_79] # xmm5 = [1000,0,0,0]
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
	vmovaps	ymm8, ymmword ptr [rip + .LCPI0_46] # ymm8 = [18446744073709551615,18446744073709551615,4294967295,0]
	vxorps	xmm9, xmm9, xmm9
	vmovaps	xmm10, xmmword ptr [rip + .LCPI0_103] # xmm10 = [3105,0,0,0]
	vmovaps	xmm11, xmmword ptr [rip + .LCPI0_104] # xmm11 = [3051,0,0,0]
	vmovaps	xmm12, xmmword ptr [rip + .LCPI0_105] # xmm12 = [3,0,0,0]
	vmovaps	xmm13, xmmword ptr [rip + .LCPI0_100] # xmm13 = [3161,0,0,0]
	vmovaps	xmm14, xmmword ptr [rip + .LCPI0_101] # xmm14 = [1000000,0,0,0]
	vmovaps	xmm15, xmmword ptr [rip + .LCPI0_102] # xmm15 = [3149,0,0,0]
	vmovaps	xmm3, xmmword ptr [rip + .LCPI0_99] # xmm3 = [3177,0,0,0]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_78] # xmm4 = [4715,0,0,0]
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_724
.LBB0_849:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 3176
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jl	.LBB0_885
# %bb.850:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 3148
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_925
# %bb.851:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 3081
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	je	.LBB0_1012
# %bb.852:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 3105
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.853:                              # %OP1616.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovups	ymm0, ymmword ptr [r12 + rax - 32]
	vmovups	ymmword ptr [r12 + rax - 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	vmovups	ymmword ptr [r12 + rax - 32], ymm13
	vmovups	ymmword ptr [r12 + rax], ymm14
	vmovups	ymmword ptr [r12 + rax + 32], ymm15
	add	r13, 4
	mov	rcx, r13
	shl	rcx, 5
	mov	dil, 48
	bzhi	rdx, qword ptr [r12 + rax - 280], rdi
	vmovaps	xmmword ptr [r12 + rax + 80], xmm9
	mov	qword ptr [r12 + rax + 72], rdx
	mov	rdx, qword ptr [r12 + rax - 288]
	mov	rsi, qword ptr [r12 + rax - 256]
	mov	qword ptr [r12 + rax + 64], rdx
	bzhi	rdx, qword ptr [r12 + rax - 248], rdi
	vmovaps	xmmword ptr [r12 + rax + 112], xmm9
	mov	qword ptr [r12 + rax + 104], rdx
	mov	qword ptr [r12 + rax + 96], rsi
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [r12 + rax + 160], ymm6
	jmp	.LBB0_928
.LBB0_854:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 5528
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1259
# %bb.855:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 5570
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	mov	r8, qword ptr [rbp - 160]       # 8-byte Reload
	mov	rdi, rcx
	jge	.LBB0_1436
# %bb.856:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rdi, 5571
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_277
# %bb.857:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 5602
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.858:                              # %OP2768.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r15, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.859:                              # %OP2771.SWAP1
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	xmm0, xmmword ptr [rbx + 16]
	vmovaps	xmm1, xmmword ptr [rbx]
	vmovups	ymm2, ymmword ptr [rbx - 32]
	vmovaps	xmmword ptr [rbx - 32], xmm1
	vmovaps	xmmword ptr [rbx - 16], xmm0
	vmovups	ymmword ptr [rbx - 64], ymm2
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_69] # xmm0 = [5625,0,0,0]
	vmovups	ymmword ptr [r12 + r14], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx - 160]
	vmovdqu	ymm1, ymmword ptr [rbx - 96]
	vmovdqu	ymmword ptr [rbx + 64], ymm1
	add	r13, 4
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [rbx + 160], ymm6
	vmovups	ymmword ptr [r12 + rax], ymm6
	mov	ecx, 8680
	jmp	.LBB0_1095
.LBB0_860:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 10874
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_901
# %bb.861:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 10696
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_983
# %bb.862:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, rcx
	xor	rsi, 10754
	or	rsi, r14
	or	rsi, rax
	vpxor	xmm1, xmm1, xmm1
	jne	.LBB0_1440
# %bb.863:                              # %OP5151.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, r13
	shl	r15, 5
	lea	rbx, [r12 + r15]
	vmovups	ymm0, ymmword ptr [r12 + r15 - 32]
	vmovaps	xmmword ptr [r12 + r15 - 16], xmm9
	vmovaps	xmmword ptr [r12 + r15 - 32], xmm9
	vmovups	ymmword ptr [r12 + r15], ymm0
	vmovdqu	ymmword ptr [r12 + r15 + 32], ymm1
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	rcx, r13
	jne	.LBB0_1656
# %bb.864:                              # %OP5156.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r13, r14
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	lea	r12, [rcx + 2]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1654
# %bb.865:                              # %OP5158.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 40], rsi
	mov	rax, qword ptr [rbx - 40]
	mov	r8, qword ptr [rbx - 64]
	mov	r9, qword ptr [rbx - 56]
	mov	r10, qword ptr [rbx - 48]
	mov	qword ptr [rbp - 224], r12      # 8-byte Spill
	shl	r12, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + r12 + 16], r10
	mov	qword ptr [r11 + r12], r8
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], r9
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	push	r13
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1109
# %bb.866:                              # %OP5162.SWAP1
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	xmm0, xmmword ptr [rbx + 32]
	vmovdqa	xmm1, xmmword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	vmovdqa	xmmword ptr [rbx + 16], xmm1
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r13
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1109
# %bb.867:                              # %OP5163.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r12, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	r9d, dword ptr [rbx - 80]
	mov	rdi, qword ptr [rbx - 96]
	mov	r11, qword ptr [rbx - 88]
	mov	r8, qword ptr [rbx]
	mov	qword ptr [rbx], rdi
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r9
	mov	r10, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], r11
	mov	r9, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], 0
	movabs	r11, 7620847484418887082
	mov	qword ptr [rbx + 48], r11
	movabs	r11, 2951364421682967535
	mov	qword ptr [rbx + 32], r11
	movabs	r11, -2453807943512831845
	mov	qword ptr [rbx + 56], r11
	movabs	r11, -7697874482856943338
	mov	qword ptr [rbx + 40], r11
	sub	r8, rax
	sbb	r10, rsi
	sbb	rdi, rdx
	sbb	r9, rcx
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 32
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	add	r8, 32
	mov	qword ptr [r12], r8
	adc	r10, 0
	mov	qword ptr [r12 + 8], r10
	adc	rdi, 0
	mov	qword ptr [r12 + 16], rdi
	adc	r9, 0
	mov	qword ptr [r12 + 24], r9
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 96], rax
	lea	rsi, [r12 + r15]
	add	rsi, -32
	mov	rdi, r13
	mov	edx, 3
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_1650
# %bb.868:                              # %OP5178.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r11, r13
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, -4
	mov	rax, r13
	shl	rax, 5
	jmp	.LBB0_924
.LBB0_869:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 10113
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_139
# %bb.870:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, rcx
	xor	rsi, 10200
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_935
# %bb.871:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 10213
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.872:                              # %OP4849.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, r11
	mov	rax, r13
	shl	rax, 5
	mov	r14, qword ptr [r12 + rax - 32]
	mov	rdx, qword ptr [r12 + rax - 24]
	mov	rsi, qword ptr [r12 + rax - 16]
	mov	rcx, qword ptr [r12 + rax - 8]
	mov	qword ptr [r12 + rax - 40], rcx
	mov	qword ptr [r12 + rax - 48], rsi
	mov	qword ptr [r12 + rax - 56], rdx
	mov	qword ptr [r12 + rax - 64], r14
	lea	rdi, [r13 - 1]
	mov	rbx, rdi
	shl	rbx, 5
	mov	r8, qword ptr [r12 + rax - 96]
	mov	r9, qword ptr [r12 + rax - 88]
	mov	r10, qword ptr [r12 + rax - 80]
	mov	r11, qword ptr [r12 + rax - 72]
	mov	qword ptr [r12 + rax + 24], r11
	mov	qword ptr [r12 + rax + 16], r10
	mov	qword ptr [r12 + rax + 8], r9
	mov	qword ptr [r12 + rax], r8
	mov	qword ptr [rbp - 224], r14      # 8-byte Spill
	cmp	r14, r8
	mov	r14, rdx
	sbb	r14, r9
	mov	r14, rsi
	sbb	r14, r10
	mov	r14, rcx
	sbb	r14, r11
	setae	r14b
	movzx	r14d, r14b
	mov	qword ptr [r12 + rbx], r14
	vmovups	xmmword ptr [r12 + rbx + 8], xmm9
	mov	qword ptr [r12 + rbx + 24], 0
	jae	.LBB0_1567
# %bb.873:                              # %OP4858.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rax, r12
	add	rbx, r12
	vxorps	xmm4, xmm4, xmm4
	vmovups	ymmword ptr [rbx], ymm4
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_40] # xmm4 = [10259,0,0,0]
	vmovups	ymmword ptr [rax], ymm4
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_41] # xmm4 = [10244,0,0,0]
	vmovups	ymmword ptr [rax + 32], ymm4
	mov	qword ptr [rax + 64], r8
	mov	qword ptr [rax + 72], r9
	mov	qword ptr [rax + 80], r10
	mov	qword ptr [rax + 88], r11
	add	r13, 4
	mov	rdi, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rax + 96], rdi
	mov	qword ptr [rax + 104], rdx
	mov	qword ptr [rax + 112], rsi
	mov	qword ptr [rax + 120], rcx
	mov	rcx, r13
	shl	rcx, 5
	vmovups	ymmword ptr [rax + 160], ymm7
	vmovups	ymmword ptr [r12 + rcx], ymm7
	mov	ecx, 8814
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, r15
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_78] # xmm4 = [4715,0,0,0]
	jmp	.LBB0_724
.LBB0_874:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 10070
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jl	.LBB0_1336
# %bb.875:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 9859
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	jne	.LBB0_1443
# %bb.876:                              # %OP4676.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, r13
	shl	rbx, 5
	vmovups	ymmword ptr [r12 + rbx], ymm8
	lea	r15, [r13 + 3]
	mov	eax, dword ptr [r12 + rbx - 80]
	mov	r8, qword ptr [r12 + rbx - 96]
	mov	r9, qword ptr [r12 + rbx - 88]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rbx + 56], ymm0
	mov	qword ptr [r12 + rbx + 40], r9
	mov	qword ptr [r12 + rbx + 32], r8
	mov	qword ptr [r12 + rbx + 48], rax
	mov	qword ptr [r12 + rbx + 88], 0
	lea	r14, [r13 + 4]
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 8], r9
	mov	qword ptr [r12 + r15], r8
	mov	qword ptr [r12 + r15 + 16], rax
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbp - 128], r14      # 8-byte Spill
	shl	r14, 5
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r11
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.877:                              # %OP4685.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r15, r12
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	lea	rax, [r13 + 5]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqa	ymm1, ymm0
	mov	r13, r15
	vmovdqu	ymmword ptr [r15], ymm0
	add	r14, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	r15, rax
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + r15], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 1
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.878:                              # %OP4690.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rbx, r12
	add	r15, r12
	vmovdqu	ymm0, ymmword ptr [rbx + 64]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_0] # xmm1 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm1
	vmovdqu	ymmword ptr [r14], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r12
	mov	qword ptr [rbp - 224], r14      # 8-byte Spill
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_1657
# %bb.879:                              # %OP4695.SWAP5
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 16]
	mov	rdi, qword ptr [r13 + 24]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [rbx - 16], r10
	mov	qword ptr [rbx - 32], r8
	mov	qword ptr [rbx - 8], rdi
	mov	qword ptr [rbx - 24], r9
	mov	rdi, r12
	mov	rsi, r13
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1638
# %bb.880:                              # %OP4699.DUP1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_667
# %bb.881:                              # %OP4700.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	r9, qword ptr [rbx - 56]
	mov	rax, qword ptr [rbx - 40]
	mov	r8, qword ptr [rbx - 64]
	mov	r10, qword ptr [rbx - 48]
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	sub	rsp, 8
	push	r12
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.882:                              # %OP4704.SWAP1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 16]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 80], r10
	mov	qword ptr [rbx + 64], r8
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], r9
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_667
# %bb.883:                              # %OP4705.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, qword ptr [rbx + 56]
	mov	r11, qword ptr [rbx + 48]
	mov	rsi, qword ptr [rbx + 40]
	mov	r8, qword ptr [rbx + 32]
	mov	rax, qword ptr [rbx + 88]
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	mov	rax, qword ptr [rbx + 80]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	rdx, qword ptr [rbx + 72]
	mov	qword ptr [rbp - 168], rdx      # 8-byte Spill
	mov	rcx, qword ptr [rbx + 64]
	mov	qword ptr [rbp - 184], rcx      # 8-byte Spill
	mov	r9, qword ptr [rbx - 32]
	mov	qword ptr [rbx - 32], r8
	mov	r12, qword ptr [rbx - 24]
	mov	qword ptr [rbx - 24], rsi
	mov	r10, qword ptr [rbx - 16]
	mov	qword ptr [rbx - 16], r11
	mov	r11, qword ptr [rbx - 8]
	mov	qword ptr [rbx - 8], rdi
	mov	r8, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	mov	rdi, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	mov	rax, qword ptr [r14]
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	r14, qword ptr [r14 + 8]
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	mov	rsi, rcx
	sub	rsi, rax
	mov	rcx, rdx
	sbb	rcx, r14
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	sbb	rdx, rdi
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	sbb	rax, r8
	add	r9, rsi
	mov	qword ptr [rbp - 256], r9       # 8-byte Spill
	adc	r12, rcx
	adc	r10, rdx
	adc	r11, rax
	mov	r9, qword ptr [rbx - 128]
	mov	r8, qword ptr [rbx - 120]
	mov	rdi, qword ptr [rbx - 104]
	mov	r14, qword ptr [rbx - 112]
	and	qword ptr [rbx + 16], r14
	and	qword ptr [rbx + 24], rdi
	and	qword ptr [rbx], r9
	and	qword ptr [rbx + 8], r8
	movabs	rdi, 7620847484418887082
	mov	qword ptr [rbx + 48], rdi
	movabs	rdi, -2453807943512831845
	mov	qword ptr [rbx + 56], rdi
	movabs	rdi, 2951364421682967535
	mov	qword ptr [rbx + 32], rdi
	movabs	rdi, -7697874482856943338
	mov	qword ptr [rbx + 40], rdi
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r15 + 16], rdi
	mov	rdi, qword ptr [rbp - 184]      # 8-byte Reload
	mov	qword ptr [r15], rdi
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [r15 + 24], rdi
	mov	rdi, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [r15 + 8], rdi
	mov	rdi, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rdi + 16], rdx
	mov	qword ptr [rdi], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [rdi + 8], rcx
	mov	qword ptr [rbx + 80], r10
	mov	rax, qword ptr [rbp - 256]      # 8-byte Reload
	mov	qword ptr [rbx + 64], rax
	mov	qword ptr [rbx + 88], r11
	mov	qword ptr [rbx + 72], r12
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	mov	qword ptr [r13 + 16], rax
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [r13], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [r13 + 24], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r13 + 8], rax
	lea	rsi, [rbx - 32]
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, rbx
	mov	edx, 3
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_1650
# %bb.884:                              # %OP4721.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r11, rbx
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, -5
	jmp	.LBB0_923
.LBB0_885:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edx, 3299
	cmp	rdx, rcx
	mov	edi, 0
	sbb	rdi, rax
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, rsi
	jge	.LBB0_1390
# %bb.886:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 3300
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	jne	.LBB0_1444
# %bb.887:                              # %OP1693.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, r13
	shl	rbx, 5
	vmovups	ymmword ptr [r12 + rbx], ymm2
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 2
	vmovups	ymmword ptr [r12 + rbx + 32], ymm2
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r11
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.888:                              # %OP1696.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rbx, r12
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 40], rsi
	mov	rax, qword ptr [rbx - 40]
	mov	r8, qword ptr [rbx - 64]
	mov	r9, qword ptr [rbx - 56]
	mov	r10, qword ptr [rbx - 48]
	mov	qword ptr [rbp - 224], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r12 + r13 + 16], r10
	mov	qword ptr [r12 + r13], r8
	mov	qword ptr [r12 + r13 + 24], rax
	mov	qword ptr [r12 + r13 + 8], r9
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1648
# %bb.889:                              # %OP1700.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r13, r12
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 48]
	mov	rsi, qword ptr [rbx + 40]
	mov	rdi, qword ptr [rbx + 32]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [rbx - 8]
	mov	r8, qword ptr [rbx - 32]
	mov	r9, qword ptr [rbx - 24]
	mov	r10, qword ptr [rbx - 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1648
# %bb.890:                              # %OP1706.DUP1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx]
	add	rdi, qword ptr [rbx + 32]
	adc	rsi, qword ptr [rbx + 40]
	adc	rdx, qword ptr [rbx + 48]
	adc	rcx, qword ptr [rbx + 56]
	mov	rax, qword ptr [rbx - 328]
	mov	r8, qword ptr [rbx - 352]
	mov	r9, qword ptr [rbx - 344]
	mov	r10, qword ptr [rbx - 336]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1648
# %bb.891:                              # %OP1712.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 48]
	mov	rsi, qword ptr [rbx + 40]
	mov	rdi, qword ptr [rbx + 32]
	add	rdi, 96
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [rbx - 296]
	mov	r8, qword ptr [rbx - 320]
	mov	r9, qword ptr [rbx - 312]
	mov	r10, qword ptr [rbx - 304]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1648
# %bb.892:                              # %OP1718.SWAP1
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	xmm0, xmmword ptr [rbx + 32]
	vmovdqa	xmm1, xmmword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	vmovdqa	xmmword ptr [rbx + 16], xmm1
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1648
# %bb.893:                              # %OP1719.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	edi, dword ptr [rbx - 272]
	mov	r8, qword ptr [rbx - 288]
	mov	r9, qword ptr [rbx - 280]
	mov	rsi, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbx + 24], 0
	mov	r9, qword ptr [rbp - 136]       # 8-byte Reload
	movbe	rdi, qword ptr [r9 + 156]
	mov	r8d, dword ptr [r9 + 164]
	bswap	r8
	shrd	r8, rdi, 32
	movbe	r9, qword ptr [r9 + 148]
	shrd	rdi, r9, 32
	mov	qword ptr [rbx + 40], rdi
	shr	r9, 32
	mov	qword ptr [rbx + 48], r9
	mov	rdi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 32], r8
	mov	r8, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 56], 0
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_89] # ymm0 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovups	ymmword ptr [r13], ymm0
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	rax, r9
	sbb	rcx, r10
	sbb	rdx, r8
	sbb	rsi, rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	vmovups	ymmword ptr [rbx + 160], ymm0
	add	rax, 128
	adc	rcx, 0
	adc	rdx, 0
	adc	rsi, 0
	mov	qword ptr [rbx + 120], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 104], rcx
	mov	qword ptr [rbx + 96], rax
	mov	qword ptr [rbx + 152], rdi
	mov	qword ptr [rbx + 144], r8
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_457
# %bb.894:                              # %OP1735.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rsi, [rbx - 64]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [rbx - 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	mov	rbx, r15
	mov	rdi, r15
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	jne	.LBB0_630
# %bb.895:                              # %OP1740.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r13, -12
	mov	rax, r13
	shl	rax, 5
	mov	rsi, qword ptr [r12 + rax + 24]
	mov	r14, qword ptr [r12 + rax + 16]
	mov	rcx, qword ptr [r12 + rax]
	mov	rax, qword ptr [r12 + rax + 8]
	mov	r11, rbx
	jmp	.LBB0_1009
.LBB0_896:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [rip + .LJTI0_7]
	movsxd	rax, dword ptr [rcx + 4*rdi]
	add	rax, rcx
	jmp	rax
.LBB0_897:                              # %OP2782.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	r11, qword ptr [r12 + rax - 64]
	mov	r8, qword ptr [r12 + rax - 56]
	mov	r10, qword ptr [r12 + rax - 48]
	mov	rsi, qword ptr [r12 + rax - 40]
	mov	qword ptr [r12 + rax + 24], rsi
	mov	qword ptr [r12 + rax + 16], r10
	mov	qword ptr [r12 + rax + 8], r8
	mov	qword ptr [r12 + rax], r11
	mov	rax, r8
	or	rax, rsi
	mov	rcx, r11
	or	rcx, r10
	or	rcx, rax
	jne	.LBB0_952
	jmp	.LBB0_1599
.LBB0_898:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, r11
	mov	rdi, rcx
	add	rdi, -4695
	mov	r8, rax
	adc	r8, -1
	mov	r9, r14
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	edx, 25
	cmp	rdx, rdi
	mov	r11d, 0
	sbb	r11, r8
	mov	r8d, 0
	sbb	r8, r9
	mov	r8d, 0
	sbb	r8, r10
	jb	.LBB0_1046
# %bb.899:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [rip + .LJTI0_5]
	movsxd	rax, dword ptr [rcx + 4*rdi]
	add	rax, rcx
	mov	r11, r15
	jmp	rax
.LBB0_900:                              # %OP2304.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovdqu	ymm0, ymmword ptr [r12 + rax - 32]
	vmovdqu	ymmword ptr [r12 + rax - 320], ymm0
	vmovups	ymmword ptr [r12 + rax - 32], ymm4
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [r12 + rax], ymm1
	add	r13, 2
	vmovups	ymmword ptr [r12 + rax + 32], ymm5
	jmp	.LBB0_1092
.LBB0_901:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 10875
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_989
# %bb.902:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, rcx
	xor	rsi, 10932
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_990
# %bb.903:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 10940
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.904:                              # %OP5208.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rcx, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	mov	rax, qword ptr [r12 + r14 - 40]
	mov	r15, qword ptr [r12 + r14 - 48]
	mov	rdx, qword ptr [r12 + r14 - 64]
	mov	rsi, qword ptr [r12 + r14 - 56]
	mov	rbx, rcx
	shl	rbx, 5
	mov	rdi, qword ptr [r12 + r14 - 32]
	add	rdi, rdx
	mov	r8, qword ptr [r12 + r14 - 24]
	adc	r8, rsi
	mov	r9, qword ptr [r12 + r14 - 16]
	adc	r9, r15
	mov	r10, qword ptr [r12 + r14 - 8]
	adc	r10, rax
	mov	qword ptr [r12 + r14], rdi
	mov	qword ptr [r12 + r14 + 8], r8
	mov	qword ptr [r12 + r14 + 16], r9
	mov	qword ptr [r12 + r14 + 24], r10
	mov	qword ptr [r12 + r14 + 64], rdi
	mov	qword ptr [r12 + r14 + 72], r8
	mov	qword ptr [r12 + r14 + 80], r9
	mov	qword ptr [r12 + r14 + 88], r10
	cmp	rdi, rdx
	sbb	r8, rsi
	sbb	r9, r15
	sbb	r10, rax
	setae	al
	movzx	eax, al
	vmovups	xmmword ptr [r12 + rbx + 8], xmm9
	mov	qword ptr [r12 + rbx], rax
	mov	qword ptr [r12 + rbx + 24], 0
	jb	.LBB0_1608
# %bb.905:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r13, rcx
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_947
.LBB0_906:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 4902
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1015
# %bb.907:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, rcx
	xor	rsi, 4912
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_1501
# %bb.908:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 4924
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.909:                              # %OP2414.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, r13
	shl	rbx, 5
	mov	rax, qword ptr [r12 + rbx - 64]
	mov	rcx, qword ptr [r12 + rbx - 56]
	or	rcx, qword ptr [r12 + rbx - 40]
	or	rax, qword ptr [r12 + rbx - 48]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vmovups	xmmword ptr [r12 + rbx + 8], xmm9
	mov	qword ptr [r12 + rbx], rdx
	mov	qword ptr [r12 + rbx + 24], 0
	je	.LBB0_1001
# %bb.910:                              # %OP2419.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r14, [r13 + 1]
	add	rbx, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_27] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r15, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.911:                              # %OP2421.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	shl	r14, 5
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_74] # xmm0 = [4986,0,0,0]
	jmp	.LBB0_998
.LBB0_912:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 10461
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	rdi, r15
	je	.LBB0_1017
# %bb.913:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 10517
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.914:                              # %OP5039.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r10, rdi
	mov	r14, r13
	shl	r13, 5
	lea	r15, [r14 + 2]
	mov	eax, dword ptr [r12 + r13 - 80]
	mov	r8, qword ptr [r12 + r13 - 96]
	mov	r9, qword ptr [r12 + r13 - 88]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r13 + 24], ymm0
	mov	qword ptr [r12 + r13 + 8], r9
	mov	qword ptr [r12 + r13], r8
	mov	qword ptr [r12 + r13 + 16], rax
	mov	qword ptr [r12 + r13 + 56], 0
	lea	rbx, [r14 + 3]
	mov	qword ptr [rbp - 224], r15      # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 8], r9
	mov	qword ptr [r12 + r15 + 16], rax
	mov	qword ptr [r12 + r15], r8
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	shl	rbx, 5
	vmovdqu	ymmword ptr [r12 + rbx], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r10
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1109
# %bb.915:                              # %OP5047.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r15, r12
	lea	rax, [r14 + 4]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqa	ymm1, ymm0
	mov	qword ptr [rbp - 128], r15      # 8-byte Spill
	vmovdqu	ymmword ptr [r15], ymm0
	add	rbx, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	r15, rax
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + r15], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 1
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1657
# %bb.916:                              # %OP5052.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r13, r12
	add	r15, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [rbp - 72], r14       # 8-byte Spill
	mov	rsi, r15
	lea	r15, [r14 + 5]
	vmovdqu	ymmword ptr [rsi], ymm0
	mov	rax, qword ptr [r13 + 56]
	mov	rcx, qword ptr [r13 + 32]
	mov	rdx, qword ptr [r13 + 40]
	mov	r8, qword ptr [r13 + 48]
	mov	rdi, r12
	mov	r12, r15
	shl	r12, 5
	mov	qword ptr [rdi + r12 + 16], r8
	mov	qword ptr [rdi + r12], rcx
	mov	qword ptr [rdi + r12 + 24], rax
	mov	qword ptr [rdi + r12 + 8], rdx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_1655
# %bb.917:                              # %OP5056.SWAP5
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [r13 - 8]
	mov	rcx, qword ptr [r13 - 32]
	mov	rdx, qword ptr [r13 - 24]
	mov	rsi, qword ptr [r13 - 16]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13 - 16], r10
	mov	qword ptr [r13 - 32], r8
	mov	qword ptr [r13 - 8], rdi
	mov	qword ptr [r13 - 24], r9
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1657
# %bb.918:                              # %OP5060.DUP4
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rax, [r13 - 32]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 24]
	mov	r15, rax
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1649
# %bb.919:                              # %OP5061.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r12, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	r9, qword ptr [r13 - 56]
	mov	rax, qword ptr [r13 - 40]
	mov	r8, qword ptr [r13 - 64]
	mov	r10, qword ptr [r13 - 48]
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1649
# %bb.920:                              # %OP5065.SWAP4
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1649
# %bb.921:                              # %OP5066.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [r13 + 8]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 24]
	mov	rsi, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13 - 32]
	mov	rcx, qword ptr [r13 - 24]
	mov	rdx, qword ptr [r13 - 16]
	mov	qword ptr [r13 - 16], rsi
	mov	rsi, qword ptr [r13 - 8]
	mov	qword ptr [r13 - 8], r9
	mov	qword ptr [r13 - 32], r8
	mov	qword ptr [r13 - 24], rax
	mov	r8, qword ptr [r13 + 40]
	mov	r9, qword ptr [r13 + 32]
	mov	rax, qword ptr [r13 + 56]
	mov	r10, qword ptr [r13 + 48]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], rax
	mov	rax, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 8], r8
	movabs	r8, 7620847484418887082
	mov	qword ptr [r13 + 48], r8
	movabs	r8, -2453807943512831845
	mov	qword ptr [r13 + 56], r8
	movabs	r8, 2951364421682967535
	mov	qword ptr [r13 + 32], r8
	movabs	r8, -7697874482856943338
	mov	qword ptr [r13 + 40], r8
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rcx
	mov	qword ptr [r12], rdi
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 16]
	mov	r11, qword ptr [r13 + 24]
	mov	r12, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [r12 + 24], r11
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12], r8
	mov	r12, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	mov	r14, qword ptr [r14 + 8]
	sub	rdi, rax
	sbb	rcx, r14
	sbb	rdx, r12
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	sbb	rsi, rax
	add	rdi, r8
	adc	rcx, r9
	adc	rdx, r10
	adc	rsi, r11
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], r12
	mov	qword ptr [rbx + 8], r14
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rbx], rax
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, rbx
	mov	rsi, r15
	mov	edx, 3
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_1650
# %bb.922:                              # %OP5081.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r11, rbx
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, -4
.LBB0_923:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_924:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, qword ptr [r12 + rax + 24]
	mov	r14, qword ptr [r12 + rax + 16]
	mov	rcx, qword ptr [r12 + rax]
	mov	rax, qword ptr [r12 + rax + 8]
	jmp	.LBB0_1096
.LBB0_925:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 3149
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	je	.LBB0_1013
# %bb.926:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 3161
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.927:                              # %OP1639.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovups	ymmword ptr [r12 + rax], ymm3
	vmovdqa	ymm1, ymm0
	vmovups	ymm0, ymmword ptr [r12 + rax - 96]
	vmovups	ymm6, ymmword ptr [r12 + rax - 64]
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqa	ymm0, ymm1
	add	r13, 3
	vmovups	ymmword ptr [r12 + rax + 64], ymm6
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [r12 + rax + 128], ymm6
.LBB0_928:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovups	ymmword ptr [r12 + rcx], ymm6
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_85] # xmm6 = [3069,0,0,0]
	mov	ecx, 8680
.LBB0_929:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	jmp	.LBB0_934
.LBB0_930:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, rcx
	xor	rdi, 10244
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	r11, r15
	je	.LBB0_1044
# %bb.931:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 10259
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.932:                              # %OP4875.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovups	ymm1, ymmword ptr [r12 + rax - 128]
	vmovups	ymmword ptr [rbp - 224], ymm1   # 32-byte Spill
	vmovups	ymm6, ymmword ptr [r12 + rax - 96]
	vmovdqa	ymm1, ymm0
	vmovaps	ymm0, ymm2
	vmovups	ymm2, ymmword ptr [r12 + rax - 32]
	vmovups	ymmword ptr [r12 + rax - 64], ymm2
	vmovaps	ymm2, ymm0
	vmovdqa	ymm0, ymm1
	vmovaps	xmmword ptr [r12 + rax - 16], xmm9
	vmovaps	xmmword ptr [r12 + rax - 32], xmm9
	vmovaps	xmm1, xmmword ptr [rip + .LCPI0_36] # xmm1 = [10296,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm1
	vmovups	ymmword ptr [r12 + rax + 32], ymm6
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_37] # xmm6 = [10284,0,0,0]
	vmovups	ymmword ptr [r12 + rax + 64], ymm6
	vmovaps	ymm6, ymm10
	vmovups	ymm10, ymmword ptr [rbp - 224]  # 32-byte Reload
	vmovups	ymmword ptr [r12 + rax + 96], ymm10
	vmovaps	ymm10, ymm6
	add	r13, 5
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_38] # xmm6 = [5,0]
	vmovups	ymmword ptr [r12 + rax + 128], ymm6
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [r12 + rax + 192], ymm6
	vmovups	ymmword ptr [r12 + rcx], ymm6
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_85] # xmm6 = [3069,0,0,0]
	mov	ecx, 8680
.LBB0_933:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
.LBB0_934:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_724
.LBB0_935:                              # %OP4841.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, r11
	mov	rax, r13
	shl	rax, 5
	vmovups	ymm0, ymmword ptr [r12 + rax - 96]
	vmovups	ymm1, ymmword ptr [r12 + rax - 32]
	vmovups	ymmword ptr [r12 + rax - 64], ymm1
	vmovaps	xmmword ptr [r12 + rax - 16], xmm9
	vmovaps	xmmword ptr [r12 + rax - 32], xmm9
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_42] # xmm1 = [10213,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm1
	add	r13, 2
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
.LBB0_936:                              # %OP4943.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rdi, [r13 + 1]
	mov	r9, r13
	shl	r9, 5
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [r12 + r9], ymm1
	add	r13, 2
	mov	rax, rdi
	shl	rax, 5
	mov	rcx, qword ptr [r12 + r9 - 8]
	mov	r10, qword ptr [r12 + r9 - 32]
	mov	rdx, qword ptr [r12 + r9 - 24]
	mov	rsi, qword ptr [r12 + r9 - 16]
	mov	r8, r13
	shl	r8, 5
	mov	qword ptr [r12 + r8 + 16], rsi
	mov	qword ptr [r12 + r8], r10
	mov	qword ptr [r12 + r8 + 24], rcx
	mov	qword ptr [r12 + r8 + 8], rdx
	cmp	r10, 4
	mov	r11, rdx
	sbb	r11, 0
	mov	r11, rsi
	sbb	r11, 0
	mov	r11, rcx
	sbb	r11, 0
	setb	r11b
	movzx	r11d, r11b
	mov	qword ptr [r12 + rax], r11
	mov	qword ptr [r12 + rax + 16], 0
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	r11, r15
	jb	.LBB0_1025
# %bb.937:                              # %OP4951.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r9, r12
	add	rax, r12
	add	r8, r12
	mov	qword ptr [r9], r10
	mov	qword ptr [r9 + 16], rsi
	mov	qword ptr [r9 + 8], rdx
	mov	qword ptr [r9 + 24], rcx
	mov	qword ptr [r9 + 96], r10
	mov	qword ptr [r9 + 112], rsi
	mov	qword ptr [r9 + 104], rdx
	mov	qword ptr [r9 + 120], rcx
	mov	rdi, rcx
	shld	rdi, rsi, 63
	shld	rsi, rdx, 63
	shld	rdx, r10, 63
	shr	rcx
	mov	qword ptr [r8], rdx
	mov	qword ptr [r8 + 16], rdi
	mov	qword ptr [r8 + 24], rcx
	mov	qword ptr [r8 + 8], rsi
	add	rdx, 1
	adc	rsi, 0
	adc	rdi, 0
	adc	rcx, 0
	mov	qword ptr [rax + 16], rdi
	mov	qword ptr [rax], rdx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 24], rcx
.LBB0_938:                              # %OP4958.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	r9d, r9d
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_939
.LBB0_942:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 5678
	or	rcx, r14
	or	rax, rsi
	or	rax, rcx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	jne	.LBB0_1569
# %bb.943:                              #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vpxor	xmm1, xmm1, xmm1
	vmovaps	xmm3, xmmword ptr [rip + .LCPI0_64] # xmm3 = [5773,0,0,0]
	jmp	.LBB0_1065
.LBB0_944:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 8814
	or	rcx, r14
	or	rax, rsi
	or	rax, rcx
	jne	.LBB0_1569
# %bb.945:                              # %OP4296.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r11, r15
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	lea	r9, [r13 + 1]
	mov	r14, r13
	shl	r14, 5
	mov	rax, qword ptr [r12 + r14 - 40]
	mov	rcx, qword ptr [r12 + r14 - 48]
	mov	rdx, qword ptr [r12 + r14 - 64]
	mov	rsi, qword ptr [r12 + r14 - 56]
	mov	rbx, r9
	shl	rbx, 5
	sub	rdx, qword ptr [r12 + r14 - 32]
	sbb	rsi, qword ptr [r12 + r14 - 24]
	mov	qword ptr [r12 + r14], rdx
	mov	qword ptr [r12 + r14 + 8], rsi
	sbb	rcx, qword ptr [r12 + r14 - 16]
	mov	qword ptr [r12 + r14 + 16], rcx
	sbb	rax, qword ptr [r12 + r14 - 8]
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 64], rdx
	mov	qword ptr [r12 + r14 + 72], rsi
	mov	qword ptr [r12 + r14 + 80], rcx
	mov	qword ptr [r12 + r14 + 88], rax
	setae	al
	movzx	eax, al
	vmovups	xmmword ptr [r12 + rbx + 8], xmm9
	mov	qword ptr [r12 + rbx], rax
	mov	qword ptr [r12 + rbx + 24], 0
	jb	.LBB0_1616
# %bb.946:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r13, r9
	mov	rdx, rdi
	mov	rbx, r8
.LBB0_947:                              # %OP1803.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	jmp	.LBB0_1106
.LBB0_948:                              #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1077
.LBB0_949:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r14, r13
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1080
.LBB0_950:                              #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vpxor	xmm1, xmm1, xmm1
	jmp	.LBB0_1067
.LBB0_951:                              # %dynamic_jump_table.OP2787.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rsi, qword ptr [rcx + rax + 24]
	mov	r10, qword ptr [rcx + rax + 16]
	mov	r11, qword ptr [rcx + rax]
	mov	r8, qword ptr [rcx + rax + 8]
.LBB0_952:                              # %OP2787.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rdi, r13
	shl	rdi, 5
	mov	r13, qword ptr [r12 + rdi - 8]
	mov	r15, qword ptr [r12 + rdi - 32]
	mov	r14, qword ptr [r12 + rdi - 24]
	mov	rbx, qword ptr [r12 + rdi - 16]
	mov	rax, r11
	or	rax, r10
	mov	rcx, r8
	or	rcx, rsi
	or	rcx, rax
	sete	cl
	mov	rax, r14
	or	rax, r13
	mov	rdx, r15
	or	rdx, rbx
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, rsi
	lzcnt	rdx, r10
	add	rdx, 64
	test	rsi, rsi
	cmovne	rdx, rcx
	lzcnt	rcx, r8
	lzcnt	r9, r11
	add	r9, 64
	mov	qword ptr [rbp - 152], r8       # 8-byte Spill
	test	r8, r8
	cmovne	r9, rcx
	sub	r9, -128
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	rcx, r10
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	or	rcx, rsi
	cmovne	r9, rdx
	lzcnt	rcx, r13
	lzcnt	rdx, rbx
	add	rdx, 64
	test	r13, r13
	cmovne	rdx, rcx
	lzcnt	rcx, r14
	lzcnt	rsi, r15
	add	rsi, 64
	test	r14, r14
	cmovne	rsi, rcx
	sub	rsi, -128
	mov	rcx, rbx
	or	rcx, r13
	cmovne	rsi, rdx
	sub	r9, rsi
	mov	r10d, 0
	sbb	r10, r10
	mov	r12d, 0
	sbb	r12, r12
	mov	edx, 0
	sbb	rdx, rdx
	mov	ecx, 255
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	cmp	rcx, r9
	mov	ecx, 0
	sbb	rcx, r10
	mov	ecx, 0
	sbb	rcx, r12
	mov	ecx, 0
	sbb	rcx, rdx
	setb	cl
	or	cl, al
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r9d, 0
	cmovne	r13, r9
	mov	qword ptr [rbp - 128], rbx      # 8-byte Spill
	mov	rax, rbx
	cmovne	rax, r9
	mov	qword ptr [rbp - 168], r14      # 8-byte Spill
	mov	rsi, r14
	cmovne	rsi, r9
	mov	rcx, r15
	cmovne	rcx, r9
	mov	r8d, 1894
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB0_1059
# %bb.953:                              # %OP2787.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 184], r15      # 8-byte Spill
	mov	qword ptr [rbp - 176], r11      # 8-byte Spill
	mov	r15, rcx
	mov	r11, rax
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	xor	rax, 255
	or	rax, r12
	mov	rcx, r10
	or	rcx, rdx
	or	rcx, rax
	mov	rax, r11
	mov	rcx, r15
	je	.LBB0_1059
# %bb.954:                              # %udiv-bb126785
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 232], rdi      # 8-byte Spill
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	mov	rax, r9
	add	r9, 1
	adc	r10, 0
	adc	r12, 0
	adc	rdx, 0
	mov	r11, qword ptr [rbp - 184]      # 8-byte Reload
	mov	qword ptr [rbp - 1616], r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 1648], ymm0
	mov	r13, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rbp - 1608], r13
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 1600], r15
	mov	r14, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rbp - 1592], r14
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rbx, rdx
	mov	rdx, qword ptr [rbp + rax - 1600]
	mov	rsi, qword ptr [rbp + rax - 1592]
	shld	rsi, rdx, cl
	mov	qword ptr [rbp - 296], rsi      # 8-byte Spill
	shlx	rsi, rdx, rcx
	mov	edi, ecx
	not	dil
	mov	r8, qword ptr [rbp + rax - 1616]
	mov	rdx, qword ptr [rbp + rax - 1608]
	mov	rax, rdx
	shr	rax
	shld	rdx, r8, cl
	mov	qword ptr [rbp - 248], rdx      # 8-byte Spill
	shrx	rax, rax, rdi
	or	rax, rsi
	mov	qword ptr [rbp - 240], rax      # 8-byte Spill
	mov	rax, r10
	mov	qword ptr [rbp - 304], rbx      # 8-byte Spill
	or	rax, rbx
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	rsi, r9
	or	rsi, r12
	or	rsi, rax
	shlx	rax, r8, rcx
	mov	qword ptr [rbp - 288], rax      # 8-byte Spill
	je	.LBB0_1057
# %bb.955:                              # %udiv-preheader26784
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, r12
	vmovdqu	ymmword ptr [rbp - 1552], ymm0
	mov	qword ptr [rbp - 1584], r11
	mov	qword ptr [rbp - 1576], r13
	mov	qword ptr [rbp - 1568], r15
	mov	qword ptr [rbp - 1560], r14
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	mov	ecx, eax
	and	cl, 7
                                        # kill: def $al killed $al killed $rax
	shr	al, 3
	movzx	eax, al
	mov	rdi, qword ptr [rbp + rax - 1560]
	mov	r9, qword ptr [rbp + rax - 1568]
	mov	r15, r9
	shrd	r15, rdi, cl
	mov	r12, qword ptr [rbp + rax - 1584]
	mov	rax, qword ptr [rbp + rax - 1576]
	shrx	r11, rax, rcx
	shrx	r8, rdi, rcx
	mov	edi, ecx
	not	dil
	add	r9, r9
	shlx	rdi, r9, rdi
	or	rdi, r11
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rax, cl
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 256], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	xor	edx, edx
	xor	eax, eax
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	xor	ebx, ebx
	xor	r11d, r11d
	mov	r14, qword ptr [rbp - 304]      # 8-byte Reload
	mov	r13, qword ptr [rbp - 296]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 240]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 288]      # 8-byte Reload
.LBB0_956:                              # %udiv-do-while26783
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	r8, r15, 1
	shld	r15, rdi, 1
	shld	rdi, r12, 1
	shld	r12, r13, 1
	shld	r13, r10, 1
	or	r13, r11
	shld	r10, rsi, 1
	or	r10, rbx
	shld	rsi, rcx, 1
	or	rsi, rax
	add	rcx, rcx
	or	rcx, rdx
	cmp	qword ptr [rbp - 256], r12      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, rdi
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, r8
	sar	rax, 63
	mov	edx, eax
	and	edx, 1
	mov	r9, rax
	and	r9, qword ptr [rbp - 112]       # 8-byte Folded Reload
	mov	r11, rax
	and	r11, qword ptr [rbp - 144]      # 8-byte Folded Reload
	mov	rbx, rax
	and	rbx, qword ptr [rbp - 152]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 176]      # 8-byte Folded Reload
	sub	r12, rax
	sbb	rdi, rbx
	sbb	r15, r11
	sbb	r8, r9
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	add	r9, -1
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rax, -1
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	adc	r11, -1
	adc	r14, -1
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	or	rax, r14
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	or	r9, r11
	or	r9, rax
	mov	eax, 0
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	mov	r9d, 0
	mov	eax, 0
	mov	ebx, 0
	mov	r11d, 0
	jne	.LBB0_956
	jmp	.LBB0_1058
.LBB0_957:                              # %OP2799.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	rsi, qword ptr [r12 + rax - 64]
	mov	rdi, qword ptr [r12 + rax - 56]
	mov	r15, qword ptr [r12 + rax - 48]
	mov	rbx, qword ptr [r12 + rax - 40]
	mov	qword ptr [r12 + rax + 24], rbx
	mov	qword ptr [r12 + rax + 16], r15
	mov	qword ptr [r12 + rax + 8], rdi
	mov	qword ptr [r12 + rax], rsi
	mov	rax, rdi
	or	rax, rbx
	mov	rcx, rsi
	or	rcx, r15
	or	rcx, rax
	jne	.LBB0_959
	jmp	.LBB0_1599
.LBB0_958:                              # %dynamic_jump_table.OP2804.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rcx + rax + 24]
	mov	r15, qword ptr [rcx + rax + 16]
	mov	rsi, qword ptr [rcx + rax]
	mov	rdi, qword ptr [rcx + rax + 8]
.LBB0_959:                              # %OP2804.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rax, [r13 - 1]
	mov	qword ptr [rbp - 232], rax      # 8-byte Spill
	shl	rax, 5
	mov	r8, qword ptr [r12 + rax + 24]
	mov	r14, qword ptr [r12 + rax]
	mov	r11, qword ptr [r12 + rax + 8]
	mov	qword ptr [rbp - 304], rax      # 8-byte Spill
	mov	r9, qword ptr [r12 + rax + 16]
	mov	rax, rsi
	or	rax, r15
	mov	rcx, rdi
	or	rcx, rbx
	or	rcx, rax
	sete	cl
	mov	rax, r11
	or	rax, r8
	mov	rdx, r14
	or	rdx, r9
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, rbx
	lzcnt	rdx, r15
	add	rdx, 64
	test	rbx, rbx
	cmovne	rdx, rcx
	lzcnt	rcx, rdi
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	lzcnt	r10, rsi
	add	r10, 64
	mov	qword ptr [rbp - 152], rdi      # 8-byte Spill
	test	rdi, rdi
	cmovne	r10, rcx
	sub	r10, -128
	mov	rcx, r15
	mov	qword ptr [rbp - 144], rbx      # 8-byte Spill
	or	rcx, rbx
	cmovne	r10, rdx
	lzcnt	rcx, r8
	lzcnt	rdx, r9
	add	rdx, 64
	test	r8, r8
	cmovne	rdx, rcx
	lzcnt	rcx, r11
	lzcnt	rsi, r14
	add	rsi, 64
	test	r11, r11
	cmovne	rsi, rcx
	sub	rsi, -128
	mov	rcx, r9
	or	rcx, r8
	cmovne	rsi, rdx
	sub	r10, rsi
	mov	edx, 0
	sbb	rdx, rdx
	mov	esi, 0
	sbb	rsi, rsi
	mov	ebx, 0
	sbb	rbx, rbx
	mov	ecx, 255
	cmp	rcx, r10
	mov	ecx, 0
	sbb	rcx, rdx
	mov	ecx, 0
	sbb	rcx, rsi
	mov	ecx, 0
	sbb	rcx, rbx
	setb	cl
	or	cl, al
	mov	qword ptr [rbp - 248], r8       # 8-byte Spill
	mov	eax, 0
	cmovne	r8, rax
	mov	qword ptr [rbp - 240], r9       # 8-byte Spill
	cmovne	r9, rax
	mov	qword ptr [rbp - 288], r11      # 8-byte Spill
	cmovne	r11, rax
	mov	qword ptr [rbp - 296], r14      # 8-byte Spill
	cmovne	r14, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vpxor	xmm1, xmm1, xmm1
	vmovaps	xmm3, xmmword ptr [rip + .LCPI0_64] # xmm3 = [5773,0,0,0]
	jne	.LBB0_1062
# %bb.960:                              # %OP2804.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r10
	xor	rax, 255
	or	rax, rsi
	mov	rcx, rdx
	or	rcx, rbx
	or	rcx, rax
	je	.LBB0_1062
# %bb.961:                              # %udiv-bb126780
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 176], r15      # 8-byte Spill
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rax, r10
	add	r10, 1
	adc	rdx, 0
	adc	rsi, 0
	adc	rbx, 0
	mov	r11, qword ptr [rbp - 296]      # 8-byte Reload
	mov	qword ptr [rbp - 1744], r11
	vmovdqu	ymmword ptr [rbp - 1776], ymm1
	mov	r12, qword ptr [rbp - 288]      # 8-byte Reload
	mov	qword ptr [rbp - 1736], r12
	mov	r15, qword ptr [rbp - 240]      # 8-byte Reload
	mov	qword ptr [rbp - 1728], r15
	mov	r14, r10
	mov	r10, qword ptr [rbp - 248]      # 8-byte Reload
	mov	qword ptr [rbp - 1720], r10
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	r8, rdx
	mov	rdx, qword ptr [rbp + rax - 1728]
	mov	r13, rsi
	mov	rsi, qword ptr [rbp + rax - 1720]
	shld	rsi, rdx, cl
	mov	qword ptr [rbp - 312], rsi      # 8-byte Spill
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 1744]
	mov	r9, qword ptr [rbp + rax - 1736]
	mov	rax, r9
	shr	rax
	shld	r9, rdi, cl
	mov	qword ptr [rbp - 320], r9       # 8-byte Spill
	shrx	r9, rax, rsi
	or	r9, rdx
	mov	qword ptr [rbp - 168], r8       # 8-byte Spill
	mov	rax, r8
	or	rax, rbx
	mov	qword ptr [rbp - 224], r14      # 8-byte Spill
	mov	rdx, r14
	or	rdx, r13
	or	rdx, rax
	shlx	r14, rdi, rcx
	je	.LBB0_1060
# %bb.962:                              # %udiv-preheader26779
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqu	ymmword ptr [rbp - 1680], ymm1
	mov	qword ptr [rbp - 1712], r11
	mov	qword ptr [rbp - 1704], r12
	mov	qword ptr [rbp - 1696], r15
	mov	qword ptr [rbp - 1688], r10
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	mov	ecx, eax
	and	cl, 7
                                        # kill: def $al killed $al killed $rax
	shr	al, 3
	movzx	eax, al
	mov	rdx, qword ptr [rbp + rax - 1688]
	mov	qword ptr [rbp - 128], r13      # 8-byte Spill
	mov	rsi, qword ptr [rbp + rax - 1696]
	mov	r15, rsi
	shrd	r15, rdx, cl
	mov	r12, qword ptr [rbp + rax - 1712]
	mov	rax, qword ptr [rbp + rax - 1704]
	shrx	r10, rax, rcx
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	shrx	r13, rdx, rcx
	mov	edx, ecx
	not	dl
	add	rsi, rsi
	shlx	rdi, rsi, rdx
	or	rdi, r10
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rax, cl
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 256], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	xor	ecx, ecx
	xor	eax, eax
	xor	r10d, r10d
	xor	esi, esi
	mov	rbx, qword ptr [rbp - 168]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 312]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 320]      # 8-byte Reload
.LBB0_963:                              # %udiv-do-while26778
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	r13, r15, 1
	shld	r15, rdi, 1
	shld	rdi, r12, 1
	shld	r12, r8, 1
	shld	r8, r9, 1
	or	r8, rsi
	shld	r9, r11, 1
	or	r9, r10
	shld	r11, r14, 1
	or	r11, rax
	add	r14, r14
	or	r14, rcx
	cmp	qword ptr [rbp - 256], r12      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, rdi
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, r13
	sar	rax, 63
	mov	ecx, eax
	and	ecx, 1
	mov	rdx, rax
	and	rdx, qword ptr [rbp - 144]      # 8-byte Folded Reload
	mov	rsi, rax
	and	rsi, qword ptr [rbp - 176]      # 8-byte Folded Reload
	mov	r10, rax
	and	r10, qword ptr [rbp - 152]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 112]      # 8-byte Folded Reload
	sub	r12, rax
	sbb	rdi, r10
	sbb	r15, rsi
	sbb	r13, rdx
	mov	rdx, qword ptr [rbp - 224]      # 8-byte Reload
	add	rdx, -1
	adc	rbx, -1
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rsi, -1
	mov	r10, qword ptr [rbp - 104]      # 8-byte Reload
	adc	r10, -1
	mov	rax, rbx
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	or	rax, r10
	mov	qword ptr [rbp - 224], rdx      # 8-byte Spill
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	or	rdx, rsi
	or	rdx, rax
	mov	eax, 0
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	mov	edx, 0
	mov	eax, 0
	mov	r10d, 0
	mov	esi, 0
	jne	.LBB0_963
	jmp	.LBB0_1061
.LBB0_964:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	mov	rbx, rcx
.LBB0_965:                              # %OP1803.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_1106
.LBB0_966:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r14, r13
	mov	r8d, 1894
	jmp	.LBB0_1104
.LBB0_967:                              # %OP2353.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [r12 + rax - 320]
	vmovdqa	xmm1, xmmword ptr [r12 + rax - 304]
	vmovaps	xmm2, xmmword ptr [r12 + rax - 32]
	vmovaps	xmm3, xmmword ptr [r12 + rax - 16]
	vmovaps	xmmword ptr [r12 + rax - 304], xmm3
	vmovaps	xmmword ptr [r12 + rax - 320], xmm2
	vmovdqa	xmmword ptr [r12 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r12 + rax - 32], xmm0
	dec	r13
.LBB0_968:                              # %OP2356.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r10, r12
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_77] # xmm0 = [4912,0,0,0]
	lea	r12, [r13 + 1]
	mov	rbx, r13
	shl	rbx, 5
	mov	rax, qword ptr [r10 + rbx - 264]
	mov	rcx, qword ptr [r10 + rbx - 288]
	mov	rsi, qword ptr [r10 + rbx - 280]
	mov	rdx, qword ptr [r10 + rbx - 272]
	mov	r14, r12
	shl	r14, 5
	mov	qword ptr [r10 + r14 + 16], rdx
	mov	qword ptr [r10 + r14], rcx
	mov	qword ptr [r10 + r14 + 24], rax
	mov	qword ptr [r10 + r14 + 8], rsi
	mov	rdi, rsi
	or	rdi, rax
	mov	r8, rcx
	or	r8, rdx
	xor	r9d, r9d
	or	r8, rdi
	setne	r9b
	mov	qword ptr [r10 + rbx], r9
	mov	qword ptr [r10 + rbx + 16], 0
	mov	qword ptr [r10 + rbx + 24], 0
	mov	qword ptr [r10 + rbx + 8], 0
	vpxor	xmm1, xmm1, xmm1
	je	.LBB0_1591
# %bb.969:                              #   in Loop: Header=BB0_724 Depth=1
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB0_1016
.LBB0_970:                              # %dynamic_jump_table.OP2332.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rcx + rax + 24]
	mov	rsi, qword ptr [rcx + rax + 16]
	mov	r9, qword ptr [rcx + rax]
	mov	r8, qword ptr [rcx + rax + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_76] # ymm0 = [0,0,4797,0]
.LBB0_971:                              # %OP2332.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	r11, r13
	shl	r11, 5
	mov	r15, qword ptr [r12 + r11 - 8]
	mov	rbx, qword ptr [r12 + r11 - 32]
	mov	r10, qword ptr [r12 + r11 - 24]
	mov	r14, qword ptr [r12 + r11 - 16]
	mov	rax, r9
	or	rax, rsi
	mov	rcx, r8
	or	rcx, rdi
	or	rcx, rax
	sete	cl
	mov	rax, r10
	or	rax, r15
	mov	rdx, rbx
	or	rdx, r14
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, rdi
	lzcnt	rdx, rsi
	add	rdx, 64
	test	rdi, rdi
	cmovne	rdx, rcx
	lzcnt	rcx, r8
	mov	qword ptr [rbp - 176], r9       # 8-byte Spill
	lzcnt	r9, r9
	add	r9, 64
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	test	r8, r8
	cmovne	r9, rcx
	sub	r9, -128
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	rcx, rsi
	mov	qword ptr [rbp - 152], rdi      # 8-byte Spill
	or	rcx, rdi
	cmovne	r9, rdx
	lzcnt	rcx, r15
	lzcnt	rdx, r14
	add	rdx, 64
	test	r15, r15
	cmovne	rdx, rcx
	lzcnt	rcx, r10
	lzcnt	rsi, rbx
	add	rsi, 64
	test	r10, r10
	cmovne	rsi, rcx
	sub	rsi, -128
	mov	rcx, r14
	or	rcx, r15
	cmovne	rsi, rdx
	sub	r9, rsi
	mov	rsi, r10
	mov	r10d, 0
	sbb	r10, r10
	mov	r13d, 0
	sbb	r13, r13
	mov	edx, 0
	sbb	rdx, rdx
	mov	ecx, 255
	mov	r12, r9
	cmp	rcx, r9
	mov	ecx, 0
	sbb	rcx, r10
	mov	ecx, 0
	sbb	rcx, r13
	mov	ecx, 0
	sbb	rcx, rdx
	setb	cl
	or	cl, al
	mov	qword ptr [rbp - 184], r15      # 8-byte Spill
	mov	rax, r15
	mov	r9d, 0
	cmovne	rax, r9
	mov	qword ptr [rbp - 168], r14      # 8-byte Spill
	cmovne	r14, r9
	mov	r15, rsi
	cmovne	r15, r9
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	mov	rcx, rbx
	cmovne	rcx, r9
	mov	r8d, 1894
	mov	dil, 48
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB0_1053
# %bb.972:                              # %OP2332.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	mov	rsi, r14
	mov	r14, rax
	mov	rax, r12
	xor	rax, 255
	or	rax, r13
	mov	rdi, rcx
	mov	rcx, r10
	or	rcx, rdx
	or	rcx, rax
	mov	rcx, rdi
	mov	dil, 48
	mov	rax, r14
	je	.LBB0_1083
# %bb.973:                              # %udiv-bb126795
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 288], r11      # 8-byte Spill
	mov	r9, r12
	mov	rax, r12
	add	r9, 1
	adc	r10, 0
	adc	r13, 0
	adc	rdx, 0
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rbp - 1360], r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 1392], ymm0
	mov	rcx, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rbp - 1352], rcx
	mov	rbx, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rbp - 1344], rbx
	mov	r15, qword ptr [rbp - 184]      # 8-byte Reload
	mov	qword ptr [rbp - 1336], r15
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdi, rdx
	mov	rdx, qword ptr [rbp + rax - 1344]
	mov	r14, qword ptr [rbp + rax - 1336]
	shld	r14, rdx, cl
	shlx	rsi, rdx, rcx
	mov	rdx, rdi
	mov	edi, ecx
	not	dil
	mov	r8, qword ptr [rbp + rax - 1360]
	mov	r12, qword ptr [rbp + rax - 1352]
	mov	rax, r12
	shr	rax
	shld	r12, r8, cl
	mov	qword ptr [rbp - 248], r12      # 8-byte Spill
	shrx	rax, rax, rdi
	or	rax, rsi
	mov	qword ptr [rbp - 232], rax      # 8-byte Spill
	mov	rax, r10
	or	rax, rdx
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	mov	rsi, r9
	or	rsi, r13
	or	rsi, rax
	shlx	rax, r8, rcx
	mov	qword ptr [rbp - 240], rax      # 8-byte Spill
	je	.LBB0_1081
# %bb.974:                              # %udiv-preheader26794
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqu	ymmword ptr [rbp - 1296], ymm0
	mov	qword ptr [rbp - 1328], r11
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rbp - 1320], rax
	mov	qword ptr [rbp - 1312], rbx
	mov	qword ptr [rbp - 1304], r15
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, eax
	and	cl, 7
                                        # kill: def $al killed $al killed $rax
	shr	al, 3
	movzx	eax, al
	mov	rdi, qword ptr [rbp + rax - 1304]
	mov	r9, qword ptr [rbp + rax - 1312]
	mov	r15, r9
	shrd	r15, rdi, cl
	mov	r12, qword ptr [rbp + rax - 1328]
	mov	rax, qword ptr [rbp + rax - 1320]
	mov	qword ptr [rbp - 104], rdx      # 8-byte Spill
	mov	rdx, r13
	shrx	r11, rax, rcx
	shrx	r8, rdi, rcx
	mov	edi, ecx
	not	dil
	add	r9, r9
	shlx	rdi, r9, rdi
	or	rdi, r11
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rax, cl
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 256], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	eax, eax
	xor	ebx, ebx
	xor	r11d, r11d
	mov	rsi, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r13, qword ptr [rbp - 240]      # 8-byte Reload
.LBB0_975:                              # %udiv-do-while26793
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	r8, r15, 1
	shld	r15, rdi, 1
	shld	rdi, r12, 1
	shld	r12, r14, 1
	shld	r14, rsi, 1
	or	r14, r11
	shld	rsi, rcx, 1
	or	rsi, rbx
	shld	rcx, r13, 1
	or	rcx, rax
	add	r13, r13
	or	r13, qword ptr [rbp - 224]      # 8-byte Folded Reload
	cmp	qword ptr [rbp - 256], r12      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, rdi
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, r8
	sar	rax, 63
	mov	r9d, eax
	and	r9d, 1
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	r9, rax
	and	r9, qword ptr [rbp - 152]       # 8-byte Folded Reload
	mov	r11, rax
	and	r11, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	rbx, rax
	and	rbx, qword ptr [rbp - 144]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 176]      # 8-byte Folded Reload
	sub	r12, rax
	sbb	rdi, rbx
	sbb	r15, r11
	sbb	r8, r9
	mov	r9, qword ptr [rbp - 128]       # 8-byte Reload
	add	r9, -1
	adc	r10, -1
	adc	rdx, -1
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	adc	r11, -1
	mov	rax, r10
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	or	rax, r11
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	or	r9, rdx
	or	r9, rax
	mov	eax, 0
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	mov	r9d, 0
	mov	eax, 0
	mov	ebx, 0
	mov	r11d, 0
	jne	.LBB0_975
	jmp	.LBB0_1082
.LBB0_976:                              # %dynamic_jump_table.OP2349.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r8, qword ptr [rcx + rax + 24]
	mov	r10, qword ptr [rcx + rax + 16]
	mov	rsi, qword ptr [rcx + rax]
	mov	r9, qword ptr [rcx + rax + 8]
	jmp	.LBB0_978
.LBB0_977:                              # %OP2344.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	mov	rsi, qword ptr [r12 + rax - 64]
	mov	r9, qword ptr [r12 + rax - 56]
	mov	r10, qword ptr [r12 + rax - 48]
	mov	r8, qword ptr [r12 + rax - 40]
	mov	qword ptr [r12 + rax + 24], r8
	mov	qword ptr [r12 + rax + 16], r10
	mov	qword ptr [r12 + rax + 8], r9
	mov	qword ptr [r12 + rax], rsi
	mov	rax, r9
	or	rax, r8
	mov	rcx, rsi
	or	rcx, r10
	or	rcx, rax
	je	.LBB0_1599
.LBB0_978:                              # %OP2349.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	lea	rax, [r13 - 1]
	mov	qword ptr [rbp - 232], rax      # 8-byte Spill
	shl	rax, 5
	mov	r15, qword ptr [r12 + rax + 24]
	mov	rbx, qword ptr [r12 + rax]
	mov	r13, qword ptr [r12 + rax + 8]
	mov	r12, qword ptr [r12 + rax + 16]
	mov	rax, rsi
	or	rax, r10
	mov	rcx, r9
	or	rcx, r8
	or	rcx, rax
	sete	al
	mov	rcx, r13
	or	rcx, r15
	mov	rdx, rbx
	or	rdx, r12
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, r8
	lzcnt	rdx, r10
	add	rdx, 64
	test	r8, r8
	cmovne	rdx, rax
	lzcnt	rax, r9
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	lzcnt	rdi, rsi
	add	rdi, 64
	test	r9, r9
	cmovne	rdi, rax
	sub	rdi, -128
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	mov	rax, r10
	or	rax, r8
	cmovne	rdi, rdx
	lzcnt	rax, r15
	lzcnt	rdx, r12
	add	rdx, 64
	test	r15, r15
	cmovne	rdx, rax
	lzcnt	rax, r13
	lzcnt	rsi, rbx
	add	rsi, 64
	test	r13, r13
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r12
	or	rax, r15
	cmovne	rsi, rdx
	sub	rdi, rsi
	mov	r10d, 0
	sbb	r10, r10
	mov	r11d, 0
	sbb	r11, r11
	mov	r14d, 0
	sbb	r14, r14
	mov	eax, 255
	cmp	rax, rdi
	mov	eax, 0
	sbb	rax, r10
	mov	eax, 0
	sbb	rax, r11
	mov	eax, 0
	sbb	rax, r14
	setb	al
	or	al, cl
	mov	rcx, r15
	mov	eax, 0
	cmovne	rcx, rax
	mov	qword ptr [rbp - 176], r12      # 8-byte Spill
	cmovne	r12, rax
	mov	qword ptr [rbp - 144], r13      # 8-byte Spill
	cmovne	r13, rax
	mov	qword ptr [rbp - 224], rbx      # 8-byte Spill
	cmovne	rbx, rax
	mov	rdx, rcx
	jne	.LBB0_1075
# %bb.979:                              # %OP2349.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, rdi
	xor	rax, 255
	or	rax, r11
	mov	rcx, r10
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_1075
# %bb.980:                              # %udiv-bb126790
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, rdi
	add	rdi, 1
	adc	r10, 0
	adc	r11, 0
	adc	r14, 0
	mov	rcx, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rbp - 1488], rcx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 1520], ymm0
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rbp - 1480], rcx
	mov	rbx, qword ptr [rbp - 176]      # 8-byte Reload
	mov	qword ptr [rbp - 1472], rbx
	mov	qword ptr [rbp - 1464], r15
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 1472]
	mov	rsi, qword ptr [rbp + rax - 1464]
	shld	rsi, rdx, cl
	mov	qword ptr [rbp - 248], rsi      # 8-byte Spill
	shlx	rsi, rdx, rcx
	mov	edx, ecx
	not	dl
	mov	r13, rdi
	mov	rdi, qword ptr [rbp + rax - 1488]
	mov	rax, qword ptr [rbp + rax - 1480]
	mov	r12, rax
	shr	r12
	shld	rax, rdi, cl
	mov	qword ptr [rbp - 240], rax      # 8-byte Spill
	shrx	rax, r12, rdx
	or	rax, rsi
	mov	qword ptr [rbp - 288], rax      # 8-byte Spill
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	mov	rax, r10
	mov	qword ptr [rbp - 304], r14      # 8-byte Spill
	or	rax, r14
	mov	qword ptr [rbp - 128], r13      # 8-byte Spill
	mov	rsi, r13
	or	rsi, r11
	or	rsi, rax
	shlx	rax, rdi, rcx
	mov	qword ptr [rbp - 296], rax      # 8-byte Spill
	je	.LBB0_1073
# %bb.981:                              # %udiv-preheader26789
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r10, r11
	vmovdqu	ymmword ptr [rbp - 1424], ymm0
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rbp - 1456], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rbp - 1448], rax
	mov	qword ptr [rbp - 1440], rbx
	mov	qword ptr [rbp - 1432], r15
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, eax
	and	cl, 7
                                        # kill: def $al killed $al killed $rax
	shr	al, 3
	movzx	eax, al
	mov	rsi, qword ptr [rbp + rax - 1432]
	mov	rdi, qword ptr [rbp + rax - 1440]
	mov	r15, rdi
	shrd	r15, rsi, cl
	mov	r12, qword ptr [rbp + rax - 1456]
	mov	rax, qword ptr [rbp + rax - 1448]
	mov	rdx, r9
	shrx	r9, rax, rcx
	mov	r11, r8
	shrx	r8, rsi, rcx
	mov	esi, ecx
	not	sil
	add	rdi, rdi
	shlx	rdi, rdi, rsi
	or	rdi, r9
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rax, cl
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	add	rcx, -1
	mov	qword ptr [rbp - 184], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 168], rdx      # 8-byte Spill
	adc	rdx, -1
	mov	qword ptr [rbp - 256], rdx      # 8-byte Spill
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	adc	rdx, -1
	mov	qword ptr [rbp - 280], rdx      # 8-byte Spill
	mov	qword ptr [rbp - 264], r11      # 8-byte Spill
	adc	r11, -1
	mov	qword ptr [rbp - 272], r11      # 8-byte Spill
	xor	edx, edx
	mov	qword ptr [rbp - 224], rdx      # 8-byte Spill
	xor	esi, esi
	xor	r9d, r9d
	xor	r11d, r11d
	mov	rbx, r10
	mov	r14, qword ptr [rbp - 304]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r13, qword ptr [rbp - 240]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 288]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 296]      # 8-byte Reload
.LBB0_982:                              # %udiv-do-while26788
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	r8, r15, 1
	shld	r15, rdi, 1
	shld	rdi, r12, 1
	shld	r12, rdx, 1
	shld	rdx, r10, 1
	or	rdx, r11
	shld	r10, r13, 1
	or	r10, r9
	shld	r13, rcx, 1
	or	r13, rsi
	add	rcx, rcx
	or	rcx, qword ptr [rbp - 224]      # 8-byte Folded Reload
	cmp	qword ptr [rbp - 184], r12      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 256]      # 8-byte Reload
	sbb	rax, rdi
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, r8
	sar	rax, 63
	mov	esi, eax
	and	esi, 1
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	mov	rsi, rax
	and	rsi, qword ptr [rbp - 264]      # 8-byte Folded Reload
	mov	r9, rax
	and	r9, qword ptr [rbp - 152]       # 8-byte Folded Reload
	mov	r11, rax
	and	r11, qword ptr [rbp - 168]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 112]      # 8-byte Folded Reload
	sub	r12, rax
	sbb	rdi, r11
	sbb	r15, r9
	sbb	r8, rsi
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	add	rsi, -1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	adc	rax, -1
	adc	rbx, -1
	adc	r14, -1
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	or	rax, r14
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	or	rsi, rbx
	or	rsi, rax
	mov	eax, 0
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 176], rax      # 8-byte Spill
	mov	eax, 0
	mov	esi, 0
	mov	r9d, 0
	mov	r11d, 0
	jne	.LBB0_982
	jmp	.LBB0_1074
.LBB0_983:                              # %OP5125.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	mov	r13, r11
	lea	r14, [rax + 1]
	mov	rbx, rax
	shl	rbx, 5
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	lea	rcx, [rax + 2]
	mov	eax, dword ptr [r12 + rbx - 80]
	mov	r8, qword ptr [r12 + rbx - 96]
	mov	r9, qword ptr [r12 + rbx - 88]
	mov	qword ptr [rbp - 128], r14      # 8-byte Spill
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rbx], ymm0
	mov	qword ptr [r12 + r14 + 8], r9
	mov	qword ptr [r12 + r14 + 16], rax
	mov	qword ptr [r12 + r14], r8
	mov	qword ptr [r12 + r14 + 24], 0
	mov	r15, r12
	mov	qword ptr [rbp - 224], rcx      # 8-byte Spill
	mov	r12, rcx
	shl	r12, 5
	mov	qword ptr [r15 + r12 + 24], 0
	mov	qword ptr [r15 + r12 + 8], 0
	mov	qword ptr [r15 + r12 + 16], 0
	mov	qword ptr [r15 + r12], 0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r11
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1653
# %bb.984:                              # %OP5133.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r14, r15
	add	r12, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 1
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1653
# %bb.985:                              # %OP5136.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rbx, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	rdi, r13
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_1109
# %bb.986:                              # %OP5139.SWAP2
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	xmm0, xmmword ptr [rbx - 32]
	vmovdqa	xmm1, xmmword ptr [rbx - 16]
	vmovaps	xmm2, xmmword ptr [rbx]
	vmovaps	xmm3, xmmword ptr [rbx + 16]
	vmovdqa	xmmword ptr [rbx + 16], xmm1
	vmovaps	xmmword ptr [rbx], xmm0
	vmovaps	xmmword ptr [rbx - 16], xmm3
	vmovaps	xmmword ptr [rbx - 32], xmm2
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r13
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1652
# %bb.987:                              # %OP5143.SLOAD
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	rsi, [rbx - 32]
	mov	r13, r15
	mov	rdi, r15
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1652
# %bb.988:                              # %OP5144.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqu	ymm0, ymmword ptr [rbx - 64]
	vmovdqu	ymm1, ymmword ptr [rbx - 32]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_31] # xmm2 = [10754,0,0,0]
	vmovups	ymmword ptr [rbx - 32], ymm2
	vmovdqu	ymmword ptr [rbx], ymm1
	vmovdqu	ymmword ptr [r14], ymm0
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
	vmovups	ymmword ptr [rbx + 96], ymm7
	vmovups	ymmword ptr [r12], ymm7
	mov	ecx, 8814
	mov	rdi, qword ptr [rbp - 224]      # 8-byte Reload
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, r13
	mov	r13, rdi
	jmp	.LBB0_1072
.LBB0_989:                              # %OP5188.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	add	r13, 3
	mov	cl, 48
	bzhi	rcx, qword ptr [r12 + rax - 24], rcx
	mov	rdx, qword ptr [r12 + rax - 32]
	vmovaps	xmmword ptr [r12 + rax + 48], xmm9
	mov	qword ptr [r12 + rax + 32], rdx
	mov	qword ptr [r12 + rax + 40], rcx
	mov	esi, dword ptr [r12 + rax - 40]
	vmovdqa	xmm0, xmmword ptr [r12 + rax - 64]
	mov	rdi, qword ptr [r12 + rax - 48]
	mov	r8, r13
	shl	r8, 5
	mov	qword ptr [r12 + rax + 80], rdi
	vmovdqa	xmmword ptr [r12 + rax + 64], xmm0
	mov	qword ptr [r12 + rax + 88], rsi
	mov	qword ptr [r12 + r8], rdx
	mov	qword ptr [r12 + r8 + 8], rcx
	vmovaps	xmmword ptr [r12 + r8 + 16], xmm9
	or	rdx, rcx
	je	.LBB0_1624
.LBB0_990:                              # %OP5200.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rdi, r13
	shl	rdi, 5
	mov	r13, qword ptr [r12 + rdi - 24]
	mov	r14, qword ptr [r12 + rdi - 8]
	mov	r15, qword ptr [r12 + rdi - 32]
	mov	rax, r12
	mov	r12, qword ptr [r12 + rdi - 16]
	mov	r11, qword ptr [rax + rdi - 40]
	mov	r10, qword ptr [rax + rdi - 64]
	mov	rsi, qword ptr [rax + rdi - 56]
	mov	r8, qword ptr [rax + rdi - 48]
	mov	rax, rsi
	or	rax, r11
	mov	rcx, r10
	or	rcx, r8
	or	rcx, rax
	sete	cl
	mov	rax, r13
	or	rax, r14
	mov	rdx, r15
	or	rdx, r12
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, r11
	lzcnt	rdx, r8
	add	rdx, 64
	test	r11, r11
	cmovne	rdx, rcx
	lzcnt	rcx, rsi
	mov	qword ptr [rbp - 168], r10      # 8-byte Spill
	lzcnt	r10, r10
	add	r10, 64
	mov	qword ptr [rbp - 144], rsi      # 8-byte Spill
	test	rsi, rsi
	cmovne	r10, rcx
	sub	r10, -128
	mov	qword ptr [rbp - 176], r8       # 8-byte Spill
	mov	rcx, r8
	mov	qword ptr [rbp - 184], r11      # 8-byte Spill
	or	rcx, r11
	cmovne	r10, rdx
	lzcnt	rcx, r14
	lzcnt	rdx, r12
	add	rdx, 64
	test	r14, r14
	cmovne	rdx, rcx
	lzcnt	rcx, r15
	add	rcx, 64
	lzcnt	rsi, r13
	test	r13, r13
	cmovne	rcx, rsi
	sub	rcx, -128
	mov	rsi, r12
	or	rsi, r14
	mov	rsi, r10
	cmovne	rcx, rdx
	sub	rsi, rcx
	mov	r10d, 0
	sbb	r10, r10
	mov	r11d, 0
	sbb	r11, r11
	mov	ebx, 0
	sbb	rbx, rbx
	mov	ecx, 255
	cmp	rcx, rsi
	mov	ecx, 0
	sbb	rcx, r10
	mov	ecx, 0
	sbb	rcx, r11
	mov	ecx, 0
	sbb	rcx, rbx
	setb	cl
	or	cl, al
	mov	rax, r14
	cmovne	rax, r9
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	mov	rax, r12
	cmovne	rax, r9
	mov	qword ptr [rbp - 232], rax      # 8-byte Spill
	mov	qword ptr [rbp - 224], r13      # 8-byte Spill
	cmovne	r13, r9
	mov	r8, r15
	cmovne	r8, r9
	jne	.LBB0_1054
# %bb.991:                              # %OP5200.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, rsi
	xor	rax, 255
	or	rax, r11
	mov	rcx, r10
	or	rcx, rbx
	or	rcx, rax
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	je	.LBB0_1087
# %bb.992:                              # %udiv-bb1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 248], rdi      # 8-byte Spill
	mov	rax, rsi
	add	rsi, 1
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	adc	r10, 0
	adc	r11, 0
	adc	rbx, 0
	mov	qword ptr [rbp - 2128], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 2160], ymm0
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	mov	qword ptr [rbp - 2120], r9
	mov	qword ptr [rbp - 2112], r12
	mov	qword ptr [rbp - 2104], r14
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 2112]
	mov	r8, qword ptr [rbp + rax - 2104]
	shld	r8, rdx, cl
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 2128]
	mov	r13, qword ptr [rbp + rax - 2120]
	mov	rax, r13
	shr	rax
	shld	r13, rdi, cl
	shrx	rax, rax, rsi
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	or	rax, rdx
	mov	qword ptr [rbp - 232], rax      # 8-byte Spill
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	mov	qword ptr [rbp - 288], rbx      # 8-byte Spill
	or	r10, rbx
	mov	rdx, rsi
	or	rdx, r11
	or	rdx, r10
	shlx	rax, rdi, rcx
	mov	qword ptr [rbp - 240], rax      # 8-byte Spill
	je	.LBB0_1085
# %bb.993:                              # %udiv-preheader
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r10, r11
	vmovdqu	ymmword ptr [rbp - 2064], ymm0
	mov	qword ptr [rbp - 2096], r15
	mov	qword ptr [rbp - 2088], r9
	mov	qword ptr [rbp - 2080], r12
	mov	qword ptr [rbp - 2072], r14
	mov	ecx, esi
	and	cl, 7
	mov	eax, esi
	shr	al, 3
	movzx	eax, al
	mov	rdx, qword ptr [rbp + rax - 2072]
	mov	rdi, qword ptr [rbp + rax - 2080]
	mov	rsi, rdi
	shrd	rsi, rdx, cl
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	mov	rsi, qword ptr [rbp + rax - 2096]
	mov	r9, qword ptr [rbp + rax - 2088]
	shrx	r11, r9, rcx
	shrx	r14, rdx, rcx
	mov	eax, ecx
	not	al
	add	rdi, rdi
	shlx	rax, rdi, rax
	or	rax, r11
                                        # kill: def $cl killed $cl killed $rcx
	shrd	rsi, r9, cl
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 168]      # 8-byte Reload
	add	rcx, -1
	mov	qword ptr [rbp - 256], rcx      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rcx, -1
	mov	qword ptr [rbp - 280], rcx      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 176]      # 8-byte Reload
	adc	rcx, -1
	mov	qword ptr [rbp - 264], rcx      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 184]      # 8-byte Reload
	adc	rcx, -1
	mov	qword ptr [rbp - 272], rcx      # 8-byte Spill
	xor	ecx, ecx
	xor	edi, edi
	xor	edx, edx
	xor	r11d, r11d
	mov	r12, r10
	mov	r10, qword ptr [rbp - 152]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 288]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 232]      # 8-byte Reload
	mov	r15, qword ptr [rbp - 240]      # 8-byte Reload
.LBB0_994:                              # %udiv-do-while
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	qword ptr [rbp - 152], r12      # 8-byte Spill
	mov	r12, qword ptr [rbp - 104]      # 8-byte Reload
	shld	r14, r12, 1
	mov	qword ptr [rbp - 224], r14      # 8-byte Spill
	shld	r12, rax, 1
	mov	r14, rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	shld	r14, rax, 1
	shld	rax, r8, 1
	shld	r8, rsi, 1
	or	r8, r11
	shld	rsi, r13, 1
	or	rsi, rdx
	shld	r13, r15, 1
	or	r13, rdi
	add	r15, r15
	or	r15, rcx
	cmp	qword ptr [rbp - 256], rax      # 8-byte Folded Reload
	mov	rcx, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rcx, r14
	mov	rcx, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rcx, r12
	mov	rdx, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rdx, qword ptr [rbp - 224]      # 8-byte Folded Reload
	sar	rdx, 63
	mov	ecx, edx
	and	ecx, 1
	mov	rdi, rdx
	and	rdi, qword ptr [rbp - 184]      # 8-byte Folded Reload
	mov	r9, rdx
	and	r9, qword ptr [rbp - 176]       # 8-byte Folded Reload
	mov	r11, rdx
	and	r11, qword ptr [rbp - 144]      # 8-byte Folded Reload
	and	rdx, qword ptr [rbp - 168]      # 8-byte Folded Reload
	sub	rax, rdx
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rax, r14
	mov	r14, qword ptr [rbp - 224]      # 8-byte Reload
	sbb	rax, r11
	sbb	r12, r9
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	mov	r12, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	r14, rdi
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	add	rdi, -1
	adc	r10, -1
	adc	r12, -1
	adc	rbx, -1
	mov	rdx, r10
	or	rdx, rbx
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	or	rdi, r12
	or	rdi, rdx
	mov	edx, 0
	mov	qword ptr [rbp - 224], rdx      # 8-byte Spill
	mov	edx, 0
	mov	qword ptr [rbp - 152], rdx      # 8-byte Spill
	mov	r9d, 0
	mov	edi, 0
	mov	edx, 0
	mov	r11d, 0
	jne	.LBB0_994
	jmp	.LBB0_1086
.LBB0_995:                              # %OP3054.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, r13
	shl	rbx, 5
	mov	rax, qword ptr [r12 + rbx - 64]
	mov	rcx, qword ptr [r12 + rbx - 56]
	or	rcx, qword ptr [r12 + rbx - 40]
	or	rax, qword ptr [r12 + rbx - 48]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vmovups	xmmword ptr [r12 + rbx + 8], xmm9
	mov	qword ptr [r12 + rbx], rdx
	mov	qword ptr [r12 + rbx + 24], 0
	je	.LBB0_785
# %bb.996:                              # %OP3059.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r14, [r13 + 1]
	add	rbx, r12
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r15, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.997:                              # %OP3061.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	shl	r14, 5
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_60] # xmm0 = [6179,0,0,0]
.LBB0_998:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqu	ymmword ptr [rbx], ymm0
	add	r13, 3
	mov	rdi, r13
	shl	rdi, 5
	vxorps	xmm9, xmm9, xmm9
	vmovaps	xmmword ptr [r12 + r14 + 16], xmm9
	mov	r9b, 48
	bzhi	r8, rsi, r9
	mov	qword ptr [r12 + r14 + 8], r8
	mov	qword ptr [r12 + r14], rdx
	shrd	rsi, rcx, 48
	shld	rax, rcx, 16
	bzhi	rax, rax, r9
	mov	qword ptr [rbx + 72], rax
	mov	qword ptr [rbx + 64], rsi
	vmovaps	xmmword ptr [rbx + 80], xmm9
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [rbx + 128], ymm6
	vmovups	ymmword ptr [r12 + rdi], ymm6
	mov	ecx, 8680
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, r15
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_85] # xmm4 = [3069,0,0,0]
	vmovaps	ymm6, ymm4
	vmovaps	xmm5, xmmword ptr [rip + .LCPI0_79] # xmm5 = [1000,0,0,0]
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
	vmovaps	ymm8, ymmword ptr [rip + .LCPI0_46] # ymm8 = [18446744073709551615,18446744073709551615,4294967295,0]
	jmp	.LBB0_1099
.LBB0_785:                              # %OP3079.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, r13
	shl	rbx, 5
	vmovups	ymmword ptr [r12 + rbx], ymm2
	vmovups	ymmword ptr [r12 + rbx + 32], ymm2
	lea	r10, [r13 + 2]
	mov	r15, qword ptr [r11 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	mov	r8, r15
	cmp	rax, 95
	jbe	.LBB0_1110
.LBB0_786:                              # %OP3082.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rbx, r12
	mov	rcx, qword ptr [r15 + 8]
	mov	rsi, r12
	mov	r12, qword ptr [rcx + r14 + 88]
	mov	rdx, qword ptr [rcx + r14 + 80]
	mov	rax, qword ptr [rcx + r14 + 64]
	mov	rcx, qword ptr [rcx + r14 + 72]
	movbe	qword ptr [rbx + 56], rax
	movbe	qword ptr [rbx + 40], rdx
	movbe	qword ptr [rbx + 32], r12
	movbe	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	lea	r9, [r13 + 3]
	mov	rdi, qword ptr [rbx - 336]
	mov	r14, qword ptr [rbx - 352]
	mov	r15, qword ptr [rbx - 344]
	mov	r11, qword ptr [rbx - 328]
	mov	r13, r10
	shl	r13, 5
	mov	qword ptr [rbp - 128], r11      # 8-byte Spill
	mov	qword ptr [rsi + r13 + 24], r11
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	mov	qword ptr [rsi + r13 + 8], r15
	mov	qword ptr [rbp - 224], rdi      # 8-byte Spill
	mov	qword ptr [rsi + r13 + 16], rdi
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	mov	qword ptr [rsi + r13], r14
	mov	r14, r9
	shl	r14, 5
	movbe	qword ptr [rsi + r14 + 8], rdx
	bswap	rdx
	movbe	qword ptr [rsi + r14], r12
	movbe	qword ptr [rsi + r14 + 24], rax
	movbe	qword ptr [rsi + r14 + 16], rcx
	bswap	r12
	mov	rdi, qword ptr [r8 + 16]
	mov	r15, qword ptr [r8 + 48]
	sub	rdi, r15
	mov	rsi, r12
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	neg	rdx
	bswap	rcx
	mov	edx, 0
	sbb	rdx, rcx
	bswap	rax
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r11
	cmp	rsi, rdi
	mov	qword ptr [rbp - 152], r9       # 8-byte Spill
	ja	.LBB0_1665
.LBB0_787:                              # %OP3086.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, rax
	add	r14, rax
	add	r15, qword ptr [r8 + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r12 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r12 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	movbe	qword ptr [r12 + r15 + 8], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r12 + r15], rax
	mov	rax, qword ptr [rbx + 56]
	mov	rcx, qword ptr [rbx + 48]
	mov	rdx, qword ptr [rbx + 40]
	mov	r15, qword ptr [rbx + 32]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r9, qword ptr [rbx - 296]
	mov	rsi, qword ptr [rbx - 320]
	mov	rdi, qword ptr [rbx - 312]
	mov	r8, qword ptr [rbx - 304]
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	qword ptr [r13 + 16], r8
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	mov	qword ptr [r13], rsi
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], r9
	mov	qword ptr [r14], r15
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [rbp - 128], r14      # 8-byte Spill
	mov	qword ptr [r14 + 24], rax
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	r8, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	r8, r12
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r11
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r11
	cmp	rsi, r8
	ja	.LBB0_1661
.LBB0_788:                              # %OP3092.DUP2
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r12, qword ptr [r14 + 8]
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 24], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 16], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 8], rax
	movbe	qword ptr [r15 + r12], r9
	mov	r10, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r15
	mov	r13, qword ptr [rdi + 40]
	mov	r8, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	r8, r12
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r11
	mov	rdi, rdx
	neg	rdi
	mov	edi, 0
	sbb	rdi, r10
	mov	edi, 0
	sbb	rdi, rax
	cmovb	rsi, r11
	mov	qword ptr [rbp - 224], r15      # 8-byte Spill
	cmp	rsi, r8
	ja	.LBB0_1115
.LBB0_789:                              # %OP3093.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r12, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r15 + r12 + 24]
	mov	r9, qword ptr [r15 + r12 + 16]
	mov	r8, qword ptr [r15 + r12]
	mov	rsi, qword ptr [r15 + r12 + 8]
	vmovaps	xmm0, xmmword ptr [rbx - 384]
	mov	r11d, dword ptr [rbx - 368]
	mov	qword ptr [rbx + 16], r11
	vmovaps	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	r14, qword ptr [r11 + 156]
	mov	r13d, dword ptr [r11 + 164]
	bswap	r13
	shrd	r13, r14, 32
	movbe	r11, qword ptr [r11 + 148]
	shrd	r14, r11, 32
	shr	r11, 32
	mov	r15, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 48], r11
	mov	r11, qword ptr [rbx + 40]
	mov	qword ptr [rbx + 40], r14
	mov	r12, qword ptr [rbx + 32]
	mov	qword ptr [rbx + 32], r13
	mov	r14, rcx
	bswap	r14
	mov	r13, qword ptr [rbx + 56]
	mov	qword ptr [rbx + 56], 0
	movabs	rdi, -7155659937235656116
	mov	qword ptr [rbx + 80], rdi
	movabs	rdi, -2536299344834702719
	mov	qword ptr [rbx + 88], rdi
	movabs	rdi, -8532229552425704298
	mov	qword ptr [rbx + 64], rdi
	movabs	rdi, -6618582222021331721
	mov	qword ptr [rbx + 72], rdi
	mov	qword ptr [rbx + 192], r12
	sub	r12, r14
	mov	rdi, r9
	mov	r14, r9
	bswap	r14
	mov	qword ptr [rbx + 200], r11
	sbb	r11, r14
	mov	r14, rsi
	bswap	r14
	mov	qword ptr [rbx + 208], r15
	sbb	r15, r14
	mov	r14, r8
	bswap	r14
	mov	qword ptr [rbx + 216], r13
	sbb	r13, r14
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	mov	qword ptr [rbx + 160], r9
	add	r12, r9
	mov	qword ptr [rbx + 168], rdx
	adc	r11, rdx
	mov	qword ptr [rbx + 176], r10
	adc	r15, r10
	mov	qword ptr [rbx + 184], rax
	adc	r13, rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rax + 16], r15
	mov	qword ptr [rax], r12
	mov	qword ptr [rax + 24], r13
	mov	qword ptr [rax + 8], r11
	movbe	qword ptr [rbx + 144], rsi
	movbe	qword ptr [rbx + 152], r8
	movbe	qword ptr [rbx + 128], rcx
	movbe	qword ptr [rbx + 136], rdi
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_457
# %bb.790:                              # %OP3111.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [rbx - 288], ymm0
	lea	rsi, [rbx - 256]
	vmovups	ymmword ptr [rbx - 256], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovups	ymmword ptr [rbx - 224], ymm0
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	jne	.LBB0_1651
# %bb.791:                              # %OP3125.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	xmm0, xmmword ptr [rbx - 320]
	vmovaps	xmm1, xmmword ptr [rbx - 304]
	vmovaps	xmm2, xmmword ptr [rbx - 384]
	vmovaps	xmm3, xmmword ptr [rbx - 368]
	vmovaps	xmmword ptr [rbx - 368], xmm1
	vmovaps	xmmword ptr [rbx - 384], xmm0
	vmovaps	xmmword ptr [rbx - 304], xmm3
	vmovaps	xmmword ptr [rbx - 320], xmm2
	vmovdqa	xmm0, xmmword ptr [rbx - 352]
	vmovdqa	xmm1, xmmword ptr [rbx - 336]
	mov	rcx, qword ptr [rbx - 416]
	mov	rdx, qword ptr [rbx - 408]
	mov	rsi, qword ptr [rbx - 392]
	mov	rax, qword ptr [rbx - 400]
	vmovdqa	xmmword ptr [rbx - 400], xmm1
	vmovdqa	xmmword ptr [rbx - 416], xmm0
	mov	qword ptr [rbx - 336], rax
	mov	qword ptr [rbx - 328], rsi
	mov	qword ptr [rbx - 352], rcx
	mov	qword ptr [rbx - 344], rdx
	add	r13, -11
	jmp	.LBB0_1008
.LBB0_999:                              # %OP2436.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	dec	r13
	lea	rsi, [r12 + rax]
	add	rsi, -32
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1000:                             #   in Loop: Header=BB0_724 Depth=1
	mov	r11, rbx
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
.LBB0_1001:                             # %OP2439.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, r13
	shl	rbx, 5
	vmovups	ymmword ptr [r12 + rbx], ymm2
	vmovups	ymmword ptr [r12 + rbx + 32], ymm2
	lea	rsi, [r13 + 2]
	mov	r15, qword ptr [r11 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	mov	qword ptr [rbp - 128], r15      # 8-byte Spill
	cmp	rax, 95
	mov	qword ptr [rbp - 176], rsi      # 8-byte Spill
	jbe	.LBB0_1112
.LBB0_1002:                             # %OP2442.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rbx, r12
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [rcx + r14 + 88]
	mov	rdx, qword ptr [rcx + r14 + 80]
	mov	rax, qword ptr [rcx + r14 + 64]
	mov	rcx, qword ptr [rcx + r14 + 72]
	movbe	qword ptr [rbx + 56], rax
	movbe	qword ptr [rbx + 40], rdx
	movbe	qword ptr [rbx + 32], rdi
	movbe	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	lea	r8, [r13 + 3]
	mov	r9, qword ptr [rbx - 112]
	mov	r13, qword ptr [rbx - 128]
	mov	r10, qword ptr [rbx - 120]
	mov	r15, qword ptr [rbx - 104]
	mov	r14, rsi
	shl	r14, 5
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	mov	qword ptr [r12 + r14 + 24], r15
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [r12 + r14 + 8], r10
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	mov	qword ptr [r12 + r14 + 16], r9
	mov	qword ptr [rbp - 152], r13      # 8-byte Spill
	mov	qword ptr [r12 + r14], r13
	mov	qword ptr [rbp - 168], r8       # 8-byte Spill
	shl	r8, 5
	movbe	qword ptr [r12 + r8 + 8], rdx
	bswap	rdx
	movbe	qword ptr [r12 + r8], rdi
	mov	r13, rdi
	movbe	qword ptr [r12 + r8 + 24], rax
	movbe	qword ptr [r12 + r8 + 16], rcx
	bswap	r13
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdi, qword ptr [rsi + 16]
	mov	r15, qword ptr [rsi + 48]
	sub	rdi, r15
	mov	r10, rsi
	mov	rsi, r13
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	neg	rdx
	bswap	rcx
	mov	edx, 0
	sbb	rdx, rcx
	bswap	rax
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r9
	cmp	rsi, rdi
	ja	.LBB0_1659
.LBB0_1003:                             # %OP2446.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r14, r12
	add	r8, r12
	add	r15, qword ptr [r10 + 8]
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 8], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r13 + r15], rax
	mov	rax, qword ptr [rbx + 56]
	mov	rcx, qword ptr [rbx + 48]
	mov	rdx, qword ptr [rbx + 40]
	mov	r15, qword ptr [rbx + 32]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r9, qword ptr [rbx - 72]
	mov	r10, qword ptr [rbx - 96]
	mov	rsi, qword ptr [rbx - 88]
	mov	rdi, qword ptr [rbx - 80]
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14], r10
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r8], r15
	mov	qword ptr [r8 + 8], rdx
	mov	qword ptr [r8 + 16], rcx
	mov	qword ptr [rbp - 224], r8       # 8-byte Spill
	mov	qword ptr [r8 + 24], rax
	mov	r13, qword ptr [r11 + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rdi, r12
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB0_1114
.LBB0_1004:                             # %OP2452.DUP2
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r12, qword ptr [r13 + 8]
	movbe	qword ptr [r15 + r12 + 24], r10
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 16], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 8], rax
	movbe	qword ptr [r15 + r12], r9
	mov	rcx, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], r15
	mov	r13, qword ptr [r11 + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rdi, r12
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r8
	mov	rax, -1
	mov	r8, rdx
	neg	r8
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	sbb	r8, r10
	cmovb	rsi, rax
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	cmp	rsi, rdi
	ja	.LBB0_1117
.LBB0_1005:                             # %OP2453.MLOAD.contd
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r12, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r15 + r12 + 24]
	mov	r8, qword ptr [r15 + r12 + 16]
	mov	r10, qword ptr [r15 + r12]
	mov	r9, qword ptr [r15 + r12 + 8]
	mov	r15, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	rdi, qword ptr [r15 + 156]
	mov	r11d, dword ptr [r15 + 164]
	bswap	r11
	shrd	r11, rdi, 32
	movbe	r15, qword ptr [r15 + 148]
	shrd	rdi, r15, 32
	mov	qword ptr [rbx + 8], rdi
	mov	r13, rsi
	bswap	r13
	shr	r15, 32
	mov	qword ptr [rbx + 16], r15
	mov	qword ptr [rbx], r11
	mov	qword ptr [rbx + 24], 0
	mov	r11, qword ptr [rbx + 40]
	mov	r15, qword ptr [rbx + 56]
	movabs	rdi, 5485555181828264053
	mov	qword ptr [rbx + 56], rdi
	movabs	rdi, 6200893088565325807
	mov	qword ptr [rbx + 40], rdi
	mov	r12, qword ptr [rbx + 48]
	movabs	rdi, -8136910645589465750
	mov	qword ptr [rbx + 48], rdi
	mov	rdi, qword ptr [rbx + 32]
	movabs	rax, 2754319835008736335
	mov	qword ptr [rbx + 32], rax
	mov	qword ptr [rbx + 160], rdi
	sub	rdi, r13
	mov	r13, r8
	bswap	r13
	mov	qword ptr [rbx + 168], r11
	sbb	r11, r13
	mov	r13, r9
	bswap	r13
	mov	qword ptr [rbx + 176], r12
	sbb	r12, r13
	mov	r13, r10
	bswap	r13
	mov	qword ptr [rbx + 184], r15
	sbb	r15, r13
	mov	qword ptr [rbx + 128], rdi
	add	rdi, qword ptr [rbp - 104]      # 8-byte Folded Reload
	mov	qword ptr [rbx + 136], r11
	adc	r11, rdx
	mov	qword ptr [rbx + 144], r12
	adc	r12, rcx
	mov	qword ptr [rbx + 152], r15
	adc	r15, qword ptr [rbp - 128]      # 8-byte Folded Reload
	mov	qword ptr [r14 + 24], r15
	mov	qword ptr [r14 + 8], r11
	mov	qword ptr [r14 + 16], r12
	mov	qword ptr [r14], rdi
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	movbe	qword ptr [rax + 24], r10
	movbe	qword ptr [rax + 8], r8
	movbe	qword ptr [rax + 16], r9
	movbe	qword ptr [rax], rsi
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_457
# %bb.1006:                             # %OP2464.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r14
	lea	rsi, [rbx - 64]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [rbx - 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	jne	.LBB0_630
# %bb.1007:                             # %OP2469.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	xmm0, xmmword ptr [rbx - 128]
	vmovaps	xmm1, xmmword ptr [rbx - 112]
	vmovaps	xmm2, xmmword ptr [rbx - 288]
	vmovaps	xmm3, xmmword ptr [rbx - 272]
	vmovaps	xmmword ptr [rbx - 272], xmm1
	vmovaps	xmmword ptr [rbx - 288], xmm0
	mov	rcx, qword ptr [rbx - 352]
	mov	rdx, qword ptr [rbx - 344]
	mov	rsi, qword ptr [rbx - 328]
	mov	rax, qword ptr [rbx - 336]
	vmovaps	xmmword ptr [rbx - 336], xmm3
	vmovaps	xmmword ptr [rbx - 352], xmm2
	vmovdqa	xmm0, xmmword ptr [rbx - 320]
	vmovdqa	xmm1, xmmword ptr [rbx - 304]
	mov	qword ptr [rbx - 304], rax
	mov	qword ptr [rbx - 296], rsi
	mov	qword ptr [rbx - 320], rcx
	mov	qword ptr [rbx - 312], rdx
	vmovdqa	xmmword ptr [rbx - 112], xmm1
	vmovdqa	xmmword ptr [rbx - 128], xmm0
	add	r13, -10
.LBB0_1008:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r11, r14
	mov	r14, rax
	mov	rax, rdx
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
.LBB0_1009:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1097
.LBB0_1010:                             # %OP1590.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovups	ymmword ptr [r12 + rax], ymm6
	vmovups	ymm0, ymmword ptr [r12 + rax - 224]
	vmovups	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	add	r13, 3
	vmovups	ymmword ptr [r12 + rax + 64], ymm5
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [r12 + rax + 128], ymm6
	vmovups	ymmword ptr [r12 + rcx], ymm6
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_85] # xmm6 = [3069,0,0,0]
	mov	ecx, 8680
.LBB0_1011:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_724
.LBB0_1012:                             # %OP1604.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovups	ymm6, ymmword ptr [r12 + rax - 96]
	vmovdqa	ymm0, ymm1
	vmovups	ymm1, ymmword ptr [r12 + rax - 32]
	vmovups	ymmword ptr [r12 + rax - 64], ymm1
	vmovdqa	ymm1, ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	vmovaps	xmmword ptr [r12 + rax - 16], xmm9
	vmovaps	xmmword ptr [r12 + rax - 32], xmm9
	vmovups	ymmword ptr [r12 + rax], ymm10
	vmovups	ymmword ptr [r12 + rax + 32], ymm11
	vmovups	ymmword ptr [r12 + rax + 64], ymm6
	add	r13, 4
	vmovups	ymmword ptr [r12 + rax + 96], ymm12
	mov	rcx, r13
	shl	rcx, 5
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [r12 + rax + 160], ymm6
	vmovups	ymmword ptr [r12 + rcx], ymm6
	jmp	.LBB0_1014
.LBB0_1013:                             # %OP1633.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm1, xmmword ptr [r12 + rax - 64]
	vmovaps	xmmword ptr [rbp - 128], xmm1   # 16-byte Spill
	vmovaps	xmm1, xmmword ptr [r12 + rax - 48]
	vmovaps	xmmword ptr [rbp - 224], xmm1   # 16-byte Spill
	vmovaps	xmm2, xmmword ptr [r12 + rax - 32]
	vmovdqa	ymm1, ymm0
	vmovaps	ymm0, ymm3
	vmovaps	xmm3, xmmword ptr [r12 + rax - 16]
	vmovaps	xmmword ptr [r12 + rax - 48], xmm3
	vmovaps	ymm3, ymm0
	vmovdqa	ymm0, ymm1
	vmovaps	xmmword ptr [r12 + rax - 64], xmm2
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovaps	xmm6, xmmword ptr [rbp - 224]   # 16-byte Reload
	vmovaps	xmmword ptr [r12 + rax - 16], xmm6
	vmovaps	xmm6, xmmword ptr [rbp - 128]   # 16-byte Reload
	vmovaps	xmmword ptr [r12 + rax - 32], xmm6
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [r12 + rax + 32], ymm6
	vmovups	ymmword ptr [r12 + rax], ymm6
.LBB0_1014:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_85] # xmm6 = [3069,0,0,0]
	mov	ecx, 8680
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_724
.LBB0_1015:                             # %dynamic_jump_table.OP2400.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, r13
	shl	rsi, 5
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rax, qword ptr [rdi + rsi + 24]
	mov	rdx, qword ptr [rdi + rsi + 16]
	mov	rcx, qword ptr [rdi + rsi]
	mov	rsi, qword ptr [rdi + rsi + 8]
	vpxor	xmm1, xmm1, xmm1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_77] # xmm0 = [4912,0,0,0]
.LBB0_1016:                             # %OP2400.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r13
	shl	rdi, 5
	vmovups	ymmword ptr [r12 + rdi], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 + rdi - 320]
	vmovdqu	ymmword ptr [r12 + rdi + 32], ymm0
	add	r13, 3
	mov	qword ptr [r12 + rdi + 72], rsi
	mov	qword ptr [r12 + rdi + 64], rcx
	mov	qword ptr [r12 + rdi + 80], rdx
	mov	qword ptr [r12 + rdi + 88], rax
	jmp	.LBB0_1092
.LBB0_1017:                             # %OP5015.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r14, r13
	shl	r14, 5
	lea	rbx, [r12 + r14]
	vmovups	ymm0, ymmword ptr [r12 + r14 - 32]
	vmovaps	xmmword ptr [r12 + r14 - 16], xmm9
	vmovaps	xmmword ptr [r12 + r14 - 32], xmm9
	vmovups	ymmword ptr [r12 + r14], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r12 + r14 + 32], ymm0
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.1018:                             # %OP5020.PUSH20
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	eax, dword ptr [rbx - 80]
	mov	r8, qword ptr [rbx - 96]
	mov	r9, qword ptr [rbx - 88]
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [rbx - 32]
	mov	rsi, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 16]
	mov	rcx, qword ptr [rbx - 8]
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 40], rsi
	mov	qword ptr [rbx + 32], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1576
# %bb.1019:                             # %OP5025.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [rbx], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx + 32], ymm0
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 1
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1576
# %bb.1020:                             # %OP5028.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r14, r12
	add	r14, -32
	vmovups	ymm0, ymmword ptr [rbx - 32]
	vmovaps	xmm1, xmmword ptr [rip + .LCPI0_0] # xmm1 = [64,0,0,0]
	vmovups	ymmword ptr [rbx - 32], ymm1
	vmovups	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.1021:                             # %OP5031.SLOAD
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.1022:                             # %OP5032.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovups	ymm0, ymmword ptr [rbx - 64]
	vmovdqu	ymm1, ymmword ptr [rbx - 32]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_33] # xmm2 = [10517,0,0,0]
	vmovups	ymmword ptr [rbx - 32], ymm2
	vmovdqu	ymmword ptr [rbx], ymm1
	add	r13, 2
	vmovups	ymmword ptr [rbx + 32], ymm0
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_34] # xmm0 = [10940,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	jmp	.LBB0_1094
.LBB0_1023:                             #   in Loop: Header=BB0_724 Depth=1
	vpxor	xmm1, xmm1, xmm1
	jmp	.LBB0_1092
.LBB0_1024:                             #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r13
.LBB0_1025:                             # %OP4993.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, rdi
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax - 64]
	mov	rdx, qword ptr [r12 + rax - 56]
	or	rdx, qword ptr [r12 + rax - 40]
	or	rcx, qword ptr [r12 + rax - 48]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	vmovups	xmmword ptr [r12 + rax + 8], xmm9
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	r9d, 0
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	je	.LBB0_1027
# %bb.1026:                             # %OP4998.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [rax - 32], ymm0
	jmp	.LBB0_1027
.LBB0_1029:                             #   in Loop: Header=BB0_724 Depth=1
	xor	r9d, r9d
	jmp	.LBB0_1030
.LBB0_1035:                             # %OP4894.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rcx, r13
	shl	rcx, 5
	mov	rax, qword ptr [r12 + rcx - 24]
	mov	rdx, qword ptr [r12 + rcx - 8]
	mov	rsi, qword ptr [r12 + rcx - 32]
	mov	rdi, qword ptr [r12 + rcx - 16]
	mov	qword ptr [r12 + rcx - 48], rdi
	mov	qword ptr [r12 + rcx - 64], rsi
	mov	qword ptr [r12 + rcx - 40], rdx
	mov	qword ptr [r12 + rcx - 56], rax
	vmovaps	xmmword ptr [r12 + rcx - 16], xmm9
	vmovaps	xmmword ptr [r12 + rcx - 32], xmm9
	mov	qword ptr [r12 + rcx + 16], rdi
	mov	qword ptr [r12 + rcx], rsi
	mov	qword ptr [r12 + rcx + 24], rdx
	mov	qword ptr [r12 + rcx + 8], rax
	add	r13, 2
	vmovdqu	ymm0, ymmword ptr [r12 + rcx - 96]
	vmovdqu	ymmword ptr [r12 + rcx + 32], ymm0
	mov	rcx, r13
	shl	rcx, 5
	mov	qword ptr [r12 + rcx + 16], rdi
	mov	qword ptr [r12 + rcx + 24], rdx
	mov	qword ptr [r12 + rcx], rsi
	mov	qword ptr [r12 + rcx + 8], rax
	or	rax, rdx
	or	rsi, rdi
	or	rsi, rax
	je	.LBB0_1624
.LBB0_1036:                             #   in Loop: Header=BB0_724 Depth=1
	vpxor	xmm1, xmm1, xmm1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_35] # xmm0 = [10328,0,0,0]
	mov	r10, r13
	shl	r10, 5
	mov	rdx, qword ptr [r12 + r10 - 24]
	mov	qword ptr [rbp - 232], rdx      # 8-byte Spill
	mov	rbx, qword ptr [r12 + r10 - 8]
	mov	r8, qword ptr [r12 + r10 - 32]
	mov	r9, qword ptr [r12 + r10 - 16]
	mov	rsi, qword ptr [r12 + r10 - 40]
	mov	r15, qword ptr [r12 + r10 - 64]
	mov	rdi, qword ptr [r12 + r10 - 56]
	mov	r14, qword ptr [r12 + r10 - 48]
	mov	rax, rdi
	or	rax, rsi
	mov	rcx, r15
	or	rcx, r14
	or	rcx, rax
	sete	cl
	mov	rax, rdx
	or	rax, rbx
	mov	qword ptr [rbp - 248], r8       # 8-byte Spill
	mov	rdx, r8
	or	rdx, r9
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, rsi
	lzcnt	rdx, r14
	add	rdx, 64
	test	rsi, rsi
	cmovne	rdx, rcx
	lzcnt	rcx, rdi
	mov	qword ptr [rbp - 176], r15      # 8-byte Spill
	lzcnt	r15, r15
	add	r15, 64
	mov	qword ptr [rbp - 144], rdi      # 8-byte Spill
	test	rdi, rdi
	cmovne	r15, rcx
	sub	r15, -128
	mov	qword ptr [rbp - 152], r14      # 8-byte Spill
	mov	rcx, r14
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	or	rcx, rsi
	cmovne	r15, rdx
	lzcnt	rcx, rbx
	lzcnt	rdx, r9
	add	rdx, 64
	test	rbx, rbx
	cmovne	rdx, rcx
	lzcnt	rcx, r8
	add	rcx, 64
	mov	r8, qword ptr [rbp - 232]       # 8-byte Reload
	lzcnt	rsi, r8
	test	r8, r8
	cmovne	rcx, rsi
	sub	rcx, -128
	mov	rsi, r9
	or	rsi, rbx
	cmovne	rcx, rdx
	sub	r15, rcx
	mov	edi, 0
	sbb	rdi, rdi
	mov	esi, 0
	sbb	rsi, rsi
	mov	r14d, 0
	sbb	r14, r14
	mov	ecx, 255
	cmp	rcx, r15
	mov	ecx, 0
	sbb	rcx, rdi
	mov	ecx, 0
	sbb	rcx, rsi
	mov	ecx, 0
	sbb	rcx, r14
	setb	cl
	or	cl, al
	mov	qword ptr [rbp - 288], rbx      # 8-byte Spill
	mov	rax, rbx
	mov	ecx, 0
	cmovne	rax, rcx
	mov	qword ptr [rbp - 240], rax      # 8-byte Spill
	mov	qword ptr [rbp - 296], r9       # 8-byte Spill
	mov	rbx, r9
	cmovne	rbx, rcx
	mov	rdx, r8
	cmovne	rdx, rcx
	mov	r9, qword ptr [rbp - 248]       # 8-byte Reload
	cmovne	r9, rcx
	jne	.LBB0_1055
# %bb.1037:                             # %OP4904.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r15
	xor	rax, 255
	or	rax, rsi
	mov	rcx, rdi
	or	rcx, r14
	or	rcx, rax
	mov	r8, qword ptr [rbp - 240]       # 8-byte Reload
	je	.LBB0_1090
# %bb.1038:                             # %udiv-bb126760
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 320], r10      # 8-byte Spill
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rax, r15
	add	r15, 1
	adc	rdi, 0
	adc	rsi, 0
	adc	r14, 0
	mov	rbx, qword ptr [rbp - 248]      # 8-byte Reload
	mov	qword ptr [rbp - 2000], rbx
	vmovdqu	ymmword ptr [rbp - 2032], ymm1
	mov	r11, qword ptr [rbp - 232]      # 8-byte Reload
	mov	qword ptr [rbp - 1992], r11
	mov	r10, qword ptr [rbp - 296]      # 8-byte Reload
	mov	qword ptr [rbp - 1984], r10
	mov	r13, qword ptr [rbp - 288]      # 8-byte Reload
	mov	qword ptr [rbp - 1976], r13
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 1984]
	mov	r8, qword ptr [rbp + rax - 1976]
	shld	r8, rdx, cl
	mov	qword ptr [rbp - 240], r8       # 8-byte Spill
	shlx	rdx, rdx, rcx
	mov	r12, rsi
	mov	rsi, r14
	mov	r14, rdi
	mov	edi, ecx
	not	dil
	mov	r9, qword ptr [rbp + rax - 2000]
	mov	r8, qword ptr [rbp + rax - 1992]
	mov	rax, r8
	shr	rax
	shld	r8, r9, cl
	mov	qword ptr [rbp - 312], r8       # 8-byte Spill
	shrx	r8, rax, rdi
	or	r8, rdx
	mov	rax, r14
	mov	qword ptr [rbp - 168], rsi      # 8-byte Spill
	or	rax, rsi
	mov	rdx, r15
	or	rdx, r12
	or	rdx, rax
	shlx	rax, r9, rcx
	mov	qword ptr [rbp - 304], rax      # 8-byte Spill
	je	.LBB0_1088
# %bb.1039:                             # %udiv-preheader26759
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, r12
	vmovdqu	ymmword ptr [rbp - 1936], ymm1
	mov	qword ptr [rbp - 1968], rbx
	mov	qword ptr [rbp - 1960], r11
	mov	qword ptr [rbp - 1952], r10
	mov	qword ptr [rbp - 1944], r13
	mov	ecx, r15d
	and	cl, 7
	mov	qword ptr [rbp - 128], r15      # 8-byte Spill
	mov	eax, r15d
	shr	al, 3
	movzx	eax, al
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	mov	rdi, qword ptr [rbp + rax - 1944]
	mov	r9, qword ptr [rbp + rax - 1952]
	mov	r15, r9
	shrd	r15, rdi, cl
	mov	r12, qword ptr [rbp + rax - 1968]
	mov	rax, qword ptr [rbp + rax - 1960]
	shrx	r10, rax, rcx
	shrx	r13, rdi, rcx
	mov	edi, ecx
	not	dil
	add	r9, r9
	shlx	rdi, r9, rdi
	or	rdi, r10
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rax, cl
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 256], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	eax, eax
	xor	r10d, r10d
	xor	r11d, r11d
	mov	rcx, qword ptr [rbp - 168]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 240]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 312]      # 8-byte Reload
	mov	r14, qword ptr [rbp - 304]      # 8-byte Reload
.LBB0_1040:                             # %udiv-do-while26758
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	r13, r15, 1
	shld	r15, rdi, 1
	shld	rdi, r12, 1
	shld	r12, rdx, 1
	shld	rdx, r8, 1
	or	rdx, r11
	shld	r8, rbx, 1
	or	r8, r10
	shld	rbx, r14, 1
	or	rbx, rax
	add	r14, r14
	or	r14, qword ptr [rbp - 224]      # 8-byte Folded Reload
	cmp	qword ptr [rbp - 256], r12      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, rdi
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, r13
	sar	rax, 63
	mov	r9d, eax
	and	r9d, 1
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	r9, rax
	and	r9, qword ptr [rbp - 112]       # 8-byte Folded Reload
	mov	r10, rax
	and	r10, qword ptr [rbp - 152]      # 8-byte Folded Reload
	mov	r11, rax
	and	r11, qword ptr [rbp - 144]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 176]      # 8-byte Folded Reload
	sub	r12, rax
	sbb	rdi, r11
	sbb	r15, r10
	sbb	r13, r9
	mov	r9, qword ptr [rbp - 128]       # 8-byte Reload
	add	r9, -1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	adc	rax, -1
	adc	rsi, -1
	adc	rcx, -1
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	or	rax, rcx
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	or	r9, rsi
	or	r9, rax
	mov	eax, 0
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	mov	r9d, 0
	mov	eax, 0
	mov	r10d, 0
	mov	r11d, 0
	jne	.LBB0_1040
	jmp	.LBB0_1089
.LBB0_1041:                             #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r13
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1028
.LBB0_1042:                             #   in Loop: Header=BB0_724 Depth=1
	xor	r9d, r9d
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1043
.LBB0_1044:                             # %OP4867.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r14, [r13 + 1]
	shl	r13, 5
	lea	rbx, [r12 + r13]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.1045:                             # %OP4870.SWAP1
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	xmm0, xmmword ptr [rbx - 32]
	vmovdqa	xmm1, xmmword ptr [rbx - 16]
	vmovaps	xmm2, xmmword ptr [rbx]
	vmovaps	xmm3, xmmword ptr [rbx + 16]
	vmovaps	xmmword ptr [rbx - 16], xmm3
	vmovaps	xmmword ptr [rbx - 32], xmm2
	vmovdqa	xmmword ptr [rbx + 16], xmm1
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_39] # xmm6 = [8680,0]
	vmovups	ymmword ptr [rbx + 64], ymm6
	vmovups	ymmword ptr [r12 + rax], ymm6
	mov	ecx, 8680
	mov	r13, r14
	jmp	.LBB0_1095
.LBB0_1046:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	rcx, 4659
	or	rcx, r14
	or	rax, rsi
	or	rax, rcx
	jne	.LBB0_1569
# %bb.1047:                             # %OP2282.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r15
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.1048:                             # %OP2285.SWAP1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx]
	mov	rax, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	vmovups	ymm0, ymmword ptr [rbx - 32]
	mov	qword ptr [rbx - 16], rdx
	mov	qword ptr [rbx - 8], rax
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [rbx - 24], rsi
	vmovups	ymmword ptr [rbx - 64], ymm0
	mov	rdi, rsi
	or	rdi, rax
	mov	r8, rcx
	or	r8, rdx
	or	r8, rdi
	mov	r11, r15
	mov	r10d, 4755
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_85] # xmm4 = [3069,0,0,0]
	vmovaps	ymm6, ymm4
	vmovaps	xmm5, xmmword ptr [rip + .LCPI0_79] # xmm5 = [1000,0,0,0]
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
	vmovaps	ymm8, ymmword ptr [rip + .LCPI0_46] # ymm8 = [18446744073709551615,18446744073709551615,4294967295,0]
	vxorps	xmm9, xmm9, xmm9
	vmovaps	xmm10, xmmword ptr [rip + .LCPI0_103] # xmm10 = [3105,0,0,0]
	vmovaps	xmm11, xmmword ptr [rip + .LCPI0_104] # xmm11 = [3051,0,0,0]
	vmovaps	xmm12, xmmword ptr [rip + .LCPI0_105] # xmm12 = [3,0,0,0]
	vmovaps	xmm13, xmmword ptr [rip + .LCPI0_100] # xmm13 = [3161,0,0,0]
	vmovaps	xmm14, xmmword ptr [rip + .LCPI0_101] # xmm14 = [1000000,0,0,0]
	vmovaps	xmm15, xmmword ptr [rip + .LCPI0_102] # xmm15 = [3149,0,0,0]
	vmovaps	xmm3, xmmword ptr [rip + .LCPI0_99] # xmm3 = [3177,0,0,0]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_84] # xmm0 = [4700,0,0,0]
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_44] # xmm4 = [4695,0,0,0]
	jne	.LBB0_1051
# %bb.1049:                             # %OP2291.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqu	ymmword ptr [rbx], ymm0
	shl	r14, 5
	vmovups	ymmword ptr [r12 + r14], ymm5
	vmovups	ymmword ptr [rbx + 64], ymm6
	vmovups	ymmword ptr [rbx + 96], ymm4
	vmovups	ymm0, ymmword ptr [rbx - 128]
	vmovups	ymm1, ymmword ptr [rbx - 96]
	vmovups	ymmword ptr [rbx + 128], ymm0
	add	r13, 6
	vmovups	ymmword ptr [rbx + 160], ymm1
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_39] # xmm0 = [8680,0]
	vmovdqu	ymmword ptr [rbx + 224], ymm0
	jmp	.LBB0_1052
.LBB0_1050:                             # %dynamic_jump_table.OP2315.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, r13
	shl	rsi, 5
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rdi + rsi + 24]
	mov	rdx, qword ptr [rdi + rsi + 16]
	mov	rcx, qword ptr [rdi + rsi]
	mov	rsi, qword ptr [rdi + rsi + 8]
	mov	r10d, 4755
.LBB0_1051:                             # %OP2315.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r13
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_82] # xmm0 = [4810,0,0,0]
	vmovups	ymmword ptr [r12 + rdi], ymm0
	mov	r8, qword ptr [r12 + rdi - 256]
	mov	r9b, 48
	bzhi	r9, qword ptr [r12 + rdi - 248], r9
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_83] # ymm0 = [0,0,4756,0]
	vmovups	ymmword ptr [r12 + rdi + 48], ymm0
	mov	qword ptr [r12 + rdi + 40], r9
	mov	qword ptr [r12 + rdi + 32], r8
	vmovaps	xmmword ptr [r12 + rdi + 80], xmm9
	vmovups	ymm0, ymmword ptr [r12 + rdi - 128]
	vmovups	ymmword ptr [r12 + rdi + 96], ymm0
	add	r13, 5
	mov	qword ptr [r12 + rdi + 136], rsi
	mov	qword ptr [r12 + rdi + 128], rcx
	mov	qword ptr [r12 + rdi + 144], rdx
	mov	qword ptr [r12 + rdi + 152], rax
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_39] # xmm0 = [8680,0]
	vmovdqu	ymmword ptr [r12 + rdi + 192], ymm0
.LBB0_1052:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	ecx, 8680
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r8d, 1894
	jmp	.LBB0_1100
.LBB0_1053:                             #   in Loop: Header=BB0_724 Depth=1
	mov	rsi, r14
	jmp	.LBB0_1083
.LBB0_1054:                             #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_1087
.LBB0_1055:                             #   in Loop: Header=BB0_724 Depth=1
	mov	r8, qword ptr [rbp - 240]       # 8-byte Reload
	jmp	.LBB0_1090
.LBB0_1056:                             #   in Loop: Header=BB0_724 Depth=1
	mov	r8d, 1894
	jmp	.LBB0_1103
.LBB0_1057:                             #   in Loop: Header=BB0_724 Depth=1
	xor	edx, edx
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	xor	r9d, r9d
	mov	r13, qword ptr [rbp - 296]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 240]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 288]      # 8-byte Reload
.LBB0_1058:                             # %udiv-loop-exit26782
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	r13, r10, 1
	or	r13, r9
	shld	r10, rsi, 1
	or	r10, qword ptr [rbp - 184]      # 8-byte Folded Reload
	shld	rsi, rcx, 1
	or	rsi, qword ptr [rbp - 168]      # 8-byte Folded Reload
	add	rcx, rcx
	or	rcx, rdx
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	xor	r9d, r9d
	mov	r8d, 1894
	mov	rdi, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rax, r10
.LBB0_1059:                             # %udiv-end26781
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	add	rdi, r12
	mov	qword ptr [rdi - 416], rcx
	mov	qword ptr [rdi - 408], rsi
	mov	qword ptr [rdi - 400], rax
	mov	qword ptr [rdi - 392], r13
	vmovups	ymm0, ymmword ptr [rdi - 192]
	vmovups	ymm1, ymmword ptr [rdi - 160]
	vmovups	ymm2, ymmword ptr [rdi - 96]
	vmovups	ymmword ptr [rdi - 64], ymm2
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_68] # xmm2 = [5652,0,0,0]
	vmovups	ymmword ptr [rdi - 32], ymm2
	vmovups	ymmword ptr [rdi], ymm1
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 2
	vmovups	ymmword ptr [rdi + 32], ymm0
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_39] # xmm0 = [8680,0]
	vmovups	ymmword ptr [rdi + 96], ymm0
	vmovups	ymmword ptr [r12 + rax], ymm0
	mov	ecx, 8680
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r10d, 4755
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	jmp	.LBB0_1084
.LBB0_1060:                             #   in Loop: Header=BB0_724 Depth=1
	xor	ecx, ecx
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	xor	edx, edx
	mov	r8, qword ptr [rbp - 312]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 320]      # 8-byte Reload
.LBB0_1061:                             # %udiv-loop-exit26777
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	r8, r9, 1
	or	r8, rdx
	shld	r9, r11, 1
	or	r9, qword ptr [rbp - 184]       # 8-byte Folded Reload
	shld	r11, r14, 1
	or	r11, qword ptr [rbp - 168]      # 8-byte Folded Reload
	add	r14, r14
	or	r14, rcx
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 176]      # 8-byte Reload
.LBB0_1062:                             # %udiv-end26776
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r10, qword ptr [rbp - 304]      # 8-byte Reload
	add	r10, r12
	shl	r13, 5
	add	r13, r12
	mov	qword ptr [r13 - 384], r14
	mov	qword ptr [r13 - 368], r9
	mov	qword ptr [r13 - 376], r11
	mov	qword ptr [r13 - 360], r8
	mov	rax, qword ptr [r13 - 416]
	mov	rcx, qword ptr [r13 - 408]
	or	rcx, qword ptr [r13 - 392]
	or	rax, qword ptr [r13 - 400]
	xor	edx, edx
	xor	esi, esi
	or	rax, rcx
	sete	dl
	setne	sil
	vmovups	xmmword ptr [r13 - 56], xmm9
	mov	qword ptr [r13 - 64], rsi
	mov	qword ptr [r13 - 40], 0
	mov	qword ptr [r10], rdx
	mov	qword ptr [r10 + 24], 0
	mov	qword ptr [r10 + 8], 0
	mov	qword ptr [r10 + 16], 0
	je	.LBB0_1064
# %bb.1063:                             # %OP2815.POP
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [r10], r14
	mov	qword ptr [r10 + 16], r9
	mov	qword ptr [r10 + 8], r11
	mov	qword ptr [r10 + 24], r8
	mov	rax, qword ptr [rbp - 296]      # 8-byte Reload
	cmp	rax, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 288]      # 8-byte Reload
	sbb	rax, qword ptr [rbp - 152]      # 8-byte Folded Reload
	sbb	qword ptr [rbp - 240], r15      # 8-byte Folded Spill
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	sbb	qword ptr [rbp - 248], rax      # 8-byte Folded Spill
	setae	al
	movzx	eax, al
	mov	qword ptr [r13 - 64], rax
	mov	qword ptr [r13 - 48], 0
	mov	qword ptr [r13 - 40], 0
	mov	qword ptr [r13 - 56], 0
.LBB0_1064:                             # %OP2819.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	mov	rdx, qword ptr [rbp - 232]      # 8-byte Reload
.LBB0_1065:                             # %OP2819.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r13, [rdx - 1]
	mov	r15, r13
	shl	r15, 5
	mov	rax, qword ptr [r12 + r15]
	mov	rcx, qword ptr [r12 + r15 + 8]
	or	rcx, qword ptr [r12 + r15 + 24]
	or	rax, qword ptr [r12 + r15 + 16]
	or	rax, rcx
	je	.LBB0_1584
.LBB0_1066:                             # %OP2860.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, r13
	shl	rax, 5
	vmovups	ymmword ptr [r12 + rax], ymm3
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 144]
	movbe	rdx, qword ptr [rsi + 136]
	bswap	rcx
	shrd	rcx, rdx, 32
	movbe	rsi, qword ptr [rsi + 128]
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	qword ptr [r12 + rax + 40], rdx
	mov	qword ptr [r12 + rax + 48], rsi
	mov	qword ptr [r12 + rax + 32], rcx
	mov	qword ptr [r12 + rax + 56], 0
	add	r13, 3
	mov	rcx, qword ptr [r12 + rax - 96]
	mov	rdx, qword ptr [r12 + rax - 88]
	mov	rsi, qword ptr [r12 + rax - 72]
	mov	rdi, qword ptr [r12 + rax - 80]
	mov	qword ptr [r12 + rax + 80], rdi
	mov	qword ptr [r12 + rax + 88], rsi
	mov	qword ptr [r12 + rax + 64], rcx
	mov	qword ptr [r12 + rax + 72], rdx
.LBB0_1067:                             # %OP5103.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r15, [r13 + 1]
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rbx, r13
	shl	rbx, 5
	mov	ecx, dword ptr [r12 + rbx - 48]
	mov	rdx, qword ptr [r12 + rbx - 64]
	mov	rsi, qword ptr [r12 + rbx - 56]
	mov	qword ptr [rbp - 224], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r12 + rbx], ymm1
	mov	qword ptr [r12 + r15 + 8], rsi
	mov	qword ptr [r12 + r15 + 16], rcx
	mov	qword ptr [r12 + r15], rdx
	mov	qword ptr [r12 + r15 + 24], 0
	vmovdqu	ymmword ptr [r12 + rbx + 64], ymm1
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r14, qword ptr [r13 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	rdi, r12
	mov	r12, qword ptr [r14 + 48]
	sub	rax, r12
	cmp	rax, 31
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_23] # xmm1 = [32,0]
	vmovaps	ymm3, ymmword ptr [rip + .LCPI0_65] # ymm3 = [0,0,0,72057594037927936]
	jbe	.LBB0_1645
.LBB0_1068:                             # %OP5111.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rbx, rdi
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + r12 + 24], rdx
	movbe	qword ptr [rax + r12 + 16], rsi
	movbe	qword ptr [rax + r12 + 8], rcx
	add	r15, rdi
	mov	qword ptr [rax + r12], 0
	vmovdqu	ymmword ptr [r15], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm1
	mov	r14, qword ptr [r13 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rax, r12
	cmp	rax, 63
	jbe	.LBB0_1108
.LBB0_1069:                             # %OP5114.PUSH1
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [r14 + 8]
	vmovups	ymmword ptr [rax + r12 + 32], ymm3
	vmovdqu	ymm0, ymmword ptr [rbx]
	vmovups	ymmword ptr [rbx], ymm2
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, r13
	mov	rsi, rbx
	mov	r14, r13
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB0_1109
# %bb.1070:                             # %OP5117.SLOAD
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB0_1109
# %bb.1071:                             # %OP5118.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r13, 3
	vmovups	ymm0, ymmword ptr [rbx]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_66] # xmm1 = [10696,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	vmovups	ymmword ptr [r15], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx - 32]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
	vmovups	ymmword ptr [rbx + 128], ymm7
	vmovups	ymmword ptr [r12 + rax], ymm7
	mov	ecx, 8814
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
.LBB0_1072:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_85] # xmm4 = [3069,0,0,0]
	vmovaps	ymm6, ymm4
	vmovaps	xmm5, xmmword ptr [rip + .LCPI0_79] # xmm5 = [1000,0,0,0]
	jmp	.LBB0_1098
.LBB0_1073:                             #   in Loop: Header=BB0_724 Depth=1
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 176], rax      # 8-byte Spill
	xor	eax, eax
	mov	rdx, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r13, qword ptr [rbp - 240]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 288]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 296]      # 8-byte Reload
.LBB0_1074:                             # %udiv-loop-exit26787
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	rdx, r10, 1
	or	rdx, rax
	shld	r10, r13, 1
	or	r10, qword ptr [rbp - 176]      # 8-byte Folded Reload
	shld	r13, rcx, 1
	or	r13, qword ptr [rbp - 144]      # 8-byte Folded Reload
	add	rcx, rcx
	or	rcx, qword ptr [rbp - 224]      # 8-byte Folded Reload
	mov	r12, r10
	mov	rbx, rcx
.LBB0_1075:                             # %udiv-end26786
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	shl	rax, 5
	add	rax, qword ptr [rbp - 88]       # 8-byte Folded Reload
	mov	qword ptr [rax], rbx
	mov	qword ptr [rax + 8], r13
	mov	qword ptr [rax + 16], r12
	mov	qword ptr [rax + 24], rdx
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rbp - 232]      # 8-byte Reload
.LBB0_1076:                             # %OP5084.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r13, [r14 + 1]
	mov	r8, r14
	shl	r8, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + r8], ymm0
	add	r14, 2
	mov	rax, qword ptr [r12 + r8 - 8]
	mov	rcx, qword ptr [r12 + r8 - 16]
	mov	rdx, qword ptr [r12 + r8 - 24]
	mov	rdi, qword ptr [r12 + r8 - 32]
	mov	rsi, r13
	shl	rsi, 5
	mov	r9, qword ptr [r12 + r8 - 64]
	mov	r10, qword ptr [r12 + r8 - 56]
	mov	r11, qword ptr [r12 + r8 - 48]
	mov	r8, qword ptr [r12 + r8 - 40]
	mov	rbx, r14
	shl	rbx, 5
	mov	qword ptr [r12 + rbx + 24], r8
	mov	qword ptr [r12 + rbx + 16], r11
	mov	qword ptr [r12 + rbx + 8], r10
	mov	qword ptr [r12 + rbx], r9
	cmp	r9, rdi
	sbb	r10, rdx
	sbb	r11, rcx
	sbb	r8, rax
	setb	r8b
	movzx	r8d, r8b
	vmovups	xmmword ptr [r12 + rsi + 8], xmm9
	mov	qword ptr [r12 + rsi], r8
	mov	qword ptr [r12 + rsi + 24], 0
	mov	r11, r15
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jae	.LBB0_1078
.LBB0_1077:                             # %OP5094.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r14, [r13 + 1]
	shl	r13, 5
	vmovdqu	ymm0, ymmword ptr [r12 + r13 - 96]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	jmp	.LBB0_1079
.LBB0_1078:                             # %OP5091.DUP2
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rsi, r12
	mov	qword ptr [rsi], rdi
	mov	qword ptr [rsi + 8], rdx
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
.LBB0_1079:                             # %OP5096.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
.LBB0_1080:                             # %OP5096.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, r14
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r12 + rdi - 32]
	vmovaps	xmm1, xmmword ptr [r12 + rdi - 16]
	mov	rcx, qword ptr [r12 + rdi - 160]
	mov	rax, qword ptr [r12 + rdi - 152]
	mov	rsi, qword ptr [r12 + rdi - 136]
	mov	r13, r14
	mov	r14, qword ptr [r12 + rdi - 144]
	vmovaps	xmmword ptr [r12 + rdi - 144], xmm1
	vmovaps	xmmword ptr [r12 + rdi - 160], xmm0
	vmovaps	xmm0, xmmword ptr [r12 + rdi - 128]
	vmovaps	xmm1, xmmword ptr [r12 + rdi - 112]
	mov	qword ptr [r12 + rdi - 112], r14
	mov	qword ptr [r12 + rdi - 104], rsi
	mov	qword ptr [r12 + rdi - 128], rcx
	mov	qword ptr [r12 + rdi - 120], rax
	vmovaps	xmmword ptr [r12 + rdi - 16], xmm1
	vmovaps	xmmword ptr [r12 + rdi - 32], xmm0
	add	r13, -4
	jmp	.LBB0_1107
.LBB0_1081:                             #   in Loop: Header=BB0_724 Depth=1
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	xor	r9d, r9d
	mov	rsi, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r13, qword ptr [rbp - 240]      # 8-byte Reload
.LBB0_1082:                             # %udiv-loop-exit26792
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	r14, rsi, 1
	or	r14, r9
	shld	rsi, rcx, 1
	or	rsi, qword ptr [rbp - 184]      # 8-byte Folded Reload
	shld	rcx, r13, 1
	or	rcx, qword ptr [rbp - 168]      # 8-byte Folded Reload
	mov	r15, rcx
	add	r13, r13
	or	r13, qword ptr [rbp - 224]      # 8-byte Folded Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	xor	r9d, r9d
	mov	r8d, 1894
	mov	dil, 48
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_76] # ymm0 = [0,0,4797,0]
	mov	r11, qword ptr [rbp - 288]      # 8-byte Reload
	mov	rax, r14
	mov	rcx, r13
.LBB0_1083:                             # %udiv-end26791
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	add	r11, r12
	mov	qword ptr [r11 - 64], rcx
	mov	qword ptr [r11 - 56], r15
	mov	qword ptr [r11 - 48], rsi
	mov	qword ptr [r11 - 40], rax
	mov	rax, qword ptr [r11 - 320]
	bzhi	rcx, qword ptr [r11 - 312], rdi
	vmovdqu	ymmword ptr [r11 - 16], ymm0
	mov	qword ptr [r11 - 32], rax
	mov	qword ptr [r11 - 24], rcx
	vmovaps	xmmword ptr [r11 + 16], xmm9
	vmovups	ymm0, ymmword ptr [r11 - 192]
	vmovups	ymmword ptr [r11 + 32], ymm0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 3
	vmovups	ymm0, ymmword ptr [r11 - 128]
	vmovups	ymmword ptr [r11 + 64], ymm0
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_39] # xmm0 = [8680,0]
	vmovups	ymmword ptr [r11 + 128], ymm0
	vmovups	ymmword ptr [r12 + rax], ymm0
	mov	ecx, 8680
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r10d, 4755
.LBB0_1084:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB0_724
.LBB0_1085:                             #   in Loop: Header=BB0_724 Depth=1
	xor	ecx, ecx
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	xor	r9d, r9d
	mov	rsi, qword ptr [rbp - 232]      # 8-byte Reload
	mov	r15, qword ptr [rbp - 240]      # 8-byte Reload
.LBB0_1086:                             # %udiv-loop-exit
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	r8, rsi, 1
	or	r8, r9
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	shld	rsi, r13, 1
	or	rsi, qword ptr [rbp - 152]      # 8-byte Folded Reload
	mov	qword ptr [rbp - 232], rsi      # 8-byte Spill
	shld	r13, r15, 1
	or	r13, qword ptr [rbp - 224]      # 8-byte Folded Reload
	add	r15, r15
	or	r15, rcx
	mov	r8, r15
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	xor	r9d, r9d
	mov	rdi, qword ptr [rbp - 248]      # 8-byte Reload
.LBB0_1087:                             # %udiv-end
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	add	rdi, r12
	mov	rcx, qword ptr [rdi - 192]
	mov	rax, qword ptr [rdi - 184]
	mov	rsi, qword ptr [rdi - 168]
	mov	r14, qword ptr [rdi - 176]
	mov	qword ptr [rdi - 192], r8
	mov	qword ptr [rdi - 184], r13
	mov	r8, qword ptr [rbp - 232]       # 8-byte Reload
	mov	qword ptr [rdi - 176], r8
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	mov	qword ptr [rdi - 168], r8
	vmovups	ymm0, ymmword ptr [rdi - 160]
	mov	qword ptr [rdi - 144], r14
	mov	qword ptr [rdi - 136], rsi
	mov	qword ptr [rdi - 160], rcx
	mov	qword ptr [rdi - 152], rax
	vmovups	ymmword ptr [rdi - 64], ymm0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, -5
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r10d, 4755
	mov	r8d, 1894
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	jmp	.LBB0_724
.LBB0_1088:                             #   in Loop: Header=BB0_724 Depth=1
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	xor	r9d, r9d
	mov	rdx, qword ptr [rbp - 240]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 312]      # 8-byte Reload
	mov	r14, qword ptr [rbp - 304]      # 8-byte Reload
.LBB0_1089:                             # %udiv-loop-exit26757
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	rdx, r8, 1
	or	rdx, r9
	shld	r8, rbx, 1
	or	r8, qword ptr [rbp - 184]       # 8-byte Folded Reload
	shld	rbx, r14, 1
	or	rbx, qword ptr [rbp - 168]      # 8-byte Folded Reload
	add	r14, r14
	or	r14, qword ptr [rbp - 224]      # 8-byte Folded Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 320]      # 8-byte Reload
	mov	rax, rdx
	mov	rdx, rbx
	mov	rbx, r8
	mov	r8, rax
	mov	r9, r14
.LBB0_1090:                             # %udiv-end26756
                                        #   in Loop: Header=BB0_724 Depth=1
	add	r10, r12
	lea	rdi, [r13 - 2]
	mov	rax, rdi
	shl	rax, 5
	mov	rcx, qword ptr [rbp - 176]      # 8-byte Reload
	cmp	qword ptr [rbp - 248], rcx      # 8-byte Folded Reload
	mov	rcx, qword ptr [rbp - 232]      # 8-byte Reload
	sbb	rcx, qword ptr [rbp - 144]      # 8-byte Folded Reload
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	qword ptr [rbp - 296], rcx      # 8-byte Folded Spill
	mov	rcx, qword ptr [rbp - 288]      # 8-byte Reload
	sbb	rcx, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	qword ptr [r10 - 96], r9
	mov	qword ptr [r10 - 80], rbx
	mov	qword ptr [r10 - 88], rdx
	mov	qword ptr [r10 - 72], r8
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r12 + rax], rcx
	mov	qword ptr [r12 + rax + 16], 0
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	jb	.LBB0_1565
# %bb.1091:                             # %OP4912.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	add	rax, r12
	vmovdqu	ymmword ptr [rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r10 - 288]
	vmovdqu	ymmword ptr [r10 - 32], ymm0
	inc	r13
	mov	qword ptr [r10 + 16], rbx
	mov	qword ptr [r10], r9
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 24], r8
.LBB0_1092:                             # %OP5005.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vmovdqu	ymmword ptr [r12 + rax], ymm1
	mov	r15, r11
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.1093:                             # %OP5008.PUSH2
                                        #   in Loop: Header=BB0_724 Depth=1
	shl	r14, 5
	vmovups	ymm0, ymmword ptr [rbx]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_80] # xmm1 = [10461,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	vmovups	ymmword ptr [r12 + r14], ymm0
	add	r13, 3
	vmovups	ymm0, ymmword ptr [rbx - 32]
	vmovups	ymmword ptr [rbx + 64], ymm0
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_34] # xmm0 = [10940,0]
	vmovdqu	ymmword ptr [rbx + 128], ymm0
.LBB0_1094:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	ecx, 10940
.LBB0_1095:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	eax, eax
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, r15
.LBB0_1096:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
.LBB0_1097:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_85] # xmm4 = [3069,0,0,0]
	vmovaps	ymm6, ymm4
	vmovaps	xmm5, xmmword ptr [rip + .LCPI0_79] # xmm5 = [1000,0,0,0]
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
.LBB0_1098:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	ymm8, ymmword ptr [rip + .LCPI0_46] # ymm8 = [18446744073709551615,18446744073709551615,4294967295,0]
	vxorps	xmm9, xmm9, xmm9
.LBB0_1099:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovaps	xmm10, xmmword ptr [rip + .LCPI0_103] # xmm10 = [3105,0,0,0]
	vmovaps	xmm11, xmmword ptr [rip + .LCPI0_104] # xmm11 = [3051,0,0,0]
	vmovaps	xmm12, xmmword ptr [rip + .LCPI0_105] # xmm12 = [3,0,0,0]
	vmovaps	xmm13, xmmword ptr [rip + .LCPI0_100] # xmm13 = [3161,0,0,0]
	vmovaps	xmm14, xmmword ptr [rip + .LCPI0_101] # xmm14 = [1000000,0,0,0]
	vmovaps	xmm15, xmmword ptr [rip + .LCPI0_102] # xmm15 = [3149,0,0,0]
	vmovaps	xmm3, xmmword ptr [rip + .LCPI0_99] # xmm3 = [3177,0,0,0]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
.LBB0_1100:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_78] # xmm4 = [4715,0,0,0]
	jmp	.LBB0_724
.LBB0_1101:                             #   in Loop: Header=BB0_724 Depth=1
	xor	ecx, ecx
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	xor	r9d, r9d
	mov	r10, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 240]      # 8-byte Reload
	mov	r14, qword ptr [rbp - 248]      # 8-byte Reload
.LBB0_1102:                             # %udiv-loop-exit26772
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	r10, r11, 1
	or	r10, r9
	shld	r11, rbx, 1
	or	r11, qword ptr [rbp - 184]      # 8-byte Folded Reload
	shld	rbx, r14, 1
	or	rbx, qword ptr [rbp - 168]      # 8-byte Folded Reload
	add	r14, r14
	or	r14, rcx
	mov	r8d, 1894
	mov	rdi, qword ptr [rbp - 288]      # 8-byte Reload
	mov	r15, r14
.LBB0_1103:                             # %udiv-end26771
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	add	rdi, r12
	mov	qword ptr [rdi - 64], r15
	mov	qword ptr [rdi - 56], rbx
	mov	qword ptr [rdi - 48], r11
	mov	qword ptr [rdi - 40], r10
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	add	r14, -2
	xor	r15, qword ptr [rdi - 96]
	xor	r11, qword ptr [rdi - 80]
	or	r11, r15
	xor	rbx, qword ptr [rdi - 88]
	xor	r10, qword ptr [rdi - 72]
	or	r10, rbx
	xor	eax, eax
	or	r10, r11
	sete	al
	vmovups	xmmword ptr [rdi - 88], xmm9
	mov	qword ptr [rdi - 96], rax
	mov	qword ptr [rdi - 72], 0
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
.LBB0_1104:                             # %OP4262.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	lea	r13, [r14 - 1]
	mov	rax, r13
	shl	rax, 5
	mov	rcx, qword ptr [r12 + rax]
	mov	rdx, qword ptr [r12 + rax + 8]
	or	rdx, qword ptr [r12 + rax + 24]
	or	rcx, qword ptr [r12 + rax + 16]
	or	rcx, rdx
	je	.LBB0_1579
# %bb.1105:                             #   in Loop: Header=BB0_724 Depth=1
	mov	r11, r15
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	xor	r9d, r9d
	mov	r10d, 4755
.LBB0_1106:                             # %OP1803.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r13
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r12 + rdi - 32]
	vmovaps	xmm1, xmmword ptr [r12 + rdi - 16]
	mov	rcx, qword ptr [r12 + rdi - 128]
	mov	rax, qword ptr [r12 + rdi - 120]
	mov	rsi, qword ptr [r12 + rdi - 104]
	mov	r14, qword ptr [r12 + rdi - 112]
	vmovaps	xmmword ptr [r12 + rdi - 112], xmm1
	vmovaps	xmmword ptr [r12 + rdi - 128], xmm0
	vmovaps	xmm0, xmmword ptr [r12 + rdi - 96]
	vmovaps	xmm1, xmmword ptr [r12 + rdi - 80]
	mov	qword ptr [r12 + rdi - 80], r14
	mov	qword ptr [r12 + rdi - 72], rsi
	mov	qword ptr [r12 + rdi - 96], rcx
	mov	qword ptr [r12 + rdi - 88], rax
	vmovaps	xmmword ptr [r12 + rdi - 16], xmm1
	vmovaps	xmmword ptr [r12 + rdi - 32], xmm0
	add	r13, -3
	jmp	.LBB0_1107
.LBB0_1645:                             # %resize.i24933
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	esi, 32
	mov	rdi, r13
	mov	qword ptr [rbp - 128], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 104], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	vmovaps	ymm3, ymmword ptr [rip + .LCPI0_65] # ymm3 = [0,0,0,72057594037927936]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_23] # xmm1 = [32,0]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	test	al, al
	je	.LBB0_1068
	jmp	.LBB0_1109
.LBB0_1108:                             # %resize.i24948
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	esi, 64
	mov	rdi, r13
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vmovaps	ymm3, ymmword ptr [rip + .LCPI0_65] # ymm3 = [0,0,0,72057594037927936]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	test	al, al
	je	.LBB0_1069
	jmp	.LBB0_1109
.LBB0_1110:                             # %resize.i24428
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_1664
# %bb.1111:                             # %resize.i24428.OP3082.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 144]      # 8-byte Reload
	jmp	.LBB0_786
.LBB0_1112:                             # %resize.i24321
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	esi, 96
	mov	rdi, r11
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_1660
# %bb.1113:                             # %resize.i24321.OP2442.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rax, qword ptr [r11 + 40]
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 176]      # 8-byte Reload
	jmp	.LBB0_1002
.LBB0_1665:                             # %resize.i24443
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [rbp - 176], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 176]       # 8-byte Reload
	mov	r11, -1
	mov	r10, qword ptr [rbp - 144]      # 8-byte Reload
	test	al, al
	je	.LBB0_787
	jmp	.LBB0_1666
.LBB0_1659:                             # %resize.i24336
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r11
	mov	qword ptr [rbp - 224], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 224]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_1003
	jmp	.LBB0_1660
.LBB0_1661:                             # %resize.i24458
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [rbp - 176], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 176]       # 8-byte Reload
	mov	r11, -1
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_788
	jmp	.LBB0_1662
.LBB0_1114:                             # %resize.i24351
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r11
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 152]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, -1
	mov	rcx, qword ptr [rbp - 176]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB0_1004
	jmp	.LBB0_1662
.LBB0_1115:                             # %resize.i24474
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r14, qword ptr [rbp - 152]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_564
# %bb.1116:                             # %resize.i24474.OP3093.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	qword ptr [rbp - 224], rcx      # 8-byte Spill
	mov	rdx, qword ptr [rbx + 8]
	jmp	.LBB0_789
.LBB0_1117:                             # %resize.i24367
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_1663
# %bb.1118:                             # %resize.i24367.OP2453.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	mov	rcx, qword ptr [rbx + 16]
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	rdx, qword ptr [rbx + 8]
	jmp	.LBB0_1005
.LBB0_939:                              # %OP4958.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdi, r13
	shl	rdi, 5
	mov	rax, qword ptr [r12 + rdi - 32]
	mov	rcx, qword ptr [r12 + rdi - 24]
	mov	rsi, qword ptr [r12 + rdi - 16]
	mov	rdx, qword ptr [r12 + rdi - 8]
	mov	qword ptr [r12 + rdi + 56], rdx
	mov	qword ptr [r12 + rdi + 48], rsi
	mov	qword ptr [r12 + rdi + 40], rcx
	mov	qword ptr [r12 + rdi + 32], rax
	cmp	rax, qword ptr [r12 + rdi - 64]
	mov	r8, rcx
	sbb	r8, qword ptr [r12 + rdi - 56]
	mov	r8, rsi
	sbb	r8, qword ptr [r12 + rdi - 48]
	mov	r8, rdx
	sbb	r8, qword ptr [r12 + rdi - 40]
	setae	r8b
	movzx	r8d, r8b
	vmovups	xmmword ptr [r12 + rdi + 8], xmm9
	mov	qword ptr [r12 + rdi], r8
	mov	qword ptr [r12 + rdi + 24], 0
	jb	.LBB0_940
.LBB0_1043:                             # %OP4989.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	dec	r13
	mov	rdi, r13
.LBB0_1027:                             # %OP5000.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r10d, 4755
.LBB0_1028:                             # %OP5000.JUMPDEST
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r8, rdi
	shl	r8, 5
	vmovaps	xmm0, xmmword ptr [r12 + r8 - 32]
	vmovaps	xmm1, xmmword ptr [r12 + r8 - 16]
	mov	rcx, qword ptr [r12 + r8 - 96]
	mov	rax, qword ptr [r12 + r8 - 88]
	mov	rsi, qword ptr [r12 + r8 - 72]
	mov	r14, qword ptr [r12 + r8 - 80]
	vmovaps	xmmword ptr [r12 + r8 - 80], xmm1
	vmovaps	xmmword ptr [r12 + r8 - 96], xmm0
	vmovaps	xmm0, xmmword ptr [r12 + r8 - 64]
	vmovaps	xmm1, xmmword ptr [r12 + r8 - 48]
	mov	qword ptr [r12 + r8 - 48], r14
	mov	qword ptr [r12 + r8 - 40], rsi
	mov	qword ptr [r12 + r8 - 64], rcx
	mov	qword ptr [r12 + r8 - 56], rax
	vmovaps	xmmword ptr [r12 + r8 - 16], xmm1
	vmovaps	xmmword ptr [r12 + r8 - 32], xmm0
	add	rdi, -2
	mov	r13, rdi
	mov	r8d, 1894
.LBB0_1107:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	jmp	.LBB0_724
.LBB0_940:                              # %OP4965.DUP1
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	ymm1, ymm0
	add	rdi, r12
	mov	qword ptr [rdi - 64], rax
	mov	qword ptr [rdi - 48], rsi
	mov	qword ptr [rdi - 56], rcx
	mov	qword ptr [rdi - 40], rdx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_81] # xmm0 = [2,0,0,0]
	vmovups	ymmword ptr [rdi], ymm0
	mov	qword ptr [rdi + 32], rax
	mov	qword ptr [rdi + 48], rsi
	mov	qword ptr [rdi + 40], rcx
	mov	qword ptr [rdi + 56], rdx
	mov	qword ptr [rdi + 64], rax
	mov	qword ptr [rdi + 80], rsi
	mov	qword ptr [rdi + 72], rcx
	mov	qword ptr [rdi + 88], rdx
	add	r13, 4
	vmovdqu	ymm0, ymmword ptr [rdi - 96]
	vmovdqu	ymmword ptr [rdi + 96], ymm0
	mov	rdi, r13
	shl	rdi, 5
	mov	qword ptr [r12 + rdi + 16], rsi
	mov	qword ptr [r12 + rdi], rax
	mov	qword ptr [r12 + rdi + 24], rdx
	mov	qword ptr [r12 + rdi + 8], rcx
	or	rax, rsi
	or	rcx, rdx
	or	rcx, rax
	je	.LBB0_1624
# %bb.941:                              #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	ymm0, ymm1
.LBB0_1030:                             # %OP4976.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rsi, qword ptr [r12 + rax - 24]
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	mov	r13, qword ptr [r12 + rax - 8]
	mov	r15, qword ptr [r12 + rax - 32]
	mov	r14, qword ptr [r12 + rax - 16]
	mov	r10, qword ptr [r12 + rax - 40]
	mov	r11, qword ptr [r12 + rax - 64]
	mov	rdi, qword ptr [r12 + rax - 56]
	mov	r8, qword ptr [r12 + rax - 48]
	mov	rcx, rdi
	or	rcx, r10
	mov	rdx, r11
	or	rdx, r8
	or	rdx, rcx
	sete	dl
	mov	rcx, rsi
	or	rcx, r13
	mov	rsi, r15
	mov	qword ptr [rbp - 128], r15      # 8-byte Spill
	or	rsi, r14
	or	rsi, rcx
	sete	cl
	or	cl, dl
	mov	byte ptr [rbp - 104], cl        # 1-byte Spill
	lzcnt	rdx, r10
	lzcnt	rsi, r8
	add	rsi, 64
	test	r10, r10
	cmovne	rsi, rdx
	lzcnt	rdx, rdi
	mov	qword ptr [rbp - 176], r11      # 8-byte Spill
	lzcnt	r11, r11
	add	r11, 64
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	test	rdi, rdi
	cmovne	r11, rdx
	sub	r11, -128
	mov	qword ptr [rbp - 152], r8       # 8-byte Spill
	mov	rdx, r8
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	or	rdx, r10
	cmovne	r11, rsi
	lzcnt	rdx, r13
	lzcnt	rsi, r14
	add	rsi, 64
	test	r13, r13
	cmovne	rsi, rdx
	lzcnt	rdx, r15
	add	rdx, 64
	mov	r8, qword ptr [rbp - 224]       # 8-byte Reload
	lzcnt	rdi, r8
	test	r8, r8
	cmovne	rdx, rdi
	sub	rdx, -128
	mov	rdi, r14
	mov	rcx, r14
	or	rdi, r13
	cmovne	rdx, rsi
	sub	r11, rdx
	mov	esi, 0
	sbb	rsi, rsi
	mov	r15d, 0
	sbb	r15, r15
	mov	r14d, 0
	sbb	r14, r14
	mov	edx, 255
	cmp	rdx, r11
	mov	edx, 0
	sbb	rdx, rsi
	mov	edx, 0
	sbb	rdx, r15
	mov	edx, 0
	sbb	rdx, r14
	setb	dl
	or	dl, byte ptr [rbp - 104]        # 1-byte Folded Reload
	lea	rdi, [r12 + rax]
	mov	qword ptr [rbp - 168], r13      # 8-byte Spill
	mov	r10, r13
	cmovne	r10, r9
	mov	qword ptr [rbp - 104], rcx      # 8-byte Spill
	mov	r13, rcx
	cmovne	r13, r9
	cmovne	r8, r9
	mov	r12, qword ptr [rbp - 128]      # 8-byte Reload
	cmovne	r12, r9
	jne	.LBB0_1121
# %bb.1031:                             # %OP4976.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r9, r11
	mov	r11, r15
	mov	rax, r9
	xor	rax, 255
	or	rax, r15
	mov	rcx, rsi
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_1121
# %bb.1032:                             # %udiv-bb126755
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 232], rdi      # 8-byte Spill
	mov	rax, r9
	add	r9, 1
	adc	rsi, 0
	adc	r11, 0
	adc	r14, 0
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 1232], rcx
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rbp - 1264], ymm1
	mov	rcx, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rbp - 1224], rcx
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rbp - 1216], rcx
	mov	r15, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rbp - 1208], r15
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 1216]
	mov	r10, qword ptr [rbp + rax - 1208]
	shld	r10, rdx, cl
	shlx	rdx, rdx, rcx
	mov	rbx, r11
	mov	r11, rsi
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 1232]
	mov	r8, qword ptr [rbp + rax - 1224]
	mov	rax, r8
	shr	rax
	shld	r8, rdi, cl
	shrx	r13, rax, rsi
	mov	rsi, r11
	or	r13, rdx
	mov	rax, r11
	or	rax, r14
	mov	rdx, r9
	or	rdx, rbx
	or	rdx, rax
	shlx	r12, rdi, rcx
	je	.LBB0_1119
# %bb.1033:                             # %udiv-preheader26754
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r11, rbx
	vmovdqu	ymmword ptr [rbp - 1168], ymm1
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 1200], rax
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [rbp - 1192], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rbp - 1184], rax
	mov	qword ptr [rbp - 1176], r15
	mov	ecx, r9d
	and	cl, 7
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	eax, r9d
	shr	al, 3
	movzx	eax, al
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	rsi, qword ptr [rbp + rax - 1176]
	mov	rdi, qword ptr [rbp + rax - 1184]
	mov	r15, rdi
	shrd	r15, rsi, cl
	mov	rdx, qword ptr [rbp + rax - 1200]
	mov	rax, qword ptr [rbp + rax - 1192]
	shrx	r9, rax, rcx
	shrx	rsi, rsi, rcx
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	mov	r11d, ecx
	not	r11b
	add	rdi, rdi
	shlx	rdi, rdi, r11
	or	rdi, r9
                                        # kill: def $cl killed $cl killed $rcx
	shrd	rdx, rax, cl
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 256], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	xor	ecx, ecx
	xor	eax, eax
	xor	r9d, r9d
	xor	ebx, ebx
.LBB0_1034:                             # %udiv-do-while26753
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	rsi, r15, 1
	shld	r15, rdi, 1
	shld	rdi, rdx, 1
	shld	rdx, r10, 1
	shld	r10, r13, 1
	or	r10, rbx
	shld	r13, r8, 1
	or	r13, r9
	shld	r8, r12, 1
	or	r8, rax
	add	r12, r12
	or	r12, rcx
	cmp	qword ptr [rbp - 256], rdx      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, rdi
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, rsi
	sar	rax, 63
	mov	ecx, eax
	and	ecx, 1
	mov	r9, rax
	and	r9, qword ptr [rbp - 144]       # 8-byte Folded Reload
	mov	r11, rax
	and	r11, qword ptr [rbp - 152]      # 8-byte Folded Reload
	mov	rbx, rax
	and	rbx, qword ptr [rbp - 112]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 176]      # 8-byte Folded Reload
	sub	rdx, rax
	sbb	rdi, rbx
	sbb	r15, r11
	sbb	rsi, r9
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	add	r9, -1
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rax, -1
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	adc	r11, -1
	adc	r14, -1
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	or	rax, r14
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	or	r9, r11
	or	r9, rax
	mov	eax, 0
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	mov	r11d, 0
	mov	eax, 0
	mov	r9d, 0
	mov	ebx, 0
	jne	.LBB0_1034
	jmp	.LBB0_1120
.LBB0_1119:                             #   in Loop: Header=BB0_724 Depth=1
	xor	ecx, ecx
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	xor	r11d, r11d
.LBB0_1120:                             # %udiv-loop-exit26752
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	r10, r13, 1
	or	r10, r11
	shld	r13, r8, 1
	or	r13, qword ptr [rbp - 184]      # 8-byte Folded Reload
	shld	r8, r12, 1
	or	r8, qword ptr [rbp - 168]       # 8-byte Folded Reload
	add	r12, r12
	or	r12, rcx
	mov	rdi, qword ptr [rbp - 232]      # 8-byte Reload
.LBB0_1121:                             # %udiv-end26751
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	add	rax, -2
	mov	r9, rax
	shl	rax, 5
	add	qword ptr [rdi - 96], r12
	adc	qword ptr [rdi - 88], r8
	adc	qword ptr [rdi - 80], r13
	adc	qword ptr [rdi - 72], r10
	mov	rcx, qword ptr [rdi - 104]
	mov	rdx, qword ptr [rdi - 128]
	mov	rsi, qword ptr [rdi - 120]
	mov	rdi, qword ptr [rdi - 112]
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + rax + 16], rdi
	mov	qword ptr [r12 + rax], rdx
	mov	qword ptr [r12 + rax + 24], rcx
	mov	qword ptr [r12 + rax + 8], rsi
	or	rsi, rcx
	or	rdx, rdi
	or	rdx, rsi
	je	.LBB0_1578
# %bb.1122:                             #   in Loop: Header=BB0_724 Depth=1
	mov	r13, r9
.LBB0_1123:                             # %OP4983.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	xor	r9d, r9d
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	r15, qword ptr [r12 + rax - 24]
	mov	r13, qword ptr [r12 + rax - 8]
	mov	r11, qword ptr [r12 + rax - 32]
	mov	r14, qword ptr [r12 + rax - 16]
	mov	qword ptr [rbp - 128], r14      # 8-byte Spill
	mov	rbx, qword ptr [r12 + rax - 40]
	mov	r10, qword ptr [r12 + rax - 64]
	mov	rdi, qword ptr [r12 + rax - 56]
	mov	r8, qword ptr [r12 + rax - 48]
	mov	rcx, rdi
	or	rcx, rbx
	mov	rdx, r10
	or	rdx, r8
	or	rdx, rcx
	sete	dl
	mov	rcx, r15
	or	rcx, r13
	mov	rsi, r11
	or	rsi, r14
	mov	r14, rbx
	or	rsi, rcx
	sete	cl
	or	cl, dl
	lzcnt	rdx, rbx
	lzcnt	rsi, r8
	add	rsi, 64
	test	rbx, rbx
	cmovne	rsi, rdx
	lzcnt	rdx, rdi
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	lzcnt	r10, r10
	add	r10, 64
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	test	rdi, rdi
	cmovne	r10, rdx
	sub	r10, -128
	mov	qword ptr [rbp - 152], r8       # 8-byte Spill
	mov	rdx, r8
	or	rdx, rbx
	cmovne	r10, rsi
	lzcnt	rdx, r13
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	lzcnt	rsi, r8
	add	rsi, 64
	test	r13, r13
	cmovne	rsi, rdx
	lzcnt	rdx, r11
	mov	rbx, r11
	add	rdx, 64
	lzcnt	rdi, r15
	test	r15, r15
	cmovne	rdx, rdi
	sub	rdx, -128
	mov	rdi, r8
	or	rdi, r13
	cmovne	rdx, rsi
	mov	rsi, r10
	sub	rsi, rdx
	mov	edi, 0
	sbb	rdi, rdi
	mov	r8d, 0
	sbb	r8, r8
	mov	r11d, 0
	sbb	r11, r11
	mov	edx, 255
	cmp	rdx, rsi
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	mov	edx, 0
	sbb	rdx, r11
	setb	dl
	or	dl, cl
	lea	rdx, [r12 + rax]
	mov	qword ptr [rbp - 168], r13      # 8-byte Spill
	mov	r10, r13
	cmovne	r10, r9
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	cmovne	r13, r9
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	mov	rax, r15
	cmovne	rax, r9
	mov	r12, rbx
	cmovne	r12, r9
	jne	.LBB0_1128
# %bb.1124:                             # %OP4983.JUMPDEST_udiv-special-cases
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r15, rbx
	mov	qword ptr [rbp - 176], r14      # 8-byte Spill
	vmovdqa	ymm1, ymm0
	mov	r14, rax
	mov	rax, rsi
	xor	rax, 255
	or	rax, r8
	mov	rcx, rdi
	or	rcx, r11
	or	rcx, rax
	mov	rax, r14
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	je	.LBB0_1131
# %bb.1125:                             # %udiv-bb126750
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	qword ptr [rbp - 232], rdx      # 8-byte Spill
	mov	rax, rsi
	add	rsi, 1
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	adc	rdi, 0
	adc	r8, 0
	adc	r11, 0
	mov	qword ptr [rbp - 256], r15      # 8-byte Spill
	mov	qword ptr [rbp - 1104], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 1136], ymm0
	mov	r14, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rbp - 1096], r14
	mov	rbx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 1088], rbx
	mov	r15, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rbp - 1080], r15
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 1088]
	mov	rsi, qword ptr [rbp + rax - 1080]
	shld	rsi, rdx, cl
	mov	qword ptr [rbp - 248], rsi      # 8-byte Spill
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	r9, rdi
	mov	rdi, qword ptr [rbp + rax - 1104]
	mov	r10, qword ptr [rbp + rax - 1096]
	mov	rax, r10
	shr	rax
	shld	r10, rdi, cl
	mov	qword ptr [rbp - 240], r10      # 8-byte Spill
	shrx	r13, rax, rsi
	mov	rsi, qword ptr [rbp - 224]      # 8-byte Reload
	or	r13, rdx
	mov	qword ptr [rbp - 184], r9       # 8-byte Spill
	mov	rax, r9
	or	rax, r11
	mov	rdx, rsi
	or	rdx, r8
	or	rdx, rax
	shlx	r12, rdi, rcx
	je	.LBB0_1129
# %bb.1126:                             # %udiv-preheader26749
                                        #   in Loop: Header=BB0_724 Depth=1
	mov	r10, r11
	vmovdqu	ymmword ptr [rbp - 1040], ymm0
	mov	rax, qword ptr [rbp - 256]      # 8-byte Reload
	mov	qword ptr [rbp - 1072], rax
	mov	qword ptr [rbp - 1064], r14
	mov	qword ptr [rbp - 1056], rbx
	mov	qword ptr [rbp - 1048], r15
	mov	ecx, esi
	and	cl, 7
	mov	eax, esi
	shr	al, 3
	movzx	eax, al
	mov	rsi, qword ptr [rbp + rax - 1048]
	mov	rdi, qword ptr [rbp + rax - 1056]
	mov	r15, rdi
	shrd	r15, rsi, cl
	mov	rdx, qword ptr [rbp + rax - 1072]
	mov	rax, qword ptr [rbp + rax - 1064]
	shrx	r9, rax, rcx
	shrx	rsi, rsi, rcx
	mov	r11d, ecx
	not	r11b
	add	rdi, rdi
	shlx	rdi, rdi, r11
	or	rdi, r9
                                        # kill: def $cl killed $cl killed $rcx
	shrd	rdx, rax, cl
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 256], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 280], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 264], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 272], rax      # 8-byte Spill
	xor	ecx, ecx
	xor	eax, eax
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	xor	ebx, ebx
	xor	r11d, r11d
	mov	r14, qword ptr [rbp - 184]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 240]       # 8-byte Reload
.LBB0_1127:                             # %udiv-do-while26748
                                        #   Parent Loop BB0_724 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shld	rsi, r15, 1
	shld	r15, rdi, 1
	shld	rdi, rdx, 1
	shld	rdx, r10, 1
	shld	r10, r13, 1
	or	r10, r11
	shld	r13, r8, 1
	or	r13, rbx
	shld	r8, r12, 1
	or	r8, rax
	add	r12, r12
	or	r12, rcx
	cmp	qword ptr [rbp - 256], rdx      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	sbb	rax, rdi
	mov	rax, qword ptr [rbp - 264]      # 8-byte Reload
	sbb	rax, r15
	mov	rax, qword ptr [rbp - 272]      # 8-byte Reload
	sbb	rax, rsi
	sar	rax, 63
	mov	ecx, eax
	and	ecx, 1
	mov	r9, rax
	and	r9, qword ptr [rbp - 176]       # 8-byte Folded Reload
	mov	r11, rax
	and	r11, qword ptr [rbp - 152]      # 8-byte Folded Reload
	mov	rbx, rax
	and	rbx, qword ptr [rbp - 112]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 144]      # 8-byte Folded Reload
	sub	rdx, rax
	sbb	rdi, rbx
	sbb	r15, r11
	sbb	rsi, r9
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	add	r9, -1
	adc	r14, -1
	mov	r11, qword ptr [rbp - 128]      # 8-byte Reload
	adc	r11, -1
	mov	rbx, qword ptr [rbp - 104]      # 8-byte Reload
	adc	rbx, -1
	mov	rax, r14
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	or	rax, rbx
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	qword ptr [rbp - 128], r11      # 8-byte Spill
	or	r9, r11
	or	r9, rax
	mov	eax, 0
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	eax, 0
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	mov	r9d, 0
	mov	eax, 0
	mov	ebx, 0
	mov	r11d, 0
	jne	.LBB0_1127
	jmp	.LBB0_1130
.LBB0_1128:                             #   in Loop: Header=BB0_724 Depth=1
	vmovdqa	ymm1, ymm0
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1131
.LBB0_1129:                             #   in Loop: Header=BB0_724 Depth=1
	xor	ecx, ecx
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 184], rax      # 8-byte Spill
	xor	r9d, r9d
	mov	r10, qword ptr [rbp - 248]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 240]       # 8-byte Reload
.LBB0_1130:                             # %udiv-loop-exit26747
                                        #   in Loop: Header=BB0_724 Depth=1
	shld	r10, r13, 1
	or	r10, r9
	shld	r13, r8, 1
	or	r13, qword ptr [rbp - 184]      # 8-byte Folded Reload
	shld	r8, r12, 1
	or	r8, qword ptr [rbp - 168]       # 8-byte Folded Reload
	add	r12, r12
	or	r12, rcx
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	xor	r9d, r9d
	mov	rdx, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rax, r8
.LBB0_1131:                             # %udiv-end26746
                                        #   in Loop: Header=BB0_724 Depth=1
	vmovups	ymm0, ymmword ptr [rdx - 96]
	mov	qword ptr [rdx - 96], r12
	mov	qword ptr [rdx - 88], rax
	mov	qword ptr [rdx - 80], r13
	mov	qword ptr [rdx - 72], r10
	vmovups	ymmword ptr [rdx - 64], ymm0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, -2
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqa	ymm0, ymm1
	jmp	.LBB0_939
.LBB0_1132:                             # %OP4927.JUMPDEST
	mov	rsi, r13
	shl	rsi, 5
	mov	rax, qword ptr [r12 + rsi - 32]
	mov	rcx, qword ptr [r12 + rsi - 24]
	or	rcx, qword ptr [r12 + rsi - 8]
	or	rax, qword ptr [r12 + rsi - 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rsi + 8], xmm0
	mov	qword ptr [r12 + rsi], rdx
	mov	qword ptr [r12 + rsi + 24], 0
	je	.LBB0_1135
# %bb.1133:                             # %OP4932.PUSH1
	add	rsi, r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_45] # xmm0 = [11,0,0,0]
	vmovdqu	ymmword ptr [rsi + 32], ymm0
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1576
# %bb.1134:
	mov	r11, rbx
.LBB0_1135:                             # %OP4935.JUMPDEST
	mov	rdi, r13
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r12 + rdi - 96]
	vmovaps	xmm1, xmmword ptr [r12 + rdi - 80]
	mov	rcx, qword ptr [r12 + rdi - 192]
	mov	rax, qword ptr [r12 + rdi - 184]
	mov	rsi, qword ptr [r12 + rdi - 168]
	mov	r14, qword ptr [r12 + rdi - 176]
	vmovaps	xmmword ptr [r12 + rdi - 176], xmm1
	vmovaps	xmmword ptr [r12 + rdi - 192], xmm0
	vmovdqa	xmm0, xmmword ptr [r12 + rdi - 160]
	vmovdqa	xmm1, xmmword ptr [r12 + rdi - 144]
	mov	qword ptr [r12 + rdi - 144], r14
	mov	qword ptr [r12 + rdi - 136], rsi
	mov	qword ptr [r12 + rdi - 160], rcx
	mov	qword ptr [r12 + rdi - 152], rax
	vmovdqa	xmmword ptr [r12 + rdi - 80], xmm1
	vmovdqa	xmmword ptr [r12 + rdi - 96], xmm0
	add	r13, -5
	jmp	.LBB0_1546
.LBB0_1136:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1007
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1142
# %bb.1137:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1340
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1149
# %bb.1138:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1489
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1186
# %bb.1139:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1658
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1191
# %bb.1140:                             # %dynamic_jump_table
	mov	rdx, r14
	mov	r14, r11
	mov	rdi, rcx
	add	rdi, -1490
	mov	r8, rax
	adc	r8, -1
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 38
	cmp	rbx, rdi
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB0_1326
# %bb.1141:                             # %dynamic_jump_table
	lea	rax, [rip + .LJTI0_3]
	movsxd	rcx, dword ptr [rax + 4*rdi]
	add	rcx, rax
	mov	r11, r14
	jmp	rcx
.LBB0_1142:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 642
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1158
# %bb.1143:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 445
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1173
# %bb.1144:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 248
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1212
# %bb.1145:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 357
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1313
# %bb.1146:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 358
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_567
# %bb.1147:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 407
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_568
# %bb.1148:                             # %dynamic_jump_table
	xor	rcx, 441
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_418
	jmp	.LBB0_1569
.LBB0_1149:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1179
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1181
# %bb.1150:                             # %dynamic_jump_table
	mov	rdi, r11
	mov	rdx, r14
	mov	r14, rcx
	add	r14, -1008
	mov	r8, rax
	adc	r8, -1
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 46
	cmp	rbx, r14
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jae	.LBB0_1190
# %bb.1151:                             # %dynamic_jump_table
	mov	r14, rcx
	add	r14, -1113
	mov	r8, rax
	adc	r8, -1
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 38
	cmp	rbx, r14
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB0_1441
# %bb.1152:                             # %dynamic_jump_table
	lea	rax, [rip + .LJTI0_2]
	movsxd	rcx, dword ptr [rax + 4*r14]
	add	rcx, rax
	mov	r11, rdi
	jmp	rcx
.LBB0_1153:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2493
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1169
# %bb.1154:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2238
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1209
# %bb.1155:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2030
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1316
# %bb.1156:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1895
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_669
# %bb.1157:                             # %dynamic_jump_table
	xor	rcx, 1946
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_671
	jmp	.LBB0_1569
.LBB0_1158:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 845
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1177
# %bb.1159:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 725
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1262
# %bb.1160:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 788
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1307
# %bb.1161:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 726
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_90
# %bb.1162:                             # %dynamic_jump_table
	xor	rcx, 734
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_601
	jmp	.LBB0_1569
.LBB0_1163:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 4365
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1216
# %bb.1164:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 4407
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1434
# %bb.1165:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 4408
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_198
# %bb.1166:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 4529
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_1556
# %bb.1167:                             # %dynamic_jump_table
	xor	rcx, 4549
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1168:                             # %OP2228.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_161
.LBB0_1169:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2648
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1202
# %bb.1170:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2606
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1305
# %bb.1171:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2494
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_4
# %bb.1172:                             # %dynamic_jump_table
	xor	rcx, 2499
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_5
	jmp	.LBB0_1569
.LBB0_1173:                             # %dynamic_jump_table
	mov	rdx, r14
	xor	edi, edi
	mov	r8d, 553
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1206
# %bb.1174:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 446
	or	rdi, rdx
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_25
# %bb.1175:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 468
	or	rsi, rdx
	or	rsi, rax
	je	.LBB0_569
# %bb.1176:                             # %dynamic_jump_table
	xor	rcx, 536
	or	rcx, rdx
	or	rcx, rax
	je	.LBB0_28
	jmp	.LBB0_1569
.LBB0_1177:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 914
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1269
# %bb.1178:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 940
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1310
# %bb.1179:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 915
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_108
# %bb.1180:                             # %dynamic_jump_table
	xor	rcx, 923
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_616
	jmp	.LBB0_1569
.LBB0_1181:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1238
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1272
# %bb.1182:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1289
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1323
# %bb.1183:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1239
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_126
# %bb.1184:                             # %dynamic_jump_table
	xor	rcx, 1261
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1185:                             # %OP714.JUMPDEST.loopexit
	mov	r14, r11
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	jmp	.LBB0_127
.LBB0_1186:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1395
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1275
# %bb.1187:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1438
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1298
# %bb.1188:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1396
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_633
# %bb.1189:                             # %dynamic_jump_table
	xor	rcx, 1431
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_102
	jmp	.LBB0_1569
.LBB0_1190:                             # %dynamic_jump_table
	lea	rax, [rip + .LJTI0_1]
	movsxd	rcx, dword ptr [rax + 4*r14]
	add	rcx, rax
	mov	r11, rdi
	jmp	rcx
.LBB0_1191:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1779
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1329
# %bb.1192:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1780
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_36
# %bb.1193:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 1799
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_668
# %bb.1194:                             # %dynamic_jump_table
	xor	rcx, 1884
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_41
	jmp	.LBB0_1569
.LBB0_1195:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 7781
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jge	.LBB0_1331
# %bb.1196:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 7782
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1508
# %bb.1197:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 7901
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_1507
# %bb.1198:                             # %dynamic_jump_table
	xor	rcx, 7921
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_146
	jmp	.LBB0_1569
.LBB0_1199:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 5944
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1300
# %bb.1200:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 5903
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1503
# %bb.1201:                             # %dynamic_jump_table
	xor	rcx, 5923
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_211
	jmp	.LBB0_1569
.LBB0_1202:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2782
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1303
# %bb.1203:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2649
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_229
# %bb.1204:                             # %dynamic_jump_table
	xor	rcx, 2763
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1205:                             # %OP1439.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB0_237
.LBB0_1206:                             # %dynamic_jump_table
	mov	r14, r11
	mov	rdi, rcx
	add	rdi, -588
	mov	r8, rax
	adc	r8, -1
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 21
	cmp	rbx, rdi
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB0_1568
# %bb.1207:                             # %dynamic_jump_table
	lea	rax, [rip + .LJTI0_0]
	movsxd	rcx, dword ptr [rax + 4*rdi]
	add	rcx, rax
	mov	r11, r14
	jmp	rcx
.LBB0_1208:
	mov	al, 1
	jmp	.LBB0_1576
.LBB0_1209:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2272
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1318
# %bb.1210:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2239
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_694
# %bb.1211:                             # %dynamic_jump_table
	xor	rcx, 2256
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_697
	jmp	.LBB0_1569
.LBB0_1212:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 150
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1320
# %bb.1213:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 16
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_550
# %bb.1214:                             # %dynamic_jump_table
	xor	rcx, 113
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1215:                             # %OP59.JUMPDEST.loopexit
	mov	rdx, r13
	shl	rdx, 5
	mov	rsi, qword ptr [r12 + rdx - 8]
	mov	rcx, qword ptr [r12 + rdx - 16]
	mov	rax, qword ptr [r12 + rdx - 32]
	mov	rbx, qword ptr [r12 + rdx - 24]
	jmp	.LBB0_101
.LBB0_1216:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 4227
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1349
# %bb.1217:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 4107
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1523
# %bb.1218:                             # %dynamic_jump_table
	xor	rcx, 4113
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1219:                             # %OP2017.JUMPDEST.loopexit
	mov	r15, r13
	jmp	.LBB0_84
.LBB0_1220:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 4017
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1359
# %bb.1221:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 3878
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1524
# %bb.1222:                             # %dynamic_jump_table
	xor	rcx, 3884
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_117
	jmp	.LBB0_1569
.LBB0_1223:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 6637
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1362
# %bb.1224:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 6366
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_641
# %bb.1225:                             # %dynamic_jump_table
	xor	rcx, 6479
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1226:                             # %OP3200.JUMPDEST.loopexit
	mov	rax, r13
	inc	r13
	lea	rcx, [rax + 2]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
.LBB0_1227:                             # %OP3200.JUMPDEST
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r14, r13
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovups	ymmword ptr [r12 + r14], ymm0
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_457
# %bb.1228:                             # %OP3204.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_71] # xmm0 = [6,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1229:                             # %OP3206.PUSH1
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	add	r14, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_72] # xmm0 = [7,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_693
# %bb.1230:                             # %OP3208.PUSH1
	mov	rdi, r12
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	lea	r12, [r14 + 3]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	shl	rax, 5
	lea	rsi, [r15 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_27] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r15 + rax], ymm0
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1644
# %bb.1231:                             # %OP3210.PUSH1
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	lea	r13, [r14 + 5]
	vmovdqu	ymmword ptr [rbx + 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.1232:                             # %OP3212.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r15 + r14 + 24], rax
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14], 0
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [rbx + 208], rdx
	mov	qword ptr [rbx + 192], rdi
	mov	qword ptr [rbx + 216], rcx
	mov	qword ptr [rbx + 200], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	push	r13
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1233:                             # %OP3216.ADDRESS
	add	r14, r15
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], 0
	mov	rdi, qword ptr [rbx + 128]
	mov	rdx, qword ptr [rbx + 144]
	mov	rsi, qword ptr [rbx + 136]
	mov	rcx, qword ptr [rbx + 152]
	mov	qword ptr [rbx + 248], rcx
	mov	qword ptr [rbx + 232], rsi
	mov	qword ptr [rbx + 240], rdx
	mov	qword ptr [rbx + 224], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 192], rdi
	mov	qword ptr [rbx + 200], rsi
	mov	qword ptr [rbx + 208], rdx
	mov	qword ptr [rbx + 216], rcx
	sub	rsp, 8
	push	r13
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1234:                             # %OP3221.SWAP1
	add	r12, r15
	mov	rax, qword ptr [rbx + 152]
	mov	r8, qword ptr [rbx + 128]
	mov	r9, qword ptr [rbx + 136]
	mov	r10, qword ptr [rbx + 144]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r13
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1235:                             # %OP3222.MLOAD.contd
	mov	rax, qword ptr [rbx + 8]
	mov	r15, qword ptr [rbx]
	mov	edx, dword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	r10, rdx
	mov	qword ptr [rbx + 24], 0
	mov	esi, dword ptr [rbx + 48]
	mov	qword ptr [rbx + 48], rsi
	mov	qword ptr [rbx + 56], 0
	mov	r11, qword ptr [rbx + 64]
	mov	qword ptr [rbx + 80], 0
	mov	qword ptr [rbx + 88], 0
	mov	qword ptr [rbx + 64], 6699
	mov	sil, 48
	bzhi	rdx, qword ptr [rbx + 72], rsi
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [rbx + 72], 0
	mov	rsi, qword ptr [rbx + 120]
	mov	rdi, qword ptr [rbx + 112]
	mov	r8, qword ptr [rbx + 104]
	mov	r9, qword ptr [rbx + 96]
	mov	qword ptr [rbx + 96], r15
	mov	qword ptr [rbx + 104], rax
	mov	rcx, rax
	mov	qword ptr [rbx + 112], r10
	mov	rdx, r10
	mov	qword ptr [rbx + 120], 0
	mov	r10, qword ptr [rbx - 32]
	mov	r12, qword ptr [rbx - 24]
	mov	r13, qword ptr [rbx - 8]
	mov	rax, qword ptr [rbx - 16]
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 152], r13
	mov	qword ptr [rbx + 128], r10
	mov	qword ptr [rbx + 136], r12
	mov	r10, qword ptr [r14]
	mov	qword ptr [rbx + 176], 0
	mov	qword ptr [rbx + 184], 0
	mov	qword ptr [rbx + 160], 6694
	mov	qword ptr [rbx + 168], 0
	mov	qword ptr [rbx + 192], r11
	mov	r11, qword ptr [r14 + 8]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbx + 200], rax
	mov	qword ptr [rbx + 208], 0
	mov	qword ptr [rbx + 216], 0
	mov	r13, r15
	mov	qword ptr [rbx + 224], r15
	mov	r12, rcx
	mov	qword ptr [rbx + 232], rcx
	mov	qword ptr [rbx + 240], rdx
	mov	qword ptr [rbx + 248], 0
	mov	qword ptr [rbx + 272], 0
	mov	qword ptr [rbx + 280], 0
	mov	qword ptr [rbx + 256], 1889567281
	mov	qword ptr [rbx + 264], 0
	mov	rax, r9
	add	rax, 36
	mov	qword ptr [rbx + 288], rax
	mov	rax, r8
	adc	rax, 0
	mov	qword ptr [rbx + 296], rax
	mov	rax, rdi
	adc	rax, 0
	mov	qword ptr [rbx + 304], rax
	mov	rax, rsi
	adc	rax, 0
	mov	qword ptr [rbx + 312], rax
	mov	r15, qword ptr [r14 + 24]
	mov	r14, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 336], 0
	mov	qword ptr [rbx + 344], 0
	mov	qword ptr [rbx + 320], 32
	mov	qword ptr [rbx + 328], 0
	mov	qword ptr [rbx + 368], r14
	mov	qword ptr [rbx + 376], r15
	mov	qword ptr [rbx + 352], r10
	mov	qword ptr [rbx + 360], r11
	sub	r9, r10
	sbb	r8, r11
	sbb	rdi, r14
	sbb	rsi, r15
	add	r9, 36
	mov	qword ptr [rbx + 384], r9
	adc	r8, 0
	mov	qword ptr [rbx + 392], r8
	adc	rdi, 0
	mov	qword ptr [rbx + 400], rdi
	adc	rsi, 0
	mov	qword ptr [rbx + 408], rsi
	mov	qword ptr [rbx + 432], r14
	mov	qword ptr [rbx + 440], r15
	mov	qword ptr [rbx + 416], r10
	mov	qword ptr [rbx + 424], r11
	mov	qword ptr [rbx + 448], r13
	mov	qword ptr [rbx + 456], r12
	mov	qword ptr [rbx + 464], rdx
	mov	qword ptr [rbx + 472], 0
	mov	qword ptr [rbx + 480], r13
	mov	qword ptr [rbx + 488], r12
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 16
	mov	qword ptr [rbx + 496], rdx
	lea	r14, [rbx + 480]
	mov	qword ptr [rbx + 504], 0
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r15
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1236:                             # %OP3265.ISZERO
	mov	r11, r15
	mov	rcx, qword ptr [r14 + 8]
	or	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14]
	or	rdx, qword ptr [r14 + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], 0
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jne	.LBB0_1559
# %bb.1237:                             # %OP3270.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [rbx + 544], ymm0
	jmp	.LBB0_1238
.LBB0_1239:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 9078
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1365
# %bb.1240:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 8928
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1526
# %bb.1241:                             # %dynamic_jump_table
	xor	rcx, 8972
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1242:                             # %OP4351.JUMPDEST.loopexit
	mov	r14, r13
	jmp	.LBB0_321
.LBB0_1243:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 5224
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1367
# %bb.1244:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 5091
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_128
# %bb.1245:                             # %dynamic_jump_table
	xor	rcx, 5109
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1246:                             # %OP2513.JUMPDEST.loopexit
	mov	r15, r13
	jmp	.LBB0_354
.LBB0_1247:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 8077
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1380
# %bb.1248:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 7943
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_149
# %bb.1249:                             # %dynamic_jump_table
	xor	rcx, 8058
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1250:                             # %OP3920.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB0_158
.LBB0_1251:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2904
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1384
# %bb.1252:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2847
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_181
# %bb.1253:                             # %dynamic_jump_table
	xor	rcx, 2869
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1254:                             # %OP1502.JUMPDEST.loopexit
	mov	rbx, r13
	jmp	.LBB0_183
.LBB0_1255:                             # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 6923
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rax
	mov	r8d, 0
	sbb	r8, r14
	sbb	rdi, rsi
	jl	.LBB0_1397
# %bb.1256:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 6868
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1547
# %bb.1257:                             # %dynamic_jump_table
	xor	rcx, 6896
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1258:                             # %OP3394.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_135
.LBB0_1259:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 5371
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_1378
# %bb.1260:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 5391
	or	rsi, r14
	or	rsi, rax
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	je	.LBB0_241
# %bb.1261:                             # %dynamic_jump_table
	xor	rcx, 5413
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_244
	jmp	.LBB0_1569
.LBB0_1262:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 643
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_577
# %bb.1263:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 667
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_579
# %bb.1264:                             # %dynamic_jump_table
	xor	rcx, 712
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_596
	jmp	.LBB0_1569
.LBB0_1265:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 8520
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_263
# %bb.1266:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 8563
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_1502
# %bb.1267:                             # %dynamic_jump_table
	xor	rcx, 8566
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1268:                             # %OP4199.JUMPDEST.loopexit
	mov	r14, r13
	jmp	.LBB0_271
.LBB0_1269:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 846
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_608
# %bb.1270:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 866
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_92
# %bb.1271:                             # %dynamic_jump_table
	xor	rcx, 874
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_614
	jmp	.LBB0_1569
.LBB0_1272:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1180
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_332
# %bb.1273:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 1202
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_624
# %bb.1274:                             # %dynamic_jump_table
	xor	rcx, 1231
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_405
	jmp	.LBB0_1569
.LBB0_1275:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1341
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_625
# %bb.1276:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 1366
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_632
# %bb.1277:                             # %dynamic_jump_table
	xor	rcx, 1374
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_460
	jmp	.LBB0_1569
.LBB0_1278:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 8356
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1562
# %bb.1279:                             # %dynamic_jump_table
	mov	rsi, rcx
	xor	rsi, 8417
	or	rsi, r14
	or	rsi, rax
	je	.LBB0_1557
# %bb.1280:                             # %dynamic_jump_table
	xor	rcx, 8515
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1281:                             # %OP4158.JUMPDEST.loopexit
	mov	rsi, r13
	shl	rsi, 5
	mov	rcx, qword ptr [r12 + rsi - 40]
	mov	r8, qword ptr [r12 + rsi - 48]
	mov	rax, qword ptr [r12 + rsi - 64]
	mov	rsi, qword ptr [r12 + rsi - 56]
	mov	rdi, r13
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_398
.LBB0_1282:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 3472
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	r11, rbx
	je	.LBB0_42
# %bb.1283:                             # %dynamic_jump_table
	xor	rcx, 3766
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1284:                             # %OP1883.JUMPDEST
	lea	r15, [r13 + 1]
	mov	rbx, r13
	shl	rbx, 5
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 2
	mov	eax, dword ptr [r12 + rbx - 144]
	mov	r8, qword ptr [r12 + rbx - 160]
	mov	r9, qword ptr [r12 + rbx - 152]
	mov	r14, r15
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rbx], ymm0
	mov	qword ptr [r12 + r14 + 8], r9
	mov	qword ptr [r12 + r14 + 16], rax
	mov	qword ptr [r12 + r14], r8
	mov	qword ptr [r12 + r14 + 24], 0
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [r12 + r13 + 16], 0
	mov	qword ptr [r12 + r13], 0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r11
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.1285:                             # %OP1891.PUSH1
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	add	rbx, r12
	add	r14, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm0
	add	r13, r12
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_81] # xmm1 = [2,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 2
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1629
# %bb.1286:                             # %OP1896.PUSH1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	lea	r15, [rax + 4]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	lea	rsi, [rbx + 96]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 224], r15      # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], rdi
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], rax
	mov	qword ptr [r12 + r15 + 8], rdx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_1648
# %bb.1287:                             # %OP1900.CALLER
	add	r15, r12
	mov	rdx, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	rcx, qword ptr [rdx + 156]
	movbe	rax, qword ptr [rdx + 148]
	mov	r8d, dword ptr [rdx + 164]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], 0
	mov	rdi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 160], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1648
# %bb.1288:                             # %OP1903.SWAP1
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	r8, qword ptr [r11]
	mov	r9, qword ptr [r11 + 8]
	mov	r10, qword ptr [r11 + 16]
	vmovdqu	ymm0, ymmword ptr [r13]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	rdi, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11], rdi
	sub	rsp, 8
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1629
# %bb.1289:                             # %OP1906.SWAP1
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], r9
	mov	rdi, r15
	mov	rsi, rbx
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB0_717
# %bb.1290:                             # %OP1908.SSTORE
	dec	r13
	add	rbx, -32
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB0_95
.LBB0_1291:                             # %OP1909.JUMPDEST.loopexit
	mov	qword ptr [rbp - 248], r13      # 8-byte Spill
.LBB0_1292:                             # %OP1909.JUMPDEST
	mov	r13, qword ptr [rbp - 248]      # 8-byte Reload
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_138] # xmm0 = [3827,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 + rax - 128]
	vmovdqu	ymm1, ymmword ptr [r12 + rax - 96]
	vmovups	ymm2, ymmword ptr [r12 + rax - 64]
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r12 + rax + 64], ymm1
	add	r13, 4
	vmovups	ymmword ptr [r12 + rax + 96], ymm2
.LBB0_1293:                             # %OP4620.JUMPDEST
	lea	rcx, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	mov	esi, dword ptr [r12 + rax - 80]
	mov	rdi, qword ptr [r12 + rax - 96]
	mov	r14, qword ptr [r12 + rax - 88]
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	shl	rcx, 5
	lea	rdx, [r12 + rcx]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	qword ptr [r12 + rcx + 8], r14
	mov	qword ptr [r12 + rcx + 16], rsi
	mov	qword ptr [r12 + rcx], rdi
	mov	qword ptr [r12 + rcx + 24], 0
	vmovdqu	ymmword ptr [r12 + rax + 64], ymm0
	add	r13, 3
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r13, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [r13 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rax, r15
	cmp	rax, 31
	jbe	.LBB0_1640
.LBB0_1294:                             # %OP4628.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r15 + 24], rdi
	movbe	qword ptr [rax + r15 + 16], r14
	movbe	qword ptr [rax + r15 + 8], rsi
	mov	qword ptr [rax + r15], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [rdx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r14, qword ptr [r13 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	rdi, r13
	jbe	.LBB0_1641
.LBB0_1295:                             # %OP4631.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_65] # ymm0 = [0,0,0,72057594037927936]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_0] # xmm1 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	r15, rdx
	vmovdqu	ymmword ptr [rdx], ymm0
	mov	rsi, rbx
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB0_1642
# %bb.1296:                             # %OP4634.SLOAD
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1642
# %bb.1297:                             # %OP4635.PUSH2
	vmovups	ymm0, ymmword ptr [rbx]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_143] # xmm1 = [9793,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	vmovups	ymmword ptr [r15], ymm0
	vmovups	ymm0, ymmword ptr [rbx - 32]
	vmovups	ymmword ptr [rbx + 64], ymm0
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_32] # xmm0 = [8814,0]
	vmovdqu	ymmword ptr [rbx + 128], ymm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	xor	eax, eax
	mov	ecx, 8814
	xor	r14d, r14d
	xor	esi, esi
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_1546
.LBB0_1298:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1439
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_636
# %bb.1299:                             # %dynamic_jump_table
	xor	rcx, 1461
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_639
	jmp	.LBB0_1569
.LBB0_1300:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 5945
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_214
# %bb.1301:                             # %dynamic_jump_table
	xor	rcx, 6059
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1302:                             # %OP3009.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB0_222
.LBB0_1303:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2783
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_722
# %bb.1304:                             # %dynamic_jump_table
	xor	rcx, 2805
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_179
	jmp	.LBB0_1569
.LBB0_1305:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2607
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_721
# %bb.1306:                             # %dynamic_jump_table
	xor	rcx, 2627
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_226
	jmp	.LBB0_1569
.LBB0_1307:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 789
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_53
# %bb.1308:                             # %dynamic_jump_table
	xor	rcx, 811
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1309:                             # %OP474.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	jmp	.LBB0_55
.LBB0_1310:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 941
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_59
# %bb.1311:                             # %dynamic_jump_table
	xor	rcx, 963
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1312:                             # %OP562.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rbx, qword ptr [rax + 80]
	jmp	.LBB0_60
.LBB0_1313:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 249
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_566
# %bb.1314:                             # %dynamic_jump_table
	xor	rcx, 320
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1315:                             # %OP156.JUMPDEST.loopexit
	mov	rsi, r13
	shl	rsi, 5
	mov	rdx, qword ptr [r12 + rsi - 8]
	mov	rcx, qword ptr [r12 + rsi - 16]
	mov	rax, qword ptr [r12 + rsi - 32]
	mov	rbx, qword ptr [r12 + rsi - 24]
	jmp	.LBB0_58
.LBB0_1316:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2031
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_673
# %bb.1317:                             # %dynamic_jump_table
	xor	rcx, 2132
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_685
	jmp	.LBB0_1569
.LBB0_1318:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2273
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_699
# %bb.1319:                             # %dynamic_jump_table
	xor	rcx, 2474
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_718
	jmp	.LBB0_1569
.LBB0_1320:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 151
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_565
# %bb.1321:                             # %dynamic_jump_table
	xor	rcx, 211
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1322:                             # %OP105.JUMPDEST.loopexit
	mov	rdx, r13
	shl	rdx, 5
	mov	rsi, qword ptr [r12 + rdx - 8]
	mov	rcx, qword ptr [r12 + rdx - 16]
	mov	rax, qword ptr [r12 + rdx - 32]
	mov	rbx, qword ptr [r12 + rdx - 24]
	jmp	.LBB0_80
.LBB0_1323:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1290
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_352
# %bb.1324:                             # %dynamic_jump_table
	xor	rcx, 1312
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1325:                             # %OP736.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	jmp	.LBB0_353
.LBB0_1326:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1600
	or	rdi, rdx
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_665
# %bb.1327:                             # %dynamic_jump_table
	xor	rcx, 1622
	or	rcx, rdx
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1328:                             # %OP904.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	jmp	.LBB0_370
.LBB0_1329:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 1659
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_552
# %bb.1330:                             # %dynamic_jump_table
	xor	rcx, 1667
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_33
	jmp	.LBB0_1569
.LBB0_1331:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 7640
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_371
# %bb.1332:                             # %dynamic_jump_table
	xor	rcx, 7669
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_553
	jmp	.LBB0_1569
.LBB0_1333:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 5067
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_334
# %bb.1334:                             # %dynamic_jump_table
	xor	rcx, 5085
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1335:                             # %OP2494.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_406
.LBB0_1336:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 10071
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1563
# %bb.1337:                             # %dynamic_jump_table
	xor	rcx, 10091
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1338:                             # %OP4787.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_137
.LBB0_1339:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 6079
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1506
# %bb.1340:                             # %dynamic_jump_table
	xor	rcx, 6101
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_317
	jmp	.LBB0_1569
.LBB0_1341:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 9253
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	je	.LBB0_1519
# %bb.1342:                             # %dynamic_jump_table
	xor	rcx, 9317
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1343:                             # %OP4472.JUMPDEST
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_48] # xmm0 = [10,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx], ymm0
	mov	rax, r13
	mov	r13, r12
	lea	r12, [rax + 2]
	lea	rsi, [r13 + rbx + 32]
	vmovdqu	ymmword ptr [r13 + rbx + 32], ymm0
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1644
# %bb.1344:                             # %OP4476.PUSH28
	add	rbx, r13
	shl	r12, 5
	mov	r14d, dword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 32]
	mov	r15, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 16]
	mov	rax, qword ptr [rbx + 56]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [rbx + 48]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r11, qword ptr [rbx + 40]
	mov	r10, qword ptr [rbx + 32]
	mov	eax, 4294967295
	mov	qword ptr [r13 + r12 + 24], rax
	mov	qword ptr [r13 + r12 + 8], -1
	mov	qword ptr [r13 + r12 + 16], -1
	mov	qword ptr [r13 + r12], -1
	mov	r9, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 64]
	mov	r13, qword ptr [rbx - 48]
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 48], rdi
	mov	qword ptr [rbx + 32], rcx
	mov	qword ptr [rbx + 56], r14
	mov	qword ptr [rbx + 40], r15
	mov	r12, qword ptr [rbx - 40]
	imul	r12, rcx
	mov	rdx, rcx
	mulx	rdx, r8, r13
	imul	r13, r15
	add	r13, r12
	add	r13, rdx
	mov	rdx, rdi
	mulx	rdx, r12, rsi
	imul	rdi, r9
	imul	r14, rsi
	add	r14, rdi
	add	r14, rdx
	add	r12, r8
	mov	rdx, rsi
	mulx	rax, rdi, rcx
	adc	r14, r13
	mov	rdx, r9
	mulx	r8, r13, rcx
	add	r13, rax
	adc	r8, 0
	mov	rdx, rsi
	mulx	rsi, rcx, r15
	mov	rdx, r9
	mulx	rax, rdx, r15
	add	rcx, r13
	adc	rsi, r8
	setb	r8b
	add	rdx, rsi
	movzx	esi, r8b
	adc	rax, rsi
	add	rdx, r12
	adc	rax, r14
	mov	qword ptr [rbx], rdi
	add	r10, rdi
	mov	qword ptr [rbx + 8], rcx
	adc	rcx, r11
	mov	qword ptr [rbx + 16], rdx
	adc	rdx, qword ptr [rbp - 88]       # 8-byte Folded Reload
	mov	qword ptr [rbx + 24], rax
	adc	rax, qword ptr [rbp - 80]       # 8-byte Folded Reload
	mov	qword ptr [rbx - 64], r10
	mov	qword ptr [rbx - 56], rcx
	mov	qword ptr [rbx - 48], rdx
	mov	qword ptr [rbx - 40], rax
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	lea	rsi, [rbx - 64]
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, -2
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1345:
	mov	r11, rbx
	mov	r14, r13
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB0_1529
.LBB0_1346:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 3837
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1522
# %bb.1347:                             # %dynamic_jump_table
	xor	rcx, 3873
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1348:                             # %OP1929.JUMPDEST.loopexit
	mov	rdx, r13
	jmp	.LBB0_341
.LBB0_1349:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 4228
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_87
# %bb.1350:                             # %dynamic_jump_table
	xor	rcx, 4244
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1351:                             # %OP2066.JUMPDEST
	mov	r14, r13
	shl	r14, 5
	lea	rsi, [r12 + r14]
	add	rsi, -32
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_71] # xmm0 = [6,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14 - 32], ymm0
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1352:                             # %OP2070.PUSH1
	add	r14, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	lea	r15, [r13 + 2]
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.1353:                             # %OP2072.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + r15 + 24], rax
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15], 0
	mov	qword ptr [r12 + r15 + 8], 0
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1354:                             # %OP2076.ADDRESS
	add	r15, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], 0
	mov	rdi, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 48]
	mov	rsi, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 120], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1355:                             # %OP2081.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14 + 32]
	vmovdqa	xmm1, xmmword ptr [r14 + 48]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 40], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1356:                             # %OP2082.MLOAD.contd
	mov	rcx, qword ptr [rbx + 16]
	mov	rax, qword ptr [rbx]
	mov	rdx, qword ptr [r14 - 96]
	mov	rsi, qword ptr [r14 - 88]
	mov	rdi, qword ptr [r14 - 72]
	mov	r8, qword ptr [r14 - 80]
	mov	qword ptr [r14 - 144], r8
	mov	qword ptr [r14 - 136], rdi
	mov	qword ptr [r14 - 160], rdx
	mov	qword ptr [r14 - 152], rsi
	mov	r8, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14]
	mov	r9, qword ptr [r14 - 56]
	mov	r10, qword ptr [r14 - 64]
	mov	r11, qword ptr [r14 - 40]
	mov	r12, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 112], r12
	mov	qword ptr [r14 - 104], r11
	mov	qword ptr [r14 - 128], r10
	mov	qword ptr [r14 - 120], r9
	mov	qword ptr [r14 - 80], 0
	mov	qword ptr [r14 - 72], 0
	mov	qword ptr [r14 - 96], 0
	mov	qword ptr [r14 - 88], 0
	mov	r9d, dword ptr [r14 - 16]
	mov	r11, qword ptr [r14 - 24]
	mov	r10, qword ptr [r14 - 32]
	mov	qword ptr [r14 - 64], r10
	mov	qword ptr [r14 - 56], r11
	mov	qword ptr [r14 - 48], r9
	mov	qword ptr [r14 - 40], 0
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 - 32], 1889567281
	mov	qword ptr [r14 - 24], 0
	mov	qword ptr [r14 - 16], 0
	mov	r12, rdx
	add	r12, 36
	mov	qword ptr [r14], r12
	mov	r12, rsi
	adc	r12, 0
	mov	qword ptr [r14 + 8], r12
	mov	r12, rdi
	adc	r12, 0
	mov	qword ptr [r14 + 16], r12
	mov	r12, r8
	adc	r12, 0
	mov	qword ptr [r14 + 24], r12
	mov	r12, qword ptr [rbx + 8]
	mov	rbx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	mov	qword ptr [r14 + 32], 32
	mov	qword ptr [r14 + 40], 0
	mov	qword ptr [r15 + 24], rbx
	mov	qword ptr [r15 + 8], r12
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	sub	rdx, rax
	sbb	rsi, r12
	sbb	rdi, rcx
	sbb	r8, rbx
	add	rdx, 36
	adc	rsi, 0
	adc	rdi, 0
	adc	r8, 0
	mov	qword ptr [r14 + 120], r8
	mov	qword ptr [r14 + 112], rdi
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 96], rdx
	mov	qword ptr [r14 + 152], rbx
	mov	qword ptr [r14 + 144], rcx
	mov	qword ptr [r14 + 136], r12
	mov	qword ptr [r14 + 128], rax
	mov	qword ptr [r14 + 176], r9
	mov	qword ptr [r14 + 168], r11
	mov	qword ptr [r14 + 160], r10
	mov	qword ptr [r14 + 184], 0
	mov	qword ptr [r14 + 208], r9
	mov	qword ptr [r14 + 200], r11
	add	r13, 7
	mov	qword ptr [r14 + 192], r10
	lea	rbx, [r14 + 192]
	mov	qword ptr [r14 + 216], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1357:                             # %OP2115.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_1573
# %bb.1358:
	mov	r11, r15
	jmp	.LBB0_1554
.LBB0_1573:                             # %OP1436.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [r14 + 256], ymm0
	jmp	.LBB0_408
.LBB0_1359:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 4018
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1525
# %bb.1360:                             # %dynamic_jump_table
	xor	rcx, 4101
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1361:                             # %OP2007.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_350
.LBB0_1362:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 6638
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1558
# %bb.1363:                             # %dynamic_jump_table
	xor	rcx, 6658
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1364:                             # %OP3289.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_172
.LBB0_1365:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 9079
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_322
# %bb.1366:                             # %dynamic_jump_table
	xor	rcx, 9159
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_326
	jmp	.LBB0_1569
.LBB0_1367:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 5225
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_357
# %bb.1368:                             # %dynamic_jump_table
	xor	rcx, 5241
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1369:                             # %OP2563.JUMPDEST
	mov	rbx, r13
	shl	rbx, 5
	lea	rsi, [r12 + rbx]
	add	rsi, -32
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_71] # xmm0 = [6,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx - 32], ymm0
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1370:                             # %OP2567.PUSH1
	add	rbx, r12
	lea	r15, [r13 + 1]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_72] # xmm0 = [7,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_494
# %bb.1371:                             # %OP2569.PUSH1
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	lea	r12, [r13 + 3]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1644
# %bb.1372:                             # %OP2571.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	mov	r14, r12
	shl	r14, 5
	movabs	rax, 8115629675486642176
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1373:                             # %OP2575.ADDRESS
	add	r14, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], 0
	mov	rdi, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 80]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 160], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1374:                             # %OP2580.SWAP1
	add	r15, r12
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1375:                             # %OP2581.MLOAD.contd
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [rbx - 80]
	mov	rdx, qword ptr [rbx - 96]
	mov	rsi, qword ptr [rbx - 88]
	mov	rdi, qword ptr [rbx - 72]
	mov	qword ptr [rbx - 136], rdi
	mov	qword ptr [rbx - 152], rsi
	mov	qword ptr [rbx - 144], rcx
	mov	qword ptr [rbx - 160], rdx
	mov	r8, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 24]
	mov	r10, qword ptr [r15]
	mov	r9, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx - 56]
	mov	rdx, qword ptr [rbx - 64]
	mov	rdi, qword ptr [rbx - 40]
	mov	r11, qword ptr [rbx - 48]
	mov	qword ptr [rbx - 112], r11
	mov	qword ptr [rbx - 104], rdi
	mov	qword ptr [rbx - 128], rdx
	mov	qword ptr [rbx - 120], rcx
	mov	edx, dword ptr [rbx - 16]
	mov	rcx, qword ptr [rbx - 32]
	mov	rdi, qword ptr [rbx - 24]
	mov	qword ptr [rbx - 88], rdi
	mov	qword ptr [rbx - 96], rcx
	mov	qword ptr [rbx - 80], rdx
	mov	qword ptr [rbx - 72], 0
	vmovaps	xmm0, xmmword ptr [rbx]
	mov	r11d, dword ptr [rbx + 16]
	mov	qword ptr [rbx - 48], r11
	vmovaps	xmmword ptr [rbx - 64], xmm0
	mov	qword ptr [rbx - 40], 0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rbx - 32], ymm0
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_73] # xmm0 = [1889567281,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r15, r10
	add	r15, 36
	mov	r11, r8
	adc	r11, 0
	mov	qword ptr [rbx + 72], r11
	mov	r11, qword ptr [r14 + 8]
	mov	qword ptr [rbx + 64], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [rbx + 80], r15
	mov	r15, rsi
	adc	r15, 0
	mov	qword ptr [rbx + 88], r15
	mov	r15, qword ptr [r14 + 16]
	mov	r14, qword ptr [r14 + 24]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	qword ptr [rbx + 152], r14
	mov	qword ptr [rbx + 144], r15
	mov	qword ptr [rbx + 136], r11
	mov	qword ptr [rbx + 128], rax
	sub	r10, rax
	sbb	r8, r11
	sbb	r9, r15
	sbb	rsi, r14
	add	r10, 36
	mov	qword ptr [rbx + 160], r10
	adc	r8, 0
	mov	qword ptr [rbx + 168], r8
	adc	r9, 0
	mov	qword ptr [rbx + 176], r9
	adc	rsi, 0
	mov	qword ptr [rbx + 184], rsi
	mov	qword ptr [rbx + 216], r14
	mov	qword ptr [rbx + 208], r15
	mov	qword ptr [rbx + 200], r11
	mov	qword ptr [rbx + 192], rax
	mov	qword ptr [rbx + 240], rdx
	mov	qword ptr [rbx + 232], rdi
	mov	qword ptr [rbx + 224], rcx
	mov	qword ptr [rbx + 248], 0
	mov	qword ptr [rbx + 272], rdx
	mov	qword ptr [rbx + 264], rdi
	add	r13, 9
	mov	qword ptr [rbx + 256], rcx
	lea	r14, [rbx + 256]
	mov	qword ptr [rbx + 280], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r15, rdi
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1376:                             # %OP2619.ISZERO
	mov	rcx, qword ptr [r14 + 8]
	or	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14]
	or	rdx, qword ptr [r14 + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], 0
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_1574
# %bb.1377:
	mov	r11, r15
.LBB0_1378:                             # %OP2627.JUMPDEST
	mov	rax, qword ptr [rdi + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1379:
	lea	rax, [rip + .Ltmp11]
	jmp	.LBB0_1561
.LBB0_1380:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 8078
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1527
# %bb.1381:                             # %dynamic_jump_table
	xor	rcx, 8100
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_168
	jmp	.LBB0_1569
.LBB0_1382:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 9362
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1528
# %bb.1383:                             # %dynamic_jump_table
	xor	rcx, 9628
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_301
	jmp	.LBB0_1569
.LBB0_1384:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2905
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_723
# %bb.1385:                             # %dynamic_jump_table
	xor	rcx, 2927
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_187
	jmp	.LBB0_1569
.LBB0_1386:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 2944
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_189
# %bb.1387:                             # %dynamic_jump_table
	xor	rcx, 3029
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_191
	jmp	.LBB0_1569
.LBB0_1388:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 7388
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1548
# %bb.1389:                             # %dynamic_jump_table
	xor	rcx, 7511
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_298
	jmp	.LBB0_1569
.LBB0_1390:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 3177
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1549
# %bb.1391:                             # %dynamic_jump_table
	xor	rcx, 3286
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_1551
	jmp	.LBB0_1569
.LBB0_1392:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 6680
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_174
# %bb.1393:                             # %dynamic_jump_table
	xor	rcx, 6694
	jmp	.LBB0_1446
.LBB0_1394:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 6347
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1552
# %bb.1395:                             # %dynamic_jump_table
	xor	rcx, 6360
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1396:                             # %OP3158.JUMPDEST.loopexit
	mov	rdx, r13
	jmp	.LBB0_103
.LBB0_1397:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 6924
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_657
# %bb.1398:                             # %dynamic_jump_table
	xor	rcx, 7035
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
.LBB0_1399:                             # %OP3439.JUMPDEST.loopexit
	mov	r14, r13
	lea	rbx, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	mov	r15, r12
	add	r12, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_105] # xmm0 = [3,0,0,0]
	vmovdqu	ymmword ptr [r15 + rax], ymm0
	mov	rdi, r11
	mov	rsi, r12
	mov	edx, 17
	mov	r13, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1639
# %bb.1400:                             # %OP3442.PUSH20
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_46] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r15 + rbx], ymm0
	mov	rcx, r14
	add	r14, 4
	mov	eax, dword ptr [r12 - 208]
	mov	r8, qword ptr [r12 - 224]
	mov	r9, qword ptr [r12 - 216]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 88], ymm0
	mov	qword ptr [r12 + 72], r9
	mov	qword ptr [r12 + 64], r8
	mov	qword ptr [r12 + 80], rax
	mov	qword ptr [r12 + 120], 0
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	lea	rbx, [rcx + 5]
	mov	qword ptr [rbp - 224], r14      # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 8], r9
	mov	qword ptr [r15 + r14 + 16], rax
	mov	qword ptr [r15 + r14], r8
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [rbp - 72], rbx       # 8-byte Spill
	shl	rbx, 5
	vmovdqu	ymmword ptr [r15 + rbx], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r13
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1648
# %bb.1401:                             # %OP3450.PUSH1
	add	r14, r15
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	r13, [rax + 6]
	add	rbx, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_20] # xmm1 = [4,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 4
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.1402:                             # %OP3455.PUSH1
	mov	r14, rbx
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rbx, [rax + 7]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	add	r13, r15
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r12 + 120]
	mov	rcx, qword ptr [r12 + 96]
	mov	rdx, qword ptr [r12 + 104]
	mov	rsi, qword ptr [r12 + 112]
	mov	qword ptr [rbp - 128], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r15 + rbx + 16], rsi
	mov	qword ptr [r15 + rbx], rcx
	mov	qword ptr [r15 + rbx + 24], rax
	mov	qword ptr [r15 + rbx + 8], rdx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r13
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_667
# %bb.1403:                             # %OP3459.DUP1
	mov	qword ptr [rbp - 72], r14       # 8-byte Spill
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	r14, [rax + 8]
	add	rbx, r15
	mov	rax, qword ptr [r13]
	mov	rcx, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	mov	rsi, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 24], rdx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 8], rcx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.1404:                             # %OP3461.PUSH1
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	add	rcx, 9
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	mov	rax, r14
	shl	rax, 5
	lea	r13, [r15 + rax]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	r8, rcx
	shl	r8, 5
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [r12 + 336], rdi
	mov	qword ptr [r12 + 320], rdx
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 328], rsi
	add	rdx, 1
	adc	rsi, 0
	adc	rdi, 0
	adc	rcx, 0
	mov	qword ptr [r15 + rax], rdx
	mov	qword ptr [r15 + rax + 8], rsi
	mov	qword ptr [r15 + rax + 16], rdi
	mov	qword ptr [r15 + rax + 24], rcx
	vmovdqu	ymm0, ymmword ptr [r12 + 192]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_22] # xmm1 = [1,0,0,0]
	vmovdqu	ymmword ptr [r12 + 192], ymm1
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	vmovdqu	ymmword ptr [r15 + r8], ymm0
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r15
	mov	rsi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1646
# %bb.1405:                             # %OP3468.DUP3
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1406:                             # %OP3469.MLOAD.contd
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, qword ptr [rbp - 96]       # 8-byte Folded Reload
	mov	r11, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	mov	r14, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], r14
	mov	qword ptr [r13 + 8], r8
	mov	qword ptr [r13 + 16], r11
	mov	qword ptr [r13], rax
	movabs	rcx, 7958403348434106751
	mov	qword ptr [r15 + 24], rcx
	movabs	r10, 6891346005080805706
	mov	qword ptr [r15 + 8], r10
	movabs	rcx, 5557266254805274640
	mov	qword ptr [r15 + 16], rcx
	movabs	r9, 1629287684866385609
	mov	qword ptr [r15], r9
	mov	rsi, qword ptr [r12 + 136]
	mov	rcx, qword ptr [r12 + 152]
	mov	rdi, qword ptr [r12 + 128]
	mov	rdx, qword ptr [r12 + 144]
	mov	qword ptr [r12 + 352], rdi
	add	rdi, rax
	mov	qword ptr [r12 + 360], rsi
	adc	rsi, r8
	mov	qword ptr [r12 + 368], rdx
	adc	rdx, r11
	mov	qword ptr [r12 + 376], rcx
	adc	rcx, r14
	mov	qword ptr [r12 + 320], rdi
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 344], rcx
	sub	rsp, 8
	mov	r8, r9
	mov	r9, r10
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	movabs	rax, 7958403348434106751
	push	rax
	movabs	rax, 5557266254805274640
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1407:                             # %OP3475.DUP1
	mov	rax, qword ptr [r13 + 24]
	mov	qword ptr [rbp - 56], rax       # 8-byte Spill
	mov	rax, qword ptr [r13 + 16]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [r13]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	r14, qword ptr [r13 + 8]
	mov	rdi, qword ptr [r12 + 160]
	mov	rdx, qword ptr [r12 + 176]
	mov	rsi, qword ptr [r12 + 168]
	mov	rcx, qword ptr [r12 + 184]
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 320], rdi
	add	rdi, rax
	adc	rsi, r14
	mov	r11, qword ptr [r12 + 80]
	mov	r10, qword ptr [r12 + 88]
	mov	r8, qword ptr [r12 + 64]
	mov	r9, qword ptr [r12 + 72]
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 16], r11
	mov	qword ptr [r13], r8
	mov	qword ptr [r12 + 72], r14
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	adc	rdx, r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	adc	rcx, rax
	mov	qword ptr [r12 + 88], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r12 + 64], rax
	mov	qword ptr [r12 + 80], r14
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	r10
	push	r11
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1646
# %bb.1408:                             # %OP3482.SWAP6
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 16]
	mov	rax, qword ptr [r12 - 176]
	and	rax, qword ptr [r12 + 48]
	mov	qword ptr [r12 + 48], rdi
	mov	r8, qword ptr [r12 - 192]
	mov	r9, qword ptr [r12 - 184]
	and	r8, qword ptr [r12 + 32]
	mov	qword ptr [r12 + 32], rdx
	mov	r10, qword ptr [r12 - 168]
	and	r10, qword ptr [r12 + 56]
	mov	qword ptr [r12 + 56], rcx
	and	r9, qword ptr [r12 + 40]
	mov	qword ptr [r12 + 40], rsi
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], r10
	mov	rdi, qword ptr [r12 + 64]
	mov	rdx, qword ptr [r12 + 80]
	mov	rsi, qword ptr [r12 + 72]
	mov	rcx, qword ptr [r12 + 88]
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbp - 56], r15       # 8-byte Spill
	mov	qword ptr [r15 + 16], rdx
	add	rdi, 96
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	push	r15
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1409:                             # %OP3489.PUSH1
	mov	rcx, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	rsi, qword ptr [r12 + 72]
	mov	edi, 128
	add	rdi, qword ptr [r12 + 64]
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [r12 - 136]
	mov	r8, qword ptr [r12 - 160]
	mov	r9, qword ptr [r12 - 152]
	mov	r10, qword ptr [r12 - 144]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1410:                             # %OP3495.PUSH1
	mov	rcx, qword ptr [r12 + 88]
	mov	rdi, qword ptr [r12 + 64]
	mov	rsi, qword ptr [r12 + 72]
	mov	rdx, qword ptr [r12 + 80]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	add	rdi, 160
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	r8, qword ptr [r12 + 32]
	mov	rax, qword ptr [r12 + 48]
	mov	r9, qword ptr [r12 + 40]
	mov	r10, qword ptr [r12 + 56]
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [r14]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	sub	rsp, 8
	push	r15
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1411:                             # %OP3502.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_120] # xmm0 = [192,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	rsi, qword ptr [r12 + 72]
	mov	edi, 192
	add	rdi, qword ptr [r12 + 64]
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [r12 - 104]
	mov	r8, qword ptr [r12 - 128]
	mov	r9, qword ptr [r12 - 120]
	mov	r10, qword ptr [r12 - 112]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1412:                             # %OP3509.DUP2
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1646
# %bb.1413:                             # %OP3510.MLOAD.contd
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rax, qword ptr [r12 + 88]
	mov	r8, qword ptr [r12 + 64]
	mov	r9, qword ptr [r12 + 72]
	mov	r10, qword ptr [r12 + 80]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11 + 8], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	add	r8, qword ptr [r13]
	mov	qword ptr [r13], rdi
	adc	r9, qword ptr [r13 + 8]
	adc	r10, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	adc	rax, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rax
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1414:                             # %OP3519.PUSH1
	mov	rax, qword ptr [r12 + 88]
	mov	r9, qword ptr [r12 + 72]
	mov	r10, qword ptr [r12 + 80]
	mov	r8d, 224
	add	r8, qword ptr [r12 + 64]
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rdx + 8]
	mov	rcx, qword ptr [rdx + 24]
	mov	rdi, qword ptr [rdx]
	mov	rdx, qword ptr [rdx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1415:                             # %OP3524.DUP1
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1646
# %bb.1416:                             # %OP3525.MLOAD.contd
	lea	r11, [r12 + 128]
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r13 + 24]
	mov	r8, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r10, qword ptr [r13 + 8]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], rcx
	mov	rax, qword ptr [r11 + 8]
	mov	rcx, qword ptr [r11 + 24]
	mov	rdx, qword ptr [r11]
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	rsi, qword ptr [r11 + 16]
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rax
	add	r9, rdx
	adc	r10, rax
	adc	r8, rsi
	adc	rdi, rcx
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 24], rdi
	mov	rdi, r15
	mov	rsi, r13
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_667
# %bb.1417:                             # %OP3530.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_121] # ymm0 = [0,0,0,1801721325924909056]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r12 + 88]
	mov	rdi, qword ptr [r12 + 64]
	mov	rsi, qword ptr [r12 + 72]
	mov	rdx, qword ptr [r12 + 80]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], rdi
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	add	rdi, 256
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 8
	movabs	rax, 1801721325924909056
	xor	r8d, r8d
	xor	r9d, r9d
	push	r15
	push	rax
	push	0
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1418:                             # %OP3535.PUSH2
	mov	rcx, qword ptr [r12 + 88]
	mov	rdi, qword ptr [r12 + 64]
	mov	rsi, qword ptr [r12 + 72]
	mov	rdx, qword ptr [r12 + 80]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	add	rdi, 258
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	r8, qword ptr [r12]
	mov	rax, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 24]
	vmovdqu	ymm0, ymmword ptr [r13]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 8], r9
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	sub	rsp, 8
	push	r15
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1419:                             # %OP3542.PUSH2
	mov	rdx, qword ptr [r12 + 80]
	mov	rdi, qword ptr [r12 + 64]
	mov	rsi, qword ptr [r12 + 72]
	mov	rcx, qword ptr [r12 + 88]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	add	rdi, 290
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	r9, qword ptr [r12 + 8]
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_122] # xmm0 = [290,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1420:                             # %OP3550.DUP1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_667
# %bb.1421:                             # %OP3551.MLOAD.contd
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rax, qword ptr [r12 + 88]
	mov	r8, qword ptr [r12 + 64]
	mov	r9, qword ptr [r12 + 72]
	mov	r10, qword ptr [r12 + 80]
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	add	r8, qword ptr [r12]
	mov	qword ptr [r12], rdi
	adc	r9, qword ptr [r12 + 8]
	adc	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	adc	rax, qword ptr [r12 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1422:                             # %OP3560.PUSH2
	mov	rax, qword ptr [r12 + 88]
	mov	r9, qword ptr [r12 + 72]
	mov	r10, qword ptr [r12 + 80]
	mov	r8d, 322
	add	r8, qword ptr [r12 + 64]
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rdx + 8]
	mov	rcx, qword ptr [rdx + 24]
	mov	rdi, qword ptr [rdx]
	mov	rdx, qword ptr [rdx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1423:                             # %OP3566.DUP7
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1646
# %bb.1424:                             # %OP3567.MLOAD.contd
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	mov	rax, qword ptr [r12 + 152]
	mov	rcx, qword ptr [r12 + 144]
	mov	rdx, qword ptr [r12 + 128]
	mov	rsi, qword ptr [r12 + 136]
	mov	rdi, qword ptr [r12]
	add	rdi, rdx
	mov	r8, qword ptr [r12 + 8]
	adc	r8, rsi
	mov	r9, qword ptr [r12 + 16]
	adc	r9, rcx
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	rcx, qword ptr [r12 + 24]
	adc	rcx, rax
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rsi
	vmovups	ymm2, ymmword ptr [r13]
	vmovdqa	xmmword ptr [r13], xmm0
	vmovdqa	xmmword ptr [r13 + 16], xmm1
	vmovups	ymmword ptr [r12], ymm2
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], r9
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [rbx], rdi
	mov	rdi, r15
	mov	rsi, r13
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB0_667
# %bb.1425:                             # %OP3575.SWAP6
	mov	rax, qword ptr [r13 + 16]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r8
	mov	r8, qword ptr [r12 + 96]
	mov	rax, qword ptr [r12 + 112]
	mov	r10, qword ptr [r12 + 120]
	mov	r9, qword ptr [r12 + 104]
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	sub	rsp, 8
	push	r15
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1426:                             # %OP3579.PUSH2
	mov	rax, qword ptr [r12 + 88]
	mov	r9, qword ptr [r12 + 72]
	mov	r10, qword ptr [r12 + 80]
	mov	r8d, 354
	add	r8, qword ptr [r12 + 64]
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rdx + 8]
	mov	rcx, qword ptr [rdx + 24]
	mov	rdi, qword ptr [rdx]
	mov	rdx, qword ptr [rdx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1427:                             # %OP3585.DUP7
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1428:                             # %OP3588.PUSH1
	movzx	r8d, byte ptr [r12 - 96]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], 0
	mov	rsi, qword ptr [r12 + 72]
	mov	rcx, qword ptr [r12 + 88]
	mov	rdi, qword ptr [r12 + 64]
	mov	rdx, qword ptr [r12 + 80]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	add	rdi, 386
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r9d, r9d
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1429:                             # %OP3595.PUSH2
	mov	rcx, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	rsi, qword ptr [r12 + 72]
	mov	edi, 418
	add	rdi, qword ptr [r12 + 64]
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [r12 - 40]
	mov	r8, qword ptr [r12 - 64]
	mov	r9, qword ptr [r12 - 56]
	mov	r10, qword ptr [r12 - 48]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB0_1638
# %bb.1430:                             # %OP3601.PUSH2
	mov	rcx, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	rsi, qword ptr [r12 + 72]
	mov	edi, 450
	add	rdi, qword ptr [r12 + 64]
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [r12 - 8]
	mov	r8, qword ptr [r12 - 32]
	mov	r9, qword ptr [r12 - 24]
	mov	r10, qword ptr [r12 - 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	sub	rsp, 8
	push	r15
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1431:                             # %OP3607.MLOAD
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1638
# %bb.1432:                             # %OP3607.MLOAD.contd
	mov	rax, qword ptr [r12 + 104]
	mov	rdi, qword ptr [r12 + 96]
	mov	rdx, qword ptr [r12 + 120]
	mov	rsi, qword ptr [r12 + 112]
	mov	rcx, qword ptr [r12 + 32]
	mov	qword ptr [rbp - 128], rcx      # 8-byte Spill
	mov	r9, qword ptr [r12 + 48]
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	mov	qword ptr [r12 + 48], rsi
	mov	rsi, qword ptr [r12 + 56]
	mov	qword ptr [r12 + 56], rdx
	mov	rdx, qword ptr [r12 + 40]
	mov	qword ptr [r12 + 32], rdi
	mov	qword ptr [r12 + 40], rax
	mov	r8, qword ptr [r12 + 88]
	mov	rdi, qword ptr [r12 + 80]
	mov	qword ptr [r12 + 80], r9
	mov	qword ptr [r12 + 88], rsi
	mov	r9, qword ptr [r12 + 64]
	mov	qword ptr [r12 + 64], rcx
	mov	r10, qword ptr [r12 + 72]
	mov	qword ptr [r12 + 72], rdx
	mov	rax, r9
	add	rax, 482
	mov	qword ptr [r12 + 96], rax
	mov	rax, r10
	adc	rax, 0
	mov	qword ptr [r12 + 104], rax
	mov	rax, rdi
	adc	rax, 0
	mov	qword ptr [r12 + 112], rax
	mov	rax, r8
	adc	rax, 0
	mov	qword ptr [r12 + 120], rax
	mov	r11, qword ptr [r14]
	mov	rax, r11
	add	rax, -32
	mov	qword ptr [r12 + 160], rax
	mov	r15, qword ptr [r14 + 8]
	mov	rax, r15
	adc	rax, -1
	mov	qword ptr [r12 + 168], rax
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, rcx
	adc	rax, -1
	mov	qword ptr [r12 + 176], rax
	mov	rax, qword ptr [r14 + 24]
	mov	r14, rax
	adc	r14, -1
	mov	qword ptr [r12 + 184], r14
	sub	r9, r11
	sbb	r10, r15
	sbb	rdi, rcx
	sbb	r8, rax
	add	r9, 482
	adc	r10, 0
	adc	rdi, 0
	adc	r8, 0
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 16], rdi
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13], r9
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], r15
	mov	qword ptr [rbx], r11
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax + 24], rsi
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rax + 16], rcx
	mov	qword ptr [rax + 8], rdx
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rax], rcx
	mov	rax, qword ptr [rbp - 160]      # 8-byte Reload
	mov	rax, qword ptr [rax + 8]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rcx + 8], xmm0
	mov	qword ptr [rcx + 24], 0
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, rbx
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	edx, 17
	mov	ecx, 3
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_1648
# %bb.1433:
	lea	rax, [rip + .Ltmp14]
	mov	r13, qword ptr [rbp - 224]      # 8-byte Reload
	jmp	.LBB0_1561
.LBB0_1434:                             # %dynamic_jump_table
	mov	rdi, rcx
	xor	rdi, 4366
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_1553
# %bb.1435:                             # %dynamic_jump_table
	xor	rcx, 4386
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_195
	jmp	.LBB0_1569
.LBB0_1436:                             # %dynamic_jump_table
	xor	rdi, 5529
	or	rdi, r14
	or	rax, rsi
	or	rdi, rax
	je	.LBB0_252
# %bb.1437:                             # %dynamic_jump_table
	xor	rcx, 5549
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_275
	jmp	.LBB0_1569
.LBB0_1438:                             # %dynamic_jump_table
	xor	rcx, 4645
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.1439:                             # %OP2273.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovdqu	ymm0, ymmword ptr [r12 + rax - 224]
	vmovups	ymm1, ymmword ptr [r12 + rax - 32]
	vmovups	ymmword ptr [r12 + rax - 64], ymm1
	vxorps	xmm1, xmm1, xmm1
	vmovaps	xmmword ptr [r12 + rax - 16], xmm1
	vmovaps	xmmword ptr [r12 + rax - 32], xmm1
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI0_86] # xmm1 = [4659,0,0,0]
	vmovdqu	ymmword ptr [r12 + rax], ymm1
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	lea	rbx, [r12 + rax]
	add	rbx, -192
	jmp	.LBB0_283
.LBB0_1440:                             # %dynamic_jump_table
	xor	rcx, 10839
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_330
	jmp	.LBB0_1569
.LBB0_1441:                             # %dynamic_jump_table
	xor	rcx, 1076
	or	rcx, rdx
	or	rax, rsi
	or	rax, rcx
	jne	.LBB0_1569
# %bb.1442:                             # %OP629.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	jmp	.LBB0_116
.LBB0_1443:                             # %dynamic_jump_table
	xor	rcx, 9964
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_284
	jmp	.LBB0_1569
.LBB0_815:                              # %dynamic_jump_table
	xor	rcx, 6290
	or	rcx, r14
	or	rcx, rax
	jne	.LBB0_1569
# %bb.816:                              # %OP3130.JUMPDEST.loopexit
	mov	r14, r13
.LBB0_817:                              # %OP3130.JUMPDEST
	lea	r13, [r14 + 1]
	mov	r15, r14
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.818:                              # %OP3132.MLOAD.contd
	add	r15, r12
	mov	rax, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	add	r14, 2
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	rbx, r13
	shl	rbx, 5
	mov	r13, r12
	mov	qword ptr [rbp - 72], r14       # 8-byte Spill
	mov	r12, r14
	shl	r12, 5
	add	r8, 64
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r13 + rbx], r8
	mov	qword ptr [r13 + rbx + 16], r10
	mov	qword ptr [r13 + rbx + 8], r9
	mov	qword ptr [r13 + rbx + 24], rax
	mov	qword ptr [r13 + r12 + 16], 0
	mov	qword ptr [r13 + r12], 64
	mov	qword ptr [r13 + r12 + 24], 0
	mov	qword ptr [r13 + r12 + 8], 0
	sub	rsp, 8
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	push	r14
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.819:                              # %OP3138.DUP1
	add	rbx, r13
	add	r12, r13
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 6
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 6
	xor	r9d, r9d
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.820:                              # %OP3142.PUSH1
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	movabs	rax, 6146931000475779072
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	mov	r13, r14
	push	r14
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1636
# %bb.821:                              # %OP3147.POP
	mov	rcx, qword ptr [r15 - 32]
	mov	rax, qword ptr [r15 - 24]
	mov	rsi, qword ptr [r15 - 8]
	mov	r14, qword ptr [r15 - 16]
	mov	qword ptr [rbx + 16], r14
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 8], rax
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_822:                              # %dynamic_jump_table.preheader
	mov	r11, r13
	jmp	.LBB0_51
.LBB0_1444:                             # %dynamic_jump_table
	xor	rcx, 3415
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_46
	jmp	.LBB0_1569
.LBB0_1445:                             # %dynamic_jump_table
	xor	rcx, 8155
.LBB0_1446:                             # %dynamic_jump_table
	or	rcx, r14
	or	rcx, rax
	je	.LBB0_1454
	jmp	.LBB0_1569
.LBB0_1447:                             # %OP1792.JUMPDEST.loopexit
	mov	rsi, r13
	shl	rsi, 5
	mov	r15, qword ptr [r12 + rsi - 40]
	mov	r11, qword ptr [r12 + rsi - 48]
	mov	rbx, qword ptr [r12 + rsi - 64]
	mov	r14, qword ptr [r12 + rsi - 56]
	mov	rax, qword ptr [r12 + rsi - 8]
	mov	rdx, qword ptr [r12 + rsi - 16]
	mov	rcx, qword ptr [r12 + rsi - 24]
	mov	rsi, qword ptr [r12 + rsi - 32]
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	jmp	.LBB0_56
.LBB0_1448:                             # %OP1821.JUMPDEST.loopexit
	mov	r15, r13
	jmp	.LBB0_61
.LBB0_1449:                             # %OP1809.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_93
.LBB0_1450:                             # %OP1816.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_109
.LBB0_1451:                             # %OP2866.JUMPDEST
	mov	rdi, r13
	shl	rdi, 5
	lea	rax, [r12 + rdi]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_63] # xmm0 = [5784,0,0,0]
	vmovups	ymmword ptr [r12 + rdi], ymm0
	vmovups	ymm0, ymmword ptr [r12 + rdi - 224]
	vmovups	ymmword ptr [r12 + rdi + 32], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 + rdi - 384]
	vmovdqu	ymmword ptr [r12 + rdi + 64], ymm0
	mov	rcx, qword ptr [r12 + rdi - 328]
	mov	rdx, qword ptr [r12 + rdi - 336]
	mov	rsi, qword ptr [r12 + rdi - 344]
	mov	rdi, qword ptr [r12 + rdi - 352]
	jmp	.LBB0_1453
.LBB0_1452:                             # %OP2873.JUMPDEST
	mov	rdi, r13
	shl	rdi, 5
	lea	rax, [r12 + rdi]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_62] # xmm0 = [5795,0,0,0]
	vmovups	ymmword ptr [r12 + rdi], ymm0
	vmovups	ymm0, ymmword ptr [r12 + rdi - 192]
	vmovups	ymmword ptr [r12 + rdi + 32], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 + rdi - 384]
	vmovdqu	ymmword ptr [r12 + rdi + 64], ymm0
	mov	rcx, qword ptr [r12 + rdi - 296]
	mov	rdx, qword ptr [r12 + rdi - 304]
	mov	rsi, qword ptr [r12 + rdi - 312]
	mov	rdi, qword ptr [r12 + rdi - 320]
.LBB0_1453:                             # %OP3974.JUMPDEST.sink.split
	add	r13, 4
	mov	qword ptr [rax + 96], rdi
	mov	qword ptr [rax + 104], rsi
	mov	qword ptr [rax + 112], rdx
	mov	qword ptr [rax + 120], rcx
.LBB0_1454:                             # %OP3974.JUMPDEST
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	lea	r15, [r13 + 2]
	vmovdqu	ymmword ptr [r12 + r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.1455:                             # %OP3977.MLOAD.contd
	add	r14, r12
	mov	rax, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 48], r10
	mov	qword ptr [r14 + 32], r8
	mov	qword ptr [r14 + 56], rax
	mov	qword ptr [r14 + 40], r9
	lea	r11, [r13 + 3]
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rbx, r12
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	mov	r12, r11
	shl	r12, 5
	add	r8, rdi
	adc	r9, rsi
	adc	r10, rdx
	adc	rax, rcx
	mov	qword ptr [rbx + r15], r8
	mov	qword ptr [rbx + r15 + 16], r10
	mov	qword ptr [rbx + r15 + 8], r9
	mov	qword ptr [rbx + r15 + 24], rax
	mov	qword ptr [rbx + r12 + 16], rdx
	mov	qword ptr [rbx + r12], rdi
	mov	qword ptr [rbx + r12 + 24], rcx
	mov	qword ptr [rbx + r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1456:                             # %OP3983.PUSH1
	add	r15, rbx
	add	r12, rbx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_110] # xmm0 = [25,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r14 + 56]
	mov	rdi, qword ptr [r14 + 32]
	mov	rsi, qword ptr [r14 + 40]
	mov	rdx, qword ptr [r14 + 48]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 25
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1457:                             # %OP3986.PUSH32
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_111] # ymm0 = [2954361355555045376,3203582633060742454,2909717216836809587,8390876182755042674]
	vmovups	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r14 + 56]
	mov	rdx, qword ptr [r14 + 48]
	mov	rdi, qword ptr [r14 + 32]
	mov	rsi, qword ptr [r14 + 40]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 4
	mov	qword ptr [rbp - 128], r13      # 8-byte Spill
	shl	r13, 5
	vmovdqu	ymmword ptr [rbx + r13], ymm0
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	sub	rsp, 8
	movabs	rax, 8390876182755042674
	movabs	r10, 2909717216836809587
	movabs	r8, 2954361355555045376
	movabs	r9, 3203582633060742454
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1458:                             # %OP3992.DUP2
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1629
# %bb.1459:                             # %OP3993.MLOAD.contd
	mov	r8, r15
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	lea	r11, [r10 + 5]
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r15
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r8 + 16], rdx
	mov	qword ptr [r8], rdi
	mov	qword ptr [r8 + 24], rcx
	mov	qword ptr [rbp - 224], r8       # 8-byte Spill
	mov	qword ptr [r8 + 8], rsi
	mov	eax, 4294967295
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], -1
	mov	qword ptr [r12], -1
	mov	r9, qword ptr [r14 - 56]
	mov	r8, qword ptr [r14 - 64]
	mov	eax, dword ptr [r14 - 48]
	add	r10, 6
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	rbx, r11
	shl	rbx, 5
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	r13, r10
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	qword ptr [r15 + r13], rdi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + rbx + 24], rcx
	mov	qword ptr [r15 + rbx + 16], rdx
	mov	qword ptr [r15 + rbx + 8], rsi
	mov	qword ptr [r15 + rbx], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1460:                             # %OP4002.PUSH1
	add	rbx, r15
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_112] # xmm0 = [68,0]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r14 + 88]
	mov	rdx, qword ptr [r14 + 80]
	mov	rsi, qword ptr [r14 + 72]
	mov	rdi, qword ptr [r14 + 64]
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [r14 - 8]
	mov	r8, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	r10, qword ptr [r14 - 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1461:                             # %OP4009.DUP5
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r15, rbx
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_717
# %bb.1462:                             # %OP4010.MLOAD.contd
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [r14 + 88]
	mov	r8, qword ptr [r14 + 64]
	mov	r9, qword ptr [r14 + 72]
	mov	r10, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 240], r10
	mov	qword ptr [r14 + 224], r8
	mov	qword ptr [r14 + 248], rax
	mov	qword ptr [r14 + 232], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r8, qword ptr [r13]
	adc	r9, qword ptr [r13 + 8]
	adc	r10, qword ptr [r13 + 16]
	adc	rax, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r10
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1638
# %bb.1463:                             # %OP4019.PUSH1
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdi, qword ptr [r13 + 24]
	mov	r10, qword ptr [r14 + 88]
	mov	rax, qword ptr [r14 + 80]
	mov	r8, qword ptr [r14 + 64]
	mov	r9, qword ptr [r14 + 72]
	mov	qword ptr [r14 + 88], rdi
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 80], rcx
	mov	qword ptr [r14 + 64], rdx
	add	r8, 100
	adc	r9, 0
	adc	rax, 0
	adc	r10, 0
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rax
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	mov	qword ptr [r15 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1464:                             # %OP4025.SWAP2
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r14 + 56]
	mov	rdx, qword ptr [r14 + 48]
	mov	rdi, qword ptr [r14 + 32]
	mov	rsi, qword ptr [r14 + 40]
	mov	qword ptr [r14 + 48], r10
	mov	qword ptr [r14 + 32], r8
	mov	qword ptr [r14 + 56], rax
	mov	qword ptr [r14 + 40], r9
	mov	r15, qword ptr [rbp - 224]      # 8-byte Reload
	add	rdi, qword ptr [r15]
	adc	rsi, qword ptr [r15 + 8]
	adc	rdx, qword ptr [r15 + 16]
	adc	rcx, qword ptr [r15 + 24]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1638
# %bb.1465:                             # %OP4029.MLOAD.contd
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	ecx, dword ptr [rbx + 24]
	movabs	r10, -6267430979443359744
	or	r10, rcx
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 16]
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_667
# %bb.1466:                             # %OP4036.SWAP3
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_667
# %bb.1467:                             # %OP4037.MLOAD.contd
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rcx
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1638
# %bb.1468:                             # %OP4039.MLOAD.contd
	mov	rax, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	mov	r15, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 8], 0
	mov	rdi, qword ptr [r14 - 80]
	and	rdi, qword ptr [r14 + 48]
	mov	qword ptr [r14 + 48], 0
	mov	r8, qword ptr [r14 - 72]
	and	r8, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 56], 0
	mov	r9, qword ptr [r14 - 96]
	and	r9, qword ptr [r14 + 32]
	mov	r10, qword ptr [r14 - 88]
	mov	qword ptr [r14 + 32], 96
	and	r10, qword ptr [r14 + 40]
	mov	qword ptr [r14 + 40], 0
	mov	r11, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 80], rdi
	mov	r12, qword ptr [r14 + 88]
	mov	qword ptr [r14 + 88], r8
	mov	rax, qword ptr [r14 + 64]
	mov	qword ptr [r14 + 64], r9
	mov	rcx, qword ptr [r14 + 72]
	mov	qword ptr [r14 + 72], r10
	mov	rdi, qword ptr [r14 + 112]
	mov	qword ptr [r14 + 112], r11
	mov	r9, qword ptr [r14 + 120]
	mov	qword ptr [r14 + 120], r12
	mov	r8, qword ptr [r14 + 96]
	mov	qword ptr [r14 + 96], rax
	mov	rax, qword ptr [r14 + 104]
	mov	qword ptr [r14 + 104], rcx
	mov	qword ptr [r13 + 24], r9
	mov	qword ptr [r13 + 8], rax
	mov	qword ptr [r13 + 16], rdi
	mov	qword ptr [r13], r8
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rcx + 24], r9
	mov	qword ptr [rcx + 8], rax
	mov	qword ptr [rcx + 16], rdi
	mov	qword ptr [rcx], r8
	mov	rcx, qword ptr [rbx]
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r10 + 24], rsi
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10], r15
	mov	r12, qword ptr [rbp - 224]      # 8-byte Reload
	mov	qword ptr [r10 + 16], r12
	mov	r10, qword ptr [rbx + 8]
	mov	r11, qword ptr [rbx + 16]
	mov	rbx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 248], rbx
	mov	qword ptr [r14 + 240], r11
	mov	qword ptr [r14 + 232], r10
	mov	qword ptr [r14 + 224], rcx
	mov	qword ptr [r14 + 280], rbx
	mov	qword ptr [r14 + 272], r11
	mov	qword ptr [r14 + 264], r10
	mov	qword ptr [r14 + 256], rcx
	mov	qword ptr [r14 + 312], r9
	mov	qword ptr [r14 + 304], rdi
	mov	qword ptr [r14 + 296], rax
	mov	qword ptr [r14 + 288], r8
	mov	qword ptr [r14 + 344], rsi
	mov	qword ptr [r14 + 336], r12
	mov	qword ptr [r14 + 328], rdx
	mov	qword ptr [r14 + 320], r15
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	add	r14, 11
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
.LBB0_1469:                             # %OP4055.JUMPDEST.preheader
	lea	r11, [r14 + 1]
	mov	r15, r14
	shl	r15, 5
	mov	r13, r11
	shl	r13, 5
	mov	rax, qword ptr [r12 + r15 - 72]
	mov	rdx, qword ptr [r12 + r15 - 96]
	mov	rdi, qword ptr [r12 + r15 - 88]
	mov	rcx, qword ptr [r12 + r15 - 80]
	mov	qword ptr [r12 + r13 + 16], rcx
	mov	qword ptr [r12 + r13], rdx
	mov	qword ptr [r12 + r13 + 24], rax
	mov	qword ptr [r12 + r13 + 8], rdi
	cmp	rdx, 32
	mov	rsi, rdi
	sbb	rsi, 0
	mov	rsi, rcx
	sbb	rsi, 0
	mov	rsi, rax
	sbb	rsi, 0
	setb	sil
	movzx	esi, sil
	mov	qword ptr [r12 + r15], rsi
	mov	qword ptr [r12 + r15 + 16], 0
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [r12 + r15 + 8], 0
	jb	.LBB0_1475
# %bb.1470:                             # %OP4061.DUP1.lr.ph
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	add	r15, r12
	add	r13, r12
	mov	r8, qword ptr [r15 - 8]
	mov	r9, qword ptr [r15 - 16]
	mov	rbx, qword ptr [r15 - 32]
	mov	r10, qword ptr [r15 - 24]
	vpxor	xmm0, xmm0, xmm0
	.p2align	4, 0x90
.LBB0_1471:                             # %OP4061.DUP1
                                        # =>This Inner Loop Header: Depth=1
	mov	r14, r13
	mov	qword ptr [r15], rbx
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15 + 16], r9
	mov	qword ptr [r15 + 24], r8
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, qword ptr [rax + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	mov	rsi, rbx
	add	rsi, 32
	mov	rcx, -1
	cmovb	rsi, rcx
	neg	r10
	mov	ecx, 0
	sbb	rcx, r9
	mov	ecx, 0
	sbb	rcx, r8
	mov	r8, -1
	cmovb	rsi, r8
	mov	r9, r13
	cmp	rsi, rax
	ja	.LBB0_1482
.LBB0_1472:                             # %OP4062.MLOAD.contd
                                        #   in Loop: Header=BB0_1471 Depth=1
	add	r12, qword ptr [r13 + 8]
	mov	r10, qword ptr [rbx + r12 + 24]
	mov	rax, qword ptr [rbx + r12 + 16]
	mov	rcx, qword ptr [rbx + r12]
	mov	rbx, qword ptr [rbx + r12 + 8]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	movbe	qword ptr [r15 + 24], rcx
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	movbe	qword ptr [r15 + 8], rax
	movbe	qword ptr [r15], r10
	movbe	qword ptr [r15 + 16], rbx
	mov	rax, qword ptr [r15 - 48]
	mov	r12, qword ptr [r15 - 64]
	mov	rcx, qword ptr [r15 - 56]
	mov	rdx, qword ptr [r15 - 40]
	mov	qword ptr [r14 + 24], rdx
	mov	qword ptr [r14 + 8], rcx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r12
	mov	rdi, qword ptr [r9 + 16]
	mov	r13, qword ptr [r9 + 48]
	sub	rdi, r13
	mov	rsi, r12
	add	rsi, 32
	cmovb	rsi, r8
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	mov	eax, 0
	sbb	rax, rdx
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB0_1484
.LBB0_1473:                             # %OP4065.PUSH32
                                        #   in Loop: Header=BB0_1471 Depth=1
	add	r13, qword ptr [r9 + 8]
	mov	qword ptr [r12 + r13 + 8], rbx
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + r13], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [r12 + r13 + 16], rax
	mov	qword ptr [r12 + r13 + 24], r10
	mov	r8, qword ptr [r15 - 8]
	mov	r9, qword ptr [r15 - 16]
	mov	r10, qword ptr [r15 - 24]
	mov	rbx, qword ptr [r15 - 32]
	mov	rax, qword ptr [r15 - 72]
	mov	rcx, qword ptr [r15 - 80]
	mov	rdx, qword ptr [r15 - 96]
	mov	rdi, qword ptr [r15 - 88]
	add	rdx, -32
	adc	rdi, -1
	adc	rcx, -1
	adc	rax, -1
	mov	qword ptr [r15 - 96], rdx
	mov	qword ptr [r15 - 80], rcx
	mov	qword ptr [r15 - 88], rdi
	mov	qword ptr [r15 - 72], rax
	add	qword ptr [r15 - 64], 32
	adc	qword ptr [r15 - 56], 0
	adc	qword ptr [r15 - 48], 0
	adc	qword ptr [r15 - 40], 0
	add	rbx, 32
	adc	r10, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r15 - 32], rbx
	mov	qword ptr [r15 - 16], r9
	mov	qword ptr [r15 - 24], r10
	mov	qword ptr [r15 - 8], r8
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	cmp	rdx, 32
	mov	rsi, rdi
	sbb	rsi, 0
	mov	rsi, rcx
	sbb	rsi, 0
	mov	rsi, rax
	sbb	rsi, 0
	setb	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], 0
	mov	r13, r14
	jae	.LBB0_1471
	jmp	.LBB0_1474
.LBB0_1482:                             # %resize.i24597
                                        #   in Loop: Header=BB0_1471 Depth=1
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_717
# %bb.1483:                             # %resize.i24597.OP4062.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB0_1471 Depth=1
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r8, -1
	vpxor	xmm0, xmm0, xmm0
	jmp	.LBB0_1472
.LBB0_1484:                             # %resize.i24612
                                        #   in Loop: Header=BB0_1471 Depth=1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	qword ptr [rbp - 224], r9       # 8-byte Spill
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 224]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	test	al, al
	je	.LBB0_1473
	jmp	.LBB0_1629
.LBB0_1474:
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
.LBB0_1475:                             # %OP4078.JUMPDEST
	mov	r15, r14
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_22] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	lea	rbx, [r14 + 2]
	lea	rsi, [r12 + r15]
	add	rsi, 32
	mov	r13, rbx
	shl	r13, 5
	xor	r8d, r8d
	mov	r9d, 32
	sub	r9, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edi, 0
	sbb	rdi, rcx
	sbb	r8, rax
	mov	qword ptr [r12 + r15 + 32], r9
	mov	qword ptr [r12 + r15 + 48], rdi
	mov	qword ptr [r12 + r15 + 40], rdx
	mov	qword ptr [r12 + r15 + 56], r8
	mov	qword ptr [r12 + r13 + 16], 0
	mov	qword ptr [r12 + r13], 256
	mov	qword ptr [r12 + r13 + 24], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB0_1639
# %bb.1476:                             # %OP4085.SUB
	add	r15, r12
	lea	rax, [r14 + 3]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	add	r13, r12
	mov	rax, qword ptr [r15 + 56]
	mov	rcx, qword ptr [r15 + 48]
	mov	rdx, qword ptr [r15 + 40]
	mov	rsi, qword ptr [r15 + 32]
	sub	rsi, qword ptr [r15]
	sbb	rdx, qword ptr [r15 + 8]
	sbb	rcx, qword ptr [r15 + 16]
	sbb	rax, qword ptr [r15 + 24]
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 24], rax
	not	rax
	not	rdx
	not	rcx
	not	rsi
	mov	qword ptr [r15 + 32], rsi
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 56], rax
	mov	rcx, qword ptr [r15 - 8]
	mov	rdi, qword ptr [r15 - 32]
	mov	rsi, qword ptr [r15 - 24]
	mov	rdx, qword ptr [r15 - 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1642
# %bb.1477:                             # %OP4089.MLOAD.contd
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	and	qword ptr [r15 + 48], rdx
	and	qword ptr [r15 + 56], rcx
	and	qword ptr [r15 + 32], rax
	mov	rax, qword ptr [rbx + 8]
	and	qword ptr [r15 + 40], rax
	vmovdqu	ymm0, ymmword ptr [r15]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	lea	rax, [r14 + 4]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rdi, qword ptr [r15 - 64]
	mov	rsi, qword ptr [r15 - 56]
	mov	rcx, qword ptr [r15 - 40]
	mov	rdx, qword ptr [r15 - 48]
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	shl	r14, 5
	mov	qword ptr [r12 + r14 + 16], rdx
	mov	qword ptr [r12 + r14 + 24], rcx
	mov	qword ptr [r12 + r14], rdi
	mov	qword ptr [r12 + r14 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1478:                             # %OP4093.MLOAD.contd
	add	r14, r12
	mov	rax, qword ptr [r13 + 16]
	mov	r10, qword ptr [r13 + 24]
	mov	r9, qword ptr [r13 + 8]
	and	r9, qword ptr [rbx + 8]
	and	r10, qword ptr [rbx + 24]
	mov	r8, qword ptr [r13]
	and	r8, qword ptr [rbx]
	and	rax, qword ptr [rbx + 16]
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	shl	r11, 5
	or	rax, qword ptr [r15 + 48]
	or	r8, qword ptr [r15 + 32]
	or	r9, qword ptr [r15 + 40]
	or	r10, qword ptr [r15 + 56]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], rax
	mov	rdi, qword ptr [r15 - 64]
	mov	rdx, qword ptr [r15 - 48]
	mov	rsi, qword ptr [r15 - 56]
	mov	rcx, qword ptr [r15 - 40]
	mov	qword ptr [r12 + r11 + 24], rcx
	mov	qword ptr [r12 + r11 + 16], rdx
	mov	qword ptr [r12 + r11 + 8], rsi
	mov	qword ptr [r12 + r11], rdi
	sub	rsp, 8
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	push	r14
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1642
# %bb.1479:                             # %OP4100.POP
	mov	rax, qword ptr [r15 - 120]
	mov	rcx, qword ptr [r15 - 128]
	mov	rdx, qword ptr [r15 - 104]
	mov	rsi, qword ptr [r15 - 112]
	vmovaps	xmm0, xmmword ptr [r15 - 160]
	vmovdqa	xmm1, xmmword ptr [r15 - 144]
	mov	qword ptr [r15 - 144], rsi
	mov	qword ptr [r15 - 136], rdx
	mov	qword ptr [r15 - 160], rcx
	mov	qword ptr [r15 - 152], rax
	vmovdqa	xmmword ptr [r15 - 112], xmm1
	vmovaps	xmmword ptr [r15 - 128], xmm0
	add	rcx, qword ptr [r15 - 192]
	adc	rax, qword ptr [r15 - 184]
	adc	rsi, qword ptr [r15 - 176]
	adc	rdx, qword ptr [r15 - 168]
	mov	qword ptr [r15 - 256], rcx
	mov	qword ptr [r15 - 248], rax
	mov	qword ptr [r15 - 240], rsi
	mov	qword ptr [r15 - 232], rdx
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 - 224], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 - 192], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r14
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1647
# %bb.1480:                             # %OP4114.MLOAD.contd
	lea	rsi, [r15 - 224]
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [r15 - 176], rdi
	mov	qword ptr [r15 - 168], rdx
	mov	qword ptr [r15 - 192], rax
	mov	qword ptr [r15 - 184], rcx
	mov	r8, qword ptr [r15 - 232]
	mov	r9, qword ptr [r15 - 240]
	mov	r10, qword ptr [r15 - 248]
	mov	r11, qword ptr [r15 - 256]
	sub	r11, rax
	sbb	r10, rcx
	sbb	r9, rdi
	sbb	r8, rdx
	mov	qword ptr [r15 - 160], r11
	mov	qword ptr [r15 - 152], r10
	mov	qword ptr [r15 - 144], r9
	mov	qword ptr [r15 - 136], r8
	mov	qword ptr [r15 - 112], rdi
	mov	qword ptr [r15 - 104], rdx
	mov	qword ptr [r15 - 128], rax
	mov	qword ptr [r15 - 120], rcx
	mov	qword ptr [r15 - 80], 0
	mov	qword ptr [r15 - 72], 0
	mov	qword ptr [r15 - 96], 0
	mov	qword ptr [r15 - 88], 0
	mov	rax, qword ptr [r15 - 288]
	mov	rcx, qword ptr [r15 - 280]
	mov	rdx, qword ptr [r15 - 264]
	mov	rdi, qword ptr [r15 - 272]
	mov	qword ptr [r15 - 48], rdi
	mov	qword ptr [r15 - 40], rdx
	mov	qword ptr [r15 - 64], rax
	mov	qword ptr [r15 - 56], rcx
	mov	rax, qword ptr [rbp - 160]      # 8-byte Reload
	mov	rax, qword ptr [rax + 8]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 - 24], xmm0
	mov	qword ptr [r15 - 32], rax
	mov	qword ptr [r15 - 8], 0
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	add	r13, -7
	mov	rbx, r14
	mov	rdi, r14
	mov	edx, 17
	xor	ecx, ecx
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1481:
	lea	rax, [rip + .Ltmp13]
	jmp	.LBB0_1561
.LBB0_1485:                             # %OP2880.JUMPDEST
	mov	r14, r13
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	lea	r15, [r13 + 2]
	vmovdqu	ymmword ptr [r12 + r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.1486:                             # %OP2883.MLOAD.contd
	add	r14, r12
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.1487:                             # %OP2887.ADDRESS
	add	rbx, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 48]
	mov	rsi, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 120], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.1488:                             # %OP2892.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14 + 32]
	vmovdqa	xmm1, xmmword ptr [r14 + 48]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 40], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_494
# %bb.1489:                             # %OP2893.MLOAD.contd
	mov	rsi, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	eax, dword ptr [r14 - 208]
	mov	rcx, qword ptr [r14 - 224]
	mov	rdx, qword ptr [r14 - 216]
	mov	r8, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14 + 16]
	mov	r10, qword ptr [r14 + 8]
	mov	r11, qword ptr [r14]
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	mov	qword ptr [r14 + 32], 1889567281
	mov	qword ptr [r14 + 40], 0
	mov	r15, r11
	add	r15, 36
	mov	qword ptr [r14 + 64], r15
	mov	r15, r10
	adc	r15, 0
	mov	qword ptr [r14 + 72], r15
	mov	r15, r9
	adc	r15, 0
	mov	qword ptr [r14 + 80], r15
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [r14 + 88], r15
	mov	r15, qword ptr [rbx + 24]
	mov	rbx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 112], 0
	mov	qword ptr [r14 + 120], 0
	mov	qword ptr [r14 + 96], 32
	mov	qword ptr [r14 + 104], 0
	mov	qword ptr [r14 + 144], rbx
	mov	qword ptr [r14 + 152], r15
	mov	qword ptr [r14 + 128], rsi
	mov	qword ptr [r14 + 136], rdi
	sub	r11, rsi
	sbb	r10, rdi
	sbb	r9, rbx
	sbb	r8, r15
	add	r11, 36
	mov	qword ptr [r14 + 160], r11
	adc	r10, 0
	mov	qword ptr [r14 + 168], r10
	adc	r9, 0
	mov	qword ptr [r14 + 176], r9
	adc	r8, 0
	mov	qword ptr [r14 + 184], r8
	mov	qword ptr [r14 + 208], rbx
	mov	qword ptr [r14 + 216], r15
	mov	qword ptr [r14 + 192], rsi
	mov	qword ptr [r14 + 200], rdi
	mov	qword ptr [r14 + 224], rcx
	mov	qword ptr [r14 + 232], rdx
	mov	qword ptr [r14 + 240], rax
	mov	qword ptr [r14 + 248], 0
	mov	qword ptr [r14 + 256], rcx
	mov	qword ptr [r14 + 264], rdx
	add	r13, 9
	mov	qword ptr [r14 + 272], rax
	lea	rbx, [r14 + 256]
	mov	qword ptr [r14 + 280], 0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1490:                             # %OP2917.ISZERO
	mov	rcx, qword ptr [rbx + 8]
	or	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	or	rdx, qword ptr [rbx + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_1571
# %bb.1491:
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_1504
.LBB0_1492:                             # %OP3317.JUMPDEST
	mov	r15, r12
	lea	r12, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r15 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_27] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r15 + rax], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_1644
# %bb.1493:                             # %OP3320.PUSH1
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	lea	rax, [r13 + 3]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1494:                             # %OP3322.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	shl	r14, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r15 + r14 + 24], rax
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14], 0
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1495:                             # %OP3326.ADDRESS
	add	r14, r15
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], 0
	mov	rdi, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 80]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 160], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1496:                             # %OP3331.SWAP1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r12, r15
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1497:                             # %OP3332.MLOAD.contd
	mov	r10, qword ptr [rbx + 24]
	mov	r11, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx], 6858
	mov	qword ptr [rbx + 8], 0
	mov	rax, qword ptr [rbx - 24]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rcx, qword ptr [rbx - 32]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	r12, qword ptr [rbx - 8]
	mov	r15, qword ptr [rbx - 16]
	mov	rdx, qword ptr [rbx + 56]
	mov	rsi, qword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx + 40]
	mov	r8, qword ptr [rbx + 32]
	mov	qword ptr [rbx + 48], r15
	mov	qword ptr [rbx + 56], r12
	mov	qword ptr [rbx + 32], rcx
	mov	qword ptr [rbx + 40], rax
	mov	r12, qword ptr [rbx - 96]
	mov	r13, qword ptr [rbx - 88]
	mov	rax, qword ptr [rbx - 72]
	mov	rcx, qword ptr [rbx - 80]
	mov	qword ptr [rbx + 80], rcx
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 64], r12
	mov	qword ptr [rbx + 72], r13
	shrd	r9, r11, 48
	shld	r10, r11, 16
	mov	al, 48
	bzhi	rax, r10, rax
	mov	r10, qword ptr [r14]
	mov	qword ptr [rbx + 112], 0
	mov	qword ptr [rbx + 120], 0
	mov	qword ptr [rbx + 96], 6694
	mov	qword ptr [rbx + 104], 0
	mov	qword ptr [rbx + 128], r9
	mov	r11, qword ptr [r14 + 8]
	mov	qword ptr [rbx + 136], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 152], 0
	mov	r9d, r15d
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbx + 160], rcx
	mov	r12, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbx + 168], r12
	mov	qword ptr [rbx + 176], r9
	mov	qword ptr [rbx + 184], 0
	mov	qword ptr [rbx + 208], 0
	mov	qword ptr [rbx + 216], 0
	mov	qword ptr [rbx + 192], 1889567281
	mov	qword ptr [rbx + 200], 0
	mov	rax, r8
	add	rax, 36
	mov	qword ptr [rbx + 224], rax
	mov	rax, rdi
	adc	rax, 0
	mov	qword ptr [rbx + 232], rax
	mov	rax, rsi
	adc	rax, 0
	mov	qword ptr [rbx + 240], rax
	mov	rax, rdx
	adc	rax, 0
	mov	qword ptr [rbx + 248], rax
	mov	r15, qword ptr [r14 + 24]
	mov	r14, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 272], 0
	mov	qword ptr [rbx + 280], 0
	mov	qword ptr [rbx + 256], 32
	mov	qword ptr [rbx + 264], 0
	mov	qword ptr [rbx + 304], r14
	mov	qword ptr [rbx + 312], r15
	mov	qword ptr [rbx + 288], r10
	mov	qword ptr [rbx + 296], r11
	sub	r8, r10
	sbb	rdi, r11
	sbb	rsi, r14
	sbb	rdx, r15
	add	r8, 36
	mov	qword ptr [rbx + 320], r8
	adc	rdi, 0
	mov	qword ptr [rbx + 328], rdi
	adc	rsi, 0
	mov	qword ptr [rbx + 336], rsi
	adc	rdx, 0
	mov	qword ptr [rbx + 344], rdx
	mov	qword ptr [rbx + 368], r14
	mov	qword ptr [rbx + 376], r15
	mov	qword ptr [rbx + 352], r10
	mov	qword ptr [rbx + 360], r11
	mov	qword ptr [rbx + 384], rcx
	mov	qword ptr [rbx + 392], r12
	mov	qword ptr [rbx + 400], r9
	mov	qword ptr [rbx + 408], 0
	mov	qword ptr [rbx + 416], rcx
	mov	qword ptr [rbx + 424], r12
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 14
	mov	qword ptr [rbx + 432], r9
	lea	r14, [rbx + 416]
	mov	qword ptr [rbx + 440], 0
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r15
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1498:                             # %OP3371.ISZERO
	mov	r11, r15
	mov	rcx, qword ptr [r14 + 8]
	or	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14]
	or	rdx, qword ptr [r14 + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], 0
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jne	.LBB0_1559
# %bb.1499:                             # %OP3376.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [rbx + 480], ymm0
	jmp	.LBB0_1238
.LBB0_1500:                             # %OP4233.JUMPDEST.loopexit
	mov	r11, r15
	jmp	.LBB0_272
.LBB0_1501:                             # %OP2406.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_75] # xmm0 = [4924,0,0,0]
	vmovups	ymmword ptr [r12 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 + rax - 256]
	vmovdqu	ymm1, ymmword ptr [r12 + rax - 224]
	vmovups	ymm2, ymmword ptr [r12 + rax - 192]
	vmovups	ymm3, ymmword ptr [r12 + rax - 160]
	vmovups	ymmword ptr [r12 + rax + 32], ymm2
	vmovups	ymmword ptr [r12 + rax + 64], ymm3
	vmovdqu	ymmword ptr [r12 + rax + 96], ymm0
	mov	rbx, r13
	add	rbx, 5
	vmovdqu	ymmword ptr [r12 + rax + 128], ymm1
	jmp	.LBB0_319
.LBB0_1502:                             # %OP4196.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_269
.LBB0_1503:                             # %OP2925.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
.LBB0_1504:                             # %OP2925.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1505:
	lea	rax, [rip + .Ltmp9]
	jmp	.LBB0_1561
.LBB0_1506:                             # %OP3025.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_315
.LBB0_1507:                             # %OP3836.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB0_1517
.LBB0_1508:                             # %OP3785.JUMPDEST.loopexit
	lea	r14, [r13 + 1]
.LBB0_1509:                             # %OP3785.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r12 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + rax], ymm0
	mov	r15, r14
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12 + r15], ymm0
	mov	rdi, r11
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1510:                             # %OP3789.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_71] # xmm0 = [6,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_564
# %bb.1511:                             # %OP3791.PUSH1
	add	r15, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	r13, 3
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.1512:                             # %OP3793.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	movabs	rax, 8115629675486642176
	mov	qword ptr [r12 + r13 + 24], rax
	mov	qword ptr [r12 + r13 + 16], 0
	mov	qword ptr [r12 + r13], 0
	mov	qword ptr [r12 + r13 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1513:                             # %OP3797.ADDRESS
	add	r13, r12
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	rcx, qword ptr [rax + 136]
	movbe	rax, qword ptr [rax + 128]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], 0
	mov	rdi, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 80]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 160], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	push	r12
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1514:                             # %OP3802.SWAP1
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_693
# %bb.1515:                             # %OP3803.MLOAD.contd
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 88], rsi
	mov	qword ptr [rbx + 72], rdx
	mov	qword ptr [rbx + 80], rax
	mov	qword ptr [rbx + 64], rcx
	mov	ecx, dword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx], 8148
	mov	qword ptr [rbx + 16], 0
	mov	eax, 4294967295
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], -1
	mov	qword ptr [rbx + 128], -1
	mov	qword ptr [r13 + 8], r8
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], 0
	mov	rdx, qword ptr [r15 + 8]
	mov	rax, qword ptr [r15 + 24]
	mov	r9, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], 0
	mov	rcx, qword ptr [rbx + 64]
	mov	rdi, qword ptr [rbx + 72]
	mov	r8, qword ptr [rbx + 80]
	mov	r10, qword ptr [rbx + 88]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_73] # xmm0 = [1889567281,0,0,0]
	vmovups	ymmword ptr [rbx + 64], ymm0
	mov	r11, r9
	add	r11, 36
	mov	qword ptr [rbx + 96], r11
	mov	r11, rdx
	adc	r11, 0
	mov	qword ptr [rbx + 104], r11
	mov	r11, rsi
	adc	r11, 0
	mov	qword ptr [rbx + 112], r11
	mov	r11, rax
	adc	r11, 0
	mov	qword ptr [rbx + 120], r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + 128], ymm0
	mov	qword ptr [rbx + 184], r10
	mov	qword ptr [rbx + 176], r8
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rcx
	sub	r9, rcx
	sbb	rdx, rdi
	sbb	rsi, r8
	sbb	rax, r10
	add	r9, 36
	mov	qword ptr [rbx + 192], r9
	adc	rdx, 0
	mov	qword ptr [rbx + 200], rdx
	adc	rsi, 0
	mov	qword ptr [rbx + 208], rsi
	adc	rax, 0
	mov	qword ptr [rbx + 216], rax
	mov	qword ptr [rbx + 248], r10
	mov	qword ptr [rbx + 240], r8
	mov	qword ptr [rbx + 232], rdi
	mov	qword ptr [rbx + 224], rcx
	mov	rax, qword ptr [rbx + 32]
	mov	rcx, qword ptr [rbx + 40]
	mov	rdx, qword ptr [rbx + 48]
	mov	rsi, qword ptr [rbx + 56]
	mov	qword ptr [rbx + 280], rsi
	mov	qword ptr [rbx + 272], rdx
	mov	qword ptr [rbx + 264], rcx
	mov	qword ptr [rbx + 256], rax
	mov	qword ptr [rbx + 312], rsi
	mov	qword ptr [rbx + 304], rdx
	mov	qword ptr [rbx + 296], rcx
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	add	r13, 10
	mov	qword ptr [rbx + 288], rax
	lea	r14, [rbx + 288]
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1516:                             # %OP3828.ISZERO
	mov	r11, r12
	mov	rcx, qword ptr [r14 + 8]
	or	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14]
	or	rdx, qword ptr [r14 + 16]
	mov	rax, r13
	shl	rax, 5
	xor	esi, esi
	xor	edi, edi
	or	rdx, rcx
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], 0
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r12 + rax], rsi
	mov	qword ptr [r12 + rax + 24], 0
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	je	.LBB0_1570
.LBB0_1517:                             # %OP3836.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1518:
	lea	rax, [rip + .Ltmp3]
	jmp	.LBB0_1561
.LBB0_1519:                             # %OP4447.JUMPDEST
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_49] # xmm0 = [9,0,0,0]
	vmovdqu	ymmword ptr [r12 + rbx], ymm0
	lea	r15, [r13 + 2]
	lea	rsi, [r12 + rbx]
	add	rsi, 32
	vmovdqu	ymmword ptr [r12 + rbx + 32], ymm0
	mov	rdi, r11
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_494
# %bb.1520:                             # %OP4451.PUSH28
	add	rbx, r12
	shl	r15, 5
	mov	rdx, r15
	mov	r15d, dword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 32]
	mov	r10, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 16]
	mov	rax, qword ptr [rbx + 56]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [rbx + 48]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	rax, qword ptr [rbx + 40]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	r11, qword ptr [rbx + 32]
	mov	eax, 4294967295
	mov	qword ptr [r12 + rdx + 24], rax
	mov	qword ptr [r12 + rdx + 8], -1
	mov	qword ptr [r12 + rdx + 16], -1
	mov	qword ptr [rbp - 224], rdx      # 8-byte Spill
	mov	qword ptr [r12 + rdx], -1
	mov	rax, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 64]
	mov	r8, qword ptr [rbx - 48]
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 48], rdi
	mov	qword ptr [rbx + 32], rcx
	mov	qword ptr [rbx + 56], r15
	mov	qword ptr [rbx + 40], r10
	mov	r13, qword ptr [rbx - 40]
	imul	r13, rcx
	mov	rdx, rcx
	mulx	rdx, r9, r8
	imul	r8, r10
	add	r8, r13
	add	r8, rdx
	mov	rdx, rdi
	mulx	rdx, r13, rsi
	imul	rdi, rax
	imul	r15, rsi
	add	r15, rdi
	add	r15, rdx
	add	r13, r9
	mov	rdx, rsi
	mulx	r9, rdi, rcx
	adc	r15, r8
	mov	rdx, rax
	mulx	r14, r8, rcx
	add	r8, r9
	adc	r14, 0
	mov	rdx, rsi
	mulx	rsi, rcx, r10
	mov	rdx, rax
	mulx	rax, rdx, r10
	add	rcx, r8
	adc	rsi, r14
	setb	r8b
	add	rdx, rsi
	movzx	esi, r8b
	adc	rax, rsi
	add	rdx, r13
	adc	rax, r15
	mov	qword ptr [rbx], rdi
	add	r11, rdi
	mov	qword ptr [rbx + 8], rcx
	adc	rcx, qword ptr [rbp - 96]       # 8-byte Folded Reload
	mov	qword ptr [rbx + 16], rdx
	adc	rdx, qword ptr [rbp - 88]       # 8-byte Folded Reload
	mov	qword ptr [rbx + 24], rax
	adc	rax, qword ptr [rbp - 80]       # 8-byte Folded Reload
	mov	qword ptr [rbx - 64], r11
	mov	qword ptr [rbx - 56], rcx
	mov	qword ptr [rbx - 48], rdx
	lea	rsi, [rbx - 64]
	mov	qword ptr [rbx - 40], rax
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	lea	r15, [r13 - 2]
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_494
# %bb.1521:                             # %OP4463.PUSH4
	mov	r11, r14
	mov	rdi, qword ptr [rbp - 224]      # 8-byte Reload
	add	rdi, r12
	add	r13, 3
	shl	r15, 5
	mov	eax, dword ptr [rbx - 96]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + r15 + 8], xmm0
	mov	qword ptr [r12 + r15], rax
	mov	qword ptr [r12 + r15 + 24], 0
	mov	qword ptr [rbx - 16], 0
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [rbx - 32], 9317
	mov	qword ptr [rbx - 24], 0
	mov	rax, qword ptr [rbx - 152]
	mov	rcx, qword ptr [rbx - 136]
	mov	rdx, qword ptr [rbx - 160]
	mov	rsi, qword ptr [rbx - 144]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx + 48], 0
	mov	qword ptr [rbx + 56], 0
	mov	qword ptr [rbx + 32], 9211
	mov	qword ptr [rbx + 40], 0
	vmovdqu	ymm0, ymmword ptr [rbx - 192]
	vmovdqu	ymmword ptr [rdi], ymm0
	jmp	.LBB0_330
.LBB0_1522:                             # %OP1925.JUMPDEST.loopexit
	mov	rdx, r13
	jmp	.LBB0_106
.LBB0_1523:                             # %OP2012.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_431
.LBB0_1524:                             # %OP1933.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_98
.LBB0_1525:                             # %OP1978.JUMPDEST.loopexit
	lea	rax, [r13 + 1]
	lea	rbx, [r13 + 2]
	jmp	.LBB0_120
.LBB0_1526:                             # %OP4337.JUMPDEST.loopexit
	mov	rbx, r13
	jmp	.LBB0_319
.LBB0_1527:                             # %OP3936.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_166
.LBB0_1528:                             # %OP4488.JUMPDEST.loopexit
	mov	r14, r13
.LBB0_1529:                             # %OP4488.JUMPDEST
	mov	r13, r14
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_27] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r12 + r13], ymm0
	lea	r15, [r14 + 2]
	lea	rsi, [r12 + r13]
	add	rsi, 32
	vmovdqu	ymmword ptr [r12 + r13 + 32], ymm0
	mov	rdi, r11
	mov	qword ptr [rbp - 280], rsi      # 8-byte Spill
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB0_494
# %bb.1530:                             # %OP4492.PUSH32
	add	r13, r12
	mov	qword ptr [rbp - 240], r15      # 8-byte Spill
	mov	r8, r15
	shl	r8, 5
	lea	r15, [r14 + 5]
	mov	al, 48
	bzhi	rdi, qword ptr [r13 - 184], rax
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_95] # ymm0 = [18446744073709551615,281474976710655,0,0]
	vmovups	ymmword ptr [r13 + 32], ymm0
	mov	rax, qword ptr [r13 - 192]
	mov	rcx, qword ptr [r13 - 160]
	mov	rsi, qword ptr [r13 - 152]
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	shl	r15, 5
	mov	rdx, rsi
	shld	rdx, rcx, 48
	shl	rcx, 48
	or	rcx, rdi
	movabs	rdi, 281474976710656
	mov	qword ptr [r12 + r8 + 8], rdi
	mov	qword ptr [r12 + r8 + 16], 0
	mov	qword ptr [r12 + r8], 0
	mov	rbx, r8
	mov	qword ptr [r12 + r8 + 24], 0
	vmovups	xmm0, xmmword ptr [r13 - 56]
	mov	rdi, qword ptr [r13 - 40]
	mov	r8, qword ptr [r13 - 64]
	mov	qword ptr [r13 + 192], r8
	mov	qword ptr [r13 + 216], rdi
	vmovups	xmmword ptr [r13 + 200], xmm0
	mov	edi, r8d
	mov	qword ptr [r12 + r15], rdi
	mov	qword ptr [rbp - 264], r14      # 8-byte Spill
	lea	rdi, [r14 + 3]
	shr	rsi, 16
	mov	esi, esi
	shl	r8, 32
	or	r8, rsi
	mov	qword ptr [rbp - 232], rdi      # 8-byte Spill
	mov	rsi, rdi
	shl	rsi, 5
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r12 + r15 + 8], xmm0
	mov	qword ptr [r12 + r15 + 24], 0
	vmovdqu	ymm0, ymmword ptr [r13]
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r12 + rsi + 24], r8
	mov	qword ptr [r12 + rsi + 8], rcx
	mov	qword ptr [r12 + rsi + 16], rdx
	mov	qword ptr [r12 + rsi], rax
	lea	r14, [r12 + rsi]
	vmovdqu	ymmword ptr [r13 + 128], ymm0
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB0_1634
# %bb.1531:                             # %OP4526.PUSH1
	mov	r10, rbx
	add	r10, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	mov	qword ptr [rbp - 184], r14      # 8-byte Spill
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [r13 + 128], ymm0
	add	r15, r12
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r14, qword ptr [rax + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rax, rbx
	mov	r11, r14
	cmp	rax, 95
	jbe	.LBB0_1626
.LBB0_1532:                             # %OP4528.MLOAD.contd
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [rsi + rbx + 88]
	mov	rdx, qword ptr [rsi + rbx + 80]
	mov	rax, qword ptr [rsi + rbx + 64]
	mov	rsi, qword ptr [rsi + rbx + 72]
	movbe	qword ptr [r13 + 144], rsi
	movbe	qword ptr [r13 + 128], rcx
	movbe	qword ptr [r13 + 152], rax
	movbe	qword ptr [r13 + 136], rdx
	mov	rdi, qword ptr [r13 + 56]
	mov	r8, qword ptr [r13 + 32]
	mov	r14, qword ptr [r13 + 40]
	and	r14, qword ptr [r13 + 8]
	and	rdi, qword ptr [r13 + 24]
	and	r8, qword ptr [r13]
	mov	r12, qword ptr [r13 + 48]
	and	r12, qword ptr [r13 + 16]
	mov	qword ptr [r15 + 16], r12
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	qword ptr [r15], r8
	mov	qword ptr [rbp - 72], rdi       # 8-byte Spill
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], r14
	movbe	qword ptr [r13 + 208], rsi
	mov	rdi, rsi
	bswap	rdi
	movbe	qword ptr [r13 + 200], rdx
	bswap	rdx
	movbe	qword ptr [r13 + 192], rcx
	mov	r15, rcx
	bswap	r15
	movbe	qword ptr [r13 + 216], rax
	mov	rcx, qword ptr [r11 + 16]
	mov	rbx, qword ptr [r11 + 48]
	sub	rcx, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rdi
	bswap	rax
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rcx
	mov	qword ptr [rbp - 256], r10      # 8-byte Spill
	ja	.LBB0_1628
.LBB0_1533:                             # %OP4534.SWAP2_udiv-special-cases
	add	rbx, qword ptr [r11 + 8]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 24], rax
	movbe	qword ptr [r15 + rbx + 16], r14
	movbe	qword ptr [r15 + rbx + 8], r12
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	mov	r9, qword ptr [r10 + 24]
	mov	rsi, qword ptr [r10]
	mov	rdi, qword ptr [r10 + 8]
	mov	r8, qword ptr [r10 + 16]
	mov	r12, qword ptr [r13 + 24]
	mov	r14, qword ptr [r13]
	mov	r10, qword ptr [r13 + 8]
	mov	r15, qword ptr [r13 + 16]
	mov	rax, rdi
	or	rax, r9
	mov	rcx, rsi
	or	rcx, r8
	or	rcx, rax
	sete	al
	mov	rcx, r10
	or	rcx, r12
	mov	rdx, r14
	or	rdx, r15
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, r9
	lzcnt	rdx, r8
	add	rdx, 64
	test	r9, r9
	cmovne	rdx, rax
	lzcnt	rax, rdi
	mov	qword ptr [rbp - 224], rsi      # 8-byte Spill
	lzcnt	r11, rsi
	add	r11, 64
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	test	rdi, rdi
	cmovne	r11, rax
	sub	r11, -128
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	mov	rax, r8
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	or	rax, r9
	cmovne	r11, rdx
	lzcnt	rax, r12
	lzcnt	rdx, r15
	add	rdx, 64
	test	r12, r12
	cmovne	rdx, rax
	lzcnt	rax, r10
	lzcnt	rsi, r14
	add	rsi, 64
	test	r10, r10
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r15
	or	rax, r12
	cmovne	rsi, rdx
	sub	r11, rsi
	mov	esi, 0
	sbb	rsi, rsi
	mov	edx, 0
	sbb	rdx, rdx
	mov	ebx, 0
	sbb	rbx, rbx
	mov	eax, 255
	cmp	rax, r11
	mov	eax, 0
	sbb	rax, rsi
	mov	eax, 0
	mov	qword ptr [rbp - 72], rdx       # 8-byte Spill
	sbb	rax, rdx
	mov	eax, 0
	sbb	rax, rbx
	setb	al
	or	al, cl
	mov	rcx, r10
	mov	rax, qword ptr [rbp - 184]      # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rax]
	mov	rax, r14
	mov	rdi, qword ptr [r13 + 152]
	mov	r9, qword ptr [r13 + 144]
	mov	rdx, qword ptr [r13 + 136]
	mov	r8, qword ptr [r13 + 128]
	mov	qword ptr [rbp - 272], r13      # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r13d, 0
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	cmovne	r12, r13
	mov	r10, r15
	cmovne	r15, r13
	mov	r14, rcx
	cmovne	r14, r13
	cmove	r13, rax
	jne	.LBB0_1540
# %bb.1534:                             # %OP4534.SWAP2_udiv-special-cases
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, r11
	xor	rax, 255
	or	rax, qword ptr [rbp - 72]       # 8-byte Folded Reload
	mov	rcx, rsi
	or	rcx, rbx
	or	rcx, rax
	je	.LBB0_1540
# %bb.1535:                             # %udiv-bb126770
	mov	qword ptr [rbp - 304], rdx      # 8-byte Spill
	mov	qword ptr [rbp - 296], r9       # 8-byte Spill
	mov	qword ptr [rbp - 288], rdi      # 8-byte Spill
	mov	qword ptr [rbp - 248], r8       # 8-byte Spill
	mov	rax, r11
	add	r11, 1
	adc	rsi, 0
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	adc	r9, 0
	adc	rbx, 0
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 848], rcx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 880], ymm0
	mov	r13, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbp - 840], r13
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	mov	qword ptr [rbp - 832], r10
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 824], rcx
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 832]
	mov	r12, qword ptr [rbp + rax - 824]
	shld	r12, rdx, cl
	shlx	rdx, rdx, rcx
	mov	r8, r11
	mov	r11, rsi
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 848]
	mov	r14, qword ptr [rbp + rax - 840]
	mov	rax, r14
	shr	rax
	shrx	r15, rax, rsi
	shld	r14, rdi, cl
	or	r15, rdx
	mov	rax, r11
	or	rax, rbx
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	rdx, r8
	or	rdx, r9
	xor	r10d, r10d
	or	rdx, rax
	shlx	rax, rdi, rcx
	mov	qword ptr [rbp - 312], rax      # 8-byte Spill
	je	.LBB0_1538
# %bb.1536:                             # %udiv-preheader26769
	vmovdqu	ymmword ptr [rbp - 784], ymm0
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 816], rax
	mov	qword ptr [rbp - 808], r13
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 800], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 792], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	ecx, eax
	and	cl, 7
                                        # kill: def $al killed $al killed $rax
	shr	al, 3
	movzx	eax, al
	mov	rdx, qword ptr [rbp + rax - 792]
	mov	rdi, qword ptr [rbp + rax - 800]
	mov	r8, rdi
	shrd	r8, rdx, cl
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	r9, qword ptr [rbp + rax - 816]
	mov	rax, qword ptr [rbp + rax - 808]
	shrx	r10, rax, rcx
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	shrx	rsi, rdx, rcx
	mov	edx, ecx
	not	dl
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r9, rax, cl
	add	rdi, rdi
	shlx	rcx, rdi, rdx
	or	rcx, r10
	mov	rax, qword ptr [rbp - 224]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, rdi
	adc	rax, -1
	mov	qword ptr [rbp - 176], rax      # 8-byte Spill
	mov	rdx, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rdx, -1
	mov	qword ptr [rbp - 168], rdx      # 8-byte Spill
	xor	edx, edx
	mov	qword ptr [rbp - 320], rdx      # 8-byte Spill
	xor	r10d, r10d
	xor	ebx, ebx
	xor	edx, edx
	xor	eax, eax
	mov	r13, qword ptr [rbp - 312]      # 8-byte Reload
	.p2align	4, 0x90
.LBB0_1537:                             # %udiv-do-while26768
                                        # =>This Inner Loop Header: Depth=1
	shld	rsi, r8, 1
	shld	r8, rcx, 1
	shld	rcx, r9, 1
	shld	r9, r12, 1
	shld	r12, r15, 1
	or	r12, rax
	shld	r15, r14, 1
	or	r15, rdx
	shld	r14, r13, 1
	or	r14, rbx
	add	r13, r13
	or	r13, r10
	cmp	qword ptr [rbp - 152], r9       # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	sbb	rax, rcx
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	sbb	rax, r8
	mov	rax, qword ptr [rbp - 168]      # 8-byte Reload
	sbb	rax, rsi
	sar	rax, 63
	mov	r10d, eax
	and	r10d, 1
	mov	rdx, rax
	and	rdx, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	rbx, rax
	and	rbx, rdi
	mov	rdi, rax
	and	rdi, qword ptr [rbp - 128]      # 8-byte Folded Reload
	and	rax, qword ptr [rbp - 224]      # 8-byte Folded Reload
	sub	r9, rax
	sbb	rcx, rdi
	mov	r11, r14
	mov	r14, r15
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	sbb	r8, rbx
	sbb	rsi, rdx
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	add	rdx, -1
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	adc	rax, -1
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	adc	rbx, -1
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	adc	rdi, -1
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	or	rax, rdi
	mov	rdi, r15
	mov	r15, r14
	mov	r14, r11
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 72], rbx       # 8-byte Spill
	or	rdx, rbx
	or	rdx, rax
	mov	ebx, 0
	mov	edx, 0
	mov	eax, 0
	jne	.LBB0_1537
	jmp	.LBB0_1539
.LBB0_1538:
	xor	eax, eax
	mov	qword ptr [rbp - 320], rax      # 8-byte Spill
	mov	r13, qword ptr [rbp - 312]      # 8-byte Reload
.LBB0_1539:                             # %udiv-loop-exit26767
	shld	r12, r15, 1
	mov	rax, qword ptr [rbp - 320]      # 8-byte Reload
	or	r12, rax
	shld	r15, r14, 1
	or	r15, rax
	shld	r14, r13, 1
	or	r14, rax
	add	r13, r13
	or	r13, r10
	mov	r8, qword ptr [rbp - 248]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 288]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 296]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 304]      # 8-byte Reload
.LBB0_1540:                             # %udiv-end26766
	mov	rax, qword ptr [rbp - 280]      # 8-byte Reload
	and	r13, qword ptr [rax]
	mov	qword ptr [rax], r8
	and	r15, qword ptr [rax + 16]
	mov	qword ptr [rax + 16], r9
	and	r14, qword ptr [rax + 8]
	mov	qword ptr [rax + 8], rdx
	and	r12, qword ptr [rax + 24]
	mov	qword ptr [rbp - 72], r12       # 8-byte Spill
	mov	qword ptr [rax + 24], rdi
	mov	r10, qword ptr [rbp - 256]      # 8-byte Reload
	mov	qword ptr [r10 + 16], r15
	mov	qword ptr [r10], r13
	mov	qword ptr [r10 + 24], r12
	mov	qword ptr [r10 + 8], r14
	add	r8, 32
	adc	rdx, 0
	adc	r9, 0
	adc	rdi, 0
	mov	rax, qword ptr [rbp - 184]      # 8-byte Reload
	mov	qword ptr [rax + 16], r9
	mov	qword ptr [rax], r8
	mov	qword ptr [rax + 24], rdi
	mov	qword ptr [rax + 8], rdx
	mov	r11, rdi
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, rax
	mov	r12, qword ptr [rax + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	rbx, qword ptr [r12 + 48]
	sub	rax, rbx
	mov	rsi, r8
	add	rsi, 32
	mov	rcx, -1
	cmovb	rsi, rcx
	xor	ecx, ecx
	neg	rdx
	mov	edx, 0
	sbb	rdx, r9
	mov	r9, -1
	sbb	rcx, r11
	cmovb	rsi, r9
	cmp	rsi, rax
	ja	.LBB0_1630
.LBB0_1541:                             # %OP4545.DUP2
	mov	rdx, rdi
	add	rbx, qword ptr [r12 + 8]
	movbe	qword ptr [r8 + rbx + 24], r13
	movbe	qword ptr [r8 + rbx + 16], r14
	movbe	qword ptr [r8 + rbx + 8], r15
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r8 + rbx], rax
	mov	r13, qword ptr [rbp - 272]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 16]
	mov	rbx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r10 + 24], rcx
	mov	qword ptr [r10 + 8], rdi
	mov	qword ptr [r10 + 16], rax
	mov	qword ptr [r10], rbx
	mov	r15, qword ptr [rdx + 40]
	mov	r8, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	r8, r14
	mov	rsi, rbx
	add	rsi, 32
	cmovb	rsi, r9
	xor	r11d, r11d
	mov	rdx, -1
	mov	r9, rdi
	neg	r9
	mov	r9d, 0
	sbb	r9, rax
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	sbb	r11, rcx
	cmovb	rsi, rdx
	mov	qword ptr [rbp - 72], rbx       # 8-byte Spill
	cmp	rsi, r8
	ja	.LBB0_1632
.LBB0_1542:                             # %OP4546.MLOAD.contd
	add	r14, qword ptr [r15 + 8]
	mov	r12, qword ptr [rbx + r14 + 24]
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	mov	r8, qword ptr [rbx + r14 + 16]
	mov	r9, qword ptr [rbx + r14]
	mov	rsi, qword ptr [rbx + r14 + 8]
	bswap	r12
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_96] # ymm0 = [444453016905169617,9936008080700204302,2030879303627642798,2035942155853263140]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r11, qword ptr [r13 + 56]
	mov	r14, qword ptr [r13 + 32]
	mov	rbx, qword ptr [r13 + 40]
	mov	r15, qword ptr [r13 + 48]
	mov	qword ptr [r13 + 128], r14
	sub	r14, r12
	mov	r12, r8
	bswap	r12
	mov	qword ptr [r13 + 136], rbx
	sbb	rbx, r12
	mov	r12, rsi
	bswap	r12
	mov	qword ptr [r13 + 144], r15
	sbb	r15, r12
	mov	r12, r9
	bswap	r12
	mov	qword ptr [r13 + 152], r11
	sbb	r11, r12
	mov	r12, qword ptr [rbp - 184]      # 8-byte Reload
	mov	qword ptr [r12 + 16], rax
	mov	rcx, rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [r12], rax
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12 + 8], rdi
	add	r14, rax
	adc	rbx, rdi
	adc	r15, rcx
	adc	r11, rdx
	mov	qword ptr [r13 + 32], r14
	mov	qword ptr [r13 + 48], r15
	mov	qword ptr [r13 + 40], rbx
	mov	qword ptr [r13 + 56], r11
	movbe	qword ptr [r10 + 16], rsi
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r10], rax
	movbe	qword ptr [r10 + 8], r8
	movbe	qword ptr [r10 + 24], r9
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rbx, rdi
	mov	rsi, r13
	mov	edx, 1
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB0_1635
# %bb.1543:                             # %OP4558.POP
	mov	r13, qword ptr [rbp - 264]      # 8-byte Reload
	add	r13, -7
.LBB0_1544:                             # %dynamic_jump_table.preheader
	mov	rax, r13
	shl	rax, 5
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [r12 + rax + 24]
	mov	r14, qword ptr [r12 + rax + 16]
	mov	rcx, qword ptr [r12 + rax]
	mov	rax, qword ptr [r12 + rax + 8]
.LBB0_1545:                             # %dynamic_jump_table.preheader
	mov	r11, rbx
.LBB0_1546:                             # %dynamic_jump_table.preheader
	lea	rdx, [r12 - 64]
	lea	rbx, [r12 - 32]
	lea	r15, [r12 - 288]
	xor	r9d, r9d
	mov	r10d, 4755
	mov	r8d, 1894
	vmovaps	xmm6, xmmword ptr [rip + .LCPI0_85] # xmm6 = [3069,0,0,0]
	vmovaps	xmm5, xmmword ptr [rip + .LCPI0_79] # xmm5 = [1000,0,0,0]
	vmovaps	xmm7, xmmword ptr [rip + .LCPI0_32] # xmm7 = [8814,0]
	vxorps	xmm9, xmm9, xmm9
	vmovaps	xmm10, xmmword ptr [rip + .LCPI0_103] # xmm10 = [3105,0,0,0]
	vmovaps	xmm11, xmmword ptr [rip + .LCPI0_104] # xmm11 = [3051,0,0,0]
	vmovaps	xmm12, xmmword ptr [rip + .LCPI0_105] # xmm12 = [3,0,0,0]
	vmovaps	xmm13, xmmword ptr [rip + .LCPI0_100] # xmm13 = [3161,0,0,0]
	vmovaps	xmm14, xmmword ptr [rip + .LCPI0_101] # xmm14 = [1000000,0,0,0]
	vmovaps	xmm15, xmmword ptr [rip + .LCPI0_102] # xmm15 = [3149,0,0,0]
	vmovaps	xmm3, xmmword ptr [rip + .LCPI0_99] # xmm3 = [3177,0,0,0]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [64,0,0,0]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI0_89] # ymm1 = [16415955460258650146,16578821390602320085,7300846107913627487,15531465269744277835]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_1] # xmm0 = [128,0,0,0]
	vmovaps	xmm4, xmmword ptr [rip + .LCPI0_78] # xmm4 = [4715,0,0,0]
	vmovaps	ymm8, ymmword ptr [rip + .LCPI0_46] # ymm8 = [18446744073709551615,18446744073709551615,4294967295,0]
	jmp	.LBB0_724
.LBB0_1547:                             # %OP3387.JUMPDEST.loopexit
	mov	rax, r13
	jmp	.LBB0_346
.LBB0_1548:                             # %OP3642.JUMPDEST.loopexit
	mov	r15, r13
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	jmp	.LBB0_293
.LBB0_1549:                             # %OP1647.JUMPDEST
	mov	r15, r13
	shl	r15, 5
	mov	rcx, qword ptr [r12 + r15 - 8]
	mov	rdx, qword ptr [r12 + r15 - 16]
	mov	rsi, qword ptr [r12 + r15 - 32]
	mov	rdi, qword ptr [r12 + r15 - 24]
	lea	r14, [r13 - 2]
	mov	rax, r14
	shl	rax, 5
	cmp	rsi, qword ptr [r12 + rax]
	sbb	rdi, qword ptr [r12 + rax + 8]
	sbb	rdx, qword ptr [r12 + rax + 16]
	sbb	rcx, qword ptr [r12 + rax + 24]
	setae	cl
	movzx	ecx, cl
	mov	qword ptr [r12 + rax], rcx
	mov	qword ptr [r12 + rax + 8], 0
	mov	qword ptr [r12 + rax + 16], 0
	mov	qword ptr [r12 + rax + 24], 0
	jb	.LBB0_1600
# %bb.1550:
	mov	r13, r14
.LBB0_1551:                             # %OP1683.JUMPDEST
	mov	rbx, r13
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_91] # xmm0 = [3300,0,0,0]
	vmovups	ymmword ptr [r12 + rax - 64], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 + rax - 256]
	vmovdqu	ymm1, ymmword ptr [r12 + rax - 224]
	vmovups	ymm2, ymmword ptr [r12 + rax - 192]
	vmovups	ymm3, ymmword ptr [r12 + rax - 160]
	vmovups	ymmword ptr [r12 + rax - 32], ymm2
	vmovups	ymmword ptr [r12 + rax], ymm3
	vmovdqu	ymmword ptr [r12 + rax + 32], ymm0
	add	rbx, 3
	vmovdqu	ymmword ptr [r12 + rax + 64], ymm1
	jmp	.LBB0_319
.LBB0_1552:                             # %OP3150.JUMPDEST.loopexit
	mov	rsi, r13
	shl	rsi, 5
	mov	r15, qword ptr [r12 + rsi - 40]
	mov	r11, qword ptr [r12 + rsi - 48]
	mov	rbx, qword ptr [r12 + rsi - 64]
	mov	r14, qword ptr [r12 + rsi - 56]
	mov	rax, qword ptr [r12 + rsi - 8]
	mov	rdx, qword ptr [r12 + rsi - 16]
	mov	rcx, qword ptr [r12 + rsi - 24]
	mov	rsi, qword ptr [r12 + rsi - 32]
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	jmp	.LBB0_635
.LBB0_1553:                             # %OP2123.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
.LBB0_1554:                             # %OP2123.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1555:
	lea	rax, [rip + .Ltmp8]
	jmp	.LBB0_1561
.LBB0_1556:                             # %OP2212.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB0_207
.LBB0_1557:                             # %OP4078.JUMPDEST.loopexit25542
	mov	rsi, r13
	shl	rsi, 5
	mov	rax, qword ptr [r12 + rsi - 72]
	mov	rcx, qword ptr [r12 + rsi - 80]
	mov	rdx, qword ptr [r12 + rsi - 96]
	mov	rdi, qword ptr [r12 + rsi - 88]
	mov	r14, r13
	jmp	.LBB0_1475
.LBB0_1558:                             # %OP3273.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
.LBB0_1559:                             # %OP3273.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, r13
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + rcx - 24], xmm0
	mov	qword ptr [r12 + rcx - 32], rax
	mov	qword ptr [r12 + rcx - 8], 0
	add	r13, -6
	lea	rsi, [r12 + rcx]
	add	rsi, -192
	mov	rbx, r11
	mov	rdi, r11
	mov	edx, 17
	mov	ecx, 3
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB0_95
# %bb.1560:
	lea	rax, [rip + .Ltmp6]
.LBB0_1561:                             # %suspend
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbx + 32], rax
	mov	al, 32
.LBB0_1577:                             # %return
	mov	qword ptr [rdx], r13
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB0_1562:                             # %OP4055.JUMPDEST.preheader.loopexit
	mov	r14, r13
	jmp	.LBB0_1469
.LBB0_1563:                             # %OP4771.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB0_471
.LBB0_1564:
	mov	rdi, r13
.LBB0_1565:                             # %OP4917.JUMPDEST
	mov	r15, r11
	add	rdi, -3
	jmp	.LBB0_1567
.LBB0_1566:
	mov	rdi, r13
.LBB0_1567:                             # %OP4921.JUMPDEST
	add	rdi, -2
	mov	r11, r15
	mov	r13, rdi
	jmp	.LBB0_1135
.LBB0_1568:                             # %dynamic_jump_table
	xor	rcx, 554
	or	rcx, rdx
	or	rax, rsi
	or	rax, rcx
	je	.LBB0_570
.LBB0_1569:                             # %return.loopexit26312
	mov	al, 89
	jmp	.LBB0_1576
.LBB0_1570:                             # %OP3833.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [rbx + 352], ymm0
.LBB0_1238:                             # %OP3270.PUSH1
	mov	rdi, r11
	jmp	.LBB0_384
.LBB0_1571:                             # %OP2922.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [r14 + 320], ymm0
.LBB0_1572:                             # %OP2922.PUSH1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB0_384
.LBB0_1574:                             # %OP2624.PUSH1
	add	r12, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [rbx + 320], ymm0
	jmp	.LBB0_408
.LBB0_1578:
	mov	al, 88
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, r9
	jmp	.LBB0_1577
.LBB0_1624:
	mov	al, 88
	jmp	.LBB0_1576
.LBB0_1599:
	mov	al, 88
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1579:                             # %OP4265.PUSH1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	lea	r13, [r14 + 1]
	shl	r14, 5
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.1580:                             # %OP4267.MLOAD.contd
	mov	r15, r12
	add	r12, r14
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1581:                             # %OP4271.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1582:                             # %OP4276.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_29] # xmm0 = [20,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 20
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1583:                             # %OP4281.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_53] # ymm0 = [0,7380396446245191680,7887329264808650098,7238178973924223021]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 8
	movabs	rax, 7238178973924223021
	movabs	r10, 7887329264808650098
	movabs	r9, 7380396446245191680
	jmp	.LBB0_365
.LBB0_1584:                             # %OP2822.PUSH1
	mov	qword ptr [rbp - 232], rdx      # 8-byte Spill
	mov	r14, r13
	add	r15, r12
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r13, r9
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1658
# %bb.1585:                             # %OP2823.MLOAD.contd
	mov	qword ptr [rbp - 72], r14       # 8-byte Spill
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	rbx, qword ptr [rbp - 232]      # 8-byte Reload
	lea	r14, [rbx + 1]
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + rbx + 24], rax
	mov	qword ptr [r12 + rbx + 16], 0
	mov	qword ptr [r12 + rbx], 0
	mov	qword ptr [r12 + rbx + 8], 0
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r12 + r14 + 16], rdx
	mov	qword ptr [r12 + r14], rdi
	mov	qword ptr [r12 + r14 + 24], rcx
	mov	qword ptr [r12 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r13
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1658
# %bb.1586:                             # %OP2827.PUSH1
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	lea	r13, [r12 + rbx]
	mov	rbx, qword ptr [rbp - 232]      # 8-byte Reload
	add	rbx, 2
	add	r14, r12
	mov	rax, qword ptr [r15 + 24]
	mov	r10, qword ptr [r15 + 16]
	mov	r9, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	r15, rbx
	shl	rbx, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r9
	adc	rax, 0
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12 + rbx], ymm0
	mov	qword ptr [r13 + 120], rcx
	mov	qword ptr [r13 + 112], rdx
	mov	qword ptr [r13 + 104], rsi
	mov	qword ptr [r13 + 96], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.1587:                             # %OP2838.PUSH1
	add	rbx, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_67] # xmm0 = [40,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r13 + 112], rdx
	mov	qword ptr [r13 + 96], rdi
	mov	qword ptr [r13 + 120], rcx
	mov	qword ptr [r13 + 104], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 40
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_494
# %bb.1588:                             # %OP2841.PUSH1
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r13 + 112], 0
	mov	qword ptr [r13 + 96], 11161
	mov	qword ptr [r13 + 120], 0
	mov	qword ptr [r13 + 104], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 40
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [r13 + 144], rcx
	mov	qword ptr [r13 + 128], rdx
	mov	qword ptr [r13 + 152], rax
	mov	qword ptr [r13 + 136], rsi
	mov	rdi, r12
	mov	rsi, rbx
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB0_494
# %bb.1589:                             # %OP2848.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [r13 - 32]
	mov	qword ptr [r13 - 32], rdx
	mov	qword ptr [r13 - 24], rsi
	mov	qword ptr [r13 - 16], rcx
	mov	qword ptr [r13 - 8], rax
	vmovdqu	ymmword ptr [r14], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1629
# %bb.1590:                             # %OP2854.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r13 - 8]
	mov	r9, qword ptr [r13 - 32]
	mov	r10, qword ptr [r13 - 24]
	mov	r11, qword ptr [r13 - 16]
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [r13 - 32], r9
	mov	qword ptr [r13 - 24], r10
	mov	qword ptr [r13 - 16], r11
	mov	qword ptr [r13 - 8], r8
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rdi
	mov	rdi, r12
	jmp	.LBB0_456
.LBB0_1591:                             # %OP2362.PUSH1
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1644
# %bb.1592:                             # %OP2363.MLOAD.contd
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	add	r14, r9
	mov	r8, qword ptr [rbp - 72]        # 8-byte Reload
	lea	r13, [r8 + 2]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 8], 0
	mov	r15, r8
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r9 + r13 + 16], rdx
	mov	qword ptr [r9 + r13], rdi
	mov	qword ptr [r9 + r13 + 24], rcx
	mov	qword ptr [r9 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1644
# %bb.1593:                             # %OP2367.PUSH1
	add	r15, 3
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	adc	rax, 0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1594:                             # %OP2378.PUSH1
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_67] # xmm0 = [40,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 40
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_693
# %bb.1595:                             # %OP2381.PUSH1
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 11201
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 40
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], rsi
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r12
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB0_693
# %bb.1596:                             # %OP2388.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r14], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1629
# %bb.1597:                             # %OP2394.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], r9
	sub	r8, rdx
	sbb	r9, rsi
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rsi
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	jmp	.LBB0_456
.LBB0_1600:                             # %OP1652.PUSH1
	add	r15, r12
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	vmovdqu	ymmword ptr [r15 - 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.1601:                             # %OP1654.MLOAD.contd
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r15 - 16], rdx
	mov	qword ptr [r15 - 8], rcx
	mov	qword ptr [r15 - 32], rdi
	mov	qword ptr [r15 - 24], rsi
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 48], rdx
	mov	qword ptr [r15 + 56], rcx
	mov	qword ptr [r15 + 32], rdi
	mov	qword ptr [r15 + 40], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1602:                             # %OP1658.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [r15 - 32]
	mov	rsi, qword ptr [r15 - 24]
	mov	rdx, qword ptr [r15 - 16]
	mov	rcx, qword ptr [r15 - 8]
	mov	qword ptr [r15 + 88], rcx
	mov	qword ptr [r15 + 80], rdx
	mov	qword ptr [r15 + 72], rsi
	mov	qword ptr [r15 + 64], rdi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 32], rdi
	mov	qword ptr [r15 + 40], rsi
	mov	qword ptr [r15 + 48], rdx
	mov	qword ptr [r15 + 56], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1603:                             # %OP1663.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_21] # xmm0 = [12,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [r15 - 32]
	mov	rsi, qword ptr [r15 - 24]
	mov	rdx, qword ptr [r15 - 16]
	mov	rcx, qword ptr [r15 - 8]
	mov	qword ptr [r15 + 88], rcx
	mov	qword ptr [r15 + 80], rdx
	mov	qword ptr [r15 + 72], rsi
	mov	qword ptr [r15 + 64], rdi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 32], rdi
	mov	qword ptr [r15 + 40], rsi
	mov	qword ptr [r15 + 48], rdx
	mov	qword ptr [r15 + 56], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 12
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1604:                             # %OP1668.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_90] # ymm0 = [0,0,3619240757040250880,6155973685307076694]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [r15 - 32]
	mov	rsi, qword ptr [r15 - 24]
	mov	rdx, qword ptr [r15 - 16]
	mov	rcx, qword ptr [r15 - 8]
	mov	qword ptr [r15 + 88], rcx
	mov	qword ptr [r15 + 80], rdx
	mov	qword ptr [r15 + 72], rsi
	mov	qword ptr [r15 + 64], rdi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 32], rdi
	mov	qword ptr [r15 + 40], rsi
	mov	qword ptr [r15 + 48], rdx
	mov	qword ptr [r15 + 56], rcx
	sub	rsp, 8
	movabs	rax, 6155973685307076694
	movabs	r10, 3619240757040250880
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1605:                             # %OP1673.SWAP1
	vmovdqa	xmm0, xmmword ptr [r15 - 32]
	vmovdqa	xmm1, xmmword ptr [r15 - 16]
	mov	rdi, qword ptr [r15 - 64]
	mov	rsi, qword ptr [r15 - 56]
	mov	rcx, qword ptr [r15 - 40]
	mov	rdx, qword ptr [r15 - 48]
	vmovdqa	xmmword ptr [r15 - 48], xmm1
	vmovdqa	xmmword ptr [r15 - 64], xmm0
	mov	qword ptr [r15 - 16], rdx
	mov	qword ptr [r15 - 8], rcx
	mov	qword ptr [r15 - 32], rdi
	mov	qword ptr [r15 - 24], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.1606:                             # %OP1674.MLOAD.contd
	lea	rsi, [r15 - 64]
	mov	rax, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r8, qword ptr [r15 - 40]
	mov	r9, qword ptr [r15 - 48]
	mov	r10, qword ptr [r15 - 64]
	mov	r11, qword ptr [r15 - 56]
	sub	r10, rcx
	sbb	r11, rdx
	sbb	r9, rdi
	sbb	r8, rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15], 100
	mov	qword ptr [r15 + 8], 0
	add	r10, 100
	adc	r11, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r15 - 64], r10
	mov	qword ptr [r15 - 56], r11
	mov	qword ptr [r15 - 48], r9
	mov	qword ptr [r15 - 40], r8
	mov	qword ptr [r15 - 16], rdi
	mov	qword ptr [r15 - 8], rax
	mov	qword ptr [r15 - 32], rcx
	mov	qword ptr [r15 - 24], rdx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB0_593
# %bb.1607:                             # %select.false27052
	mov	eax, ecx
	mov	r13, r14
	jmp	.LBB0_1576
.LBB0_1608:                             # %OP5218.PUSH1
	mov	rax, rbx
	mov	rbx, rcx
	add	r14, r12
	add	rax, r12
	add	r13, 3
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	mov	r13, rax
	vmovups	ymmword ptr [rax], ymm0
	vmovups	ymmword ptr [r14 + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1652
# %bb.1609:                             # %OP5220.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rdi
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 + 24], rax
	mov	qword ptr [r8 + r15 + 16], 0
	mov	qword ptr [r8 + r15], 0
	mov	qword ptr [r8 + r15 + 8], 0
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1652
# %bb.1610:                             # %OP5224.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	r12, rax
	vmovups	ymmword ptr [rax], ymm0
	mov	rdi, qword ptr [r14 + 64]
	mov	rsi, qword ptr [r14 + 72]
	mov	rcx, qword ptr [r14 + 88]
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 152], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1652
# %bb.1611:                             # %OP5229.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI0_29] # xmm0 = [20,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r14 + 64]
	mov	rsi, qword ptr [r14 + 72]
	mov	rcx, qword ptr [r14 + 88]
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 152], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 20
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1652
# %bb.1612:                             # %OP5234.PUSH32
	vmovaps	ymm0, ymmword ptr [rip + .LCPI0_30] # ymm0 = [0,7380396446245191680,7017844265656411506,7238178973924223021]
	vmovups	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r14 + 64]
	mov	rsi, qword ptr [r14 + 72]
	mov	rcx, qword ptr [r14 + 88]
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 152], rcx
	sub	rsp, 8
	movabs	rax, 7238178973924223021
	movabs	r10, 7017844265656411506
	movabs	r9, 7380396446245191680
	xor	r8d, r8d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_1652
# %bb.1613:                             # %OP5239.SWAP1
	mov	rax, qword ptr [r14 + 88]
	mov	r8, qword ptr [r14 + 64]
	mov	r9, qword ptr [r14 + 72]
	mov	r10, qword ptr [r14 + 80]
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_1652
# %bb.1614:                             # %OP5240.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	r11, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r13 + 24]
	mov	r8, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r10, qword ptr [r13 + 8]
	sub	r9, r11
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 100
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r8
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], r11
	mov	qword ptr [r14 + 88], rax
	mov	qword ptr [r14 + 72], rcx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB0_594
# %bb.1615:                             # %select.false27600
	mov	eax, ecx
	mov	r13, rbx
	jmp	.LBB0_1576
.LBB0_1616:                             # %OP4306.PUSH1
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	add	r14, r12
	add	rbx, r12
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r14 + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.1617:                             # %OP4308.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rdi
	mov	r15, r13
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 + 24], rax
	mov	qword ptr [r8 + r15 + 16], 0
	mov	qword ptr [r8 + r15], 0
	mov	qword ptr [r8 + r15 + 8], 0
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1618:                             # %OP4312.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_23] # xmm0 = [32,0]
	mov	r12, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rdi, qword ptr [r14 + 64]
	mov	rsi, qword ptr [r14 + 72]
	mov	rcx, qword ptr [r14 + 88]
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 152], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1619:                             # %OP4317.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI0_51] # xmm0 = [21,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r14 + 64]
	mov	rsi, qword ptr [r14 + 72]
	mov	rcx, qword ptr [r14 + 88]
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 152], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 21
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1620:                             # %OP4322.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI0_52] # ymm0 = [0,8243395393941929984,8319663834020078693,7238178973924223021]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r14 + 64]
	mov	rsi, qword ptr [r14 + 72]
	mov	rcx, qword ptr [r14 + 88]
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 152], rcx
	sub	rsp, 8
	movabs	rax, 7238178973924223021
	movabs	r10, 8319663834020078693
	movabs	r9, 8243395393941929984
	xor	r8d, r8d
	push	qword ptr [rbp - 64]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB0_95
# %bb.1621:                             # %OP4327.SWAP1
	mov	rax, qword ptr [r14 + 88]
	mov	r8, qword ptr [r14 + 64]
	mov	r9, qword ptr [r14 + 72]
	mov	r10, qword ptr [r14 + 80]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rdi
	mov	qword ptr [r14 + 88], rcx
	mov	qword ptr [r14 + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB0_95
# %bb.1622:                             # %OP4328.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 100
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r14 + 80], rdx
	mov	qword ptr [r14 + 64], rsi
	mov	qword ptr [r14 + 88], rax
	mov	qword ptr [r14 + 72], rcx
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB0_622
# %bb.1623:                             # %select.false27493
	mov	eax, ecx
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1639:
	mov	r13, rbx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1655:
	mov	r13, r15
	jmp	.LBB0_1576
.LBB0_1626:                             # %resize.i24722
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_1629
# %bb.1627:                             # %resize.i24722.OP4528.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r11, qword ptr [rax + 40]
	mov	r10, r12
	jmp	.LBB0_1532
.LBB0_1628:                             # %resize.i24737
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 256]      # 8-byte Reload
	test	al, al
	je	.LBB0_1533
.LBB0_1629:
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1630:                             # %resize.i24752
	mov	qword ptr [rbp - 248], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, -1
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 248]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 256]      # 8-byte Reload
	test	al, al
	je	.LBB0_1541
# %bb.1631:
	mov	r13, qword ptr [rbp - 240]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1632:                             # %resize.i24768
	mov	r12, r10
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB0_1634
# %bb.1633:                             # %resize.i24768.OP4546.MLOAD.contd_crit_edge
	mov	r13, qword ptr [rbp - 272]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	qword ptr [rbp - 72], rdx       # 8-byte Spill
	mov	rdi, qword ptr [r13 + 8]
	mov	r10, r12
	jmp	.LBB0_1542
.LBB0_1634:
	mov	r13, qword ptr [rbp - 232]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1635:
	mov	r13, qword ptr [rbp - 264]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1638:
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1636:
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1644:
	mov	r13, r12
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1640:                             # %resize.i24888
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 224], rdi      # 8-byte Spill
	mov	rdi, r13
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 224]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB0_1294
	jmp	.LBB0_1642
.LBB0_1641:                             # %resize.i24903
	mov	esi, 64
	mov	r12, rdi
	mov	r13, rdx
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, r13
	mov	rdi, r12
	test	al, al
	je	.LBB0_1295
.LBB0_1642:
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1109:
	mov	r13, qword ptr [rbp - 224]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1646:
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1648:
	mov	r13, qword ptr [rbp - 224]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1647:
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	add	r13, -5
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1649:
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1650:                             # %return.loopexit25073.split.loop.exit25380
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	dec	r13
	jmp	.LBB0_1576
.LBB0_1657:
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1651:                             # %return.loopexit25073.split.loop.exit25329
	add	r13, -8
	jmp	.LBB0_1576
.LBB0_1652:
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1653:
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB0_1576
.LBB0_1654:
	mov	r13, r12
	jmp	.LBB0_1576
.LBB0_1656:
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, rcx
	jmp	.LBB0_1577
.LBB0_1658:
	mov	r13, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1660:
	mov	r13, qword ptr [rbp - 176]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1663:
	mov	r13, qword ptr [rbp - 168]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1664:
	mov	r13, qword ptr [rbp - 144]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.LBB0_1666:
	mov	r13, r10
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB0_1577
.Lfunc_end0:
	.size	univ2_pair, .Lfunc_end0-univ2_pair
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI0_0:
	.long	.LBB0_32-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1208-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_45-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_1569-.LJTI0_0
	.long	.LBB0_571-.LJTI0_0
.LJTI0_1:
	.long	.LBB0_105-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_340-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_618-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_97-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_1569-.LJTI0_1
	.long	.LBB0_114-.LJTI0_1
.LJTI0_2:
	.long	.LBB0_349-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_430-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_82-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_1569-.LJTI0_2
	.long	.LBB0_623-.LJTI0_2
.LJTI0_3:
	.long	.LBB0_345-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_134-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_651-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_1569-.LJTI0_3
	.long	.LBB0_655-.LJTI0_3
.LJTI0_4:
	.long	.LBB0_1447-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_795-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_964-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1449-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1450-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1569-.LJTI0_4
	.long	.LBB0_1448-.LJTI0_4
.LJTI0_5:
	.long	.LBB0_936-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_900-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_968-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1569-.LJTI0_5
	.long	.LBB0_1050-.LJTI0_5
.LJTI0_6:
	.long	.LBB0_1598-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_970-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_977-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_976-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_967-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_1569-.LJTI0_6
	.long	.LBB0_968-.LJTI0_6
.LJTI0_7:
	.long	.LBB0_897-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_951-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_957-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_1569-.LJTI0_7
	.long	.LBB0_958-.LJTI0_7
.LJTI0_8:
	.long	.LBB0_771-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1451-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1452-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1569-.LJTI0_8
	.long	.LBB0_1485-.LJTI0_8
.LJTI0_9:
	.long	.LBB0_1500-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_835-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_837-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_1569-.LJTI0_9
	.long	.LBB0_966-.LJTI0_9
.LJTI0_10:
	.long	.LBB0_759-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1035-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1036-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1564-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1566-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1135-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1132-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1135-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_936-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_938-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1029-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1123-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1042-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1024-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1041-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1569-.LJTI0_10
	.long	.LBB0_1023-.LJTI0_10
.LJTI0_11:
	.long	.LBB0_799-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_948-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_949-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_1569-.LJTI0_11
	.long	.LBB0_950-.LJTI0_11
                                        # -- End function
	.text
	.p2align	4, 0x90                         # -- Begin function __revmc_ir_builtin_mstore
	.type	.L__revmc_ir_builtin_mstore,@function
.L__revmc_ir_builtin_mstore:            # @__revmc_ir_builtin_mstore
# %bb.0:                                # %entry
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r10, rsi
	mov	rax, qword ptr [rsp + 64]
	mov	r14, qword ptr [rax + 40]
	mov	r11, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	r11, rbx
	mov	rsi, rdi
	add	rsi, 32
	mov	r15, -1
	cmovb	rsi, r15
	xor	r12d, r12d
	neg	r10
	mov	r10d, 0
	sbb	r10, rdx
	sbb	r12, rcx
	cmovb	rsi, r15
	cmp	rsi, r11
	ja	.LBB1_1
.LBB1_2:                                # %contd
	mov	rax, qword ptr [rsp + 48]
	add	rbx, qword ptr [r14 + 8]
	movbe	qword ptr [rdi + rbx + 24], r8
	movbe	qword ptr [rdi + rbx + 16], r9
	movbe	qword ptr [rdi + rbx + 8], rax
	mov	rax, qword ptr [rsp + 56]
	movbe	qword ptr [rdi + rbx], rax
	xor	eax, eax
.LBB1_3:                                # %common.ret
                                        # kill: def $al killed $al killed $eax
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB1_1:                                # %resize
	mov	r15, rdi
	mov	rdi, rax
	mov	r12, r9
	mov	r13, r8
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, r13
	mov	rdi, r15
	mov	r9, r12
                                        # kill: def $al killed $al def $eax
	test	al, al
	je	.LBB1_2
	jmp	.LBB1_3
.Lfunc_end1:
	.size	.L__revmc_ir_builtin_mstore, .Lfunc_end1-.L__revmc_ir_builtin_mstore
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function __revmc_ir_builtin_calldataload
	.type	.L__revmc_ir_builtin_calldataload,@function
.L__revmc_ir_builtin_calldataload:      # @__revmc_ir_builtin_calldataload
# %bb.0:                                # %entry
	push	rbp
	mov	rbp, rsp
	push	r14
	push	rbx
	mov	rbx, rdi
	mov	rax, qword ptr [rbp + 16]
	cmp	rsi, rax
	sbb	rdx, 0
	sbb	rcx, 0
	sbb	r8, 0
	jae	.LBB2_2
# %bb.1:                                # %then
	add	r9, rsi
	sub	rax, rsi
	cmp	rax, 32
	mov	edx, 32
	cmovb	rdx, rax
	mov	r14, rsp
	lea	rdi, [r14 - 32]
	mov	rsp, rdi
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r14 - 32], ymm0
	mov	rsi, r9
	vzeroupper
	call	qword ptr [rip + memcpy@GOTPCREL]
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	rdx, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	movbe	qword ptr [rbx + 24], rdx
	movbe	qword ptr [rbx + 16], rsi
	movbe	qword ptr [rbx + 8], rcx
	movbe	qword ptr [rbx], rax
	jmp	.LBB2_3
.LBB2_2:                                # %contd
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rbx], ymm0
.LBB2_3:                                # %contd
	mov	rax, rbx
	lea	rsp, [rbp - 16]
	pop	rbx
	pop	r14
	pop	rbp
	vzeroupper
	ret
.Lfunc_end2:
	.size	.L__revmc_ir_builtin_calldataload, .Lfunc_end2-.L__revmc_ir_builtin_calldataload
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function __revmc_ir_builtin_mload
	.type	.L__revmc_ir_builtin_mload,@function
.L__revmc_ir_builtin_mload:             # @__revmc_ir_builtin_mload
# %bb.0:                                # %entry
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	rax, rsi
	mov	r14, qword ptr [r9 + 40]
	mov	r10, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	r10, rbx
	mov	rsi, rdi
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r15d, r15d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r15, rcx
	cmovb	rsi, r11
	cmp	rsi, r10
	ja	.LBB3_1
.LBB3_2:                                # %contd
	add	rbx, qword ptr [r14 + 8]
	mov	rax, qword ptr [rdi + rbx + 16]
	mov	rcx, qword ptr [rdi + rbx + 24]
	mov	rdx, qword ptr [rdi + rbx]
	mov	rsi, qword ptr [rdi + rbx + 8]
	movbe	qword ptr [r8 + 16], rsi
	movbe	qword ptr [r8 + 24], rdx
	movbe	qword ptr [r8], rcx
	movbe	qword ptr [r8 + 8], rax
	xor	eax, eax
.LBB3_3:                                # %common.ret
                                        # kill: def $al killed $al killed $eax
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB3_1:                                # %resize
	mov	r15, rdi
	mov	rdi, r9
	mov	r12, r8
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, r15
	mov	r8, r12
                                        # kill: def $al killed $al def $eax
	test	al, al
	je	.LBB3_2
	jmp	.LBB3_3
.Lfunc_end3:
	.size	.L__revmc_ir_builtin_mload, .Lfunc_end3-.L__revmc_ir_builtin_mload
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function usdc
.LCPI4_0:
	.long	128                             # 0x80
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_1:
	.long	64                              # 0x40
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_8:
	.long	513                             # 0x201
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_9:
	.long	1406                            # 0x57e
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_10:
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_12:
	.quad	32                              # 0x20
	.quad	0                               # 0x0
.LCPI4_13:
	.quad	59                              # 0x3b
	.quad	0                               # 0x0
.LCPI4_16:
	.quad	50                              # 0x32
	.quad	0                               # 0x0
.LCPI4_17:
	.long	1615                            # 0x64f
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_18:
	.long	1379                            # 0x563
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_19:
	.long	1293                            # 0x50d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_20:
	.quad	54                              # 0x36
	.quad	0                               # 0x0
.LCPI4_22:
	.long	1167                            # 0x48f
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_23:
	.long	845                             # 0x34d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_24:
	.long	684                             # 0x2ac
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_25:
	.long	599                             # 0x257
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_26:
	.long	1762                            # 0x6e2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_27:
	.long	1924                            # 0x784
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_28:
	.long	529                             # 0x211
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_29:
	.long	524                             # 0x20c
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_30:
	.long	439                             # 0x1b7
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_31:
	.long	1320                            # 0x528
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_32:
	.long	416                             # 0x1a0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_33:
	.quad	4                               # 0x4
	.quad	0                               # 0x0
.LCPI4_34:
	.long	36                              # 0x24
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_35:
	.long	872                             # 0x368
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_36:
	.long	285                             # 0x11d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_37:
	.long	786                             # 0x312
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_38:
	.long	262                             # 0x106
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_39:
	.long	624                             # 0x270
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_40:
	.long	184                             # 0xb8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_41:
	.long	539                             # 0x21b
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI4_42:
	.zero	16
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0
.LCPI4_2:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	-9223372036854775808            # 0x8000000000000000
.LCPI4_3:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	911855590                       # 0x3659cfe6
.LCPI4_4:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1327428230                      # 0x4f1ef286
.LCPI4_5:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1549851163                      # 0x5c60da1b
.LCPI4_6:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2401778032                      # 0x8f283970
.LCPI4_7:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4166100032                      # 0xf851a440
.LCPI4_11:
	.quad	1277982680695781643             # 0x11bc4e7a1ff9390b
	.quad	6576700366688470541             # 0x5b4522237ea5c60d
	.quad	-7104280296105182214            # 0x9d6886b5f5d7fbfa
	.quad	1213338888065828998             # 0x10d6a54a4754c886
.LCPI4_14:
	.quad	4600688722702497987             # 0x3fd8ee048ed3f8c3
	.quad	-7831884907286734222            # 0x934f8e2c036e5a72
	.quad	7619310530288729143             # 0x69bd3a8ef740bc37
	.quad	8093190498401547932             # 0x7050c9e0f4ca769c
.LCPI4_15:
	.quad	2475636029413666107             # 0x225b39da2e5c2d3b
	.quad	2399781348495133888             # 0x214dbc6bffa90cc0
	.quad	-7287181868535777451            # 0x9adebab32041f755
	.quad	-4864776715367471107            # 0xbc7cd75a20ee27fd
.LCPI4_21:
	.quad	-8994315597440779889            # 0x832dc59e38c9798f
	.quad	3597243778789622446             # 0x31ebfa28653d42ae
	.quad	2182157528680728787             # 0x1e4894b5f4f588d3
	.quad	9107489529646749632             # 0x7e644d79422f17c0
	.text
	.globl	usdc
	.p2align	4, 0x90
	.type	usdc,@function
usdc:                                   # @usdc
# %bb.0:                                # %entry
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 312
	mov	r13, r9
	mov	r14, rdx
	mov	r15, rsi
	mov	rax, qword ptr [r9 + 32]
	test	rax, rax
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	mov	qword ptr [rbp - 56], r9        # 8-byte Spill
	je	.LBB4_5
# %bb.1:                                # %resume
	mov	r12, qword ptr [r14]
	jmp	rax
.Ltmp15:                                # Block address taken
.LBB4_2:                                # %OP343.SWAP3
	mov	r8, rdi
	mov	rax, r12
	shl	rax, 5
	mov	rdx, qword ptr [r15 + rax - 32]
	mov	rsi, qword ptr [r15 + rax - 24]
	vmovaps	xmm0, xmmword ptr [r15 + rax - 128]
	vmovaps	xmm1, xmmword ptr [r15 + rax - 112]
	vmovaps	xmmword ptr [r15 + rax - 32], xmm0
	or	rsi, qword ptr [r15 + rax - 8]
	or	rdx, qword ptr [r15 + rax - 16]
	vmovaps	xmmword ptr [r15 + rax - 16], xmm1
	add	r12, -4
	mov	rcx, r12
	shl	rcx, 5
	xor	edi, edi
	or	rdx, rsi
	setne	dil
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rcx + 8], xmm0
	mov	qword ptr [r15 + rcx], rdi
	mov	qword ptr [r15 + rcx + 24], 0
	je	.LBB4_17
# %bb.3:
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB4_4:                                # %OP362.JUMPDEST
	add	r12, -4
	mov	rax, r12
	shl	rax, 5
	mov	rdi, qword ptr [r15 + rax + 24]
	mov	rsi, qword ptr [r15 + rax + 16]
	mov	rcx, qword ptr [r15 + rax]
	mov	rdx, qword ptr [r15 + rax + 8]
	jmp	.LBB4_35
.LBB4_5:                                # %no_resume
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_0] # xmm0 = [128,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r15 + 32], ymm0
	mov	rbx, qword ptr [r13 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 95
	jbe	.LBB4_22
.LBB4_6:                                # %OP3.PUSH1
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_2] # ymm0 = [0,0,0,9223372036854775808]
	vmovups	ymmword ptr [rax + r14 + 64], ymm0
	mov	r13, qword ptr [r8 + 80]
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + 40], xmm0
	mov	qword ptr [r15 + 32], r13
	mov	qword ptr [r15 + 56], 0
	vmovups	xmmword ptr [r15 + 8], xmm0
	xor	eax, eax
	mov	qword ptr [r15 + 24], 0
	mov	r14d, 117
	cmp	r13, 4
	setb	al
	mov	qword ptr [r15], rax
	jae	.LBB4_12
# %bb.7:
	xor	r12d, r12d
	xor	r8d, r8d
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB4_183
.Ltmp16:                                # Block address taken
.LBB4_8:                                # %OP644.RETURNDATASIZE
	lea	rdx, [r12 + 1]
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, r12
	shl	rcx, 5
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rcx + 8], xmm0
	mov	qword ptr [rbp - 72], r12       # 8-byte Spill
	lea	r12, [r15 + rcx]
	mov	qword ptr [r15 + rcx], rax
	mov	qword ptr [r15 + rcx + 24], 0
	mov	rdi, r13
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	mov	r13, rdx
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r15 + rcx + 80], 0
	mov	qword ptr [r15 + rcx + 64], 0
	mov	qword ptr [r15 + rcx + 88], 0
	mov	qword ptr [r15 + rcx + 72], 0
	mov	rbx, rdi
	mov	rsi, r12
	call	__revmc_builtin_returndatacopy@PLT
	test	al, al
	jne	.LBB4_24
# %bb.9:                                # %OP648.DUP1
	add	r13, r15
	mov	rax, qword ptr [r12 - 8]
	mov	rcx, qword ptr [r12 - 32]
	mov	rdx, qword ptr [r12 - 24]
	mov	rsi, qword ptr [r12 - 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 80], rsi
	mov	qword ptr [r12 + 64], rcx
	mov	qword ptr [r12 + 88], rax
	mov	qword ptr [r12 + 72], rdx
	or	rdx, rax
	or	rcx, rsi
	xor	eax, eax
	or	rcx, rdx
	sete	al
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	je	.LBB4_21
# %bb.10:                               # %OP654.RETURNDATASIZE
	mov	rax, qword ptr [rbx + 24]
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r12 + 80], 0
	mov	qword ptr [r12 + 88], 0
	mov	qword ptr [r12 + 64], 0
	mov	qword ptr [r12 + 72], 0
	mov	rdi, rbx
	mov	rsi, r13
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB4_25
.LBB4_11:                               # %select.end3877
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB4_190
.LBB4_12:                               # %OP8.PUSH1
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15], ymm0
	mov	rbx, qword ptr [r8 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 352]
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r13
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 328]
	shr	rax, 32
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 24], 0
	vmovups	xmmword ptr [r15 + 72], xmm0
	mov	qword ptr [r15 + 88], 0
	xor	ecx, ecx
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_3] # ymm0 = [0,0,0,911855590]
	vmovups	ymmword ptr [r15 + 40], ymm0
	mov	r12d, 1
	cmp	rax, 911855590
	sete	cl
	mov	qword ptr [r15 + 32], rcx
	je	.LBB4_26
# %bb.13:                               # %OP20.DUP1
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + 72], xmm0
	mov	qword ptr [r15 + 88], 0
	xor	ecx, ecx
	cmp	rax, 1327428230
	sete	cl
	vmovaps	ymm1, ymmword ptr [rip + .LCPI4_4] # ymm1 = [0,0,0,1327428230]
	vmovups	ymmword ptr [r15 + 40], ymm1
	mov	qword ptr [r15 + 32], rcx
	cmp	eax, 1327428230
	je	.LBB4_145
# %bb.14:                               # %OP25.DUP1
	vmovups	xmmword ptr [r15 + 72], xmm0
	mov	qword ptr [r15 + 88], 0
	xor	ecx, ecx
	cmp	rax, 1549851163
	sete	cl
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_5] # ymm0 = [0,0,0,1549851163]
	vmovups	ymmword ptr [r15 + 40], ymm0
	mov	qword ptr [r15 + 32], rcx
	cmp	eax, 1549851163
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	je	.LBB4_133
# %bb.15:                               # %OP30.DUP1
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + 72], xmm0
	mov	qword ptr [r15 + 88], 0
	mov	ecx, 2401778032
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovaps	ymm1, ymmword ptr [rip + .LCPI4_6] # ymm1 = [0,0,0,2401778032]
	vmovups	ymmword ptr [r15 + 40], ymm1
	mov	qword ptr [r15 + 32], rdx
	cmp	eax, -1893189264
	je	.LBB4_163
# %bb.16:                               # %OP35.DUP1
	vmovups	xmmword ptr [r15 + 72], xmm0
	mov	qword ptr [r15 + 88], 0
	mov	ecx, 4166100032
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_7] # ymm0 = [0,0,0,4166100032]
	vmovups	ymmword ptr [r15 + 40], ymm0
	mov	qword ptr [r15 + 32], rdx
	cmp	eax, -128867264
	je	.LBB4_139
	jmp	.LBB4_182
.LBB4_17:                               # %OP351.PUSH1
	lea	rdx, [r15 + rax]
	lea	rsi, [r15 + rax]
	add	rsi, -128
	add	rcx, r15
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rcx], ymm0
	vmovups	ymmword ptr [rdx - 96], ymm0
	jmp	.LBB4_18
.LBB4_21:
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r13, rbx
	jmp	.LBB4_158
.LBB4_22:                               # %resize.i
	mov	esi, 96
	mov	r12, rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	mov	rdi, r12
	test	al, al
	je	.LBB4_6
# %bb.23:
	xor	r12d, r12d
	jmp	.LBB4_189
.LBB4_24:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB4_190
.LBB4_25:                               # %select.false3878
	mov	eax, ecx
	jmp	.LBB4_11
.LBB4_190:                              # %return
	mov	qword ptr [r14], r12
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB4_18:                               # %OP351.PUSH1
	mov	rdi, r13
.LBB4_19:                               # %OP351.PUSH1
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB4_190
.LBB4_20:                               # %select.false3847
	mov	eax, ecx
	jmp	.LBB4_190
.LBB4_26:                               # %OP46.JUMPDEST
	mov	rax, r12
	inc	r12
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [rsi + 120]
	mov	rdx, qword ptr [rsi + 96]
	mov	rdi, qword ptr [rsi + 104]
	mov	r8, qword ptr [rsi + 112]
	shl	rax, 5
	mov	qword ptr [r15 + rax + 16], r8
	mov	qword ptr [r15 + rax], rdx
	mov	qword ptr [r15 + rax + 24], rcx
	mov	qword ptr [r15 + rax + 8], rdi
	mov	rsi, r12
	shl	rsi, 5
	or	rdi, rcx
	or	rdx, r8
	xor	ecx, ecx
	or	rdx, rdi
	sete	cl
	mov	qword ptr [r15 + rsi], rcx
	mov	qword ptr [r15 + rsi + 16], 0
	mov	qword ptr [r15 + rsi + 24], 0
	mov	qword ptr [r15 + rsi + 8], 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB4_30
# %bb.27:                               # %OP52.PUSH1
	add	rax, r15
	add	rsi, r15
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rsi], ymm0
	vmovups	ymmword ptr [rax + 64], ymm0
.LBB4_28:                               # %OP52.PUSH1
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB4_189
# %bb.29:                               # %select.false
	mov	eax, ecx
	jmp	.LBB4_189
.LBB4_30:                               # %OP55.JUMPDEST
	mov	rbx, r12
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_40] # xmm0 = [184,0,0,0]
	vmovups	ymmword ptr [r15 + rbx - 32], ymm0
	inc	r12
	mov	r14, r12
	shl	r14, 5
	mov	r13, r12
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r12, qword ptr [rax + 80]
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rbx + 8], xmm0
	mov	qword ptr [r15 + rbx], r12
	mov	qword ptr [r15 + rbx + 24], 0
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14], 4
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [r15 + rbx + 80], 0
	mov	qword ptr [r15 + rbx + 88], 0
	mov	qword ptr [r15 + rbx + 64], 4
	mov	qword ptr [r15 + rbx + 72], 0
	mov	qword ptr [r15 + rbx + 112], 0
	mov	qword ptr [r15 + rbx + 120], 0
	mov	qword ptr [r15 + rbx + 96], 4
	mov	qword ptr [r15 + rbx + 104], 0
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 256]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	push	r12
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 240]
	mov	rcx, qword ptr [rbp - 256]
	mov	rdx, qword ptr [rbp - 248]
	mov	qword ptr [r15 + rbx + 144], 0
	mov	qword ptr [r15 + rbx + 128], 32
	mov	qword ptr [r15 + rbx + 152], 0
	mov	qword ptr [r15 + rbx + 136], 0
	mov	qword ptr [r15 + rbx + 16], rax
	mov	qword ptr [r15 + rbx], rcx
	mov	qword ptr [r15 + rbx + 8], rdx
	mov	qword ptr [r15 + rbx + 24], 0
	mov	qword ptr [r15 + r14], r12
	mov	r12, r13
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 16], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_33] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15 + rbx + 64], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_34] # xmm0 = [36,0,0,0]
	vmovups	ymmword ptr [r15 + rbx + 96], ymm0
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
.LBB4_31:                               # %OP260.JUMPDEST
	lea	rax, [r12 + 1]
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_41] # xmm0 = [539,0,0,0]
.LBB4_32:                               # %OP661.JUMPDEST
	vmovups	ymmword ptr [r15 + r12], ymm0
	mov	r12, rax
.LBB4_33:                               # %OP661.JUMPDEST
	mov	rbx, r12
	shl	rbx, 5
	lea	r14, [r12 + 3]
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rbx], ymm0
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_10] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [r15 + rax], ymm0
	lea	rsi, [r15 + rbx]
	add	rsi, 64
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_11] # ymm0 = [1277982680695781643,6576700366688470541,11342463777604369402,1213338888065828998]
	vmovups	ymmword ptr [r15 + rbx + 32], ymm0
	vmovups	ymmword ptr [r15 + rbx + 64], ymm0
	mov	rdi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB4_219
# %bb.34:                               # %OP671.SWAP2
	add	rbx, r15
	vmovaps	xmm0, xmmword ptr [rbx + 64]
	vmovaps	xmm1, xmmword ptr [rbx + 80]
	vmovaps	xmm2, xmmword ptr [rbx]
	vmovaps	xmm3, xmmword ptr [rbx + 16]
	vmovaps	xmmword ptr [rbx + 80], xmm3
	vmovaps	xmmword ptr [rbx + 64], xmm2
	mov	rcx, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 8]
	mov	rsi, qword ptr [rbx - 16]
	vmovaps	xmmword ptr [rbx - 16], xmm1
	vmovaps	xmmword ptr [rbx - 32], xmm0
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 8], rdx
.LBB4_35:                               # %dynamic_jump_table
	lea	rax, [r15 - 32]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
.LBB4_36:                               # %dynamic_jump_table
                                        # =>This Inner Loop Header: Depth=1
	xor	r8d, r8d
	mov	eax, 756
	cmp	rax, rcx
	mov	eax, 0
	sbb	rax, rdx
	mov	eax, 0
	sbb	rax, rsi
	mov	eax, 0
	sbb	rax, rdi
	jge	.LBB4_43
# %bb.37:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	eax, eax
	mov	r8d, 1606
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	mov	r8d, 0
	sbb	r8, rsi
	sbb	rax, rdi
	jl	.LBB4_47
# %bb.38:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	eax, eax
	mov	r8d, 1166
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	mov	r8d, 0
	sbb	r8, rsi
	sbb	rax, rdi
	jl	.LBB4_52
# %bb.39:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	add	rax, -757
	mov	r8, rdx
	adc	r8, -1
	mov	r9, rsi
	adc	r9, -1
	mov	r10, rdi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 115
	cmp	rbx, rax
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB4_228
# %bb.40:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rcx, [rip + .LJTI4_4]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB4_41:                               # %OP372.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rcx, r12
	shl	rcx, 5
	mov	esi, dword ptr [r15 + rcx - 16]
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edi, dword ptr [rdx + 164]
	movbe	rax, qword ptr [rdx + 156]
	bswap	rdi
	movbe	rdx, qword ptr [rdx + 148]
	shrd	rdi, rax, 32
	shrd	rax, rdx, 32
	shr	rdx, 32
	mov	r8d, 4294967295
	mov	qword ptr [r15 + rcx + 48], r8
	mov	qword ptr [r15 + rcx + 56], 0
	mov	qword ptr [r15 + rcx + 40], -1
	mov	qword ptr [r15 + rcx + 32], -1
	mov	qword ptr [r15 + rcx + 16], rdx
	mov	qword ptr [r15 + rcx + 8], rax
	mov	qword ptr [r15 + rcx], rdi
	mov	qword ptr [r15 + rcx + 24], 0
	xor	rdi, qword ptr [r15 + rcx - 32]
	xor	rdx, rsi
	or	rdx, rdi
	xor	rax, qword ptr [r15 + rcx - 24]
	mov	rdi, r12
	dec	r12
	mov	rcx, r12
	shl	rcx, 5
	xor	r8d, r8d
	xor	esi, esi
	or	rax, rdx
	setne	sil
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rcx + 8], xmm0
	mov	qword ptr [r15 + rcx], rsi
	mov	qword ptr [r15 + rcx + 24], 0
	mov	r14d, 860
	jne	.LBB4_183
# %bb.42:                               # %OP382.PUSH2
                                        #   in Loop: Header=BB4_36 Depth=1
	add	rcx, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_23] # xmm0 = [845,0,0,0]
	vmovups	ymmword ptr [rcx], ymm0
	mov	r12, rdi
	jmp	.LBB4_66
	.p2align	4, 0x90
.LBB4_43:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	al, 1
	xor	r9d, r9d
	mov	r10d, 415
	cmp	r10, rcx
	mov	r10d, 0
	sbb	r10, rdx
	mov	r10d, 0
	sbb	r10, rsi
	sbb	r9, rdi
	jge	.LBB4_127
# %bb.44:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r8, rcx
	add	r8, -505
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	r11, rdi
	adc	r11, -1
	xor	ebx, ebx
	mov	r14d, 119
	cmp	r14, r8
	mov	r14d, 0
	sbb	r14, r9
	mov	r9d, 0
	sbb	r9, r10
	sbb	rbx, r11
	jb	.LBB4_136
# %bb.45:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rax, [rip + .LJTI4_3]
	movsxd	rcx, dword ptr [rax + 4*r8]
	add	rcx, rax
	jmp	rcx
.LBB4_46:                               # %OP250.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, r12
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_28] # xmm0 = [529,0,0,0]
	vmovups	ymmword ptr [r15 + rax], ymm0
	add	r12, 2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_29] # xmm0 = [524,0,0,0]
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
	jmp	.LBB4_66
	.p2align	4, 0x90
.LBB4_47:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	eax, eax
	mov	r8d, 1761
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	mov	r8d, 0
	sbb	r8, rsi
	sbb	rax, rdi
	jl	.LBB4_56
# %bb.48:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	eax, eax
	mov	r8d, 1665
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	mov	r8d, 0
	sbb	r8, rsi
	sbb	rax, rdi
	jge	.LBB4_63
# %bb.49:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	eax, eax
	mov	r8d, 1703
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	mov	r8d, 0
	sbb	r8, rsi
	sbb	rax, rdi
	jge	.LBB4_155
# %bb.50:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	xor	rax, 1704
	or	rax, rsi
	or	rdx, rdi
	or	rax, rdx
	je	.LBB4_33
# %bb.51:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	rcx, 1753
	or	rcx, rsi
	or	rcx, rdx
	je	.LBB4_109
	jmp	.LBB4_229
.LBB4_52:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	add	rax, -1293
	mov	r8, rdx
	adc	r8, -1
	mov	r9, rsi
	adc	r9, -1
	mov	r10, rdi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 113
	cmp	rbx, rax
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB4_73
# %bb.53:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rcx, [rip + .LJTI4_5]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB4_54:                               # %OP385.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, r12
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [r15 + rax - 64]
	vmovaps	xmm1, xmmword ptr [r15 + rax - 48]
	vmovaps	xmm2, xmmword ptr [r15 + rax - 32]
	vmovaps	xmm3, xmmword ptr [r15 + rax - 16]
	vmovaps	xmmword ptr [r15 + rax - 48], xmm3
	vmovaps	xmmword ptr [r15 + rax - 64], xmm2
	vmovaps	xmmword ptr [r15 + rax - 16], xmm1
	vmovaps	xmmword ptr [r15 + rax - 32], xmm0
	dec	r12
.LBB4_55:                               # %OP395.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, r12
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [r15 + rax - 32]
	vmovaps	xmm1, xmmword ptr [r15 + rax - 16]
	mov	rcx, qword ptr [r15 + rax - 64]
	mov	rdx, qword ptr [r15 + rax - 56]
	mov	rdi, qword ptr [r15 + rax - 40]
	mov	rsi, qword ptr [r15 + rax - 48]
	vmovaps	xmmword ptr [r15 + rax - 48], xmm1
	vmovaps	xmmword ptr [r15 + rax - 64], xmm0
	mov	qword ptr [r15 + rax - 16], rsi
	mov	qword ptr [r15 + rax - 8], rdi
	mov	qword ptr [r15 + rax - 32], rcx
	mov	qword ptr [r15 + rax - 24], rdx
	dec	r12
	jmp	.LBB4_36
.LBB4_56:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	eax, eax
	mov	r8d, 1912
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	mov	r8d, 0
	sbb	r8, rsi
	sbb	rax, rdi
	jge	.LBB4_68
# %bb.57:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	eax, eax
	mov	r8d, 2077
	cmp	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	mov	r8d, 0
	sbb	r8, rsi
	sbb	rax, rdi
	jl	.LBB4_71
# %bb.58:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	xor	rax, 1913
	or	rax, rsi
	or	rdx, rdi
	or	rax, rdx
	je	.LBB4_110
# %bb.59:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	rcx, 1924
	or	rcx, rsi
	or	rcx, rdx
	jne	.LBB4_229
# %bb.60:                               # %OP729.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rbx, r12
	dec	r12
	mov	r14, r12
	shl	r14, 5
	mov	rax, qword ptr [r15 + r14]
	mov	rcx, qword ptr [r15 + r14 + 8]
	or	rcx, qword ptr [r15 + r14 + 24]
	or	rax, qword ptr [r15 + r14 + 16]
	xor	edx, edx
	or	rax, rcx
	setne	dl
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + r14 + 8], xmm0
	mov	qword ptr [r15 + r14], rdx
	mov	qword ptr [r15 + r14 + 24], 0
	jne	.LBB4_61
	jmp	.LBB4_203
.LBB4_63:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	xor	rax, 1607
	or	rax, rsi
	or	rdx, rdi
	or	rax, rdx
	je	.LBB4_88
# %bb.64:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	xor	rax, 1615
	or	rax, rsi
	or	rax, rdx
	je	.LBB4_89
# %bb.65:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	rcx, 1617
	or	rcx, rsi
	or	rcx, rdx
	jne	.LBB4_229
.LBB4_66:                               # %OP617.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rbx, r12
	shl	rbx, 5
	lea	r14, [r12 + 3]
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rbx], ymm0
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_10] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [r15 + rax], ymm0
	lea	rsi, [r15 + rbx]
	add	rsi, 64
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_14] # ymm0 = [4600688722702497987,10614859166422817394,7619310530288729143,8093190498401547932]
	vmovups	ymmword ptr [r15 + rbx + 32], ymm0
	vmovups	ymmword ptr [r15 + rbx + 64], ymm0
	mov	rdi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB4_219
# %bb.67:                               # %OP627.SWAP2
                                        #   in Loop: Header=BB4_36 Depth=1
	add	rbx, r15
	vmovaps	xmm0, xmmword ptr [rbx + 64]
	vmovaps	xmm1, xmmword ptr [rbx + 80]
	vmovaps	xmm2, xmmword ptr [rbx]
	vmovaps	xmm3, xmmword ptr [rbx + 16]
	vmovaps	xmmword ptr [rbx + 80], xmm3
	vmovaps	xmmword ptr [rbx + 64], xmm2
	mov	rcx, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 8]
	mov	rsi, qword ptr [rbx - 16]
	vmovaps	xmmword ptr [rbx - 16], xmm1
	vmovaps	xmmword ptr [rbx - 32], xmm0
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 8], rdx
	jmp	.LBB4_36
.LBB4_68:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	xor	rax, 1762
	or	rax, rsi
	or	rdx, rdi
	or	rax, rdx
	je	.LBB4_93
# %bb.69:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	xor	rax, 1864
	or	rax, rsi
	or	rax, rdx
	je	.LBB4_90
# %bb.70:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	rcx, 1911
	or	rcx, rsi
	or	rcx, rdx
	je	.LBB4_89
	jmp	.LBB4_229
.LBB4_71:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, rcx
	xor	rax, 2078
	or	rax, rsi
	or	rdx, rdi
	or	rax, rdx
	je	.LBB4_61
# %bb.72:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	rcx, 2123
	or	rcx, rsi
	or	rcx, rdx
	je	.LBB4_111
	jmp	.LBB4_229
.LBB4_61:                               # %OP777.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, r12
	shl	rax, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_14] # ymm0 = [4600688722702497987,10614859166422817394,7619310530288729143,8093190498401547932]
	vmovups	ymmword ptr [r15 + rax - 32], ymm0
	lea	rsi, [r15 + rax]
	vmovups	ymm1, ymmword ptr [r15 + rax - 64]
	vmovups	ymmword ptr [r15 + rax], ymm1
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
	mov	rdi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB4_189
# %bb.62:                               # %OP786.POP
                                        #   in Loop: Header=BB4_36 Depth=1
	add	r12, -3
	jmp	.LBB4_103
.LBB4_73:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	xor	rcx, 1167
	or	rcx, rsi
	or	rdx, rdi
	or	rdx, rcx
	mov	qword ptr [rbp - 72], r12       # 8-byte Spill
	jne	.LBB4_229
# %bb.74:                               # %OP472.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rcx, [r12 + 1]
	mov	rax, r12
	shl	rax, 5
	vmovups	ymm0, ymmword ptr [r15 + rax - 96]
	vmovups	ymmword ptr [r15 + rax], ymm0
	mov	rsi, r12
	lea	r12, [r15 + rax]
	lea	rbx, [rsi + 2]
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	mov	rax, rcx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r15 + rax], ymm0
	lea	rdi, [r15 + rax]
	mov	r14, qword ptr [r13 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rax, r13
	mov	r9, r14
	cmp	rax, 95
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	jbe	.LBB4_119
.LBB4_75:                               # %OP475.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rcx, qword ptr [r14 + 8]
	mov	r14, qword ptr [rcx + r13 + 88]
	mov	rax, qword ptr [rcx + r13 + 80]
	mov	rdx, qword ptr [rcx + r13 + 64]
	mov	rcx, qword ptr [rcx + r13 + 72]
	movbe	qword ptr [rdi + 24], rdx
	movbe	qword ptr [rdi + 8], rax
	movbe	qword ptr [rdi + 16], rcx
	movbe	qword ptr [rdi], r14
	shl	rbx, 5
	movbe	qword ptr [r15 + rbx + 24], rdx
	movbe	qword ptr [r15 + rbx + 8], rax
	movbe	qword ptr [r15 + rbx + 16], rcx
	movbe	qword ptr [r15 + rbx], r14
	lea	r11, [rsi + 3]
	mov	rdi, qword ptr [r12 - 24]
	mov	r8d, dword ptr [r12 - 16]
	mov	r10, qword ptr [r12 - 32]
	mov	rsi, r11
	shl	rsi, 5
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	mov	qword ptr [r15 + rsi], r10
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	mov	qword ptr [r15 + rsi + 16], r8
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	mov	qword ptr [r15 + rsi + 8], rdi
	mov	qword ptr [r15 + rsi + 24], 0
	movbe	qword ptr [r12 + 152], rdx
	bswap	rdx
	movbe	qword ptr [r12 + 144], rcx
	bswap	rcx
	movbe	qword ptr [r12 + 136], rax
	mov	rdi, rax
	bswap	rdi
	movbe	qword ptr [r12 + 128], r14
	bswap	r14
	lea	r13, [r15 + rbx]
	lea	rax, [r15 + rsi]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	xor	r8d, r8d
	mov	rax, qword ptr [r9 + 16]
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	mov	rbx, qword ptr [r9 + 48]
	sub	rax, rbx
	mov	r10, r14
	mov	rsi, -1
	mov	r9, -1
	add	r10, 32
	jb	.LBB4_77
# %bb.76:                               # %OP475.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r9, r10
.LBB4_77:                               # %OP475.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	neg	rdi
	mov	edi, 0
	sbb	rdi, rcx
	sbb	r8, rdx
	jb	.LBB4_79
# %bb.78:                               # %OP475.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rsi, r9
.LBB4_79:                               # %OP475.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r8, rcx
	cmp	rsi, rax
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	ja	.LBB4_121
.LBB4_80:                               # %OP484.PUSH1
                                        #   in Loop: Header=BB4_36 Depth=1
	add	rbx, qword ptr [rcx + 8]
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r14 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r14 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r14 + rbx + 8], rax
	mov	qword ptr [r14 + rbx], 0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rbx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	add	rbx, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rbx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 24], rax
	mov	rdi, qword ptr [r12]
	mov	esi, dword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 8]
	xor	r9d, r9d
	mov	qword ptr [rbp - 136], r14      # 8-byte Spill
	mov	qword ptr [r10 + 8], r14
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	qword ptr [r10 + 16], rsi
	mov	qword ptr [rbp - 144], rdi      # 8-byte Spill
	mov	qword ptr [r10], rdi
	mov	qword ptr [r10 + 24], 0
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 136], rdx
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 128], rbx
	mov	rdi, qword ptr [r8 + 16]
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	mov	r14, qword ptr [r8 + 48]
	sub	rdi, r14
	mov	r8, rbx
	add	r8, 32
	mov	rsi, -1
	cmovb	r8, rsi
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	jb	.LBB4_82
# %bb.81:                               # %OP484.PUSH1
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rsi, r8
.LBB4_82:                               # %OP484.PUSH1
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r8, rax
	cmp	rsi, rdi
	ja	.LBB4_123
.LBB4_83:                               # %OP493.PUSH1
                                        #   in Loop: Header=BB4_36 Depth=1
	add	r14, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [rbx + r14 + 24], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [rbx + r14 + 16], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [rbx + r14 + 8], rax
	mov	qword ptr [rbx + r14], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_12] # xmm0 = [32,0]
	vmovups	ymmword ptr [r10], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r12 - 32]
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	mov	qword ptr [r12 - 8], rax
	vmovups	ymmword ptr [r13], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r8 + 16]
	mov	rbx, qword ptr [r8 + 48]
	sub	rdi, rbx
	cmp	rdi, 95
	jbe	.LBB4_125
.LBB4_84:                               # %OP500.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r10, qword ptr [r8 + 8]
	mov	r8, qword ptr [r10 + rbx + 88]
	mov	rdi, qword ptr [r10 + rbx + 80]
	mov	r9, qword ptr [r10 + rbx + 64]
	mov	r10, qword ptr [r10 + rbx + 72]
	mov	r11, r10
	bswap	r11
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rax
	mov	rbx, r8
	bswap	rbx
	sub	rdx, rbx
	mov	rbx, rdi
	bswap	rbx
	sbb	rsi, rbx
	sbb	rcx, r11
	mov	r11, r9
	bswap	r11
	sbb	rax, r11
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	mov	qword ptr [r12 - 8], rax
	movbe	qword ptr [r12 + 16], r10
	movbe	qword ptr [r12], r8
	movbe	qword ptr [r12 + 24], r9
	movbe	qword ptr [r12 + 8], rdi
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	lea	rbx, [rax - 2]
	lea	rsi, [r12 - 64]
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, r13
	mov	edx, 1
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB4_92
# %bb.85:                               # %OP506.PUSH2
                                        #   in Loop: Header=BB4_36 Depth=1
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_19] # xmm0 = [1293,0,0,0]
	vmovups	ymmword ptr [r15 + rbx], ymm0
	mov	rcx, qword ptr [r12 - 96]
	mov	rdx, qword ptr [r12 - 88]
	mov	rax, qword ptr [r12 - 72]
	mov	rdi, qword ptr [r12 - 80]
	mov	qword ptr [r12 - 16], rdi
	mov	qword ptr [r12 - 8], rax
	mov	qword ptr [r12 - 32], rcx
	mov	qword ptr [r12 - 24], rdx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 120]      # 8-byte Reload
	jmp	.LBB4_91
.LBB4_86:                               # %OP556.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rbx, [r12 + 1]
	mov	r11, r12
	shl	r11, 5
	lea	r10, [r12 - 1]
	mov	r14, r10
	shl	r14, 5
	mov	esi, dword ptr [r15 + r14 + 16]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	rdi, qword ptr [rax + 156]
	movbe	rcx, qword ptr [rax + 148]
	mov	eax, dword ptr [rax + 164]
	mov	rdx, rcx
	shld	rdx, rdi, 32
	bswap	rax
	shrd	rax, rdi, 32
	shr	rcx, 32
	mov	r9, r12
	mov	r12, rbx
	shl	r12, 5
	mov	rdi, qword ptr [r15 + r14]
	mov	r8d, 4294967295
	mov	qword ptr [r15 + r12 + 16], r8
	mov	r8, qword ptr [r15 + r14 + 8]
	mov	qword ptr [r15 + r12 + 24], 0
	mov	qword ptr [r15 + r12 + 8], -1
	mov	qword ptr [r15 + r12], -1
	mov	qword ptr [r15 + r11 + 16], rcx
	xor	rcx, rsi
	xor	rdi, rax
	xor	r8, rdx
	or	rcx, rdi
	xor	esi, esi
	or	rcx, r8
	mov	qword ptr [r15 + r11 + 8], rdx
	mov	qword ptr [r15 + r11], rax
	mov	qword ptr [r15 + r11 + 24], 0
	setne	sil
	mov	qword ptr [r15 + r14], rsi
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + r14 + 8], xmm0
	mov	qword ptr [r15 + r14 + 24], 0
	je	.LBB4_194
# %bb.87:                               #   in Loop: Header=BB4_36 Depth=1
	mov	r12, r10
.LBB4_88:                               # %OP611.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rax, [r12 + 1]
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_17] # xmm0 = [1615,0,0,0]
	vmovups	ymmword ptr [r15 + r12], ymm0
	mov	r12, rax
.LBB4_89:                               # %OP258.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	dec	r12
	jmp	.LBB4_103
.LBB4_90:                               # %dynamic_jump_table.OP708.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rdx, r12
	shl	rdx, 5
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rax, qword ptr [rsi + rdx + 24]
	mov	rdi, qword ptr [rsi + rdx + 16]
	mov	rcx, qword ptr [rsi + rdx]
	mov	rdx, qword ptr [rsi + rdx + 8]
	lea	rbx, [r12 + 1]
.LBB4_91:                               # %OP708.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r8, r12
	shl	r8, 5
	mov	r9, rbx
	shl	r9, 5
	lea	rsi, [r15 + r9]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_11] # ymm0 = [1277982680695781643,6576700366688470541,11342463777604369402,1213338888065828998]
	vmovups	ymmword ptr [r15 + r8], ymm0
	mov	qword ptr [r15 + r9 + 16], rdi
	mov	qword ptr [r15 + r9], rcx
	mov	qword ptr [r15 + r9 + 8], rdx
	mov	qword ptr [r15 + r9 + 24], rax
	movabs	rax, -7104280296105182214
	mov	qword ptr [r15 + r8 + 80], rax
	movabs	rax, 1277982680695781643
	mov	qword ptr [r15 + r8 + 64], rax
	movabs	rax, 1213338888065828998
	mov	qword ptr [r15 + r8 + 88], rax
	movabs	rax, 6576700366688470541
	mov	qword ptr [r15 + r8 + 72], rax
	mov	rdi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	je	.LBB4_102
	jmp	.LBB4_92
.LBB4_93:                               # %OP681.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rcx, r12
	shl	rcx, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_15] # ymm0 = [2475636029413666107,2399781348495133888,11159562205173774165,13581967358342080509]
	vmovups	ymmword ptr [r15 + rcx], ymm0
	mov	rdi, r12
	lea	r12, [r15 + rcx]
	mov	r8, qword ptr [r15 + rcx - 32]
	mov	r10, qword ptr [r15 + rcx - 24]
	mov	rax, qword ptr [r15 + rcx - 16]
	mov	rdx, qword ptr [r15 + rcx - 8]
	mov	qword ptr [r15 + rcx + 56], rdx
	mov	qword ptr [r15 + rcx + 48], rax
	mov	qword ptr [r15 + rcx + 40], r10
	mov	qword ptr [r15 + rcx + 32], r8
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r15 + rcx + 64], ymm0
	lea	r11, [rdi + 3]
	mov	r14, qword ptr [r13 + 40]
	mov	rcx, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rcx, rbx
	mov	r13, r14
	cmp	rcx, 95
	jbe	.LBB4_113
.LBB4_94:                               # %OP685.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rdx, qword ptr [r14 + 8]
	mov	r14, qword ptr [rdx + rbx + 88]
	mov	rcx, qword ptr [rdx + rbx + 80]
	mov	rsi, qword ptr [rdx + rbx + 64]
	mov	rdx, qword ptr [rdx + rbx + 72]
	movbe	qword ptr [r12 + 88], rsi
	movbe	qword ptr [r12 + 72], rcx
	movbe	qword ptr [r12 + 64], r14
	movbe	qword ptr [r12 + 80], rdx
	mov	qword ptr [rbp - 72], rdi       # 8-byte Spill
	lea	r9, [rdi + 4]
	mov	rdi, r11
	shl	rdi, 5
	movbe	qword ptr [r15 + rdi + 24], rsi
	movbe	qword ptr [r15 + rdi + 8], rcx
	movbe	qword ptr [r15 + rdi + 16], rdx
	movbe	qword ptr [r15 + rdi], r14
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	shl	r9, 5
	mov	eax, eax
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [r15 + r9 + 8], r10
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	qword ptr [r15 + r9], r8
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	mov	qword ptr [r15 + r9 + 16], rax
	mov	qword ptr [r15 + r9 + 24], 0
	movbe	qword ptr [r12 + 184], rsi
	mov	rax, rsi
	bswap	rax
	movbe	qword ptr [r12 + 176], rdx
	bswap	rdx
	movbe	qword ptr [r12 + 168], rcx
	mov	r8, rcx
	bswap	r8
	movbe	qword ptr [r12 + 160], r14
	bswap	r14
	lea	rbx, [r15 + rdi]
	lea	rcx, [r15 + r9]
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	xor	edi, edi
	mov	rcx, qword ptr [r13 + 16]
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r13, qword ptr [r13 + 48]
	sub	rcx, r13
	mov	r10, r14
	mov	rsi, -1
	mov	r9, -1
	add	r10, 32
	jb	.LBB4_96
# %bb.95:                               # %OP685.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r9, r10
.LBB4_96:                               # %OP685.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	neg	r8
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rax
	jb	.LBB4_98
# %bb.97:                               # %OP685.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rsi, r9
.LBB4_98:                               # %OP685.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r8, rdx
	cmp	rsi, rcx
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	ja	.LBB4_115
.LBB4_99:                               # %OP694.PUSH1
                                        #   in Loop: Header=BB4_36 Depth=1
	add	r13, qword ptr [rdx + 8]
	movbe	qword ptr [r14 + r13 + 24], rax
	movbe	qword ptr [r14 + r13 + 16], rcx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 8], rax
	mov	qword ptr [r14 + r13], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_12] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r12 + 32]
	mov	qword ptr [r12 + 32], rdx
	mov	qword ptr [r12 + 40], rsi
	mov	qword ptr [r12 + 48], rcx
	mov	qword ptr [r12 + 56], rax
	vmovups	ymmword ptr [rbx], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r12 + 64], ymm0
	mov	rdi, qword ptr [r8 + 16]
	mov	r14, qword ptr [r8 + 48]
	sub	rdi, r14
	cmp	rdi, 95
	jbe	.LBB4_117
.LBB4_100:                              # %OP700.MLOAD.contd
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r10, qword ptr [r8 + 8]
	mov	r8, qword ptr [r10 + r14 + 88]
	mov	rdi, qword ptr [r10 + r14 + 80]
	mov	r9, qword ptr [r10 + r14 + 64]
	mov	r10, qword ptr [r10 + r14 + 72]
	mov	r11, r9
	bswap	r11
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rax
	mov	rbx, r8
	bswap	rbx
	sub	rdx, rbx
	mov	rbx, rdi
	bswap	rbx
	sbb	rsi, rbx
	mov	rbx, r10
	bswap	rbx
	sbb	rcx, rbx
	sbb	rax, r11
	mov	qword ptr [r12 + 32], rdx
	mov	qword ptr [r12 + 40], rsi
	mov	qword ptr [r12 + 48], rcx
	mov	qword ptr [r12 + 56], rax
	movbe	qword ptr [r12 + 80], r10
	movbe	qword ptr [r12 + 64], r8
	movbe	qword ptr [r12 + 88], r9
	movbe	qword ptr [r12 + 72], rdi
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, r13
	mov	rsi, r12
	mov	edx, 1
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB4_220
# %bb.101:                              # %OP706.POP
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB4_102:                              # %OP286.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	add	r12, -2
.LBB4_103:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, r12
	shl	rax, 5
	mov	rdi, qword ptr [r15 + rax + 24]
	mov	rsi, qword ptr [r15 + rax + 16]
	mov	rcx, qword ptr [r15 + rax]
	mov	rdx, qword ptr [r15 + rax + 8]
	jmp	.LBB4_36
.LBB4_104:                              # %OP264.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rax, [r12 + 1]
	mov	rcx, r12
	shl	rcx, 5
	mov	esi, dword ptr [r15 + rcx - 16]
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	rdi, qword ptr [rdx + 156]
	mov	r8d, dword ptr [rdx + 164]
	movbe	rdx, qword ptr [rdx + 148]
	mov	r9, rdx
	shld	r9, rdi, 32
	bswap	r8
	shrd	r8, rdi, 32
	shr	rdx, 32
	mov	rdi, rax
	shl	rdi, 5
	mov	r10, qword ptr [r15 + rcx - 32]
	xor	r10, r8
	mov	r11d, 4294967295
	mov	qword ptr [r15 + rdi + 16], r11
	mov	r11, qword ptr [r15 + rcx - 24]
	xor	r11, r9
	mov	qword ptr [r15 + rdi + 24], 0
	mov	qword ptr [r15 + rdi + 8], -1
	mov	qword ptr [r15 + rdi], -1
	mov	qword ptr [r15 + rcx + 8], r9
	mov	qword ptr [r15 + rcx + 16], rdx
	mov	qword ptr [r15 + rcx], r8
	mov	qword ptr [r15 + rcx + 24], 0
	xor	rdx, rsi
	or	rdx, r10
	dec	r12
	mov	rsi, r12
	shl	rsi, 5
	xor	r8d, r8d
	xor	edi, edi
	or	rdx, r11
	setne	dil
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rsi + 8], xmm0
	mov	qword ptr [r15 + rsi], rdi
	mov	qword ptr [r15 + rsi + 24], 0
	mov	r14d, 612
	jne	.LBB4_183
# %bb.105:                              # %OP274.PUSH2
                                        #   in Loop: Header=BB4_36 Depth=1
	add	rcx, r15
	add	rsi, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_25] # xmm0 = [599,0,0,0]
	vmovups	ymmword ptr [rsi], ymm0
	lea	rdx, [rcx - 64]
	jmp	.LBB4_108
.LBB4_106:                              # %OP293.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	lea	rax, [r12 + 1]
	mov	rcx, r12
	shl	rcx, 5
	mov	esi, dword ptr [r15 + rcx - 16]
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	rdi, qword ptr [rdx + 156]
	mov	r8d, dword ptr [rdx + 164]
	movbe	rdx, qword ptr [rdx + 148]
	mov	r9, rdx
	shld	r9, rdi, 32
	bswap	r8
	shrd	r8, rdi, 32
	shr	rdx, 32
	mov	rdi, rax
	shl	rdi, 5
	mov	r10, qword ptr [r15 + rcx - 32]
	xor	r10, r8
	mov	r11d, 4294967295
	mov	qword ptr [r15 + rdi + 16], r11
	mov	r11, qword ptr [r15 + rcx - 24]
	xor	r11, r9
	mov	qword ptr [r15 + rdi + 24], 0
	mov	qword ptr [r15 + rdi + 8], -1
	mov	qword ptr [r15 + rdi], -1
	mov	qword ptr [r15 + rcx + 8], r9
	mov	qword ptr [r15 + rcx + 16], rdx
	mov	qword ptr [r15 + rcx], r8
	mov	qword ptr [r15 + rcx + 24], 0
	xor	rdx, rsi
	or	rdx, r10
	dec	r12
	mov	rsi, r12
	shl	rsi, 5
	xor	r8d, r8d
	xor	edi, edi
	or	rdx, r11
	setne	dil
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rsi + 8], xmm0
	mov	qword ptr [r15 + rsi], rdi
	mov	qword ptr [r15 + rsi + 24], 0
	mov	r14d, 770
	jne	.LBB4_183
# %bb.107:                              # %OP303.PUSH2
                                        #   in Loop: Header=BB4_36 Depth=1
	add	rcx, r15
	add	rsi, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_24] # xmm0 = [684,0,0,0]
	vmovups	ymmword ptr [rsi], ymm0
	lea	rdx, [rcx - 128]
.LBB4_108:                              # %OP676.JUMPDEST.sink.split
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rsi, qword ptr [rdx]
	mov	rdi, qword ptr [rdx + 8]
	mov	r8, qword ptr [rdx + 24]
	mov	rdx, qword ptr [rdx + 16]
	mov	qword ptr [rcx + 16], rdx
	mov	qword ptr [rcx + 24], r8
	mov	qword ptr [rcx], rsi
	mov	qword ptr [rcx + 8], rdi
	mov	r12, rax
.LBB4_109:                              # %OP676.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, r12
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_26] # xmm0 = [1762,0,0,0]
	vmovups	ymmword ptr [r15 + rax], ymm0
	add	r12, 2
	vmovups	ymm0, ymmword ptr [r15 + rax - 32]
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
.LBB4_110:                              # %OP723.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, r12
	shl	rax, 5
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_27] # xmm0 = [1924,0,0,0]
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
	add	r12, 3
	vmovups	ymm0, ymmword ptr [r15 + rax - 32]
	vmovups	ymmword ptr [r15 + rax + 64], ymm0
.LBB4_111:                              # %OP789.JUMPDEST
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rbx, r12
	shl	rbx, 5
	lea	r14, [r12 + 3]
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rbx + 32], ymm0
	vmovups	ymmword ptr [r15 + rbx], ymm0
	vmovups	ymm0, ymmword ptr [r15 + rbx - 32]
	lea	rsi, [r15 + rbx + 64]
	vmovups	ymmword ptr [r15 + rbx + 64], ymm0
	mov	rdi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB4_219
# %bb.112:                              # %OP794.SWAP1
                                        #   in Loop: Header=BB4_36 Depth=1
	add	rbx, r15
	mov	rax, qword ptr [rbx + 80]
	mov	rcx, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 72]
	mov	rsi, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 56], rsi
	mov	qword ptr [rbx + 40], rdx
	mov	qword ptr [rbx + 48], rax
	mov	qword ptr [rbx + 32], rcx
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 24], rsi
	mov	qword ptr [r15 + r14 + 16], rax
	mov	qword ptr [r15 + r14 + 8], rdx
	mov	qword ptr [r15 + r14], rcx
	or	rdx, rsi
	or	rcx, rax
	xor	eax, eax
	or	rcx, rdx
	setne	al
	vmovups	ymm0, ymmword ptr [rbx - 32]
	vmovups	ymm1, ymmword ptr [rbx]
	vmovups	ymmword ptr [rbx + 64], ymm1
	mov	rcx, qword ptr [rbx - 64]
	mov	rsi, qword ptr [rbx - 48]
	mov	rdx, qword ptr [rbx - 56]
	mov	rdi, qword ptr [rbx - 40]
	vxorps	xmm1, xmm1, xmm1
	vmovups	xmmword ptr [rbx - 56], xmm1
	mov	qword ptr [rbx - 64], rax
	mov	qword ptr [rbx - 40], 0
	mov	qword ptr [rbx - 8], rdi
	mov	qword ptr [rbx - 16], rsi
	mov	qword ptr [rbx - 24], rdx
	mov	qword ptr [rbx - 32], rcx
	vmovups	ymmword ptr [rbx], ymm0
	dec	r12
	jmp	.LBB4_36
.LBB4_113:                              # %resize.i3474
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	mov	r13, rdi
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_241
# %bb.114:                              # %resize.i3474.OP685.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [r12 + 48]
	mov	r8, qword ptr [r12 + 32]
	mov	r10, qword ptr [r12 + 40]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + 40]
	mov	rdi, r13
	mov	r13, rcx
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	jmp	.LBB4_94
.LBB4_115:                              # %resize.i3489
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_230
# %bb.116:                              # %resize.i3489.OP694.PUSH1_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	jmp	.LBB4_99
.LBB4_117:                              # %resize.i3505
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r13, r8
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_241
# %bb.118:                              # %resize.i3505.OP700.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [r12 + 56]
	mov	rcx, qword ptr [r12 + 48]
	mov	rdx, qword ptr [r12 + 32]
	mov	rsi, qword ptr [r12 + 40]
	mov	r8, r13
	jmp	.LBB4_100
.LBB4_119:                              # %resize.i3412
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_92
# %bb.120:                              # %resize.i3412.OP475.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rax + 40]
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	jmp	.LBB4_75
.LBB4_121:                              # %resize.i3427
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	qword ptr [rbp - 152], r11      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_242
# %bb.122:                              # %resize.i3427.OP484.PUSH1_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 152]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	jmp	.LBB4_80
.LBB4_123:                              # %resize.i3442
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	qword ptr [rbp - 152], r11      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_242
# %bb.124:                              # %resize.i3442.OP493.PUSH1_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	jmp	.LBB4_83
.LBB4_125:                              # %resize.i3458
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	r14, r8
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_241
# %bb.126:                              # %resize.i3458.OP500.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB4_36 Depth=1
	mov	rax, qword ptr [r12 - 8]
	mov	rcx, qword ptr [r12 - 16]
	mov	rdx, qword ptr [r12 - 32]
	mov	rsi, qword ptr [r12 - 24]
	mov	r8, r14
	jmp	.LBB4_84
.LBB4_127:                              # %dynamic_jump_table
	xor	r9d, r9d
	mov	r10d, 261
	cmp	r10, rcx
	mov	r10d, 0
	sbb	r10, rdx
	mov	r10d, 0
	sbb	r10, rsi
	sbb	r9, rdi
	jl	.LBB4_130
# %bb.128:                              # %dynamic_jump_table
	mov	r13, r12
	mov	r9, rcx
	add	r9, -109
	mov	r10, rdx
	adc	r10, -1
	mov	r11, rsi
	adc	r11, -1
	mov	rbx, rdi
	adc	rbx, -1
	xor	r14d, r14d
	mov	r12d, 22
	cmp	r12, r9
	mov	r12d, 0
	sbb	r12, r10
	mov	r10d, 0
	sbb	r10, r11
	sbb	r14, rbx
	jb	.LBB4_142
# %bb.129:                              # %dynamic_jump_table
	mov	r14d, 117
	lea	rcx, [rip + .LJTI4_0]
	movsxd	rdx, dword ptr [rcx + 4*r9]
	add	rdx, rcx
	mov	r12, r13
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	rdx
.LBB4_130:                              # %dynamic_jump_table
	mov	r8, rcx
	add	r8, -262
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	r11, rdi
	adc	r11, -1
	xor	ebx, ebx
	mov	r14d, 23
	cmp	r14, r8
	mov	r14d, 0
	sbb	r14, r9
	mov	r9d, 0
	sbb	r9, r10
	sbb	rbx, r11
	jb	.LBB4_147
# %bb.131:                              # %dynamic_jump_table
	lea	rcx, [rip + .LJTI4_1]
	movsxd	rdx, dword ptr [rcx + 4*r8]
	add	rdx, rcx
	jmp	rdx
.LBB4_132:                              # %OP134.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
.LBB4_133:                              # %OP134.JUMPDEST
	mov	rax, r12
	inc	r12
	mov	rcx, qword ptr [rsi + 120]
	mov	rdx, qword ptr [rsi + 96]
	mov	rdi, qword ptr [rsi + 104]
	mov	r8, qword ptr [rsi + 112]
	shl	rax, 5
	mov	qword ptr [r15 + rax + 16], r8
	mov	qword ptr [r15 + rax], rdx
	mov	qword ptr [r15 + rax + 24], rcx
	mov	qword ptr [r15 + rax + 8], rdi
	mov	rsi, r12
	shl	rsi, 5
	or	rdi, rcx
	or	rdx, r8
	xor	ecx, ecx
	or	rdx, rdi
	sete	cl
	mov	qword ptr [r15 + rsi], rcx
	mov	qword ptr [r15 + rsi + 16], 0
	mov	qword ptr [r15 + rsi + 24], 0
	mov	qword ptr [r15 + rsi + 8], 0
	jne	.LBB4_186
.LBB4_134:                              # %OP143.JUMPDEST
	mov	rax, r12
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_36] # xmm0 = [285,0,0,0]
	vmovups	ymmword ptr [r15 + rax - 32], ymm0
.LBB4_135:                              # %OP367.JUMPDEST
	mov	rax, r12
	shl	rax, 5
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rax], ymm0
	add	r12, 2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_37] # xmm0 = [786,0,0,0]
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
	jmp	.LBB4_33
.LBB4_136:                              # %dynamic_jump_table
	mov	r8, rcx
	add	r8, -416
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	mov	r11, rdi
	adc	r11, -1
	xor	ebx, ebx
	mov	r14d, 23
	cmp	r14, r8
	mov	r14d, 0
	sbb	r14, r9
	mov	r9d, 0
	sbb	r9, r10
	sbb	rbx, r11
	jb	.LBB4_174
# %bb.137:                              # %dynamic_jump_table
	lea	rcx, [rip + .LJTI4_2]
	movsxd	rdx, dword ptr [rcx + 4*r8]
	add	rdx, rcx
	jmp	rdx
.LBB4_138:                              # %OP209.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
.LBB4_139:                              # %OP209.JUMPDEST
	mov	rax, r12
	inc	r12
	mov	rcx, qword ptr [rsi + 120]
	mov	rdx, qword ptr [rsi + 96]
	mov	rdi, qword ptr [rsi + 104]
	mov	r8, qword ptr [rsi + 112]
	shl	rax, 5
	mov	qword ptr [r15 + rax + 16], r8
	mov	qword ptr [r15 + rax], rdx
	mov	qword ptr [r15 + rax + 24], rcx
	mov	qword ptr [r15 + rax + 8], rdi
	mov	rsi, r12
	shl	rsi, 5
	or	rdi, rcx
	or	rdx, r8
	xor	ecx, ecx
	or	rdx, rdi
	sete	cl
	mov	qword ptr [r15 + rsi], rcx
	mov	qword ptr [r15 + rsi + 16], 0
	mov	qword ptr [r15 + rsi + 24], 0
	mov	qword ptr [r15 + rsi + 8], 0
	jne	.LBB4_186
.LBB4_140:                              # %OP218.JUMPDEST
	mov	rax, r12
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_30] # xmm0 = [439,0,0,0]
	vmovups	ymmword ptr [r15 + rax - 32], ymm0
.LBB4_141:                              # %OP521.JUMPDEST
	mov	rax, r12
	shl	rax, 5
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rax], ymm0
	add	r12, 2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_31] # xmm0 = [1320,0,0,0]
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
	jmp	.LBB4_33
.LBB4_142:                              # %dynamic_jump_table
	mov	r8, rcx
	xor	r8, 184
	or	r8, rsi
	or	rdx, rdi
	or	r8, rdx
	mov	r12, r13
	je	.LBB4_189
# %bb.143:                              # %dynamic_jump_table
	xor	rcx, 186
	or	rcx, rsi
	or	rcx, rdx
	jne	.LBB4_229
# %bb.144:                              # %OP84.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 72]
	mov	r13, qword ptr [rax + 80]
.LBB4_145:                              # %OP84.JUMPDEST
	xor	r14d, r14d
	mov	r9, rbx
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	rbx, r12
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_38] # xmm0 = [262,0,0,0]
	vmovups	ymmword ptr [r15 + rbx], ymm0
	mov	qword ptr [r15 + rbx + 40], r14
	mov	qword ptr [r15 + rbx + 32], r13
	mov	qword ptr [r15 + rbx + 48], r14
	mov	qword ptr [r15 + rbx + 56], r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_33] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15 + rbx + 64], ymm0
	add	r12, 4
	mov	qword ptr [rbp - 72], r12       # 8-byte Spill
	vmovups	ymmword ptr [r15 + rbx + 96], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	shl	r12, 5
	vmovups	ymmword ptr [r15 + r12], ymm0
	sub	rsp, 8
	lea	rdi, [rbp - 288]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	push	r13
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 272]
	mov	rcx, qword ptr [rbp - 288]
	mov	rdx, qword ptr [rbp - 280]
	mov	qword ptr [r15 + rbx + 40], rdx
	mov	qword ptr [r15 + rbx + 48], rax
	mov	qword ptr [r15 + rbx + 32], rcx
	mov	qword ptr [r15 + rbx + 56], 0
	mov	qword ptr [r15 + rbx + 88], r14
	mov	qword ptr [r15 + rbx + 72], r14
	mov	qword ptr [r15 + rbx + 80], r14
	mov	qword ptr [r15 + rbx + 64], r13
	mov	qword ptr [r15 + rbx + 120], 0
	mov	qword ptr [r15 + rbx + 104], 0
	mov	qword ptr [r15 + rbx + 112], 0
	mov	qword ptr [r15 + rbx + 96], 4
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_34] # xmm0 = [36,0,0,0]
	vmovups	ymmword ptr [r15 + r12], ymm0
	vmovups	ymmword ptr [r15 + rbx + 160], ymm0
	sub	rsp, 8
	lea	rdi, [rbp - 224]
	mov	esi, 36
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	r13
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	r8, qword ptr [rbp - 200]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	rcx, qword ptr [rbp - 208]
	mov	qword ptr [rbp - 128], rcx      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 224]
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 216]
	mov	qword ptr [rbp - 104], rdx      # 8-byte Spill
	mov	qword ptr [r15 + r12 + 16], 0
	mov	qword ptr [r15 + r12], 68
	mov	qword ptr [r15 + r12 + 24], 0
	mov	qword ptr [r15 + r12 + 8], 0
	add	rsi, 4
	adc	rdx, 0
	adc	rcx, 0
	adc	r8, 0
	mov	qword ptr [r15 + rbx + 160], rsi
	mov	qword ptr [r15 + rbx + 168], rdx
	mov	qword ptr [r15 + rbx + 176], rcx
	mov	qword ptr [r15 + rbx + 184], r8
	mov	qword ptr [r15 + rbx + 192], rsi
	mov	qword ptr [r15 + rbx + 200], rdx
	mov	qword ptr [r15 + rbx + 208], rcx
	mov	qword ptr [r15 + rbx + 216], r8
	sub	rsp, 8
	lea	rdi, [rbp - 192]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	r13
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 176]
	mov	rcx, qword ptr [rbp - 192]
	mov	rdx, qword ptr [rbp - 184]
	mov	rsi, qword ptr [rbp - 168]
	mov	qword ptr [r15 + rbx + 248], 0
	mov	qword ptr [r15 + rbx + 232], 0
	mov	qword ptr [r15 + rbx + 240], 0
	mov	qword ptr [r15 + rbx + 224], 32
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	add	r8, 36
	mov	r9, qword ptr [rbp - 104]       # 8-byte Reload
	adc	r9, 0
	mov	r10, qword ptr [rbp - 128]      # 8-byte Reload
	adc	r10, 0
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	adc	rdi, 0
	mov	qword ptr [r15 + r12 + 24], r14
	mov	qword ptr [r15 + r12 + 8], r14
	mov	qword ptr [r15 + r12 + 16], r14
	mov	qword ptr [r15 + r12], r13
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [r15 + rbx + 120], rsi
	mov	qword ptr [r15 + rbx + 104], rdx
	mov	qword ptr [r15 + rbx + 96], rcx
	mov	qword ptr [r15 + rbx + 112], rax
	mov	qword ptr [r15 + rbx + 88], rdi
	mov	qword ptr [r15 + rbx + 72], r9
	mov	qword ptr [r15 + rbx + 80], r10
	mov	qword ptr [r15 + rbx + 64], r8
	mov	qword ptr [r15 + rbx + 184], 0
	mov	qword ptr [r15 + rbx + 168], 0
	mov	qword ptr [r15 + rbx + 160], 4
	mov	qword ptr [r15 + rbx + 176], 0
	mov	qword ptr [r15 + rbx + 216], 0
	mov	qword ptr [r15 + rbx + 208], 0
	mov	qword ptr [r15 + rbx + 192], 68
	mov	qword ptr [r15 + rbx + 200], 0
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
.LBB4_146:                              # %OP289.JUMPDEST
	lea	rax, [r12 + 1]
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_39] # xmm0 = [624,0,0,0]
	jmp	.LBB4_32
.LBB4_147:                              # %dynamic_jump_table
	mov	rax, rcx
	xor	rax, 351
	or	rax, rsi
	or	rdx, rdi
	or	rax, rdx
	je	.LBB4_162
# %bb.148:                              # %dynamic_jump_table
	xor	rcx, 363
	or	rcx, rsi
	or	rcx, rdx
	jne	.LBB4_229
# %bb.149:                              # %OP180.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	jmp	.LBB4_164
.LBB4_150:                              # %OP148.JUMPDEST
	mov	r14, r12
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r15 + r14], ymm0
	lea	r11, [r12 + 1]
	mov	rbx, qword ptr [r13 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	rsi, r12
	mov	r12, qword ptr [rbx + 48]
	sub	rax, r12
	mov	r9, rbx
	cmp	rax, 95
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	jbe	.LBB4_221
.LBB4_151:                              # %OP150.MLOAD.contd
	mov	qword ptr [rbp - 64], r9        # 8-byte Spill
	add	r14, r15
	mov	rcx, qword ptr [rbx + 8]
	mov	rbx, qword ptr [rcx + r12 + 88]
	mov	rdx, qword ptr [rcx + r12 + 80]
	mov	rax, qword ptr [rcx + r12 + 64]
	mov	rcx, qword ptr [rcx + r12 + 72]
	movbe	qword ptr [r14 + 24], rax
	movbe	qword ptr [r14 + 8], rdx
	movbe	qword ptr [r14 + 16], rcx
	movbe	qword ptr [r14], rbx
	shl	r11, 5
	movbe	qword ptr [r15 + r11 + 24], rax
	movbe	qword ptr [r15 + r11 + 8], rdx
	movbe	qword ptr [r15 + r11 + 16], rcx
	mov	qword ptr [rbp - 72], rsi       # 8-byte Spill
	lea	r12, [rsi + 2]
	movbe	qword ptr [r15 + r11], rbx
	mov	rdi, qword ptr [r14 - 24]
	mov	esi, dword ptr [r14 - 16]
	mov	r10, qword ptr [r14 - 32]
	mov	qword ptr [rbp - 96], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r15 + r12], r10
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	qword ptr [r15 + r12 + 16], rsi
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	qword ptr [r15 + r12 + 8], rdi
	mov	qword ptr [r15 + r12 + 24], 0
	movbe	qword ptr [r14 + 104], rdx
	bswap	rdx
	movbe	qword ptr [r14 + 96], rbx
	bswap	rbx
	movbe	qword ptr [r14 + 112], rcx
	movbe	qword ptr [r14 + 120], rax
	xor	edi, edi
	mov	r8, qword ptr [r9 + 16]
	mov	r13, qword ptr [r9 + 48]
	sub	r8, r13
	mov	rsi, rbx
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	neg	rdx
	bswap	rcx
	mov	edx, 0
	sbb	rdx, rcx
	bswap	rax
	sbb	rdi, rax
	cmovb	rsi, r9
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, rax
	cmp	rsi, r8
	ja	.LBB4_223
.LBB4_152:                              # %OP159.PUSH1
	add	r11, r15
	lea	rsi, [r14 - 32]
	add	r13, qword ptr [rax + 8]
	movbe	qword ptr [rbx + r13 + 24], r10
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [rbx + r13 + 16], rax
	add	r12, r15
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [rbx + r13 + 8], rax
	mov	qword ptr [rbx + r13], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_12] # xmm0 = [32,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 16]
	mov	rdx, qword ptr [r11]
	mov	rdi, qword ptr [r11 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r14 - 32]
	mov	qword ptr [r14 - 32], rdx
	mov	qword ptr [r14 - 24], rdi
	mov	qword ptr [r14 - 16], rcx
	mov	qword ptr [r14 - 8], rax
	vmovups	ymmword ptr [r11], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	r8, qword ptr [r9 + 16]
	mov	rbx, qword ptr [r9 + 48]
	sub	r8, rbx
	cmp	r8, 95
	mov	r15, r11
	jbe	.LBB4_225
.LBB4_153:                              # %OP165.MLOAD.contd
	mov	r11, qword ptr [r9 + 8]
	mov	r9, qword ptr [r11 + rbx + 88]
	mov	r8, qword ptr [r11 + rbx + 80]
	mov	r10, qword ptr [r11 + rbx + 64]
	mov	r11, qword ptr [r11 + rbx + 72]
	mov	rbx, r10
	bswap	rbx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	r15, r9
	bswap	r15
	sub	rdx, r15
	mov	r15, r8
	bswap	r15
	sbb	rdi, r15
	mov	r15, r11
	bswap	r15
	sbb	rcx, r15
	sbb	rax, rbx
	mov	qword ptr [r14 - 32], rdx
	mov	qword ptr [r14 - 24], rdi
	mov	qword ptr [r14 - 16], rcx
	mov	qword ptr [r14 - 8], rax
	movbe	qword ptr [r14 + 16], r11
	movbe	qword ptr [r14], r9
	movbe	qword ptr [r14 + 24], r10
	movbe	qword ptr [r14 + 8], r8
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB4_227
.LBB4_154:                              # %select.end3815
	dec	r12
.LBB4_189:                              # %return
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB4_190
.LBB4_155:                              # %dynamic_jump_table
	mov	rax, rcx
	xor	rax, 1666
	or	rax, rsi
	or	rdx, rdi
	or	rax, rdx
	je	.LBB4_159
# %bb.156:                              # %dynamic_jump_table
	xor	rcx, 1699
	or	rcx, rsi
	or	rcx, rdx
	jne	.LBB4_229
# %bb.157:                              # %OP657.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB4_158:                              # %OP657.JUMPDEST
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, r12
	shl	rcx, 5
	lea	rsi, [r15 + rcx]
	mov	qword ptr [r15 + rcx], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rcx + 8], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rcx + 40], xmm0
	mov	qword ptr [r15 + rcx + 56], 0
	jmp	.LBB4_18
.LBB4_159:                              # %OP632.JUMPDEST
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 80]
	mov	qword ptr [rbp - 72], r12       # 8-byte Spill
	mov	rax, r12
	shl	rax, 5
	lea	r12, [r15 + rax]
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rax + 8], xmm0
	mov	qword ptr [r15 + rax], rbx
	mov	qword ptr [r15 + rax + 24], 0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
	vmovups	ymmword ptr [r15 + rax + 64], ymm0
	mov	rdi, r13
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB4_220
# %bb.160:                              # %OP637.PUSH1
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r12 + 32], ymm0
	vmovups	ymmword ptr [r12], ymm0
	vmovups	ymmword ptr [r12 + 72], ymm0
	mov	qword ptr [r12 + 64], rbx
	vxorps	xmm1, xmm1, xmm1
	vmovups	xmmword ptr [r12 + 104], xmm1
	mov	qword ptr [r12 + 120], 0
	vmovups	ymm0, ymmword ptr [r12 - 32]
	vmovups	ymmword ptr [r12 + 128], ymm0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rax, qword ptr [rax + 8]
	vmovups	xmmword ptr [r12 + 168], xmm1
	mov	qword ptr [r12 + 160], rax
	mov	qword ptr [r12 + 184], 0
	mov	rdi, r13
	mov	rsi, r12
	mov	edx, 17
	mov	ecx, 2
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB4_220
# %bb.161:
	lea	rax, [rip + .Ltmp16]
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB4_180
.LBB4_162:                              # %OP171.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
.LBB4_163:                              # %OP171.JUMPDEST
	mov	rax, r12
	inc	r12
	mov	rcx, qword ptr [rsi + 120]
	mov	rdx, qword ptr [rsi + 96]
	mov	rdi, qword ptr [rsi + 104]
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r8, qword ptr [rsi + 112]
	shl	rax, 5
	mov	qword ptr [r15 + rax + 16], r8
	mov	qword ptr [r15 + rax], rdx
	mov	qword ptr [r15 + rax + 24], rcx
	mov	qword ptr [r15 + rax + 8], rdi
	mov	rsi, r12
	shl	rsi, 5
	or	rdi, rcx
	or	rdx, r8
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	xor	ecx, ecx
	or	rdx, rdi
	sete	cl
	mov	qword ptr [r15 + rsi], rcx
	mov	qword ptr [r15 + rsi + 16], 0
	mov	qword ptr [r15 + rsi + 24], 0
	mov	qword ptr [r15 + rsi + 8], 0
	jne	.LBB4_186
.LBB4_164:                              # %OP180.JUMPDEST
	mov	rbx, r12
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_32] # xmm0 = [416,0,0,0]
	vmovups	ymmword ptr [r15 + rbx - 32], ymm0
	inc	r12
	mov	r14, r12
	shl	r14, 5
	mov	r13, r12
	mov	r12, qword ptr [r8 + 80]
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rbx + 8], xmm0
	mov	qword ptr [r15 + rbx], r12
	mov	qword ptr [r15 + rbx + 24], 0
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14], 4
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [r15 + rbx + 80], 0
	mov	qword ptr [r15 + rbx + 88], 0
	mov	qword ptr [r15 + rbx + 64], 4
	mov	qword ptr [r15 + rbx + 72], 0
	mov	qword ptr [r15 + rbx + 112], 0
	mov	qword ptr [r15 + rbx + 120], 0
	mov	qword ptr [r15 + rbx + 96], 4
	mov	qword ptr [r15 + rbx + 104], 0
	mov	r9, qword ptr [r8 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 320]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	push	r12
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 304]
	mov	rcx, qword ptr [rbp - 320]
	mov	rdx, qword ptr [rbp - 312]
	mov	qword ptr [r15 + rbx + 144], 0
	mov	qword ptr [r15 + rbx + 128], 32
	mov	qword ptr [r15 + rbx + 152], 0
	mov	qword ptr [r15 + rbx + 136], 0
	mov	qword ptr [r15 + rbx + 16], rax
	mov	qword ptr [r15 + rbx], rcx
	mov	qword ptr [r15 + rbx + 8], rdx
	mov	qword ptr [r15 + rbx + 24], 0
	mov	qword ptr [r15 + r14], r12
	mov	r12, r13
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 16], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_33] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15 + rbx + 64], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_34] # xmm0 = [36,0,0,0]
	vmovups	ymmword ptr [r15 + rbx + 96], ymm0
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
.LBB4_165:                              # %OP398.JUMPDEST
	lea	rax, [r12 + 1]
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_35] # xmm0 = [872,0,0,0]
	jmp	.LBB4_32
.LBB4_186:                              # %OP177.PUSH1
	add	rax, r15
	add	rsi, r15
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rsi], ymm0
	vmovups	ymmword ptr [rax + 64], ymm0
	mov	rdi, r13
	jmp	.LBB4_28
.LBB4_228:                              # %dynamic_jump_table
	xor	rcx, 1126
	or	rcx, rsi
	or	rdx, rdi
	or	rdx, rcx
	je	.LBB4_193
	jmp	.LBB4_229
.LBB4_166:                              # %OP390.JUMPDEST
	mov	r14d, 860
	jmp	.LBB4_182
.LBB4_167:                              # %OP526.JUMPDEST
	mov	rcx, r12
	shl	rcx, 5
	mov	esi, dword ptr [r15 + rcx - 16]
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edi, dword ptr [rdx + 164]
	movbe	rax, qword ptr [rdx + 156]
	bswap	rdi
	movbe	rdx, qword ptr [rdx + 148]
	shrd	rdi, rax, 32
	shrd	rax, rdx, 32
	shr	rdx, 32
	mov	r8d, 4294967295
	mov	qword ptr [r15 + rcx + 48], r8
	mov	qword ptr [r15 + rcx + 56], 0
	mov	qword ptr [r15 + rcx + 40], -1
	mov	qword ptr [r15 + rcx + 32], -1
	mov	qword ptr [r15 + rcx + 16], rdx
	mov	qword ptr [r15 + rcx + 8], rax
	mov	qword ptr [r15 + rcx], rdi
	mov	qword ptr [r15 + rcx + 24], 0
	xor	rdi, qword ptr [r15 + rcx - 32]
	xor	rdx, rsi
	or	rdx, rdi
	xor	rax, qword ptr [r15 + rcx - 24]
	mov	rdi, r12
	dec	r12
	mov	rcx, r12
	shl	rcx, 5
	xor	r8d, r8d
	xor	esi, esi
	or	rax, rdx
	setne	sil
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + rcx + 8], xmm0
	mov	qword ptr [r15 + rcx], rsi
	mov	qword ptr [r15 + rcx + 24], 0
	mov	r14d, 1394
	jne	.LBB4_183
# %bb.168:                              # %OP536.PUSH2
	add	rcx, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_18] # xmm0 = [1379,0,0,0]
	vmovups	ymmword ptr [rcx], ymm0
	mov	r12, rdi
	jmp	.LBB4_33
.LBB4_169:                              # %OP513.JUMPDEST
	mov	r14d, 1306
	jmp	.LBB4_182
.LBB4_170:                              # %OP402.JUMPDEST
	lea	rbx, [r12 + 1]
	mov	r10, r12
	shl	r10, 5
	mov	qword ptr [rbp - 72], r12       # 8-byte Spill
	dec	r12
	mov	r13, r12
	shl	r13, 5
	mov	edi, dword ptr [r15 + r13 + 16]
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	ecx, dword ptr [rdx + 164]
	movbe	rax, qword ptr [rdx + 156]
	movbe	rdx, qword ptr [rdx + 148]
	mov	rsi, rdx
	shld	rsi, rax, 32
	bswap	rcx
	shrd	rcx, rax, 32
	shr	rdx, 32
	mov	r11, rbx
	shl	r11, 5
	mov	r8, qword ptr [r15 + r13]
	xor	r8, rcx
	mov	eax, 4294967295
	mov	qword ptr [r15 + r11 + 16], rax
	mov	r9, qword ptr [r15 + r13 + 8]
	xor	r9, rsi
	mov	qword ptr [r15 + r11 + 24], 0
	mov	qword ptr [r15 + r11 + 8], -1
	mov	qword ptr [r15 + r11], -1
	mov	qword ptr [r15 + r10 + 16], rdx
	xor	rdx, rdi
	or	rdx, r8
	xor	r8d, r8d
	xor	edi, edi
	or	rdx, r9
	mov	qword ptr [r15 + r10 + 8], rsi
	mov	qword ptr [r15 + r10], rcx
	mov	qword ptr [r15 + r10 + 24], 0
	setne	dil
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r13 + 24], 0
	mov	r14d, 1306
	je	.LBB4_191
# %bb.171:
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB4_183
.LBB4_172:                              # %OP544.JUMPDEST
	mov	r14d, 1394
	jmp	.LBB4_182
.LBB4_173:                              # %OP357.JUMPDEST
	mov	r14d, 770
	jmp	.LBB4_182
.LBB4_174:                              # %dynamic_jump_table
	xor	rcx, 684
	or	rcx, rsi
	or	rdx, rdi
	or	rdx, rcx
	jne	.LBB4_229
# %bb.175:                              # %OP307.JUMPDEST
	mov	rdi, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	rax, qword ptr [rdi + 136]
	mov	ecx, dword ptr [rdi + 144]
	movbe	rdx, qword ptr [rdi + 128]
	mov	rsi, rdx
	shld	rsi, rax, 32
	bswap	rcx
	shrd	rcx, rax, 32
	shr	rdx, 32
	mov	r14, r12
	shl	r14, 5
	mov	r8, r12
	lea	r12, [r15 + r14]
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	mov	qword ptr [r15 + r14 + 24], 0
	mov	rax, qword ptr [rdi + 96]
	mov	rcx, qword ptr [rdi + 112]
	mov	rdx, qword ptr [rdi + 104]
	mov	rsi, qword ptr [rdi + 120]
	mov	qword ptr [r15 + r14 + 40], rdx
	mov	qword ptr [r15 + r14 + 56], rsi
	mov	qword ptr [r15 + r14 + 32], rax
	mov	qword ptr [r15 + r14 + 48], rcx
	mov	rax, qword ptr [r15 + r14 - 48]
	mov	rcx, qword ptr [r15 + r14 - 64]
	mov	rdi, qword ptr [r15 + r14 - 56]
	mov	rsi, qword ptr [r15 + r14 - 40]
	mov	qword ptr [r15 + r14 + 88], rsi
	mov	qword ptr [r15 + r14 + 72], rdi
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	qword ptr [r15 + r14 + 80], rax
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [r15 + r14 + 64], rcx
	mov	rcx, qword ptr [r15 + r14 - 32]
	mov	rax, qword ptr [r15 + r14 - 16]
	mov	r10, qword ptr [r15 + r14 - 24]
	mov	r9, qword ptr [r15 + r14 - 8]
	mov	qword ptr [r15 + r14 + 120], r9
	mov	qword ptr [r15 + r14 + 104], r10
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [r15 + r14 + 112], rax
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [r15 + r14 + 96], rcx
	mov	qword ptr [r15 + r14 + 152], 0
	mov	qword ptr [r15 + r14 + 136], 0
	mov	qword ptr [r15 + r14 + 144], 0
	mov	qword ptr [r15 + r14 + 128], 64
	mov	r13, qword ptr [r13 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	rbx, qword ptr [r13 + 48]
	sub	rax, rbx
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	lea	rdx, [r8 + 5]
	cmp	rax, 95
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	jbe	.LBB4_231
.LBB4_176:                              # %OP315.MLOAD.contd
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	mov	r13, qword ptr [r13 + 8]
	mov	r11, qword ptr [r13 + rbx + 88]
	mov	r8, qword ptr [r13 + rbx + 80]
	mov	rcx, qword ptr [r13 + rbx + 64]
	mov	rbx, qword ptr [r13 + rbx + 72]
	movbe	qword ptr [r12 + 152], rcx
	movbe	qword ptr [r12 + 136], r8
	movbe	qword ptr [r12 + 144], rbx
	movbe	qword ptr [r12 + 128], r11
	mov	r13, rdx
	shl	r13, 5
	movbe	qword ptr [r15 + r13 + 24], rcx
	movbe	qword ptr [r15 + r13 + 8], r8
	movbe	qword ptr [r15 + r13 + 16], rbx
	movbe	qword ptr [r15 + r13], r11
	mov	qword ptr [r12 + 216], rsi
	mov	qword ptr [r12 + 200], rdi
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [r12 + 208], rsi
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12 + 192], rdi
	mov	qword ptr [r12 + 248], r9
	mov	qword ptr [r12 + 232], r10
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + 240], r10
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r12 + 224], rax
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	add	rdx, 8
	mov	qword ptr [rbp - 136], rdx      # 8-byte Spill
	shl	rdx, 5
	mov	qword ptr [r15 + rdx + 24], r9
	mov	r9, qword ptr [rbp - 144]       # 8-byte Reload
	mov	qword ptr [r15 + rdx + 8], r9
	mov	qword ptr [r15 + rdx], rax
	mov	qword ptr [r15 + rdx + 16], r10
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r12 + 312], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [r12 + 296], rax
	mov	qword ptr [r12 + 288], rdi
	mov	qword ptr [r12 + 304], rsi
	movbe	qword ptr [r12 + 344], rcx
	movbe	qword ptr [r12 + 328], r8
	movbe	qword ptr [r12 + 320], r11
	movbe	qword ptr [r12 + 336], rbx
	lea	rbx, [r15 + rdx]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB4_230
# %bb.177:                              # %OP323.DUP3
	add	r13, r15
	mov	rdi, qword ptr [r13 + 24]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 8], r9
	mov	rax, qword ptr [r12 + 224]
	add	rax, r8
	mov	rcx, qword ptr [r12 + 232]
	adc	rcx, r9
	mov	rdx, qword ptr [r12 + 240]
	adc	rdx, r10
	mov	rsi, qword ptr [r12 + 248]
	adc	rsi, rdi
	mov	qword ptr [r12 + 224], r8
	mov	qword ptr [r12 + 232], r9
	mov	qword ptr [r12 + 240], r10
	mov	qword ptr [r12 + 248], rdi
	vmovups	ymm0, ymmword ptr [r12 + 64]
	mov	qword ptr [r12 + 64], rax
	mov	qword ptr [r12 + 72], rcx
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rsi
	vmovups	ymmword ptr [r13], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r12 + 96], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r12 + 128], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rdi + 40]
	mov	rdi, qword ptr [r8 + 16]
	mov	qword ptr [rbp - 64], rbx       # 8-byte Spill
	mov	rbx, qword ptr [r8 + 48]
	sub	rdi, rbx
	cmp	rdi, 95
	jbe	.LBB4_233
.LBB4_178:                              # %OP334.MLOAD.contd
	mov	r10, qword ptr [r8 + 8]
	mov	r8, qword ptr [r10 + rbx + 88]
	mov	rdi, qword ptr [r10 + rbx + 80]
	mov	r9, qword ptr [r10 + rbx + 64]
	mov	r10, qword ptr [r10 + rbx + 72]
	mov	r11, r8
	bswap	r11
	sub	rax, r11
	mov	r11, rdi
	bswap	r11
	sbb	rcx, r11
	mov	r11, r10
	bswap	r11
	sbb	rdx, r11
	mov	r11, r9
	bswap	r11
	movbe	qword ptr [r12 + 144], r10
	movbe	qword ptr [r12 + 128], r8
	movbe	qword ptr [r12 + 152], r9
	movbe	qword ptr [r12 + 136], rdi
	sbb	rsi, r11
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13 + 24], rsi
	lea	rsi, [r15 + r14 + 96]
	movbe	qword ptr [r12 + 208], r10
	movbe	qword ptr [r12 + 192], r8
	movbe	qword ptr [r12 + 216], r9
	movbe	qword ptr [r12 + 200], rdi
	mov	rax, qword ptr [r12 + 40]
	mov	rcx, qword ptr [r12 + 56]
	mov	rdx, qword ptr [r12 + 32]
	mov	rdi, qword ptr [r12 + 48]
	mov	qword ptr [r12 + 240], rdi
	mov	qword ptr [r12 + 224], rdx
	mov	qword ptr [r12 + 248], rcx
	mov	qword ptr [r12 + 232], rax
	vmovups	ymm0, ymmword ptr [r12]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rax, qword ptr [rax + 8]
	mov	qword ptr [r12 + 288], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [r12 + 296], xmm0
	mov	qword ptr [r12 + 312], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	add	r12, 3
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, r13
	mov	edx, 17
	xor	ecx, ecx
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB4_189
# %bb.179:
	lea	rax, [rip + .Ltmp15]
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB4_180:                              # %suspend
	mov	qword ptr [r13 + 32], rax
	mov	al, 32
	jmp	.LBB4_190
.LBB4_181:                              # %OP246.JUMPDEST.sink.split.loopexit
	mov	r14d, 612
.LBB4_182:                              # %OP246.JUMPDEST.sink.split
	xor	r8d, r8d
.LBB4_183:                              # %OP246.JUMPDEST.sink.split
	lea	rax, [r12 + 1]
	shl	r12, 5
	mov	qword ptr [r15 + r12 + 8], r8
	mov	qword ptr [r15 + r12], r14
	mov	qword ptr [r15 + r12 + 16], r8
	mov	qword ptr [r15 + r12 + 24], r8
	mov	r12, rax
.LBB4_184:                              # %OP246.JUMPDEST
	lea	rax, [r12 + 1]
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_8] # xmm0 = [513,0,0,0]
	vmovups	ymmword ptr [r15 + r12], ymm0
	mov	r12, rax
.LBB4_185:                              # %OP552.JUMPDEST
	lea	rax, [r12 + 1]
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_9] # xmm0 = [1406,0,0,0]
	jmp	.LBB4_32
.LBB4_191:                              # %OP412.PUSH1
	add	r10, r15
	add	r13, r15
	add	r11, r15
	mov	rcx, qword ptr [r10 - 64]
	mov	rdx, qword ptr [r10 - 56]
	mov	esi, dword ptr [r10 - 48]
	mov	qword ptr [r11 + 16], rax
	mov	qword ptr [r11], -1
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], -1
	mov	qword ptr [r10 + 16], rsi
	mov	qword ptr [r10], rcx
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 24], 0
	or	rcx, rsi
	xor	eax, eax
	or	rcx, rdx
	setne	al
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [r13 + 16], 0
	je	.LBB4_211
# %bb.192:
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
.LBB4_193:                              # %OP467.JUMPDEST
	mov	rax, r12
	shl	rax, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI4_21] # ymm0 = [9452428476268771727,3597243778789622446,2182157528680728787,9107489529646749632]
	vmovups	ymmword ptr [r15 + rax], ymm0
	add	r12, 2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_22] # xmm0 = [1167,0,0,0]
	vmovups	ymmword ptr [r15 + rax + 32], ymm0
	jmp	.LBB4_33
.LBB4_194:                              # %OP568.PUSH1
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	mov	rbx, r11
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	add	r14, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	r9, r13
	mov	r13, rsp
	add	r13, -32
	mov	rsp, r13
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB4_220
# %bb.195:                              # %OP569.MLOAD.contd
	add	rbx, r15
	add	r12, r15
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.196:                              # %OP573.PUSH1
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	lea	r11, [r13 + 2]
	mov	rax, qword ptr [r14 + 24]
	mov	r10, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbp - 64], rbx       # 8-byte Spill
	mov	qword ptr [rbx + 8], rsi
	mov	rbx, r11
	add	r13, 3
	mov	r14, r11
	shl	r14, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r9
	adc	rax, 0
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [rbp - 72], r13       # 8-byte Spill
	shl	r13, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_12] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15 + r14], ymm0
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	qword ptr [r15 + r13], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_92
# %bb.197:                              # %OP584.PUSH1
	add	r14, r15
	add	r13, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_16] # xmm0 = [50,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 50
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_92
# %bb.198:                              # %OP587.PUSH1
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	movabs	rax, 7020104805576174700
	mov	qword ptr [r13 + 16], rax
	movabs	r8, 7166468834363205234
	mov	qword ptr [r13], r8
	movabs	r10, 4855283293877444707
	mov	qword ptr [r13 + 24], r10
	movabs	r9, 7089056600214107502
	mov	qword ptr [r13 + 8], r9
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.199:                              # %OP593.PUSH1
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	movabs	rax, 8245941904368297069
	mov	qword ptr [r13 + 16], rax
	movabs	r10, 8029109395011215472
	mov	qword ptr [r13 + 24], r10
	movabs	r9, 7597009621420605440
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	push	r13
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.200:                              # %OP598.POP
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm1, ymmword ptr [rbx - 32]
	mov	qword ptr [rbx - 32], rdx
	mov	qword ptr [rbx - 24], rsi
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], rax
	vmovups	ymmword ptr [r12], ymm1
	vmovups	ymmword ptr [rbx], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB4_236
# %bb.201:                              # %OP605.MLOAD.contd
	lea	rsi, [rbx - 32]
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	mov	r8, qword ptr [rbx - 8]
	mov	r9, qword ptr [rbx - 32]
	mov	r10, qword ptr [rbx - 24]
	mov	r11, qword ptr [rbx - 16]
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [rbx - 32], r9
	mov	qword ptr [rbx - 24], r10
	mov	qword ptr [rbx - 16], r11
	mov	qword ptr [rbx - 8], r8
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rdi
	mov	rdi, r13
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB4_239
.LBB4_202:                              # %select.end3870
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB4_190
.LBB4_203:                              # %OP734.PUSH1
	add	r14, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	r9, r13
	mov	r13, rsp
	add	r13, -32
	mov	rsp, r13
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB4_237
# %bb.204:                              # %OP735.MLOAD.contd
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	lea	r13, [rbx + 1]
	mov	qword ptr [rbp - 72], rbx       # 8-byte Spill
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + rbx + 24], rax
	mov	qword ptr [r15 + rbx + 16], 0
	mov	qword ptr [r15 + rbx], 0
	mov	qword ptr [r15 + rbx + 8], 0
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.205:                              # %OP739.PUSH1
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	lea	rax, [r15 + rbx]
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	lea	rcx, [rbx + 2]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	add	r13, r15
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 64], rcx       # 8-byte Spill
	mov	r10, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], rdi
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	qword ptr [rax + 8], rsi
	add	rbx, 3
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	shl	r11, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	adc	rax, 0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r8
	mov	qword ptr [rbp - 72], rbx       # 8-byte Spill
	mov	r14, rbx
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_12] # xmm0 = [32,0]
	mov	qword ptr [rbp - 64], r11       # 8-byte Spill
	vmovups	ymmword ptr [r15 + r11], ymm0
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14 + 8], rsi
	mov	qword ptr [r15 + r14], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_235
# %bb.206:                              # %OP750.PUSH1
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	add	rax, r15
	add	r14, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_13] # xmm0 = [59,0]
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	vmovups	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 59
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_235
# %bb.207:                              # %OP753.PUSH1
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], rdi
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	movabs	rax, 7310503696657314415
	mov	qword ptr [r14 + 16], rax
	movabs	r8, 7882828168912202095
	mov	qword ptr [r14], r8
	movabs	r10, 4855283293877444723
	mov	qword ptr [r14 + 24], r10
	movabs	r9, 8681005393913080933
	mov	qword ptr [r14 + 8], r9
	mov	rbx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.208:                              # %OP759.PUSH1
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rax], rdi
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 24], rcx
	movabs	rax, 8029405090742695026
	mov	qword ptr [r14 + 16], rax
	movabs	r8, 7310313063989641216
	mov	qword ptr [r14], r8
	movabs	r10, 7935470564060242030
	mov	qword ptr [r14 + 24], r10
	movabs	r9, 7017580326795109490
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.209:                              # %OP764.POP
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm1, ymmword ptr [rbx - 32]
	mov	qword ptr [rbx - 32], rdx
	mov	qword ptr [rbx - 24], rsi
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], rax
	vmovups	ymmword ptr [r13], ymm1
	vmovups	ymmword ptr [rbx], ymm0
	mov	qword ptr [rbp - 64], r13       # 8-byte Spill
	mov	r13, rbx
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB4_238
# %bb.210:                              # %OP771.MLOAD.contd
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rsi, [r15 + rax]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r13 - 8]
	mov	r9, qword ptr [r13 - 32]
	mov	r10, qword ptr [r13 - 24]
	mov	r11, qword ptr [r13 - 16]
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [r13 - 32], r9
	mov	qword ptr [r13 - 24], r10
	mov	qword ptr [r13 - 16], r11
	mov	qword ptr [r13 - 8], r8
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB4_19
.LBB4_211:                              # %OP424.PUSH1
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 64], r10       # 8-byte Spill
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB4_220
# %bb.212:                              # %OP425.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	movabs	rax, 631482100863729664
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	qword ptr [rbx + 8], 0
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.213:                              # %OP429.PUSH1
	mov	r11, qword ptr [rbp - 72]       # 8-byte Reload
	lea	rax, [r11 + 2]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rax, qword ptr [r13 + 24]
	mov	r10, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r8, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	add	r11, 3
	mov	rbx, qword ptr [rbp - 112]      # 8-byte Reload
	shl	rbx, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r9
	adc	rax, 0
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [rbp - 72], r11       # 8-byte Spill
	mov	r13, r11
	shl	r13, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_12] # xmm0 = [32,0]
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	vmovups	ymmword ptr [r15 + rbx], ymm0
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	qword ptr [r15 + r13], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_236
# %bb.214:                              # %OP440.PUSH1
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	rax, r15
	add	r13, r15
	mov	r15, rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_20] # xmm0 = [54,0]
	vmovups	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 54
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_236
# %bb.215:                              # %OP443.PUSH1
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	movabs	rax, 7521414243042751592
	mov	qword ptr [r13 + 16], rax
	movabs	r8, 8027138987362644591
	mov	qword ptr [r13], r8
	movabs	r10, 4855283293877444707
	mov	qword ptr [r13 + 24], r10
	movabs	r9, 7286931281045712416
	mov	qword ptr [r13 + 8], r9
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.216:                              # %OP449.PUSH1
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	movabs	rax, 7286958773215633505
	mov	qword ptr [r13 + 16], rax
	movabs	r10, 8681005441186034792
	mov	qword ptr [r13 + 24], r10
	movabs	r9, 7234032681518039040
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	push	r13
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB4_220
# %bb.217:                              # %OP454.POP
	vmovaps	xmm0, xmmword ptr [rip + .LCPI4_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm1, ymmword ptr [rbx - 32]
	mov	qword ptr [rbx - 32], rdx
	mov	qword ptr [rbx - 24], rsi
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], rax
	vmovups	ymmword ptr [r14], ymm1
	vmovups	ymmword ptr [rbx], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB4_240
# %bb.218:                              # %OP461.MLOAD.contd
	lea	rsi, [rbx - 32]
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	mov	r8, qword ptr [rbx - 8]
	mov	r9, qword ptr [rbx - 32]
	mov	r10, qword ptr [rbx - 24]
	mov	r11, qword ptr [rbx - 16]
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [rbx - 32], r9
	mov	qword ptr [rbx - 24], r10
	mov	qword ptr [rbx - 16], r11
	mov	qword ptr [rbx - 8], r8
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rdi
	mov	rdi, r13
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	je	.LBB4_190
	jmp	.LBB4_20
.LBB4_219:
	mov	r12, r14
	jmp	.LBB4_189
.LBB4_220:
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB4_190
.LBB4_92:
	mov	r12, rbx
	jmp	.LBB4_189
.LBB4_221:                              # %resize.i3287
	mov	r13, rsi
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_243
# %bb.222:                              # %resize.i3287.OP150.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rax + 40]
	mov	rsi, r13
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB4_151
.LBB4_223:                              # %resize.i3301
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_240
# %bb.224:                              # %resize.i3301.OP159.PUSH1_crit_edge
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB4_152
.LBB4_225:                              # %resize.i3317
	mov	r12, r9
	mov	r13, r15
	mov	r15, rsi
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_243
# %bb.226:                              # %resize.i3317.OP165.MLOAD.contd_crit_edge
	mov	rsi, r15
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	mov	r15, r13
	mov	r9, r12
	jmp	.LBB4_153
.LBB4_227:                              # %select.false3816
	mov	eax, ecx
	jmp	.LBB4_154
.LBB4_229:                              # %return.loopexit
	mov	al, 89
	jmp	.LBB4_189
.LBB4_230:
	mov	r12, qword ptr [rbp - 136]      # 8-byte Reload
	jmp	.LBB4_189
.LBB4_231:                              # %resize.i3380
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_241
# %bb.232:                              # %resize.i3380.OP315.MLOAD.contd_crit_edge
	mov	rsi, qword ptr [r12 + 88]
	mov	rax, qword ptr [r12 + 80]
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	rax, qword ptr [r12 + 64]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	rdi, qword ptr [r12 + 72]
	mov	r9, qword ptr [r12 + 120]
	mov	rax, qword ptr [r12 + 112]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r10, qword ptr [r12 + 104]
	mov	rax, qword ptr [r12 + 96]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	jmp	.LBB4_176
.LBB4_233:                              # %resize.i3396
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB4_241
# %bb.234:                              # %resize.i3396.OP334.MLOAD.contd_crit_edge
	mov	rsi, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	rax, qword ptr [r12 + 64]
	mov	rcx, qword ptr [r12 + 72]
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	jmp	.LBB4_178
.LBB4_235:
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB4_189
.LBB4_236:
	mov	r12, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB4_189
.LBB4_237:
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, rbx
	jmp	.LBB4_190
.LBB4_238:
	mov	r12, qword ptr [rbp - 96]       # 8-byte Reload
	jmp	.LBB4_190
.LBB4_239:                              # %select.false3871
	mov	eax, ecx
	jmp	.LBB4_202
.LBB4_240:
	mov	r12, qword ptr [rbp - 96]       # 8-byte Reload
	jmp	.LBB4_189
.LBB4_241:
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	jmp	.LBB4_189
.LBB4_242:
	mov	r12, qword ptr [rbp - 152]      # 8-byte Reload
	jmp	.LBB4_189
.LBB4_243:
	mov	r12, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB4_189
.Lfunc_end4:
	.size	usdc, .Lfunc_end4-usdc
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI4_0:
	.long	.LBB4_183-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_189-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_26-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_229-.LJTI4_0
	.long	.LBB4_30-.LJTI4_0
.LJTI4_1:
	.long	.LBB4_189-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_132-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_134-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_229-.LJTI4_1
	.long	.LBB4_150-.LJTI4_1
.LJTI4_2:
	.long	.LBB4_189-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_138-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_140-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_229-.LJTI4_2
	.long	.LBB4_150-.LJTI4_2
.LJTI4_3:
	.long	.LBB4_184-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_46-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_159-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_89-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_31-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_104-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_102-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_181-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_102-.LJTI4_3
	.long	.LBB4_102-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_146-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_229-.LJTI4_3
	.long	.LBB4_106-.LJTI4_3
.LJTI4_4:
	.long	.LBB4_4-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_173-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_4-.LJTI4_4
	.long	.LBB4_4-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_135-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_41-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_54-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_166-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_55-.LJTI4_4
	.long	.LBB4_55-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_165-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_229-.LJTI4_4
	.long	.LBB4_170-.LJTI4_4
.LJTI4_5:
	.long	.LBB4_102-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_169-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_102-.LJTI4_5
	.long	.LBB4_102-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_141-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_167-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_54-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_172-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_55-.LJTI4_5
	.long	.LBB4_55-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_185-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_229-.LJTI4_5
	.long	.LBB4_86-.LJTI4_5
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function weth
.LCPI5_0:
	.long	64                              # 0x40
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_2:
	.long	128                             # 0x80
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_4:
	.quad	4                               # 0x4
	.quad	0                               # 0x0
.LCPI5_28:
	.long	890                             # 0x37a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_29:
	.quad	1                               # 0x1
	.quad	0                               # 0x0
.LCPI5_30:
	.quad	256                             # 0x100
	.quad	0                               # 0x0
.LCPI5_31:
	.quad	2                               # 0x2
	.quad	0                               # 0x0
.LCPI5_32:
	.quad	32                              # 0x20
	.quad	0                               # 0x0
.LCPI5_33:
	.quad	31                              # 0x1f
	.quad	0                               # 0x0
.LCPI5_34:
	.long	96                              # 0x60
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_35:
	.long	21564                           # 0x543c
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_36:
	.quad	68                              # 0x44
	.quad	0                               # 0x0
.LCPI5_37:
	.quad	29                              # 0x1d
	.quad	0                               # 0x0
.LCPI5_39:
	.quad	100                             # 0x64
	.quad	0                               # 0x0
.LCPI5_40:
	.long	19511                           # 0x4c37
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_41:
	.long	21232                           # 0x52f0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_42:
	.quad	42                              # 0x2a
	.quad	0                               # 0x0
.LCPI5_43:
	.long	23122                           # 0x5a52
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_44:
	.long	2692334344                      # 0xa079c308
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_46:
	.long	30                              # 0x1e
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_50:
	.quad	4294967295                      # 0xffffffff
	.quad	0                               # 0x0
.LCPI5_51:
	.long	224                             # 0xe0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_55:
	.quad	160                             # 0xa0
	.quad	0                               # 0x0
.LCPI5_56:
	.quad	192                             # 0xc0
	.quad	0                               # 0x0
.LCPI5_57:
	.long	18045                           # 0x467d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_58:
	.quad	16                              # 0x10
	.quad	0                               # 0x0
.LCPI5_61:
	.long	19139                           # 0x4ac3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_63:
	.long	18766                           # 0x494e
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_64:
	.long	26                              # 0x1a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_69:
	.long	1825482322                      # 0x6ccea652
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_70:
	.quad	17                              # 0x11
	.quad	0                               # 0x0
.LCPI5_71:
	.long	281                             # 0x119
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_72:
	.quad	34                              # 0x22
	.quad	0                               # 0x0
.LCPI5_73:
	.long	66                              # 0x42
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_74:
	.long	14139                           # 0x373b
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_75:
	.long	18055                           # 0x4687
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_79:
	.long	20148                           # 0x4eb4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_80:
	.long	20142                           # 0x4eae
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_81:
	.quad	37                              # 0x25
	.quad	0                               # 0x0
.LCPI5_82:
	.long	22407                           # 0x5787
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_83:
	.long	9                               # 0x9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_87:
	.long	16633                           # 0x40f9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_88:
	.long	8655                            # 0x21cf
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_89:
	.long	8649                            # 0x21c9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_90:
	.quad	38                              # 0x26
	.quad	0                               # 0x0
.LCPI5_91:
	.long	22485                           # 0x57d5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_92:
	.long	16616                           # 0x40e8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_93:
	.long	16610                           # 0x40e2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_95:
	.long	23300                           # 0x5b04
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_96:
	.long	14820                           # 0x39e4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_97:
	.long	11631                           # 0x2d6f
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_98:
	.quad	255                             # 0xff
	.quad	0                               # 0x0
.LCPI5_99:
	.long	248                             # 0xf8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_100:
	.long	15254                           # 0x3b96
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_101:
	.long	14717                           # 0x397d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_102:
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_103:
	.long	18                              # 0x12
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_104:
	.long	14331                           # 0x37fb
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_106:
	.quad	19497                           # 0x4c29
	.quad	0                               # 0x0
.LCPI5_107:
	.long	19285                           # 0x4b55
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_108:
	.long	13885                           # 0x363d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_110:
	.quad	36                              # 0x24
	.quad	0                               # 0x0
.LCPI5_112:
	.long	13789                           # 0x35dd
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_113:
	.long	13459                           # 0x3493
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_114:
	.long	12542                           # 0x30fe
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_115:
	.long	12445                           # 0x309d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_116:
	.long	10935                           # 0x2ab7
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_117:
	.long	22890                           # 0x596a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_118:
	.long	17899                           # 0x45eb
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_119:
	.quad	43                              # 0x2b
	.quad	0                               # 0x0
.LCPI5_120:
	.long	22133                           # 0x5675
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_121:
	.long	23337                           # 0x5b29
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_122:
	.long	20098                           # 0x4e82
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_123:
	.long	11530                           # 0x2d0a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_124:
	.long	11434                           # 0x2caa
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_125:
	.quad	3                               # 0x3
	.quad	0                               # 0x0
.LCPI5_126:
	.long	9771                            # 0x262b
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_127:
	.quad	61                              # 0x3d
	.quad	0                               # 0x0
.LCPI5_128:
	.long	21997                           # 0x55ed
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_129:
	.long	9890                            # 0x26a2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_132:
	.long	11                              # 0xb
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_133:
	.long	9413                            # 0x24c5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_134:
	.quad	41                              # 0x29
	.quad	0                               # 0x0
.LCPI5_135:
	.long	22176                           # 0x56a0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_136:
	.long	22650                           # 0x587a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_137:
	.long	9396                            # 0x24b4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_138:
	.long	9203                            # 0x23f3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_139:
	.quad	13                              # 0xd
	.quad	0                               # 0x0
.LCPI5_141:
	.long	8670                            # 0x21de
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_143:
	.long	22608                           # 0x5850
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_144:
	.long	17586                           # 0x44b2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_145:
	.long	8660                            # 0x21d4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_146:
	.long	22444                           # 0x57ac
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_147:
	.quad	46                              # 0x2e
	.quad	0                               # 0x0
.LCPI5_148:
	.long	23042                           # 0x5a02
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_149:
	.long	8629                            # 0x21b5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_150:
	.quad	35                              # 0x23
	.quad	0                               # 0x0
.LCPI5_151:
	.long	22217                           # 0x56c9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_152:
	.long	8228                            # 0x2024
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_153:
	.long	8                               # 0x8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_154:
	.long	6                               # 0x6
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_156:
	.long	7386                            # 0x1cda
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_157:
	.long	6275                            # 0x1883
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_158:
	.long	6284                            # 0x188c
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_159:
	.quad	10                              # 0xa
	.quad	0                               # 0x0
.LCPI5_160:
	.long	5811                            # 0x16b3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_162:
	.quad	40                              # 0x28
	.quad	0                               # 0x0
.LCPI5_163:
	.long	22804                           # 0x5914
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_164:
	.long	5752                            # 0x1678
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_165:
	.long	16505                           # 0x4079
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_166:
	.long	22058                           # 0x562a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_167:
	.long	22969                           # 0x59b9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_168:
	.long	5518                            # 0x158e
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_169:
	.long	5422                            # 0x152e
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_171:
	.long	1064                            # 0x428
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_172:
	.long	10986                           # 0x2aea
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_173:
	.long	1161                            # 0x489
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_174:
	.quad	44                              # 0x2c
	.quad	0                               # 0x0
.LCPI5_175:
	.long	22564                           # 0x5824
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_176:
	.long	15817                           # 0x3dc9
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_179:
	.long	15693                           # 0x3d4d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_180:
	.long	22252                           # 0x56ec
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_181:
	.long	288                             # 0x120
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_182:
	.long	15158                           # 0x3b36
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_183:
	.long	1092                            # 0x444
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_185:
	.long	7497                            # 0x1d49
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_186:
	.long	1921                            # 0x781
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_187:
	.long	7192                            # 0x1c18
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_188:
	.quad	47                              # 0x2f
	.quad	0                               # 0x0
.LCPI5_189:
	.long	1399                            # 0x577
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_190:
	.long	14                              # 0xe
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_192:
	.long	5107                            # 0x13f3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_193:
	.long	19669                           # 0x4cd5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_194:
	.long	4971                            # 0x136b
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_202:
	.long	12                              # 0xc
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_205:
	.long	6256                            # 0x1870
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_211:
	.long	9558                            # 0x2556
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_212:
	.long	9106                            # 0x2392
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_213:
	.quad	33                              # 0x21
	.quad	0                               # 0x0
.LCPI5_214:
	.long	8132                            # 0x1fc4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_219:
	.long	17328                           # 0x43b0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_220:
	.quad	27                              # 0x1b
	.quad	0                               # 0x0
.LCPI5_224:
	.long	19017                           # 0x4a49
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_226:
	.long	50                              # 0x32
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_232:
	.long	20952                           # 0x51d8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_234:
	.quad	21212                           # 0x52dc
	.quad	0                               # 0x0
.LCPI5_242:
	.quad	11859                           # 0x2e53
	.quad	0                               # 0x0
.LCPI5_243:
	.long	5                               # 0x5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_247:
	.quad	11286                           # 0x2c16
	.quad	0                               # 0x0
.LCPI5_253:
	.long	14214                           # 0x3786
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_254:
	.long	21831                           # 0x5547
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_255:
	.long	18387                           # 0x47d3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_256:
	.long	18232                           # 0x4738
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_257:
	.long	17254                           # 0x4366
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_261:
	.quad	13641                           # 0x3549
	.quad	0                               # 0x0
.LCPI5_262:
	.quad	13464                           # 0x3498
	.quad	0                               # 0x0
.LCPI5_265:
	.long	7                               # 0x7
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_266:
	.long	14621                           # 0x391d
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI5_267:
	.zero	16
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0
.LCPI5_1:
	.quad	-32                             # 0xffffffffffffffe0
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
.LCPI5_3:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	-9223372036854775808            # 0x8000000000000000
.LCPI5_5:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3082234009                      # 0xb7b72899
.LCPI5_6:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3824031246                      # 0xe3ee160e
.LCPI5_7:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4015374022                      # 0xef55bec6
.LCPI5_8:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4076725131                      # 0xf2fde38b
.LCPI5_9:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4193856484                      # 0xf9f92be4
.LCPI5_10:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4267137671                      # 0xfe575a87
.LCPI5_11:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	950415747                       # 0x38a63183
.LCPI5_12:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1425886544                      # 0x54fd4d50
.LCPI5_13:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1553423035                      # 0x5c975abb
.LCPI5_14:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1889567281                      # 0x70a08231
.LCPI5_15:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2127478272                      # 0x7ecebe00
.LCPI5_16:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2133781699                      # 0x7f2eecc3
.LCPI5_17:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	801644041                       # 0x2fc81e09
.LCPI5_18:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	826074471                       # 0x313ce567
.LCPI5_19:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	861345323                       # 0x3357162b
.LCPI5_20:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	903454517                       # 0x35d99f35
.LCPI5_21:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	910484757                       # 0x3644e515
.LCPI5_22:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	445207142                       # 0x1a895266
.LCPI5_23:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	599290589                       # 0x23b872dd
.LCPI5_24:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	716570693                       # 0x2ab60045
.LCPI5_25:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	117300739                       # 0x6fdde03
.LCPI5_26:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	157198259                       # 0x95ea7b3
.LCPI5_27:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	404098525                       # 0x18160ddd
.LCPI5_38:
	.quad	8390876135520468992             # 0x7472616374000000
	.quad	2336927775650443118             # 0x206e6f6e2d636f6e
	.quad	2333816150206477423             # 0x2063616c6c20746f
	.quad	4712001552627495738             # 0x416464726573733a
.LCPI5_45:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2305843009213693952             # 0x2000000000000000
.LCPI5_47:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2161727821137838080             # 0x1e00000000000000
.LCPI5_48:
	.quad	7953766464692224000             # 0x6e61747572650000
	.quad	7020101797925841255             # 0x616c696420736967
	.quad	7950597417402461814             # 0x6e56323a20696e76
	.quad	5073693607470263141             # 0x46696174546f6b65
.LCPI5_49:
	.quad	7308057228859238726             # 0x656b6f5474616946
	.quad	8533873931049916014             # 0x766e69203a32566e
	.quad	7451613641421974625             # 0x6769732064696c61
	.quad	111542271238510                 # 0x65727574616e
.LCPI5_52:
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
	.quad	4294967295                      # 0xffffffff
	.quad	0                               # 0x0
.LCPI5_53:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	19511                           # 0x4c37
.LCPI5_54:
	.quad	-2217103280690290073            # 0xe13b44501c1a2267
	.quad	5975438654008247698             # 0x52ed05cbed4cc592
	.quad	-819999302486723315             # 0xf49ec6fa9b35f50d
	.quad	8970164247407462211             # 0x7c7c6cdb67a18743
.LCPI5_59:
	.quad	-256                            # 0xffffffffffffff00
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
.LCPI5_60:
	.quad	-7098644936568521343            # 0x9d7c8c0a59353d81
	.quad	-5529431227740886800            # 0xb3438398348d68f0
	.quad	-6164634756190722939            # 0xaa72d159d339a485
	.quad	2079896664552183501             # 0x1cdd46ff242716cd
.LCPI5_62:
	.quad	1334235591823946793             # 0x12842833a1597429
	.quad	-939832130933264531             # 0xf2f50ba807396f6d
	.quad	-5979946614061152626            # 0xad02f63cd515c68e
	.quad	1552346174029726346             # 0x158b0a9edf7a828a
.LCPI5_65:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1873497444986126336             # 0x1a00000000000000
.LCPI5_66:
	.quad	8242994692971560960             # 0x7265000000000000
	.quad	2338328524489847925             # 0x207369676e617475
	.quad	2335519336488003940             # 0x20696e76616c6964
	.quad	4992609838504686138             # 0x454950323631323a
.LCPI5_67:
	.quad	4193468311877470533             # 0x3a32313632504945
	.quad	7235433442201987360             # 0x64696c61766e6920
	.quad	8463496726545265440             # 0x7574616e67697320
	.quad	25970                           # 0x6572
.LCPI5_68:
	.quad	4922695492300419442             # 0x4450ed77fbfbb172
	.quad	-6726467729789070983            # 0xa2a6c93cf4cb5179
	.quad	2148283114                      # 0x800c32ea
	.quad	0                               # 0x0
.LCPI5_76:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1152921504606846976             # 0x1000000000000000
.LCPI5_77:
	.quad	-7016956544384560987            # 0x9e9ec333479b10a5
	.quad	-7512074368329426144            # 0x97bfc029a5685b20
	.quad	8498024259589154852             # 0x75ef0c0a2576a824
	.quad	-7431414145864541771            # 0x98de503528ee59b5
.LCPI5_78:
	.quad	7389765400633884136             # 0x668db87aae413de8
	.quad	2511005646928131014             # 0x22d8e254fe26b3c6
	.quad	7020072847491925187             # 0x616c4f0f941f04c3
	.quad	-3415473885159550854            # 0xd099cc98ef71107a
.LCPI5_84:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	648518346341351424              # 0x900000000000000
.LCPI5_85:
	.quad	4467210859592250251             # 0x3dfeb89bc6c3738b
	.quad	8776488692518497873             # 0x79cc59f74ccc2e51
	.quad	-3820724175082119389            # 0xcafa0f9b177b9f23
	.quad	1098941167306647465             # 0xf40392b525da7a9
.LCPI5_86:
	.quad	0                               # 0x0
	.quad	2951364421682967535             # 0x28f55a4df523b3ef
	.quad	-7697874482856943338            # 0x952ba7f163c4a116
	.quad	7620847484418887082             # 0x69c2b068fc378daa
.LCPI5_94:
	.quad	3889517276384507989             # 0x35fa575af6a4b855
	.quad	5867812543482431314             # 0x516ea86b56da0752
	.quad	7336126653074542545             # 0x65cf28528fc88fd1
	.quad	-25642706710075099              # 0xffa4e61817776925
.LCPI5_105:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3602879701896396800             # 0x3200000000000000
.LCPI5_109:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4294967296                      # 0x100000000
	.quad	0                               # 0x0
.LCPI5_111:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	4188471217339196772             # 0x3a20706175736564
	.quad	5792039734190697573             # 0x5061757361626c65
.LCPI5_130:
	.quad	8187823086544452773             # 0x71a0fdb75d397ca5
	.quad	7854220679750799226             # 0x6cffcc184412cf7a
	.quad	-9125384794891549069            # 0x815c1ee09dbd0673
	.quad	-3740532116509216128            # 0xcc16f5dbb4873280
.LCPI5_131:
	.quad	2951364421682967535             # 0x28f55a4df523b3ef
	.quad	-7697874482856943338            # 0x952ba7f163c4a116
	.quad	7620847484418887082             # 0x69c2b068fc378daa
	.quad	-2453807943512831845            # 0xddf252ad1be2c89b
.LCPI5_140:
	.quad	-1884032128188888584            # 0xe5da92c2ede0c9f8
	.quad	-5597009633656649497            # 0xb2536d647574c8e7
	.quad	3802271995129176363             # 0x34c4623bf917212b
	.quad	-6087405477500963438            # 0xab8530f87dc9b592
.LCPI5_142:
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
	.quad	9223372036854775807             # 0x7fffffffffffffff
.LCPI5_155:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	-4294967296                     # 0xffffffff00000000
	.quad	-1                              # 0xffffffffffffffff
.LCPI5_161:
	.quad	7310017761088307200             # 0x6572666c6f770000
	.quad	7166468834363207542             # 0x6374696f6e206f76
	.quad	4188474601454727777             # 0x3a20737562747261
	.quad	6008195963164914792             # 0x536166654d617468
.LCPI5_170:
	.quad	3447661818411187278             # 0x2fd88e2848137c4e
	.quad	-4109883155088302820            # 0xc6f6c30ba8999d1c
	.quad	-4972230036741291435            # 0xbaff172026820255
	.quad	1260499993158658009             # 0x117e3210bb9aa7d9
.LCPI5_177:
	.quad	7522454415709463922             # 0x6865206f776e6572
	.quad	7598452654992531572             # 0x6973206e6f742074
	.quad	2333816150210998816             # 0x2063616c6c657220
	.quad	5726166815767029050             # 0x4f776e61626c653a
.LCPI5_178:
	.quad	-2038977864469817376            # 0xe3b4186f6b6457e0
	.quad	1822127811346029231             # 0x19497f9722a3daaf
	.quad	1388460121665106564             # 0x1344cd1fd0a4f284
	.quad	-8367679739664115436            # 0x8be0079c53165914
.LCPI5_184:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1224979098644774912             # 0x1100000000000000
.LCPI5_191:
	.quad	-6828939107941483942            # 0xa13abc10065ffa5a
	.quad	-4391043286208510665            # 0xc30fe1655c2d8537
	.quad	-8196312958850048652            # 0x8e40d8ca33cfdd74
	.quad	-1984427719239069388            # 0xe475e580d8511134
.LCPI5_195:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	720575940379279360              # 0xa00000000000000
.LCPI5_196:
	.quad	6566260114167413029             # 0x5b200ac8c7c3b925
	.quad	-2521148547375421154            # 0xdd0314c0f7b2291e
	.quad	-3364345866241538829            # 0xd14f71427d1e84f3
	.quad	-8332818307897066149            # 0x8c5be1e5ebec7d5b
.LCPI5_197:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2449958197289549824             # 0x2200000000000000
.LCPI5_198:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2594073385365405696             # 0x2400000000000000
.LCPI5_199:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	814919637                       # 0x3092afd5
.LCPI5_200:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	816707615                       # 0x30adf81f
.LCPI5_201:
	.quad	1629287684866385609             # 0x169c64845d6126c9
	.quad	6891346005080805706             # 0x5fa2faae0126114a
	.quad	5557266254805274640             # 0x4d1f60370fef1010
	.quad	7958403348434106751             # 0x6e71edae12b1b97f
.LCPI5_203:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	864691128455135232              # 0xc00000000000000
.LCPI5_204:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	936748722493063168              # 0xd00000000000000
.LCPI5_206:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1086394137                      # 0x40c10f19
.LCPI5_207:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1117154408                      # 0x42966c68
.LCPI5_208:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1124219316                      # 0x430239b4
.LCPI5_209:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1313134934                      # 0x4e44d956
.LCPI5_210:
	.quad	-1839965850160657120            # 0xe67720cece530d20
	.quad	-1702230232258410048            # 0xe860769f604e89c0
	.quad	-2606624897891603568            # 0xdbd36877427b6b90
	.quad	5086833141808560572             # 0x46980fca912ef9bc
.LCPI5_215:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	961581905                       # 0x39509351
.LCPI5_216:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1061922874                      # 0x3f4ba83a
.LCPI5_217:
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1                              # 0xffffffffffffffff
	.quad	-1095216660481                  # 0xffffff00ffffffff
	.quad	-1                              # 0xffffffffffffffff
.LCPI5_218:
	.quad	-1332170394688136397            # 0xed832e158c525b33
	.quad	-3381450524585592559            # 0xd112aca9e0847911
	.quad	-2333139278919193286            # 0xdf9f062ff482ad3a
	.quad	8648466197611687699             # 0x7805862f689e2f13
.LCPI5_221:
	.quad	7813594720394805248             # 0x6c6f770000000000
	.quad	8029390848747991654             # 0x6f6e206f76657266
	.quad	4188454737263817833             # 0x3a20616464697469
	.quad	6008195963164914792             # 0x536166654d617468
.LCPI5_222:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1431022396                      # 0x554bab3c
.LCPI5_223:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1510251120                      # 0x5a049a70
.LCPI5_225:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	72057594037927936               # 0x100000000000000
.LCPI5_227:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2697751144                      # 0xa0cc6a68
.LCPI5_228:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2854281700                      # 0xaa20e1e4
.LCPI5_229:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2854690330                      # 0xaa271e1a
.LCPI5_230:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2906177314                      # 0xad38bf22
.LCPI5_231:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2987494029                      # 0xb2118a8d
.LCPI5_233:
	.quad	3621828983343440211             # 0x3243524565666153
	.quad	7795017850487323184             # 0x6c2d776f6c203a30
	.quad	7809632219745842789             # 0x6c6163206c657665
	.quad	7234307576302018668             # 0x64656c696166206c
.LCPI5_235:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2757214935                      # 0xa457c2d7
.LCPI5_236:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2835717307                      # 0xa9059cbb
.LCPI5_237:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2666130979403333632             # 0x2500000000000000
.LCPI5_238:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2376452955                      # 0x8da5cb5b
.LCPI5_239:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2514000705                      # 0x95d89b41
.LCPI5_240:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2681229421                      # 0x9fd0506d
.LCPI5_241:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2681579215                      # 0x9fd5a6cf
.LCPI5_244:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2220280665                      # 0x8456cb59
.LCPI5_245:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2293738339                      # 0x88b7ab63
.LCPI5_246:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2322446787                      # 0x8a6db9c3
.LCPI5_248:
	.quad	4327745473675785765             # 0x3c0f3d9434bff625
	.quad	8140585336617268899             # 0x70f92b3ba4d376a3
	.quad	7350669690654874382             # 0x6602d3235cb6db0e
	.quad	7603659614053296358             # 0x6985a02210a168e6
.LCPI5_249:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3573918927                      # 0xd505accf
.LCPI5_250:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3590908516                      # 0xd608ea64
.LCPI5_251:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3642135687                      # 0xd9169487
.LCPI5_252:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3714247998                      # 0xdd62ed3e
.LCPI5_258:
	.quad	8678552421991186432             # 0x7870697265640000
	.quad	7883960305245692005             # 0x6d69742069732065
	.quad	7950597417402918258             # 0x6e56323a20706572
	.quad	5073693607470263141             # 0x46696174546f6b65
.LCPI5_259:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3171951664                      # 0xbd102430
.LCPI5_260:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3473484181                      # 0xcf092995
.LCPI5_263:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3852906767                      # 0xe5a6b10f
.LCPI5_264:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3913941250                      # 0xe94a0102
.LCPI5_268:
	.zero	32
	.text
	.globl	weth
	.p2align	4, 0x90
	.type	weth,@function
weth:                                   # @weth
# %bb.0:                                # %entry
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 4424
	mov	r12, r9
	mov	qword ptr [rbp - 104], rcx      # 8-byte Spill
	mov	r11, rsi
	mov	rax, qword ptr [r9 + 32]
	test	rax, rax
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	mov	qword ptr [rbp - 56], rsi       # 8-byte Spill
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	je	.LBB5_9
# %bb.1:                                # %resume
	mov	rcx, qword ptr [rdx]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	rax
.Ltmp17:                                # Block address taken
.LBB5_2:                                # %OP8616.ISZERO
	mov	qword ptr [rbp - 216], rdi      # 8-byte Spill
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 32]
	mov	r8, qword ptr [r11 + rax - 24]
	or	r8, qword ptr [r11 + rax - 8]
	or	rcx, qword ptr [r11 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax - 24], xmm0
	mov	qword ptr [r11 + rax - 32], rdi
	mov	qword ptr [r11 + rax - 8], 0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 24], 0
	je	.LBB5_318
.LBB5_3:                                # %OP8628.JUMPDEST
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	jne	.LBB5_1055
# %bb.4:                                # %OP8634.MLOAD.contd
	mov	r8, r13
	mov	rsi, r15
	add	rsi, r11
	add	r8, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r12 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r8
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rcx
	mov	qword ptr [r11 + r14 + 24], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 32
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [r11 + rax], rdx
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	rbx, r8
	cmp	rcx, 31
	jbe	.LBB5_377
.LBB5_5:                                # %OP8645.JUMPDEST
	lea	r9, [rbx - 2]
	mov	rax, r9
	shl	rax, 5
	mov	r15, qword ptr [r11 + rax]
	mov	r13, qword ptr [r12 + 40]
	mov	rcx, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rcx, r12
	mov	rsi, r15
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r11 + rax + 8]
	mov	r8d, 0
	sbb	r8, qword ptr [r11 + rax + 16]
	sbb	rdi, qword ptr [r11 + rax + 24]
	cmovb	rsi, rdx
	lea	r10, [rbx - 1]
	lea	r14, [r11 + rax]
	cmp	rsi, rcx
	ja	.LBB5_1052
.LBB5_6:                                # %OP8647.MLOAD.contd
	add	r12, qword ptr [r13 + 8]
	mov	rax, qword ptr [r15 + r12 + 16]
	mov	rcx, qword ptr [r15 + r12 + 24]
	mov	rdx, qword ptr [r15 + r12]
	mov	rsi, qword ptr [r15 + r12 + 8]
	movbe	qword ptr [r14 + 16], rsi
	movbe	qword ptr [r14 + 24], rdx
	movbe	qword ptr [r14], rcx
	movbe	qword ptr [r14 + 8], rax
	or	rsi, rcx
	or	rdx, rax
	or	rdx, rsi
	je	.LBB5_614
# %bb.7:
	mov	rax, r9
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_8:                                # %OP8681.JUMPDEST
	mov	rcx, rax
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_63] # xmm0 = [18766,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rcx - 192]
	vmovdqu	ymm1, ymmword ptr [r11 + rcx - 160]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rcx + 64], ymm1
	add	rcx, r11
	add	rcx, -128
	jmp	.LBB5_111
.LBB5_9:                                # %no_resume
	mov	r13, rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_2] # xmm0 = [128,0,0,0]
	vmovups	ymmword ptr [r11], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	mov	rbx, qword ptr [r12 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 95
	jbe	.LBB5_1056
.LBB5_10:                               # %OP3.CALLVALUE
	mov	rax, qword ptr [rbx + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_3] # ymm0 = [0,0,0,9223372036854775808]
	vmovdqu	ymmword ptr [rax + r14 + 64], ymm0
	mov	rax, qword ptr [r8 + 120]
	mov	rcx, qword ptr [r8 + 112]
	mov	rdi, qword ptr [r8 + 96]
	mov	rsi, qword ptr [r8 + 104]
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 16], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rax
	or	rsi, rax
	or	rdi, rcx
	xor	eax, eax
	or	rdi, rsi
	sete	al
	mov	qword ptr [r11 + 32], rax
	mov	qword ptr [r11 + 48], 0
	mov	qword ptr [r11 + 56], 0
	mov	qword ptr [r11 + 40], 0
	je	.LBB5_41
# %bb.11:                               # %OP8.PUSH1
	mov	rbx, rdx
	add	r11, 32
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, r12
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_1061
.LBB5_12:                               # %select.end
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, rbx
	jmp	.LBB5_2884
.Ltmp18:                                # Block address taken
.LBB5_13:                               # %OP10118.SWAP3
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [r11 + r14 - 128]
	vmovdqa	xmm1, xmmword ptr [r11 + r14 - 112]
	vmovaps	xmm2, xmmword ptr [r11 + r14 - 32]
	vmovaps	xmm3, xmmword ptr [r11 + r14 - 16]
	vmovaps	xmmword ptr [r11 + r14 - 112], xmm3
	vmovaps	xmmword ptr [r11 + r14 - 128], xmm2
	vmovdqa	xmmword ptr [r11 + r14 - 16], xmm1
	vmovdqa	xmmword ptr [r11 + r14 - 32], xmm0
	lea	rbx, [rax - 1]
	mov	r13, qword ptr [r12 + 24]
	mov	r15, rbx
	shl	r15, 5
	xor	eax, eax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 - 88], xmm0
	mov	qword ptr [r11 + r14 - 96], r13
	mov	qword ptr [r11 + r14 - 72], 0
	vmovdqu	xmmword ptr [r11 + r14 - 56], xmm0
	mov	qword ptr [r11 + r14 - 64], r13
	mov	qword ptr [r11 + r14 - 40], 0
	mov	qword ptr [r11 + r15 + 24], 0
	mov	qword ptr [r11 + r15 + 16], 0
	mov	qword ptr [r11 + r15 + 8], 0
	mov	qword ptr [r11 + r15], 0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], r13
	mov	qword ptr [r11 + r14 + 24], 0
	vmovdqu	xmmword ptr [r11 + r15 + 8], xmm0
	mov	qword ptr [r11 + r15 + 24], 0
	test	r13, r13
	sete	al
	mov	qword ptr [r11 + r15], rax
	je	.LBB5_2710
# %bb.14:                               # %OP10129.PUSH1
	mov	qword ptr [rbp - 216], rdi      # 8-byte Spill
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, r12
	lea	r12, [r11 + r14]
	mov	rsi, qword ptr [rax + 40]
	mov	rax, qword ptr [rsi + 16]
	mov	rcx, qword ptr [rsi + 48]
	sub	rax, rcx
	cmp	rax, 95
	jbe	.LBB5_1068
# %bb.15:
	xor	eax, eax
	xor	edx, edx
	mov	r10, rsi
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	xor	edi, edi
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	xor	edi, edi
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	xor	r8d, r8d
.LBB5_16:                               # %OP10130.MLOAD.contd
	mov	rdi, qword ptr [rsi + 8]
	mov	r11, qword ptr [rdi + rcx + 88]
	mov	rsi, qword ptr [rdi + rcx + 80]
	mov	r9, qword ptr [rdi + rcx + 64]
	mov	rdi, qword ptr [rdi + rcx + 72]
	movbe	qword ptr [r15 + 24], r9
	movbe	qword ptr [r15 + 8], rsi
	movbe	qword ptr [r15], r11
	movbe	qword ptr [r15 + 16], rdi
	movbe	qword ptr [r12 - 72], r9
	movbe	qword ptr [r12 - 88], rsi
	movbe	qword ptr [r12 - 80], rdi
	movbe	qword ptr [r12 - 96], r11
	mov	qword ptr [r12 - 8], r8
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12 - 24], rcx
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 - 16], rcx
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r12 - 32], rcx
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_1] # ymm0 = [18446744073709551584,18446744073709551615,18446744073709551615,18446744073709551615]
	vmovups	ymmword ptr [r15], ymm0
	mov	qword ptr [r12 + 56], rdx
	mov	qword ptr [r12 + 40], rax
	mov	qword ptr [r12 + 48], rdx
	mov	qword ptr [r12 + 32], r13
	add	r13, 63
	adc	rax, 0
	mov	r8, rdx
	adc	r8, 0
	adc	rdx, 0
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r12], r13
	and	eax, 1
	and	r13, -32
	mov	qword ptr [r15 + 8], rax
	vpxor	xmm1, xmm1, xmm1
	vmovdqa	xmmword ptr [r15 + 16], xmm1
	mov	qword ptr [r15], r13
	movbe	qword ptr [r12 + 24], r9
	bswap	r9
	movbe	qword ptr [r12 + 16], rdi
	bswap	rdi
	movbe	qword ptr [r12 + 8], rsi
	bswap	rsi
	movbe	qword ptr [r12], r11
	bswap	r11
	add	r13, r11
	adc	rsi, rax
	adc	rdi, 0
	adc	r9, 0
	mov	qword ptr [r15 + 24], r9
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [r10 + 16]
	mov	rcx, r13
	mov	r13, qword ptr [r10 + 48]
	sub	rax, r13
	cmp	rax, 95
	jbe	.LBB5_3036
.LBB5_17:                               # %OP10143.RETURNDATASIZE
	mov	rax, qword ptr [r10 + 8]
	movbe	qword ptr [rax + r13 + 88], rcx
	movbe	qword ptr [rax + r13 + 80], rsi
	movbe	qword ptr [rax + r13 + 72], rdi
	movbe	qword ptr [rax + r13 + 64], r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rdi + 24]
	vmovdqu	xmmword ptr [r15 + 8], xmm1
	mov	qword ptr [r15], r11
	mov	qword ptr [r15 + 24], 0
	mov	rsi, qword ptr [r12 - 96]
	mov	rax, qword ptr [r12 - 80]
	mov	rcx, qword ptr [r12 - 72]
	mov	rdx, qword ptr [r12 - 88]
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rsi
	mov	r8, qword ptr [rdi + 40]
	mov	r10, qword ptr [r8 + 16]
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	r13, qword ptr [r8 + 48]
	sub	r10, r13
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, r10
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	ja	.LBB5_1070
.LBB5_18:                               # %OP10146.RETURNDATASIZE
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [rax + r13 + 24], r11
	lea	rsi, [rcx + r14]
	add	rsi, -32
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rax + r13], xmm0
	mov	qword ptr [rax + r13 + 16], 0
	mov	rax, qword ptr [rdi + 24]
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 24], 0
	mov	rax, qword ptr [r12 - 96]
	mov	rcx, qword ptr [r12 - 80]
	mov	rdx, qword ptr [r12 - 88]
	mov	r8, qword ptr [r12 - 72]
	mov	qword ptr [r12 + 72], rdx
	mov	qword ptr [r12 + 88], r8
	mov	qword ptr [r12 + 80], rcx
	mov	qword ptr [r12 + 64], rax
	add	rax, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	r8, 0
	mov	qword ptr [r12 + 32], rax
	mov	qword ptr [r12 + 40], rdx
	mov	qword ptr [r12 + 48], rcx
	mov	qword ptr [r12 + 56], r8
	mov	r12, rdi
	vzeroupper
	call	__revmc_builtin_returndatacopy@PLT
	test	al, al
	jne	.LBB5_3037
# %bb.19:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_20:                               # %OP10158.JUMPDEST
	mov	rax, rbx
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 64]
	mov	rdx, qword ptr [r11 + rax - 56]
	mov	rsi, qword ptr [r11 + rax - 48]
	mov	rdi, qword ptr [r11 + rax - 40]
	mov	qword ptr [r11 + rax - 104], rdi
	mov	qword ptr [r11 + rax - 112], rsi
	mov	qword ptr [r11 + rax - 120], rdx
	mov	qword ptr [r11 + rax - 128], rcx
	mov	r8, qword ptr [r11 + rax - 96]
	mov	r9, qword ptr [r11 + rax - 88]
	mov	r10, qword ptr [r11 + rax - 80]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rax - 72]
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax - 136], r11
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax - 144], r10
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax - 152], r9
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax - 160], r8
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_35] # xmm0 = [21564,0,0,0]
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	vmovups	ymmword ptr [r14 + rax - 96], ymm0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax - 48], r10
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rax - 40], r11
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rax - 64], r8
	mov	qword ptr [r11 + rax - 56], r9
	mov	qword ptr [r11 + rax - 8], rdi
	mov	qword ptr [r11 + rax - 16], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 32], rcx
	inc	rbx
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 224]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
.LBB5_21:                               # %OP10187.JUMPDEST
	lea	r14, [rbx + 1]
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	rax, qword ptr [r11 + rbx - 96]
	mov	rcx, qword ptr [r11 + rbx - 88]
	mov	rdx, r14
	shl	rdx, 5
	or	rcx, qword ptr [r11 + rbx - 72]
	or	rax, qword ptr [r11 + rbx - 80]
	xor	esi, esi
	or	rax, rcx
	sete	sil
	mov	qword ptr [r11 + rdx], rsi
	mov	qword ptr [r11 + rdx + 16], 0
	mov	qword ptr [r11 + rdx + 24], 0
	mov	qword ptr [r11 + rdx + 8], 0
	je	.LBB5_2824
# %bb.22:                               # %OP10193.POP
	add	rbx, r11
	vmovdqu	ymm0, ymmword ptr [rbx - 64]
	vmovdqu	ymmword ptr [rbx], ymm0
.LBB5_23:                               # %OP8013.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [r11 + rax - 32]
	vmovaps	xmm1, xmmword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 160]
	mov	rcx, qword ptr [r11 + rax - 152]
	mov	rdi, qword ptr [r11 + rax - 136]
	mov	r13, qword ptr [r11 + rax - 144]
	vmovaps	xmmword ptr [r11 + rax - 144], xmm1
	vmovaps	xmmword ptr [r11 + rax - 160], xmm0
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 128]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 112]
	mov	qword ptr [r11 + rax - 112], r13
	mov	qword ptr [r11 + rax - 104], rdi
	mov	qword ptr [r11 + rax - 128], rsi
	mov	qword ptr [r11 + rax - 120], rcx
	vmovdqa	xmmword ptr [r11 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 32], xmm0
	add	r14, -4
.LBB5_24:                               # %dynamic_jump_table
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	jmp	.LBB5_32
.Ltmp19:                                # Block address taken
.LBB5_25:                               # %OP9558.ISZERO
	mov	qword ptr [rbp - 216], rdi      # 8-byte Spill
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 32]
	mov	r8, qword ptr [r11 + rax - 24]
	or	r8, qword ptr [r11 + rax - 8]
	or	rcx, qword ptr [r11 + rax - 16]
	xor	esi, esi
	xor	edi, edi
	or	rcx, r8
	setne	sil
	sete	dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax - 24], xmm0
	mov	qword ptr [r11 + rax - 32], rdi
	mov	qword ptr [r11 + rax - 8], 0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 24], 0
	je	.LBB5_318
.LBB5_26:                               # %OP9570.JUMPDEST
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [r13 - 3]
	mov	r15, r13
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	jne	.LBB5_1055
# %bb.27:                               # %OP9576.MLOAD.contd
	mov	r8, r13
	mov	rsi, r15
	add	rsi, r11
	add	r8, -2
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rsi - 112], rdi
	mov	qword ptr [rsi - 104], rdx
	mov	qword ptr [rsi - 128], rax
	mov	qword ptr [rsi - 120], rcx
	mov	rcx, qword ptr [r12 + 24]
	xor	edx, edx
	cmp	rcx, 32
	setae	dl
	shl	r14, 5
	mov	rax, r8
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rcx
	mov	qword ptr [r11 + r14 + 24], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 32
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [rsi - 32], rcx
	mov	qword ptr [rsi - 16], 0
	mov	qword ptr [rsi - 8], 0
	mov	qword ptr [rsi - 24], 0
	mov	qword ptr [r11 + rax], rdx
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	rbx, r8
	cmp	rcx, 31
	jbe	.LBB5_377
.LBB5_28:                               # %OP9587.JUMPDEST
	lea	r9, [rbx - 2]
	mov	rax, r9
	shl	rax, 5
	mov	r15, qword ptr [r11 + rax]
	mov	r13, qword ptr [r12 + 40]
	mov	rcx, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rcx, r12
	mov	rsi, r15
	add	rsi, 32
	mov	rdx, -1
	cmovb	rsi, rdx
	xor	edi, edi
	cmp	rdi, qword ptr [r11 + rax + 8]
	mov	r8d, 0
	sbb	r8, qword ptr [r11 + rax + 16]
	sbb	rdi, qword ptr [r11 + rax + 24]
	cmovb	rsi, rdx
	lea	r10, [rbx - 1]
	lea	r14, [r11 + rax]
	cmp	rsi, rcx
	ja	.LBB5_1050
.LBB5_29:                               # %OP9589.MLOAD.contd
	add	r12, qword ptr [r13 + 8]
	mov	rax, qword ptr [r15 + r12 + 16]
	mov	rcx, qword ptr [r15 + r12 + 24]
	mov	rdx, qword ptr [r15 + r12]
	mov	rsi, qword ptr [r15 + r12 + 8]
	movbe	qword ptr [r14 + 16], rsi
	movbe	qword ptr [r14 + 24], rdx
	movbe	qword ptr [r14], rcx
	movbe	qword ptr [r14 + 8], rax
	or	rsi, rcx
	or	rdx, rax
	or	rdx, rsi
	je	.LBB5_621
# %bb.30:
	mov	r15, r9
.LBB5_31:                               # %OP6305.JUMPDEST
	add	r15, -4
	mov	rcx, r15
	shl	rcx, 5
	mov	rdi, qword ptr [r11 + rcx + 24]
	mov	r13, qword ptr [r11 + rcx + 16]
	mov	rsi, qword ptr [r11 + rcx]
	mov	rcx, qword ptr [r11 + rcx + 8]
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rdx + 312]
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_318:                              # %OP8621.RETURNDATASIZE
	mov	rbx, rdx
	add	r11, rax
	mov	rax, qword ptr [r12 + 24]
	vmovdqu	xmmword ptr [r11 + 8], xmm0
	mov	qword ptr [r11], rax
	mov	qword ptr [r11 + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11 + 64], ymm0
	mov	rdi, r12
	mov	rsi, r11
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_returndatacopy@PLT
	test	al, al
	jne	.LBB5_321
# %bb.319:                              # %OP8625.RETURNDATASIZE
	mov	rax, qword ptr [r12 + 24]
	mov	qword ptr [r14], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 8], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + 40], xmm0
	mov	qword ptr [r14 + 56], 0
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_322
.LBB5_320:                              # %select.end57345
	mov	rdx, rbx
	jmp	.LBB5_2884
.LBB5_41:
	mov	r15d, 1
.LBB5_42:                               # %OP11.JUMPDEST
	mov	qword ptr [rbp - 216], r13      # 8-byte Spill
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	lea	r12, [r15 - 1]
	mov	rax, r12
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	rcx, qword ptr [r8 + 80]
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	xor	eax, eax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 + 8], xmm0
	mov	qword ptr [r11 + r15], rcx
	mov	qword ptr [r11 + r15 + 24], 0
	vmovdqu	xmmword ptr [r11 + r15 - 24], xmm0
	mov	qword ptr [r11 + r15 - 8], 0
	cmp	rcx, 4
	setb	al
	mov	qword ptr [r11 + r15 - 32], rax
	jb	.LBB5_1225
# %bb.43:                               # %OP18.PUSH1
	mov	rax, rcx
	add	r12, r11
	add	r15, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r13, r8
	mov	r9, qword ptr [r8 + 72]
	sub	rsp, 8
	xor	ebx, ebx
	lea	rdi, [rbp - 2512]
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r14, rax
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rcx, qword ptr [rbp - 2488]
	mov	rax, qword ptr [rbp - 2496]
	mov	rdx, qword ptr [rbp - 2512]
	mov	rsi, qword ptr [rbp - 2504]
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	rax, rcx
	shr	rax, 32
	mov	qword ptr [r15 - 32], rax
	mov	qword ptr [r15 - 16], 0
	mov	qword ptr [r15 - 8], 0
	mov	qword ptr [r15 - 24], 0
	mov	edx, 2220280665
	mov	qword ptr [r15 + 32], rdx
	mov	qword ptr [r15 + 48], 0
	mov	qword ptr [r15 + 56], 0
	mov	qword ptr [r15 + 40], 0
	movabs	rdx, -8910711229593419776
	xor	esi, esi
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	cmp	rcx, rdx
	setb	sil
	mov	qword ptr [r15], rsi
	jae	.LBB5_128
# %bb.44:
	xor	ecx, ecx
	xor	edx, edx
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_45:                               # %OP225.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm0
	mov	qword ptr [r11 + rsi + 56], 0
	cmp	rax, 950415747
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_11] # ymm1 = [0,0,0,950415747]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm1
	mov	qword ptr [r11 + rsi], rdi
	jae	.LBB5_97
.LBB5_46:                               # %OP327.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm0
	mov	qword ptr [r11 + rsi + 56], 0
	cmp	rax, 801644041
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_17] # ymm1 = [0,0,0,801644041]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm1
	mov	qword ptr [r11 + rsi], rdi
	jae	.LBB5_87
.LBB5_47:                               # %OP378.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm1
	mov	qword ptr [r11 + rsi + 56], 0
	cmp	rax, 445207142
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_22] # ymm0 = [0,0,0,445207142]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm0
	mov	qword ptr [r11 + rsi], rdi
	jae	.LBB5_67
.LBB5_48:                               # %OP401.JUMPDEST
	or	rbx, rdx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rdx + 40], xmm0
	mov	qword ptr [r11 + rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 117300739
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_25] # ymm1 = [0,0,0,117300739]
	vmovdqu	ymmword ptr [r11 + rdx + 8], ymm1
	mov	qword ptr [r11 + rdx], rdi
	jne	.LBB5_103
.LBB5_49:                               # %OP421.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_28] # xmm0 = [890,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
.LBB5_50:                               # %OP2731.JUMPDEST
	mov	rbx, r15
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r14, [r15 + 2]
	lea	rsi, [r11 + rbx]
	add	rsi, 32
	vmovdqu	ymmword ptr [r11 + rbx + 32], ymm0
	mov	rdi, r12
	mov	edx, 17
	mov	r13, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.51:                               # %OP2735.PUSH1
	add	rbx, r13
	shl	r14, 5
	lea	rax, [r14 + r13]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	lea	r9, [r15 + 4]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, r15
	mov	r15, qword ptr [r12 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	mov	ecx, 64
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	xor	ecx, ecx
	mov	qword ptr [rbp - 112], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	mov	ecx, 0
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	mov	ecx, 0
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	cmp	rax, 95
	mov	rcx, r13
	jbe	.LBB5_1045
.LBB5_52:                               # %OP2737.MLOAD.contd
	mov	rax, qword ptr [r15 + 8]
	mov	r8, qword ptr [rax + r14 + 88]
	mov	qword ptr [rbp - 168], r8       # 8-byte Spill
	mov	rsi, qword ptr [rax + r14 + 80]
	mov	qword ptr [rbp - 152], rsi      # 8-byte Spill
	mov	r10, qword ptr [rax + r14 + 64]
	mov	rax, qword ptr [rax + r14 + 72]
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	movbe	qword ptr [rbx + 120], r10
	movbe	qword ptr [rbx + 104], rsi
	movbe	qword ptr [rbx + 96], r8
	movbe	qword ptr [rbx + 112], rax
	mov	qword ptr [rbp - 200], r9       # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [rcx + r9 + 24], 0
	mov	qword ptr [rcx + r9 + 8], 0
	mov	qword ptr [rcx + r9 + 16], 0
	mov	qword ptr [rcx + r9], 32
	mov	qword ptr [rbp - 192], rdx      # 8-byte Spill
	lea	r8, [rdx + 6]
	mov	qword ptr [rbx + 184], 0
	mov	qword ptr [rbx + 168], 0
	mov	qword ptr [rbx + 176], 0
	mov	qword ptr [rbx + 160], 2
	mov	qword ptr [rbp - 176], r8       # 8-byte Spill
	shl	r8, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [rcx + r8], ymm0
	mov	r15, qword ptr [rbx + 32]
	mov	r12, qword ptr [rbx + 40]
	mov	r14, qword ptr [rbx + 48]
	mov	rsi, qword ptr [rbx + 56]
	mov	qword ptr [rbx + 248], rsi
	mov	qword ptr [rbx + 240], r14
	mov	qword ptr [rbx + 232], r12
	mov	qword ptr [rbx + 224], r15
	mov	r11d, r15d
	and	r11d, 1
	mov	rax, r11
	xor	rax, 1
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r8], rax
	vpxor	xmm0, xmm0, xmm0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	xmmword ptr [rax + r8 + 8], xmm0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r8 + 24], 0
	vmovaps	xmm1, xmmword ptr [rip + .LCPI5_30] # xmm1 = [256,0]
	vmovups	ymmword ptr [rbx + 224], ymm1
	shl	r11d, 8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqa	xmmword ptr [rax + r8 + 16], xmm0
	xor	r11, 256
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r8], r11
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r8 + 8], 0
	vpcmpeqd	ymm0, ymm0, ymm0
	vmovdqu	ymmword ptr [rbx + 224], ymm0
	xor	eax, eax
	mov	qword ptr [rbp - 160], rax      # 8-byte Spill
	add	r11, -1
	mov	r13d, 0
	adc	r13, -1
	mov	edi, 0
	adc	rdi, -1
	mov	eax, 0
	adc	rax, -1
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8], r11
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8 + 16], rdi
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8 + 8], r13
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8 + 24], rax
	mov	qword ptr [rbx + 176], rdi
	mov	qword ptr [rbx + 160], r11
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovups	ymmword ptr [rcx + r8], ymm0
	vmovups	ymmword ptr [rbx + 32], ymm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8 + 8], r12
	and	r13, r12
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8], r15
	and	r11, r15
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8 + 16], r14
	and	rdi, r14
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r8 + 24], rsi
	and	rax, rsi
	mov	qword ptr [rbx + 56], rax
	mov	qword ptr [rbx + 48], rdi
	mov	qword ptr [rbx + 32], r11
	mov	qword ptr [rbx + 40], r13
	vmovups	ymmword ptr [rbx + 160], ymm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovups	ymmword ptr [rcx + r9], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	mov	qword ptr [rbx + 168], r13
	mov	qword ptr [rbx + 176], rdi
	mov	qword ptr [rbx + 160], r11
	mov	rcx, rax
	shld	rcx, rdi, 63
	shrd	r11, r13, 1
	shld	rdi, r13, 63
	mov	qword ptr [rbx + 184], rax
	shr	rax
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	qword ptr [rsi + r9 + 24], rax
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r9 + 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r9], r11
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r9 + 16], rcx
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_33] # xmm1 = [31,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm1
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8 + 24], rax
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8 + 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8 + 16], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8], r11
	mov	r15, r11
	add	r15, 31
	mov	rdx, rdi
	adc	rdx, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r12, rax
	adc	r12, 0
	mov	qword ptr [rbx + 184], r12
	mov	qword ptr [rbx + 176], r14
	mov	qword ptr [rbx + 160], r15
	mov	qword ptr [rbx + 168], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rsi + r8], ymm0
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8 + 24], r12
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8 + 8], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8 + 16], r14
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8], r15
	mov	r13, r12
	shr	r13, 5
	mov	qword ptr [rbx + 184], r13
	mov	r13, r14
	shld	r13, rdx, 59
	mov	qword ptr [rbx + 168], r13
	mov	r13, rdx
	shld	r13, r15, 59
	mov	qword ptr [rbx + 160], r13
	mov	r13, r12
	shld	r13, r14, 59
	mov	qword ptr [rbx + 176], r13
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rsi + r8], ymm0
	and	r15, -32
	mov	qword ptr [rbx + 184], r12
	mov	qword ptr [rbx + 168], rdx
	mov	qword ptr [rbx + 176], r14
	mov	qword ptr [rbx + 160], r15
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	movbe	qword ptr [rsi + r8 + 24], r10
	mov	rsi, r10
	bswap	rsi
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r10, qword ptr [rbp - 168]      # 8-byte Reload
	movbe	qword ptr [r9 + r8], r10
	bswap	r10
	add	r15, r10
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r10, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r9 + r8 + 8], r10
	mov	r9, r10
	bswap	r9
	adc	rdx, r9
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r10, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r9 + r8 + 16], r10
	mov	r9, r10
	bswap	r9
	adc	r14, r9
	adc	r12, rsi
	mov	qword ptr [rbx + 168], rdx
	mov	qword ptr [rbx + 160], r15
	mov	qword ptr [rbx + 184], r12
	mov	qword ptr [rbx + 176], r14
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rsi + r8], ymm0
	add	r15, 32
	adc	rdx, 0
	adc	r14, 0
	adc	r12, 0
	mov	qword ptr [rbx + 176], r14
	mov	qword ptr [rbx + 160], r15
	mov	qword ptr [rbx + 184], r12
	mov	qword ptr [rbx + 168], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	qword ptr [rsi + r9 + 16], r14
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r9], r15
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r9 + 24], r12
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	mov	qword ptr [rsi + r9 + 8], rdx
	mov	qword ptr [rbx + 80], rcx
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rdi
	mov	qword ptr [rbx + 64], r11
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rbx + 168], rcx
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	qword ptr [rbx + 160], r9
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbx + 184], r11
	mov	rdx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbx + 176], rdx
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rax, qword ptr [r10 + 16]
	mov	r13, qword ptr [r10 + 48]
	sub	rax, r13
	mov	rsi, r9
	add	rsi, 32
	mov	rdi, -1
	cmovb	rsi, rdi
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rdx
	sbb	qword ptr [rbp - 160], r11      # 8-byte Folded Spill
	mov	r11, -1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rdi, [rdx + rcx]
	lea	rcx, [rdx + r8]
	mov	qword ptr [rbp - 184], rcx      # 8-byte Spill
	cmovb	rsi, r11
	cmp	rsi, rax
	mov	rcx, r9
	mov	rdx, r10
	ja	.LBB5_1047
.LBB5_53:                               # %OP2770.DUP2
	add	r13, qword ptr [rdx + 8]
	movbe	qword ptr [rcx + r13 + 24], r15
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [rcx + r13 + 16], rax
	movbe	qword ptr [rcx + r13 + 8], r14
	movbe	qword ptr [rcx + r13], r12
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r9, qword ptr [rax + 16]
	mov	rcx, qword ptr [rax]
	mov	rdx, qword ptr [rax + 8]
	mov	r10, qword ptr [rax + 24]
	mov	qword ptr [rdi + 24], r10
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [rdi + 8], rdx
	mov	qword ptr [rdi + 16], r9
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [rdi], rcx
	mov	rax, qword ptr [rbx + 104]
	mov	rcx, qword ptr [rbx + 120]
	mov	r14, qword ptr [rbx + 96]
	mov	rdx, qword ptr [rbx + 112]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], r14
	mov	qword ptr [rbx + 168], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rsi + 40]
	mov	r13, rdi
	mov	rdi, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rdi, r15
	mov	rsi, r14
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r11
	cmp	rsi, rdi
	ja	.LBB5_1048
.LBB5_54:                               # %OP2773.SWAP3
	add	r15, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	movbe	qword ptr [r14 + r15 + 8], r9
	movbe	qword ptr [r14 + r15], r10
	mov	r10, qword ptr [rbx + 96]
	mov	r8, qword ptr [rbx + 112]
	mov	r9, qword ptr [rbx + 104]
	mov	rsi, qword ptr [rbx + 120]
	mov	rdx, qword ptr [rbx + 16]
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx], r10
	mov	r11, qword ptr [rbx + 48]
	mov	r14, qword ptr [rbx + 40]
	mov	r15, qword ptr [rbx + 56]
	mov	qword ptr [rbx + 56], rdi
	mov	qword ptr [rbx + 40], rcx
	mov	qword ptr [rbx + 48], rdx
	mov	r12, qword ptr [rbx + 32]
	mov	qword ptr [rbx + 32], rax
	mov	qword ptr [rbx + 120], r15
	mov	qword ptr [rbx + 104], r14
	mov	qword ptr [rbx + 112], r11
	mov	qword ptr [rbx + 96], r12
	mov	qword ptr [r13], r10
	add	r12, r10
	mov	qword ptr [r13 + 8], r9
	adc	r14, r9
	mov	qword ptr [r13 + 16], r8
	adc	r11, r8
	mov	qword ptr [r13 + 24], rsi
	adc	r15, rsi
	mov	qword ptr [rbx + 104], r14
	mov	qword ptr [rbx + 96], r12
	mov	qword ptr [rbx + 112], r11
	mov	qword ptr [rbx + 120], r15
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13], rax
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r10, qword ptr [rsi]
	mov	r9, qword ptr [rsi + 8]
	mov	r8, qword ptr [rsi + 16]
	mov	rsi, qword ptr [rsi + 24]
	mov	r11, r9
	or	r11, rsi
	mov	r14, r10
	or	r14, r8
	xor	r15d, r15d
	or	r14, r11
	mov	qword ptr [rbx + 184], rsi
	mov	qword ptr [rbx + 176], r8
	mov	qword ptr [rbx + 168], r9
	mov	qword ptr [rbx + 160], r10
	sete	r15b
	mov	r11, qword ptr [rbp - 184]      # 8-byte Reload
	mov	qword ptr [r11], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + 8], xmm0
	mov	qword ptr [r11 + 24], 0
	je	.LBB5_442
# %bb.55:                               # %OP2783.DUP1
	mov	r15, r11
	mov	qword ptr [r11], r10
	mov	qword ptr [r11 + 16], r8
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r11 + 24], rsi
	mov	qword ptr [rbx + 240], 0
	mov	qword ptr [rbx + 224], 31
	mov	qword ptr [rbx + 248], 0
	mov	qword ptr [rbx + 232], 0
	xor	r11d, r11d
	mov	r14d, 31
	cmp	r14, r10
	mov	r10d, 0
	sbb	r10, r9
	mov	r9d, 0
	sbb	r9, r8
	sbb	r11, rsi
	setb	sil
	movzx	esi, sil
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jae	.LBB5_143
.LBB5_56:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_57:                               # %OP2802.JUMPDEST
	mov	rsi, qword ptr [rbp - 176]      # 8-byte Reload
	mov	rax, rsi
	shl	rax, 5
	lea	rbx, [r11 + rax]
	mov	rdi, qword ptr [r11 + rax - 80]
	mov	rdx, qword ptr [r11 + rax - 96]
	mov	rcx, qword ptr [r11 + rax - 88]
	dec	rsi
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	shl	rsi, 5
	mov	r8, qword ptr [r11 + rsi]
	add	r8, rdx
	mov	r9, qword ptr [r11 + rsi + 8]
	adc	r9, rcx
	mov	r10, qword ptr [r11 + rsi + 16]
	adc	r10, rdi
	mov	r14, r11
	mov	r11, qword ptr [r11 + rsi + 24]
	mov	qword ptr [r14 + rax - 80], r10
	mov	r10, qword ptr [r14 + rax - 72]
	lea	rsi, [r14 + rsi]
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	adc	r11, r10
	mov	qword ptr [r14 + rax - 96], r8
	lea	rsi, [r14 + rax]
	add	rsi, -32
	mov	qword ptr [r14 + rax - 72], r11
	mov	qword ptr [r14 + rax - 88], r9
	mov	r8, qword ptr [r14 + rax - 56]
	mov	r9, qword ptr [r14 + rax - 48]
	mov	qword ptr [r14 + rax - 48], rdi
	mov	r15, qword ptr [r14 + rax - 64]
	mov	qword ptr [r14 + rax - 64], rdx
	mov	rdx, qword ptr [r14 + rax - 40]
	mov	qword ptr [r14 + rax - 40], r10
	mov	qword ptr [r14 + rax - 56], rcx
	mov	qword ptr [r14 + rax - 16], r9
	mov	qword ptr [r14 + rax - 32], r15
	mov	qword ptr [r14 + rax - 8], rdx
	mov	qword ptr [r14 + rax - 24], r8
	mov	qword ptr [r14 + rax + 16], 0
	mov	qword ptr [r14 + rax], 0
	mov	qword ptr [r14 + rax + 24], 0
	mov	qword ptr [r14 + rax + 8], 0
	mov	r13, qword ptr [r12 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r14, r12
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	cmp	rax, 31
	jbe	.LBB5_1243
.LBB5_58:                               # %OP2809.PUSH1
	mov	rax, qword ptr [r13 + 8]
	movbe	qword ptr [rax + r12 + 24], r15
	movbe	qword ptr [rax + r12 + 16], r8
	movbe	qword ptr [rax + r12 + 8], r9
	movbe	qword ptr [rax + r12], rdx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_66
# %bb.59:                               # %OP2812.SWAP1
	mov	r12, r14
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 16]
	vmovdqa	xmm0, xmmword ptr [rbx - 64]
	vmovdqa	xmm1, xmmword ptr [rbx - 48]
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 40], rax
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 56], rdx
	vmovdqa	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_60:                               # %OP2813.JUMPDEST.preheader
	mov	rbx, qword ptr [rbp - 176]      # 8-byte Reload
	lea	r15, [rbx + 1]
	shl	rbx, 5
	add	rbx, r11
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	shl	r15, 5
	add	r15, r11
	.p2align	4, 0x90
.LBB5_61:                               # %OP2813.JUMPDEST
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_142
# %bb.62:                               # %OP2816.DUP2
                                        #   in Loop: Header=BB5_61 Depth=1
	mov	rax, qword ptr [rbx - 16]
	mov	r13, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 8]
	mov	qword ptr [r15 + 24], rdx
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r13
	mov	r9, qword ptr [rbx + 8]
	mov	r14, qword ptr [r12 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rdi, r12
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	mov	rcx, qword ptr [rbx + 24]
	mov	eax, 0
	sbb	rax, rdx
	mov	r10, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_65
.LBB5_63:                               # %OP2818.SWAP1
                                        #   in Loop: Header=BB5_61 Depth=1
	add	r12, qword ptr [r14 + 8]
	movbe	qword ptr [r13 + r12 + 24], r10
	movbe	qword ptr [r13 + r12 + 16], r9
	movbe	qword ptr [r13 + r12 + 8], rdx
	movbe	qword ptr [r13 + r12], rcx
	mov	r9, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 16]
	mov	r11, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 40]
	mov	rcx, qword ptr [rbx - 48]
	mov	rdx, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 64]
	add	rsi, 1
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 40], rax
	mov	r10, rdi
	add	r10, 32
	adc	r11, 0
	adc	r13, 0
	adc	r9, 0
	mov	qword ptr [rbx - 32], r10
	mov	qword ptr [rbx - 16], r13
	mov	qword ptr [rbx - 24], r11
	mov	qword ptr [rbx - 8], r9
	mov	r8, qword ptr [rbx - 96]
	cmp	r10, r8
	mov	r10, qword ptr [rbx - 88]
	sbb	r11, r10
	mov	r11, qword ptr [rbx - 80]
	sbb	r13, r11
	mov	r13, qword ptr [rbx - 72]
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 24], r13
	mov	qword ptr [r15 + 8], r10
	sbb	r9, r13
	setb	r9b
	movzx	r9d, r9b
	mov	qword ptr [rbx], r9
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jb	.LBB5_61
	jmp	.LBB5_64
.LBB5_65:                               # %resize.i49783
                                        #   in Loop: Header=BB5_61 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB5_63
	jmp	.LBB5_66
.LBB5_67:                               # %OP384.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdi, rax
	xor	rdi, 445207142
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_149
.LBB5_68:                               # %OP590.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, rsi
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	add	rsi, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, rsi
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	jae	.LBB5_749
.LBB5_69:                               # %OP605.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3984]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3968]
	mov	rcx, qword ptr [rbp - 3984]
	mov	rdx, qword ptr [rbp - 3976]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_70:                               # %OP2909.JUMPDEST
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [r15 + 1]
	mov	rax, r15
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.71:                               # %OP2912.PUSH20
	lea	r10, [r15 + 2]
	mov	r12, r13
	shl	r12, 5
	mov	eax, dword ptr [rbx + 16]
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	movbe	rsi, qword ptr [rsi + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	rcx, qword ptr [rbx + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r12 + 8], rdi
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	jne	.LBB5_759
# %bb.72:
	mov	r11, r14
	mov	rax, r15
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_73:                               # %OP2956.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_192] # xmm0 = [5107,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	xor	eax, eax
.LBB5_74:                               # %OP9175.JUMPDEST.sink.split
	xor	ecx, ecx
.LBB5_75:                               # %OP9175.JUMPDEST.sink.split
	xor	edx, edx
	mov	rsi, r10
	shl	rsi, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_179] # xmm0 = [15693,0,0,0]
	vmovups	ymmword ptr [r11 + rsi], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rsi - 32]
	vmovdqu	ymmword ptr [r11 + rsi + 32], ymm0
	add	r10, 3
	mov	qword ptr [r11 + rsi + 72], rcx
	mov	qword ptr [r11 + rsi + 64], rax
	mov	qword ptr [r11 + rsi + 80], rcx
	mov	qword ptr [r11 + rsi + 88], rdx
.LBB5_76:                               # %OP9175.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 32]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 16]
	mov	rdi, qword ptr [r11 + rax - 8]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	or	rdx, rdi
	or	rcx, rsi
	or	rcx, rdx
	je	.LBB5_317
.LBB5_77:                               # %OP9186.JUMPDEST
	lea	rax, [r10 + 1]
	shl	r10, 5
	lea	rbx, [r11 + r10]
	mov	ecx, dword ptr [r11 + r10 - 48]
	mov	rsi, qword ptr [r11 + r10 - 64]
	mov	r14, qword ptr [r11 + r10 - 56]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r10], ymm0
	mov	qword ptr [r11 + rax + 8], r14
	mov	qword ptr [r11 + rax + 16], rcx
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 24], 0
	vmovdqu	ymmword ptr [r11 + r10 + 64], ymm0
	lea	rdx, [r11 + rax]
	mov	r13, r12
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rax, r15
	cmp	rax, 31
	jbe	.LBB5_1065
.LBB5_78:                               # %OP9194.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r15 + 24], rsi
	movbe	qword ptr [rax + r15 + 16], r14
	movbe	qword ptr [rax + r15 + 8], rcx
	mov	qword ptr [rax + r15], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_83] # xmm0 = [9,0,0,0]
	vmovups	ymmword ptr [rdx], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx + 64], ymm0
	mov	r14, qword ptr [r13 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	r12, rdx
	jbe	.LBB5_1066
.LBB5_79:                               # %OP9197.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_84] # ymm0 = [0,0,0,648518346341351424]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_0] # xmm1 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, r13
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB5_1054
# %bb.80:                               # %OP9200.SLOAD
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1054
# %bb.81:                               # %OP9201.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_3] # ymm0 = [0,0,0,9223372036854775808]
	vmovdqu	ymmword ptr [r12], ymm0
	or	byte ptr [rbx + 31], -128
	mov	rax, r14
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_82:                               # %OP9203.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [r11 + rax - 16]
	vmovaps	xmm1, xmmword ptr [r11 + rax - 32]
	mov	rcx, qword ptr [r11 + rax - 96]
	mov	rdx, qword ptr [r11 + rax - 88]
	vmovaps	xmmword ptr [r11 + rax - 96], xmm1
	mov	r15d, dword ptr [r11 + rax - 80]
	vmovaps	xmmword ptr [r11 + rax - 80], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r11 + rax - 32], ymm0
	lea	rsi, [r11 + rax - 32]
	vmovups	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	mov	qword ptr [r11 + rax + 16], r15
	mov	qword ptr [r11 + rax + 56], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rax, r13
	cmp	rax, 31
	jbe	.LBB5_1062
.LBB5_83:                               # %OP9212.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + r13 + 24], rcx
	movbe	qword ptr [rax + r13 + 16], rdx
	movbe	qword ptr [rax + r13 + 8], r15
	mov	qword ptr [rax + r13], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_83] # xmm0 = [9,0,0,0]
	vmovups	ymmword ptr [rbx], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx + 32], ymm0
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	jbe	.LBB5_1063
.LBB5_84:                               # %OP9215.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_84] # ymm0 = [0,0,0,648518346341351424]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovaps	xmm0, xmmword ptr [rbx - 32]
	vmovaps	xmm1, xmmword ptr [rbx - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [rbx - 32], ymm2
	vmovaps	xmmword ptr [rbx + 16], xmm1
	vmovaps	xmmword ptr [rbx], xmm0
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_142
# %bb.85:                               # %OP9218.SWAP2
	lea	rsi, [rbx - 64]
	vmovdqa	xmm0, xmmword ptr [rbx - 96]
	vmovdqa	xmm1, xmmword ptr [rbx - 80]
	vmovaps	xmm2, xmmword ptr [rbx - 64]
	vmovaps	xmm3, xmmword ptr [rbx - 48]
	vmovdqa	xmmword ptr [rbx - 48], xmm1
	vmovdqa	xmmword ptr [rbx - 64], xmm0
	vmovaps	xmmword ptr [rbx - 80], xmm3
	vmovaps	xmmword ptr [rbx - 96], xmm2
	mov	rdi, r12
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1064
# %bb.86:                               # %OP9222.POP
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, -4
	mov	rcx, rax
	shl	rcx, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_2690
.LBB5_87:                               # %OP333.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	cmp	rax, 826074471
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_18] # ymm0 = [0,0,0,826074471]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jae	.LBB5_158
.LBB5_88:                               # %OP360.JUMPDEST
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	or	rbx, rdx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rdx + 40], xmm0
	mov	qword ptr [r11 + rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 801644041
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_17] # ymm1 = [0,0,0,801644041]
	vmovdqu	ymmword ptr [r11 + rdx + 8], ymm1
	mov	qword ptr [r11 + rdx], rdi
	jne	.LBB5_192
# %bb.89:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_90:                               # %OP672.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r15 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_91:                               # %OP687.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r15 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3888]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3872]
	mov	rcx, qword ptr [rbp - 3888]
	mov	rdx, qword ptr [rbp - 3880]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_92:                               # %OP3417.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 1]
	mov	r13, rax
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_103] # xmm0 = [18,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_371
# %bb.93:                               # %OP3420.PUSH1
	shl	r14, 5
	movzx	eax, byte ptr [rbx]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	cmp	al, 1
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r15
	jne	.LBB5_768
# %bb.94:
	mov	r10, r13
.LBB5_95:                               # %OP3429.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_205] # xmm0 = [6256,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	r10, 3
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	rcx, qword ptr [rsi + 136]
	mov	edx, dword ptr [rsi + 144]
	bswap	rdx
	shrd	rdx, rcx, 32
	movbe	rsi, qword ptr [rsi + 128]
.LBB5_96:                               # %OP7746.JUMPDEST
	shrd	rcx, rsi, 32
	shr	rsi, 32
	mov	qword ptr [r11 + rax + 80], rsi
	mov	qword ptr [r11 + rax + 72], rcx
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 88], 0
	jmp	.LBB5_2817
.LBB5_97:                               # %OP231.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	cmp	rax, 1425886544
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_12] # ymm0 = [0,0,0,1425886544]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jae	.LBB5_162
.LBB5_98:                               # %OP281.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm1
	mov	qword ptr [r11 + rsi + 56], 0
	cmp	rax, 1086394137
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_206] # ymm0 = [0,0,0,1086394137]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm0
	mov	qword ptr [r11 + rsi], rdi
	jae	.LBB5_211
.LBB5_99:                               # %OP309.JUMPDEST
	or	rbx, rdx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rdx + 40], xmm0
	mov	qword ptr [r11 + rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 950415747
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_11] # ymm1 = [0,0,0,950415747]
	vmovdqu	ymmword ptr [r11 + rdx + 8], ymm1
	mov	qword ptr [r11 + rdx], rdi
	jne	.LBB5_323
.LBB5_100:                              # %OP1137.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_186] # xmm0 = [1921,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
.LBB5_101:                              # %OP3933.JUMPDEST
	lea	r15, [r14 + 1]
	mov	rax, r14
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_190] # xmm0 = [14,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r13, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	je	.LBB5_384
	jmp	.LBB5_102
.LBB5_103:                              # %OP407.DUP1
	add	rdx, r11
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 157198259
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_26] # ymm0 = [0,0,0,157198259]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_170
.LBB5_104:                              # %OP525.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rcx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rcx, 3
	mov	r14, qword ptr [rsi + 80]
	mov	rbx, rcx
	mov	rsi, rcx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	jae	.LBB5_750
# %bb.105:
	mov	r10, r14
.LBB5_106:                              # %OP540.JUMPDEST
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3952]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3936]
	mov	rcx, qword ptr [rbp - 3952]
	mov	rdx, qword ptr [rbp - 3944]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], 32
	add	rbx, 32
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 1840]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1840]
	mov	rcx, qword ptr [rbp - 1832]
	mov	rdx, qword ptr [rbp - 1816]
	mov	rsi, qword ptr [rbp - 1824]
	mov	qword ptr [r11 + r15 - 16], rsi
	mov	qword ptr [r11 + r15 - 8], rdx
	mov	qword ptr [r11 + r15 - 32], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_107:                              # %OP2845.JUMPDEST
	lea	r13, [rax + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3093
# %bb.108:                              # %OP2848.PUSH1
	mov	r14, r13
	shl	r14, 5
	movzx	eax, byte ptr [rbx + 20]
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [rbx], xmm0
	vmovaps	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	xor	ecx, ecx
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r15 + r14], rcx
	mov	r11, r15
	jne	.LBB5_752
# %bb.109:
	mov	rax, r13
.LBB5_110:                              # %OP2889.JUMPDEST
	mov	rcx, rax
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_194] # xmm0 = [4971,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	edx, dword ptr [rdi + 164]
	movbe	rsi, qword ptr [rdi + 156]
	bswap	rdx
	shrd	rdx, rsi, 32
	movbe	rdi, qword ptr [rdi + 148]
	shrd	rsi, rdi, 32
	shr	rdi, 32
	mov	qword ptr [r11 + rcx + 40], rsi
	mov	qword ptr [r11 + rcx + 48], rdi
	mov	qword ptr [r11 + rcx + 32], rdx
	mov	qword ptr [r11 + rcx + 56], 0
	mov	rdx, qword ptr [r11 + rcx - 96]
	mov	rsi, qword ptr [r11 + rcx - 88]
	mov	rdi, qword ptr [r11 + rcx - 72]
	mov	r8, qword ptr [r11 + rcx - 80]
	mov	qword ptr [r11 + rcx + 80], r8
	mov	qword ptr [r11 + rcx + 88], rdi
	mov	qword ptr [r11 + rcx + 64], rdx
	mov	qword ptr [r11 + rcx + 72], rsi
	add	rcx, r11
	add	rcx, -64
.LBB5_111:                              # %OP7342.JUMPDEST.sink.split
	mov	rdx, rax
	shl	rdx, 5
	add	rax, 4
	mov	rsi, qword ptr [rcx]
	mov	rdi, qword ptr [rcx + 8]
	mov	r8, qword ptr [rcx + 24]
	mov	rcx, qword ptr [rcx + 16]
	mov	qword ptr [r11 + rdx + 112], rcx
	mov	qword ptr [r11 + rdx + 120], r8
	mov	qword ptr [r11 + rdx + 96], rsi
	mov	qword ptr [r11 + rdx + 104], rdi
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
.LBB5_112:                              # %OP7342.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 1]
	mov	rbx, rax
	shl	rbx, 5
	lea	r8, [rax + 2]
	mov	rax, qword ptr [r11 + rbx - 72]
	mov	rcx, qword ptr [r11 + rbx - 96]
	mov	rdx, qword ptr [r11 + rbx - 88]
	mov	rsi, qword ptr [r11 + rbx - 80]
	mov	r15, r13
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15], rcx
	mov	qword ptr [r11 + r15 + 24], rax
	mov	qword ptr [r11 + r15 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_449
.LBB5_113:                              # %OP7386.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	rsi, qword ptr [r11 + rbx - 48]
	mov	r15, r13
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15], rcx
	mov	qword ptr [r11 + r15 + 24], rax
	mov	qword ptr [r11 + r15 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_457
.LBB5_114:                              # %OP7430.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r10
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	lea	r8, [r10 + 3]
	mov	edi, dword ptr [r11 + rax - 80]
	mov	r13, qword ptr [r11 + rax - 96]
	mov	r9, qword ptr [r11 + rax - 88]
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r11 + rax + 56], ymm0
	mov	qword ptr [r11 + rax + 40], r9
	mov	qword ptr [r11 + rax + 32], r13
	mov	qword ptr [r11 + rax + 48], rdi
	mov	qword ptr [r11 + rax + 88], 0
	lea	rsi, [r10 + 4]
	mov	rax, r8
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [r11 + rax + 8], r9
	mov	qword ptr [r11 + rax], r13
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax + 24], 0
	lea	rdx, [r10 + 5]
	mov	qword ptr [rbp - 168], rsi      # 8-byte Spill
	mov	rax, rsi
	shl	rax, 5
	vmovups	ymmword ptr [r11 + rax], ymm0
	lea	r12, [r11 + rax]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	cmp	rax, 31
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 152], rdx      # 8-byte Spill
	jbe	.LBB5_1034
.LBB5_115:                              # %OP7439.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], r13
	movbe	qword ptr [rax + r14 + 16], r9
	movbe	qword ptr [rax + r14 + 8], rdi
	mov	qword ptr [rax + r14], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_159] # xmm1 = [10,0]
	vmovdqu	ymmword ptr [r12], ymm1
	lea	rdi, [r10 + 6]
	mov	rax, rdx
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r8, [r11 + rax]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rax + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	jbe	.LBB5_1036
.LBB5_116:                              # %OP7444.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_195] # ymm0 = [0,0,0,720575940379279360]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	qword ptr [rbp - 96], r12       # 8-byte Spill
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [r8], ymm0
	mov	rax, qword ptr [rbx + 80]
	mov	rcx, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 72]
	mov	rsi, qword ptr [rbx + 88]
	mov	r13, rdi
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], rsi
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	qword ptr [r11 + r13 + 16], rax
	mov	qword ptr [r11 + r13], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r8
	mov	r14, r11
	mov	r12, r8
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1039
# %bb.117:                              # %OP7448.SWAP5
	add	r13, r14
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12 + 16]
	mov	r11, qword ptr [rbx - 48]
	and	r11, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	rsi, qword ptr [rbx - 64]
	mov	rdi, qword ptr [rbx - 56]
	and	rsi, qword ptr [rbx]
	mov	qword ptr [rbx], rcx
	mov	rcx, qword ptr [rbx - 40]
	and	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rax
	and	rdi, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r13 + 16], r11
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	qword ptr [r13], rsi
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	qword ptr [r13 + 8], rdi
	mov	r14, qword ptr [rbx + 64]
	mov	rax, qword ptr [rbx + 80]
	mov	rcx, qword ptr [rbx + 72]
	mov	rdx, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 232], rcx
	mov	qword ptr [rbx + 224], r14
	mov	qword ptr [rbx + 248], rdx
	mov	qword ptr [rbx + 240], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	mov	r15, qword ptr [rsi + 48]
	sub	rdi, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r10
	cmp	rsi, rdi
	mov	r9, r12
	ja	.LBB5_1038
.LBB5_118:                              # %OP7454.SWAP5
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	movbe	qword ptr [r14 + r15 + 8], r11
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r14 + r15], rax
	mov	rax, qword ptr [r9 + 24]
	mov	rcx, qword ptr [r9 + 16]
	mov	rdx, qword ptr [r9]
	mov	rsi, qword ptr [r9 + 8]
	mov	r11, qword ptr [rbx + 24]
	mov	r12, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 16]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	mov	qword ptr [r9 + 16], r8
	mov	qword ptr [r9], r12
	mov	qword ptr [r9 + 24], r11
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	qword ptr [r9 + 8], rdi
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 16]
	mov	rcx, qword ptr [rdx + 8]
	mov	rdx, qword ptr [rdx + 24]
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13], r14
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	mov	qword ptr [r13 + 16], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13 + 48]
	sub	rdi, r15
	mov	rsi, r14
	add	rsi, 32
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r10
	cmp	rsi, rdi
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	ja	.LBB5_3029
.LBB5_119:                              # %OP7457.SWAP2
	add	r15, qword ptr [r13 + 8]
	movbe	qword ptr [r14 + r15 + 24], r12
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 8], rax
	movbe	qword ptr [r14 + r15], r11
	mov	r12, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rax, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12 + 24]
	vmovdqu	ymm0, ymmword ptr [rbx + 64]
	mov	qword ptr [rbx + 88], rsi
	mov	qword ptr [rbx + 72], rdx
	mov	qword ptr [rbx + 80], rax
	mov	qword ptr [rbx + 64], rcx
	vmovdqu	ymmword ptr [r9], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	mov	r14, r9
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.120:                              # %OP7461.DUP6
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 16]
	mov	rdi, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1037
# %bb.121:                              # %OP7464.DUP2
	mov	r14, qword ptr [rbx + 64]
	mov	rax, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], r14
	mov	qword ptr [r12 + 8], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rdi, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r9
	mov	r10, r15
	cmp	rsi, rdi
	ja	.LBB5_1040
.LBB5_122:                              # %OP7465.MLOAD.contd
	add	r13, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r14 + r13 + 24]
	mov	rdx, qword ptr [r14 + r13 + 16]
	mov	rax, qword ptr [r14 + r13]
	mov	rsi, qword ptr [r14 + r13 + 8]
	movbe	qword ptr [r12 + 24], rax
	movbe	qword ptr [r12 + 8], rdx
	movbe	qword ptr [r12 + 16], rsi
	movbe	qword ptr [r12], rcx
	mov	r8, qword ptr [rbx - 24]
	mov	r11, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 32]
	mov	r14, qword ptr [rbx - 16]
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rdi], r13
	mov	qword ptr [rbp - 120], r14      # 8-byte Spill
	mov	qword ptr [rdi + 16], r14
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	qword ptr [rdi + 8], r8
	mov	qword ptr [rdi + 24], r11
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	movbe	qword ptr [r8 + 16], rsi
	mov	rdi, rsi
	bswap	rdi
	movbe	qword ptr [r8 + 8], rdx
	bswap	rdx
	movbe	qword ptr [r8], rcx
	mov	r14, rcx
	bswap	r14
	movbe	qword ptr [r8 + 24], rax
	mov	rcx, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10 + 48]
	sub	rcx, r15
	mov	rsi, r14
	add	rsi, 32
	cmovb	rsi, r9
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rdi
	bswap	rax
	sbb	r8, rax
	cmovb	rsi, r9
	cmp	rsi, rcx
	ja	.LBB5_1042
.LBB5_123:                              # %OP7469.SWAP2
	add	r15, qword ptr [r10 + 8]
	movbe	qword ptr [r14 + r15 + 24], r13
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 8], rax
	movbe	qword ptr [r14 + r15], r11
	mov	rcx, qword ptr [r12 + 16]
	mov	r8, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12]
	mov	rdi, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbx + 80]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	r15, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 88]
	mov	qword ptr [rbx + 72], rdi
	mov	qword ptr [rbx + 88], r8
	mov	qword ptr [rbx + 64], rdx
	mov	qword ptr [rbx + 80], rcx
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r15
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rsi + 40]
	mov	r11, qword ptr [rax + 16]
	mov	r14, qword ptr [rax + 48]
	sub	r11, r14
	mov	rsi, r15
	add	rsi, 32
	mov	r13, -1
	cmovb	rsi, r13
	xor	r13d, r13d
	neg	r9
	mov	r9d, 0
	sbb	r9, qword ptr [rbp - 112]       # 8-byte Folded Reload
	sbb	r13, r10
	mov	r9, -1
	cmovb	rsi, r9
	cmp	rsi, r11
	mov	r9, r12
	ja	.LBB5_1043
.LBB5_124:                              # %OP7470.MLOAD.contd
	add	r14, qword ptr [rax + 8]
	mov	r13, qword ptr [r15 + r14 + 24]
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	mov	r12, qword ptr [r15 + r14 + 16]
	mov	qword ptr [rbp - 112], r12      # 8-byte Spill
	mov	rsi, qword ptr [r15 + r14]
	mov	r10, qword ptr [r15 + r14 + 8]
	mov	r11, rsi
	bswap	r11
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_196] # ymm0 = [6566260114167413029,15925595526334130462,15082398207468012787,10113925765812485467]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + 24], r8
	mov	qword ptr [rax + 8], rdi
	mov	qword ptr [rax + 16], rcx
	mov	qword ptr [rax], rdx
	mov	r14, r13
	bswap	r14
	sub	rdx, r14
	mov	r14, r12
	bswap	r14
	sbb	rdi, r14
	mov	r14, r10
	bswap	r14
	sbb	rcx, r14
	sbb	r8, r11
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r11, qword ptr [rax + 8]
	mov	r14, qword ptr [rax + 24]
	mov	r15, qword ptr [rax]
	mov	r13, qword ptr [rax + 16]
	mov	r12, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + 16], r13
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 24], r14
	mov	qword ptr [r12 + 8], r11
	add	rdx, r15
	adc	rdi, r11
	adc	rcx, r13
	adc	r8, r14
	mov	qword ptr [rax], rdx
	mov	qword ptr [rax + 16], rcx
	mov	qword ptr [rax + 8], rdi
	mov	qword ptr [rax + 24], r8
	movbe	qword ptr [r9 + 16], r10
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r9], rax
	movbe	qword ptr [r9 + 24], rsi
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r9 + 8], rax
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_1093
# %bb.125:                              # %OP7481.POP
	mov	r10, qword ptr [rbp - 144]      # 8-byte Reload
	add	r10, -4
.LBB5_126:                              # %dynamic_jump_table
	mov	rax, r10
	shl	rax, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [r11 + rax + 24]
	mov	r13, qword ptr [r11 + rax + 16]
	mov	rsi, qword ptr [r11 + rax]
	mov	rcx, qword ptr [r11 + rax + 8]
.LBB5_127:                              # %dynamic_jump_table
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	jmp	.LBB5_32
.LBB5_128:                              # %OP27.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + 40], xmm0
	mov	qword ptr [r15 + 56], 0
	movabs	rdx, -5208649806435581952
	xor	esi, esi
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_5] # ymm1 = [0,0,0,3082234009]
	vmovdqu	ymmword ptr [r15 + 8], ymm1
	cmp	rcx, rdx
	setb	sil
	mov	qword ptr [r15], rsi
	jae	.LBB5_174
# %bb.129:
	xor	ecx, ecx
	xor	edx, edx
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_130:                              # %OP128.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm0
	mov	qword ptr [r11 + rsi + 56], 0
	mov	rdi, rdx
	shld	rdi, rcx, 61
	mov	r8, rcx
	shld	r8, rbx, 61
	mov	r9, rbx
	shld	r9, rax, 61
	mov	r10, rdx
	shr	r10, 3
	cmp	r9, 337218893
	sbb	r8, 0
	sbb	rdi, 0
	sbb	r10, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_227] # ymm1 = [0,0,0,2697751144]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm1
	mov	qword ptr [r11 + rsi], rdi
	jae	.LBB5_302
.LBB5_131:                              # %OP179.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm1
	mov	qword ptr [r11 + rsi + 56], 0
	mov	edi, 2376452955
	cmp	rax, rdi
	mov	r8, rbx
	sbb	r8, 0
	mov	r8, rcx
	sbb	r8, 0
	mov	r8, rdx
	sbb	r8, 0
	setb	r8b
	movzx	r8d, r8b
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_238] # ymm0 = [0,0,0,2376452955]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm0
	mov	qword ptr [r11 + rsi], r8
	jae	.LBB5_381
.LBB5_132:                              # %OP207.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm0
	or	rbx, rdx
	mov	qword ptr [r11 + rsi + 56], 0
	mov	edx, 2220280665
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_244] # ymm1 = [0,0,0,2220280665]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm1
	mov	qword ptr [r11 + rsi], rdi
	jne	.LBB5_464
# %bb.133:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_134:                              # %OP1507.JUMPDEST
	lea	rcx, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
.LBB5_135:                              # %OP5412.JUMPDEST
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [r15 + 1]
	mov	rax, r15
	shl	rax, 5
	lea	rsi, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.136:                              # %OP5415.PUSH20
	lea	rax, [r15 + 2]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r12, rbx
	shl	r12, 5
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	eax, dword ptr [r8 + 16]
	mov	ecx, dword ptr [r13 + 164]
	movbe	rdx, qword ptr [r13 + 156]
	movbe	rsi, qword ptr [r13 + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [r8]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	rcx, qword ptr [r8 + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r12 + 8], rdi
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [r8], rax
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	qword ptr [r8 + 16], 0
	mov	rax, rbx
	jne	.LBB5_922
# %bb.137:
	mov	r11, r14
	mov	r12, r15
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
.LBB5_138:                              # %OP5459.JUMPDEST
	mov	rbx, r12
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	shl	rax, 5
	lea	r14, [r11 + rax]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.139:                              # %OP5463.PUSH32
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	shl	r13, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_217] # ymm0 = [18446744073709551615,18446744073709551615,18446742978492891135,18446744073709551615]
	vmovups	ymmword ptr [r15 + r13], ymm0
	add	rbx, r15
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	movabs	rdx, -1095216660481
	and	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 8]
	movabs	rdi, 4294967296
	mov	qword ptr [r15 + r13 + 16], rdi
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r15 + r13 + 8], 0
	or	rdx, rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rsi
	vmovups	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	vmovups	ymmword ptr [r14], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_142
# %bb.140:                              # %OP5469.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	add	r13, r15
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r12, r13
	mov	r13, qword ptr [r15 + 48]
	sub	rax, r13
	cmp	rax, 95
	jbe	.LBB5_1135
.LBB5_141:                              # %OP5470.MLOAD.contd
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [rax + r13 + 88]
	mov	rdx, qword ptr [rax + r13 + 80]
	mov	rsi, qword ptr [rax + r13 + 64]
	mov	rax, qword ptr [rax + r13 + 72]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_248] # ymm0 = [4327745473675785765,8140585336617268899,7350669690654874382,7603659614053296358]
	vmovdqu	ymmword ptr [rbx], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14], ymm0
	movbe	qword ptr [r12 + 24], rsi
	movbe	qword ptr [r12 + 8], rdx
	movbe	qword ptr [r12 + 16], rax
	movbe	qword ptr [r12], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 1
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	je	.LBB5_488
	jmp	.LBB5_142
.LBB5_64:                               # %OP2829.DUP3
	sub	edi, r8d
	and	edi, 31
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx + 24], r13
	add	rdi, r8
	mov	rax, r10
	adc	rax, 0
	mov	rcx, r11
	adc	rcx, 0
	mov	rdx, r13
	adc	rdx, 0
	mov	qword ptr [rbx - 96], rdi
	mov	qword ptr [rbx - 88], rax
	mov	qword ptr [rbx - 80], rcx
	mov	qword ptr [rbx - 72], rdx
	mov	qword ptr [rbx - 32], r8
	mov	qword ptr [rbx - 24], r10
	mov	qword ptr [rbx - 16], r11
	mov	qword ptr [rbx - 8], r13
	jmp	.LBB5_443
.LBB5_143:                              # %OP2788.PUSH2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r15], ymm0
	vmovdqu	ymmword ptr [rbx + 224], ymm0
	lea	rsi, [rbx + 256]
	mov	qword ptr [rbx + 272], rdx
	mov	qword ptr [rbx + 256], rax
	mov	qword ptr [rbx + 264], rcx
	mov	qword ptr [rbx + 280], rdi
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1058
# %bb.144:                              # %OP2792.DIV_udiv-special-cases
	mov	r14, qword ptr [rbx + 264]
	mov	r12, qword ptr [rbx + 280]
	mov	r8, qword ptr [rbx + 256]
	mov	r13, qword ptr [rbx + 272]
	mov	r10, qword ptr [rbx + 248]
	mov	rsi, qword ptr [rbx + 224]
	mov	r9, qword ptr [rbx + 232]
	mov	rdi, qword ptr [rbx + 240]
	mov	rax, r9
	or	rax, r10
	mov	rcx, rsi
	or	rcx, rdi
	or	rcx, rax
	sete	al
	mov	rcx, r14
	or	rcx, r12
	mov	rdx, r8
	mov	r11, r8
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	or	rdx, r13
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, r10
	lzcnt	rdx, rdi
	add	rdx, 64
	test	r10, r10
	cmovne	rdx, rax
	lzcnt	rax, r9
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	lzcnt	r8, rsi
	add	r8, 64
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	test	r9, r9
	cmovne	r8, rax
	sub	r8, -128
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rax, rdi
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	or	rax, r10
	cmovne	r8, rdx
	lzcnt	rax, r12
	lzcnt	rdx, r13
	add	rdx, 64
	test	r12, r12
	cmovne	rdx, rax
	lzcnt	rax, r14
	lzcnt	rsi, r11
	add	rsi, 64
	test	r14, r14
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r13
	or	rax, r12
	cmovne	rsi, rdx
	xor	r11d, r11d
	sub	r8, rsi
	mov	edi, 0
	sbb	rdi, rdi
	mov	r9d, 0
	sbb	r9, r9
	mov	r10d, 0
	sbb	r10, r10
	mov	edx, 255
	cmp	rdx, r8
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r9
	mov	edx, 0
	sbb	rdx, r10
	setb	dl
	or	dl, cl
	mov	qword ptr [rbp - 144], r12      # 8-byte Spill
	mov	rcx, r12
	cmovne	rcx, r11
	mov	qword ptr [rbp - 152], r13      # 8-byte Spill
	mov	r12, r13
	cmovne	r12, r11
	mov	r13, r14
	mov	rax, r14
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
	cmovne	rax, r11
	cmove	r11, r14
	mov	rsi, r11
	jne	.LBB5_440
# %bb.145:                              # %OP2792.DIV_udiv-special-cases
	mov	r11, rcx
	mov	rcx, r8
	xor	rcx, 255
	or	rcx, r9
	mov	rdx, rdi
	or	rdx, r10
	or	rdx, rcx
	mov	rcx, r11
	je	.LBB5_440
# %bb.146:                              # %udiv-bb156128
	mov	qword ptr [rbp - 192], rbx      # 8-byte Spill
	mov	rax, r8
	add	r8, 1
	adc	rdi, 0
	adc	r9, 0
	adc	r10, 0
	mov	qword ptr [rbp - 2992], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 3024], ymm0
	mov	qword ptr [rbp - 2984], r13
	mov	r12, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbp - 2976], r12
	mov	r15, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rbp - 2968], r15
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 2976]
	mov	rsi, qword ptr [rbp + rax - 2968]
	shld	rsi, rdx, cl
	mov	qword ptr [rbp - 200], rsi      # 8-byte Spill
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	rbx, rdi
	mov	rdi, qword ptr [rbp + rax - 2992]
	mov	r11, qword ptr [rbp + rax - 2984]
	mov	rax, r11
	shr	rax
	shrx	rax, rax, rsi
	shld	r11, rdi, cl
	mov	qword ptr [rbp - 208], r11      # 8-byte Spill
	or	rax, rdx
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	mov	rax, rbx
	or	rax, r10
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	or	r8, r9
	xor	edx, edx
	or	r8, rax
	shlx	rsi, rdi, rcx
	je	.LBB5_438
# %bb.147:                              # %udiv-preheader56127
	mov	rbx, r9
	vmovdqu	ymmword ptr [rbp - 2928], ymm0
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 2960], rax
	mov	qword ptr [rbp - 2952], r13
	mov	qword ptr [rbp - 2944], r12
	mov	qword ptr [rbp - 2936], r15
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	ecx, edx
	and	cl, 7
                                        # kill: def $dl killed $dl killed $rdx
	shr	dl, 3
	movzx	edx, dl
	mov	rdi, qword ptr [rbp + rdx - 2936]
	mov	r14, qword ptr [rbp + rdx - 2944]
	mov	r8, r14
	shrd	r8, rdi, cl
	mov	r9, qword ptr [rbp + rdx - 2960]
	mov	rdx, qword ptr [rbp + rdx - 2952]
	shrx	r12, rdx, rcx
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	shrx	r15, rdi, rcx
	mov	edi, ecx
	not	dil
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r9, rdx, cl
	add	r14, r14
	shlx	rcx, r14, rdi
	or	rcx, r12
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 160], rax      # 8-byte Spill
	mov	rdx, qword ptr [rbp - 136]      # 8-byte Reload
	adc	rdx, -1
	mov	qword ptr [rbp - 168], rdx      # 8-byte Spill
	xor	edx, edx
	mov	qword ptr [rbp - 232], rdx      # 8-byte Spill
	xor	edx, edx
	xor	r13d, r13d
	xor	r12d, r12d
	xor	edi, edi
	mov	r11, qword ptr [rbp - 200]      # 8-byte Reload
	mov	rax, qword ptr [rbp - 208]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 224]      # 8-byte Reload
	.p2align	4, 0x90
.LBB5_148:                              # %udiv-do-while56126
                                        # =>This Inner Loop Header: Depth=1
	shld	r15, r8, 1
	shld	r8, rcx, 1
	shld	rcx, r9, 1
	shld	r9, r11, 1
	shld	r11, rbx, 1
	or	r11, rdi
	shld	rbx, rax, 1
	or	rbx, r12
	shld	rax, rsi, 1
	or	rax, r13
	add	rsi, rsi
	or	rsi, rdx
	cmp	qword ptr [rbp - 144], r9       # 8-byte Folded Reload
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	rdx, rcx
	mov	rdx, qword ptr [rbp - 160]      # 8-byte Reload
	sbb	rdx, r8
	mov	rdi, qword ptr [rbp - 168]      # 8-byte Reload
	sbb	rdi, r15
	sar	rdi, 63
	mov	edx, edi
	and	edx, 1
	mov	r12, rdi
	and	r12, qword ptr [rbp - 136]      # 8-byte Folded Reload
	mov	r13, rdi
	and	r13, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	r14, rdi
	and	r14, qword ptr [rbp - 120]      # 8-byte Folded Reload
	and	rdi, qword ptr [rbp - 96]       # 8-byte Folded Reload
	sub	r9, rdi
	sbb	rcx, r14
	sbb	r8, r13
	sbb	r15, r12
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, -1
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	adc	rdi, -1
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	adc	r12, -1
	adc	r10, -1
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	or	rdi, r10
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	or	r14, r12
	or	r14, rdi
	mov	r13d, 0
	mov	r12d, 0
	mov	edi, 0
	jne	.LBB5_148
	jmp	.LBB5_439
.LBB5_149:                              # %OP389.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 599290589
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_23] # ymm1 = [0,0,0,599290589]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	jne	.LBB5_223
.LBB5_150:                              # %OP614.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 95
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_852
# %bb.151:
	mov	r10, r14
.LBB5_152:                              # %OP629.JUMPDEST
	mov	r15, rbx
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	inc	rbx
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	mov	rsi, qword ptr [r11 + r15 - 64]
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rsi
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 4048]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4032]
	mov	rcx, qword ptr [rbp - 4048]
	mov	rdx, qword ptr [rbp - 4040]
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	shl	rbx, 5
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 4016]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4000]
	mov	rcx, qword ptr [rbp - 4016]
	mov	rdx, qword ptr [rbp - 4008]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], 64
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], 0
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	add	rsi, 64
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 1872]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1872]
	mov	rcx, qword ptr [rbp - 1864]
	mov	rdx, qword ptr [rbp - 1848]
	mov	rsi, qword ptr [rbp - 1856]
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15 + 24], rdx
	mov	qword ptr [r11 + r15], rax
	mov	qword ptr [r11 + r15 + 8], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_153:                              # %OP2975.JUMPDEST
	lea	r13, [rbx + 1]
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	mov	rax, rbx
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3093
# %bb.154:                              # %OP2978.PUSH1
	mov	r14, r13
	shl	r14, 5
	movzx	eax, byte ptr [rbx + 20]
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [rbx], xmm0
	vmovaps	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	xor	ecx, ecx
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r15 + r14], rcx
	mov	r11, r15
	jne	.LBB5_769
# %bb.155:
	mov	r14, r13
.LBB5_156:                              # %OP3019.JUMPDEST
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	eax, dword ptr [rdx + 164]
	movbe	rcx, qword ptr [rdx + 156]
	bswap	rax
	shrd	rax, rcx, 32
	movbe	rdx, qword ptr [rdx + 148]
	shrd	rcx, rdx, 32
	shr	rdx, 32
	mov	rsi, r14
	shl	rsi, 5
	mov	qword ptr [r11 + rsi + 16], rdx
	mov	qword ptr [r11 + rsi + 8], rcx
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 48], 0
	mov	qword ptr [r11 + rsi + 56], 0
	mov	qword ptr [r11 + rsi + 32], 5326
.LBB5_157:                              # %OP7491.JUMPDEST
	mov	qword ptr [r11 + rsi + 40], 0
	add	r14, 3
	mov	qword ptr [r11 + rsi + 80], rdx
	mov	qword ptr [r11 + rsi + 72], rcx
	mov	qword ptr [r11 + rsi + 64], rax
	mov	qword ptr [r11 + rsi + 88], 0
	jmp	.LBB5_431
.LBB5_158:                              # %OP338.DUP1
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdi, rax
	xor	rdi, 826074471
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	jne	.LBB5_237
.LBB5_159:                              # %OP720.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_189] # xmm0 = [1399,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
.LBB5_160:                              # %OP3563.JUMPDEST
	lea	r14, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_154] # xmm0 = [6,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_371
# %bb.161:                              # %OP3566.PUSH1
	mov	rax, r14
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	movzx	ecx, byte ptr [rbx]
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], 0
	mov	r13, qword ptr [rbx - 16]
	mov	rsi, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 8]
	mov	qword ptr [r15 + rax + 24], rdi
	mov	qword ptr [r15 + rax + 8], rcx
	mov	qword ptr [r15 + rax + 16], r13
	mov	qword ptr [r15 + rax], rsi
	jmp	.LBB5_1304
.LBB5_162:                              # %OP236.DUP1
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	cmp	rax, 1553423035
	mov	rdi, rbx
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	mov	rdi, rdx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_13] # ymm0 = [0,0,0,1553423035]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jae	.LBB5_298
.LBB5_163:                              # %OP263.JUMPDEST
	or	rbx, rdx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rdx + 40], xmm0
	mov	qword ptr [r11 + rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 1425886544
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_12] # ymm1 = [0,0,0,1425886544]
	vmovdqu	ymmword ptr [r11 + rdx + 8], ymm1
	mov	qword ptr [r11 + rdx], rdi
	jne	.LBB5_340
.LBB5_164:                              # %OP1385.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_28] # xmm0 = [890,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
.LBB5_165:                              # %OP5177.JUMPDEST
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rcx, [rdx + 1]
	mov	rax, rdx
	shl	rax, 5
	lea	r14, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r10, [rdx + 2]
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	mov	rax, rcx
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	r15, qword ptr [r12 + 40]
	mov	rsi, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	rsi, rbx
	mov	r13d, 64
	xor	eax, eax
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	mov	edx, 0
	mov	r12d, 0
	cmp	rsi, 95
	jbe	.LBB5_1088
.LBB5_166:                              # %OP5180.MLOAD.contd
	mov	r9, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r9 + rbx + 88]
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	mov	rdi, qword ptr [r9 + rbx + 64]
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	rsi, qword ptr [r9 + rbx + 72]
	bswap	rdi
	mov	r8, rsi
	bswap	r8
	mov	r9, qword ptr [r9 + rbx + 80]
	mov	r15, r9
	bswap	r15
	mov	rbx, rcx
	bswap	rbx
	shl	r10, 5
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], r13
	mov	qword ptr [r14 + 104], rax
	mov	qword ptr [r14 + 120], r12
	add	rbx, r13
	adc	r15, rax
	adc	r8, rdx
	adc	rdi, r12
	mov	rcx, r12
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r12], rbx
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [r12 + 8], r15
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	qword ptr [r12 + 24], rdi
	movbe	qword ptr [r14 + 16], rsi
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r14], rsi
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r14 + 24], rsi
	movbe	qword ptr [r14 + 8], r9
	mov	qword ptr [r11 + r10 + 16], rdx
	mov	qword ptr [r11 + r10], r13
	mov	qword ptr [r11 + r10 + 24], rcx
	mov	qword ptr [r11 + r10 + 8], rax
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rdi, qword ptr [r9 + 16]
	mov	r12, qword ptr [r9 + 48]
	sub	rdi, r12
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	mov	r8, -1
	lea	r10, [r11 + r10]
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, r9
	ja	.LBB5_1090
.LBB5_167:                              # %OP5187.PUSH1
	add	r12, qword ptr [rcx + 8]
	movbe	qword ptr [r13 + r12 + 24], rbx
	movbe	qword ptr [r13 + r12 + 16], r15
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r13 + r12 + 8], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r13 + r12], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	vmovdqu	ymmword ptr [r9], ymm0
	mov	rax, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	qword ptr [r10 + 24], rdx
	mov	qword ptr [r10 + 8], rcx
	mov	qword ptr [r10 + 16], rax
	mov	qword ptr [r10], rbx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	r12, qword ptr [r15 + 48]
	sub	rdi, r12
	mov	rsi, rbx
	add	rsi, 32
	cmovb	rsi, r8
	mov	r13, -1
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r13
	cmp	rsi, rdi
	mov	rcx, r9
	ja	.LBB5_1091
.LBB5_168:                              # %OP5190.PUSH32
	add	r12, qword ptr [r15 + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_225] # ymm0 = [0,0,0,72057594037927936]
	vmovdqu	ymmword ptr [rbx + r12], ymm0
	movabs	rax, 3602879701896396800
	mov	qword ptr [rcx + 24], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rcx], xmm0
	mov	qword ptr [rcx + 16], 0
	mov	rcx, qword ptr [r14 + 8]
	mov	rax, qword ptr [r14 + 24]
	mov	rbx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rbx
	mov	qword ptr [r14 + 120], rax
	mov	qword ptr [r14 + 104], rcx
	add	rbx, 32
	adc	rcx, 0
	adc	rdx, 0
	adc	rax, 0
	mov	qword ptr [r10], rbx
	mov	qword ptr [r10 + 8], rcx
	mov	qword ptr [r10 + 16], rdx
	mov	qword ptr [r10 + 24], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rdi, r15
	mov	rsi, rbx
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rdx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_1092
.LBB5_169:                              # %OP5195.SWAP1
	add	r15, qword ptr [r12 + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_226] # xmm0 = [50,0,0,0]
	vmovups	ymmword ptr [rbx + r15], ymm0
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 - 32]
	mov	rcx, qword ptr [r14 - 24]
	mov	rdi, qword ptr [r14 - 8]
	mov	r13, qword ptr [r14 - 16]
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	vmovdqa	xmmword ptr [r14 - 32], xmm0
	mov	qword ptr [r14 + 16], r13
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 8], rcx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_170:                              # %OP412.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	xor	rax, 404098525
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_27] # ymm0 = [0,0,0,404098525]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB5_1225
.LBB5_171:                              # %OP570.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_172:                              # %OP2904.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_132] # xmm0 = [11,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1060
# %bb.173:                              # %OP2907.SWAP1
	vmovdqa	xmm0, xmmword ptr [rbx]
	vmovdqa	xmm1, xmmword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 16]
	vmovdqa	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	qword ptr [rbx + 16], r13
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rcx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_174:                              # %OP32.DUP1
	vmovdqu	xmmword ptr [r15 + 40], xmm0
	mov	qword ptr [r15 + 56], 0
	shr	rcx, 33
	xor	edx, edx
	cmp	rcx, 1912015623
	setb	dl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_6] # ymm0 = [0,0,0,3824031246]
	vmovdqu	ymmword ptr [r15 + 8], ymm0
	mov	qword ptr [r15], rdx
	cmp	ecx, 1912015623
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jae	.LBB5_306
# %bb.175:
	xor	ecx, ecx
	xor	esi, esi
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
.LBB5_176:                              # %OP82.JUMPDEST
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [r11 + rdx + 40], xmm1
	mov	qword ptr [r11 + rdx + 56], 0
	mov	edi, 3573918927
	cmp	rax, rdi
	mov	r8, rbx
	sbb	r8, 0
	mov	r8, rcx
	sbb	r8, 0
	mov	r8, rsi
	sbb	r8, 0
	setb	r8b
	movzx	r8d, r8b
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_249] # ymm0 = [0,0,0,3573918927]
	vmovdqu	ymmword ptr [r11 + rdx + 8], ymm0
	mov	qword ptr [r11 + rdx], r8
	jae	.LBB5_385
.LBB5_177:                              # %OP110.JUMPDEST
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rdx + 40], xmm0
	or	rbx, rsi
	mov	qword ptr [r11 + rdx + 56], 0
	mov	esi, 3082234009
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_5] # ymm1 = [0,0,0,3082234009]
	vmovdqu	ymmword ptr [r11 + rdx + 8], ymm1
	mov	qword ptr [r11 + rdx], rdi
	jne	.LBB5_489
# %bb.178:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_179:                              # %OP2021.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 95
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	jae	.LBB5_961
# %bb.180:
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	mov	r15, rbx
.LBB5_181:                              # %OP2036.JUMPDEST
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 56], r13
	mov	qword ptr [r11 + r15 + 48], r12
	mov	qword ptr [r11 + r15 + 40], r14
	mov	qword ptr [r11 + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3152]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3136]
	mov	rcx, qword ptr [rbp - 3152]
	mov	rdx, qword ptr [rbp - 3144]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 560]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 544]
	mov	rcx, qword ptr [rbp - 536]
	mov	rdx, qword ptr [rbp - 560]
	mov	rsi, qword ptr [rbp - 552]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rdi + r15 - 24]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 24], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + r15 - 8]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 8], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + r15 - 32]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 32], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rdx + r15 - 16]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 16], rax
	add	rcx, rbx
	adc	rdi, r14
	adc	rdx, r12
	adc	rsi, r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rdi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, rbx
	mov	qword ptr [rax + r15 + 32], rbx
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 4
	mov	rax, rcx
	mov	r8, rcx
	add	rax, 96
	mov	rcx, r14
	adc	rcx, 0
	mov	rdx, r12
	adc	rdx, 0
	mov	rsi, r13
	adc	rsi, 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 88], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 72], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 80], rdx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 64], rax
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r8
	mov	qword ptr [rax + rbx], r8
	add	rsi, 64
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 528]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 504]
	mov	rcx, qword ptr [rbp - 528]
	mov	rdx, qword ptr [rbp - 520]
	mov	rsi, qword ptr [rbp - 512]
	mov	qword ptr [r11 + r15 + 112], rsi
	mov	qword ptr [r11 + r15 + 96], rcx
	mov	qword ptr [r11 + r15 + 120], rax
	mov	qword ptr [r11 + r15 + 104], rdx
	mov	qword ptr [r11 + r15 + 176], rsi
	mov	qword ptr [r11 + r15 + 160], rcx
	mov	qword ptr [r11 + r15 + 184], rax
	mov	qword ptr [r11 + r15 + 168], rdx
	movabs	rdi, 4294967297
	cmp	rcx, rdi
	sbb	rdx, 0
	sbb	rsi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 16], 0
	mov	qword ptr [r11 + rbx + 8], 0
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_960
.LBB5_182:                              # %OP2066.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	add	rsi, qword ptr [r11 + rax - 96]
	adc	rdx, qword ptr [r11 + rax - 88]
	mov	rcx, qword ptr [r11 + rax - 16]
	adc	rcx, qword ptr [r11 + rax - 80]
	adc	r8, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	r9, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rbx, qword ptr [r11 + rax - 120]
	mov	r12, rsi
	add	r12, 32
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmp	rdi, r12
	mov	rdi, rbx
	sbb	rdi, r13
	mov	rdi, r9
	sbb	rdi, r14
	mov	r10, qword ptr [r11 + rax - 104]
	mov	rdi, r10
	sbb	rdi, r15
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	qword ptr [r11 + rax + 32], r12
	mov	qword ptr [r11 + rax + 40], r13
	mov	qword ptr [r11 + rax + 48], r14
	mov	qword ptr [r11 + rax + 56], r15
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_929
# %bb.183:
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_184:                              # %OP2080.JUMPDEST
	lea	r12, [rbx + 1]
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 496]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 496]
	mov	rcx, qword ptr [rbp - 488]
	mov	rdx, qword ptr [rbp - 480]
	mov	rdi, qword ptr [rbp - 472]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rsi, r12
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r15
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r14
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r12
	add	r12, rax
	adc	r13, rcx
	adc	r14, rdx
	adc	r15, rdi
	cmp	qword ptr [rbp - 80], r12       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 96], r13       # 8-byte Folded Spill
	sbb	qword ptr [rbp - 88], r14       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 112], r15      # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_883
# %bb.185:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_186:                              # %OP2104.JUMPDEST
	mov	rdi, r10
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r11 + rdi - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + rdi - 16]
	vmovaps	xmm2, xmmword ptr [r11 + rdi - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rdi - 80]
	vmovdqa	xmmword ptr [r11 + rdi - 80], xmm1
	vmovaps	xmmword ptr [r11 + rdi - 96], xmm0
	lea	r15, [r11 + rdi]
	mov	rdx, qword ptr [r11 + rdi - 56]
	mov	rax, qword ptr [r11 + rdi - 40]
	mov	rcx, qword ptr [r11 + rdi - 48]
	vmovaps	xmmword ptr [r11 + rdi - 48], xmm3
	mov	rsi, qword ptr [r11 + rdi - 64]
	vmovaps	xmmword ptr [r11 + rdi - 64], xmm2
	mov	qword ptr [r11 + rdi - 16], rcx
	mov	qword ptr [r11 + rdi - 32], rsi
	mov	qword ptr [r11 + rdi - 8], rax
	mov	qword ptr [r11 + rdi - 24], rdx
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi + 8], rdx
	lea	r8, [r10 + 2]
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	lea	r9, [r10 + 3]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	shl	r8, 5
	lea	r10, [r11 + r8]
	add	rsi, 31
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [r11 + r9], rsi
	mov	qword ptr [r11 + r9 + 8], rdx
	mov	qword ptr [r11 + r9 + 16], rcx
	mov	qword ptr [r11 + r9 + 24], rax
	and	rsi, -32
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r11 + rdi + 48], rcx
	mov	qword ptr [r11 + rdi + 40], rdx
	mov	qword ptr [r11 + rdi + 32], rsi
	mov	qword ptr [r11 + rdi + 56], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	lea	r8, [r11 + r9]
	mov	rbx, qword ptr [r12 + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rdi, r13
	mov	r9, rbx
	cmp	rdi, 95
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	jbe	.LBB5_1128
.LBB5_187:                              # %OP2119.MLOAD.contd
	mov	rdi, qword ptr [rbx + 8]
	mov	rbx, qword ptr [rdi + r13 + 88]
	mov	r12, qword ptr [rdi + r13 + 80]
	mov	r11, qword ptr [rdi + r13 + 64]
	mov	r13, qword ptr [rdi + r13 + 72]
	movbe	qword ptr [r15 + 32], rbx
	bswap	rbx
	movbe	qword ptr [r15 + 48], r13
	bswap	r13
	movbe	qword ptr [r15 + 56], r11
	bswap	r11
	movbe	qword ptr [r15 + 40], r12
	bswap	r12
	add	rbx, rsi
	adc	r12, rdx
	adc	r13, rcx
	mov	rcx, r11
	adc	rcx, rax
	mov	qword ptr [r10], rbx
	mov	qword ptr [r10 + 16], r13
	mov	qword ptr [r10 + 8], r12
	mov	qword ptr [r10 + 24], rcx
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9 + 48]
	sub	rax, r14
	cmp	rax, 95
	mov	r11, r10
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	jbe	.LBB5_1130
.LBB5_188:                              # %OP2125.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r14 + 88], rbx
	movbe	qword ptr [rax + r14 + 80], r12
	movbe	qword ptr [rax + r14 + 72], r13
	movbe	qword ptr [rax + r14 + 64], rcx
	mov	rbx, qword ptr [r15 + 32]
	mov	rax, qword ptr [r15 + 48]
	mov	rdx, qword ptr [r15 + 40]
	mov	rcx, qword ptr [r15 + 56]
	vmovdqa	xmm0, xmmword ptr [r15 - 64]
	vmovdqa	xmm1, xmmword ptr [r15 - 48]
	vmovaps	xmm2, xmmword ptr [r15 - 32]
	vmovaps	xmm3, xmmword ptr [r15 - 16]
	mov	qword ptr [r15 - 40], rcx
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 48], rax
	mov	qword ptr [r15 - 64], rbx
	vmovdqa	xmmword ptr [r15 - 16], xmm1
	vmovdqa	xmmword ptr [r15 - 32], xmm0
	mov	r10, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 24]
	vmovaps	xmmword ptr [r15 + 16], xmm3
	vmovaps	xmmword ptr [r15], xmm2
	mov	qword ptr [r15 + 56], rsi
	mov	qword ptr [r15 + 40], rdi
	mov	qword ptr [r15 + 32], r14
	mov	qword ptr [r15 + 48], r10
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rdx
	mov	qword ptr [r11 + 16], rax
	mov	qword ptr [r11], rbx
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	qword ptr [r8 + 8], rdi
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	qword ptr [r8 + 24], rsi
	mov	qword ptr [r8], r14
	mov	qword ptr [r8 + 16], r10
	mov	qword ptr [r15 + 152], rcx
	mov	qword ptr [r15 + 144], rax
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], rbx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rdi, r12
	mov	rsi, rbx
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	ja	.LBB5_1298
.LBB5_189:                              # %OP2133.PUSH1
	add	r12, qword ptr [r13 + 8]
	movbe	qword ptr [rbx + r12 + 24], r14
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [rbx + r12 + 16], rax
	movbe	qword ptr [rbx + r12 + 8], r10
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [rbx + r12], rax
	lea	r14, [rcx + 5]
	mov	rdx, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 16]
	mov	rdi, qword ptr [r11]
	mov	rsi, qword ptr [r11 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 16], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rdx
	mov	r11, qword ptr [r15 - 32]
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	r8, qword ptr [r15 - 16]
	mov	r9, qword ptr [r15 - 24]
	mov	r10, qword ptr [r15 - 8]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rax + 24], r10
	mov	qword ptr [rax + 8], r9
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax], r11
	mov	r11, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15]
	mov	r12, qword ptr [r15 + 8]
	mov	r13, qword ptr [r15 + 24]
	mov	qword ptr [r15 + 152], r13
	mov	qword ptr [r15 + 136], r12
	mov	qword ptr [r15 + 144], r11
	mov	qword ptr [r15 + 128], rbx
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	shl	r14, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 24], r13
	mov	qword ptr [rax + r14 + 16], r11
	mov	qword ptr [rax + r14 + 8], r12
	mov	qword ptr [rax + r14], rbx
	mov	qword ptr [r15 + 216], r10
	mov	qword ptr [r15 + 208], r8
	mov	qword ptr [r15 + 200], r9
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [r15 + 192], r8
	mov	qword ptr [r15 + 248], rdx
	mov	qword ptr [r15 + 240], rcx
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 224], rdi
	lea	rbx, [rax + r14]
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.190:                              # %OP2141.PUSH1
	mov	rsi, r14
	mov	rax, qword ptr [r15 + 88]
	mov	r14, qword ptr [r15 + 64]
	mov	rdx, qword ptr [r15 + 72]
	mov	rcx, qword ptr [r15 + 80]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	add	r14, qword ptr [r15 + 128]
	adc	rdx, qword ptr [r15 + 136]
	adc	rcx, qword ptr [r15 + 144]
	adc	rax, qword ptr [r15 + 152]
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rdi]
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rdi], ymm1
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], r14
	mov	rbx, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r12, qword ptr [rbx + 48]
	sub	rdi, r12
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	ja	.LBB5_1131
.LBB5_191:                              # %OP2148.POP
	add	r12, qword ptr [rbx + 8]
	vmovdqu	ymmword ptr [r14 + r12], ymm1
	vmovaps	xmm0, xmmword ptr [r15 + 32]
	vmovaps	xmm1, xmmword ptr [r15 + 48]
	vmovups	ymm2, ymmword ptr [r15 - 64]
	vmovaps	xmmword ptr [r15 - 48], xmm1
	vmovaps	xmmword ptr [r15 - 64], xmm0
	vmovups	ymmword ptr [r15 - 160], ymm2
	vmovdqa	xmm0, xmmword ptr [r15 - 128]
	vmovdqa	xmm1, xmmword ptr [r15 - 112]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_262] # xmm2 = [13464,0]
	vmovups	ymmword ptr [r15 - 128], ymm2
	vmovdqa	xmmword ptr [r15 + 48], xmm1
	vmovdqa	xmmword ptr [r15 + 32], xmm0
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	add	r10, -4
	mov	esi, 13464
	jmp	.LBB5_668
.LBB5_192:                              # %OP366.DUP1
	add	rdx, r11
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 814919637
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_199] # ymm0 = [0,0,0,814919637]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	jne	.LBB5_352
# %bb.193:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_194:                              # %OP694.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r15 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_195:                              # %OP709.JUMPDEST
	lea	r12, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r15 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3920]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3904]
	mov	rcx, qword ptr [rbp - 3920]
	mov	rdx, qword ptr [rbp - 3912]
	mov	rsi, r12
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
.LBB5_196:                              # %OP3466.JUMPDEST
	lea	rbx, [r12 + 1]
	mov	rax, r12
	shl	rax, 5
	lea	r14, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_380
# %bb.197:                              # %OP3469.PUSH1
	lea	r9, [r12 + 2]
	mov	rcx, qword ptr [r14]
	mov	rax, qword ptr [r14 + 8]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r14], xmm0
	mov	esi, dword ptr [r14 + 16]
	vmovdqa	xmmword ptr [r14 + 16], xmm0
	mov	r13, r9
	shl	r13, 5
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	movbe	rdx, qword ptr [r8 + 156]
	mov	edi, dword ptr [r8 + 164]
	bswap	rdi
	shrd	rdi, rdx, 32
	movbe	r8, qword ptr [r8 + 148]
	shrd	rdx, r8, 32
	shr	r8, 32
	mov	qword ptr [r15 + r13 + 16], r8
	xor	r8, rsi
	mov	qword ptr [r15 + r13], rdi
	xor	rdi, rcx
	or	rdi, r8
	mov	rcx, r12
	mov	r12, rbx
	shl	r12, 5
	mov	qword ptr [r15 + r13 + 8], rdx
	xor	rdx, rax
	xor	eax, eax
	or	rdx, rdi
	mov	qword ptr [r15 + r13 + 24], 0
	sete	al
	mov	qword ptr [r15 + r12], rax
	vmovdqu	xmmword ptr [r15 + r12 + 8], xmm0
	mov	qword ptr [r15 + r12 + 24], 0
	mov	r11, r15
	jne	.LBB5_835
# %bb.198:
	mov	r10, rbx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_199:                              # %OP3515.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	lea	rbx, [r11 + rax]
	lea	r8, [r10 + 2]
	mov	edi, dword ptr [r11 + rax - 48]
	mov	r13, qword ptr [r11 + rax - 64]
	mov	r9, qword ptr [r11 + rax - 56]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], r9
	mov	qword ptr [r11 + rax], r13
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax + 56], 0
	lea	rdx, [r10 + 3]
	mov	rax, r8
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [r11 + rax + 8], r9
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax], r13
	mov	qword ptr [r11 + rax + 24], 0
	lea	rsi, [r10 + 4]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	rax, rdx
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r14, [r11 + rax]
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rax, r15
	cmp	rax, 31
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	jbe	.LBB5_1080
.LBB5_200:                              # %OP3523.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r15 + 24], r13
	movbe	qword ptr [rax + r15 + 16], r9
	movbe	qword ptr [rax + r15 + 8], rdi
	mov	qword ptr [rax + r15], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_202] # xmm1 = [12,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm1
	mov	rax, rsi
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r12, [r11 + rax]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rax, r13
	cmp	rax, 63
	jbe	.LBB5_1084
.LBB5_201:                              # %OP3528.PUSH1
	mov	rax, qword ptr [r15 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_203] # ymm0 = [0,0,0,864691128455135232]
	vmovups	ymmword ptr [rax + r13 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	lea	r13, [r10 + 5]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbx + 48]
	mov	r15, r10
	mov	rcx, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 40]
	mov	rsi, qword ptr [rbx + 56]
	mov	qword ptr [rbp - 112], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], rsi
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	qword ptr [r11 + r13 + 16], rax
	mov	qword ptr [r11 + r13], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.202:                              # %OP3532.DUP1
	add	r15, 6
	add	r13, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rax, qword ptr [r12]
	mov	rcx, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 24]
	mov	rsi, qword ptr [r12 + 16]
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_102
# %bb.203:                              # %OP3534.PUSH32
	shl	r15, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_59] # ymm0 = [18446744073709551360,18446744073709551615,18446744073709551615,18446744073709551615]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovups	ymmword ptr [rax + r15], ymm0
	mov	rax, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13 + 24]
	mov	rsi, -256
	and	rsi, qword ptr [r13]
	vmovdqu	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rsi
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.204:                              # %OP3538.PUSH1
	vmovdqa	xmm0, xmmword ptr [r14]
	vmovdqa	xmm1, xmmword ptr [r14 + 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_139] # xmm2 = [13,0]
	vmovups	ymmword ptr [r14], ymm2
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r10, qword ptr [r13]
	mov	rax, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13 + 24]
	vmovdqa	xmmword ptr [r13], xmm0
	vmovdqa	xmmword ptr [r13 + 16], xmm1
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r12], r10
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r11 + 16]
	mov	r15, qword ptr [r11 + 48]
	sub	rdi, r15
	mov	rsi, r10
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rax
	mov	eax, 0
	sbb	rax, rcx
	sbb	r9, rdx
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_1085
.LBB5_205:                              # %OP3542.DUP1
	add	r15, qword ptr [r11 + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_204] # ymm0 = [0,0,0,936748722493063168]
	vmovdqu	ymmword ptr [r10 + r15], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r13 + 16]
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	mov	rax, qword ptr [rbx + 32]
	mov	rcx, qword ptr [rbx + 48]
	mov	rdx, qword ptr [rbx + 40]
	mov	rsi, qword ptr [rbx + 56]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.206:                              # %OP3545.DUP3
	mov	rax, qword ptr [rbx + 56]
	mov	rcx, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 40]
	mov	rsi, qword ptr [rbx + 48]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14]
	mov	r9, qword ptr [r14 + 8]
	mov	r10, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.207:                              # %OP3548.MLOAD
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [r15]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	rax, qword ptr [r8 + 16]
	mov	r13, qword ptr [r8 + 48]
	sub	rax, r13
	mov	rsi, r12
	add	rsi, 32
	mov	rcx, -1
	cmovb	rsi, rcx
	xor	edx, edx
	cmp	rdx, qword ptr [r15 + 8]
	mov	edi, 0
	sbb	rdi, qword ptr [r15 + 16]
	sbb	rdx, qword ptr [r15 + 24]
	cmovb	rsi, rcx
	cmp	rsi, rax
	ja	.LBB5_1086
.LBB5_208:                              # %OP3548.MLOAD.contd
	add	r13, qword ptr [r8 + 8]
	mov	rax, qword ptr [r12 + r13 + 16]
	mov	rcx, qword ptr [r12 + r13 + 24]
	mov	rdx, qword ptr [r12 + r13]
	mov	rsi, qword ptr [r12 + r13 + 8]
	mov	rdi, qword ptr [rbx + 56]
	mov	r8, qword ptr [rbx + 32]
	mov	r9, qword ptr [rbx + 40]
	mov	r10, qword ptr [rbx + 48]
	movabs	r11, -4066981998043432787
	mov	qword ptr [rbx + 48], r11
	movabs	r11, -1204538824010078574
	mov	qword ptr [rbx + 32], r11
	movabs	r11, -1638050593540827860
	mov	qword ptr [rbx + 56], r11
	movabs	r11, -4487992226398971843
	mov	qword ptr [rbx + 40], r11
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], r9
	movbe	qword ptr [r14 + 16], rsi
	movbe	qword ptr [r14], rcx
	movbe	qword ptr [r14 + 24], rdx
	movbe	qword ptr [r14 + 8], rax
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 2
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.209:                              # %OP3553.POP
	mov	rsi, qword ptr [rbx - 96]
	mov	rcx, qword ptr [rbx - 88]
	mov	rdi, qword ptr [rbx - 72]
	mov	r13, qword ptr [rbx - 80]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [rbx - 96], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx - 64]
	mov	qword ptr [rbx - 48], r13
	mov	qword ptr [rbx - 40], rdi
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 56], rcx
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
.LBB5_210:                              # %dynamic_jump_table
	add	r10, -2
	jmp	.LBB5_437
.LBB5_211:                              # %OP287.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdi, rax
	xor	rdi, 1086394137
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	jne	.LBB5_355
.LBB5_212:                              # %OP1172.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	r14, qword ptr [rcx + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_852
# %bb.213:
	mov	r10, r14
	mov	r15, rbx
.LBB5_214:                              # %OP1187.JUMPDEST
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3824]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3808]
	mov	rcx, qword ptr [rbp - 3824]
	mov	rdx, qword ptr [rbp - 3816]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], 32
	add	rbx, 32
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 1616]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1616]
	mov	rcx, qword ptr [rbp - 1608]
	mov	rdx, qword ptr [rbp - 1592]
	mov	rsi, qword ptr [rbp - 1600]
	mov	qword ptr [r11 + r15 - 16], rsi
	mov	qword ptr [r11 + r15 - 8], rdx
	mov	qword ptr [r11 + r15 - 32], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_215:                              # %OP4054.JUMPDEST
	lea	r13, [rax + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jne	.LBB5_751
# %bb.216:                              # %OP4057.PUSH1
	mov	r14, r13
	shl	r14, 5
	movzx	eax, byte ptr [rbx + 20]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	xor	ecx, ecx
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r15 + r14], rcx
	mov	r11, r15
	jne	.LBB5_842
.LBB5_217:                              # %OP4098.JUMPDEST
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	lea	rdx, [r8 + 1]
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r13d, dword ptr [rax + 164]
	movbe	rdi, qword ptr [rax + 156]
	bswap	r13
	shrd	r13, rdi, 32
	movbe	r14, qword ptr [rax + 148]
	shrd	rdi, r14, 32
	shr	r14, 32
	mov	rax, r8
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	lea	rsi, [r8 + 2]
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	mov	rcx, rdx
	shl	rcx, 5
	lea	rdx, [r11 + rcx]
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 0
	mov	qword ptr [r11 + rcx + 8], rdi
	mov	qword ptr [r11 + rcx + 16], r14
	mov	qword ptr [r11 + rcx], r13
	mov	qword ptr [r11 + rcx + 24], 0
	lea	rax, [r8 + 3]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	mov	rax, rsi
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [r12 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	rax, r15
	cmp	rax, 31
	mov	qword ptr [rbp - 112], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	jbe	.LBB5_1079
.LBB5_218:                              # %OP4104.PUSH1
	mov	rax, qword ptr [rbx + 8]
	movbe	qword ptr [rax + r15 + 24], r13
	movbe	qword ptr [rax + r15 + 16], rdi
	movbe	qword ptr [rax + r15 + 8], r14
	mov	qword ptr [rax + r15], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_202] # xmm0 = [12,0,0,0]
	vmovups	ymmword ptr [rdx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	mov	rbx, qword ptr [r12 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	rax, r15
	cmp	rax, 63
	jbe	.LBB5_1082
.LBB5_219:                              # %OP4107.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_203] # ymm0 = [0,0,0,864691128455135232]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	mov	r15, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [r15]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_0] # xmm1 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm1
	mov	rbx, rdx
	vmovdqu	ymmword ptr [rdx], ymm0
	mov	rdi, r12
	mov	rsi, r15
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.220:                              # %OP4110.SLOAD
	mov	rdi, r12
	mov	rsi, r15
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.221:                              # %OP4111.PUSH1
	xor	eax, eax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	mov	rcx, rbx
	vmovdqu	ymmword ptr [rbx], ymm0
	movzx	ecx, byte ptr [r15]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], 0
	test	rcx, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	je	.LBB5_827
.LBB5_222:                              # %OP4153.JUMPDEST
	shl	rcx, 5
	mov	qword ptr [r11 + rcx + 8], rdx
	mov	qword ptr [r11 + rcx], r13
	mov	qword ptr [r11 + rcx + 16], r14
	mov	qword ptr [r11 + rcx + 24], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_214] # xmm0 = [8132,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	qword ptr [r11 + rcx + 72], rdx
	mov	qword ptr [r11 + rcx + 64], r13
	mov	qword ptr [r11 + rcx + 80], r14
	mov	qword ptr [r11 + rcx + 88], rax
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_431
.LBB5_223:                              # %OP394.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	xor	rax, 716570693
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_24] # ymm0 = [0,0,0,716570693]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB5_1225
.LBB5_224:                              # %OP650.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, rbx
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_767
# %bb.225:
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_226:                              # %OP665.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 4080]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4064]
	mov	rcx, qword ptr [rbp - 4080]
	mov	rdx, qword ptr [rbp - 4072]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_227:                              # %OP3308.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rcx + 1]
	mov	rax, rcx
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	mov	r15, rcx
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3062
# %bb.228:                              # %OP3311.PUSH20
	lea	r8, [r15 + 2]
	mov	r9, r12
	shl	r9, 5
	mov	eax, dword ptr [rbx + 16]
	mov	ecx, dword ptr [r13 + 164]
	movbe	rdx, qword ptr [r13 + 156]
	movbe	rsi, qword ptr [r13 + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r9 + 16], rsi
	mov	qword ptr [r14 + r9], rcx
	mov	rcx, qword ptr [rbx + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r9 + 8], rdi
	mov	qword ptr [r14 + r9 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	r11, r14
	jne	.LBB5_776
# %bb.229:
	mov	rdi, r12
.LBB5_230:                              # %OP3349.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 32]
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 16]
	mov	r12, rdi
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_783
# %bb.231:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_232:                              # %OP3393.JUMPDEST
	mov	rbx, r10
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_190] # xmm0 = [14,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	lea	r12, [r10 + 2]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rax, rdi
	shl	rax, 5
	lea	r14, [r11 + rax]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r13
	mov	rsi, r14
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3062
# %bb.233:                              # %OP3397.PUSH32
	add	rbx, r15
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	shl	r12, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_155] # ymm0 = [0,0,18446744069414584320,18446744073709551615]
	vmovups	ymmword ptr [r15 + r12], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [r14], xmm0
	mov	dword ptr [r14 + 16], 0
	mov	rax, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 16]
	mov	rcx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 8]
	mov	qword ptr [rbx + 104], rcx
	mov	qword ptr [rbx + 120], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rax
	mov	edx, edx
	mov	qword ptr [r15 + r12 + 8], rcx
	mov	qword ptr [r15 + r12], rax
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12 + 24], 0
	mov	rsi, qword ptr [r14 + 24]
	mov	r10, qword ptr [r14]
	or	r10, rax
	mov	r8, qword ptr [r14 + 16]
	or	r8, rdx
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rax
	mov	r9, qword ptr [r14 + 8]
	or	r9, rcx
	mov	qword ptr [rbx + 104], rcx
	mov	qword ptr [rbx + 120], 0
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14], r10
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 8], r9
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], 0
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	mov	rdi, r13
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1067
# %bb.234:                              # %OP3408.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	add	r12, r15
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rax, r13
	cmp	rax, 95
	jbe	.LBB5_1957
.LBB5_235:                              # %OP3409.MLOAD.contd
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [rax + r13 + 88]
	mov	rdx, qword ptr [rax + r13 + 80]
	mov	rsi, qword ptr [rax + r13 + 64]
	mov	rax, qword ptr [rax + r13 + 72]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_191] # ymm0 = [11617804965768067674,14055700787501040951,10250431114859502964,16462316354470482228]
	vmovdqu	ymmword ptr [r14], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	movbe	qword ptr [rbx + 120], rsi
	movbe	qword ptr [rbx + 104], rdx
	movbe	qword ptr [rbx + 112], rax
	movbe	qword ptr [rbx + 96], rcx
	mov	rsi, rbx
	mov	edx, 2
	mov	r12, rdi
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_751
# %bb.236:                              # %OP3415.POP
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	add	r10, -2
	jmp	.LBB5_126
.LBB5_237:                              # %OP343.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 861345323
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_19] # ymm0 = [0,0,0,861345323]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_368
# %bb.238:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_239:                              # %OP743.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	add	r10, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, r10
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r15, r10
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 255
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_790
# %bb.240:
	mov	rbx, r15
.LBB5_241:                              # %OP758.JUMPDEST
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	rdi, qword ptr [r11 + rbx - 32]
	add	rdi, rsi
	mov	r9, qword ptr [r11 + rbx - 24]
	adc	r9, rdx
	mov	r10, qword ptr [r11 + rbx - 16]
	adc	r10, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 8]
	adc	r11, r8
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx - 64], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 56], r9
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 48], r10
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 40], r11
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 32], rsi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 24], rdx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 16], rcx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 8], r8
	add	r15, 2
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rdi, rsi
	add	rdi, 32
	mov	r9, rdx
	adc	r9, 0
	mov	r10, rcx
	adc	r10, 0
	mov	r11, r8
	adc	r11, 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 8], r9
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 16], r10
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 24], r11
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 56], r8
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 48], rcx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 40], rdx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 32], rsi
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2096]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2072]
	mov	rcx, qword ptr [rbp - 2096]
	mov	rdx, qword ptr [rbp - 2088]
	mov	rdi, qword ptr [rbp - 2080]
	mov	qword ptr [r11 + rbx + 48], rdi
	mov	qword ptr [r11 + rbx + 32], rcx
	mov	qword ptr [r11 + rbx + 56], rax
	mov	qword ptr [r11 + rbx + 40], rdx
	mov	rsi, r15
	shl	rsi, 5
	mov	qword ptr [r11 + rbx + 112], rdi
	mov	qword ptr [r11 + rbx + 96], rcx
	mov	qword ptr [r11 + rbx + 120], rax
	mov	qword ptr [r11 + rbx + 104], rdx
	movabs	r8, 4294967297
	cmp	rcx, r8
	sbb	rdx, 0
	sbb	rdi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [r11 + rsi + 24], 0
	jae	.LBB5_857
.LBB5_242:                              # %OP776.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	r10, qword ptr [r11 + rax - 32]
	add	r10, qword ptr [r11 + rax - 96]
	adc	rdx, qword ptr [r11 + rax - 88]
	mov	rcx, qword ptr [r11 + rax - 16]
	adc	rcx, qword ptr [r11 + rax - 80]
	adc	r8, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], r10
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	r9, qword ptr [r11 + rax - 112]
	mov	r12, qword ptr [r11 + rax - 128]
	mov	rbx, qword ptr [r11 + rax - 120]
	mov	rsi, r10
	add	rsi, 32
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	cmp	r12, rsi
	mov	rdi, rbx
	sbb	rdi, r13
	mov	rdi, r9
	sbb	rdi, r14
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	sbb	rdi, r15
	mov	qword ptr [r11 + rax + 64], r10
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	qword ptr [r11 + rax + 32], rsi
	mov	qword ptr [r11 + rax + 40], r13
	mov	qword ptr [r11 + rax + 48], r14
	mov	qword ptr [r11 + rax + 56], r15
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_856
# %bb.243:
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_244:                              # %OP790.JUMPDEST
	lea	r12, [rbx + 1]
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], r10
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2064]
	mov	rsi, r10
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2064]
	mov	rcx, qword ptr [rbp - 2056]
	mov	rdx, qword ptr [rbp - 2048]
	mov	rdi, qword ptr [rbp - 2040]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rsi, r12
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r15
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r14
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r12
	add	r12, rax
	adc	r13, rcx
	adc	r14, rdx
	adc	r15, rdi
	cmp	qword ptr [rbp - 120], r12      # 8-byte Folded Reload
	sbb	qword ptr [rbp - 112], r13      # 8-byte Folded Spill
	sbb	qword ptr [rbp - 96], r14       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 88], r15       # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_855
# %bb.245:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_246:                              # %OP814.JUMPDEST
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rdi, r8
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r11 + rdi - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + rdi - 16]
	vmovaps	xmm2, xmmword ptr [r11 + rdi - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rdi - 80]
	vmovdqa	xmmword ptr [r11 + rdi - 80], xmm1
	vmovaps	xmmword ptr [r11 + rdi - 96], xmm0
	lea	rbx, [r11 + rdi]
	mov	rdx, qword ptr [r11 + rdi - 56]
	mov	rax, qword ptr [r11 + rdi - 40]
	mov	rcx, qword ptr [r11 + rdi - 48]
	vmovaps	xmmword ptr [r11 + rdi - 48], xmm3
	mov	rsi, qword ptr [r11 + rdi - 64]
	vmovaps	xmmword ptr [r11 + rdi - 64], xmm2
	mov	qword ptr [r11 + rdi - 16], rcx
	mov	qword ptr [r11 + rdi - 32], rsi
	mov	qword ptr [r11 + rdi - 8], rax
	mov	qword ptr [r11 + rdi - 24], rdx
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi + 8], rdx
	lea	r10, [r8 + 2]
	lea	r9, [r8 + 3]
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	r8, r10
	shl	r8, 5
	lea	r10, [r11 + r8]
	add	rsi, 31
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [r11 + r9], rsi
	mov	qword ptr [r11 + r9 + 8], rdx
	mov	qword ptr [r11 + r9 + 16], rcx
	mov	qword ptr [r11 + r9 + 24], rax
	and	rsi, -32
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r11 + rdi + 48], rcx
	mov	qword ptr [r11 + rdi + 40], rdx
	mov	qword ptr [r11 + rdi + 32], rsi
	mov	qword ptr [r11 + rdi + 56], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	lea	r8, [r11 + r9]
	mov	r14, qword ptr [r12 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	r9, r14
	cmp	rdi, 95
	jbe	.LBB5_1098
.LBB5_247:                              # %OP829.MLOAD.contd
	mov	rdi, qword ptr [r14 + 8]
	mov	r14, qword ptr [rdi + r13 + 88]
	mov	r12, qword ptr [rdi + r13 + 80]
	mov	r11, qword ptr [rdi + r13 + 64]
	mov	r13, qword ptr [rdi + r13 + 72]
	movbe	qword ptr [rbx + 32], r14
	bswap	r14
	movbe	qword ptr [rbx + 48], r13
	bswap	r13
	movbe	qword ptr [rbx + 56], r11
	bswap	r11
	movbe	qword ptr [rbx + 40], r12
	bswap	r12
	add	r14, rsi
	adc	r12, rdx
	adc	r13, rcx
	adc	r11, rax
	mov	qword ptr [r10], r14
	mov	qword ptr [r10 + 16], r13
	mov	qword ptr [r10 + 8], r12
	mov	qword ptr [r10 + 24], r11
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r15, qword ptr [r9 + 48]
	sub	rax, r15
	cmp	rax, 95
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	jbe	.LBB5_1100
.LBB5_248:                              # %OP835.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r15 + 88], r14
	movbe	qword ptr [rax + r15 + 80], r12
	movbe	qword ptr [rax + r15 + 72], r13
	movbe	qword ptr [rax + r15 + 64], r11
	mov	r14, qword ptr [rbx + 32]
	mov	rax, qword ptr [rbx + 48]
	mov	rdx, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	vmovdqa	xmm0, xmmword ptr [rbx - 64]
	vmovdqa	xmm1, xmmword ptr [rbx - 48]
	vmovaps	xmm2, xmmword ptr [rbx - 32]
	vmovaps	xmm3, xmmword ptr [rbx - 16]
	mov	qword ptr [rbx - 40], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 48], rax
	mov	qword ptr [rbx - 64], r14
	vmovdqa	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	r11, qword ptr [rbx + 16]
	mov	r12, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 24]
	vmovaps	xmmword ptr [rbx + 16], xmm3
	vmovaps	xmmword ptr [rbx], xmm2
	mov	qword ptr [rbx + 56], rsi
	mov	qword ptr [rbx + 40], rdi
	mov	qword ptr [rbx + 32], r12
	mov	qword ptr [rbx + 48], r11
	mov	qword ptr [r10 + 24], rcx
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rax
	mov	qword ptr [r10], r14
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	qword ptr [r8 + 8], rdi
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	qword ptr [r8 + 24], rsi
	mov	qword ptr [r8], r12
	mov	qword ptr [r8 + 16], r11
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 136], rdx
	mov	qword ptr [rbx + 128], r14
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rdi, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	ja	.LBB5_1101
.LBB5_249:                              # %OP843.PUSH1
	add	r13, qword ptr [r15 + 8]
	movbe	qword ptr [r14 + r13 + 24], r12
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	movbe	qword ptr [r14 + r13 + 8], r11
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r14 + r13], rax
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	lea	r12, [rcx + 5]
	mov	rdx, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10 + 16]
	mov	rdi, qword ptr [r10]
	mov	rsi, qword ptr [r10 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r10], rdi
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 8], rsi
	mov	qword ptr [r10 + 24], rdx
	mov	r11, qword ptr [rbx - 32]
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	r8, qword ptr [rbx - 16]
	mov	r9, qword ptr [rbx - 24]
	mov	r10, qword ptr [rbx - 8]
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rax + 24], r10
	mov	qword ptr [rax + 8], r9
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax], r11
	mov	r11, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx]
	mov	r15, qword ptr [rbx + 8]
	mov	r13, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 152], r13
	mov	qword ptr [rbx + 136], r15
	mov	qword ptr [rbx + 144], r11
	mov	qword ptr [rbx + 128], r14
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	shl	r12, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r12 + 24], r13
	mov	qword ptr [rax + r12 + 16], r11
	mov	qword ptr [rax + r12 + 8], r15
	mov	qword ptr [rax + r12], r14
	mov	qword ptr [rbx + 216], r10
	mov	qword ptr [rbx + 208], r8
	mov	qword ptr [rbx + 200], r9
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	qword ptr [rbx + 192], r8
	mov	qword ptr [rbx + 248], rdx
	mov	qword ptr [rbx + 240], rcx
	mov	qword ptr [rbx + 232], rsi
	mov	qword ptr [rbx + 224], rdi
	lea	r14, [rax + r12]
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r15
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.250:                              # %OP851.PUSH1
	mov	rax, qword ptr [rbx + 88]
	mov	r12, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 80]
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], r12
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	add	r12, qword ptr [rbx + 128]
	adc	rdx, qword ptr [rbx + 136]
	adc	rcx, qword ptr [rbx + 144]
	adc	rax, qword ptr [rbx + 152]
	mov	r10, qword ptr [rbp - 120]      # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [r10]
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [r10], ymm1
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11], ymm0
	mov	qword ptr [rbx + 152], rax
	mov	qword ptr [rbx + 144], rcx
	mov	qword ptr [rbx + 136], rdx
	mov	qword ptr [rbx + 128], r12
	mov	r14, qword ptr [r15 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rdi, r15
	mov	rsi, r12
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, r11
	ja	.LBB5_1102
.LBB5_251:                              # %OP858.POP
	add	r15, qword ptr [r14 + 8]
	vmovdqu	ymmword ptr [r12 + r15], ymm1
	vmovdqu	ymm0, ymmword ptr [rbx + 32]
	vmovdqa	xmm1, xmmword ptr [rbx - 64]
	vmovaps	xmm2, xmmword ptr [rbx - 48]
	mov	rax, qword ptr [rbx - 136]
	mov	rdx, qword ptr [rbx - 160]
	mov	rsi, qword ptr [rbx - 152]
	mov	rcx, qword ptr [rbx - 144]
	vmovaps	xmmword ptr [rbx - 144], xmm2
	vmovdqa	xmmword ptr [rbx - 160], xmm1
	mov	rdi, qword ptr [rbx - 120]
	mov	r11, qword ptr [rbx - 104]
	mov	r14, qword ptr [rbx - 128]
	mov	r12, qword ptr [rbx - 112]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [rbx - 112], rcx
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	qword ptr [rbx - 128], rdx
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [rbx - 104], rax
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [rbx - 120], rsi
	mov	r8, qword ptr [rbx - 72]
	mov	rsi, qword ptr [rbx - 96]
	mov	rcx, qword ptr [rbx - 80]
	mov	qword ptr [rbx - 80], r12
	mov	qword ptr [rbx - 96], r14
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	mov	qword ptr [rbx - 72], r11
	mov	rdx, qword ptr [rbx - 88]
	mov	r15, rdi
	mov	qword ptr [rbx - 88], rdi
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 32], rsi
	mov	qword ptr [rbx + 56], r8
	mov	qword ptr [rbx + 40], rdx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 24], r8
	mov	qword ptr [r10], rsi
	mov	qword ptr [r10 + 8], rdx
	mov	rax, rsi
	add	rax, 32
	mov	rdi, rdx
	adc	rdi, 0
	mov	qword ptr [rbx - 56], rdi
	mov	qword ptr [rbx - 64], rax
	mov	rax, rcx
	adc	rax, 0
	mov	qword ptr [rbx - 48], rax
	mov	rax, r8
	adc	rax, 0
	mov	qword ptr [rbx - 40], rax
	vmovdqu	ymmword ptr [r9], ymm0
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2032]
	push	qword ptr [r13 + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	r8, qword ptr [rbp - 2008]
	mov	rcx, qword ptr [rbp - 2016]
	mov	rsi, qword ptr [rbp - 2032]
	mov	rdx, qword ptr [rbp - 2024]
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], r8
	mov	qword ptr [rbx - 32], rsi
	mov	qword ptr [rbx - 24], rdx
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 56], r8
	mov	qword ptr [rbx + 32], rsi
	mov	qword ptr [rbx + 40], rdx
	movabs	rax, 4294967297
	cmp	rsi, rax
	mov	rax, rdx
	sbb	rax, 0
	mov	rax, rcx
	sbb	rax, 0
	mov	rax, r8
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	jae	.LBB5_854
# %bb.252:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 144]       # 8-byte Reload
.LBB5_253:                              # %OP881.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	add	rsi, r14
	adc	rdx, r15
	adc	rcx, r12
	adc	r8, r9
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	r14, rsi
	add	r14, 32
	mov	r15, rdx
	adc	r15, 0
	mov	r13, rcx
	adc	r13, 0
	mov	r12, r8
	adc	r12, 0
	mov	qword ptr [r11 + rax + 32], r14
	mov	qword ptr [r11 + rax + 40], r15
	mov	qword ptr [r11 + rax + 48], r13
	mov	qword ptr [r11 + rax + 56], r12
	cmp	qword ptr [rbp - 96], r14       # 8-byte Folded Reload
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	sbb	rdi, r15
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	sbb	rdi, r13
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	sbb	rdi, r12
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_853
# %bb.254:
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_255:                              # %OP895.JUMPDEST
	lea	rax, [rbx + 1]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2000]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2000]
	mov	rcx, qword ptr [rbp - 1992]
	mov	rdx, qword ptr [rbp - 1984]
	mov	rdi, qword ptr [rbp - 1976]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r12
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r13
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r15
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r14
	add	r14, rax
	adc	r15, rcx
	adc	r13, rdx
	adc	r12, rdi
	cmp	qword ptr [rbp - 96], r14       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 112], r15      # 8-byte Folded Spill
	sbb	qword ptr [rbp - 88], r13       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 80], r12       # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_851
# %bb.256:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_257:                              # %OP919.JUMPDEST
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rdi, r8
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r11 + rdi - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + rdi - 16]
	vmovaps	xmm2, xmmword ptr [r11 + rdi - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rdi - 80]
	vmovdqa	xmmword ptr [r11 + rdi - 80], xmm1
	vmovaps	xmmword ptr [r11 + rdi - 96], xmm0
	lea	rbx, [r11 + rdi]
	mov	rdx, qword ptr [r11 + rdi - 56]
	mov	rax, qword ptr [r11 + rdi - 40]
	mov	rcx, qword ptr [r11 + rdi - 48]
	vmovaps	xmmword ptr [r11 + rdi - 48], xmm3
	mov	rsi, qword ptr [r11 + rdi - 64]
	vmovaps	xmmword ptr [r11 + rdi - 64], xmm2
	mov	qword ptr [r11 + rdi - 16], rcx
	mov	qword ptr [r11 + rdi - 32], rsi
	mov	qword ptr [r11 + rdi - 8], rax
	mov	qword ptr [r11 + rdi - 24], rdx
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi + 8], rdx
	lea	r10, [r8 + 2]
	lea	r9, [r8 + 3]
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	r8, r10
	shl	r8, 5
	lea	r10, [r11 + r8]
	add	rsi, 31
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [r11 + r9], rsi
	mov	qword ptr [r11 + r9 + 8], rdx
	mov	qword ptr [r11 + r9 + 16], rcx
	mov	qword ptr [r11 + r9 + 24], rax
	and	rsi, -32
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r11 + rdi + 48], rcx
	mov	qword ptr [r11 + rdi + 40], rdx
	mov	qword ptr [r11 + rdi + 32], rsi
	mov	qword ptr [r11 + rdi + 56], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	lea	r8, [r11 + r9]
	mov	r14, qword ptr [r12 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	r9, r14
	cmp	rdi, 95
	jbe	.LBB5_1094
.LBB5_258:                              # %OP934.MLOAD.contd
	mov	rdi, qword ptr [r14 + 8]
	mov	r14, qword ptr [rdi + r13 + 88]
	mov	r12, qword ptr [rdi + r13 + 80]
	mov	r11, qword ptr [rdi + r13 + 64]
	mov	r13, qword ptr [rdi + r13 + 72]
	movbe	qword ptr [rbx + 32], r14
	bswap	r14
	movbe	qword ptr [rbx + 48], r13
	bswap	r13
	movbe	qword ptr [rbx + 56], r11
	bswap	r11
	movbe	qword ptr [rbx + 40], r12
	bswap	r12
	add	r14, rsi
	adc	r12, rdx
	adc	r13, rcx
	adc	r11, rax
	mov	qword ptr [r10], r14
	mov	qword ptr [r10 + 16], r13
	mov	qword ptr [r10 + 8], r12
	mov	qword ptr [r10 + 24], r11
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r15, qword ptr [r9 + 48]
	sub	rax, r15
	cmp	rax, 95
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	jbe	.LBB5_1096
.LBB5_259:                              # %OP940.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r15 + 88], r14
	movbe	qword ptr [rax + r15 + 80], r12
	movbe	qword ptr [rax + r15 + 72], r13
	movbe	qword ptr [rax + r15 + 64], r11
	mov	r14, qword ptr [rbx + 32]
	mov	rax, qword ptr [rbx + 48]
	mov	rdx, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	vmovdqa	xmm0, xmmword ptr [rbx - 64]
	vmovdqa	xmm1, xmmword ptr [rbx - 48]
	vmovaps	xmm2, xmmword ptr [rbx - 32]
	vmovaps	xmm3, xmmword ptr [rbx - 16]
	mov	qword ptr [rbx - 40], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 48], rax
	mov	qword ptr [rbx - 64], r14
	vmovdqa	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	r11, qword ptr [rbx + 16]
	mov	r12, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 24]
	vmovaps	xmmword ptr [rbx + 16], xmm3
	vmovaps	xmmword ptr [rbx], xmm2
	mov	qword ptr [rbx + 56], rsi
	mov	qword ptr [rbx + 40], rdi
	mov	qword ptr [rbx + 32], r12
	mov	qword ptr [rbx + 48], r11
	mov	qword ptr [r10 + 24], rcx
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rax
	mov	qword ptr [r10], r14
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	qword ptr [r8 + 8], rdi
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	qword ptr [r8 + 24], rsi
	mov	qword ptr [r8], r12
	mov	qword ptr [r8 + 16], r11
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 136], rdx
	mov	qword ptr [rbx + 128], r14
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rdi, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	ja	.LBB5_1276
.LBB5_260:                              # %OP948.PUSH1
	add	r13, qword ptr [r15 + 8]
	movbe	qword ptr [r14 + r13 + 24], r12
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	movbe	qword ptr [r14 + r13 + 8], r11
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r14 + r13], rax
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	lea	r12, [rcx + 5]
	mov	rdx, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10 + 16]
	mov	rdi, qword ptr [r10]
	mov	rsi, qword ptr [r10 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r10], rdi
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 8], rsi
	mov	qword ptr [r10 + 24], rdx
	mov	r11, qword ptr [rbx - 32]
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	r8, qword ptr [rbx - 16]
	mov	r9, qword ptr [rbx - 24]
	mov	r10, qword ptr [rbx - 8]
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rax + 24], r10
	mov	qword ptr [rax + 8], r9
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax], r11
	mov	r11, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx]
	mov	r15, qword ptr [rbx + 8]
	mov	r13, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 152], r13
	mov	qword ptr [rbx + 136], r15
	mov	qword ptr [rbx + 144], r11
	mov	qword ptr [rbx + 128], r14
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	shl	r12, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r12 + 24], r13
	mov	qword ptr [rax + r12 + 16], r11
	mov	qword ptr [rax + r12 + 8], r15
	mov	qword ptr [rax + r12], r14
	mov	qword ptr [rbx + 216], r10
	mov	qword ptr [rbx + 208], r8
	mov	qword ptr [rbx + 200], r9
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	qword ptr [rbx + 192], r8
	mov	qword ptr [rbx + 248], rdx
	mov	qword ptr [rbx + 240], rcx
	mov	qword ptr [rbx + 232], rsi
	mov	qword ptr [rbx + 224], rdi
	lea	r14, [rax + r12]
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r15
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.261:                              # %OP956.PUSH1
	mov	rax, qword ptr [rbx + 88]
	mov	r12, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 80]
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], r12
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	add	r12, qword ptr [rbx + 128]
	adc	rdx, qword ptr [rbx + 136]
	adc	rcx, qword ptr [rbx + 144]
	adc	rax, qword ptr [rbx + 152]
	mov	r10, qword ptr [rbp - 120]      # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [r10]
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [r10], ymm1
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11], ymm0
	mov	qword ptr [rbx + 152], rax
	mov	qword ptr [rbx + 144], rcx
	mov	qword ptr [rbx + 136], rdx
	mov	qword ptr [rbx + 128], r12
	mov	r14, qword ptr [r15 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rdi, r15
	mov	rsi, r12
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, r11
	ja	.LBB5_1097
.LBB5_262:                              # %OP963.POP
	add	r15, qword ptr [r14 + 8]
	vmovdqu	ymmword ptr [r12 + r15], ymm1
	vmovdqu	ymm0, ymmword ptr [rbx + 32]
	vmovdqa	xmm1, xmmword ptr [rbx - 64]
	vmovaps	xmm2, xmmword ptr [rbx - 48]
	mov	rax, qword ptr [rbx - 136]
	mov	rdx, qword ptr [rbx - 160]
	mov	rsi, qword ptr [rbx - 152]
	mov	rcx, qword ptr [rbx - 144]
	vmovaps	xmmword ptr [rbx - 144], xmm2
	vmovdqa	xmmword ptr [rbx - 160], xmm1
	mov	rdi, qword ptr [rbx - 120]
	mov	r11, qword ptr [rbx - 104]
	mov	r14, qword ptr [rbx - 128]
	mov	r12, qword ptr [rbx - 112]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [rbx - 112], rcx
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	qword ptr [rbx - 128], rdx
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [rbx - 104], rax
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [rbx - 120], rsi
	mov	r8, qword ptr [rbx - 72]
	mov	rsi, qword ptr [rbx - 96]
	mov	rcx, qword ptr [rbx - 80]
	mov	qword ptr [rbx - 80], r12
	mov	qword ptr [rbx - 96], r14
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	mov	qword ptr [rbx - 72], r11
	mov	rdx, qword ptr [rbx - 88]
	mov	r15, rdi
	mov	qword ptr [rbx - 88], rdi
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 32], rsi
	mov	qword ptr [rbx + 56], r8
	mov	qword ptr [rbx + 40], rdx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 24], r8
	mov	qword ptr [r10], rsi
	mov	qword ptr [r10 + 8], rdx
	mov	rax, rsi
	add	rax, 32
	mov	rdi, rdx
	adc	rdi, 0
	mov	qword ptr [rbx - 56], rdi
	mov	qword ptr [rbx - 64], rax
	mov	rax, rcx
	adc	rax, 0
	mov	qword ptr [rbx - 48], rax
	mov	rax, r8
	adc	rax, 0
	mov	qword ptr [rbx - 40], rax
	vmovdqu	ymmword ptr [r9], ymm0
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1968]
	push	qword ptr [r13 + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	r8, qword ptr [rbp - 1944]
	mov	rcx, qword ptr [rbp - 1952]
	mov	rsi, qword ptr [rbp - 1968]
	mov	rdx, qword ptr [rbp - 1960]
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], r8
	mov	qword ptr [rbx - 32], rsi
	mov	qword ptr [rbx - 24], rdx
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 56], r8
	mov	qword ptr [rbx + 32], rsi
	mov	qword ptr [rbx + 40], rdx
	movabs	rax, 4294967297
	cmp	rsi, rax
	mov	rax, rdx
	sbb	rax, 0
	mov	rax, rcx
	sbb	rax, 0
	mov	rax, r8
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	jae	.LBB5_850
# %bb.263:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 144]       # 8-byte Reload
.LBB5_264:                              # %OP986.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	add	rsi, r14
	adc	rdx, r15
	adc	rcx, r12
	adc	r8, r9
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	r14, rsi
	add	r14, 32
	mov	r15, rdx
	adc	r15, 0
	mov	r13, rcx
	adc	r13, 0
	mov	r12, r8
	adc	r12, 0
	mov	qword ptr [r11 + rax + 32], r14
	mov	qword ptr [r11 + rax + 40], r15
	mov	qword ptr [r11 + rax + 48], r13
	mov	qword ptr [r11 + rax + 56], r12
	cmp	qword ptr [rbp - 96], r14       # 8-byte Folded Reload
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	sbb	rdi, r15
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	sbb	rdi, r13
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	sbb	rdi, r12
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_849
# %bb.265:
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_266:                              # %OP1000.JUMPDEST
	lea	rax, [rbx + 1]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1936]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1936]
	mov	rcx, qword ptr [rbp - 1928]
	mov	rdx, qword ptr [rbp - 1920]
	mov	rdi, qword ptr [rbp - 1912]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r12
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r13
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r15
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r14
	add	r14, rax
	adc	r15, rcx
	adc	r13, rdx
	adc	r12, rdi
	cmp	qword ptr [rbp - 96], r14       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 112], r15      # 8-byte Folded Spill
	sbb	qword ptr [rbp - 88], r13       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 80], r12       # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_834
# %bb.267:
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_268:                              # %OP1024.JUMPDEST
	mov	rdi, r8
	shl	rdi, 5
	lea	r15, [r11 + rdi]
	vmovaps	xmm0, xmmword ptr [r11 + rdi - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + rdi - 16]
	vmovaps	xmm2, xmmword ptr [r11 + rdi - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rdi - 80]
	vmovdqa	xmmword ptr [r11 + rdi - 80], xmm1
	vmovaps	xmmword ptr [r11 + rdi - 96], xmm0
	mov	rdx, qword ptr [r11 + rdi - 56]
	mov	rax, qword ptr [r11 + rdi - 40]
	mov	rsi, qword ptr [r11 + rdi - 64]
	mov	rcx, qword ptr [r11 + rdi - 48]
	vmovaps	xmmword ptr [r11 + rdi - 48], xmm3
	vmovaps	xmmword ptr [r11 + rdi - 64], xmm2
	mov	qword ptr [r11 + rdi - 16], rcx
	mov	qword ptr [r11 + rdi - 32], rsi
	mov	qword ptr [r11 + rdi - 8], rax
	mov	qword ptr [r11 + rdi - 24], rdx
	lea	r14, [r8 + 1]
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi + 8], rdx
	lea	rbx, [r8 + 2]
	mov	rdi, r14
	shl	rdi, 5
	lea	r10, [r11 + rdi]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	lea	r9, [r8 + 3]
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	mov	r8, rbx
	shl	r8, 5
	lea	rbx, [r11 + r8]
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	add	rsi, 31
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [r11 + r9], rsi
	mov	qword ptr [r11 + r9 + 16], rcx
	mov	qword ptr [r11 + r9 + 8], rdx
	mov	qword ptr [r11 + r9 + 24], rax
	and	rsi, -32
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r11 + rdi], rsi
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi + 8], rdx
	mov	qword ptr [r11 + rdi + 24], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	lea	r8, [r11 + r9]
	mov	rbx, qword ptr [r12 + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rdi, r13
	mov	r9, rbx
	cmp	rdi, 95
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	jbe	.LBB5_1075
.LBB5_269:                              # %OP1039.MLOAD.contd
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdi, qword ptr [rbx + 8]
	mov	rbx, qword ptr [rdi + r13 + 88]
	mov	r14, qword ptr [rdi + r13 + 80]
	mov	r11, qword ptr [rdi + r13 + 64]
	mov	r13, qword ptr [rdi + r13 + 72]
	movbe	qword ptr [r10], rbx
	bswap	rbx
	movbe	qword ptr [r10 + 16], r13
	bswap	r13
	movbe	qword ptr [r10 + 24], r11
	bswap	r11
	movbe	qword ptr [r10 + 8], r14
	bswap	r14
	add	rbx, rsi
	adc	r14, rdx
	adc	r13, rcx
	adc	r11, rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax], rbx
	mov	qword ptr [rax + 16], r13
	mov	qword ptr [rax + 8], r14
	mov	qword ptr [rax + 24], r11
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r12, qword ptr [r9 + 48]
	sub	rax, r12
	cmp	rax, 95
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	jbe	.LBB5_1248
.LBB5_270:                              # %OP1045.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r12 + 88], rbx
	movbe	qword ptr [rax + r12 + 80], r14
	movbe	qword ptr [rax + r12 + 72], r13
	movbe	qword ptr [rax + r12 + 64], r11
	mov	rax, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10 + 16]
	mov	rbx, qword ptr [r10]
	mov	rdx, qword ptr [r10 + 8]
	mov	rsi, qword ptr [r15 - 64]
	mov	rdi, qword ptr [r15 - 56]
	mov	r8, qword ptr [r15 - 40]
	mov	r9, qword ptr [r15 - 48]
	mov	qword ptr [r15 - 64], rbx
	mov	qword ptr [r15 - 48], rcx
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 40], rax
	mov	r12, qword ptr [r15 - 24]
	mov	r11, qword ptr [r15 - 32]
	mov	r14, qword ptr [r15 - 8]
	mov	r13, qword ptr [r15 - 16]
	mov	qword ptr [r15 - 16], r9
	mov	qword ptr [r15 - 8], r8
	mov	qword ptr [r15 - 32], rsi
	mov	qword ptr [r15 - 24], rdi
	mov	rsi, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	mov	r8, qword ptr [r15 + 16]
	mov	r9, qword ptr [r15 + 24]
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15 + 24], r14
	mov	qword ptr [r15], r11
	mov	qword ptr [r15 + 8], r12
	mov	qword ptr [r10 + 24], r9
	mov	qword ptr [r10 + 16], r8
	mov	qword ptr [r10 + 8], rdi
	mov	qword ptr [r10], rsi
	mov	r12, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rbx
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 152], r9       # 8-byte Spill
	mov	qword ptr [r10 + 24], r9
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	mov	qword ptr [r10 + 16], r8
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	qword ptr [r10 + 8], rdi
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [r10], rsi
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], rbx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	rsi, rbx
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r11, r10
	ja	.LBB5_1077
.LBB5_271:                              # %OP1053.PUSH1
	add	r13, qword ptr [r14 + 8]
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [rbx + r13 + 24], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [rbx + r13 + 16], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [rbx + r13 + 8], rax
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [rbx + r13], rax
	mov	r13, qword ptr [rbp - 96]       # 8-byte Reload
	add	r13, 5
	mov	rdx, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rdx
	mov	rax, qword ptr [r15 - 32]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	r8, qword ptr [r15 - 16]
	mov	r9, qword ptr [r15 - 24]
	mov	r10, qword ptr [r15 - 8]
	mov	qword ptr [r11 + 24], r10
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r11 + 16], r8
	mov	qword ptr [r11], rax
	mov	r11, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15]
	mov	r14, qword ptr [r15 + 8]
	mov	r12, qword ptr [r15 + 24]
	mov	qword ptr [r15 + 152], r12
	mov	qword ptr [r15 + 136], r14
	mov	qword ptr [r15 + 144], r11
	mov	qword ptr [r15 + 128], rbx
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	shl	r13, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13 + 24], r12
	mov	qword ptr [rax + r13 + 16], r11
	mov	qword ptr [rax + r13 + 8], r14
	mov	qword ptr [rax + r13], rbx
	mov	qword ptr [r15 + 216], r10
	mov	qword ptr [r15 + 208], r8
	mov	qword ptr [r15 + 200], r9
	mov	r8, qword ptr [rbp - 112]       # 8-byte Reload
	mov	qword ptr [r15 + 192], r8
	mov	qword ptr [r15 + 248], rdx
	mov	qword ptr [r15 + 240], rcx
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 224], rdi
	lea	rbx, [rax + r13]
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.272:                              # %OP1061.PUSH1
	mov	rsi, r14
	mov	rax, qword ptr [r15 + 88]
	mov	r14, qword ptr [r15 + 64]
	mov	rdx, qword ptr [r15 + 72]
	mov	rcx, qword ptr [r15 + 80]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	add	r14, qword ptr [r15 + 128]
	adc	rdx, qword ptr [r15 + 136]
	adc	rcx, qword ptr [r15 + 144]
	adc	rax, qword ptr [r15 + 152]
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rdi]
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rdi], ymm1
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], r14
	mov	rbx, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r12, qword ptr [rbx + 48]
	sub	rdi, r12
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_1078
.LBB5_273:                              # %OP1068.POP
	add	r12, qword ptr [rbx + 8]
	vmovdqu	ymmword ptr [r14 + r12], ymm1
	mov	rbx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [r15 - 64]
	mov	r8, qword ptr [r15 - 48]
	mov	r9, qword ptr [r15 - 56]
	mov	r10, qword ptr [r15 - 40]
	mov	qword ptr [r15 - 56], rsi
	mov	qword ptr [r15 - 40], rcx
	mov	qword ptr [r15 - 48], rax
	mov	qword ptr [r15 - 64], rdx
	vmovups	ymm0, ymmword ptr [r15 - 160]
	mov	qword ptr [r15 - 136], r10
	mov	qword ptr [r15 - 152], r9
	mov	qword ptr [r15 - 144], r8
	mov	qword ptr [r15 - 160], rdi
	vmovups	ymmword ptr [rbx], ymm0
	mov	rsi, qword ptr [r15 - 96]
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	r14, qword ptr [r15 - 88]
	mov	r12, qword ptr [r15 - 80]
	mov	r13, qword ptr [r15 - 72]
	mov	qword ptr [r15 - 8], r13
	mov	qword ptr [r15 - 16], r12
	mov	qword ptr [r15 - 24], r14
	mov	qword ptr [r15 - 32], rsi
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 4432]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	movzx	eax, byte ptr [rbp - 4432]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r15], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 - 120], xmm0
	mov	qword ptr [r15 - 128], rax
	mov	qword ptr [r15 - 104], 0
	mov	qword ptr [r15 - 8], r13
	mov	qword ptr [r15 - 16], r12
	mov	qword ptr [r15 - 24], r14
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r15 - 32], rsi
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	qword ptr [r15 - 40], r8
	mov	qword ptr [r15 - 48], rcx
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 64], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 4176]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 96]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4160]
	mov	rcx, qword ptr [rbp - 4176]
	mov	rdx, qword ptr [rbp - 4168]
	mov	esi, 4294967295
	mov	qword ptr [r15 - 48], rsi
	mov	qword ptr [r15 - 40], 0
	mov	qword ptr [r15 - 56], -1
	mov	qword ptr [r15 - 64], -1
	mov	qword ptr [r15 - 88], rdx
	mov	qword ptr [r15 - 80], rax
	mov	qword ptr [r15 - 96], rcx
	mov	qword ptr [r15 - 72], 0
	mov	qword ptr [r15 - 8], r13
	mov	qword ptr [rbp - 120], r14      # 8-byte Spill
	mov	qword ptr [r15 - 24], r14
	mov	qword ptr [r15 - 16], r12
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r15 - 32], rsi
	mov	qword ptr [rbx + 8], r14
	mov	qword ptr [rbx + 24], r13
	mov	qword ptr [rbx + 16], r12
	mov	qword ptr [rbx], rsi
	add	rsi, 64
	adc	r14, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	qword ptr [r15 + 8], r14
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 16], rcx
	sub	rsp, 8
	lea	rdi, [rbp - 4144]
	mov	rdx, r14
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 96]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4128]
	mov	rcx, qword ptr [rbp - 4144]
	mov	rdx, qword ptr [rbp - 4136]
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 48], rax
	mov	qword ptr [r15 - 64], rcx
	mov	qword ptr [r15 - 40], 0
	mov	eax, 4294967295
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], -1
	mov	qword ptr [r15], -1
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 24], r13
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 16], r12
	add	rsi, 96
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 4112]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 96]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4096]
	mov	rcx, qword ptr [rbp - 4112]
	mov	rdx, qword ptr [rbp - 4104]
	mov	qword ptr [r15 - 24], rdx
	mov	qword ptr [r15 - 16], rax
	mov	qword ptr [r15 - 32], rcx
	mov	qword ptr [r15 - 8], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14], 128
	mov	qword ptr [r14 + 16], 0
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	add	rsi, 128
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rdx, 0
	adc	r12, 0
	adc	r13, 0
	mov	qword ptr [rbx + 24], r13
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], r12
	mov	qword ptr [rbx], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 1904]
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 96]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1880]
	mov	rcx, qword ptr [rbp - 1904]
	mov	rdx, qword ptr [rbp - 1896]
	mov	rsi, qword ptr [rbp - 1888]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	eax, esi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], 0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_274:                              # %OP3570.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rcx + 1]
	mov	rax, rcx
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	mov	r15, rcx
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3062
# %bb.275:                              # %OP3573.PUSH21
	lea	rdi, [r15 + 2]
	mov	r13, r12
	shl	r13, 5
	movzx	eax, byte ptr [rbx + 20]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r14 + r13], ymm0
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [rbx], rcx
	jne	.LBB5_820
# %bb.276:
	mov	r11, r14
.LBB5_277:                              # %OP3619.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 104]
	mov	rcx, qword ptr [r11 + rbx - 128]
	mov	rdx, qword ptr [r11 + rbx - 120]
	mov	rsi, qword ptr [r11 + rbx - 112]
	mov	r13, r12
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rsi
	mov	qword ptr [r11 + r13], rcx
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_813
.LBB5_278:                              # %OP3663.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 72]
	mov	rcx, qword ptr [r11 + rbx - 96]
	mov	rdx, qword ptr [r11 + rbx - 88]
	mov	rsi, qword ptr [r11 + rbx - 80]
	mov	r13, r12
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rsi
	mov	qword ptr [r11 + r13], rcx
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_806
.LBB5_279:                              # %OP3707.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	rsi, qword ptr [r11 + rbx - 48]
	mov	r13, r12
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rsi
	mov	qword ptr [r11 + r13], rcx
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_799
.LBB5_280:                              # %OP3751.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 32]
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 16]
	mov	r13, r12
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rsi
	mov	qword ptr [r11 + r13], rcx
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_792
# %bb.281:
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_282:                              # %OP3795.JUMPDEST
	mov	rdi, r12
	shl	rdi, 5
	mov	r14, qword ptr [r11 + rdi - 256]
	mov	rdx, qword ptr [r11 + rdi - 248]
	mov	rcx, qword ptr [r11 + rdi - 240]
	mov	rax, qword ptr [r11 + rdi - 232]
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi + 8], rdx
	mov	qword ptr [r11 + rdi], r14
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rsi + 40]
	mov	r8, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13 + 48]
	sub	r8, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r10d, r10d
	mov	r11, rdx
	neg	r11
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rax
	lea	rbx, [r11 + rdi]
	cmovb	rsi, r9
	mov	rdi, r14
	cmp	rsi, r8
	ja	.LBB5_1071
.LBB5_283:                              # %OP3797.MLOAD.contd
	add	r15, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r14 + r15 + 16]
	mov	r8, qword ptr [r14 + r15 + 24]
	mov	r9, qword ptr [r14 + r15]
	mov	r10, qword ptr [r14 + r15 + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_187] # xmm0 = [7192,0,0,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	add	r12, 4
	mov	r11, r12
	shl	r11, 5
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + r11 + 16], rcx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + r11], rdi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + r11 + 24], rax
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + r11 + 8], rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rdi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 72], rdx
	mov	qword ptr [rbx + 80], rcx
	mov	qword ptr [rbx + 88], rax
	movbe	qword ptr [rbx + 112], r10
	movbe	qword ptr [rbx + 120], r9
	movbe	qword ptr [rbx + 96], r8
	movbe	qword ptr [rbx + 104], rsi
	mov	r13, r12
.LBB5_284:                              # %OP10264.JUMPDEST
	lea	rdi, [r13 + 1]
	mov	r12, r13
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12 - 72]
	mov	rcx, qword ptr [r11 + r12 - 96]
	mov	rdx, qword ptr [r11 + r12 - 88]
	mov	rsi, qword ptr [r11 + r12 - 80]
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	lea	r15, [r13 + 2]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	shl	rdi, 5
	lea	r14, [r11 + rdi]
	mov	qword ptr [r11 + rdi + 16], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi], rcx
	mov	qword ptr [r11 + rdi + 8], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3035
# %bb.285:                              # %OP10268.PUSH1
	add	r12, rbx
	add	r13, 3
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	mov	rax, r15
	shl	rax, 5
	lea	r11, [rbx + rax]
	mov	rdi, qword ptr [r14]
	mov	qword ptr [rbp - 112], r13      # 8-byte Spill
	mov	rcx, r13
	shl	rcx, 5
	mov	r9d, edi
	not	r9d
	and	r9d, 1
	shl	r9d, 8
	xor	edx, edx
	mov	rsi, r9
	add	rsi, -1
	mov	r10d, 0
	adc	r10, -1
	mov	r8d, 0
	adc	r8, -1
	adc	rdx, -1
	and	r8, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 128], 256
	mov	qword ptr [r12 + 144], 0
	and	rdx, qword ptr [r14 + 24]
	and	r10, qword ptr [r14 + 8]
	mov	qword ptr [r12 + 152], 0
	mov	qword ptr [r12 + 136], 0
	mov	qword ptr [rbx + rcx], r9
	mov	qword ptr [rbx + rcx + 24], 0
	mov	qword ptr [rbx + rcx + 8], 0
	mov	qword ptr [rbx + rcx + 16], 0
	and	rsi, rdi
	mov	rdi, rdx
	shld	rdi, r8, 63
	shld	r8, r10, 63
	shrd	rsi, r10, 1
	shr	rdx
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rdi
	mov	r15, qword ptr [r12]
	mov	qword ptr [r12], rsi
	mov	rsi, qword ptr [r12 + 24]
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r15
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 8], r9
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rbx + rax], ymm1
	lea	rax, [rbx + rcx]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rdi + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rax, r13
	cmp	rax, 31
	jbe	.LBB5_3085
.LBB5_286:                              # %OP10283.PUSH1
	mov	rax, qword ptr [rbx + 8]
	movbe	qword ptr [rax + r13 + 24], r15
	movbe	qword ptr [rax + r13 + 16], r9
	movbe	qword ptr [rax + r13 + 8], r10
	movbe	qword ptr [rax + r13], rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [r11], ymm1
	mov	rsi, r14
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.287:                              # %OP10286.SWAP1
	mov	rsi, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	rax, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12]
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], r9
	add	r10, 31
	adc	rcx, 0
	adc	rdx, 0
	adc	rax, 0
	mov	r11, rax
	shld	r11, rdx, 59
	shld	rdx, rcx, 59
	shr	rax, 5
	shld	rcx, r10, 59
	add	rcx, r9
	adc	rdx, r8
	adc	r11, rsi
	adc	rax, rdi
	mov	r8, qword ptr [r12 - 48]
	mov	r13, qword ptr [r12 - 64]
	mov	r10, qword ptr [r12 - 56]
	mov	r9, qword ptr [r12 - 40]
	mov	qword ptr [r12 - 56], rdx
	mov	qword ptr [r12 - 40], rax
	mov	qword ptr [r12 - 64], rcx
	mov	qword ptr [r12 - 48], r11
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14], r13
	mov	qword ptr [r14 + 16], r8
	mov	rdx, qword ptr [r12 - 24]
	mov	rax, qword ptr [r12 - 8]
	mov	rcx, qword ptr [r12 - 32]
	mov	rdi, qword ptr [r12 - 16]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_33] # xmm0 = [31,0]
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rsi], ymm0
	xor	esi, esi
	mov	r11d, 31
	cmp	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11d, 0
	sbb	r11, rdi
	sbb	rsi, rax
	setb	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 24], 0
	jae	.LBB5_446
# %bb.288:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 88]       # 8-byte Reload
.LBB5_289:                              # %OP10313.JUMPDEST
	mov	rax, r15
	shl	rax, 5
	lea	rbx, [r11 + rax]
	mov	rcx, qword ptr [r11 + rax - 72]
	mov	rdx, qword ptr [r11 + rax - 80]
	mov	rsi, qword ptr [r11 + rax - 96]
	mov	rdi, qword ptr [r11 + rax - 88]
	shld	rcx, rdx, 1
	shld	rdx, rdi, 1
	shld	rdi, rsi, 1
	lea	rsi, [2*rsi + 1]
	mov	qword ptr [r11 + rax + 24], rcx
	mov	qword ptr [r11 + rax + 16], rdx
	mov	qword ptr [r11 + rax + 8], rdi
	mov	qword ptr [r11 + rax], rsi
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3035
# %bb.290:                              # %OP10321.DUP3
	mov	rdi, qword ptr [rbx - 80]
	mov	rsi, qword ptr [rbx - 72]
	mov	r9, qword ptr [rbx - 96]
	mov	r8, qword ptr [rbx - 88]
	mov	rax, r8
	or	rax, rsi
	mov	rcx, r9
	or	rcx, rdi
	xor	edx, edx
	or	rcx, rax
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], 0
	je	.LBB5_448
# %bb.291:                              # %OP10325.SWAP2
	mov	r14, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rcx, qword ptr [rbx - 16]
	mov	rax, qword ptr [rbx - 8]
	mov	qword ptr [rbx - 72], rax
	mov	qword ptr [rbx - 80], rcx
	mov	qword ptr [rbx - 88], rdx
	mov	qword ptr [rbx - 96], r14
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx], r14
	add	r9, r14
	adc	r8, rdx
	adc	rdi, rcx
	adc	rsi, rax
	mov	qword ptr [rbx - 32], r9
	mov	qword ptr [rbx - 24], r8
	mov	qword ptr [rbx - 16], rdi
	mov	qword ptr [rbx - 8], rsi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_292:                              # %OP10328.JUMPDEST.preheader
	lea	r13, [r15 + 1]
	mov	rbx, r15
	shl	rbx, 5
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rdi
	mov	qword ptr [r11 + r13], r9
	mov	qword ptr [r11 + r13 + 8], r8
	mov	qword ptr [r11 + r13 + 24], rsi
	cmp	r14, r9
	mov	r9, rdx
	sbb	r9, r8
	mov	r8, rcx
	sbb	r8, rdi
	mov	rdi, rax
	sbb	rdi, rsi
	setae	sil
	movzx	esi, sil
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], 0
	mov	qword ptr [r11 + rbx + 24], 0
	mov	qword ptr [r11 + rbx + 8], 0
	jae	.LBB5_743
# %bb.293:                              # %OP10335.DUP3.lr.ph
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	add	rbx, r11
	add	r13, r11
	.p2align	4, 0x90
.LBB5_294:                              # %OP10335.DUP3
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	rdi, r12
	mov	r12, qword ptr [r12 + 40]
	mov	r9, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r9, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, r9
	ja	.LBB5_297
.LBB5_295:                              # %OP10336.MLOAD.contd
                                        #   in Loop: Header=BB5_294 Depth=1
	add	r15, qword ptr [r12 + 8]
	mov	rax, qword ptr [r14 + r15 + 24]
	mov	rcx, qword ptr [r14 + r15 + 16]
	mov	rdx, qword ptr [r14 + r15]
	mov	rsi, qword ptr [r14 + r15 + 8]
	movbe	qword ptr [rbx + 24], rdx
	movbe	qword ptr [rbx + 8], rcx
	movbe	qword ptr [rbx], rax
	movbe	qword ptr [rbx + 16], rsi
	mov	rax, qword ptr [rbx - 48]
	mov	rcx, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 40]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], rcx
	mov	rsi, rbx
	mov	edx, 17
	mov	r12, rdi
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.296:                              # %OP10339.SWAP2
                                        #   in Loop: Header=BB5_294 Depth=1
	mov	rdi, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 8]
	mov	r8, qword ptr [rbx - 16]
	mov	r9, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 72]
	mov	rcx, qword ptr [rbx - 80]
	mov	r14, qword ptr [rbx - 96]
	mov	rdx, qword ptr [rbx - 88]
	add	r14, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx - 96], r14
	mov	qword ptr [rbx - 80], rcx
	mov	qword ptr [rbx - 88], rdx
	mov	qword ptr [rbx - 72], rax
	add	qword ptr [rbx - 64], 1
	adc	qword ptr [rbx - 56], 0
	adc	qword ptr [rbx - 48], 0
	adc	qword ptr [rbx - 40], 0
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r8
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdi
	cmp	r14, r9
	mov	r9, rdx
	sbb	r9, rdi
	mov	rdi, rcx
	sbb	rdi, r8
	mov	rdi, rax
	sbb	rdi, rsi
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 24], 0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jb	.LBB5_294
	jmp	.LBB5_742
.LBB5_297:                              # %resize.i52212
                                        #   in Loop: Header=BB5_294 Depth=1
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_295
	jmp	.LBB5_142
.LBB5_298:                              # %OP241.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	rdi, rax
	xor	rdi, 1553423035
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	jne	.LBB5_372
.LBB5_299:                              # %OP1455.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
.LBB5_300:                              # %OP5370.JUMPDEST
	lea	r14, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.301:                              # %OP5373.PUSH21
	mov	rax, r14
	movzx	ecx, byte ptr [rbx + 20]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	shl	rax, 5
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [rbx - 8]
	mov	rsi, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	r13, qword ptr [rbx - 16]
	mov	qword ptr [r15 + rax + 16], r13
	mov	qword ptr [r15 + rax], rsi
	mov	qword ptr [r15 + rax + 24], rdi
	mov	qword ptr [r15 + rax + 8], rcx
	jmp	.LBB5_1304
.LBB5_302:                              # %OP134.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdi, rdx
	shld	rdi, rcx, 62
	mov	r8, rcx
	shld	r8, rbx, 62
	mov	r9, rbx
	shld	r9, rax, 62
	mov	r10, rdx
	shr	r10, 2
	cmp	r9, 713570425
	sbb	r8, 0
	sbb	rdi, 0
	sbb	r10, 0
	setb	dil
	movzx	edi, dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_228] # ymm0 = [0,0,0,2854281700]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jae	.LBB5_407
.LBB5_303:                              # %OP161.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 40], xmm0
	or	rbx, rdx
	mov	qword ptr [r11 + rsi + 56], 0
	mov	edx, 2697751144
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_227] # ymm1 = [0,0,0,2697751144]
	vmovdqu	ymmword ptr [r11 + rsi + 8], ymm1
	mov	qword ptr [r11 + rsi], rdi
	jne	.LBB5_509
.LBB5_304:                              # %OP1861.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
.LBB5_305:                              # %OP5789.JUMPDEST
	lea	r8, [rax + 1]
	shl	rax, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_54] # ymm0 = [16229640793019261543,5975438654008247698,17626744771222828301,8970164247407462211]
	jmp	.LBB5_1403
.LBB5_306:                              # %OP37.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + 40], xmm0
	mov	qword ptr [r15 + 56], 0
	xor	edx, edx
	cmp	rcx, 2007687011
	setb	dl
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_7] # ymm1 = [0,0,0,4015374022]
	vmovdqu	ymmword ptr [r15 + 8], ymm1
	mov	qword ptr [r15], rdx
	cmp	ecx, 2007687011
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jae	.LBB5_421
# %bb.307:
	xor	ecx, ecx
	xor	esi, esi
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
.LBB5_308:                              # %OP64.JUMPDEST
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	shl	r8, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r8 + 40], xmm0
	or	rbx, rsi
	mov	qword ptr [r11 + r8 + 56], 0
	mov	esi, 3824031246
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_6] # ymm1 = [0,0,0,3824031246]
	vmovdqu	ymmword ptr [r11 + r8 + 8], ymm1
	mov	qword ptr [r11 + r8], rdi
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	jne	.LBB5_550
# %bb.309:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_310:                              # %OP2498.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 287
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_852
# %bb.311:
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	mov	r15, rbx
.LBB5_312:                              # %OP2513.JUMPDEST
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3088]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3072]
	mov	rcx, qword ptr [rbp - 3088]
	mov	rdx, qword ptr [rbp - 3080]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 3056]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3040]
	mov	rcx, qword ptr [rbp - 3056]
	mov	rdx, qword ptr [rbp - 3048]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	add	rbx, 64
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 432]
	mov	rsi, rbx
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, rbx
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 432]
	mov	rcx, qword ptr [rbp - 424]
	mov	rdx, qword ptr [rbp - 408]
	mov	rsi, qword ptr [rbp - 416]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	add	rsi, 96
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 400]
	mov	r9, rbx
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 400]
	mov	rcx, qword ptr [rbp - 392]
	mov	rdx, qword ptr [rbp - 376]
	mov	rsi, qword ptr [rbp - 384]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 48], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 32], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r14
	add	rsi, 128
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 368]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 368]
	mov	rcx, qword ptr [rbp - 360]
	mov	rdx, qword ptr [rbp - 344]
	mov	rsi, qword ptr [rbp - 352]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 80], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 88], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 64], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], r14
	add	rsi, 160
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 336]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 320]
	mov	rcx, qword ptr [rbp - 336]
	mov	rdx, qword ptr [rbp - 328]
	mov	rsi, qword ptr [rbp - 312]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 120], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 104], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 112], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], 255
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	add	rbx, 7
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	add	rsi, 192
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], rcx
	sub	rsp, 8
	lea	rdi, [rbp - 4336]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	movzx	eax, byte ptr [rbp - 4336]
	vpxor	xmm0, xmm0, xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	xmmword ptr [rcx + r15 + 136], xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 128], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	add	rsi, 224
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 304]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 280]
	mov	rcx, qword ptr [rbp - 304]
	mov	rdx, qword ptr [rbp - 296]
	mov	rsi, qword ptr [rbp - 288]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 176], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 160], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 184], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], 256
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	add	rsi, 256
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], r14
	sub	rsp, 8
	lea	rdi, [rbp - 272]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 272]
	mov	rcx, qword ptr [rbp - 264]
	mov	rdx, qword ptr [rbp - 248]
	mov	rsi, qword ptr [rbp - 256]
	mov	qword ptr [r11 + r15 + 208], rsi
	mov	qword ptr [r11 + r15 + 216], rdx
	mov	qword ptr [r11 + r15 + 192], rax
	mov	qword ptr [r11 + r15 + 200], rcx
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_313:                              # %OP6730.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r13, rax
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.314:                              # %OP6733.PUSH21
	shl	r15, 5
	movzx	eax, byte ptr [rbx + 20]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	jne	.LBB5_915
# %bb.315:
	mov	r14, r13
.LBB5_316:                              # %OP6772.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 288]
	mov	rdx, qword ptr [r11 + rax - 280]
	mov	rsi, qword ptr [r11 + rax - 272]
	mov	rdi, qword ptr [r11 + rax - 264]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_266] # xmm0 = [14621,0,0,0]
	jmp	.LBB5_430
.LBB5_317:                              # %OP9179.PUSH2
	add	rax, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_193] # xmm0 = [19669,0,0,0]
	vmovups	ymmword ptr [rax], ymm0
	add	r10, 2
	vmovdqu	ymm0, ymmword ptr [rax - 64]
	vmovdqu	ymmword ptr [rax + 32], ymm0
	jmp	.LBB5_2817
.LBB5_323:                              # %OP315.DUP1
	add	rdx, r11
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 961581905
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_215] # ymm0 = [0,0,0,961581905]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_479
# %bb.324:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_325:                              # %OP1141.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_852
# %bb.326:
	mov	r10, r14
	mov	r15, rbx
.LBB5_327:                              # %OP1156.JUMPDEST
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3792]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3776]
	mov	rcx, qword ptr [rbp - 3792]
	mov	rdx, qword ptr [rbp - 3784]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], 32
	add	rbx, 32
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 1584]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1584]
	mov	rcx, qword ptr [rbp - 1576]
	mov	rdx, qword ptr [rbp - 1560]
	mov	rsi, qword ptr [rbp - 1568]
	mov	qword ptr [r11 + r15 - 16], rsi
	mov	qword ptr [r11 + r15 - 8], rdx
	mov	qword ptr [r11 + r15 - 32], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_328:                              # %OP3940.JUMPDEST
	lea	r13, [rax + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3093
# %bb.329:                              # %OP3943.PUSH1
	mov	r14, r13
	shl	r14, 5
	movzx	eax, byte ptr [rbx + 20]
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [rbx], xmm0
	vmovaps	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	xor	ecx, ecx
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r15 + r14], rcx
	mov	r11, r15
	jne	.LBB5_887
# %bb.330:
	mov	r10, r13
.LBB5_331:                              # %OP3984.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_194] # xmm0 = [4971,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	bswap	rcx
	movbe	rsi, qword ptr [rsi + 148]
	shrd	rcx, rdx, 32
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	qword ptr [r11 + rax + 40], rdx
	mov	qword ptr [r11 + rax + 48], rsi
	mov	qword ptr [r11 + rax + 32], rcx
	mov	qword ptr [r11 + rax + 56], 0
	mov	rcx, qword ptr [r11 + rax - 96]
	mov	rdx, qword ptr [r11 + rax - 88]
	mov	rsi, qword ptr [r11 + rax - 72]
	mov	rdi, qword ptr [r11 + rax - 80]
	mov	qword ptr [r11 + rax + 80], rdi
	mov	qword ptr [r11 + rax + 88], rsi
	mov	qword ptr [r11 + rax + 64], rcx
	mov	qword ptr [r11 + rax + 72], rdx
	add	r10, 4
	mov	rcx, qword ptr [r11 + rax - 56]
	mov	rdx, qword ptr [r11 + rax - 64]
	mov	rsi, qword ptr [r11 + rax - 40]
	mov	rdi, qword ptr [r11 + rax - 48]
	mov	qword ptr [r11 + rax + 112], rdi
	mov	qword ptr [r11 + rax + 120], rsi
	mov	qword ptr [r11 + rax + 96], rdx
	mov	qword ptr [r11 + rax + 104], rcx
.LBB5_332:                              # %OP7929.JUMPDEST
	lea	rcx, [r10 + 1]
	mov	rax, r10
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	rsi, [r10 + 2]
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	shl	rcx, 5
	lea	rdx, [r11 + rcx]
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	lea	r9, [r10 + 3]
	mov	edi, dword ptr [r11 + rax - 80]
	mov	r15, qword ptr [r11 + rax - 96]
	mov	r8, qword ptr [r11 + rax - 88]
	mov	qword ptr [rbp - 168], rsi      # 8-byte Spill
	mov	rax, rsi
	shl	rax, 5
	lea	rdx, [r11 + rax]
	mov	qword ptr [r11 + rcx + 24], 0
	mov	qword ptr [r11 + rcx + 8], 0
	mov	qword ptr [r11 + rcx + 16], 0
	mov	qword ptr [r11 + rcx], 0
	mov	qword ptr [r11 + rax + 8], r8
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax], r15
	mov	qword ptr [r11 + rax + 24], 0
	mov	rax, r9
	shl	rax, 5
	lea	rcx, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rax, r13
	lea	rsi, [r10 + 4]
	cmp	rax, 31
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 160], rsi      # 8-byte Spill
	jbe	.LBB5_1103
.LBB5_333:                              # %OP7938.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + r13 + 24], r15
	movbe	qword ptr [rax + r13 + 16], r8
	movbe	qword ptr [rax + r13 + 8], rdi
	mov	qword ptr [rax + r13], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rdx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_159] # xmm1 = [10,0]
	vmovdqu	ymmword ptr [rcx], ymm1
	mov	rax, rsi
	shl	rax, 5
	vmovups	ymmword ptr [r11 + rax], ymm0
	lea	r8, [r11 + rax]
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	rdi, r12
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	jbe	.LBB5_1104
.LBB5_334:                              # %OP7943.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_195] # ymm0 = [0,0,0,720575940379279360]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	lea	r13, [r10 + 5]
	vmovdqu	ymmword ptr [r8], ymm0
	mov	rax, qword ptr [rbx + 48]
	mov	rcx, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 40]
	mov	rsi, qword ptr [rbx + 56]
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], rsi
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	qword ptr [r11 + r13 + 16], rax
	mov	qword ptr [r11 + r13], rcx
	mov	rsi, r8
	mov	r15, r11
	mov	r12, r10
	mov	r14, r8
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3056
# %bb.335:                              # %OP7947.SWAP4
	add	r12, 6
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	add	r13, r15
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	r11, qword ptr [rbx - 48]
	and	r11, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	rsi, qword ptr [rbx - 64]
	mov	rdi, qword ptr [rbx - 56]
	and	rsi, qword ptr [rbx]
	mov	qword ptr [rbx], rcx
	mov	rcx, qword ptr [rbx - 40]
	and	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rax
	and	rdi, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [r14], rsi
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	qword ptr [r14 + 8], rdi
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	mov	qword ptr [r14 + 24], rcx
	mov	r14, qword ptr [rbx + 32]
	mov	rax, qword ptr [rbx + 48]
	mov	rcx, qword ptr [rbx + 40]
	mov	rdx, qword ptr [rbx + 56]
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13], r14
	mov	qword ptr [r13 + 16], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	r9, qword ptr [r15 + 16]
	mov	r12, qword ptr [r15 + 48]
	sub	r9, r12
	mov	rsi, r14
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_1106
.LBB5_336:                              # %OP7952.SWAP3
	add	r12, qword ptr [r15 + 8]
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r12 + 24], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r14 + r12 + 16], rax
	movbe	qword ptr [r14 + r12 + 8], r11
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r14 + r12], rax
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, qword ptr [r8 + 24]
	mov	rcx, qword ptr [r8 + 16]
	mov	rdx, qword ptr [r8]
	mov	rsi, qword ptr [r8 + 8]
	mov	r11, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx]
	mov	r12, qword ptr [rbx + 8]
	mov	r9, qword ptr [rbx + 24]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rax
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r15, qword ptr [rsi]
	mov	rax, qword ptr [rsi + 16]
	mov	rcx, qword ptr [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rsi + 24], r9
	mov	qword ptr [rbp - 136], r12      # 8-byte Spill
	mov	qword ptr [rsi + 8], r12
	mov	qword ptr [rsi + 16], r11
	mov	qword ptr [rbp - 120], r14      # 8-byte Spill
	mov	qword ptr [rsi], r14
	mov	qword ptr [r8 + 8], rcx
	mov	qword ptr [r8 + 24], rdx
	mov	qword ptr [r8 + 16], rax
	mov	qword ptr [r8], r15
	mov	r12, qword ptr [rdi + 40]
	mov	r9, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	r9, r14
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_1107
.LBB5_337:                              # %OP7955.KECCAK256
	add	r14, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	movbe	qword ptr [r15 + r14 + 8], r11
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r15 + r14], rax
	mov	rsi, rbx
	mov	r12, rdi
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3050
# %bb.338:                              # %OP7956.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3050
# %bb.339:                              # %OP7957.PUSH2
	vmovups	ymm0, ymmword ptr [rbx]
	vmovaps	xmm1, xmmword ptr [rip + .LCPI5_113] # xmm1 = [13459,0,0,0]
	vmovups	ymmword ptr [rbx], ymm1
	mov	rax, qword ptr [rbx - 80]
	mov	rcx, qword ptr [rbx - 96]
	mov	rdx, qword ptr [rbx - 88]
	mov	rsi, qword ptr [rbx - 72]
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rdi + 24], rsi
	mov	qword ptr [rdi + 8], rdx
	mov	qword ptr [rdi + 16], rax
	mov	qword ptr [rdi], rcx
	vmovups	ymm1, ymmword ptr [rbx - 64]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm1
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_219] # xmm1 = [17328,0,0,0]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm1
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx - 32]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB5_2590
.LBB5_340:                              # %OP269.DUP1
	add	rdx, r11
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	rsi, rax
	xor	rsi, 1431022396
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_222] # ymm0 = [0,0,0,1431022396]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	jne	.LBB5_492
# %bb.341:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_342:                              # %OP1389.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_343:                              # %OP1404.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3728]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3712]
	mov	rcx, qword ptr [rbp - 3728]
	mov	rdx, qword ptr [rbp - 3720]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_344:                              # %OP5197.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rcx + 1]
	mov	rax, rcx
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	mov	r12, rcx
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.345:                              # %OP5200.PUSH20
	lea	r8, [r12 + 2]
	mov	r12, r15
	shl	r12, 5
	mov	eax, dword ptr [rbx + 16]
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	movbe	rsi, qword ptr [rsi + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	rcx, qword ptr [rbx + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r12 + 8], rdi
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	r11, r14
	jne	.LBB5_901
.LBB5_346:                              # %OP5238.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 32]
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 16]
	mov	r12, r15
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_865
# %bb.347:
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_348:                              # %OP5282.JUMPDEST
	mov	rbx, r15
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r13, [r15 + 2]
	lea	rsi, [r11 + rbx]
	add	rsi, 32
	vmovdqu	ymmword ptr [r11 + rbx + 32], ymm0
	mov	rdi, r12
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_2988
# %bb.349:                              # %OP5286.PUSH32
	mov	rdi, r12
	add	rbx, r14
	lea	r12, [r15 + 3]
	mov	rax, r13
	shl	rax, 5
	lea	rsi, [r14 + rax]
	mov	rcx, qword ptr [rbx + 56]
	mov	edx, dword ptr [rbx + 52]
	shl	rdx, 32
	mov	r10, qword ptr [rbx - 32]
	mov	r9, qword ptr [rbx - 24]
	mov	r8d, dword ptr [rbx - 16]
	or	r8, rdx
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovups	ymmword ptr [rbx + 32], ymm0
	shl	r12, 5
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [r14 + rax + 24], rcx
	mov	qword ptr [r14 + rax + 8], r9
	mov	qword ptr [r14 + rax + 16], r8
	mov	qword ptr [r14 + rax], r10
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_2988
# %bb.350:                              # %OP5300.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	add	r12, r14
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rax, r13
	cmp	rax, 95
	jbe	.LBB5_3072
.LBB5_351:                              # %OP5301.MLOAD.contd
	mov	rax, qword ptr [r14 + 8]
	mov	rcx, qword ptr [rax + r13 + 88]
	mov	rdx, qword ptr [rax + r13 + 80]
	mov	rsi, qword ptr [rax + r13 + 64]
	mov	rax, qword ptr [rax + r13 + 72]
	mov	r11, qword ptr [rbx + 32]
	mov	r8, qword ptr [rbx + 40]
	mov	r9, qword ptr [rbx + 56]
	mov	r10, qword ptr [rbx + 48]
	and	qword ptr [rbx + 16], r10
	and	qword ptr [rbx + 24], r9
	and	qword ptr [rbx], r11
	and	qword ptr [rbx + 8], r8
	movabs	r8, 4529080275857932232
	mov	qword ptr [rbx + 48], r8
	movabs	r8, -5186877236048155135
	mov	qword ptr [rbx + 56], r8
	movabs	r8, -3772769688748907004
	mov	qword ptr [rbx + 32], r8
	movabs	r8, 3782176714782596696
	jmp	.LBB5_419
.LBB5_352:                              # %OP371.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	xor	rax, 816707615
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_200] # ymm0 = [0,0,0,816707615]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB5_1225
.LBB5_353:                              # %OP716.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_354:                              # %OP3559.JUMPDEST
	lea	r8, [rax + 1]
	shl	rax, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_201] # ymm0 = [1629287684866385609,6891346005080805706,5557266254805274640,7958403348434106751]
	jmp	.LBB5_1403
.LBB5_355:                              # %OP292.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 1117154408
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_207] # ymm1 = [0,0,0,1117154408]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_532
# %bb.356:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_357:                              # %OP1199.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_358:                              # %OP1214.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1648]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1648]
	mov	rcx, qword ptr [rbp - 1640]
	mov	rdx, qword ptr [rbp - 1624]
	mov	rsi, qword ptr [rbp - 1632]
	mov	qword ptr [r8 + rbx - 48], rsi
	mov	qword ptr [r8 + rbx - 40], rdx
	mov	qword ptr [r8 + rbx - 64], rax
	mov	qword ptr [r8 + rbx - 56], rcx
	mov	rcx, r14
.LBB5_359:                              # %OP4498.JUMPDEST
	lea	r15, [rcx + 1]
	mov	rax, rcx
	shl	rax, 5
	lea	rbx, [r8 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r8 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r8
	mov	r13, rcx
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.360:                              # %OP4501.PUSH21
	lea	rdx, [r13 + 2]
	mov	rdi, r15
	shl	rdi, 5
	movzx	eax, byte ptr [rbx + 20]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r14 + rdi], ymm0
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jne	.LBB5_908
# %bb.361:
	mov	rsi, r15
.LBB5_362:                              # %OP4540.JUMPDEST
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r15d, dword ptr [rax + 164]
	movbe	rdi, qword ptr [rax + 156]
	bswap	r15
	shrd	r15, rdi, 32
	movbe	r12, qword ptr [rax + 148]
	shrd	rdi, r12, 32
	shr	r12, 32
	mov	rax, r8
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	mov	rcx, rsi
	shl	rcx, 5
	lea	rsi, [r11 + rcx]
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 0
	mov	qword ptr [r11 + rcx + 8], rdi
	mov	qword ptr [r11 + rcx + 16], r12
	mov	qword ptr [r11 + rcx], r15
	mov	qword ptr [r11 + rcx + 24], 0
	lea	rax, [r8 + 3]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, rdx
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 0
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [r14 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rax, r13
	cmp	rax, 31
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	jbe	.LBB5_1132
.LBB5_363:                              # %OP4546.PUSH1
	mov	rax, qword ptr [rbx + 8]
	movbe	qword ptr [rax + r13 + 24], r15
	movbe	qword ptr [rax + r13 + 16], rdi
	movbe	qword ptr [rax + r13 + 8], r12
	mov	qword ptr [rax + r13], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_202] # xmm0 = [12,0,0,0]
	vmovups	ymmword ptr [rsi], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	mov	rbx, qword ptr [r14 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rax, r13
	cmp	rax, 63
	jbe	.LBB5_1133
.LBB5_364:                              # %OP4549.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_203] # ymm0 = [0,0,0,864691128455135232]
	vmovups	ymmword ptr [rax + r13 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rsi], ymm0
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymm1, ymmword ptr [r13]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rbx, rsi
	vmovdqu	ymmword ptr [rsi], ymm1
	mov	rdi, r14
	mov	rsi, r13
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1134
# %bb.365:                              # %OP4552.SLOAD
	mov	rdi, r14
	mov	rsi, r13
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1134
# %bb.366:                              # %OP4553.PUSH1
	xor	eax, eax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	mov	rcx, rbx
	vmovdqu	ymmword ptr [rbx], ymm0
	movzx	ecx, byte ptr [r13]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], 0
	test	rcx, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	je	.LBB5_872
.LBB5_367:                              # %OP4595.JUMPDEST
	shl	rcx, 5
	mov	qword ptr [r11 + rcx + 8], rdx
	mov	qword ptr [r11 + rcx], r15
	mov	qword ptr [r11 + rcx + 16], r12
	mov	qword ptr [r11 + rcx + 24], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_212] # xmm0 = [9106,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	qword ptr [r11 + rcx + 72], rdx
	mov	qword ptr [r11 + rcx + 64], r15
	mov	qword ptr [r11 + rcx + 80], r12
	mov	qword ptr [r11 + rcx + 88], rax
	jmp	.LBB5_431
.LBB5_368:                              # %OP348.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 903454517
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_20] # ymm1 = [0,0,0,903454517]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	jne	.LBB5_564
.LBB5_369:                              # %OP1110.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_186] # xmm0 = [1921,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
.LBB5_370:                              # %OP3916.JUMPDEST
	lea	r14, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	je	.LBB5_1303
	jmp	.LBB5_371
.LBB5_372:                              # %OP246.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 1889567281
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_14] # ymm1 = [0,0,0,1889567281]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	jne	.LBB5_567
# %bb.373:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_374:                              # %OP1459.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_375:                              # %OP1474.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 4208]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r10, r14
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4192]
	mov	rcx, qword ptr [rbp - 4208]
	mov	rdx, qword ptr [rbp - 4200]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
.LBB5_376:                              # %OP5380.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_172] # xmm0 = [10986,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	add	r10, 3
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm0
	jmp	.LBB5_2817
.LBB5_377:                              # %OP8642.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11], ymm0
	vmovdqu	ymmword ptr [rsi - 32], ymm0
	add	rsi, -64
.LBB5_378:                              # %OP626.PUSH1
	mov	rdi, r12
.LBB5_379:                              # %OP626.PUSH1
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_965
.LBB5_380:                              # %select.end56256
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_381:                              # %OP185.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	xor	rdi, rax
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	jne	.LBB5_577
.LBB5_382:                              # %OP1696.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_186] # xmm0 = [1921,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
.LBB5_383:                              # %OP5653.JUMPDEST
	lea	r15, [r14 + 1]
	mov	rax, r14
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r13, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
.LBB5_384:                              # %OP3936.PUSH20
	shl	r15, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [r13 + r15], ymm0
	mov	eax, dword ptr [rbx + 16]
	vmovdqa	xmm0, xmmword ptr [rbx]
	mov	r11, r13
	mov	r13, qword ptr [rbx - 16]
	mov	rsi, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 8]
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	qword ptr [rbx - 16], rax
	mov	qword ptr [rbx - 8], 0
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [rbx + 16], r13
	jmp	.LBB5_24
.LBB5_385:                              # %OP88.DUP1
	add	rdx, r11
	vmovdqu	xmmword ptr [rdx + 40], xmm1
	mov	qword ptr [rdx + 56], 0
	xor	rdi, rax
	or	rdi, rcx
	or	rbx, rsi
	xor	esi, esi
	or	rdi, rbx
	sete	sil
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rsi
	jne	.LBB5_591
# %bb.386:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_387:                              # %OP2327.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 223
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_852
# %bb.388:
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	mov	r15, rbx
.LBB5_389:                              # %OP2342.JUMPDEST
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3280]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3264]
	mov	rcx, qword ptr [rbp - 3280]
	mov	rdx, qword ptr [rbp - 3272]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 3248]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3232]
	mov	rcx, qword ptr [rbp - 3248]
	mov	rdx, qword ptr [rbp - 3240]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	add	rbx, 64
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 880]
	mov	rsi, rbx
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, rbx
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 880]
	mov	rcx, qword ptr [rbp - 872]
	mov	rdx, qword ptr [rbp - 856]
	mov	rsi, qword ptr [rbp - 864]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	add	rsi, 96
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 848]
	mov	r9, rbx
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 832]
	mov	rcx, qword ptr [rbp - 848]
	mov	rdx, qword ptr [rbp - 840]
	mov	rsi, qword ptr [rbp - 824]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 56], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 40], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], 255
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	add	rbx, 5
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	add	rsi, 128
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	sub	rsp, 8
	lea	rdi, [rbp - 4368]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	movzx	eax, byte ptr [rbp - 4368]
	vpxor	xmm0, xmm0, xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	xmmword ptr [rcx + r15 + 72], xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 64], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	add	rsi, 160
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 816]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 792]
	mov	rcx, qword ptr [rbp - 816]
	mov	rdx, qword ptr [rbp - 808]
	mov	rsi, qword ptr [rbp - 800]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 112], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 96], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 120], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], 192
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	add	rsi, 192
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r14
	sub	rsp, 8
	lea	rdi, [rbp - 784]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 784]
	mov	rcx, qword ptr [rbp - 776]
	mov	rdx, qword ptr [rbp - 760]
	mov	rsi, qword ptr [rbp - 768]
	mov	qword ptr [r11 + r15 + 144], rsi
	mov	qword ptr [r11 + r15 + 152], rdx
	mov	qword ptr [r11 + r15 + 128], rax
	mov	qword ptr [r11 + r15 + 136], rcx
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_390:                              # %OP6515.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r13, rax
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.391:                              # %OP6518.PUSH21
	shl	r15, 5
	movzx	eax, byte ptr [rbx + 20]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	jne	.LBB5_915
# %bb.392:
	mov	rdi, r13
.LBB5_393:                              # %OP6557.JUMPDEST
	mov	rax, rdi
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_74] # xmm0 = [14139,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 224]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 192]
	vmovups	ymm2, ymmword ptr [r11 + rax - 160]
	vmovups	ymm3, ymmword ptr [r11 + rax - 128]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	vmovups	ymm0, ymmword ptr [r11 + rax - 96]
	vmovups	ymmword ptr [r11 + rax + 160], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 64]
	vmovups	ymmword ptr [r11 + rax + 192], ymm0
	add	rdi, 8
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 224], ymm0
.LBB5_394:                              # %OP8998.JUMPDEST
	mov	rax, rdi
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_74] # xmm0 = [14139,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 224]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 192]
	vmovups	ymm2, ymmword ptr [r11 + rax - 160]
	vmovups	ymm3, ymmword ptr [r11 + rax - 128]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	lea	r14, [r11 + rax]
	lea	rcx, [rdi + 6]
	mov	r9, qword ptr [r11 + rax - 64]
	mov	r10, qword ptr [r11 + rax - 56]
	mov	r8, qword ptr [r11 + rax - 48]
	mov	rdx, qword ptr [r11 + rax - 40]
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [r11 + rax + 184], rdx
	mov	qword ptr [r11 + rax + 176], r8
	mov	qword ptr [r11 + rax + 168], r10
	mov	qword ptr [r11 + rax + 160], r9
	lea	rsi, [rdi + 7]
	vmovups	ymm0, ymmword ptr [r11 + rax - 32]
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	shl	rcx, 5
	lea	rdx, [r11 + rcx]
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 96]
	mov	qword ptr [rbp - 168], rsi      # 8-byte Spill
	mov	rcx, rsi
	shl	rcx, 5
	lea	rdx, [r11 + rcx]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 256], ymm0
	lea	rbx, [rdi + 9]
	mov	r13, qword ptr [r12 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	cmp	rax, 95
	jbe	.LBB5_1108
.LBB5_395:                              # %OP9008.MLOAD.contd
	mov	qword ptr [rbp - 152], r9       # 8-byte Spill
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	rsi, qword ptr [r13 + 8]
	movbe	rax, qword ptr [rsi + r12 + 64]
	movbe	rcx, qword ptr [rsi + r12 + 72]
	movbe	rdx, qword ptr [rsi + r12 + 80]
	movbe	r13, qword ptr [rsi + r12 + 88]
	add	rdi, 10
	shl	rbx, 5
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 256], r13
	mov	qword ptr [r14 + 272], rcx
	mov	qword ptr [r14 + 264], rdx
	mov	qword ptr [r14 + 280], rax
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx], r13
	mov	qword ptr [r11 + rbx + 24], rax
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	shl	rdi, 5
	mov	qword ptr [r11 + rdi + 16], r8
	mov	qword ptr [r11 + rdi], r9
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + rdi + 24], rsi
	mov	qword ptr [r11 + rdi + 8], r10
	mov	qword ptr [r14 + 368], rcx
	mov	qword ptr [r14 + 352], r13
	mov	qword ptr [r14 + 376], rax
	mov	qword ptr [r14 + 360], rdx
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r8, qword ptr [rsi + 16]
	mov	r15, qword ptr [rsi + 48]
	sub	r8, r15
	mov	rsi, r13
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	lea	r12, [r11 + rbx]
	lea	r9, [r11 + rdi]
	cmovb	rsi, r10
	cmp	rsi, r8
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	ja	.LBB5_1110
.LBB5_396:                              # %OP9015.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 8], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r13 + r15], rax
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	rdi, qword ptr [r14 + 192]
	mov	rsi, qword ptr [r14 + 208]
	mov	r10, qword ptr [r14 + 200]
	mov	r8, qword ptr [r14 + 216]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	qword ptr [r9 + 24], r8
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [r9 + 8], r10
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	qword ptr [r9 + 16], rsi
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	qword ptr [r9], rdi
	mov	qword ptr [r14 + 376], rax
	mov	qword ptr [r14 + 360], rdx
	mov	qword ptr [r14 + 368], rcx
	mov	qword ptr [r14 + 352], r15
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rsi + 40]
	mov	r10, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r10, r13
	mov	rsi, r15
	add	rsi, 32
	mov	rdi, -1
	cmovb	rsi, rdi
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, rdi
	cmp	rsi, r10
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	ja	.LBB5_1111
.LBB5_397:                              # %OP9020.PUSH1
	add	r13, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 8], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + r13], rax
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	rsi, qword ptr [r8]
	movzx	edi, sil
	xor	r10d, r10d
	shl	rsi, 56
	mov	qword ptr [r9 + 24], rsi
	mov	qword ptr [r9 + 16], 0
	mov	qword ptr [r9], 0
	mov	qword ptr [r9 + 8], 0
	mov	qword ptr [r14 + 368], rcx
	mov	qword ptr [r14 + 352], r15
	mov	qword ptr [r14 + 376], rax
	mov	qword ptr [r14 + 360], rdx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rsi + 40]
	mov	r8, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r8, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r10, rax
	cmovb	rsi, r9
	cmp	rsi, r8
	ja	.LBB5_1112
.LBB5_398:                              # %OP9029.PUSH1
	add	r13, qword ptr [rbx + 8]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r13 + 24], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	r8, qword ptr [r12 + 8]
	add	rdx, 1
	adc	r8, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r14 + 160]
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [r14 + 160], rdx
	mov	qword ptr [r14 + 168], r8
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [r14 + 176], rcx
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	qword ptr [r14 + 184], rax
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rbx, qword ptr [rbp - 112]      # 8-byte Reload
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rax, r13
	mov	qword ptr [rbp - 136], r15      # 8-byte Spill
	cmp	rax, 95
	jbe	.LBB5_1114
.LBB5_399:                              # %OP9037.MLOAD.contd
	mov	rdx, qword ptr [r15 + 8]
	mov	r10, qword ptr [rdx + r13 + 88]
	mov	rdi, qword ptr [rdx + r13 + 64]
	mov	rsi, qword ptr [rdx + r13 + 72]
	mov	rax, rdi
	bswap	rax
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rcx, rsi
	bswap	rcx
	mov	r9, qword ptr [rdx + r13 + 80]
	mov	rdx, r9
	bswap	rdx
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	r13, r10
	movbe	qword ptr [rbx + 16], rsi
	movbe	qword ptr [rbx], r10
	movbe	qword ptr [rbx + 24], rdi
	bswap	r13
	movbe	qword ptr [rbx + 8], r9
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + 16], r10
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12], rax
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r12 + 24], r15
	mov	qword ptr [r12 + 8], r8
	sub	rax, r13
	sbb	r8, rdx
	sbb	r10, rcx
	sbb	r15, qword ptr [rbp - 112]      # 8-byte Folded Reload
	add	rax, -32
	adc	r8, -1
	adc	r10, -1
	adc	r15, -1
	mov	r12, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	qword ptr [r12], rax
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	qword ptr [r12 + 24], r15
	movbe	qword ptr [r14 + 272], rsi
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r14 + 256], rax
	movbe	qword ptr [r14 + 280], rdi
	movbe	qword ptr [r14 + 264], r9
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rdi, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10 + 48]
	sub	rdi, r15
	mov	rsi, r13
	add	rsi, 32
	mov	rax, -1
	cmovb	rsi, rax
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, qword ptr [rbp - 112]       # 8-byte Folded Reload
	cmovb	rsi, rax
	cmp	rsi, rdi
	mov	rcx, r10
	ja	.LBB5_3069
.LBB5_400:                              # %OP9045.SWAP1
	add	r15, qword ptr [rcx + 8]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 24], rax
	movbe	qword ptr [r13 + r15 + 16], r8
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 8], rax
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r13 + r15], rax
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [r14 + 176]
	mov	r15, qword ptr [r14 + 160]
	mov	r13, qword ptr [r14 + 168]
	mov	r8, qword ptr [r14 + 184]
	mov	qword ptr [r14 + 168], rsi
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdx
	mov	qword ptr [r14 + 176], rax
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], r13
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbx], r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 95
	jbe	.LBB5_3073
.LBB5_401:                              # %__revmc_ir_builtin_mstore.exit51374.thread
	mov	rax, qword ptr [rbx + 8]
	movbe	qword ptr [rax + r14 + 88], r15
	movbe	qword ptr [rax + r14 + 80], r13
	movbe	qword ptr [rax + r14 + 72], rdi
	movbe	qword ptr [rax + r14 + 64], r8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_402:                              # %OP8327.JUMPDEST
	mov	r9, qword ptr [rbp - 120]       # 8-byte Reload
	lea	r14, [r9 + 1]
	shl	r9, 5
	mov	rax, qword ptr [r11 + r9 - 48]
	mov	ecx, eax
	shr	ecx, 8
	vmovd	xmm0, eax
	vpinsrb	xmm0, xmm0, ecx, 1
	mov	ecx, eax
	shr	ecx, 16
	vpinsrb	xmm0, xmm0, ecx, 2
	mov	ecx, eax
	shr	ecx, 24
	vpinsrb	xmm0, xmm0, ecx, 3
	mov	rcx, rax
	shr	rcx, 32
	vpinsrb	xmm0, xmm0, ecx, 4
	mov	rcx, rax
	shr	rcx, 40
	vpinsrb	xmm0, xmm0, ecx, 5
	mov	rcx, rax
	shr	rcx, 48
	vpinsrb	xmm0, xmm0, ecx, 6
	mov	rcx, rax
	shr	rcx, 56
	vpinsrb	xmm0, xmm0, ecx, 7
	mov	rcx, qword ptr [r11 + r9 - 40]
	vpinsrb	xmm0, xmm0, ecx, 8
	mov	edx, ecx
	shr	edx, 8
	vpinsrb	xmm0, xmm0, edx, 9
	mov	edx, ecx
	shr	edx, 16
	vpinsrb	xmm0, xmm0, edx, 10
	mov	edx, ecx
	shr	edx, 24
	vpinsrb	xmm0, xmm0, edx, 11
	mov	rdx, rcx
	shr	rdx, 32
	vpinsrb	xmm0, xmm0, edx, 12
	mov	rdx, rcx
	shr	rdx, 40
	vpinsrb	xmm0, xmm0, edx, 13
	mov	rdx, rcx
	shr	rdx, 48
	vpinsrb	xmm0, xmm0, edx, 14
	mov	rdx, rcx
	shr	rdx, 56
	vpinsrb	xmm0, xmm0, edx, 15
	mov	rsi, qword ptr [r11 + r9 - 64]
	mov	rdx, qword ptr [r11 + r9 - 56]
	mov	edi, esi
	shr	edi, 8
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, edi, 1
	mov	edi, esi
	shr	edi, 16
	vpinsrb	xmm1, xmm1, edi, 2
	mov	edi, esi
	shr	edi, 24
	vpinsrb	xmm1, xmm1, edi, 3
	mov	rdi, rsi
	shr	rdi, 32
	vpinsrb	xmm1, xmm1, edi, 4
	mov	rdi, rsi
	shr	rdi, 40
	vpinsrb	xmm1, xmm1, edi, 5
	mov	rdi, rsi
	shr	rdi, 48
	vpinsrb	xmm1, xmm1, edi, 6
	mov	rdi, rsi
	shr	rdi, 56
	vpinsrb	xmm1, xmm1, edi, 7
	vpinsrb	xmm1, xmm1, edx, 8
	mov	edi, edx
	shr	edi, 8
	vpinsrb	xmm1, xmm1, edi, 9
	mov	edi, edx
	shr	edi, 16
	vpinsrb	xmm1, xmm1, edi, 10
	mov	edi, edx
	shr	edi, 24
	vpinsrb	xmm1, xmm1, edi, 11
	mov	rdi, rdx
	shr	rdi, 32
	vpinsrb	xmm1, xmm1, edi, 12
	mov	rdi, rdx
	shr	rdi, 40
	vpinsrb	xmm1, xmm1, edi, 13
	mov	rdi, rdx
	shr	rdi, 48
	vpinsrb	xmm1, xmm1, edi, 14
	mov	rdi, rdx
	shr	rdi, 56
	vpinsrb	xmm1, xmm1, edi, 15
	vinserti128	ymm0, ymm1, xmm0, 1
	mov	rdi, r14
	shl	rdi, 5
	vpcmpeqd	ymm1, ymm1, ymm1
	xor	r8d, r8d
	vptest	ymm0, ymm1
	setb	r8b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r9 + 8], xmm0
	mov	qword ptr [r11 + r9], r8
	mov	qword ptr [r11 + r9 + 24], 0
	mov	qword ptr [r11 + rdi], r8
	mov	qword ptr [r11 + rdi + 24], 0
	mov	qword ptr [r11 + rdi + 8], 0
	mov	qword ptr [r11 + rdi + 16], 0
	jb	.LBB5_404
# %bb.403:                              # %OP8334.POP
	mov	r10, r9
	add	r10, r11
	add	rdi, r11
	mov	r9, qword ptr [rbp - 104]       # 8-byte Reload
	cmp	rsi, qword ptr [r9 + 80]
	mov	r8, rdx
	sbb	r8, qword ptr [r9 + 88]
	mov	r8, rax
	sbb	r8, qword ptr [r9 + 96]
	mov	qword ptr [rdi + 16], rax
	mov	qword ptr [rdi], rsi
	mov	rax, rcx
	sbb	rax, qword ptr [r9 + 104]
	mov	qword ptr [rdi + 24], rcx
	mov	qword ptr [rdi + 8], rdx
	setae	al
	movzx	eax, al
	mov	qword ptr [r10], rax
	mov	qword ptr [r10 + 16], 0
	mov	qword ptr [r10 + 24], 0
	mov	qword ptr [r10 + 8], 0
.LBB5_404:                              # %OP8339.JUMPDEST
	lea	rsi, [r14 - 1]
	mov	rax, rsi
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax]
	mov	rdx, qword ptr [r11 + rax + 8]
	or	rdx, qword ptr [r11 + rax + 24]
	or	rcx, qword ptr [r11 + rax + 16]
	or	rcx, rdx
	je	.LBB5_858
# %bb.405:
	mov	r13, rsi
.LBB5_406:                              # %OP8373.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_255] # xmm0 = [18387,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_256] # xmm0 = [18232,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm0
	jmp	.LBB5_2779
.LBB5_407:                              # %OP139.DUP1
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	edi, 2854281700
	xor	rdi, rax
	or	rdi, rcx
	or	rbx, rdx
	xor	edx, edx
	or	rdi, rbx
	sete	dl
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdx
	jne	.LBB5_605
# %bb.408:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_409:                              # %OP1919.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_410:                              # %OP1934.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3568]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3552]
	mov	rcx, qword ptr [rbp - 3568]
	mov	rdx, qword ptr [rbp - 3560]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_411:                              # %OP6001.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rcx + 1]
	mov	rax, rcx
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	mov	r12, rcx
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.412:                              # %OP6004.PUSH20
	lea	r8, [r12 + 2]
	mov	r12, r15
	shl	r12, 5
	mov	eax, dword ptr [rbx + 16]
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	movbe	rsi, qword ptr [rsi + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	rcx, qword ptr [rbx + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r12 + 8], rdi
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	r11, r14
	jne	.LBB5_939
.LBB5_413:                              # %OP6042.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 32]
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 16]
	mov	r12, r15
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_894
# %bb.414:
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_415:                              # %OP6086.JUMPDEST
	mov	rbx, r15
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r13, [r15 + 2]
	lea	rsi, [r11 + rbx]
	add	rsi, 32
	vmovdqu	ymmword ptr [r11 + rbx + 32], ymm0
	mov	rdi, r12
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.416:                              # %OP6090.PUSH32
	mov	rdi, r12
	add	rbx, r14
	lea	r12, [r15 + 3]
	mov	rax, r13
	shl	rax, 5
	lea	rsi, [r14 + rax]
	mov	rcx, qword ptr [rbx + 56]
	mov	edx, dword ptr [rbx + 52]
	shl	rdx, 32
	mov	r10, qword ptr [rbx - 32]
	mov	r9, qword ptr [rbx - 24]
	mov	r8d, dword ptr [rbx - 16]
	or	r8, rdx
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovups	ymmword ptr [rbx + 32], ymm0
	shl	r12, 5
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [r14 + rax + 24], rcx
	mov	qword ptr [r14 + rax + 8], r9
	mov	qword ptr [r14 + rax + 16], r8
	mov	qword ptr [r14 + rax], r10
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.417:                              # %OP6104.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	add	r12, r14
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rax, r13
	cmp	rax, 95
	jbe	.LBB5_3057
.LBB5_418:                              # %OP6105.MLOAD.contd
	mov	rax, qword ptr [r14 + 8]
	mov	rcx, qword ptr [rax + r13 + 88]
	mov	rdx, qword ptr [rax + r13 + 80]
	mov	rsi, qword ptr [rax + r13 + 64]
	mov	rax, qword ptr [rax + r13 + 72]
	mov	r11, qword ptr [rbx + 32]
	mov	r8, qword ptr [rbx + 40]
	mov	r9, qword ptr [rbx + 56]
	mov	r10, qword ptr [rbx + 48]
	and	qword ptr [rbx + 16], r10
	and	qword ptr [rbx + 24], r9
	and	qword ptr [rbx], r11
	and	qword ptr [rbx + 8], r8
	movabs	r8, 8064164383302391726
	mov	qword ptr [rbx + 48], r8
	movabs	r8, -2637174611502369502
	mov	qword ptr [rbx + 56], r8
	movabs	r8, -3922623019939854362
	mov	qword ptr [rbx + 32], r8
	movabs	r8, -8148899848871539786
.LBB5_419:                              # %OP6105.MLOAD.contd
	mov	qword ptr [rbx + 40], r8
	vpxor	xmm0, xmm0, xmm0
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	vmovdqu	ymmword ptr [r8], ymm0
	movbe	qword ptr [r12 + 24], rsi
	movbe	qword ptr [r12 + 16], rax
	movbe	qword ptr [r12 + 8], rdx
	movbe	qword ptr [r12], rcx
	mov	rsi, rbx
	mov	edx, 2
	mov	r12, rdi
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.420:                              # %OP5310.POP
	add	r15, -2
	mov	rax, r15
	shl	rax, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [r11 + rax + 24]
	mov	r13, qword ptr [r11 + rax + 16]
	mov	rsi, qword ptr [r11 + rax]
	mov	rcx, qword ptr [r11 + rax + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jmp	.LBB5_32
.LBB5_421:                              # %OP42.DUP1
	xor	ecx, ecx
	vmovdqu	xmmword ptr [r15 + 40], xmm0
	mov	qword ptr [r15 + 56], 0
	mov	edx, 4015374022
	xor	esi, esi
	cmp	rax, rdx
	sete	sil
	vmovdqu	ymmword ptr [r15 + 8], ymm1
	mov	qword ptr [r15], rsi
	cmp	eax, -279593274
	jne	.LBB5_628
# %bb.422:
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rax, r14
.LBB5_423:                              # %OP2597.JUMPDEST
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r11 + r15 + 32], ymm0
	vmovups	ymmword ptr [r11 + r15 + 64], ymm0
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rsi, 3
	mov	r10, rsi
	shl	rsi, 5
	mov	qword ptr [r11 + rsi + 16], rcx
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 8], rcx
	mov	qword ptr [r11 + rsi + 24], rcx
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	add	rax, -4
	mov	rdx, rcx
	adc	rdx, -1
	mov	rdi, rcx
	adc	rdi, -1
	adc	rcx, -1
	mov	qword ptr [r11 + r15 + 64], rax
	mov	qword ptr [r11 + r15 + 80], rdi
	mov	qword ptr [r11 + r15 + 72], rdx
	mov	qword ptr [r11 + r15 + 88], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_181] # xmm0 = [288,0,0,0]
	vmovdqu	ymmword ptr [r11 + rsi], ymm0
	mov	qword ptr [r11 + r15 + 152], rcx
	mov	qword ptr [r11 + r15 + 144], rdi
	mov	qword ptr [r11 + r15 + 136], rdx
	mov	qword ptr [r11 + r15 + 128], rax
	xor	r8d, r8d
	mov	r9d, 287
	cmp	r9, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	eax, 0
	sbb	rax, rdi
	sbb	r8, rcx
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	jae	.LBB5_963
# %bb.424:
	mov	r15, r10
.LBB5_425:                              # %OP2612.JUMPDEST
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	shl	r15, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 4304]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4288]
	mov	rcx, qword ptr [rbp - 4304]
	mov	rdx, qword ptr [rbp - 4296]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 4272]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4256]
	mov	rcx, qword ptr [rbp - 4272]
	mov	rdx, qword ptr [rbp - 4264]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	add	rbx, 64
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 2288]
	mov	rsi, rbx
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, rbx
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2288]
	mov	rcx, qword ptr [rbp - 2280]
	mov	rdx, qword ptr [rbp - 2264]
	mov	rsi, qword ptr [rbp - 2272]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	add	rsi, 96
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 2256]
	mov	r9, rbx
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2256]
	mov	rcx, qword ptr [rbp - 2248]
	mov	rdx, qword ptr [rbp - 2232]
	mov	rsi, qword ptr [rbp - 2240]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 48], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 32], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r14
	add	rsi, 128
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 2224]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2224]
	mov	rcx, qword ptr [rbp - 2216]
	mov	rdx, qword ptr [rbp - 2200]
	mov	rsi, qword ptr [rbp - 2208]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 80], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 88], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 64], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], r14
	add	rsi, 160
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 2192]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2176]
	mov	rcx, qword ptr [rbp - 2192]
	mov	rdx, qword ptr [rbp - 2184]
	mov	rsi, qword ptr [rbp - 2168]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 120], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 104], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 112], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], 255
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	add	rbx, 7
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], 192
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, rcx
	mov	qword ptr [rax + rbx], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	add	rsi, 192
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], rcx
	sub	rsp, 8
	lea	rdi, [rbp - 4464]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	movzx	eax, byte ptr [rbp - 4464]
	vxorps	xmm0, xmm0, xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovups	xmmword ptr [rcx + r15 + 136], xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 128], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_51] # xmm0 = [224,0,0,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax + r15 + 192], ymm0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	add	rsi, 224
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 2160]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2136]
	mov	rcx, qword ptr [rbp - 2160]
	mov	rdx, qword ptr [rbp - 2152]
	mov	rsi, qword ptr [rbp - 2144]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 176], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 160], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 184], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], 256
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	add	rsi, 256
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], r14
	sub	rsp, 8
	lea	rdi, [rbp - 2128]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2128]
	mov	rcx, qword ptr [rbp - 2120]
	mov	rdx, qword ptr [rbp - 2104]
	mov	rsi, qword ptr [rbp - 2112]
	mov	qword ptr [r11 + r15 + 208], rsi
	mov	qword ptr [r11 + r15 + 216], rdx
	mov	qword ptr [r11 + r15 + 192], rax
	mov	qword ptr [r11 + r15 + 200], rcx
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_426:                              # %OP6996.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r13, rax
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.427:                              # %OP6999.PUSH21
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_109] # ymm0 = [0,0,4294967296,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 16]
	movabs	rdi, 4294967296
	mov	qword ptr [rbx + 16], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r14 + r15 + 16], rax
	mov	qword ptr [r14 + r15], rdx
	mov	qword ptr [r14 + r15 + 24], rcx
	mov	qword ptr [r14 + r15 + 8], rsi
	mov	rdx, rcx
	shld	rdx, rax, 32
	shr	rcx, 32
	mov	qword ptr [rbx], rdx
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	qword ptr [rbx + 8], rcx
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_98] # xmm1 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm1
	shr	rax, 32
	xor	ecx, ecx
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	al, al
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	jne	.LBB5_946
# %bb.428:
	mov	r14, r13
.LBB5_429:                              # %OP7038.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 288]
	mov	rdx, qword ptr [r11 + rax - 280]
	mov	rsi, qword ptr [r11 + rax - 272]
	mov	rdi, qword ptr [r11 + rax - 264]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_182] # xmm0 = [15158,0,0,0]
.LBB5_430:                              # %OP7491.JUMPDEST
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	r14, 3
	mov	qword ptr [r11 + rax + 88], rdi
	mov	qword ptr [r11 + rax + 80], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 64], rcx
.LBB5_431:                              # %OP7491.JUMPDEST
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	mov	rax, r14
	shl	rax, 5
	lea	r14, [r11 + rax]
	mov	edx, dword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	r13, qword ptr [r11 + rax - 24]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	lea	rcx, [r11 + rax - 32]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], r13
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 16], rdx
	mov	qword ptr [r11 + rax + 56], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [r12 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	rax, rbx
	cmp	rax, 31
	jbe	.LBB5_3032
.LBB5_432:                              # %OP7498.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + rbx + 24], rsi
	movbe	qword ptr [rax + rbx + 16], r13
	movbe	qword ptr [rax + rbx + 8], rdx
	mov	qword ptr [rax + rbx], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_83] # xmm0 = [9,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	mov	rbx, qword ptr [r12 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	rax, r15
	cmp	rax, 63
	jbe	.LBB5_1053
.LBB5_433:                              # %OP7501.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_84] # ymm0 = [0,0,0,648518346341351424]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [r14 - 32]
	vmovdqa	xmm1, xmmword ptr [r14 - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [r14 - 32], ymm2
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	rdi, r12
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.434:                              # %OP7504.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.435:                              # %OP7505.PUSH1
	mov	rax, qword ptr [r14 - 8]
	shr	rax, 63
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rsi, qword ptr [r14 - 64]
	mov	rcx, qword ptr [r14 - 56]
	mov	rdi, qword ptr [r14 - 40]
	mov	r13, qword ptr [r14 - 48]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 - 56], xmm0
	mov	qword ptr [r14 - 64], rax
	mov	qword ptr [r14 - 40], 0
	mov	qword ptr [r14 - 16], r13
	mov	qword ptr [r14 - 8], rdi
	mov	qword ptr [r14 - 32], rsi
	mov	qword ptr [r14 - 24], rcx
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
.LBB5_436:                              # %dynamic_jump_table
	dec	r10
.LBB5_437:                              # %dynamic_jump_table
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_438:
	xor	eax, eax
	mov	qword ptr [rbp - 232], rax      # 8-byte Spill
	mov	r11, qword ptr [rbp - 200]      # 8-byte Reload
	mov	rax, qword ptr [rbp - 208]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 224]      # 8-byte Reload
.LBB5_439:                              # %udiv-loop-exit56125
	shld	r11, rbx, 1
	mov	rcx, qword ptr [rbp - 232]      # 8-byte Reload
	or	r11, rcx
	shld	rbx, rax, 1
	or	rbx, rcx
	mov	r12, rbx
	shld	rax, rsi, 1
	or	rax, rcx
	add	rsi, rsi
	or	rsi, rdx
	mov	r15, qword ptr [rbp - 184]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 192]      # 8-byte Reload
	mov	rcx, r11
.LBB5_440:                              # %udiv-end56124
	mov	r10, rax
	mov	qword ptr [rbx + 232], rax
	mov	qword ptr [rbx + 248], rcx
	mov	rax, rsi
	mov	qword ptr [rbx + 224], rsi
	mov	qword ptr [rbx + 240], r12
	mov	r11, rcx
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15]
	mov	r9, qword ptr [r15 + 16]
	mov	r8, qword ptr [r15 + 24]
	imul	r8, rsi
	mov	rdx, rsi
	mulx	rdx, r14, r9
	imul	r9, r10
	add	r9, rdx
	add	r9, r8
	mov	rdx, r12
	mulx	rdx, r8, rdi
	imul	r12, rcx
	imul	r11, rdi
	add	r11, r12
	add	r11, rdx
	add	r8, r14
	adc	r11, r9
	mov	rdx, rdi
	mulx	rsi, r14, rsi
	mov	rdx, rcx
	mulx	r9, rax, rax
	add	rax, rsi
	adc	r9, 0
	mov	rdx, rdi
	mulx	rsi, rdi, r10
	add	rdi, rax
	adc	rsi, r9
	setb	al
	movzx	eax, al
	mov	rdx, rcx
	mulx	r12, r13, r10
	mov	r10, r14
	add	r13, rsi
	adc	r12, rax
	add	r13, r8
	adc	r12, r11
	mov	r11, rdi
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], r12
	mov	qword ptr [r15], r14
	mov	qword ptr [r15 + 16], r13
	mov	rax, qword ptr [rbx + 104]
	mov	rcx, qword ptr [rbx + 120]
	mov	r14, qword ptr [rbx + 96]
	mov	rdx, qword ptr [rbx + 112]
	mov	qword ptr [rbx + 240], rdx
	mov	qword ptr [rbx + 224], r14
	mov	qword ptr [rbx + 248], rcx
	mov	qword ptr [rbx + 232], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	r15, qword ptr [rsi + 48]
	sub	rdi, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_1059
.LBB5_441:                              # %OP2796.SWAP2
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	movbe	qword ptr [r14 + r15 + 24], r10
	movbe	qword ptr [r14 + r15 + 16], r11
	movbe	qword ptr [r14 + r15 + 8], r13
	movbe	qword ptr [r14 + r15], r12
	mov	rax, qword ptr [rbx + 168]
	mov	rcx, qword ptr [rbx + 160]
	mov	rdx, qword ptr [rbx + 184]
	mov	rsi, qword ptr [rbx + 176]
	mov	rdi, qword ptr [rbx + 112]
	mov	r8, qword ptr [rbx + 96]
	mov	r9, qword ptr [rbx + 104]
	mov	r10, qword ptr [rbx + 120]
	mov	qword ptr [rbx + 112], rsi
	mov	qword ptr [rbx + 120], rdx
	mov	qword ptr [rbx + 96], rcx
	mov	qword ptr [rbx + 104], rax
	mov	qword ptr [rbx + 184], r10
	mov	qword ptr [rbx + 160], r8
	mov	qword ptr [rbx + 168], r9
	mov	qword ptr [rbx + 176], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	r11, qword ptr [rbp - 184]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11], ymm0
	add	r8, 32
	adc	r9, 0
	adc	rdi, 0
	adc	r10, 0
	mov	qword ptr [rbx + 104], r9
	mov	qword ptr [rbx + 96], r8
	mov	qword ptr [rbx + 112], rdi
	mov	qword ptr [rbx + 120], r10
	mov	qword ptr [rbx + 184], rdx
	mov	qword ptr [rbx + 176], rsi
	mov	qword ptr [rbx + 168], rax
	mov	qword ptr [rbx + 160], rcx
.LBB5_442:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_443:                              # %OP2837.JUMPDEST
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_444:                              # %OP2837.JUMPDEST
	mov	rdx, qword ptr [rbp - 176]      # 8-byte Reload
	lea	rax, [rdx - 5]
	shl	rdx, 5
	mov	rsi, qword ptr [r11 + rdx - 224]
	mov	rcx, qword ptr [r11 + rdx - 216]
	mov	rdi, qword ptr [r11 + rdx - 200]
	mov	r13, qword ptr [r11 + rdx - 208]
	mov	rdx, rax
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rax, 5
	mov	qword ptr [r11 + rax + 16], r13
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 8], rcx
.LBB5_445:                              # %dynamic_jump_table
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	jmp	.LBB5_32
.LBB5_446:                              # %OP10300.DUP1
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 24], r9
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rsi + 40]
	mov	r11, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	r11, r14
	mov	rsi, r13
	add	rsi, 32
	mov	r15, -1
	cmovb	rsi, r15
	xor	r15d, r15d
	neg	r10
	mov	r10d, 0
	sbb	r10, r8
	sbb	r15, r9
	mov	r8, -1
	cmovb	rsi, r8
	cmp	rsi, r11
	ja	.LBB5_1126
.LBB5_447:                              # %OP10301.MLOAD.contd
	add	r14, qword ptr [rbx + 8]
	mov	sil, 56
	bzhi	rsi, qword ptr [r13 + r14 + 24], rsi
	bswap	rsi
	movbe	r8, qword ptr [r13 + r14 + 16]
	movbe	r9, qword ptr [r13 + r14 + 8]
	movbe	r10, qword ptr [r13 + r14]
	mov	qword ptr [r12 + 136], rdx
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 128], rcx
	mov	qword ptr [r12 + 144], rdi
	shld	rax, rdi, 1
	shld	rdi, rdx, 1
	shld	rdx, rcx, 1
	or	rdx, r8
	or	rdi, r9
	or	rax, r10
	add	rcx, rcx
	or	rcx, rsi
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rsi + 8], rdx
	mov	qword ptr [rsi + 16], rdi
	mov	qword ptr [rsi], rcx
	mov	qword ptr [rsi + 24], rax
	vmovdqu	ymm0, ymmword ptr [r12 - 96]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	r15, qword ptr [rbp - 88]       # 8-byte Reload
	je	.LBB5_448
	jmp	.LBB5_3035
.LBB5_449:                              # %OP7348.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	mov	r9, r12
	cmp	rax, 95
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	jbe	.LBB5_1137
.LBB5_450:                              # %OP7349.MLOAD.contd
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [rsi + r14 + 88]
	mov	rdx, qword ptr [rsi + r14 + 80]
	mov	rax, qword ptr [rsi + r14 + 64]
	mov	rsi, qword ptr [rsi + r14 + 72]
	movbe	qword ptr [rbx + 24], rax
	movbe	qword ptr [rbx + 8], rdx
	movbe	qword ptr [rbx], rcx
	movbe	qword ptr [rbx + 16], rsi
	add	r15, r11
	movabs	rdi, 631482100863729664
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	r12, r8
	shl	r12, 5
	movbe	qword ptr [r11 + r12 + 16], rsi
	mov	rdi, rsi
	bswap	rdi
	movbe	qword ptr [r11 + r12 + 8], rdx
	bswap	rdx
	movbe	qword ptr [r11 + r12], rcx
	mov	rsi, rcx
	bswap	rsi
	movbe	qword ptr [r11 + r12 + 24], rax
	mov	rcx, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9 + 48]
	sub	rcx, r14
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rdi
	bswap	rax
	sbb	r8, rax
	cmovb	rsi, r9
	cmp	rsi, rcx
	ja	.LBB5_1422
.LBB5_451:                              # %OP7353.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r10, [rax + 3]
	add	r12, r11
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	r14, qword ptr [rax + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_44] # xmm0 = [2692334344,0,0,0]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	vmovups	ymmword ptr [rax + r14], ymm0
	mov	rsi, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r13, r8
	add	r13, 4
	mov	rdx, rdi
	adc	rdx, 0
	mov	rax, r9
	adc	rax, 0
	mov	rcx, rsi
	adc	rcx, 0
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r13
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	shl	r10, 5
	add	r8, 36
	adc	rdi, 0
	adc	r9, 0
	adc	rsi, 0
	mov	qword ptr [r12 + 16], r9
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + r10], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 136], rdx
	mov	qword ptr [rbx + 128], r13
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rdi + 40]
	mov	r9, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	r14, qword ptr [rsi + 48]
	sub	r9, r14
	mov	rsi, r13
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r8, rcx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_1139
.LBB5_452:                              # %OP7364.PUSH1
	add	r11, qword ptr [rbp - 104]      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	r14, qword ptr [rax + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_45] # ymm0 = [0,0,0,2305843009213693952]
	vmovups	ymmword ptr [r13 + r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_110] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rax, qword ptr [r12 + 16]
	mov	rsi, qword ptr [r12]
	mov	rcx, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 24]
	mov	qword ptr [rbx + 152], rdx
	mov	qword ptr [rbx + 136], rcx
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 128], rsi
	mov	r13, qword ptr [rdi + 40]
	mov	r10, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13 + 48]
	sub	r10, r14
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r9, rdx
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB5_1140
.LBB5_453:                              # %OP7367.PUSH1
	add	r14, qword ptr [r13 + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_198] # ymm0 = [0,0,0,2594073385365405696]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	vmovdqu	ymmword ptr [rax + r14], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 23006
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 36
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], rsi
	mov	rsi, r11
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1148
# %bb.454:                              # %OP7374.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rdi + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13 + 48]
	sub	rdi, r14
	cmp	rdi, 95
	jbe	.LBB5_1141
.LBB5_455:                              # %OP7380.MLOAD.contd
	mov	r10, qword ptr [r13 + 8]
	mov	r8, qword ptr [r10 + r14 + 88]
	mov	rdi, qword ptr [r10 + r14 + 80]
	mov	r9, qword ptr [r10 + r14 + 64]
	mov	r10, qword ptr [r10 + r14 + 72]
	mov	r11, r9
	bswap	r11
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	r14, r8
	bswap	r14
	sub	rdx, r14
	mov	r14, rdi
	bswap	r14
	sbb	rsi, r14
	mov	r14, r10
	bswap	r14
	sbb	rcx, r14
	sbb	rax, r11
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rax
	movbe	qword ptr [r15 + 16], r10
	movbe	qword ptr [r15], r8
	movbe	qword ptr [r15 + 24], r9
	movbe	qword ptr [r15 + 8], rdi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_457:                              # %OP7392.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	mov	r9, r12
	cmp	rax, 95
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	jbe	.LBB5_1143
.LBB5_458:                              # %OP7393.MLOAD.contd
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [rsi + r14 + 88]
	mov	rdx, qword ptr [rsi + r14 + 80]
	mov	rax, qword ptr [rsi + r14 + 64]
	mov	rsi, qword ptr [rsi + r14 + 72]
	movbe	qword ptr [rbx + 24], rax
	movbe	qword ptr [rbx + 8], rdx
	movbe	qword ptr [rbx], rcx
	movbe	qword ptr [rbx + 16], rsi
	add	r15, r11
	movabs	rdi, 631482100863729664
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	r12, r8
	shl	r12, 5
	movbe	qword ptr [r11 + r12 + 16], rsi
	mov	rdi, rsi
	bswap	rdi
	movbe	qword ptr [r11 + r12 + 8], rdx
	bswap	rdx
	movbe	qword ptr [r11 + r12], rcx
	mov	rsi, rcx
	bswap	rsi
	movbe	qword ptr [r11 + r12 + 24], rax
	mov	rcx, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9 + 48]
	sub	rcx, r14
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rdi
	bswap	rax
	sbb	r8, rax
	cmovb	rsi, r9
	cmp	rsi, rcx
	ja	.LBB5_1145
.LBB5_459:                              # %OP7397.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r10, [rax + 3]
	add	r12, r11
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	r14, qword ptr [rax + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_44] # xmm0 = [2692334344,0,0,0]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	vmovups	ymmword ptr [rax + r14], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rsi, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r13, r8
	add	r13, 4
	mov	rdx, rdi
	adc	rdx, 0
	mov	rax, r9
	adc	rax, 0
	mov	rcx, rsi
	adc	rcx, 0
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r13
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	shl	r10, 5
	add	r8, 36
	adc	rdi, 0
	adc	r9, 0
	adc	rsi, 0
	mov	qword ptr [r12 + 16], r9
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + r10], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 136], rdx
	mov	qword ptr [rbx + 128], r13
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rdi + 40]
	mov	r9, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	r14, qword ptr [rsi + 48]
	sub	r9, r14
	mov	rsi, r13
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r8, rcx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_1146
.LBB5_460:                              # %OP7408.PUSH1
	add	r11, qword ptr [rbp - 104]      # 8-byte Folded Reload
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	r14, qword ptr [rax + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_45] # ymm0 = [0,0,0,2305843009213693952]
	vmovups	ymmword ptr [r13 + r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_72] # xmm0 = [34,0]
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rax, qword ptr [r12 + 16]
	mov	rsi, qword ptr [r12]
	mov	rcx, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 24]
	mov	qword ptr [rbx + 152], rdx
	mov	qword ptr [rbx + 136], rcx
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 128], rsi
	mov	r13, qword ptr [rdi + 40]
	mov	r10, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13 + 48]
	sub	r10, r14
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r9, rdx
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB5_1147
.LBB5_461:                              # %OP7411.PUSH1
	add	r14, qword ptr [r13 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_197] # ymm0 = [0,0,0,2449958197289549824]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	vmovups	ymmword ptr [rax + r14], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r11], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22290
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_72] # xmm0 = [34,0]
	vmovdqu	ymmword ptr [r11], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 160], rdx
	mov	rsi, r11
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1148
# %bb.462:                              # %OP7418.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rax + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13 + 48]
	sub	rax, r14
	cmp	rax, 95
	jbe	.LBB5_1149
.LBB5_463:                              # %OP7424.MLOAD.contd
	mov	rsi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [rsi + r14 + 88]
	mov	rax, qword ptr [rsi + r14 + 80]
	mov	rdx, qword ptr [rsi + r14 + 64]
	mov	rsi, qword ptr [rsi + r14 + 72]
	mov	rdi, rdx
	movbe	qword ptr [r15 + 24], rdx
	movbe	qword ptr [r15 + 8], rax
	movbe	qword ptr [r15], rcx
	movbe	qword ptr [r15 + 16], rsi
	movbe	qword ptr [r12 + 24], rdx
	movbe	qword ptr [r12 + 8], rax
	movbe	qword ptr [r12 + 16], rsi
	movbe	qword ptr [r12], rcx
	bswap	rdi
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx]
	mov	r11, qword ptr [rbx + 16]
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12], r10
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], r8
	mov	r14, rcx
	bswap	r14
	sub	r10, r14
	mov	r14, rax
	bswap	r14
	sbb	r8, r14
	mov	r14, rsi
	bswap	r14
	sbb	r11, r14
	sbb	r9, rdi
	mov	qword ptr [rbx], r10
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [rbx + 24], r9
	movbe	qword ptr [r15 + 16], rsi
	movbe	qword ptr [r15], rcx
	movbe	qword ptr [r15 + 24], rdx
	movbe	qword ptr [r15 + 8], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_464:                              # %OP213.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2293738339
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_245] # ymm0 = [0,0,0,2293738339]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jne	.LBB5_647
# %bb.465:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_466:                              # %OP1511.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, 3
	mov	rdx, qword ptr [r13 + 80]
	mov	rsi, r14
	shl	rsi, 5
	xor	ecx, ecx
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 223
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	jae	.LBB5_1031
# %bb.467:
	mov	r15, r14
.LBB5_468:                              # %OP1526.JUMPDEST
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r13, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r14, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 56], r14
	mov	qword ptr [r11 + r15 + 48], r12
	mov	qword ptr [r11 + r15 + 40], r13
	mov	qword ptr [r11 + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3376]
	mov	rsi, rbx
	mov	rdx, r13
	mov	rcx, r12
	mov	r8, r14
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3360]
	mov	rcx, qword ptr [rbp - 3376]
	mov	rdx, qword ptr [rbp - 3368]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r13
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 3344]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3328]
	mov	r10, qword ptr [rbp - 3344]
	mov	rdx, qword ptr [rbp - 3336]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], r14
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 8], r13
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 16], r12
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15], rbx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rsi + r15 - 16]
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [rsi + r15 - 32]
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rsi + r15 - 24]
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rsi + r15 - 8]
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], r10
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r9
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rdi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], r11
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rax + r15 + 96], rbx
	add	rbx, 64
	mov	rdx, r13
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 1232]
	mov	rsi, rbx
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1232]
	mov	rcx, qword ptr [rbp - 1224]
	mov	rdx, qword ptr [rbp - 1208]
	mov	rsi, qword ptr [rbp - 1216]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 152], r13      # 8-byte Spill
	mov	qword ptr [rax + r15 + 72], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r13
	add	rsi, 96
	adc	r13, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r13
	sub	rsp, 8
	lea	rdi, [rbp - 1200]
	mov	rdx, r13
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, r13
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1200]
	mov	rcx, qword ptr [rbp - 1192]
	mov	rdx, qword ptr [rbp - 1176]
	mov	rsi, qword ptr [rbp - 1184]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 48], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 32], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], rdx
	add	rsi, 128
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 1168]
	mov	r9, r13
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1168]
	mov	rcx, qword ptr [rbp - 1160]
	mov	rdx, qword ptr [rbp - 1144]
	mov	rsi, qword ptr [rbp - 1152]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 80], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 88], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 64], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, r12
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], r12
	mov	rsi, rbx
	add	rsi, 160
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 1136]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1120]
	mov	rcx, qword ptr [rbp - 1136]
	mov	rdx, qword ptr [rbp - 1128]
	mov	rsi, qword ptr [rbp - 1112]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 120], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 104], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 112], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rcx
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	add	rcx, rbx
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	adc	rsi, r12
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rdx, r13
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rdi, r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], rdi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, rbx
	mov	qword ptr [rax + r15 + 160], rbx
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 8
	mov	rax, rcx
	mov	r8, rcx
	add	rax, 224
	mov	rcx, r12
	adc	rcx, 0
	mov	rdx, r13
	adc	rdx, 0
	mov	rsi, r14
	adc	rsi, 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 216], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 200], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 208], rdx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 192], rax
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r8
	mov	qword ptr [rax + rbx], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r13
	add	rsi, 192
	adc	r12, 0
	adc	r13, 0
	adc	r14, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 248], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 232], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 224], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 240], r13
	sub	rsp, 8
	lea	rdi, [rbp - 1104]
	mov	rdx, r12
	mov	rcx, r13
	mov	r8, r14
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1080]
	mov	rcx, qword ptr [rbp - 1104]
	mov	rdx, qword ptr [rbp - 1096]
	mov	rsi, qword ptr [rbp - 1088]
	mov	qword ptr [r11 + r15 + 240], rsi
	mov	qword ptr [r11 + r15 + 224], rcx
	mov	qword ptr [r11 + r15 + 248], rax
	mov	qword ptr [r11 + r15 + 232], rdx
	mov	qword ptr [r11 + r15 + 304], rsi
	mov	qword ptr [r11 + r15 + 288], rcx
	mov	qword ptr [r11 + r15 + 312], rax
	mov	qword ptr [r11 + r15 + 296], rdx
	movabs	rdi, 4294967297
	cmp	rcx, rdi
	sbb	rdx, 0
	sbb	rsi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 16], 0
	mov	qword ptr [r11 + rbx + 8], 0
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_1026
.LBB5_469:                              # %OP1580.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	add	rsi, qword ptr [r11 + rax - 96]
	adc	rdx, qword ptr [r11 + rax - 88]
	mov	rcx, qword ptr [r11 + rax - 16]
	adc	rcx, qword ptr [r11 + rax - 80]
	adc	r8, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	r9, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rbx, qword ptr [r11 + rax - 120]
	mov	r12, rsi
	add	r12, 32
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmp	rdi, r12
	mov	rdi, rbx
	sbb	rdi, r13
	mov	rdi, r9
	sbb	rdi, r14
	mov	r10, qword ptr [r11 + rax - 104]
	mov	rdi, r10
	sbb	rdi, r15
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	qword ptr [r11 + rax + 32], r12
	mov	qword ptr [r11 + rax + 40], r13
	mov	qword ptr [r11 + rax + 48], r14
	mov	qword ptr [r11 + rax + 56], r15
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_1002
# %bb.470:
	mov	qword ptr [rbp - 136], r12      # 8-byte Spill
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_471:                              # %OP1594.JUMPDEST
	lea	r12, [rbx + 1]
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1072]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1072]
	mov	rcx, qword ptr [rbp - 1064]
	mov	rdx, qword ptr [rbp - 1056]
	mov	rdi, qword ptr [rbp - 1048]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rsi, r12
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r15
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r14
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r12
	add	r12, rax
	adc	r13, rcx
	adc	r14, rdx
	adc	r15, rdi
	cmp	qword ptr [rbp - 80], r12       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 112], r13      # 8-byte Folded Spill
	sbb	qword ptr [rbp - 96], r14       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 120], r15      # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_883
# %bb.472:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_473:                              # %OP1618.JUMPDEST
	mov	rdi, r10
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r11 + rdi - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + rdi - 16]
	vmovaps	xmm2, xmmword ptr [r11 + rdi - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rdi - 80]
	vmovdqa	xmmword ptr [r11 + rdi - 80], xmm1
	vmovaps	xmmword ptr [r11 + rdi - 96], xmm0
	lea	r15, [r11 + rdi]
	mov	rdx, qword ptr [r11 + rdi - 56]
	mov	rax, qword ptr [r11 + rdi - 40]
	mov	rcx, qword ptr [r11 + rdi - 48]
	vmovaps	xmmword ptr [r11 + rdi - 48], xmm3
	mov	rsi, qword ptr [r11 + rdi - 64]
	vmovaps	xmmword ptr [r11 + rdi - 64], xmm2
	mov	qword ptr [r11 + rdi - 16], rcx
	mov	qword ptr [r11 + rdi - 32], rsi
	mov	qword ptr [r11 + rdi - 8], rax
	mov	qword ptr [r11 + rdi - 24], rdx
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi + 8], rdx
	lea	r8, [r10 + 2]
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	lea	r9, [r10 + 3]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	shl	r8, 5
	lea	r10, [r11 + r8]
	add	rsi, 31
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [r11 + r9], rsi
	mov	qword ptr [r11 + r9 + 8], rdx
	mov	qword ptr [r11 + r9 + 16], rcx
	mov	qword ptr [r11 + r9 + 24], rax
	and	rsi, -32
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r11 + rdi + 48], rcx
	mov	qword ptr [r11 + rdi + 40], rdx
	mov	qword ptr [r11 + rdi + 32], rsi
	mov	qword ptr [r11 + rdi + 56], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	lea	r8, [r11 + r9]
	mov	rbx, qword ptr [r12 + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rdi, r13
	mov	r9, rbx
	cmp	rdi, 95
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	jbe	.LBB5_1177
.LBB5_474:                              # %OP1633.MLOAD.contd
	mov	rdi, qword ptr [rbx + 8]
	mov	rbx, qword ptr [rdi + r13 + 88]
	mov	r12, qword ptr [rdi + r13 + 80]
	mov	r11, qword ptr [rdi + r13 + 64]
	mov	r13, qword ptr [rdi + r13 + 72]
	movbe	qword ptr [r15 + 32], rbx
	bswap	rbx
	movbe	qword ptr [r15 + 48], r13
	bswap	r13
	movbe	qword ptr [r15 + 56], r11
	bswap	r11
	movbe	qword ptr [r15 + 40], r12
	bswap	r12
	add	rbx, rsi
	adc	r12, rdx
	adc	r13, rcx
	mov	rcx, r11
	adc	rcx, rax
	mov	qword ptr [r10], rbx
	mov	qword ptr [r10 + 16], r13
	mov	qword ptr [r10 + 8], r12
	mov	qword ptr [r10 + 24], rcx
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9 + 48]
	sub	rax, r14
	cmp	rax, 95
	mov	r11, r10
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	jbe	.LBB5_1179
.LBB5_475:                              # %OP1639.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r14 + 88], rbx
	movbe	qword ptr [rax + r14 + 80], r12
	movbe	qword ptr [rax + r14 + 72], r13
	movbe	qword ptr [rax + r14 + 64], rcx
	mov	rbx, qword ptr [r15 + 32]
	mov	rax, qword ptr [r15 + 48]
	mov	rdx, qword ptr [r15 + 40]
	mov	rcx, qword ptr [r15 + 56]
	vmovdqa	xmm0, xmmword ptr [r15 - 64]
	vmovdqa	xmm1, xmmword ptr [r15 - 48]
	vmovaps	xmm2, xmmword ptr [r15 - 32]
	vmovaps	xmm3, xmmword ptr [r15 - 16]
	mov	qword ptr [r15 - 40], rcx
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 48], rax
	mov	qword ptr [r15 - 64], rbx
	vmovdqa	xmmword ptr [r15 - 16], xmm1
	vmovdqa	xmmword ptr [r15 - 32], xmm0
	mov	r10, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 24]
	vmovaps	xmmword ptr [r15 + 16], xmm3
	vmovaps	xmmword ptr [r15], xmm2
	mov	qword ptr [r15 + 56], rsi
	mov	qword ptr [r15 + 40], rdi
	mov	qword ptr [r15 + 32], r14
	mov	qword ptr [r15 + 48], r10
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rdx
	mov	qword ptr [r11 + 16], rax
	mov	qword ptr [r11], rbx
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	qword ptr [r8 + 8], rdi
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	qword ptr [r8 + 24], rsi
	mov	qword ptr [r8], r14
	mov	qword ptr [r8 + 16], r10
	mov	qword ptr [r15 + 152], rcx
	mov	qword ptr [r15 + 144], rax
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], rbx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rdi, r12
	mov	rsi, rbx
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	ja	.LBB5_1180
.LBB5_476:                              # %OP1647.PUSH1
	add	r12, qword ptr [r13 + 8]
	movbe	qword ptr [rbx + r12 + 24], r14
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [rbx + r12 + 16], rax
	movbe	qword ptr [rbx + r12 + 8], r10
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [rbx + r12], rax
	lea	r14, [rcx + 5]
	mov	rdx, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 16]
	mov	rdi, qword ptr [r11]
	mov	rsi, qword ptr [r11 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 16], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rdx
	mov	r11, qword ptr [r15 - 32]
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	r8, qword ptr [r15 - 16]
	mov	r9, qword ptr [r15 - 24]
	mov	r10, qword ptr [r15 - 8]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rax + 24], r10
	mov	qword ptr [rax + 8], r9
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax], r11
	mov	r11, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15]
	mov	r12, qword ptr [r15 + 8]
	mov	r13, qword ptr [r15 + 24]
	mov	qword ptr [r15 + 152], r13
	mov	qword ptr [r15 + 136], r12
	mov	qword ptr [r15 + 144], r11
	mov	qword ptr [r15 + 128], rbx
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	shl	r14, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 24], r13
	mov	qword ptr [rax + r14 + 16], r11
	mov	qword ptr [rax + r14 + 8], r12
	mov	qword ptr [rax + r14], rbx
	mov	qword ptr [r15 + 216], r10
	mov	qword ptr [r15 + 208], r8
	mov	qword ptr [r15 + 200], r9
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [r15 + 192], r8
	mov	qword ptr [r15 + 248], rdx
	mov	qword ptr [r15 + 240], rcx
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 224], rdi
	lea	rbx, [rax + r14]
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.477:                              # %OP1655.PUSH1
	mov	rsi, r14
	mov	rax, qword ptr [r15 + 88]
	mov	r14, qword ptr [r15 + 64]
	mov	rdx, qword ptr [r15 + 72]
	mov	rcx, qword ptr [r15 + 80]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	add	r14, qword ptr [r15 + 128]
	adc	rdx, qword ptr [r15 + 136]
	adc	rcx, qword ptr [r15 + 144]
	adc	rax, qword ptr [r15 + 152]
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rdi]
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rdi], ymm1
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], r14
	mov	rbx, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r12, qword ptr [rbx + 48]
	sub	rdi, r12
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_1181
.LBB5_478:                              # %OP1662.POP
	add	r12, qword ptr [rbx + 8]
	vmovdqu	ymmword ptr [r14 + r12], ymm1
	vmovaps	xmm0, xmmword ptr [r15 + 32]
	vmovaps	xmm1, xmmword ptr [r15 + 48]
	vmovups	ymm2, ymmword ptr [r15 - 64]
	vmovaps	xmmword ptr [r15 - 48], xmm1
	vmovaps	xmmword ptr [r15 - 64], xmm0
	vmovups	ymmword ptr [r15 - 160], ymm2
	vmovdqa	xmm0, xmmword ptr [r15 - 128]
	vmovdqa	xmm1, xmmword ptr [r15 - 112]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_247] # xmm2 = [11286,0]
	vmovups	ymmword ptr [r15 - 128], ymm2
	vmovdqa	xmmword ptr [r15 + 48], xmm1
	vmovdqa	xmmword ptr [r15 + 32], xmm0
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	add	r10, -4
	mov	esi, 11286
	xor	ecx, ecx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	xor	r13d, r13d
	xor	edi, edi
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_479:                              # %OP320.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	xor	rax, 1061922874
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_216] # ymm0 = [0,0,0,1061922874]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB5_1225
.LBB5_480:                              # %OP1168.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_481:                              # %OP3991.JUMPDEST
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [r15 + 1]
	mov	rax, r15
	shl	rax, 5
	lea	rsi, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3070
# %bb.482:                              # %OP3994.PUSH20
	lea	rax, [r15 + 2]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r12, rbx
	shl	r12, 5
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	eax, dword ptr [r8 + 16]
	mov	ecx, dword ptr [r13 + 164]
	movbe	rdx, qword ptr [r13 + 156]
	movbe	rsi, qword ptr [r13 + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [r8]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	rcx, qword ptr [r8 + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r12 + 8], rdi
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [r8], rax
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	qword ptr [r8 + 16], 0
	mov	rax, rbx
	jne	.LBB5_953
# %bb.483:
	mov	r11, r14
	mov	r12, r15
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
.LBB5_484:                              # %OP4038.JUMPDEST
	mov	rbx, r12
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	lea	r14, [r11 + rax]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_2988
# %bb.485:                              # %OP4042.PUSH32
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	add	rbx, r15
	shl	r13, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_217] # ymm0 = [18446744073709551615,18446744073709551615,18446742978492891135,18446744073709551615]
	vmovups	ymmword ptr [r15 + r13], ymm0
	vmovdqa	xmm0, xmmword ptr [r14]
	mov	rax, qword ptr [r14 + 24]
	movabs	rcx, -1095216660481
	and	rcx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rcx
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqa	xmmword ptr [rbx], xmm0
	vmovdqu	ymmword ptr [r14], ymm1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_751
# %bb.486:                              # %OP4046.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	add	r13, r15
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r12, r13
	mov	r13, qword ptr [r15 + 48]
	sub	rax, r13
	cmp	rax, 95
	jbe	.LBB5_1136
.LBB5_487:                              # %OP4047.MLOAD.contd
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [rax + r13 + 88]
	mov	rdx, qword ptr [rax + r13 + 80]
	mov	rsi, qword ptr [rax + r13 + 64]
	mov	rax, qword ptr [rax + r13 + 72]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_218] # ymm0 = [17114573679021415219,15065293549123959057,16113604794790358330,8648466197611687699]
	vmovdqu	ymmword ptr [rbx], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14], ymm0
	movbe	qword ptr [r12 + 24], rsi
	movbe	qword ptr [r12 + 8], rdx
	movbe	qword ptr [r12 + 16], rax
	movbe	qword ptr [r12], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 1
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_751
.LBB5_488:                              # %OP4053.JUMP
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	dec	r8
	mov	rax, r8
	shl	rax, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [r11 + rax + 24]
	mov	r13, qword ptr [r11 + rax + 16]
	mov	rsi, qword ptr [r11 + rax]
	mov	rcx, qword ptr [r11 + rax + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	rax, r8
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_489:                              # %OP116.DUP1
	add	rdx, r11
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 3171951664
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_259] # ymm0 = [0,0,0,3171951664]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	jne	.LBB5_654
.LBB5_490:                              # %OP2160.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_186] # xmm0 = [1921,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
.LBB5_491:                              # %OP6359.JUMPDEST
	lea	r14, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	jmp	.LBB5_1302
.LBB5_492:                              # %OP274.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	xor	rax, 1510251120
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_223] # ymm0 = [0,0,0,1510251120]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB5_1225
.LBB5_493:                              # %OP1411.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 159
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1407
# %bb.494:
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	mov	r15, rbx
.LBB5_495:                              # %OP1426.JUMPDEST
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3760]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3744]
	mov	rcx, qword ptr [rbp - 3760]
	mov	rdx, qword ptr [rbp - 3752]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 1552]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1536]
	mov	rcx, qword ptr [rbp - 1552]
	mov	rdx, qword ptr [rbp - 1544]
	mov	rsi, qword ptr [rbp - 1528]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 - 8], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, rbx
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rax + r15], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], 255
	mov	rbx, qword ptr [rbp - 88]       # 8-byte Reload
	add	rbx, 3
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	add	rsi, 64
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	sub	rsp, 8
	lea	rdi, [rbp - 4400]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	movzx	eax, byte ptr [rbp - 4400]
	vpxor	xmm0, xmm0, xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	xmmword ptr [rcx + r15 + 8], xmm0
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	add	rsi, 96
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 1520]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1496]
	mov	rcx, qword ptr [rbp - 1520]
	mov	rdx, qword ptr [rbp - 1512]
	mov	rsi, qword ptr [rbp - 1504]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 48], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 32], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 56], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], 128
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	add	rsi, 128
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	sub	rsp, 8
	lea	rdi, [rbp - 1488]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1488]
	mov	rcx, qword ptr [rbp - 1480]
	mov	rdx, qword ptr [rbp - 1464]
	mov	rsi, qword ptr [rbp - 1472]
	mov	qword ptr [r11 + r15 + 80], rsi
	mov	qword ptr [r11 + r15 + 88], rdx
	mov	qword ptr [r11 + r15 + 64], rax
	mov	qword ptr [r11 + r15 + 72], rcx
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_496:                              # %OP5312.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r13, rax
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.497:                              # %OP5315.PUSH21
	shl	r15, 5
	movzx	eax, byte ptr [rbx + 20]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	jne	.LBB5_932
# %bb.498:
	mov	rdi, r13
.LBB5_499:                              # %OP5354.JUMPDEST
	mov	rax, rdi
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_116] # xmm0 = [10935,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 128]
	vmovups	ymm2, ymmword ptr [r11 + rax - 96]
	vmovups	ymm3, ymmword ptr [r11 + rax - 64]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	add	rdi, 6
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 160], ymm0
.LBB5_500:                              # %OP8129.JUMPDEST
	mov	rax, rdi
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_116] # xmm0 = [10935,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 128]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	lea	r14, [r11 + rax]
	lea	rcx, [rdi + 4]
	mov	r9, qword ptr [r11 + rax - 64]
	mov	r10, qword ptr [r11 + rax - 56]
	mov	r8, qword ptr [r11 + rax - 48]
	mov	rdx, qword ptr [r11 + rax - 40]
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [r11 + rax + 120], rdx
	mov	qword ptr [r11 + rax + 112], r8
	mov	qword ptr [r11 + rax + 104], r10
	mov	qword ptr [r11 + rax + 96], r9
	lea	rsi, [rdi + 5]
	vmovups	ymm0, ymmword ptr [r11 + rax - 32]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	shl	rcx, 5
	lea	rdx, [r11 + rcx]
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 96]
	mov	qword ptr [rbp - 168], rsi      # 8-byte Spill
	mov	rcx, rsi
	shl	rcx, 5
	lea	rdx, [r11 + rcx]
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 192], ymm0
	lea	rbx, [rdi + 7]
	mov	r13, qword ptr [r12 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	cmp	rax, 95
	jbe	.LBB5_1116
.LBB5_501:                              # %OP8137.MLOAD.contd
	mov	qword ptr [rbp - 152], r9       # 8-byte Spill
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	rsi, qword ptr [r13 + 8]
	movbe	rax, qword ptr [rsi + r12 + 64]
	movbe	rcx, qword ptr [rsi + r12 + 72]
	movbe	rdx, qword ptr [rsi + r12 + 80]
	movbe	r13, qword ptr [rsi + r12 + 88]
	add	rdi, 8
	shl	rbx, 5
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 192], r13
	mov	qword ptr [r14 + 208], rcx
	mov	qword ptr [r14 + 200], rdx
	mov	qword ptr [r14 + 216], rax
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx], r13
	mov	qword ptr [r11 + rbx + 24], rax
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	shl	rdi, 5
	mov	qword ptr [r11 + rdi + 16], r8
	mov	qword ptr [r11 + rdi], r9
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r11 + rdi + 24], rsi
	mov	qword ptr [r11 + rdi + 8], r10
	mov	qword ptr [r14 + 304], rcx
	mov	qword ptr [r14 + 288], r13
	mov	qword ptr [r14 + 312], rax
	mov	qword ptr [r14 + 296], rdx
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r8, qword ptr [rsi + 16]
	mov	r15, qword ptr [rsi + 48]
	sub	r8, r15
	mov	rsi, r13
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	lea	r12, [r11 + rbx]
	lea	r9, [r11 + rdi]
	cmovb	rsi, r10
	cmp	rsi, r8
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	ja	.LBB5_1118
.LBB5_502:                              # %OP8144.PUSH1
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 8], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r13 + r15], rax
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	rdi, qword ptr [r14 + 128]
	mov	rsi, qword ptr [r14 + 144]
	mov	r10, qword ptr [r14 + 136]
	mov	r8, qword ptr [r14 + 152]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	qword ptr [r9 + 24], r8
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [r9 + 8], r10
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	qword ptr [r9 + 16], rsi
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	qword ptr [r9], rdi
	mov	qword ptr [r14 + 312], rax
	mov	qword ptr [r14 + 296], rdx
	mov	qword ptr [r14 + 304], rcx
	mov	qword ptr [r14 + 288], r15
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rsi + 40]
	mov	r10, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r10, r13
	mov	rsi, r15
	add	rsi, 32
	mov	rdi, -1
	cmovb	rsi, rdi
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, rdi
	cmp	rsi, r10
	mov	r8, qword ptr [rbp - 112]       # 8-byte Reload
	ja	.LBB5_1119
.LBB5_503:                              # %OP8149.PUSH1
	add	r13, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 8], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + r13], rax
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	rsi, qword ptr [r8]
	movzx	edi, sil
	xor	r10d, r10d
	shl	rsi, 56
	mov	qword ptr [r9 + 24], rsi
	mov	qword ptr [r9 + 16], 0
	mov	qword ptr [r9], 0
	mov	qword ptr [r9 + 8], 0
	mov	qword ptr [r14 + 304], rcx
	mov	qword ptr [r14 + 288], r15
	mov	qword ptr [r14 + 312], rax
	mov	qword ptr [r14 + 296], rdx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rsi + 40]
	mov	r8, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r8, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r10, rax
	cmovb	rsi, r9
	cmp	rsi, r8
	ja	.LBB5_1120
.LBB5_504:                              # %OP8158.PUSH1
	add	r13, qword ptr [rbx + 8]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r13 + 24], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	r8, qword ptr [r12 + 8]
	add	rdx, 1
	adc	r8, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r14 + 96]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	qword ptr [r14 + 96], rdx
	mov	qword ptr [r14 + 104], r8
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [r14 + 112], rcx
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [r14 + 120], rax
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rbx, qword ptr [rbp - 120]      # 8-byte Reload
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rax, r13
	mov	qword ptr [rbp - 136], r15      # 8-byte Spill
	cmp	rax, 95
	jbe	.LBB5_1121
.LBB5_505:                              # %OP8166.MLOAD.contd
	mov	rdx, qword ptr [r15 + 8]
	mov	r10, qword ptr [rdx + r13 + 88]
	mov	rdi, qword ptr [rdx + r13 + 64]
	mov	rsi, qword ptr [rdx + r13 + 72]
	mov	rax, rdi
	bswap	rax
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	rcx, rsi
	bswap	rcx
	mov	r9, qword ptr [rdx + r13 + 80]
	mov	rdx, r9
	bswap	rdx
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	r13, r10
	movbe	qword ptr [rbx + 16], rsi
	movbe	qword ptr [rbx], r10
	movbe	qword ptr [rbx + 24], rdi
	bswap	r13
	movbe	qword ptr [rbx + 8], r9
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12 + 16], r10
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r12], rax
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + 24], r15
	mov	qword ptr [r12 + 8], r8
	sub	rax, r13
	sbb	r8, rdx
	sbb	r10, rcx
	sbb	r15, qword ptr [rbp - 120]      # 8-byte Folded Reload
	add	rax, -32
	adc	r8, -1
	adc	r10, -1
	adc	r15, -1
	mov	r12, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	qword ptr [r12], rax
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	qword ptr [r12 + 24], r15
	movbe	qword ptr [r14 + 208], rsi
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r14 + 192], rax
	movbe	qword ptr [r14 + 216], rdi
	movbe	qword ptr [r14 + 200], r9
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rdi, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10 + 48]
	sub	rdi, r15
	mov	rsi, r13
	add	rsi, 32
	mov	rax, -1
	cmovb	rsi, rax
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, qword ptr [rbp - 120]       # 8-byte Folded Reload
	cmovb	rsi, rax
	cmp	rsi, rdi
	mov	rcx, r10
	ja	.LBB5_1123
.LBB5_506:                              # %OP8174.SWAP1
	add	r15, qword ptr [rcx + 8]
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 24], rax
	movbe	qword ptr [r13 + r15 + 16], r8
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 8], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r13 + r15], rax
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [r14 + 112]
	mov	r15, qword ptr [r14 + 96]
	mov	r13, qword ptr [r14 + 104]
	mov	r8, qword ptr [r14 + 120]
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 96], rdx
	mov	qword ptr [r14 + 112], rax
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], r13
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbx], r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 95
	jbe	.LBB5_1125
.LBB5_507:                              # %__revmc_ir_builtin_mstore.exit51023.thread
	mov	rax, qword ptr [rbx + 8]
	movbe	qword ptr [rax + r14 + 88], r15
	movbe	qword ptr [rax + r14 + 80], r13
	movbe	qword ptr [rax + r14 + 72], rdi
	movbe	qword ptr [rax + r14 + 64], r8
.LBB5_508:                              # %OP8802.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_224] # xmm0 = [19017,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rax, r11
	add	rax, -64
	jmp	.LBB5_2680
.LBB5_509:                              # %OP167.DUP1
	add	rsi, r11
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2757214935
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_235] # ymm0 = [0,0,0,2757214935]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_669
# %bb.510:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_511:                              # %OP1865.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	r14, qword ptr [rdi + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_852
# %bb.512:
	mov	r10, r14
	mov	r15, rbx
.LBB5_513:                              # %OP1880.JUMPDEST
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3504]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3488]
	mov	rcx, qword ptr [rbp - 3504]
	mov	rdx, qword ptr [rbp - 3496]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], 32
	add	rbx, 32
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 1392]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1392]
	mov	rcx, qword ptr [rbp - 1384]
	mov	rdx, qword ptr [rbp - 1368]
	mov	rsi, qword ptr [rbp - 1376]
	mov	qword ptr [r11 + r15 - 16], rsi
	mov	qword ptr [r11 + r15 - 8], rdx
	mov	qword ptr [r11 + r15 - 32], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_514:                              # %OP5793.JUMPDEST
	lea	r13, [rax + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3094
# %bb.515:                              # %OP5796.PUSH1
	mov	r14, r13
	shl	r14, 5
	movzx	eax, byte ptr [rbx + 20]
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [rbx], xmm0
	vmovaps	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	xor	ecx, ecx
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r15 + r14], rcx
	mov	r11, r15
	jne	.LBB5_995
# %bb.516:
	mov	r10, r13
.LBB5_517:                              # %OP5837.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_194] # xmm0 = [4971,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	bswap	rcx
	movbe	rsi, qword ptr [rsi + 148]
	shrd	rcx, rdx, 32
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	qword ptr [r11 + rax + 40], rdx
	mov	qword ptr [r11 + rax + 48], rsi
	mov	qword ptr [r11 + rax + 32], rcx
	mov	qword ptr [r11 + rax + 56], 0
	mov	rcx, qword ptr [r11 + rax - 96]
	mov	rdx, qword ptr [r11 + rax - 88]
	mov	rsi, qword ptr [r11 + rax - 72]
	mov	rdi, qword ptr [r11 + rax - 80]
	mov	qword ptr [r11 + rax + 80], rdi
	mov	qword ptr [r11 + rax + 88], rsi
	mov	qword ptr [r11 + rax + 64], rcx
	mov	qword ptr [r11 + rax + 72], rdx
	add	r10, 4
	mov	rcx, qword ptr [r11 + rax - 56]
	mov	rdx, qword ptr [r11 + rax - 64]
	mov	rsi, qword ptr [r11 + rax - 40]
	mov	rdi, qword ptr [r11 + rax - 48]
	mov	qword ptr [r11 + rax + 112], rdi
	mov	qword ptr [r11 + rax + 120], rsi
	mov	qword ptr [r11 + rax + 96], rdx
	mov	qword ptr [r11 + rax + 104], rcx
.LBB5_518:                              # %OP8696.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_113] # xmm0 = [13459,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 64]
	vmovups	ymm2, ymmword ptr [r11 + rax - 32]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_219] # xmm0 = [17328,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 96], ymm0
	lea	r12, [r11 + rax]
	vmovups	ymmword ptr [r11 + rax + 128], ymm2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 160], ymm0
	lea	rdx, [r10 + 6]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rax, r13
	mov	r8, rbx
	cmp	rax, 95
	jbe	.LBB5_1168
.LBB5_519:                              # %OP8703.MLOAD.contd
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	rax, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rax + r13 + 88]
	mov	r15, qword ptr [rax + r13 + 80]
	mov	r9, qword ptr [rax + r13 + 64]
	mov	r13, qword ptr [rax + r13 + 72]
	movbe	qword ptr [r12 + 160], rsi
	bswap	rsi
	movbe	qword ptr [r12 + 176], r13
	bswap	r13
	movbe	qword ptr [r12 + 184], r9
	bswap	r9
	movbe	qword ptr [r12 + 168], r15
	bswap	r15
	lea	rcx, [r10 + 7]
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	mov	rax, rdx
	mov	rdx, rsi
	shl	rax, 5
	lea	r14, [r11 + rax]
	lea	rdi, [r10 + 8]
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	shl	rcx, 5
	lea	rsi, [r11 + rcx]
	add	rdx, 96
	adc	r15, 0
	adc	r13, 0
	adc	r9, 0
	mov	qword ptr [r11 + rax], rdx
	mov	qword ptr [r11 + rax + 16], r13
	mov	qword ptr [r11 + rax + 8], r15
	mov	qword ptr [r11 + rax + 24], r9
	mov	qword ptr [r11 + rcx + 16], 0
	mov	qword ptr [r11 + rcx], 64
	mov	qword ptr [r11 + rcx + 24], 0
	mov	qword ptr [r11 + rcx + 8], 0
	mov	rax, qword ptr [r8 + 16]
	mov	rbx, qword ptr [r8 + 48]
	sub	rax, rbx
	cmp	rax, 95
	mov	qword ptr [rbp - 136], rdi      # 8-byte Spill
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	jbe	.LBB5_1170
.LBB5_520:                              # %OP8709.DUP1
	mov	rax, qword ptr [r8 + 8]
	movbe	qword ptr [rax + rbx + 88], rdx
	movbe	qword ptr [rax + rbx + 80], r15
	movbe	qword ptr [rax + rbx + 72], r13
	movbe	qword ptr [rax + rbx + 64], r9
	mov	rax, qword ptr [r12 + 176]
	mov	r9, qword ptr [r12 + 160]
	mov	rdx, qword ptr [r12 + 168]
	mov	rcx, qword ptr [r12 + 184]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r9
	mov	qword ptr [rsi + 24], 0
	mov	qword ptr [rsi + 8], 0
	mov	qword ptr [rsi + 16], 0
	mov	qword ptr [rsi], 37
	shl	rdi, 5
	mov	qword ptr [r11 + rdi + 24], rcx
	mov	qword ptr [r11 + rdi + 8], rdx
	mov	qword ptr [r11 + rdi + 16], rax
	mov	qword ptr [r11 + rdi], r9
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rsi + 40]
	mov	r8, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r8, r13
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rsi, r9
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r10d, r10d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r10, rcx
	cmovb	rsi, r9
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 9
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	lea	r15, [r11 + rdi]
	cmp	rsi, r8
	ja	.LBB5_1172
.LBB5_521:                              # %OP8713.PUSH1
	add	r13, qword ptr [rbx + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_237] # ymm0 = [0,0,0,2666130979403333632]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax + r13], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 23374
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 37
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1171
# %bb.522:                              # %OP8719.PUSH20
	mov	rcx, rbx
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	vmovdqu	ymmword ptr [r14], ymm0
	mov	esi, dword ptr [r12 - 80]
	mov	r10, qword ptr [r12 - 96]
	mov	r13, qword ptr [r12 - 88]
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	qword ptr [r15 + 8], r13
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15], r10
	mov	qword ptr [r15 + 24], 0
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	lea	rdx, [r9 + 10]
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	vmovdqu	ymmword ptr [r8 + rax], ymm0
	lea	rcx, [r8 + rax]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rax, rbx
	cmp	rax, 31
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	jbe	.LBB5_1173
.LBB5_523:                              # %OP8727.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + rbx + 24], r10
	movbe	qword ptr [rax + rbx + 16], r13
	movbe	qword ptr [rax + rbx + 8], rsi
	mov	qword ptr [rax + rbx], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_159] # xmm1 = [10,0]
	vmovdqu	ymmword ptr [rcx], ymm1
	mov	rax, rdx
	shl	rax, 5
	vmovdqu	ymmword ptr [r8 + rax], ymm0
	lea	r14, [r8 + rax]
	mov	rbx, qword ptr [rdi + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rax, r13
	cmp	rax, 63
	jbe	.LBB5_1174
.LBB5_524:                              # %OP8732.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_195] # ymm0 = [0,0,0,720575940379279360]
	vmovups	ymmword ptr [rax + r13 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	add	r9, 11
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 240]
	mov	rcx, qword ptr [r12 + 224]
	mov	rdx, qword ptr [r12 + 232]
	mov	rsi, qword ptr [r12 + 248]
	mov	r13, r9
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 24], rsi
	mov	qword ptr [r8 + r13 + 8], rdx
	mov	qword ptr [r8 + r13 + 16], rax
	mov	qword ptr [r8 + r13], rcx
	mov	rsi, r14
	mov	rbx, r8
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_142
# %bb.525:                              # %OP8736.SWAP4
	add	r13, rbx
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	r11, qword ptr [r12 - 48]
	and	r11, qword ptr [r12 + 208]
	mov	qword ptr [r12 + 208], rsi
	mov	rsi, qword ptr [r12 - 64]
	mov	rdi, qword ptr [r12 - 56]
	and	rsi, qword ptr [r12 + 192]
	mov	qword ptr [r12 + 192], rcx
	mov	rcx, qword ptr [r12 - 40]
	and	rcx, qword ptr [r12 + 216]
	mov	qword ptr [r12 + 216], rax
	and	rdi, qword ptr [r12 + 200]
	mov	qword ptr [r12 + 200], rdx
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	qword ptr [r14], rsi
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	qword ptr [r14 + 8], rdi
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	mov	qword ptr [r14 + 24], rcx
	mov	r14, qword ptr [r12 + 224]
	mov	rax, qword ptr [r12 + 240]
	mov	rcx, qword ptr [r12 + 232]
	mov	rdx, qword ptr [r12 + 248]
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13], r14
	mov	qword ptr [r13 + 16], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rdi + 40]
	mov	r9, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r9, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_3079
.LBB5_526:                              # %OP8741.SWAP3
	add	r13, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	movbe	qword ptr [r14 + r13 + 8], r11
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r14 + r13], rax
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rax, qword ptr [r8 + 24]
	mov	rcx, qword ptr [r8 + 16]
	mov	rdx, qword ptr [r8]
	mov	rsi, qword ptr [r8 + 8]
	mov	r11, qword ptr [r12 + 208]
	mov	r14, qword ptr [r12 + 192]
	mov	rbx, qword ptr [r12 + 200]
	mov	r9, qword ptr [r12 + 216]
	mov	qword ptr [r12 + 192], rdx
	mov	qword ptr [r12 + 208], rcx
	mov	qword ptr [r12 + 200], rsi
	mov	qword ptr [r12 + 216], rax
	mov	r13, qword ptr [r15]
	mov	rax, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 24]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	qword ptr [r15 + 24], r9
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	mov	qword ptr [r15 + 8], rbx
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15], r14
	mov	qword ptr [r8 + 8], rcx
	mov	qword ptr [r8 + 24], rdx
	mov	qword ptr [r8 + 16], rax
	mov	qword ptr [r8], r13
	mov	rbx, qword ptr [rdi + 40]
	mov	r9, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	r9, r15
	mov	rsi, r13
	add	rsi, 32
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_1175
.LBB5_527:                              # %OP8744.KECCAK256
	add	r15, qword ptr [rbx + 8]
	movbe	qword ptr [r13 + r15 + 24], r14
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r13 + r15 + 16], rax
	movbe	qword ptr [r13 + r15 + 8], r11
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r13 + r15], rax
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rsi, r14
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_2795
# %bb.528:                              # %OP8745.SLOAD
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	jne	.LBB5_3087
# %bb.529:                              # %OP8746.SWAP2
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r12 + 128]
	mov	r8, qword ptr [r12 + 136]
	mov	r9, qword ptr [r12 + 152]
	mov	r10, qword ptr [r12 + 144]
	mov	qword ptr [r12 + 144], rsi
	mov	qword ptr [r12 + 152], rdx
	mov	qword ptr [r12 + 128], rax
	mov	qword ptr [r12 + 136], rcx
	vmovdqu	ymm0, ymmword ptr [r12 + 160]
	mov	qword ptr [r12 + 176], r10
	mov	qword ptr [r12 + 184], r9
	mov	qword ptr [r12 + 160], rdi
	mov	qword ptr [r12 + 168], r8
	vmovdqu	ymmword ptr [r14], ymm0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_530:                              # %OP9689.JUMPDEST
	mov	r14, rbx
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	rax, [rbx + 2]
	vmovdqu	ymm0, ymmword ptr [r11 + r14 - 32]
	vmovdqu	ymmword ptr [r11 + r14 + 32], ymm0
	lea	r13, [rbx + 3]
	mov	rcx, qword ptr [r11 + r14 - 72]
	mov	rdx, qword ptr [r11 + r14 - 80]
	mov	rsi, qword ptr [r11 + r14 - 96]
	mov	rdi, qword ptr [r11 + r14 - 88]
	mov	r15, rax
	shl	r15, 5
	mov	r8, qword ptr [r11 + r14 - 64]
	mov	r9, qword ptr [r11 + r14 - 48]
	mov	r12, r13
	shl	r12, 5
	cmp	rsi, r8
	mov	rsi, qword ptr [r11 + r14 - 56]
	sbb	rdi, rsi
	mov	rdi, qword ptr [r11 + r14 - 40]
	mov	qword ptr [r11 + r12 + 8], rsi
	sbb	rdx, r9
	sbb	rcx, rdi
	mov	qword ptr [r11 + r12 + 24], rdi
	mov	qword ptr [r11 + r12 + 16], r9
	mov	qword ptr [r11 + r12], r8
	setae	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + r15], rcx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 + 8], xmm0
	mov	qword ptr [r11 + r15 + 24], 0
	jb	.LBB5_966
.LBB5_531:                              # %OP9803.JUMPDEST
	mov	r8, rax
	shl	r8, 5
	mov	rcx, qword ptr [r11 + r8 - 136]
	mov	rdx, qword ptr [r11 + r8 - 144]
	mov	rsi, qword ptr [r11 + r8 - 152]
	mov	rdi, qword ptr [r11 + r8 - 160]
	mov	r9, rdi
	sub	r9, qword ptr [r11 + r8 - 128]
	mov	qword ptr [r11 + r8 - 128], rdi
	mov	r10, rsi
	sbb	r10, qword ptr [r11 + r8 - 120]
	mov	qword ptr [r11 + r8 - 120], rsi
	mov	r11, rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r11, qword ptr [rsi + r8 - 112]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r8 - 112], rdx
	mov	rbx, rcx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	rbx, qword ptr [rdx + r8 - 104]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r8 - 104], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rcx + r8 - 192]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + r8 - 184]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rdx + r8 - 168]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rdx + r8 - 176]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r8 - 192], r9
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r8 - 184], r10
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r8 - 176], r11
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + r8 - 168], rbx
	mov	qword ptr [r11 + r8 - 144], r13
	mov	qword ptr [r11 + r8 - 136], rdi
	mov	qword ptr [r11 + r8 - 160], rsi
	mov	qword ptr [r11 + r8 - 152], rcx
	add	rax, -5
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rdx + 312]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_532:                              # %OP297.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 1124219316
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_208] # ymm0 = [0,0,0,1124219316]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jne	.LBB5_677
# %bb.533:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_534:                              # %OP1219.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	add	r10, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, r10
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r15, r10
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 63
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_790
# %bb.535:
	mov	rbx, r15
.LBB5_536:                              # %OP1234.JUMPDEST
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	rdi, qword ptr [r11 + rbx - 32]
	add	rdi, rsi
	mov	r9, qword ptr [r11 + rbx - 24]
	adc	r9, rdx
	mov	r10, qword ptr [r11 + rbx - 16]
	adc	r10, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 8]
	adc	r11, r8
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx - 64], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 56], r9
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 48], r10
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 40], r11
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 32], rsi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 24], rdx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 16], rcx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 8], r8
	add	r15, 2
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rdi, rsi
	add	rdi, 32
	mov	r9, rdx
	adc	r9, 0
	mov	r10, rcx
	adc	r10, 0
	mov	r11, r8
	adc	r11, 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 8], r9
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 16], r10
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 24], r11
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 56], r8
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 48], rcx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 40], rdx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 32], rsi
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1776]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1752]
	mov	rcx, qword ptr [rbp - 1776]
	mov	rdx, qword ptr [rbp - 1768]
	mov	rdi, qword ptr [rbp - 1760]
	mov	qword ptr [r11 + rbx + 48], rdi
	mov	qword ptr [r11 + rbx + 32], rcx
	mov	qword ptr [r11 + rbx + 56], rax
	mov	qword ptr [r11 + rbx + 40], rdx
	mov	rsi, r15
	shl	rsi, 5
	mov	qword ptr [r11 + rbx + 112], rdi
	mov	qword ptr [r11 + rbx + 96], rcx
	mov	qword ptr [r11 + rbx + 120], rax
	mov	qword ptr [r11 + rbx + 104], rdx
	movabs	r8, 4294967297
	cmp	rcx, r8
	sbb	rdx, 0
	sbb	rdi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [r11 + rsi + 24], 0
	jae	.LBB5_1027
.LBB5_537:                              # %OP1252.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r10, qword ptr [r11 + rax - 8]
	mov	r15, qword ptr [r11 + rax - 24]
	mov	r13, qword ptr [r11 + rax - 32]
	add	r13, qword ptr [r11 + rax - 96]
	adc	r15, qword ptr [r11 + rax - 88]
	mov	rbx, qword ptr [r11 + rax - 16]
	adc	rbx, qword ptr [r11 + rax - 80]
	adc	r10, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], r13
	mov	qword ptr [r11 + rax - 24], r15
	mov	qword ptr [r11 + rax - 16], rbx
	mov	qword ptr [r11 + rax - 8], r10
	mov	r9, qword ptr [r11 + rax - 112]
	mov	r14, qword ptr [r11 + rax - 128]
	mov	rdi, qword ptr [r11 + rax - 120]
	mov	rsi, r13
	add	rsi, 32
	mov	rdx, r15
	adc	rdx, 0
	mov	rcx, rbx
	adc	rcx, 0
	mov	r8, r10
	adc	r8, 0
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	cmp	r14, rsi
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	sbb	rdi, rdx
	mov	rdi, r9
	sbb	rdi, rcx
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	sbb	rdi, r8
	mov	qword ptr [r11 + rax + 64], r13
	mov	qword ptr [r11 + rax + 72], r15
	mov	qword ptr [r11 + rax + 80], rbx
	mov	qword ptr [r11 + rax + 88], r10
	mov	qword ptr [rbp - 152], rsi      # 8-byte Spill
	mov	qword ptr [r11 + rax + 32], rsi
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	mov	qword ptr [r11 + rax + 40], rdx
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	mov	qword ptr [r11 + rax + 48], rcx
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	mov	qword ptr [r11 + rax + 56], r8
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_1024
# %bb.538:
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_539:                              # %OP1266.JUMPDEST
	lea	r14, [r12 + 1]
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 8], r15
	mov	qword ptr [r11 + r12], r13
	mov	qword ptr [r11 + r12 + 16], rbx
	mov	qword ptr [r11 + r12 + 24], r10
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	rax, qword ptr [rax + 80]
	sub	rsp, 8
	lea	rdi, [rbp - 1744]
	mov	rsi, r13
	mov	rdx, r15
	mov	rcx, rbx
	mov	r8, r10
	mov	qword ptr [rbp - 168], r9       # 8-byte Spill
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1736]
	mov	rcx, qword ptr [rbp - 1728]
	mov	rdx, qword ptr [rbp - 1720]
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rsi, r14
	shl	rsi, 5
	mov	r8, rdx
	shld	r8, rcx, 5
	mov	r9, rcx
	shld	r9, rax, 5
	mov	rdi, qword ptr [rbp - 1744]
	mov	r10, rax
	shld	r10, rdi, 5
	mov	r11, rdi
	shl	r11, 5
	mov	r14, qword ptr [rbp - 152]      # 8-byte Reload
	add	r11, r14
	mov	r15, qword ptr [rbp - 120]      # 8-byte Reload
	adc	r10, r15
	mov	rbx, qword ptr [rbp - 136]      # 8-byte Reload
	adc	r9, rbx
	mov	r13, qword ptr [rbp - 144]      # 8-byte Reload
	adc	r8, r13
	cmp	qword ptr [rbp - 112], r11      # 8-byte Folded Reload
	sbb	qword ptr [rbp - 96], r10       # 8-byte Folded Spill
	sbb	qword ptr [rbp - 160], r9       # 8-byte Folded Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r12 - 8], rdx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r12 - 16], rcx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r12 - 24], rax
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r12 - 32], rdi
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + r12 - 40]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + r12 - 40], r13
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + r12 - 48]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + r12 - 48], rbx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + r12 - 56]
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r12 - 56], r15
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rbx + r12 - 64]
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r15 + r12 - 64], r14
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + r12 + 24], r9
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r12 + 16], r10
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r12 + 8], r11
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + r12], rbx
	sbb	qword ptr [rbp - 88], r8        # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rdi, r9
	mov	r9, rax
	sbb	r9, 0
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rdi
	mov	r11d, 0
	sbb	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdx
	mov	qword ptr [r11 + r12 + 120], rdx
	mov	qword ptr [r11 + r12 + 112], rcx
	mov	qword ptr [r11 + r12 + 104], rax
	mov	qword ptr [r11 + r12 + 96], rdi
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + r12 + 64], rax
	mov	qword ptr [r11 + r12 + 88], 0
	mov	qword ptr [r11 + r12 + 80], 0
	mov	qword ptr [r11 + r12 + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_990
# %bb.540:
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 168]       # 8-byte Reload
.LBB5_541:                              # %OP1290.JUMPDEST
	shl	rbx, 5
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 32]
	mov	r8, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 16]
	vmovaps	xmm0, xmmword ptr [r11 + rbx - 96]
	vmovaps	xmm1, xmmword ptr [r11 + rbx - 80]
	vmovaps	xmm2, xmmword ptr [r11 + rbx - 160]
	vmovaps	xmm3, xmmword ptr [r11 + rbx - 144]
	vmovaps	xmm4, xmmword ptr [r11 + rbx - 128]
	vmovaps	xmm5, xmmword ptr [r11 + rbx - 112]
	vmovaps	xmmword ptr [r11 + rbx - 144], xmm1
	vmovaps	xmmword ptr [r11 + rbx - 160], xmm0
	vmovdqa	xmm0, xmmword ptr [r11 + rbx - 64]
	vmovdqa	xmm1, xmmword ptr [r11 + rbx - 48]
	vmovdqa	xmmword ptr [r11 + rbx - 112], xmm1
	vmovdqa	xmmword ptr [r11 + rbx - 128], xmm0
	vmovaps	xmmword ptr [r11 + rbx - 48], xmm5
	vmovaps	xmmword ptr [r11 + rbx - 64], xmm4
	vmovaps	xmmword ptr [r11 + rbx - 80], xmm3
	vmovaps	xmmword ptr [r11 + rbx - 96], xmm2
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	inc	r14
	mov	r15, r14
	shl	r14, 5
	mov	qword ptr [r11 + r14 + 16], rcx
	mov	qword ptr [r11 + r14 + 24], r8
	mov	qword ptr [r11 + r14], rsi
	mov	qword ptr [r11 + r14 + 8], rdx
	mov	rax, rsi
	add	rax, 32
	mov	rdi, rdx
	adc	rdi, 0
	mov	r13, rcx
	adc	r13, 0
	mov	r10, r8
	adc	r10, 0
	mov	qword ptr [r11 + rbx - 24], rdi
	mov	qword ptr [r11 + rbx - 32], rax
	mov	qword ptr [r11 + rbx - 16], r13
	mov	qword ptr [r11 + rbx - 8], r10
	mov	qword ptr [r11 + rbx + 24], r8
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 1712]
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1688]
	mov	rcx, qword ptr [rbp - 1712]
	mov	rdx, qword ptr [rbp - 1704]
	mov	rsi, qword ptr [rbp - 1696]
	mov	qword ptr [r11 + rbx + 16], rsi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 24], rax
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 80], rsi
	mov	qword ptr [r11 + rbx + 64], rcx
	mov	qword ptr [r11 + rbx + 88], rax
	mov	qword ptr [r11 + rbx + 72], rdx
	movabs	rdi, 4294967297
	cmp	rcx, rdi
	sbb	rdx, 0
	sbb	rsi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + r14], rax
	mov	qword ptr [r11 + r14 + 16], 0
	mov	qword ptr [r11 + r14 + 8], 0
	mov	qword ptr [r11 + r14 + 24], 0
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jae	.LBB5_975
.LBB5_542:                              # %OP1311.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	add	rsi, qword ptr [r11 + rax - 96]
	adc	rdx, qword ptr [r11 + rax - 88]
	mov	rcx, qword ptr [r11 + rax - 16]
	adc	rcx, qword ptr [r11 + rax - 80]
	adc	r8, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	r9, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rbx, qword ptr [r11 + rax - 120]
	mov	r12, rsi
	add	r12, 32
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmp	rdi, r12
	mov	rdi, rbx
	sbb	rdi, r13
	mov	rdi, r9
	sbb	rdi, r14
	mov	r10, qword ptr [r11 + rax - 104]
	mov	rdi, r10
	sbb	rdi, r15
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	qword ptr [r11 + rax + 32], r12
	mov	qword ptr [r11 + rax + 40], r13
	mov	qword ptr [r11 + rax + 48], r14
	mov	qword ptr [r11 + rax + 56], r15
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_974
# %bb.543:
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_544:                              # %OP1325.JUMPDEST
	lea	r12, [rbx + 1]
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1680]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1680]
	mov	rcx, qword ptr [rbp - 1672]
	mov	rdx, qword ptr [rbp - 1664]
	mov	rdi, qword ptr [rbp - 1656]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rsi, r12
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r15
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r14
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r12
	add	r12, rax
	adc	r13, rcx
	adc	r14, rdx
	adc	r15, rdi
	cmp	qword ptr [rbp - 80], r12       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 96], r13       # 8-byte Folded Spill
	sbb	qword ptr [rbp - 88], r14       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 112], r15      # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_973
# %bb.545:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_546:                              # %OP1349.JUMPDEST
	mov	rcx, rax
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [r11 + rcx - 64]
	vmovdqa	xmm1, xmmword ptr [r11 + rcx - 48]
	vmovaps	xmm2, xmmword ptr [r11 + rcx - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rcx - 80]
	vmovaps	xmm4, xmmword ptr [r11 + rcx - 160]
	vmovaps	xmm5, xmmword ptr [r11 + rcx - 144]
	vmovaps	xmm6, xmmword ptr [r11 + rcx - 128]
	vmovaps	xmm7, xmmword ptr [r11 + rcx - 112]
	vmovaps	xmmword ptr [r11 + rcx - 144], xmm3
	vmovaps	xmmword ptr [r11 + rcx - 160], xmm2
	vmovaps	xmmword ptr [r11 + rcx - 48], xmm5
	vmovaps	xmmword ptr [r11 + rcx - 64], xmm4
	vmovdqa	xmmword ptr [r11 + rcx - 112], xmm1
	vmovdqa	xmmword ptr [r11 + rcx - 128], xmm0
	vmovaps	xmmword ptr [r11 + rcx - 80], xmm7
	vmovaps	xmmword ptr [r11 + rcx - 96], xmm6
	add	rax, -3
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
.LBB5_547:                              # %OP4804.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 1]
	mov	r13, rax
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_103] # xmm0 = [18,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_371
# %bb.548:                              # %OP4807.PUSH1
	shl	r14, 5
	movzx	eax, byte ptr [rbx]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	xor	ecx, ecx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	cmp	al, 2
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r15
	jne	.LBB5_962
.LBB5_549:                              # %OP4816.JUMPDEST
	mov	rcx, r13
	shl	rcx, 5
	lea	rax, [r11 + rcx]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_211] # xmm0 = [9558,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	mov	edx, 5
	jmp	.LBB5_726
.LBB5_550:                              # %OP70.DUP1
	add	r8, r11
	vmovdqu	xmmword ptr [r8 + 40], xmm0
	mov	qword ptr [r8 + 56], 0
	mov	esi, 3852906767
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_263] # ymm0 = [0,0,0,3852906767]
	vmovdqu	ymmword ptr [r8 + 8], ymm0
	mov	qword ptr [r8], rdi
	jne	.LBB5_699
.LBB5_551:                              # %OP2566.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_28] # xmm0 = [890,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
.LBB5_552:                              # %OP6894.JUMPDEST
	mov	r14, r15
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_265] # xmm0 = [7,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	r12, [r15 + 2]
	lea	rsi, [r11 + r14]
	add	rsi, 32
	vmovdqu	ymmword ptr [r11 + r14 + 32], ymm0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r13
	mov	edx, 17
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3097
# %bb.553:                              # %OP6898.PUSH1
	add	r14, rbx
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [rbx + r12], ymm0
	lea	rax, [r15 + 4]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	vmovups	ymmword ptr [r14 + 96], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.554:                              # %OP6900.MLOAD.contd
	mov	r11, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 112], rdi
	mov	qword ptr [r14 + 120], rax
	mov	qword ptr [r14 + 96], r11
	mov	qword ptr [r14 + 104], rcx
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	shl	r13, 5
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	lea	rdx, [r15 + 6]
	mov	qword ptr [rbp - 176], rdx      # 8-byte Spill
	shl	rdx, 5
	mov	rax, qword ptr [r14 + 32]
	mov	r8d, eax
	not	r8d
	and	r8d, 1
	shl	r8d, 8
	mov	qword ptr [r14 + 240], -1
	mov	qword ptr [r14 + 248], -1
	mov	qword ptr [r14 + 224], -1
	mov	qword ptr [r14 + 232], -1
	xor	esi, esi
	add	r8, -1
	mov	ecx, 0
	adc	rcx, -1
	mov	r10d, 0
	adc	r10, -1
	adc	rsi, -1
	and	r8, rax
	and	rcx, qword ptr [r14 + 40]
	and	r10, qword ptr [r14 + 48]
	and	rsi, qword ptr [r14 + 56]
	mov	rax, rsi
	shld	rax, r10, 63
	shld	r10, rcx, 63
	shld	rcx, r8, 63
	shr	rsi
	mov	r8, rcx
	add	r8, 31
	mov	r9, r10
	adc	r9, 0
	mov	rbx, rax
	adc	rbx, 0
	mov	r15, rsi
	adc	r15, 0
	and	r8, -32
	add	r8, r11
	adc	r9, qword ptr [rbp - 88]        # 8-byte Folded Reload
	adc	rbx, rdi
	mov	qword ptr [r14 + 32], 32
	mov	qword ptr [r14 + 40], 0
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	adc	r15, qword ptr [rbp - 80]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	qword ptr [rbp - 184], rdx      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rdi + rdx], ymm0
	add	r8, 32
	adc	r9, 0
	adc	rbx, 0
	adc	r15, 0
	mov	qword ptr [rdi + r13 + 8], r9
	mov	qword ptr [rdi + r13 + 24], r15
	mov	qword ptr [rdi + r13], r8
	mov	qword ptr [rdi + r13 + 16], rbx
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 80], rax
	mov	rdi, qword ptr [r14 + 64]
	mov	qword ptr [r14 + 64], rcx
	mov	rcx, qword ptr [r14 + 88]
	mov	qword ptr [r14 + 88], rsi
	mov	rsi, qword ptr [r14 + 72]
	mov	qword ptr [r14 + 72], r10
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 168], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r15
	push	rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.555:                              # %OP6933.DUP2
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, rbx
	add	r13, rbx
	mov	rax, qword ptr [r12 + 16]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	rsi, qword ptr [r14 + 104]
	mov	rcx, qword ptr [r14 + 120]
	mov	rdi, qword ptr [r14 + 96]
	mov	rdx, qword ptr [r14 + 112]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.556:                              # %OP6936.SWAP3
	mov	r11, qword ptr [rbp - 184]      # 8-byte Reload
	add	r11, rbx
	mov	rsi, qword ptr [r14 + 104]
	mov	r8, qword ptr [r14 + 120]
	mov	r9, qword ptr [r14 + 96]
	mov	r10, qword ptr [r14 + 112]
	mov	rax, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], rsi
	add	r9, qword ptr [r14 + 32]
	mov	qword ptr [r14 + 32], rcx
	adc	rsi, qword ptr [r14 + 40]
	adc	r10, qword ptr [r14 + 48]
	mov	qword ptr [r14 + 48], rdi
	mov	qword ptr [r14 + 40], rdx
	adc	r8, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 56], rax
	mov	qword ptr [r14 + 96], r9
	mov	qword ptr [r14 + 112], r10
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 120], r8
	mov	qword ptr [r13 + 16], rdi
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	r13, r11
	mov	r10, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12 + 8]
	mov	r8, qword ptr [r12 + 24]
	mov	r11, r10
	or	r11, rsi
	mov	rbx, r9
	or	rbx, r8
	xor	r15d, r15d
	or	rbx, r11
	mov	qword ptr [r14 + 184], r8
	mov	qword ptr [r14 + 176], rsi
	mov	qword ptr [r14 + 168], r9
	mov	qword ptr [r14 + 160], r10
	sete	r15b
	mov	qword ptr [r13], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13 + 24], 0
	je	.LBB5_442
# %bb.557:                              # %OP6946.DUP1
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_33] # xmm1 = [31,0]
	vmovdqu	ymmword ptr [r14 + 224], ymm1
	xor	r11d, r11d
	mov	ebx, 31
	cmp	rbx, r10
	mov	r10d, 0
	sbb	r10, r9
	mov	r9d, 0
	sbb	r9, rsi
	sbb	r11, r8
	setb	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], rsi
	mov	qword ptr [r13 + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jb	.LBB5_56
# %bb.558:                              # %OP6951.PUSH2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r13], ymm0
	vmovdqu	ymmword ptr [r14 + 224], ymm0
	lea	rsi, [r14 + 256]
	mov	qword ptr [r14 + 272], rdi
	mov	qword ptr [r14 + 256], rcx
	mov	qword ptr [r14 + 264], rdx
	mov	qword ptr [r14 + 280], rax
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1213
# %bb.559:                              # %OP6955.DIV_udiv-special-cases
	mov	r12, qword ptr [r14 + 264]
	mov	r15, qword ptr [r14 + 280]
	mov	r8, qword ptr [r14 + 256]
	mov	r9, qword ptr [r14 + 272]
	mov	r10, qword ptr [r14 + 248]
	mov	rsi, qword ptr [r14 + 224]
	mov	rdi, qword ptr [r14 + 232]
	mov	rbx, qword ptr [r14 + 240]
	mov	rax, rdi
	or	rax, r10
	mov	rcx, rsi
	or	rcx, rbx
	or	rcx, rax
	sete	al
	mov	rcx, r12
	or	rcx, r15
	mov	rdx, r8
	mov	r11, r8
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	or	rdx, r9
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, r10
	lzcnt	rdx, rbx
	add	rdx, 64
	test	r10, r10
	cmovne	rdx, rax
	lzcnt	rax, rdi
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	lzcnt	r8, rsi
	add	r8, 64
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	test	rdi, rdi
	cmovne	r8, rax
	sub	r8, -128
	mov	rax, rbx
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	or	rax, r10
	cmovne	r8, rdx
	lzcnt	rax, r15
	lzcnt	rdx, r9
	add	rdx, 64
	test	r15, r15
	cmovne	rdx, rax
	lzcnt	rax, r12
	lzcnt	rsi, r11
	add	rsi, 64
	test	r12, r12
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r9
	or	rax, r15
	cmovne	rsi, rdx
	xor	eax, eax
	sub	r8, rsi
	mov	edi, 0
	sbb	rdi, rdi
	mov	r10d, 0
	sbb	r10, r10
	mov	r11d, 0
	sbb	r11, r11
	mov	edx, 255
	cmp	rdx, r8
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r10
	mov	edx, 0
	sbb	rdx, r11
	setb	dl
	or	dl, cl
	mov	rdx, r15
	mov	rcx, r15
	cmovne	rcx, rax
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	esi, 0
	mov	r15, r9
	cmovne	r15, rsi
	mov	rax, r12
	cmovne	rax, rsi
	cmove	rsi, rcx
	jne	.LBB5_881
# %bb.560:                              # %OP6955.DIV_udiv-special-cases
	mov	qword ptr [rbp - 136], rbx      # 8-byte Spill
	mov	rbx, rdx
	mov	rcx, r8
	xor	rcx, 255
	or	rcx, r10
	mov	rdx, rdi
	or	rdx, r11
	or	rdx, rcx
	je	.LBB5_881
# %bb.561:                              # %udiv-bb156118
	mov	qword ptr [rbp - 192], r14      # 8-byte Spill
	mov	qword ptr [rbp - 184], r13      # 8-byte Spill
	mov	rax, r8
	add	r8, 1
	adc	rdi, 0
	adc	r10, 0
	adc	r11, 0
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 2608], rcx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 2640], ymm0
	mov	qword ptr [rbp - 2600], r12
	mov	qword ptr [rbp - 2592], r9
	mov	qword ptr [rbp - 2584], rbx
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 2592]
	mov	r14, r11
	mov	r11, qword ptr [rbp + rax - 2584]
	shld	r11, rdx, cl
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	r15, rdi
	mov	rdi, qword ptr [rbp + rax - 2608]
	mov	r13, qword ptr [rbp + rax - 2600]
	mov	rax, r13
	shr	rax
	shrx	rax, rax, rsi
	shld	r13, rdi, cl
	mov	qword ptr [rbp - 200], r13      # 8-byte Spill
	or	rax, rdx
	mov	qword ptr [rbp - 208], rax      # 8-byte Spill
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	rax, r15
	mov	qword ptr [rbp - 232], r14      # 8-byte Spill
	or	rax, r14
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	or	r8, r10
	xor	edx, edx
	or	r8, rax
	shlx	rsi, rdi, rcx
	je	.LBB5_879
# %bb.562:                              # %udiv-preheader56117
	vmovdqu	ymmword ptr [rbp - 2544], ymm0
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 2576], rax
	mov	qword ptr [rbp - 2568], r12
	mov	qword ptr [rbp - 2560], r9
	mov	qword ptr [rbp - 2552], rbx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	ecx, edx
	and	cl, 7
                                        # kill: def $dl killed $dl killed $rdx
	shr	dl, 3
	movzx	edx, dl
	mov	rdi, qword ptr [rbp + rdx - 2552]
	mov	r14, qword ptr [rbp + rdx - 2560]
	mov	r8, r14
	shrd	r8, rdi, cl
	mov	r9, qword ptr [rbp + rdx - 2576]
	mov	rdx, qword ptr [rbp + rdx - 2568]
	shrx	r12, rdx, rcx
	shrx	rbx, rdi, rcx
	mov	edi, ecx
	not	dil
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r9, rdx, cl
	add	r14, r14
	shlx	rcx, r14, rdi
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	or	rcx, r12
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 160], rax      # 8-byte Spill
	mov	rax, r14
	adc	rax, -1
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	edx, edx
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	xor	r13d, r13d
	xor	r12d, r12d
	xor	edi, edi
	mov	rax, qword ptr [rbp - 200]      # 8-byte Reload
	mov	r15, qword ptr [rbp - 208]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 232]      # 8-byte Reload
.LBB5_563:                              # %udiv-do-while56116
                                        # =>This Inner Loop Header: Depth=1
	shld	rbx, r8, 1
	shld	r8, rcx, 1
	shld	rcx, r9, 1
	shld	r9, r11, 1
	shld	r11, r15, 1
	or	r11, rdi
	shld	r15, rax, 1
	or	r15, r12
	shld	rax, rsi, 1
	or	rax, r13
	add	rsi, rsi
	or	rsi, rdx
	cmp	qword ptr [rbp - 144], r9       # 8-byte Folded Reload
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	rdx, rcx
	mov	rdx, qword ptr [rbp - 160]      # 8-byte Reload
	sbb	rdx, r8
	mov	rdi, qword ptr [rbp - 168]      # 8-byte Reload
	sbb	rdi, rbx
	sar	rdi, 63
	mov	edx, edi
	and	edx, 1
	mov	r12, rdi
	and	r12, r14
	mov	r13, rdi
	and	r13, qword ptr [rbp - 136]      # 8-byte Folded Reload
	mov	r14, rdi
	and	r14, qword ptr [rbp - 120]      # 8-byte Folded Reload
	and	rdi, qword ptr [rbp - 112]      # 8-byte Folded Reload
	sub	r9, rdi
	sbb	rcx, r14
	sbb	r8, r13
	sbb	rbx, r12
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, -1
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	adc	rdi, -1
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	adc	r12, -1
	adc	r10, -1
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	or	rdi, r10
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	or	r14, r12
	or	r14, rdi
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r13d, 0
	mov	r12d, 0
	mov	edi, 0
	jne	.LBB5_563
	jmp	.LBB5_880
.LBB5_564:                              # %OP353.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	xor	rax, 910484757
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_21] # ymm0 = [0,0,0,910484757]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB5_1225
.LBB5_565:                              # %OP1133.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_566:                              # %OP3923.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	add	r13, 2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_185] # xmm0 = [7497,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	jmp	.LBB5_2779
.LBB5_567:                              # %OP251.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	rdx, rax
	xor	rdx, 2127478272
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_15] # ymm0 = [0,0,0,2127478272]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jne	.LBB5_711
# %bb.568:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_569:                              # %OP1481.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_570:                              # %OP1496.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 4240]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 4224]
	mov	rcx, qword ptr [rbp - 4240]
	mov	rdx, qword ptr [rbp - 4232]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
.LBB5_571:                              # %OP5392.JUMPDEST
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rax, r14
	shl	rax, 5
	lea	r15, [r11 + rax]
	mov	edx, dword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rbx, qword ptr [r11 + rax - 24]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	lea	rcx, [r11 + rax - 32]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], rbx
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 16], rdx
	mov	qword ptr [r11 + rax + 56], 0
	mov	r13, r12
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB5_1204
.LBB5_572:                              # %OP5399.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r14 + 24], rsi
	movbe	qword ptr [rax + r14 + 16], rbx
	movbe	qword ptr [rax + r14 + 8], rdx
	mov	qword ptr [rax + r14], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_70] # xmm0 = [17,0]
	vmovups	ymmword ptr [r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15 + 32], ymm0
	mov	rbx, qword ptr [r13 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 63
	mov	r12, r13
	jbe	.LBB5_1205
.LBB5_573:                              # %OP5402.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_184] # ymm0 = [0,0,0,1224979098644774912]
	jmp	.LBB5_574
.LBB5_577:                              # %OP190.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2514000705
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_239] # ymm1 = [0,0,0,2514000705]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	jne	.LBB5_714
.LBB5_578:                              # %OP1700.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_28] # xmm0 = [890,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
.LBB5_579:                              # %OP5660.JUMPDEST
	mov	r14, r15
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_243] # xmm0 = [5,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	r12, [r15 + 2]
	lea	rsi, [r11 + r14]
	add	rsi, 32
	vmovdqu	ymmword ptr [r11 + r14 + 32], ymm0
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r13
	mov	edx, 17
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3097
# %bb.580:                              # %OP5664.PUSH1
	add	r14, rbx
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [rbx + r12], ymm0
	lea	rax, [r15 + 4]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	vmovups	ymmword ptr [r14 + 96], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.581:                              # %OP5666.MLOAD.contd
	mov	r11, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 112], rdi
	mov	qword ptr [r14 + 120], rax
	mov	qword ptr [r14 + 96], r11
	mov	qword ptr [r14 + 104], rcx
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	shl	r13, 5
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	lea	rdx, [r15 + 6]
	mov	qword ptr [rbp - 176], rdx      # 8-byte Spill
	shl	rdx, 5
	mov	rax, qword ptr [r14 + 32]
	mov	r8d, eax
	not	r8d
	and	r8d, 1
	shl	r8d, 8
	mov	qword ptr [r14 + 240], -1
	mov	qword ptr [r14 + 248], -1
	mov	qword ptr [r14 + 224], -1
	mov	qword ptr [r14 + 232], -1
	xor	esi, esi
	add	r8, -1
	mov	ecx, 0
	adc	rcx, -1
	mov	r10d, 0
	adc	r10, -1
	adc	rsi, -1
	and	r8, rax
	and	rcx, qword ptr [r14 + 40]
	and	r10, qword ptr [r14 + 48]
	and	rsi, qword ptr [r14 + 56]
	mov	rax, rsi
	shld	rax, r10, 63
	shld	r10, rcx, 63
	shld	rcx, r8, 63
	shr	rsi
	mov	r8, rcx
	add	r8, 31
	mov	r9, r10
	adc	r9, 0
	mov	rbx, rax
	adc	rbx, 0
	mov	r15, rsi
	adc	r15, 0
	and	r8, -32
	add	r8, r11
	adc	r9, qword ptr [rbp - 88]        # 8-byte Folded Reload
	adc	rbx, rdi
	mov	qword ptr [r14 + 32], 32
	mov	qword ptr [r14 + 40], 0
	mov	qword ptr [r14 + 48], 0
	mov	qword ptr [r14 + 56], 0
	adc	r15, qword ptr [rbp - 80]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	qword ptr [rbp - 184], rdx      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rdi + rdx], ymm0
	add	r8, 32
	adc	r9, 0
	adc	rbx, 0
	adc	r15, 0
	mov	qword ptr [rdi + r13 + 8], r9
	mov	qword ptr [rdi + r13 + 24], r15
	mov	qword ptr [rdi + r13], r8
	mov	qword ptr [rdi + r13 + 16], rbx
	mov	rdx, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 80], rax
	mov	rdi, qword ptr [r14 + 64]
	mov	qword ptr [r14 + 64], rcx
	mov	rcx, qword ptr [r14 + 88]
	mov	qword ptr [r14 + 88], rsi
	mov	rsi, qword ptr [r14 + 72]
	mov	qword ptr [r14 + 72], r10
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 168], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r15
	push	rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.582:                              # %OP5699.DUP2
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, rbx
	add	r13, rbx
	mov	rax, qword ptr [r12 + 16]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	rsi, qword ptr [r14 + 104]
	mov	rcx, qword ptr [r14 + 120]
	mov	rdi, qword ptr [r14 + 96]
	mov	rdx, qword ptr [r14 + 112]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.583:                              # %OP5702.SWAP3
	mov	r11, qword ptr [rbp - 184]      # 8-byte Reload
	add	r11, rbx
	mov	rsi, qword ptr [r14 + 104]
	mov	r8, qword ptr [r14 + 120]
	mov	r9, qword ptr [r14 + 96]
	mov	r10, qword ptr [r14 + 112]
	mov	rax, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], rsi
	add	r9, qword ptr [r14 + 32]
	mov	qword ptr [r14 + 32], rcx
	adc	rsi, qword ptr [r14 + 40]
	adc	r10, qword ptr [r14 + 48]
	mov	qword ptr [r14 + 48], rdi
	mov	qword ptr [r14 + 40], rdx
	adc	r8, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 56], rax
	mov	qword ptr [r14 + 96], r9
	mov	qword ptr [r14 + 112], r10
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 120], r8
	mov	qword ptr [r13 + 16], rdi
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	r13, r11
	mov	r10, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12 + 8]
	mov	r8, qword ptr [r12 + 24]
	mov	r11, r10
	or	r11, rsi
	mov	rbx, r9
	or	rbx, r8
	xor	r15d, r15d
	or	rbx, r11
	mov	qword ptr [r14 + 184], r8
	mov	qword ptr [r14 + 176], rsi
	mov	qword ptr [r14 + 168], r9
	mov	qword ptr [r14 + 160], r10
	sete	r15b
	mov	qword ptr [r13], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13 + 24], 0
	je	.LBB5_442
# %bb.584:                              # %OP5712.DUP1
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_33] # xmm1 = [31,0]
	vmovdqu	ymmword ptr [r14 + 224], ymm1
	xor	r11d, r11d
	mov	ebx, 31
	cmp	rbx, r10
	mov	r10d, 0
	sbb	r10, r9
	mov	r9d, 0
	sbb	r9, rsi
	sbb	r11, r8
	setb	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], rsi
	mov	qword ptr [r13 + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jb	.LBB5_56
# %bb.585:                              # %OP5717.PUSH2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r13], ymm0
	vmovdqu	ymmword ptr [r14 + 224], ymm0
	lea	rsi, [r14 + 256]
	mov	qword ptr [r14 + 272], rdi
	mov	qword ptr [r14 + 256], rcx
	mov	qword ptr [r14 + 264], rdx
	mov	qword ptr [r14 + 280], rax
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1213
# %bb.586:                              # %OP5721.DIV_udiv-special-cases
	mov	r12, qword ptr [r14 + 264]
	mov	r15, qword ptr [r14 + 280]
	mov	r8, qword ptr [r14 + 256]
	mov	r9, qword ptr [r14 + 272]
	mov	r10, qword ptr [r14 + 248]
	mov	rsi, qword ptr [r14 + 224]
	mov	rdi, qword ptr [r14 + 232]
	mov	rbx, qword ptr [r14 + 240]
	mov	rax, rdi
	or	rax, r10
	mov	rcx, rsi
	or	rcx, rbx
	or	rcx, rax
	sete	al
	mov	rcx, r12
	or	rcx, r15
	mov	rdx, r8
	mov	r11, r8
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	or	rdx, r9
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, r10
	lzcnt	rdx, rbx
	add	rdx, 64
	test	r10, r10
	cmovne	rdx, rax
	lzcnt	rax, rdi
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	lzcnt	r8, rsi
	add	r8, 64
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	test	rdi, rdi
	cmovne	r8, rax
	sub	r8, -128
	mov	rax, rbx
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	or	rax, r10
	cmovne	r8, rdx
	lzcnt	rax, r15
	lzcnt	rdx, r9
	add	rdx, 64
	test	r15, r15
	cmovne	rdx, rax
	lzcnt	rax, r12
	lzcnt	rsi, r11
	add	rsi, 64
	test	r12, r12
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r9
	or	rax, r15
	cmovne	rsi, rdx
	xor	eax, eax
	sub	r8, rsi
	mov	edi, 0
	sbb	rdi, rdi
	mov	r10d, 0
	sbb	r10, r10
	mov	r11d, 0
	sbb	r11, r11
	mov	edx, 255
	cmp	rdx, r8
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r10
	mov	edx, 0
	sbb	rdx, r11
	setb	dl
	or	dl, cl
	mov	rdx, r15
	mov	rcx, r15
	cmovne	rcx, rax
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	esi, 0
	mov	r15, r9
	cmovne	r15, rsi
	mov	rax, r12
	cmovne	rax, rsi
	cmove	rsi, rcx
	jne	.LBB5_881
# %bb.587:                              # %OP5721.DIV_udiv-special-cases
	mov	qword ptr [rbp - 136], rbx      # 8-byte Spill
	mov	rbx, rdx
	mov	rcx, r8
	xor	rcx, 255
	or	rcx, r10
	mov	rdx, rdi
	or	rdx, r11
	or	rdx, rcx
	je	.LBB5_881
# %bb.588:                              # %udiv-bb156123
	mov	qword ptr [rbp - 192], r14      # 8-byte Spill
	mov	qword ptr [rbp - 184], r13      # 8-byte Spill
	mov	rax, r8
	add	r8, 1
	adc	rdi, 0
	adc	r10, 0
	adc	r11, 0
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 2864], rcx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 2896], ymm0
	mov	qword ptr [rbp - 2856], r12
	mov	qword ptr [rbp - 2848], r9
	mov	qword ptr [rbp - 2840], rbx
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 2848]
	mov	r14, r11
	mov	r11, qword ptr [rbp + rax - 2840]
	shld	r11, rdx, cl
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	r15, rdi
	mov	rdi, qword ptr [rbp + rax - 2864]
	mov	r13, qword ptr [rbp + rax - 2856]
	mov	rax, r13
	shr	rax
	shrx	rax, rax, rsi
	shld	r13, rdi, cl
	mov	qword ptr [rbp - 200], r13      # 8-byte Spill
	or	rax, rdx
	mov	qword ptr [rbp - 208], rax      # 8-byte Spill
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	rax, r15
	mov	qword ptr [rbp - 232], r14      # 8-byte Spill
	or	rax, r14
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	or	r8, r10
	xor	edx, edx
	or	r8, rax
	shlx	rsi, rdi, rcx
	je	.LBB5_879
# %bb.589:                              # %udiv-preheader56122
	vmovdqu	ymmword ptr [rbp - 2800], ymm0
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 2832], rax
	mov	qword ptr [rbp - 2824], r12
	mov	qword ptr [rbp - 2816], r9
	mov	qword ptr [rbp - 2808], rbx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	ecx, edx
	and	cl, 7
                                        # kill: def $dl killed $dl killed $rdx
	shr	dl, 3
	movzx	edx, dl
	mov	rdi, qword ptr [rbp + rdx - 2808]
	mov	r14, qword ptr [rbp + rdx - 2816]
	mov	r8, r14
	shrd	r8, rdi, cl
	mov	r9, qword ptr [rbp + rdx - 2832]
	mov	rdx, qword ptr [rbp + rdx - 2824]
	shrx	r12, rdx, rcx
	shrx	rbx, rdi, rcx
	mov	edi, ecx
	not	dil
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r9, rdx, cl
	add	r14, r14
	shlx	rcx, r14, rdi
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	or	rcx, r12
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 160], rax      # 8-byte Spill
	mov	rax, r14
	adc	rax, -1
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	xor	edx, edx
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	xor	r13d, r13d
	xor	r12d, r12d
	xor	edi, edi
	mov	rax, qword ptr [rbp - 200]      # 8-byte Reload
	mov	r15, qword ptr [rbp - 208]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 232]      # 8-byte Reload
.LBB5_590:                              # %udiv-do-while56121
                                        # =>This Inner Loop Header: Depth=1
	shld	rbx, r8, 1
	shld	r8, rcx, 1
	shld	rcx, r9, 1
	shld	r9, r11, 1
	shld	r11, r15, 1
	or	r11, rdi
	shld	r15, rax, 1
	or	r15, r12
	shld	rax, rsi, 1
	or	rax, r13
	add	rsi, rsi
	or	rsi, rdx
	cmp	qword ptr [rbp - 144], r9       # 8-byte Folded Reload
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	rdx, rcx
	mov	rdx, qword ptr [rbp - 160]      # 8-byte Reload
	sbb	rdx, r8
	mov	rdi, qword ptr [rbp - 168]      # 8-byte Reload
	sbb	rdi, rbx
	sar	rdi, 63
	mov	edx, edi
	and	edx, 1
	mov	r12, rdi
	and	r12, r14
	mov	r13, rdi
	and	r13, qword ptr [rbp - 136]      # 8-byte Folded Reload
	mov	r14, rdi
	and	r14, qword ptr [rbp - 120]      # 8-byte Folded Reload
	and	rdi, qword ptr [rbp - 112]      # 8-byte Folded Reload
	sub	r9, rdi
	sbb	rcx, r14
	sbb	r8, r13
	sbb	rbx, r12
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, -1
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	adc	rdi, -1
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	adc	r12, -1
	adc	r10, -1
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	or	rdi, r10
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	or	r14, r12
	or	r14, rdi
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r13d, 0
	mov	r12d, 0
	mov	edi, 0
	jne	.LBB5_590
	jmp	.LBB5_880
.LBB5_591:                              # %OP93.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 3590908516
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_250] # ymm1 = [0,0,0,3590908516]
	vmovdqu	ymmword ptr [rdx + 8], ymm1
	mov	qword ptr [rdx], rdi
	jne	.LBB5_716
# %bb.592:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_593:                              # %OP2385.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	add	r10, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, r10
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r15, r10
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_790
# %bb.594:
	mov	rbx, r15
.LBB5_595:                              # %OP2400.JUMPDEST
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	rdi, qword ptr [r11 + rbx - 32]
	add	rdi, rsi
	mov	r9, qword ptr [r11 + rbx - 24]
	adc	r9, rdx
	mov	r10, qword ptr [r11 + rbx - 16]
	adc	r10, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 8]
	adc	r11, r8
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx - 64], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 56], r9
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 48], r10
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 40], r11
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 32], rsi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 24], rdx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 16], rcx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx - 8], r8
	add	r15, 2
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rdi, rsi
	add	rdi, 32
	mov	r9, rdx
	adc	r9, 0
	mov	r10, rcx
	adc	r10, 0
	mov	r11, r8
	adc	r11, 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 8], r9
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 16], r10
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 24], r11
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 56], r8
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 48], rcx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 40], rdx
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + rbx + 32], rsi
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1008]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 984]
	mov	rcx, qword ptr [rbp - 1008]
	mov	rdx, qword ptr [rbp - 1000]
	mov	rdi, qword ptr [rbp - 992]
	mov	qword ptr [r11 + rbx + 48], rdi
	mov	qword ptr [r11 + rbx + 32], rcx
	mov	qword ptr [r11 + rbx + 56], rax
	mov	qword ptr [r11 + rbx + 40], rdx
	mov	rsi, r15
	shl	rsi, 5
	mov	qword ptr [r11 + rbx + 112], rdi
	mov	qword ptr [r11 + rbx + 96], rcx
	mov	qword ptr [r11 + rbx + 120], rax
	mov	qword ptr [r11 + rbx + 104], rdx
	movabs	r8, 4294967297
	cmp	rcx, r8
	sbb	rdx, 0
	sbb	rdi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [r11 + rsi + 24], 0
	jae	.LBB5_1030
.LBB5_596:                              # %OP2418.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	add	rsi, qword ptr [r11 + rax - 96]
	adc	rdx, qword ptr [r11 + rax - 88]
	mov	rcx, qword ptr [r11 + rax - 16]
	adc	rcx, qword ptr [r11 + rax - 80]
	adc	r8, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	r9, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rbx, qword ptr [r11 + rax - 120]
	mov	r12, rsi
	add	r12, 32
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmp	rdi, r12
	mov	rdi, rbx
	sbb	rdi, r13
	mov	rdi, r9
	sbb	rdi, r14
	mov	r10, qword ptr [r11 + rax - 104]
	mov	rdi, r10
	sbb	rdi, r15
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	qword ptr [r11 + rax + 32], r12
	mov	qword ptr [r11 + rax + 40], r13
	mov	qword ptr [r11 + rax + 48], r14
	mov	qword ptr [r11 + rax + 56], r15
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_1025
# %bb.597:
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_598:                              # %OP2432.JUMPDEST
	lea	r12, [rbx + 1]
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 976]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 976]
	mov	rcx, qword ptr [rbp - 968]
	mov	rdx, qword ptr [rbp - 960]
	mov	rdi, qword ptr [rbp - 952]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rsi, r12
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r15
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r14
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r12
	add	r12, rax
	adc	r13, rcx
	adc	r14, rdx
	adc	r15, rdi
	cmp	qword ptr [rbp - 80], r12       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 96], r13       # 8-byte Folded Spill
	sbb	qword ptr [rbp - 88], r14       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 112], r15      # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_991
# %bb.599:
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_600:                              # %OP2456.JUMPDEST
	mov	rcx, rax
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [r11 + rcx - 64]
	vmovdqa	xmm1, xmmword ptr [r11 + rcx - 48]
	vmovaps	xmm2, xmmword ptr [r11 + rcx - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rcx - 80]
	vmovaps	xmm4, xmmword ptr [r11 + rcx - 160]
	vmovaps	xmm5, xmmword ptr [r11 + rcx - 144]
	vmovaps	xmm6, xmmword ptr [r11 + rcx - 128]
	vmovaps	xmm7, xmmword ptr [r11 + rcx - 112]
	vmovaps	xmmword ptr [r11 + rcx - 144], xmm3
	vmovaps	xmmword ptr [r11 + rcx - 160], xmm2
	vmovaps	xmmword ptr [r11 + rcx - 48], xmm5
	vmovaps	xmmword ptr [r11 + rcx - 64], xmm4
	vmovdqa	xmmword ptr [r11 + rcx - 112], xmm1
	vmovdqa	xmmword ptr [r11 + rcx - 128], xmm0
	vmovaps	xmmword ptr [r11 + rcx - 80], xmm7
	vmovaps	xmmword ptr [r11 + rcx - 96], xmm6
	add	rax, -3
.LBB5_601:                              # %OP6577.JUMPDEST
	lea	r14, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r13, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.602:                              # %OP6580.PUSH21
	mov	r15, r14
	shl	r15, 5
	movzx	eax, byte ptr [rbx + 20]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	xor	ecx, ecx
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15 + 24], 0
	mov	qword ptr [r13 + r15 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r13 + r15], rcx
	je	.LBB5_722
# %bb.603:                              # %OP6589.POP
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_103] # xmm0 = [18,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.604:                              # %OP6592.PUSH1
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r15], ymm0
	xor	eax, eax
	cmp	byte ptr [rbx], 0
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jmp	.LBB5_723
.LBB5_605:                              # %OP144.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm1
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2854690330
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_229] # ymm0 = [0,0,0,2854690330]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	jne	.LBB5_718
# %bb.606:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_607:                              # %OP1941.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1332
.LBB5_608:                              # %OP1956.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3600]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3584]
	mov	rcx, qword ptr [rbp - 3600]
	mov	rdx, qword ptr [rbp - 3592]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
.LBB5_609:                              # %OP6116.JUMPDEST
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rax, r14
	shl	rax, 5
	lea	r15, [r11 + rax]
	mov	edx, dword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rbx, qword ptr [r11 + rax - 24]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	lea	rcx, [r11 + rax - 32]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], rbx
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 16], rdx
	mov	qword ptr [r11 + rax + 56], 0
	mov	r13, r12
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB5_1206
.LBB5_610:                              # %OP6123.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r14 + 24], rsi
	movbe	qword ptr [rax + r14 + 16], rbx
	movbe	qword ptr [rax + r14 + 8], rdx
	mov	qword ptr [rax + r14], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_202] # xmm0 = [12,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15 + 32], ymm0
	mov	rbx, qword ptr [r13 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 63
	mov	r12, r13
	jbe	.LBB5_1207
.LBB5_611:                              # %OP6126.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_203] # ymm0 = [0,0,0,864691128455135232]
	vmovups	ymmword ptr [rax + r14 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [r15 - 32]
	vmovdqa	xmm1, xmmword ptr [r15 - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [r15 - 32], ymm2
	vmovdqa	xmmword ptr [r15 + 16], xmm1
	vmovdqa	xmmword ptr [r15], xmm0
	mov	rdi, r12
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_142
# %bb.612:                              # %OP6129.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB5_1051
# %bb.613:                              # %OP6130.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r15], ymm0
	movzx	eax, byte ptr [r15 - 32]
	mov	rsi, qword ptr [r15 - 64]
	mov	rcx, qword ptr [r15 - 56]
	mov	rdi, qword ptr [r15 - 40]
	mov	r13, qword ptr [r15 - 48]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 - 56], xmm0
	mov	qword ptr [r15 - 64], rax
	mov	qword ptr [r15 - 40], 0
	mov	qword ptr [r15 - 16], r13
	mov	qword ptr [r15 - 8], rdi
	mov	qword ptr [r15 - 24], rcx
	mov	qword ptr [r15 - 32], rsi
	jmp	.LBB5_436
.LBB5_614:                              # %OP8650.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	shl	r10, 5
	vmovdqu	ymmword ptr [r11 + r10], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	mov	r8, r15
	cmp	rax, 95
	jbe	.LBB5_1152
.LBB5_615:                              # %OP8652.MLOAD.contd
	mov	rsi, rbx
	add	r10, r11
	mov	rcx, qword ptr [r15 + 8]
	mov	r12, qword ptr [rcx + r14 + 88]
	mov	rdx, qword ptr [rcx + r14 + 80]
	mov	rax, qword ptr [rcx + r14 + 64]
	mov	rcx, qword ptr [rcx + r14 + 72]
	movbe	qword ptr [r10 + 24], rax
	movbe	qword ptr [r10 + 8], rdx
	movbe	qword ptr [r10 + 16], rcx
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	movbe	qword ptr [r10], r12
	shl	rsi, 5
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	lea	r15, [r11 + rsi]
	movabs	rsi, 631482100863729664
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	movbe	qword ptr [r15 + 48], rcx
	bswap	rcx
	movbe	qword ptr [r15 + 40], rdx
	bswap	rdx
	movbe	qword ptr [r15 + 32], r12
	bswap	r12
	movbe	qword ptr [r15 + 56], rax
	mov	rdi, qword ptr [r8 + 16]
	mov	r13, qword ptr [r8 + 48]
	sub	rdi, r13
	mov	rsi, r12
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	mov	r14, r8
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	bswap	rax
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, rdi
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	ja	.LBB5_1156
.LBB5_616:                              # %OP8656.PUSH1
	add	r13, qword ptr [r14 + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_44] # xmm0 = [2692334344,0,0,0]
	vmovups	ymmword ptr [r12 + r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rax, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	qword ptr [r15 + 80], rcx
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 64], r13
	mov	qword ptr [r15 + 72], rdx
	add	r13, 4
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15 + 32], r13
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 56], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	r10, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	r10, r12
	mov	rsi, r13
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, r10
	ja	.LBB5_1157
.LBB5_617:                              # %OP8661.PUSH1
	add	r12, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_45] # ymm0 = [0,0,0,2305843009213693952]
	vmovups	ymmword ptr [r13 + r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_64] # xmm0 = [26,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rax, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	qword ptr [r15 + 80], rcx
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 64], r13
	mov	qword ptr [r15 + 72], rdx
	add	r13, 36
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15 + 32], r13
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 56], rax
	mov	r14, qword ptr [rdi + 40]
	mov	r10, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	r10, r12
	mov	rsi, r13
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, r10
	ja	.LBB5_1160
.LBB5_618:                              # %OP8666.PUSH32
	add	r12, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_65] # ymm0 = [0,0,0,1873497444986126336]
	vmovups	ymmword ptr [r13 + r12], ymm0
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_66] # ymm0 = [8242994692971560960,2338328524489847925,2335519336488003940,4992609838504686138]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rax, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	qword ptr [r15 + 80], rcx
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 64], r13
	mov	qword ptr [r15 + 72], rdx
	add	r13, 68
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15 + 32], r13
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 56], rax
	mov	r14, qword ptr [rdi + 40]
	mov	r9, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	r9, r12
	mov	rsi, r13
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, r9
	ja	.LBB5_1161
.LBB5_619:                              # %OP8671.SWAP1
	add	r12, qword ptr [r14 + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_67] # ymm0 = [4193468311877470533,7235433442201987360,8463496726545265440,25970]
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	mov	r14, qword ptr [r15 - 24]
	mov	r8, qword ptr [r15 - 32]
	mov	rax, qword ptr [r15 - 8]
	mov	rdx, qword ptr [r15 - 16]
	mov	r12, qword ptr [r15 - 64]
	mov	rsi, qword ptr [r15 - 56]
	mov	r9, qword ptr [r15 - 40]
	mov	r10, qword ptr [r15 - 48]
	mov	qword ptr [r15 - 48], rdx
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	qword ptr [r15 - 40], rax
	mov	qword ptr [r15 - 64], r8
	mov	qword ptr [r15 - 56], r14
	mov	qword ptr [r15 - 16], r10
	mov	qword ptr [r15 - 8], r9
	mov	qword ptr [r15 - 32], r12
	mov	qword ptr [r15 - 24], rsi
	mov	rdi, qword ptr [rdi + 40]
	mov	r11, qword ptr [rdi + 16]
	mov	r13, qword ptr [rdi + 48]
	sub	r11, r13
	mov	rax, r12
	add	rax, 32
	mov	rcx, -1
	cmovb	rax, rcx
	xor	ecx, ecx
	neg	rsi
	mov	esi, 0
	sbb	rsi, r10
	sbb	rcx, r9
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	lea	rsi, [rcx + rsi - 64]
	mov	rcx, -1
	cmovb	rax, rcx
	cmp	rax, r11
	ja	.LBB5_1164
.LBB5_620:                              # %OP8672.MLOAD.contd
	add	r13, qword ptr [rdi + 8]
	mov	rcx, qword ptr [r12 + r13 + 24]
	mov	r9, qword ptr [r12 + r13 + 16]
	mov	rax, qword ptr [r12 + r13]
	mov	r10, qword ptr [r12 + r13 + 8]
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r11 + 16], r10
	movbe	qword ptr [r11], rcx
	movbe	qword ptr [r11 + 24], rax
	movbe	qword ptr [r11 + 8], r9
	movbe	qword ptr [r15 - 32], rcx
	bswap	rcx
	sub	r8, rcx
	movbe	qword ptr [r15 - 24], r9
	bswap	r9
	sbb	r14, r9
	movbe	qword ptr [r15 - 16], r10
	bswap	r10
	sbb	rdx, r10
	movbe	qword ptr [r15 - 8], rax
	bswap	rax
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	sbb	rcx, rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15], 100
	mov	qword ptr [r15 + 8], 0
	add	r8, 100
	mov	qword ptr [r15 - 64], r8
	adc	r14, 0
	mov	qword ptr [r15 - 56], r14
	adc	rdx, 0
	mov	qword ptr [r15 - 48], rdx
	adc	rcx, 0
	mov	qword ptr [r15 - 40], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_621:                              # %OP9592.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	shl	r10, 5
	vmovdqu	ymmword ptr [r11 + r10], ymm0
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	mov	r8, r15
	cmp	rax, 95
	jbe	.LBB5_1154
.LBB5_622:                              # %OP9594.MLOAD.contd
	mov	rsi, rbx
	add	r10, r11
	mov	rcx, qword ptr [r15 + 8]
	mov	r12, qword ptr [rcx + r14 + 88]
	mov	rdx, qword ptr [rcx + r14 + 80]
	mov	rax, qword ptr [rcx + r14 + 64]
	mov	rcx, qword ptr [rcx + r14 + 72]
	movbe	qword ptr [r10 + 24], rax
	movbe	qword ptr [r10 + 8], rdx
	movbe	qword ptr [r10 + 16], rcx
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	movbe	qword ptr [r10], r12
	shl	rsi, 5
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	lea	r15, [r11 + rsi]
	movabs	rsi, 631482100863729664
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	movbe	qword ptr [r15 + 48], rcx
	bswap	rcx
	movbe	qword ptr [r15 + 40], rdx
	bswap	rdx
	movbe	qword ptr [r15 + 32], r12
	bswap	r12
	movbe	qword ptr [r15 + 56], rax
	mov	rdi, qword ptr [r8 + 16]
	mov	r13, qword ptr [r8 + 48]
	sub	rdi, r13
	mov	rsi, r12
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	mov	r14, r8
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	bswap	rax
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, rdi
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	ja	.LBB5_1158
.LBB5_623:                              # %OP9598.PUSH1
	add	r13, qword ptr [r14 + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_44] # xmm0 = [2692334344,0,0,0]
	vmovups	ymmword ptr [r12 + r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rax, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	qword ptr [r15 + 80], rcx
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 64], r13
	mov	qword ptr [r15 + 72], rdx
	add	r13, 4
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15 + 32], r13
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 56], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rdi + 40]
	mov	r10, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	r10, r12
	mov	rsi, r13
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, r10
	ja	.LBB5_1159
.LBB5_624:                              # %OP9603.PUSH1
	add	r12, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_45] # ymm0 = [0,0,0,2305843009213693952]
	vmovups	ymmword ptr [r13 + r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_46] # xmm0 = [30,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rax, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	qword ptr [r15 + 80], rcx
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 64], r13
	mov	qword ptr [r15 + 72], rdx
	add	r13, 36
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15 + 32], r13
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 56], rax
	mov	r14, qword ptr [rdi + 40]
	mov	r10, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	r10, r12
	mov	rsi, r13
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, r10
	ja	.LBB5_1162
.LBB5_625:                              # %OP9608.PUSH32
	add	r12, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_47] # ymm0 = [0,0,0,2161727821137838080]
	vmovups	ymmword ptr [r13 + r12], ymm0
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_48] # ymm0 = [7953766464692224000,7020101797925841255,7950597417402461814,5073693607470263141]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rax, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	qword ptr [r15 + 80], rcx
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 64], r13
	mov	qword ptr [r15 + 72], rdx
	add	r13, 68
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15 + 32], r13
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 56], rax
	mov	r14, qword ptr [rdi + 40]
	mov	r9, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	r9, r12
	mov	rsi, r13
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r11
	cmp	rsi, r9
	ja	.LBB5_1163
.LBB5_626:                              # %OP9613.SWAP1
	add	r12, qword ptr [r14 + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_49] # ymm0 = [7308057228859238726,8533873931049916014,7451613641421974625,111542271238510]
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	mov	r14, qword ptr [r15 - 24]
	mov	r8, qword ptr [r15 - 32]
	mov	rax, qword ptr [r15 - 8]
	mov	rdx, qword ptr [r15 - 16]
	mov	r12, qword ptr [r15 - 64]
	mov	rsi, qword ptr [r15 - 56]
	mov	r9, qword ptr [r15 - 40]
	mov	r10, qword ptr [r15 - 48]
	mov	qword ptr [r15 - 48], rdx
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	qword ptr [r15 - 40], rax
	mov	qword ptr [r15 - 64], r8
	mov	qword ptr [r15 - 56], r14
	mov	qword ptr [r15 - 16], r10
	mov	qword ptr [r15 - 8], r9
	mov	qword ptr [r15 - 32], r12
	mov	qword ptr [r15 - 24], rsi
	mov	rdi, qword ptr [rdi + 40]
	mov	r11, qword ptr [rdi + 16]
	mov	r13, qword ptr [rdi + 48]
	sub	r11, r13
	mov	rax, r12
	add	rax, 32
	mov	rcx, -1
	cmovb	rax, rcx
	xor	ecx, ecx
	neg	rsi
	mov	esi, 0
	sbb	rsi, r10
	sbb	rcx, r9
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	lea	rsi, [rcx + rsi - 64]
	mov	rcx, -1
	cmovb	rax, rcx
	cmp	rax, r11
	ja	.LBB5_1166
.LBB5_627:                              # %OP9614.MLOAD.contd
	add	r13, qword ptr [rdi + 8]
	mov	rcx, qword ptr [r12 + r13 + 24]
	mov	r9, qword ptr [r12 + r13 + 16]
	mov	rax, qword ptr [r12 + r13]
	mov	r10, qword ptr [r12 + r13 + 8]
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r11 + 16], r10
	movbe	qword ptr [r11], rcx
	movbe	qword ptr [r11 + 24], rax
	movbe	qword ptr [r11 + 8], r9
	movbe	qword ptr [r15 - 32], rcx
	bswap	rcx
	sub	r8, rcx
	movbe	qword ptr [r15 - 24], r9
	bswap	r9
	sbb	r14, r9
	movbe	qword ptr [r15 - 16], r10
	bswap	r10
	sbb	rdx, r10
	movbe	qword ptr [r15 - 8], rax
	bswap	rax
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	sbb	rcx, rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15], 100
	mov	qword ptr [r15 + 8], 0
	add	r8, 100
	mov	qword ptr [r15 - 64], r8
	adc	r14, 0
	mov	qword ptr [r15 - 56], r14
	adc	rdx, 0
	mov	qword ptr [r15 - 48], rdx
	adc	rcx, 0
	mov	qword ptr [r15 - 40], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_628:                              # %OP47.DUP1
	xor	ecx, ecx
	vmovdqu	xmmword ptr [r15 + 40], xmm0
	mov	qword ptr [r15 + 56], 0
	mov	edx, 4076725131
	xor	esi, esi
	cmp	rax, rdx
	sete	sil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_8] # ymm1 = [0,0,0,4076725131]
	vmovdqu	ymmword ptr [r15 + 8], ymm1
	mov	qword ptr [r15], rsi
	cmp	eax, -218242165
	jne	.LBB5_720
# %bb.629:
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r14
.LBB5_630:                              # %OP2665.JUMPDEST
	shl	rdx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rdx], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r11 + rdx + 32], ymm0
	vmovups	ymmword ptr [r11 + rdx + 64], ymm0
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rsi, 3
	mov	rbx, rsi
	shl	rsi, 5
	mov	qword ptr [r11 + rsi + 16], rcx
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 8], rcx
	mov	qword ptr [r11 + rsi + 24], rcx
	mov	r14, rdx
	mov	r15, rax
	add	rax, -4
	mov	rdx, rcx
	adc	rdx, -1
	mov	rdi, rcx
	adc	rdi, -1
	adc	rcx, -1
	mov	qword ptr [r11 + r14 + 64], rax
	mov	qword ptr [r11 + r14 + 80], rdi
	mov	qword ptr [r11 + r14 + 72], rdx
	mov	qword ptr [r11 + r14 + 88], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rsi], ymm0
	mov	qword ptr [r11 + r14 + 152], rcx
	mov	qword ptr [r11 + r14 + 144], rdi
	mov	qword ptr [r11 + r14 + 136], rdx
	mov	qword ptr [r11 + r14 + 128], rax
	xor	r8d, r8d
	mov	r9d, 31
	cmp	r9, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	eax, 0
	sbb	rax, rdi
	sbb	r8, rcx
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	jae	.LBB5_1425
.LBB5_631:                              # %OP2680.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2320]
	push	r15
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2296]
	mov	rcx, qword ptr [rbp - 2320]
	mov	rdx, qword ptr [rbp - 2312]
	mov	rsi, qword ptr [rbp - 2304]
	mov	qword ptr [r11 + rbx - 48], rsi
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 40], rax
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	rax, r14
	shl	rax, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax], -1
	mov	qword ptr [r11 + rax + 8], -1
	mov	qword ptr [r11 + rax + 24], 0
	mov	eax, esi
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_632:                              # %OP7147.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rcx + 1]
	mov	rax, rcx
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	mov	r15, rcx
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.633:                              # %OP7150.PUSH20
	lea	r8, [r15 + 2]
	mov	r12, r13
	shl	r12, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	mov	eax, dword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rax
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	bswap	rcx
	mov	qword ptr [rbx + 24], 0
	shrd	rcx, rdx, 32
	movbe	rsi, qword ptr [rsi + 148]
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	rdi, qword ptr [rbx + 8]
	xor	rdi, rdx
	mov	qword ptr [r14 + r12 + 8], rdx
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rdi
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	r11, r14
	jne	.LBB5_1017
.LBB5_634:                              # %OP7188.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	rax, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 32]
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 16]
	mov	r12, r13
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_983
# %bb.635:
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_636:                              # %OP7232.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	lea	r12, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, rbx
	mov	rsi, r12
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.637:                              # %OP7235.PUSH1
	lea	rax, [r14 + 2]
	shl	r13, 5
	lea	rcx, [r15 + r13]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	mov	qword ptr [rbp - 160], r14      # 8-byte Spill
	lea	r8, [r14 + 3]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	shl	rax, 5
	vmovdqu	ymmword ptr [r15 + rax], ymm0
	lea	r13, [r15 + rax]
	mov	r14, qword ptr [rbx + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rax, rbx
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	cmp	rax, 95
	mov	r10, r15
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	jbe	.LBB5_1192
.LBB5_638:                              # %OP7237.MLOAD.contd
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [rcx + rbx + 88]
	mov	rsi, qword ptr [rcx + rbx + 80]
	mov	rax, qword ptr [rcx + rbx + 64]
	mov	rdi, qword ptr [rcx + rbx + 72]
	movbe	qword ptr [r13], rdx
	movbe	qword ptr [r13 + 16], rdi
	movbe	qword ptr [r13 + 24], rax
	movbe	qword ptr [r13 + 8], rsi
	mov	rcx, r8
	shl	rcx, 5
	mov	r8d, 4294967295
	mov	qword ptr [r10 + rcx + 16], r8
	mov	qword ptr [r10 + rcx], -1
	mov	qword ptr [r10 + rcx + 24], 0
	mov	qword ptr [r10 + rcx + 8], -1
	mov	r11, qword ptr [r12]
	mov	r8, qword ptr [r12 + 16]
	mov	rbx, qword ptr [r12 + 8]
	mov	r9, qword ptr [r12 + 24]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [r10 + rcx + 24], r9
	mov	qword ptr [r10 + rcx + 16], r8
	mov	qword ptr [r10 + rcx + 8], rbx
	mov	qword ptr [r10 + rcx], r11
	vmovdqu	ymmword ptr [r12 + 128], ymm0
	mov	r8d, r8d
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [r10 + rcx + 8], rbx
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	qword ptr [r10 + rcx + 16], r8
	mov	qword ptr [r10 + rcx], r11
	mov	qword ptr [r10 + rcx + 24], 0
	movbe	qword ptr [r12 + 144], rdi
	bswap	rdi
	movbe	qword ptr [r12 + 136], rsi
	mov	r8, rsi
	bswap	r8
	movbe	qword ptr [r12 + 128], rdx
	mov	rbx, rdx
	bswap	rbx
	xor	edx, edx
	movbe	qword ptr [r12 + 152], rax
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rsi + 16]
	mov	r15, qword ptr [rsi + 48]
	sub	r9, r15
	mov	rsi, rbx
	add	rsi, 32
	mov	r14, -1
	cmovb	rsi, r14
	neg	r8
	mov	r8d, 0
	sbb	r8, rdi
	bswap	rax
	sbb	rdx, rax
	lea	r14, [r10 + rcx]
	mov	rax, -1
	cmovb	rsi, rax
	cmp	rsi, r9
	ja	.LBB5_3030
.LBB5_639:                              # %OP7244.SWAP2
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	movbe	qword ptr [rbx + r15 + 24], r11
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [rbx + r15 + 16], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [rbx + r15 + 8], rax
	mov	qword ptr [rbx + r15], 0
	mov	rdi, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rax, qword ptr [r12 + 24]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	rsi, qword ptr [r12 + 16]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	r11, qword ptr [r12 - 32]
	mov	rbx, qword ptr [r12 - 16]
	mov	rax, qword ptr [r12 - 24]
	mov	r10, qword ptr [r12 - 8]
	mov	qword ptr [r14 + 8], rax
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14], r11
	mov	qword ptr [r14 + 16], rbx
	and	r11, r8
	and	rax, r9
	and	rbx, rsi
	and	r10, qword ptr [rbp - 48]       # 8-byte Folded Reload
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	qword ptr [r13 + 16], rbx
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	qword ptr [r13 + 8], rax
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	qword ptr [r13], r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 128], r15
	mov	qword ptr [r12 + 152], rdi
	mov	qword ptr [r12 + 136], rdx
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rdi, 0
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], r15
	mov	qword ptr [r14 + 24], rdi
	mov	r11, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [r11 + 40]
	mov	r9, qword ptr [rax + 16]
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	rbx, qword ptr [rax + 48]
	sub	r9, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rdi
	cmovb	rsi, r10
	lea	rax, [r12 - 32]
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	cmp	rsi, r9
	ja	.LBB5_1194
.LBB5_640:                              # %OP7251.DUP1
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	add	rbx, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rdx + 16]
	mov	rbx, qword ptr [rdx]
	mov	r10, qword ptr [rdx + 8]
	mov	rcx, qword ptr [rdx + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], rbx
	mov	r11, qword ptr [r11 + 40]
	mov	rdi, qword ptr [r11 + 16]
	mov	r15, qword ptr [r11 + 48]
	sub	rdi, r15
	mov	rsi, rbx
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	neg	r10
	mov	r10d, 0
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	sbb	r10, rax
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	sbb	r9, rcx
	cmovb	rsi, r8
	mov	qword ptr [rbp - 120], rbx      # 8-byte Spill
	cmp	rsi, rdi
	mov	r8, rdx
	ja	.LBB5_1195
.LBB5_641:                              # %OP7252.MLOAD.contd
	add	r15, qword ptr [r11 + 8]
	mov	rax, qword ptr [rbx + r15 + 24]
	mov	rcx, qword ptr [rbx + r15 + 16]
	mov	r9, qword ptr [rbx + r15]
	mov	r10, qword ptr [rbx + r15 + 8]
	movbe	qword ptr [r13 + 24], r9
	movbe	qword ptr [r13 + 8], rcx
	movbe	qword ptr [r13], rax
	movbe	qword ptr [r13 + 16], r10
	movabs	rdi, -8367679739664115436
	mov	qword ptr [r14 + 24], rdi
	movabs	rdi, 1822127811346029231
	mov	qword ptr [r14 + 8], rdi
	movabs	rdi, 1388460121665106564
	mov	qword ptr [r14 + 16], rdi
	movabs	rdi, -2038977864469817376
	mov	qword ptr [r14], rdi
	mov	r11, qword ptr [r12 + 8]
	mov	r15, qword ptr [r12 + 24]
	mov	rbx, qword ptr [r12]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_178] # ymm0 = [16407766209239734240,1822127811346029231,1388460121665106564,10079064334045436180]
	mov	rdi, qword ptr [r12 + 16]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14], rbx
	mov	qword ptr [r14 + 24], r15
	mov	qword ptr [r14 + 8], r11
	movbe	qword ptr [r12 + 144], r10
	movbe	qword ptr [r12 + 128], rax
	movbe	qword ptr [r12 + 152], r9
	movbe	qword ptr [r12 + 136], rcx
	movbe	qword ptr [r14], rax
	movbe	qword ptr [r14 + 16], r10
	movbe	qword ptr [r14 + 24], r9
	movbe	qword ptr [r14 + 8], rcx
	mov	rsi, rax
	bswap	rsi
	mov	qword ptr [r12 + 128], rbx
	sub	rbx, rsi
	mov	rsi, rcx
	bswap	rsi
	mov	qword ptr [r12 + 136], r11
	sbb	r11, rsi
	mov	rsi, r10
	bswap	rsi
	mov	qword ptr [r12 + 144], rdi
	sbb	rdi, rsi
	mov	rsi, r9
	bswap	rsi
	mov	qword ptr [r12 + 152], r15
	sbb	r15, rsi
	mov	qword ptr [r14 + 8], r11
	mov	qword ptr [r14 + 24], r15
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14], rbx
	mov	qword ptr [r13 + 8], r11
	mov	qword ptr [r13], rbx
	mov	qword ptr [r13 + 24], r15
	mov	qword ptr [r13 + 16], rdi
	movbe	qword ptr [r14 + 24], r9
	movbe	qword ptr [r14 + 16], r10
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	movbe	qword ptr [r14 + 8], rcx
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	movbe	qword ptr [r14], rax
	movbe	qword ptr [r8 + 24], r9
	movbe	qword ptr [r8 + 16], r10
	movbe	qword ptr [r8 + 8], rcx
	movbe	qword ptr [r8], rax
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r14 + 24], rdx
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r14 + 16], rsi
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r14 + 8], rax
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r14], rcx
	add	rbx, rcx
	adc	r11, rax
	adc	rdi, rsi
	adc	r15, rdx
	mov	qword ptr [r13 + 24], r15
	mov	qword ptr [r13 + 16], rdi
	mov	qword ptr [r13 + 8], r11
	mov	qword ptr [r13], rbx
	mov	qword ptr [r8 + 24], r15
	mov	qword ptr [r8 + 16], rdi
	mov	qword ptr [r8 + 8], r11
	mov	qword ptr [r8], rbx
	movbe	qword ptr [r13 + 24], r9
	movbe	qword ptr [r13 + 16], r10
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r13 + 8], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r13], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	mov	edx, 1
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_1039
# %bb.642:                              # %OP7263.PUSH2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_179] # xmm0 = [15693,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 152]      # 8-byte Reload
.LBB5_643:                              # %OP7770.JUMPDEST.sink.split
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	mov	rsi, qword ptr [rsi + 16]
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rdi + 16], rsi
	mov	qword ptr [rdi + 24], rdx
	mov	qword ptr [rdi], rax
	mov	qword ptr [rdi + 8], rcx
.LBB5_644:                              # %OP7770.JUMPDEST
	mov	rbx, r13
	shl	rbx, 5
	lea	r14, [r13 + 2]
	lea	rsi, [r11 + rbx]
	add	rsi, 32
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rbx + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	rdi, r12
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.645:                              # %OP7774.PUSH32
	add	rbx, r15
	shl	r14, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_155] # ymm0 = [0,0,18446744069414584320,18446744073709551615]
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	mov	rax, qword ptr [rbx + 56]
	mov	ecx, dword ptr [rbx + 52]
	shl	rcx, 32
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx + 32], xmm0
	mov	qword ptr [rbx + 48], rcx
	mov	edx, 4294967295
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], -1
	mov	qword ptr [r15 + r14], -1
	lea	rsi, [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	r8, qword ptr [rbx - 8]
	mov	rdi, qword ptr [rbx - 32]
	mov	r9, qword ptr [rbx - 16]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_52] # ymm1 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [rbx - 32], ymm1
	mov	qword ptr [r15 + r14 + 16], r9
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [r15 + r14 + 24], r8
	mov	qword ptr [r15 + r14 + 8], rdx
	mov	qword ptr [rbx + 48], r9
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 56], r8
	mov	qword ptr [rbx + 40], rdx
	mov	qword ptr [r15 + r14 + 16], rcx
	mov	qword ptr [r15 + r14 + 24], rax
	vmovdqa	xmmword ptr [r15 + r14], xmm0
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], rax
	vmovdqu	ymmword ptr [r15 + r14], ymm1
	mov	r8d, r9d
	mov	qword ptr [rbx + 48], r8
	mov	qword ptr [rbx + 40], rdx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 56], 0
	or	rcx, r8
	mov	qword ptr [rbx - 8], rax
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 24], rdx
	mov	qword ptr [rbx - 32], rdi
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1150
# %bb.646:                              # %OP7787.JUMP
	add	r13, -2
	mov	rax, r13
	shl	rax, 5
	mov	rdi, qword ptr [r15 + rax + 24]
	mov	r10, r13
	mov	r13, qword ptr [r15 + rax + 16]
	mov	rsi, qword ptr [r15 + rax]
	mov	rcx, qword ptr [r15 + rax + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	r11, r15
	jmp	.LBB5_32
.LBB5_647:                              # %OP218.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2322446787
	xor	rax, rdx
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_246] # ymm0 = [0,0,0,2322446787]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB5_1225
.LBB5_648:                              # %OP1674.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, rbx
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_767
# %bb.649:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_650:                              # %OP1689.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3408]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3392]
	mov	rcx, qword ptr [rbp - 3408]
	mov	rdx, qword ptr [rbp - 3400]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
.LBB5_651:                              # %OP5637.JUMPDEST
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rax, r14
	shl	rax, 5
	lea	r15, [r11 + rax]
	mov	edx, dword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rbx, qword ptr [r11 + rax - 24]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	lea	rcx, [r11 + rax - 32]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], rbx
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 16], rdx
	mov	qword ptr [r11 + rax + 56], 0
	mov	r13, r12
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB5_1202
.LBB5_652:                              # %OP5644.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r14 + 24], rsi
	movbe	qword ptr [rax + r14 + 16], rbx
	movbe	qword ptr [rax + r14 + 8], rdx
	mov	qword ptr [rax + r14], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_139] # xmm0 = [13,0]
	vmovups	ymmword ptr [r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15 + 32], ymm0
	mov	rbx, qword ptr [r13 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 63
	mov	r12, r13
	jbe	.LBB5_1203
.LBB5_653:                              # %OP5647.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_204] # ymm0 = [0,0,0,936748722493063168]
.LBB5_574:                              # %OP5402.PUSH1
	vmovups	ymmword ptr [rax + r14 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [r15 - 32]
	vmovdqa	xmm1, xmmword ptr [r15 - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [r15 - 32], ymm2
	vmovdqa	xmmword ptr [r15 + 16], xmm1
	vmovdqa	xmmword ptr [r15], xmm0
	mov	rdi, r12
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_142
# %bb.575:                              # %OP5405.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB5_1051
# %bb.576:                              # %OP5406.SWAP1
	vmovdqa	xmm0, xmmword ptr [r15 - 32]
	vmovdqa	xmm1, xmmword ptr [r15 - 16]
	mov	rsi, qword ptr [r15 - 64]
	mov	rcx, qword ptr [r15 - 56]
	mov	rdi, qword ptr [r15 - 40]
	mov	r13, qword ptr [r15 - 48]
	vmovdqa	xmmword ptr [r15 - 48], xmm1
	vmovdqa	xmmword ptr [r15 - 64], xmm0
	mov	qword ptr [r15 - 16], r13
	mov	qword ptr [r15 - 8], rdi
	mov	qword ptr [r15 - 32], rsi
	mov	qword ptr [r15 - 24], rcx
	jmp	.LBB5_436
.LBB5_654:                              # %OP121.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 3473484181
	xor	rax, rsi
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_260] # ymm0 = [0,0,0,3473484181]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	jne	.LBB5_1225
.LBB5_655:                              # %OP2164.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	r14, 3
	mov	rdx, qword ptr [r13 + 80]
	mov	rsi, r14
	shl	rsi, 5
	xor	ecx, ecx
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 223
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	jae	.LBB5_1032
# %bb.656:
	mov	r15, r14
.LBB5_657:                              # %OP2179.JUMPDEST
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r13, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r14, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 56], r14
	mov	qword ptr [r11 + r15 + 48], r12
	mov	qword ptr [r11 + r15 + 40], r13
	mov	qword ptr [r11 + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3216]
	mov	rsi, rbx
	mov	rdx, r13
	mov	rcx, r12
	mov	r8, r14
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3200]
	mov	rcx, qword ptr [rbp - 3216]
	mov	rdx, qword ptr [rbp - 3208]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rbx
	mov	rsi, rbx
	add	rsi, 32
	mov	rdx, r13
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 3184]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3168]
	mov	r10, qword ptr [rbp - 3184]
	mov	rdx, qword ptr [rbp - 3176]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], r14
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 8], r13
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 16], r12
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15], rbx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rsi + r15 - 16]
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [rsi + r15 - 32]
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rsi + r15 - 24]
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rsi + r15 - 8]
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], r10
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r9
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rdi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], r11
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rax + r15 + 96], rbx
	add	rbx, 64
	mov	rdx, r13
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 752]
	mov	rsi, rbx
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 752]
	mov	rcx, qword ptr [rbp - 744]
	mov	rdx, qword ptr [rbp - 728]
	mov	rsi, qword ptr [rbp - 736]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 152], r13      # 8-byte Spill
	mov	qword ptr [rax + r15 + 72], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r13
	add	rsi, 96
	adc	r13, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r13
	sub	rsp, 8
	lea	rdi, [rbp - 720]
	mov	rdx, r13
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, r13
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 720]
	mov	rcx, qword ptr [rbp - 712]
	mov	rdx, qword ptr [rbp - 696]
	mov	rsi, qword ptr [rbp - 704]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 48], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 32], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], rdx
	add	rsi, 128
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 688]
	mov	r9, r13
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 688]
	mov	rcx, qword ptr [rbp - 680]
	mov	rdx, qword ptr [rbp - 664]
	mov	rsi, qword ptr [rbp - 672]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 80], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 88], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 64], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, r12
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 208], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 216], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 192], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 200], r12
	mov	rsi, rbx
	add	rsi, 160
	mov	rdx, r12
	adc	rdx, 0
	mov	rcx, r13
	adc	rcx, 0
	mov	r8, r14
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 656]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 640]
	mov	rcx, qword ptr [rbp - 656]
	mov	rdx, qword ptr [rbp - 648]
	mov	rsi, qword ptr [rbp - 632]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 120], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 104], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 112], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rcx
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	add	rcx, rbx
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	adc	rsi, r12
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rdx, r13
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rdi, r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], rdi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, rbx
	mov	qword ptr [rax + r15 + 160], rbx
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 8
	mov	rax, rcx
	mov	r8, rcx
	add	rax, 224
	mov	rcx, r12
	adc	rcx, 0
	mov	rdx, r13
	adc	rdx, 0
	mov	rsi, r14
	adc	rsi, 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 216], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 200], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 208], rdx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 192], rax
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r8
	mov	qword ptr [rax + rbx], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r13
	add	rsi, 192
	adc	r12, 0
	adc	r13, 0
	adc	r14, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 248], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 232], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 224], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 240], r13
	sub	rsp, 8
	lea	rdi, [rbp - 624]
	mov	rdx, r12
	mov	rcx, r13
	mov	r8, r14
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 600]
	mov	rcx, qword ptr [rbp - 624]
	mov	rdx, qword ptr [rbp - 616]
	mov	rsi, qword ptr [rbp - 608]
	mov	qword ptr [r11 + r15 + 240], rsi
	mov	qword ptr [r11 + r15 + 224], rcx
	mov	qword ptr [r11 + r15 + 248], rax
	mov	qword ptr [r11 + r15 + 232], rdx
	mov	qword ptr [r11 + r15 + 304], rsi
	mov	qword ptr [r11 + r15 + 288], rcx
	mov	qword ptr [r11 + r15 + 312], rax
	mov	qword ptr [r11 + r15 + 296], rdx
	movabs	rdi, 4294967297
	cmp	rcx, rdi
	sbb	rdx, 0
	sbb	rsi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 16], 0
	mov	qword ptr [r11 + rbx + 8], 0
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_1028
.LBB5_658:                              # %OP2233.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	add	rsi, qword ptr [r11 + rax - 96]
	adc	rdx, qword ptr [r11 + rax - 88]
	mov	rcx, qword ptr [r11 + rax - 16]
	adc	rcx, qword ptr [r11 + rax - 80]
	adc	r8, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	r9, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rbx, qword ptr [r11 + rax - 120]
	mov	r12, rsi
	add	r12, 32
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmp	rdi, r12
	mov	rdi, rbx
	sbb	rdi, r13
	mov	rdi, r9
	sbb	rdi, r14
	mov	r10, qword ptr [r11 + rax - 104]
	mov	rdi, r10
	sbb	rdi, r15
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	qword ptr [r11 + rax + 32], r12
	mov	qword ptr [r11 + rax + 40], r13
	mov	qword ptr [r11 + rax + 48], r14
	mov	qword ptr [r11 + rax + 56], r15
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_1025
# %bb.659:
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_660:                              # %OP2247.JUMPDEST
	lea	r12, [rbx + 1]
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 592]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 592]
	mov	rcx, qword ptr [rbp - 584]
	mov	rdx, qword ptr [rbp - 576]
	mov	rdi, qword ptr [rbp - 568]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rsi, r12
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r15
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r14
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r12
	add	r12, rax
	adc	r13, rcx
	adc	r14, rdx
	adc	r15, rdi
	cmp	qword ptr [rbp - 80], r12       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 96], r13       # 8-byte Folded Spill
	sbb	qword ptr [rbp - 88], r14       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 112], r15      # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_991
# %bb.661:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_662:                              # %OP2271.JUMPDEST
	mov	rdi, r10
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [r11 + rdi - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + rdi - 16]
	vmovaps	xmm2, xmmword ptr [r11 + rdi - 96]
	vmovaps	xmm3, xmmword ptr [r11 + rdi - 80]
	vmovdqa	xmmword ptr [r11 + rdi - 80], xmm1
	vmovaps	xmmword ptr [r11 + rdi - 96], xmm0
	lea	r15, [r11 + rdi]
	mov	rdx, qword ptr [r11 + rdi - 56]
	mov	rax, qword ptr [r11 + rdi - 40]
	mov	rcx, qword ptr [r11 + rdi - 48]
	vmovaps	xmmword ptr [r11 + rdi - 48], xmm3
	mov	rsi, qword ptr [r11 + rdi - 64]
	vmovaps	xmmword ptr [r11 + rdi - 64], xmm2
	mov	qword ptr [r11 + rdi - 16], rcx
	mov	qword ptr [r11 + rdi - 32], rsi
	mov	qword ptr [r11 + rdi - 8], rax
	mov	qword ptr [r11 + rdi - 24], rdx
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi + 8], rdx
	lea	r8, [r10 + 2]
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	lea	r9, [r10 + 3]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	shl	r8, 5
	lea	r10, [r11 + r8]
	add	rsi, 31
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [r11 + r9], rsi
	mov	qword ptr [r11 + r9 + 8], rdx
	mov	qword ptr [r11 + r9 + 16], rcx
	mov	qword ptr [r11 + r9 + 24], rax
	and	rsi, -32
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r11 + rdi + 48], rcx
	mov	qword ptr [r11 + rdi + 40], rdx
	mov	qword ptr [r11 + rdi + 32], rsi
	mov	qword ptr [r11 + rdi + 56], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	lea	r8, [r11 + r9]
	mov	rbx, qword ptr [r12 + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	rdi, r13
	mov	r9, rbx
	cmp	rdi, 95
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	jbe	.LBB5_1197
.LBB5_663:                              # %OP2286.MLOAD.contd
	mov	rdi, qword ptr [rbx + 8]
	mov	rbx, qword ptr [rdi + r13 + 88]
	mov	r12, qword ptr [rdi + r13 + 80]
	mov	r11, qword ptr [rdi + r13 + 64]
	mov	r13, qword ptr [rdi + r13 + 72]
	movbe	qword ptr [r15 + 32], rbx
	bswap	rbx
	movbe	qword ptr [r15 + 48], r13
	bswap	r13
	movbe	qword ptr [r15 + 56], r11
	bswap	r11
	movbe	qword ptr [r15 + 40], r12
	bswap	r12
	add	rbx, rsi
	adc	r12, rdx
	adc	r13, rcx
	mov	rcx, r11
	adc	rcx, rax
	mov	qword ptr [r10], rbx
	mov	qword ptr [r10 + 16], r13
	mov	qword ptr [r10 + 8], r12
	mov	qword ptr [r10 + 24], rcx
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9 + 48]
	sub	rax, r14
	cmp	rax, 95
	mov	r11, r10
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	jbe	.LBB5_1199
.LBB5_664:                              # %OP2292.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r14 + 88], rbx
	movbe	qword ptr [rax + r14 + 80], r12
	movbe	qword ptr [rax + r14 + 72], r13
	movbe	qword ptr [rax + r14 + 64], rcx
	mov	rbx, qword ptr [r15 + 32]
	mov	rax, qword ptr [r15 + 48]
	mov	rdx, qword ptr [r15 + 40]
	mov	rcx, qword ptr [r15 + 56]
	vmovdqa	xmm0, xmmword ptr [r15 - 64]
	vmovdqa	xmm1, xmmword ptr [r15 - 48]
	vmovaps	xmm2, xmmword ptr [r15 - 32]
	vmovaps	xmm3, xmmword ptr [r15 - 16]
	mov	qword ptr [r15 - 40], rcx
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 48], rax
	mov	qword ptr [r15 - 64], rbx
	vmovdqa	xmmword ptr [r15 - 16], xmm1
	vmovdqa	xmmword ptr [r15 - 32], xmm0
	mov	r10, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 24]
	vmovaps	xmmword ptr [r15 + 16], xmm3
	vmovaps	xmmword ptr [r15], xmm2
	mov	qword ptr [r15 + 56], rsi
	mov	qword ptr [r15 + 40], rdi
	mov	qword ptr [r15 + 32], r14
	mov	qword ptr [r15 + 48], r10
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rdx
	mov	qword ptr [r11 + 16], rax
	mov	qword ptr [r11], rbx
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	qword ptr [r8 + 8], rdi
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	qword ptr [r8 + 24], rsi
	mov	qword ptr [r8], r14
	mov	qword ptr [r8 + 16], r10
	mov	qword ptr [r15 + 152], rcx
	mov	qword ptr [r15 + 144], rax
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], rbx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rdi, r12
	mov	rsi, rbx
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	ja	.LBB5_1200
.LBB5_665:                              # %OP2300.PUSH1
	add	r12, qword ptr [r13 + 8]
	movbe	qword ptr [rbx + r12 + 24], r14
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [rbx + r12 + 16], rax
	movbe	qword ptr [rbx + r12 + 8], r10
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [rbx + r12], rax
	lea	r14, [rcx + 5]
	mov	rdx, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 16]
	mov	rdi, qword ptr [r11]
	mov	rsi, qword ptr [r11 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 16], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rdx
	mov	r11, qword ptr [r15 - 32]
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	r8, qword ptr [r15 - 16]
	mov	r9, qword ptr [r15 - 24]
	mov	r10, qword ptr [r15 - 8]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rax + 24], r10
	mov	qword ptr [rax + 8], r9
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax], r11
	mov	r11, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15]
	mov	r12, qword ptr [r15 + 8]
	mov	r13, qword ptr [r15 + 24]
	mov	qword ptr [r15 + 152], r13
	mov	qword ptr [r15 + 136], r12
	mov	qword ptr [r15 + 144], r11
	mov	qword ptr [r15 + 128], rbx
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	shl	r14, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 24], r13
	mov	qword ptr [rax + r14 + 16], r11
	mov	qword ptr [rax + r14 + 8], r12
	mov	qword ptr [rax + r14], rbx
	mov	qword ptr [r15 + 216], r10
	mov	qword ptr [r15 + 208], r8
	mov	qword ptr [r15 + 200], r9
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [r15 + 192], r8
	mov	qword ptr [r15 + 248], rdx
	mov	qword ptr [r15 + 240], rcx
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 224], rdi
	lea	rbx, [rax + r14]
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.666:                              # %OP2308.PUSH1
	mov	rsi, r14
	mov	rax, qword ptr [r15 + 88]
	mov	r14, qword ptr [r15 + 64]
	mov	rdx, qword ptr [r15 + 72]
	mov	rcx, qword ptr [r15 + 80]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	add	r14, qword ptr [r15 + 128]
	adc	rdx, qword ptr [r15 + 136]
	adc	rcx, qword ptr [r15 + 144]
	adc	rax, qword ptr [r15 + 152]
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rdi]
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rdi], ymm1
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rdx
	mov	qword ptr [r15 + 128], r14
	mov	rbx, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r12, qword ptr [rbx + 48]
	sub	rdi, r12
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	ja	.LBB5_1201
.LBB5_667:                              # %OP2315.POP
	add	r12, qword ptr [rbx + 8]
	vmovdqu	ymmword ptr [r14 + r12], ymm1
	vmovaps	xmm0, xmmword ptr [r15 + 32]
	vmovaps	xmm1, xmmword ptr [r15 + 48]
	vmovups	ymm2, ymmword ptr [r15 - 64]
	vmovaps	xmmword ptr [r15 - 48], xmm1
	vmovaps	xmmword ptr [r15 - 64], xmm0
	vmovups	ymmword ptr [r15 - 160], ymm2
	vmovdqa	xmm0, xmmword ptr [r15 - 128]
	vmovdqa	xmm1, xmmword ptr [r15 - 112]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_261] # xmm2 = [13641,0]
	vmovups	ymmword ptr [r15 - 128], ymm2
	vmovdqa	xmmword ptr [r15 + 48], xmm1
	vmovdqa	xmmword ptr [r15 + 32], xmm0
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	add	r10, -4
	mov	esi, 13641
.LBB5_668:                              # %dynamic_jump_table
	xor	ecx, ecx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	jmp	.LBB5_1380
.LBB5_669:                              # %OP172.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2835717307
	xor	rax, rdx
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_236] # ymm0 = [0,0,0,2835717307]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB5_1225
.LBB5_670:                              # %OP1892.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rbx, 3
	mov	r14, qword ptr [rdi + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1407
# %bb.671:
	mov	r10, r14
	mov	r15, rbx
.LBB5_672:                              # %OP1907.JUMPDEST
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3536]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3520]
	mov	rcx, qword ptr [rbp - 3536]
	mov	rdx, qword ptr [rbp - 3528]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], 32
	add	rbx, 32
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 1424]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1424]
	mov	rcx, qword ptr [rbp - 1416]
	mov	rdx, qword ptr [rbp - 1400]
	mov	rsi, qword ptr [rbp - 1408]
	mov	qword ptr [r11 + r15 - 16], rsi
	mov	qword ptr [r11 + r15 - 8], rdx
	mov	qword ptr [r11 + r15 - 32], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_673:                              # %OP5844.JUMPDEST
	lea	r13, [rax + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3094
# %bb.674:                              # %OP5847.PUSH1
	mov	r14, r13
	shl	r14, 5
	movzx	eax, byte ptr [rbx + 20]
	vxorps	xmm0, xmm0, xmm0
	vmovaps	xmmword ptr [rbx], xmm0
	vmovaps	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	xor	ecx, ecx
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r15 + r14], rcx
	mov	r11, r15
	jne	.LBB5_1003
# %bb.675:
	mov	r14, r13
.LBB5_676:                              # %OP5888.JUMPDEST
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	eax, dword ptr [rdx + 164]
	movbe	rcx, qword ptr [rdx + 156]
	bswap	rax
	shrd	rax, rcx, 32
	movbe	rdx, qword ptr [rdx + 148]
	shrd	rcx, rdx, 32
	shr	rdx, 32
	mov	rsi, r14
	shl	rsi, 5
	mov	qword ptr [r11 + rsi + 16], rdx
	mov	qword ptr [r11 + rsi + 8], rcx
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 48], 0
	mov	qword ptr [r11 + rsi + 56], 0
	mov	qword ptr [r11 + rsi + 32], 12349
	jmp	.LBB5_157
.LBB5_677:                              # %OP302.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	xor	rax, 1313134934
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_209] # ymm0 = [0,0,0,1313134934]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB5_1225
.LBB5_678:                              # %OP1358.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1407
# %bb.679:
	mov	r10, r14
	mov	r15, rbx
.LBB5_680:                              # %OP1373.JUMPDEST
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3856]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3840]
	mov	rcx, qword ptr [rbp - 3856]
	mov	rdx, qword ptr [rbp - 3848]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], 32
	add	rbx, 32
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 1808]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1808]
	mov	rcx, qword ptr [rbp - 1800]
	mov	rdx, qword ptr [rbp - 1784]
	mov	rsi, qword ptr [rbp - 1792]
	mov	qword ptr [r11 + r15 - 16], rsi
	mov	qword ptr [r11 + r15 - 8], rdx
	mov	qword ptr [r11 + r15 - 32], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_681:                              # %OP5027.JUMPDEST
	lea	r13, [rax + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jne	.LBB5_751
# %bb.682:                              # %OP5030.PUSH1
	mov	r14, r13
	shl	r14, 5
	movzx	eax, byte ptr [rbx + 20]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	xor	ecx, ecx
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	test	rax, rax
	sete	cl
	mov	qword ptr [r15 + r14], rcx
	mov	r11, r15
	jne	.LBB5_1010
.LBB5_683:                              # %OP5071.JUMPDEST
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3062
# %bb.684:                              # %OP5074.PUSH20
	lea	r8, [r13 + 2]
	mov	r15, r12
	shl	r15, 5
	mov	eax, dword ptr [rbx + 16]
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	movbe	rsi, qword ptr [rsi + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r15 + 16], rsi
	mov	qword ptr [r14 + r15], rcx
	mov	rcx, qword ptr [rbx + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r15 + 8], rdi
	mov	qword ptr [r14 + r15 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	jne	.LBB5_976
# %bb.685:
	mov	r11, r14
	mov	r10, r13
.LBB5_686:                              # %OP5118.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	edi, dword ptr [r11 + rax - 80]
	mov	rbx, qword ptr [r11 + rax - 96]
	mov	r13, qword ptr [r11 + rax - 88]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], r13
	mov	qword ptr [r11 + rax], rbx
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax + 56], 0
	lea	rsi, [r10 + 3]
	mov	rax, r8
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [r11 + rax + 8], r13
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax], rbx
	mov	qword ptr [r11 + rax + 24], 0
	lea	rdx, [r10 + 4]
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	rax, rsi
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r12, [r11 + rax]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	cmp	rax, 31
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 152], rdx      # 8-byte Spill
	jbe	.LBB5_1182
.LBB5_687:                              # %OP5126.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], rbx
	movbe	qword ptr [rax + r14 + 16], r13
	movbe	qword ptr [rax + r14 + 8], rdi
	mov	qword ptr [rax + r14], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_202] # xmm1 = [12,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm1
	mov	rax, rdx
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r13, [r11 + rax]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rax + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	jbe	.LBB5_1184
.LBB5_688:                              # %OP5131.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_203] # ymm0 = [0,0,0,864691128455135232]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	lea	rbx, [r10 + 5]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, qword ptr [rsi + 48]
	mov	r14, r10
	mov	rcx, qword ptr [rsi + 32]
	mov	rdx, qword ptr [rsi + 40]
	mov	rsi, qword ptr [rsi + 56]
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 24], rsi
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r13
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.689:                              # %OP5135.DUP1
	add	r14, 6
	add	rbx, r15
	mov	rax, qword ptr [r13]
	mov	rcx, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	mov	rsi, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 24], rdx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_371
# %bb.690:                              # %OP5137.PUSH32
	shl	r14, 5
	vmovdqu	xmm0, xmmword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, -256
	and	rcx, qword ptr [rbx]
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14], 1
	mov	qword ptr [r15 + r14 + 8], 0
	or	rcx, 1
	vmovdqu	ymm1, ymmword ptr [r13]
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13], rcx
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.691:                              # %OP5143.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_139] # xmm0 = [13,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rdx + 24]
	mov	r15, qword ptr [rdx]
	mov	rcx, qword ptr [rdx + 8]
	mov	rdx, qword ptr [rdx + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbx + 8], rcx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	rbx, r13
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rdx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_1190
.LBB5_692:                              # %OP5146.SWAP2
	add	r13, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_204] # ymm0 = [0,0,0,936748722493063168]
	vmovups	ymmword ptr [r15 + r13], ymm0
	mov	rax, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12 + 24]
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [r14 + 32]
	mov	qword ptr [r14 + 56], rsi
	mov	qword ptr [r14 + 40], rdx
	mov	qword ptr [r14 + 48], rax
	mov	qword ptr [r14 + 32], rcx
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.693:                              # %OP5150.DUP6
	mov	rax, qword ptr [r14 - 40]
	mov	rcx, qword ptr [r14 - 64]
	mov	rdx, qword ptr [r14 - 56]
	mov	rsi, qword ptr [r14 - 48]
	mov	rdi, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 8], r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.694:                              # %OP5153.DUP2
	mov	r9, r14
	mov	r13, qword ptr [r14 + 32]
	mov	rax, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	rdx, qword ptr [r14 + 48]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], r13
	mov	qword ptr [r12 + 8], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rdi, r15
	mov	rsi, r13
	add	rsi, 32
	mov	rbx, -1
	cmovb	rsi, rbx
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, rbx
	mov	r10, r14
	cmp	rsi, rdi
	ja	.LBB5_1185
.LBB5_695:                              # %OP5154.MLOAD.contd
	add	r15, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r13 + r15 + 24]
	mov	rdx, qword ptr [r13 + r15 + 16]
	mov	rax, qword ptr [r13 + r15]
	mov	rsi, qword ptr [r13 + r15 + 8]
	movbe	qword ptr [r12 + 24], rax
	movbe	qword ptr [r12 + 8], rdx
	movbe	qword ptr [r12 + 16], rsi
	movbe	qword ptr [r12], rcx
	mov	r8, qword ptr [r9 - 56]
	mov	r11, qword ptr [r9 - 40]
	mov	r15, qword ptr [r9 - 64]
	mov	r14, qword ptr [r9 - 48]
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 144], r15      # 8-byte Spill
	mov	qword ptr [rdi], r15
	mov	qword ptr [rbp - 136], r14      # 8-byte Spill
	mov	qword ptr [rdi + 16], r14
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	mov	qword ptr [rdi + 8], r8
	mov	qword ptr [rdi + 24], r11
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	movbe	qword ptr [r8 + 16], rsi
	mov	rdi, rsi
	bswap	rdi
	movbe	qword ptr [r8 + 8], rdx
	bswap	rdx
	movbe	qword ptr [r8], rcx
	mov	r15, rcx
	bswap	r15
	movbe	qword ptr [r8 + 24], rax
	mov	rcx, qword ptr [r10 + 16]
	mov	r14, qword ptr [r10 + 48]
	sub	rcx, r14
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, rbx
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rdi
	bswap	rax
	sbb	r8, rax
	cmovb	rsi, rbx
	cmp	rsi, rcx
	mov	r13, r9
	ja	.LBB5_1187
.LBB5_696:                              # %OP5158.SWAP2
	add	r14, qword ptr [r10 + 8]
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	movbe	qword ptr [r15 + r14], r11
	mov	rcx, qword ptr [r12 + 16]
	mov	r10, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12]
	mov	rdi, qword ptr [r12 + 8]
	mov	r14, qword ptr [r13 + 48]
	mov	r15, qword ptr [r13 + 32]
	mov	r9, qword ptr [r13 + 40]
	mov	r8, qword ptr [r13 + 56]
	mov	qword ptr [r13 + 40], rdi
	mov	qword ptr [r13 + 56], r10
	mov	qword ptr [r13 + 32], rdx
	mov	qword ptr [r13 + 48], rcx
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], r14
	mov	qword ptr [r12], r15
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rax + 40]
	mov	r11, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r11, r13
	mov	rsi, r15
	add	rsi, 32
	mov	rax, -1
	cmovb	rsi, rax
	xor	eax, eax
	neg	r9
	mov	r9d, 0
	sbb	r9, r14
	sbb	rax, r8
	mov	rax, -1
	cmovb	rsi, rax
	cmp	rsi, r11
	ja	.LBB5_1188
.LBB5_697:                              # %OP5159.MLOAD.contd
	add	r13, qword ptr [rbx + 8]
	mov	r8, qword ptr [r15 + r13 + 24]
	mov	r14, qword ptr [r15 + r13 + 16]
	mov	r9, qword ptr [r15 + r13]
	mov	rsi, qword ptr [r15 + r13 + 8]
	mov	rax, r9
	bswap	rax
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_210] # ymm0 = [16606778223548894496,16744513841451141568,15840119175817948048,5086833141808560572]
	mov	r11, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	rbx, r8
	mov	r11, r8
	bswap	r11
	sub	rdx, r11
	mov	qword ptr [rbp - 120], r14      # 8-byte Spill
	mov	r11, r14
	bswap	r11
	sbb	rdi, r11
	mov	r11, rsi
	bswap	r11
	sbb	rcx, r11
	sbb	r10, rax
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	movbe	qword ptr [r8 + 24], r9
	movbe	qword ptr [r8 + 8], r14
	movbe	qword ptr [r8 + 16], rsi
	movbe	qword ptr [r8], rbx
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [r14 + 8]
	mov	r11, qword ptr [r14 + 24]
	mov	r15, qword ptr [r14]
	mov	r13, qword ptr [r14 + 16]
	mov	qword ptr [r8 + 16], r13
	mov	qword ptr [r8], r15
	mov	qword ptr [r8 + 8], rax
	mov	qword ptr [r8 + 24], r11
	add	rdx, r15
	adc	rdi, rax
	adc	rcx, r13
	adc	r10, r11
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rdi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], r10
	movbe	qword ptr [r12 + 24], r9
	movbe	qword ptr [r12 + 16], rsi
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r12 + 8], rax
	movbe	qword ptr [r12], rbx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.698:                              # %OP5170.POP
	mov	rsi, qword ptr [rbx - 128]
	mov	rcx, qword ptr [rbx - 120]
	mov	rdi, qword ptr [rbx - 104]
	mov	r13, qword ptr [rbx - 112]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [rbx - 128], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx - 96]
	mov	qword ptr [rbx - 80], r13
	mov	qword ptr [rbx - 72], rdi
	mov	qword ptr [rbx - 96], rsi
	mov	qword ptr [rbx - 88], rcx
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	add	r10, -3
	jmp	.LBB5_437
.LBB5_699:                              # %OP75.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r8 + 40], xmm0
	mov	qword ptr [r8 + 56], 0
	mov	esi, 3913941250
	xor	rax, rsi
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_264] # ymm0 = [0,0,0,3913941250]
	vmovdqu	ymmword ptr [r8 + 8], ymm0
	mov	qword ptr [r8], rcx
	jne	.LBB5_1225
.LBB5_700:                              # %OP2570.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1407
# %bb.701:
	mov	r10, r14
	mov	r15, rbx
.LBB5_702:                              # %OP2585.JUMPDEST
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3120]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	ecx, dword ptr [rbp - 3104]
	mov	rdx, qword ptr [rbp - 3120]
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 3112]
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 56], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], 32
	add	rbx, 32
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 464]
	mov	rsi, rbx
	mov	rdx, r14
	mov	r14, rcx
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	push	qword ptr [rbp - 112]           # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rcx, qword ptr [rbp - 440]
	mov	rax, qword ptr [rbp - 448]
	mov	rdx, qword ptr [rbp - 464]
	mov	rsi, qword ptr [rbp - 456]
	mov	qword ptr [r11 + r15 - 16], rax
	mov	qword ptr [r11 + r15 - 8], rcx
	mov	qword ptr [r11 + r15 - 32], rdx
	mov	qword ptr [r11 + r15 - 24], rsi
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_703:                              # %OP6965.JUMPDEST
	lea	r13, [r10 + 1]
	mov	rdi, r10
	shl	rdi, 5
	lea	r15, [r11 + rdi]
	lea	rbx, [r11 + rdi]
	add	rbx, -64
	mov	qword ptr [r11 + rdi - 56], rsi
	mov	qword ptr [r11 + rdi - 40], rcx
	mov	qword ptr [r11 + rdi - 64], rdx
	mov	qword ptr [r11 + rdi - 48], rax
	mov	r14d, r14d
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rdi - 32], ymm0
	mov	qword ptr [r11 + rdi + 8], r9
	mov	qword ptr [r11 + rdi], r8
	mov	qword ptr [r11 + rdi + 16], r14
	mov	qword ptr [r11 + rdi + 24], 0
	lea	rdx, [r10 + 2]
	mov	qword ptr [rbp - 112], r13      # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 0
	mov	r13, qword ptr [r12 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	rdi, r12
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	cmp	rax, 31
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	jbe	.LBB5_1208
.LBB5_704:                              # %OP6975.PUSH1
	mov	rax, qword ptr [r13 + 8]
	movbe	qword ptr [rax + r12 + 24], r8
	movbe	qword ptr [rax + r12 + 16], r9
	movbe	qword ptr [rax + r12 + 8], r14
	mov	qword ptr [rax + r12], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_58] # xmm1 = [16,0]
	vmovdqu	ymmword ptr [rcx], ymm1
	mov	rax, rdx
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r14, [r11 + rax]
	mov	r12, qword ptr [rdi + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	rax, r13
	cmp	rax, 63
	jbe	.LBB5_1209
.LBB5_705:                              # %OP6980.PUSH1
	mov	rax, qword ptr [r12 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_76] # ymm0 = [0,0,0,1152921504606846976]
	vmovups	ymmword ptr [rax + r13 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	lea	r13, [r10 + 3]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbx + 48]
	mov	rcx, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 40]
	mov	rsi, qword ptr [rbx + 56]
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], rsi
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	qword ptr [r11 + r13 + 16], rax
	mov	qword ptr [r11 + r13], rcx
	mov	rsi, r14
	mov	r12, r11
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.706:                              # %OP6984.SWAP4
	add	r13, r12
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	r11, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [r14 + 16], r9
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], r11
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	qword ptr [r14 + 8], r8
	mov	r14, qword ptr [rbx + 32]
	mov	rax, qword ptr [rbx + 48]
	mov	rcx, qword ptr [rbx + 40]
	mov	rdx, qword ptr [rbx + 56]
	mov	qword ptr [r13 + 8], rcx
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r14
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rdi + 40]
	mov	r9, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	r9, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_1211
.LBB5_707:                              # %OP6987.SWAP3
	add	r13, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 8], rax
	movbe	qword ptr [r14 + r13], r11
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rax, qword ptr [r8 + 24]
	mov	rcx, qword ptr [r8 + 16]
	mov	rdx, qword ptr [r8]
	mov	rsi, qword ptr [r8 + 8]
	mov	r11, qword ptr [r15 - 40]
	mov	r9, qword ptr [r15 - 64]
	mov	r12, qword ptr [r15 - 56]
	mov	r13, qword ptr [r15 - 48]
	mov	qword ptr [r15 - 64], rdx
	mov	qword ptr [r15 - 48], rcx
	mov	qword ptr [r15 - 56], rsi
	mov	qword ptr [r15 - 40], rax
	mov	rax, qword ptr [r15 + 8]
	mov	r14, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbp - 112], r13      # 8-byte Spill
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [rbp - 96], r12       # 8-byte Spill
	mov	qword ptr [r15 + 8], r12
	mov	qword ptr [r8 + 16], rdx
	mov	qword ptr [r8 + 24], rcx
	mov	qword ptr [r8], r14
	mov	qword ptr [r8 + 8], rax
	mov	r13, qword ptr [rdi + 40]
	mov	r9, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	r9, r12
	mov	rsi, r14
	add	rsi, 32
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r10
	cmp	rsi, r9
	ja	.LBB5_1212
.LBB5_708:                              # %OP6990.KECCAK256
	add	r12, qword ptr [r13 + 8]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r14 + r12 + 24], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r14 + r12 + 16], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r12 + 8], rax
	movbe	qword ptr [r14 + r12], r11
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	rsi, rbx
	mov	r12, rdi
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.709:                              # %OP6991.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.710:                              # %OP6992.PUSH1
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	movzx	eax, byte ptr [r15 - 64]
	mov	rsi, qword ptr [r15 - 96]
	mov	rcx, qword ptr [r15 - 88]
	mov	rdi, qword ptr [r15 - 72]
	mov	r13, qword ptr [r15 - 80]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 - 88], xmm0
	mov	qword ptr [r15 - 96], rax
	mov	qword ptr [r15 - 72], 0
	mov	qword ptr [r15 - 48], r13
	mov	qword ptr [r15 - 40], rdi
	mov	qword ptr [r15 - 56], rcx
	mov	qword ptr [r15 - 64], rsi
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	add	r10, -2
	jmp	.LBB5_127
.LBB5_711:                              # %OP256.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	xor	rax, 2133781699
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_16] # ymm0 = [0,0,0,2133781699]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	jne	.LBB5_1225
.LBB5_712:                              # %OP1503.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_713:                              # %OP5408.JUMPDEST
	lea	r8, [rax + 1]
	shl	rax, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_78] # ymm0 = [7389765400633884136,2511005646928131014,7020072847491925187,15031270188550000762]
	jmp	.LBB5_1403
.LBB5_714:                              # %OP195.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2681229421
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_240] # ymm0 = [0,0,0,2681229421]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rdi
	je	.LBB5_1300
# %bb.715:                              # %OP200.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2681579215
	xor	rax, rdx
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_241] # ymm0 = [0,0,0,2681579215]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	je	.LBB5_1306
	jmp	.LBB5_1225
.LBB5_716:                              # %OP98.DUP1
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 3642135687
	xor	rsi, rax
	or	rsi, rcx
	xor	edi, edi
	or	rsi, rbx
	sete	dil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_251] # ymm0 = [0,0,0,3642135687]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rdi
	je	.LBB5_1401
# %bb.717:                              # %OP103.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdx + 40], xmm0
	mov	qword ptr [rdx + 56], 0
	mov	esi, 3714247998
	xor	rax, rsi
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_252] # ymm0 = [0,0,0,3714247998]
	vmovdqu	ymmword ptr [rdx + 8], ymm0
	mov	qword ptr [rdx], rcx
	je	.LBB5_1405
	jmp	.LBB5_1225
.LBB5_718:                              # %OP149.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2906177314
	xor	rdx, rax
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rbx
	sete	dil
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_230] # ymm1 = [0,0,0,2906177314]
	vmovdqu	ymmword ptr [rsi + 8], ymm1
	mov	qword ptr [rsi], rdi
	jne	.LBB5_1224
# %bb.719:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1331
.LBB5_720:                              # %OP52.DUP1
	xor	ecx, ecx
	vmovdqu	xmmword ptr [r15 + 40], xmm0
	mov	qword ptr [r15 + 56], 0
	mov	edx, 4193856484
	xor	esi, esi
	cmp	rax, rdx
	sete	sil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_9] # ymm0 = [0,0,0,4193856484]
	vmovdqu	ymmword ptr [r15 + 8], ymm0
	mov	qword ptr [r15], rsi
	cmp	eax, -101110812
	jne	.LBB5_766
# %bb.721:
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rax, r14
	jmp	.LBB5_1424
.LBB5_722:
	mov	r11, r13
.LBB5_723:                              # %OP6595.JUMPDEST
	lea	rsi, [r14 - 1]
	mov	rax, rsi
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax]
	mov	rdx, qword ptr [r11 + rax + 8]
	or	rdx, qword ptr [r11 + rax + 24]
	or	rcx, qword ptr [r11 + rax + 16]
	or	rcx, rdx
	je	.LBB5_964
# %bb.724:
	mov	r13, rsi
.LBB5_725:                              # %OP6601.JUMPDEST
	mov	rcx, r13
	shl	rcx, 5
	lea	rax, [r11 + rcx]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_253] # xmm0 = [14214,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	mov	edx, 4
.LBB5_726:                              # %OP10361.JUMPDEST.sink.split
	xor	ecx, ecx
	mov	qword ptr [rax + 32], rdx
	mov	qword ptr [rax + 40], rcx
	mov	qword ptr [rax + 48], rcx
	mov	qword ptr [rax + 56], rcx
	vmovdqu	ymm0, ymmword ptr [rax - 64]
	vmovdqu	ymm1, ymmword ptr [rax - 32]
	vmovdqu	ymmword ptr [rax + 64], ymm0
	add	r13, 4
	vmovdqu	ymmword ptr [rax + 96], ymm1
.LBB5_727:                              # %OP10361.JUMPDEST
	lea	rdi, [r13 + 1]
	mov	r12, r13
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12 - 72]
	mov	rcx, qword ptr [r11 + r12 - 96]
	mov	rdx, qword ptr [r11 + r12 - 88]
	mov	rsi, qword ptr [r11 + r12 - 80]
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	add	r13, 2
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	shl	rdi, 5
	lea	r14, [r11 + rdi]
	mov	qword ptr [r11 + rdi + 16], rsi
	mov	qword ptr [r11 + rdi + 24], rax
	mov	qword ptr [r11 + rdi], rcx
	mov	qword ptr [r11 + rdi + 8], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1073
# %bb.728:                              # %OP10365.PUSH1
	add	r12, rbx
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	mov	rax, r13
	shl	rax, 5
	mov	rdi, qword ptr [r14]
	mov	r8d, edi
	not	r8d
	and	r8d, 1
	shl	r8d, 8
	xor	ecx, ecx
	mov	rdx, r8
	add	rdx, -1
	mov	r9d, 0
	adc	r9, -1
	mov	esi, 0
	adc	rsi, -1
	adc	rcx, -1
	and	rsi, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 128], 256
	mov	qword ptr [r12 + 144], 0
	and	rcx, qword ptr [r14 + 24]
	and	r9, qword ptr [r14 + 8]
	mov	qword ptr [r12 + 152], 0
	mov	qword ptr [r12 + 136], 0
	mov	qword ptr [r12 + 96], r8
	mov	qword ptr [r12 + 112], 0
	mov	qword ptr [r12 + 120], 0
	mov	qword ptr [r12 + 104], 0
	and	rdx, rdi
	mov	rdi, rcx
	shld	rdi, rsi, 63
	shld	rsi, r9, 63
	shrd	rdx, r9, 1
	shr	rcx
	mov	r9, qword ptr [r12]
	mov	r10, qword ptr [r12 + 8]
	mov	r8, qword ptr [r12 + 24]
	mov	qword ptr [r12], rdx
	mov	r15, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r14 + 16], r15
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 8], r10
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rbx + rax], ymm1
	lea	rcx, [rbx + rax]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rdi + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	rbx, qword ptr [r13 + 48]
	sub	rax, rbx
	cmp	rax, 31
	jbe	.LBB5_1074
.LBB5_729:                              # %OP10380.PUSH1
	mov	rax, qword ptr [r13 + 8]
	movbe	qword ptr [rax + rbx + 24], r9
	movbe	qword ptr [rax + rbx + 16], r10
	movbe	qword ptr [rax + rbx + 8], r15
	movbe	qword ptr [rax + rbx], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rcx], ymm1
	mov	rsi, r14
	mov	rbx, rcx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.730:                              # %OP10383.SWAP1
	mov	rcx, qword ptr [r14 + 16]
	mov	r8, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rax, qword ptr [r12 + 24]
	mov	r9, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12]
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], r8
	add	r10, 31
	adc	rdi, 0
	adc	r9, 0
	adc	rax, 0
	mov	r11, rax
	shld	r11, r9, 59
	shld	r9, rdi, 59
	shr	rax, 5
	shld	rdi, r10, 59
	add	rdi, r8
	adc	r9, rsi
	adc	r11, rcx
	adc	rax, rdx
	mov	rcx, qword ptr [r12 - 48]
	mov	rsi, qword ptr [r12 - 64]
	mov	rdx, qword ptr [r12 - 56]
	mov	r8, qword ptr [r12 - 40]
	mov	qword ptr [r12 - 56], r9
	mov	qword ptr [r12 - 40], rax
	mov	qword ptr [r12 - 64], rdi
	mov	qword ptr [r12 - 48], r11
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	r14, qword ptr [r12 - 24]
	mov	r15, qword ptr [r12 - 8]
	mov	r9, qword ptr [r12 - 32]
	mov	r13, qword ptr [r12 - 16]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_33] # xmm0 = [31,0]
	vmovdqu	ymmword ptr [r12 + 96], ymm0
	xor	eax, eax
	mov	edi, 31
	cmp	rdi, r9
	mov	edi, 0
	sbb	rdi, r14
	mov	edi, 0
	sbb	rdi, r13
	sbb	rax, r15
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jae	.LBB5_740
# %bb.731:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 88]       # 8-byte Reload
.LBB5_732:                              # %OP10409.JUMPDEST
	mov	rax, r15
	shl	rax, 5
	lea	rbx, [r11 + rax]
	mov	rcx, qword ptr [r11 + rax - 72]
	mov	rdx, qword ptr [r11 + rax - 80]
	mov	rsi, qword ptr [r11 + rax - 96]
	mov	rdi, qword ptr [r11 + rax - 88]
	shld	rcx, rdx, 1
	shld	rdx, rdi, 1
	shld	rdi, rsi, 1
	lea	rsi, [2*rsi + 1]
	mov	qword ptr [r11 + rax + 24], rcx
	mov	qword ptr [r11 + rax + 16], rdx
	mov	qword ptr [r11 + rax + 8], rdi
	mov	qword ptr [r11 + rax], rsi
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	r14, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_3035
# %bb.733:                              # %OP10417.DUP3
	mov	rdi, qword ptr [rbx - 80]
	mov	rax, qword ptr [rbx - 72]
	mov	r10, qword ptr [rbx - 96]
	mov	r9, qword ptr [rbx - 88]
	mov	rcx, r9
	or	rcx, rax
	mov	rdx, r10
	or	rdx, rdi
	xor	esi, esi
	or	rdx, rcx
	sete	sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 24], 0
	je	.LBB5_448
# %bb.734:                              # %OP10421.SWAP2
	mov	rsi, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rcx, qword ptr [rbx - 16]
	mov	r8, qword ptr [rbx - 8]
	mov	qword ptr [rbx - 72], r8
	mov	qword ptr [rbx - 80], rcx
	mov	qword ptr [rbx - 88], rdx
	mov	qword ptr [rbx - 96], rsi
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx], rsi
	add	r10, rsi
	adc	r9, rdx
	adc	rdi, rcx
	adc	rax, r8
	mov	qword ptr [rbx - 32], r10
	mov	qword ptr [rbx - 24], r9
	mov	qword ptr [rbx - 16], rdi
	mov	qword ptr [rbx - 8], rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_735:                              # %OP10424.JUMPDEST.preheader
	mov	rbx, r15
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 40], r9
	mov	qword ptr [r11 + rbx + 32], r10
	mov	qword ptr [r11 + rbx + 48], rdi
	mov	qword ptr [r11 + rbx + 56], rax
	cmp	rsi, r10
	mov	r10, rdx
	sbb	r10, r9
	mov	r9, rcx
	sbb	r9, rdi
	mov	rdi, r8
	sbb	rdi, rax
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_743
# %bb.736:                              # %OP10431.DUP3.lr.ph
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	add	rbx, r11
	mov	rax, qword ptr [r14 + 72]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	rax, qword ptr [r14 + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r12, qword ptr [rbx - 40]
	mov	r13, qword ptr [rbx - 48]
	mov	r14, qword ptr [rbx - 64]
	mov	r15, qword ptr [rbx - 56]
	.p2align	4, 0x90
.LBB5_737:                              # %OP10431.DUP3
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], r8
	sub	rsp, 8
	lea	rdi, [rbp - 912]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 912]
	mov	rcx, qword ptr [rbp - 904]
	mov	rdx, qword ptr [rbp - 888]
	mov	rsi, qword ptr [rbp - 896]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 24], rdx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [rbx + 48], r13
	mov	qword ptr [rbx + 56], r12
	mov	qword ptr [rbx + 32], r14
	mov	qword ptr [rbx + 40], r15
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.738:                              # %OP10435.SWAP2
                                        #   in Loop: Header=BB5_737 Depth=1
	mov	r10, qword ptr [rbx - 32]
	mov	r9, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 16]
	mov	rax, qword ptr [rbx - 8]
	mov	r8, qword ptr [rbx - 72]
	mov	rcx, qword ptr [rbx - 80]
	mov	rsi, qword ptr [rbx - 96]
	mov	rdx, qword ptr [rbx - 88]
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	r8, 0
	mov	qword ptr [rbx - 96], rsi
	mov	qword ptr [rbx - 88], rdx
	mov	qword ptr [rbx - 80], rcx
	mov	qword ptr [rbx - 72], r8
	mov	r12, qword ptr [rbx - 40]
	mov	r13, qword ptr [rbx - 48]
	mov	r15, qword ptr [rbx - 56]
	mov	r14, qword ptr [rbx - 64]
	add	r14, 1
	adc	r15, 0
	adc	r13, 0
	adc	r12, 0
	mov	qword ptr [rbx - 64], r14
	mov	qword ptr [rbx - 56], r15
	mov	qword ptr [rbx - 48], r13
	mov	qword ptr [rbx - 40], r12
	mov	qword ptr [rbx + 56], rax
	mov	qword ptr [rbx + 48], rdi
	mov	qword ptr [rbx + 40], r9
	mov	qword ptr [rbx + 32], r10
	cmp	rsi, r10
	mov	r10, rdx
	sbb	r10, r9
	mov	r9, rcx
	sbb	r9, rdi
	mov	rdi, r8
	sbb	rdi, rax
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jb	.LBB5_737
# %bb.739:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_741
.LBB5_448:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_743
.LBB5_740:                              # %OP10397.DUP3
	shld	r15, r13, 1
	shld	r13, r14, 1
	shld	r14, r9, 1
	add	r9, r9
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r13
	mov	qword ptr [rbx + 8], r14
	mov	qword ptr [rbx + 24], r15
	mov	qword ptr [r12 + 112], -1
	mov	qword ptr [r12 + 96], -256
	mov	qword ptr [r12 + 120], -1
	mov	qword ptr [r12 + 104], -1
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 128], rsi
	mov	qword ptr [r12 + 152], r8
	mov	qword ptr [r12 + 136], rdx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 944]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 920]
	mov	rcx, qword ptr [rbp - 944]
	mov	rdx, qword ptr [rbp - 936]
	mov	rsi, qword ptr [rbp - 928]
	mov	qword ptr [r12 + 144], rsi
	mov	qword ptr [r12 + 128], rcx
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 136], rdx
	and	rcx, -256
	or	r14, rdx
	or	r15, rax
	or	rcx, qword ptr [rbp - 48]       # 8-byte Folded Reload
	or	r13, rsi
	mov	qword ptr [rbx + 16], r13
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], r15
	mov	qword ptr [rbx + 8], r14
	mov	rax, qword ptr [r12 - 96]
	mov	rcx, qword ptr [r12 - 80]
	mov	rdx, qword ptr [r12 - 88]
	mov	rsi, qword ptr [r12 - 72]
	mov	qword ptr [r12 + 104], rdx
	mov	qword ptr [r12 + 120], rsi
	mov	qword ptr [r12 + 112], rcx
	mov	qword ptr [r12 + 96], rax
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1958
.LBB5_741:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_742:                              # %OP10349.JUMPDEST
	mov	r15, qword ptr [rbp - 88]       # 8-byte Reload
.LBB5_743:                              # %OP10349.JUMPDEST
	lea	r14, [r15 - 1]
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [r11 + r15 - 128]
	vmovdqa	xmm1, xmmword ptr [r11 + r15 - 112]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_254] # xmm2 = [21831,0,0,0]
	vmovups	ymmword ptr [r11 + r15 - 128], ymm2
	vmovups	ymm2, ymmword ptr [r11 + r15 - 96]
	vmovdqa	xmmword ptr [r11 + r15 - 80], xmm1
	vmovdqa	xmmword ptr [r11 + r15 - 96], xmm0
	vmovups	ymmword ptr [r11 + r15 - 32], ymm2
.LBB5_744:                              # %OP10446.JUMPDEST.preheader
	mov	rbx, r14
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 16]
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 32]
	mov	r8, qword ptr [r11 + rbx - 64]
	mov	r9, qword ptr [r11 + rbx - 56]
	mov	r15, r11
	mov	r11, qword ptr [r11 + rbx - 48]
	mov	r10, qword ptr [r15 + rbx - 40]
	mov	qword ptr [r15 + rbx + 56], r10
	mov	qword ptr [r15 + rbx + 48], r11
	mov	qword ptr [r15 + rbx + 40], r9
	mov	qword ptr [r15 + rbx + 32], r8
	cmp	rsi, r8
	mov	rdi, rdx
	sbb	rdi, r9
	mov	rdi, rcx
	sbb	rdi, r11
	mov	rdi, rax
	sbb	rdi, r10
	setae	dil
	movzx	edi, dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + rbx + 8], xmm0
	mov	qword ptr [r15 + rbx], rdi
	mov	qword ptr [r15 + rbx + 24], 0
	jae	.LBB5_748
# %bb.745:                              # %OP10453.PUSH1.preheader
	add	rbx, r15
	.p2align	4, 0x90
.LBB5_746:                              # %OP10453.PUSH1
                                        # =>This Inner Loop Header: Depth=1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [rbx + 32], rsi
	mov	qword ptr [rbx + 40], rdx
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 56], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_2978
# %bb.747:                              # %OP10456.PUSH1
                                        #   in Loop: Header=BB5_746 Depth=1
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 16]
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 32]
	add	rsi, 1
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx - 32], rsi
	mov	qword ptr [rbx - 24], rdx
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], rax
	mov	r8, qword ptr [rbx - 64]
	mov	r9, qword ptr [rbx - 56]
	mov	r11, qword ptr [rbx - 48]
	mov	r10, qword ptr [rbx - 40]
	mov	qword ptr [rbx + 56], r10
	mov	qword ptr [rbx + 48], r11
	mov	qword ptr [rbx + 40], r9
	mov	qword ptr [rbx + 32], r8
	cmp	rsi, r8
	mov	rdi, rdx
	sbb	rdi, r9
	mov	rdi, rcx
	sbb	rdi, r11
	mov	rdi, rax
	sbb	rdi, r10
	setae	dil
	movzx	edi, dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], 0
	jb	.LBB5_746
.LBB5_748:                              # %OP10357.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rdx + rax - 96]
	mov	rcx, qword ptr [rdx + rax - 88]
	mov	r13, qword ptr [rdx + rax - 80]
	mov	rdi, qword ptr [rdx + rax - 72]
	mov	qword ptr [rdx + rax - 80], r11
	mov	r11, rdx
	mov	qword ptr [rdx + rax - 96], r8
	mov	qword ptr [rdx + rax - 88], r9
	mov	qword ptr [rdx + rax - 72], r10
	mov	qword ptr [rdx + rax - 40], rdi
	mov	qword ptr [rdx + rax - 48], r13
	mov	qword ptr [rdx + rax - 56], rcx
	mov	qword ptr [rdx + rax - 64], rsi
	add	r14, -2
	jmp	.LBB5_24
.LBB5_852:                              # %OP626.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
	jmp	.LBB5_378
.LBB5_749:                              # %OP602.PUSH1
	add	rcx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rcx + 128], ymm0
	mov	rdi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_750:                              # %OP537.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
	mov	rdi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_752:                              # %OP2858.PUSH1
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	add	r14, r11
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.753:                              # %OP2860.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r15, r13
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.754:                              # %OP2864.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.755:                              # %OP2869.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.756:                              # %OP2874.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.757:                              # %OP2879.SWAP1
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.758:                              # %OP2880.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rcx
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_759:                              # %OP2918.PUSH1
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.760:                              # %OP2919.MLOAD.contd
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r15
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	shl	r8, 5
	mov	qword ptr [r15 + r8 + 16], rdx
	mov	qword ptr [r15 + r8], rdi
	mov	qword ptr [r15 + r8 + 24], rcx
	mov	r14, r8
	mov	qword ptr [r15 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1151
# %bb.761:                              # %OP2923.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 3
	mov	r11, r14
	mov	r14, rax
	add	r11, r15
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r13, r14
	shl	r13, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	adc	rax, 0
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r11 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1055
# %bb.762:                              # %OP2934.PUSH1
	add	r15, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_174] # xmm0 = [44,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 44
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1055
# %bb.763:                              # %OP2937.PUSH1
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22564
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 44
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], rsi
	mov	rdi, r13
	mov	rsi, r15
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.764:                              # %OP2944.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.765:                              # %OP2950.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rdi
	mov	qword ptr [r11 + 8], r9
	sub	r8, rdx
	sbb	r9, rsi
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rsi
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1224:                             # %OP154.DUP1
	vmovdqu	xmmword ptr [rsi + 40], xmm0
	mov	qword ptr [rsi + 56], 0
	mov	edx, 2987494029
	xor	rax, rdx
	or	rax, rcx
	xor	ecx, ecx
	or	rax, rbx
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_231] # ymm0 = [0,0,0,2987494029]
	vmovdqu	ymmword ptr [rsi + 8], ymm0
	mov	qword ptr [rsi], rcx
	je	.LBB5_1358
	jmp	.LBB5_1225
.LBB5_766:                              # %OP57.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + 40], xmm0
	xor	ecx, ecx
	mov	qword ptr [r15 + 56], 0
	mov	edx, 4267137671
	xor	esi, esi
	cmp	rax, rdx
	sete	sil
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_10] # ymm0 = [0,0,0,4267137671]
	vmovdqu	ymmword ptr [r15 + 8], ymm0
	mov	qword ptr [r15], rsi
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rdx, r14
	mov	edi, 0
	cmp	eax, -27829625
	mov	r15, r14
	je	.LBB5_1440
	jmp	.LBB5_1225
.LBB5_767:                              # %OP662.PUSH1
	add	rcx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rcx + 128], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_379
.LBB5_768:                              # %OP3426.PUSH1
	add	r11, r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_769:                              # %OP2988.PUSH1
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	add	r14, r11
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	add	r15, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r12, rsp
	add	r12, -32
	mov	rsp, r12
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r12
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.770:                              # %OP2990.MLOAD.contd
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.771:                              # %OP2994.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.772:                              # %OP2999.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.773:                              # %OP3004.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.774:                              # %OP3009.SWAP1
	mov	r15, r12
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r12, rsp
	add	r12, -32
	mov	rsp, r12
	mov	r8, r12
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.775:                              # %OP3010.MLOAD.contd
	mov	rax, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rsi, qword ptr [r12]
	mov	rcx, qword ptr [r12 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rcx
	mov	rdi, r15
	mov	rsi, r14
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_776:                              # %OP3317.PUSH1
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	add	r9, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	vmovdqu	ymmword ptr [r9], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r12, r9
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.777:                              # %OP3319.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], rdi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 3]
	mov	r15, qword ptr [rbp - 88]       # 8-byte Reload
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 16], rdx
	mov	qword ptr [r13 + r14], rdi
	mov	qword ptr [r13 + r14 + 24], rcx
	mov	qword ptr [r13 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.778:                              # %OP3323.PUSH1
	add	r15, r13
	add	r14, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 32
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	r13, r12
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.779:                              # %OP3330.PUSH1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	sub	rsp, 8
	push	r13
	push	qword ptr [r15 + 24]
	push	qword ptr [r15 + 16]
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.780:                              # %OP3334.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_177] # ymm0 = [7522454415709463922,7598452654992531572,2333816150210998816,5726166815767029050]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 8
	movabs	rax, 5726166815767029050
	movabs	r10, 2333816150210998816
	movabs	r8, 7522454415709463922
	movabs	r9, 7598452654992531572
	push	r13
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.781:                              # %OP3339.SWAP1
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	r8, qword ptr [r11]
	mov	r9, qword ptr [r11 + 8]
	mov	r10, qword ptr [r11 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r13
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.782:                              # %OP3340.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 100
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	r12, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_783:                              # %OP3355.PUSH1
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.784:                              # %OP3356.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r15, qword ptr [rbp - 88]       # 8-byte Reload
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r13
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.785:                              # %OP3360.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	adc	rax, 0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.786:                              # %OP3371.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_42] # xmm0 = [42,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 42
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.787:                              # %OP3374.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22365
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_42] # xmm0 = [42,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r13
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_2380
# %bb.788:                              # %OP3381.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.789:                              # %OP3387.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_790:                              # %OP755.PUSH1
	add	rcx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rcx + 128], ymm0
	mov	rdi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_1033
.LBB5_791:                              # %select.end56271
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_879:
	xor	eax, eax
	mov	qword ptr [rbp - 224], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 200]      # 8-byte Reload
	mov	r15, qword ptr [rbp - 208]      # 8-byte Reload
.LBB5_880:                              # %udiv-loop-exit56115
	shld	r11, r15, 1
	mov	rcx, qword ptr [rbp - 224]      # 8-byte Reload
	or	r11, rcx
	mov	qword ptr [rbp - 48], r11       # 8-byte Spill
	shld	r15, rax, 1
	or	r15, rcx
	shld	rax, rsi, 1
	or	rax, rcx
	add	rsi, rsi
	or	rsi, rdx
	mov	r13, qword ptr [rbp - 184]      # 8-byte Reload
	mov	r14, qword ptr [rbp - 192]      # 8-byte Reload
.LBB5_881:                              # %udiv-end56114
	mov	rdi, qword ptr [r13]
	mov	r12, rsi
	mov	r11, qword ptr [r13 + 8]
	mov	r9, qword ptr [r13 + 16]
	mov	rdx, rsi
	mulx	rdx, rbx, r9
	mov	r8, qword ptr [r13 + 24]
	imul	r8, rsi
	mov	rcx, rax
	imul	r9, rax
	add	r9, rdx
	add	r9, r8
	mov	r8, r15
	imul	r8, r11
	mov	rdx, r15
	mulx	rdx, rsi, rdi
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	imul	r10, rdi
	add	r10, r8
	add	r10, rdx
	mov	rdx, rdi
	mulx	r15, r8, r12
	mov	rdx, r11
	mulx	r12, rax, r12
	add	rsi, rbx
	adc	r10, r9
	add	rax, r15
	mov	rdx, rdi
	mulx	rdi, r9, rcx
	adc	r12, 0
	add	r9, rax
	adc	rdi, r12
	mov	rdx, r11
	mulx	r11, rax, rcx
	setb	cl
	movzx	ecx, cl
	add	rax, rdi
	adc	r11, rcx
	add	rax, rsi
	adc	r11, r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rax
	mov	rsi, qword ptr [r14 + 104]
	mov	rcx, qword ptr [r14 + 120]
	mov	rdi, qword ptr [r14 + 96]
	mov	rdx, qword ptr [r14 + 112]
	mov	qword ptr [r14 + 240], rdx
	mov	qword ptr [r14 + 224], rdi
	mov	qword ptr [r14 + 248], rcx
	mov	qword ptr [r14 + 232], rsi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	r11
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_66
# %bb.882:                              # %OP5725.SWAP2
	mov	rax, qword ptr [r14 + 120]
	mov	rcx, qword ptr [r14 + 112]
	mov	rdx, qword ptr [r14 + 96]
	mov	rsi, qword ptr [r14 + 104]
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 32
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 96], rdx
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rcx
	mov	qword ptr [r14 + 120], rax
	jmp	.LBB5_443
.LBB5_915:                              # %OP6741.PUSH1
	add	r13, 2
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_931
# %bb.916:                              # %OP6743.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.917:                              # %OP6747.PUSH1
	add	r12, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.918:                              # %OP6752.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.919:                              # %OP6757.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r12       # 8-byte Spill
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.920:                              # %OP6762.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.921:                              # %OP6763.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rcx
	jmp	.LBB5_1029
.LBB5_792:                              # %OP3757.PUSH1
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3062
# %bb.793:                              # %OP3758.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3062
# %bb.794:                              # %OP3762.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	adc	rax, 0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.795:                              # %OP3773.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_162] # xmm0 = [40,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 40
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.796:                              # %OP3776.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 23164
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_162] # xmm0 = [40,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.797:                              # %OP3783.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.798:                              # %OP3789.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_799:                              # %OP3713.PUSH1
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3062
# %bb.800:                              # %OP3714.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3062
# %bb.801:                              # %OP3718.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	adc	rax, 0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.802:                              # %OP3729.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_147] # xmm0 = [46,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 46
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.803:                              # %OP3732.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22844
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_147] # xmm0 = [46,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.804:                              # %OP3739.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.805:                              # %OP3745.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_806:                              # %OP3669.PUSH1
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3062
# %bb.807:                              # %OP3670.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3062
# %bb.808:                              # %OP3674.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	adc	rax, 0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.809:                              # %OP3685.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 41
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.810:                              # %OP3688.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22324
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.811:                              # %OP3695.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.812:                              # %OP3701.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_813:                              # %OP3625.PUSH1
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3062
# %bb.814:                              # %OP3626.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3062
# %bb.815:                              # %OP3630.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	adc	rax, 0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.816:                              # %OP3641.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_188] # xmm0 = [47,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 47
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.817:                              # %OP3644.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22721
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_188] # xmm0 = [47,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.818:                              # %OP3651.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.819:                              # %OP3657.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_820:                              # %OP3581.PUSH1
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3062
# %bb.821:                              # %OP3582.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	r14, r8
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3062
# %bb.822:                              # %OP3586.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 3]
	add	r15, r14
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	adc	rax, 0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.823:                              # %OP3597.PUSH1
	mov	rax, r14
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_42] # xmm0 = [42,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 42
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.824:                              # %OP3600.PUSH1
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22927
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	mov	rsi, r14
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 42
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], rdi
	mov	rdi, r12
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.825:                              # %OP3607.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.826:                              # %OP3613.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], r9
	sub	r8, rdx
	sbb	r9, rsi
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rsi
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_827:                              # %OP4115.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1083
# %bb.828:                              # %OP4116.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	movabs	rax, 631482100863729664
	mov	r12, rbx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	qword ptr [rbx + 8], 0
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB5_1083
# %bb.829:                              # %OP4120.PUSH1
	mov	rax, qword ptr [r15 + 24]
	mov	r10, qword ptr [r15 + 16]
	mov	r9, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	shl	r14, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	adc	rax, 0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	r12, r15
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	mov	qword ptr [r12 + 152], rcx
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.830:                              # %OP4131.PUSH1
	add	r15, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_213] # xmm0 = [33,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 152], rcx
	mov	qword ptr [r12 + 136], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 33
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.831:                              # %OP4134.PUSH1
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r12 + 144], 0
	mov	qword ptr [r12 + 128], 22688
	mov	qword ptr [r12 + 152], 0
	mov	qword ptr [r12 + 136], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 33
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r12 + 176], rcx
	mov	qword ptr [r12 + 160], rdx
	mov	qword ptr [r12 + 184], rax
	mov	qword ptr [r12 + 168], rsi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r15
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.832:                              # %OP4141.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [r12]
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1134
# %bb.833:                              # %OP4147.MLOAD.contd
	mov	rsi, r12
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	r11, qword ptr [r14 + 8]
	mov	rdi, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], r9
	sub	r8, rdx
	sbb	r9, r11
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r11
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_834:                              # %OP1021.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_835:                              # %OP3477.PUSH1
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	mov	r15, rcx
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	add	r12, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.836:                              # %OP3478.MLOAD.contd
	lea	r8, [r15 + 3]
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r9
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	shl	r8, 5
	mov	qword ptr [r9 + r8 + 16], rdx
	mov	qword ptr [r9 + r8], rdi
	mov	qword ptr [r9 + r8 + 24], rcx
	mov	rbx, r8
	mov	qword ptr [r9 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.837:                              # %OP3482.PUSH1
	add	r15, 4
	mov	r11, rbx
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	add	r11, rbx
	mov	rax, qword ptr [r12 + 24]
	mov	r10, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12]
	mov	r8, qword ptr [r12 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	adc	rax, 0
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r11 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + r15], ymm0
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 168], rsi
	mov	qword ptr [r14 + 160], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.838:                              # %OP3493.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	mov	qword ptr [rbp - 56], rax       # 8-byte Spill
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 168], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 41
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.839:                              # %OP3496.PUSH1
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r14 + 176], 0
	mov	qword ptr [r14 + 160], 22523
	mov	qword ptr [r14 + 184], 0
	mov	qword ptr [r14 + 168], 0
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + 16], 0
	mov	qword ptr [rsi], 41
	mov	qword ptr [rsi + 24], 0
	mov	qword ptr [rsi + 8], 0
	mov	qword ptr [r14 + 208], rcx
	mov	qword ptr [r14 + 192], rdx
	mov	qword ptr [r14 + 216], rax
	mov	qword ptr [r14 + 200], rdi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.840:                              # %OP3503.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [r12]
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.841:                              # %OP3509.MLOAD.contd
	mov	rdi, rbx
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	r11, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15 + 8], r9
	sub	r8, rdx
	sbb	r9, rsi
	sbb	r10, rcx
	sbb	r11, rax
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 24], r11
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rsi
	mov	rsi, r12
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_842:                              # %OP4067.PUSH1
	add	r14, r11
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2988
# %bb.843:                              # %OP4069.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r15, r13
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.844:                              # %OP4073.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.845:                              # %OP4078.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.846:                              # %OP4083.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.847:                              # %OP4088.SWAP1
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.848:                              # %OP4089.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rcx
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_849:                              # %OP997.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_850:                              # %OP983.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_851:                              # %OP916.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_853:                              # %OP892.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_854:                              # %OP878.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_855:                              # %OP811.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_856:                              # %OP787.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_857:                              # %OP773.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_883:                              # %OP2101.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	jmp	.LBB5_884
.LBB5_858:                              # %OP8342.PUSH1
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	add	rax, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	lea	r13, [r14 + 1]
	shl	r14, 5
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.859:                              # %OP8344.MLOAD.contd
	lea	r12, [r15 + r14]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.860:                              # %OP8348.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.861:                              # %OP8353.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_46] # xmm0 = [30,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 30
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.862:                              # %OP8358.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_258] # ymm0 = [8678552421991186432,7883960305245692005,7950597417402918258,5073693607470263141]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 104], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	sub	rsp, 8
	movabs	rax, 5073693607470263141
	movabs	r10, 7950597417402918258
	movabs	r8, 8678552421991186432
	movabs	r9, 7883960305245692005
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.863:                              # %OP8363.SWAP1
	vmovdqa	xmm0, xmmword ptr [r12]
	vmovdqa	xmm1, xmmword ptr [r12 + 16]
	mov	rdi, qword ptr [r12 - 32]
	mov	rsi, qword ptr [r12 - 24]
	mov	rcx, qword ptr [r12 - 8]
	mov	rdx, qword ptr [r12 - 16]
	vmovdqa	xmmword ptr [r12 - 16], xmm1
	vmovdqa	xmmword ptr [r12 - 32], xmm0
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3076
# %bb.864:                              # %OP8364.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rsi, [rax + r14]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r8, qword ptr [r12 - 8]
	mov	r9, qword ptr [r12 - 16]
	mov	r10, qword ptr [r12 - 32]
	mov	r11, qword ptr [r12 - 24]
	sub	r10, rcx
	sbb	r11, rdx
	sbb	r9, rdi
	sbb	r8, rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 100
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	r10, 100
	adc	r11, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r12 - 32], r10
	mov	qword ptr [r12 - 24], r11
	mov	qword ptr [r12 - 16], r9
	mov	qword ptr [r12 - 8], r8
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	rdi, r15
	jmp	.LBB5_993
.LBB5_991:                              # %OP2453.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	jmp	.LBB5_992
.LBB5_1025:                             # %OP2429.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	jmp	.LBB5_993
.LBB5_865:                              # %OP5244.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.866:                              # %OP5245.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.867:                              # %OP5249.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	adc	rax, 0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.868:                              # %OP5260.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_162] # xmm0 = [40,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 40
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.869:                              # %OP5263.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22093
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_162] # xmm0 = [40,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.870:                              # %OP5270.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.871:                              # %OP5276.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_872:                              # %OP4557.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1134
# %bb.873:                              # %OP4558.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	movabs	rax, 631482100863729664
	mov	r15, rbx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	qword ptr [rbx + 8], 0
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1134
# %bb.874:                              # %OP4562.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	r10, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r8, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	shl	r14, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r9
	adc	rax, 0
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	mov	qword ptr [r13 + 152], rcx
	mov	qword ptr [r13 + 144], rdx
	mov	qword ptr [r13 + 136], rsi
	mov	qword ptr [r13 + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.875:                              # %OP4573.PUSH1
	add	r15, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_213] # xmm0 = [33,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r13 + 144], rdx
	mov	qword ptr [r13 + 128], rdi
	mov	qword ptr [r13 + 152], rcx
	mov	qword ptr [r13 + 136], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 33
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.876:                              # %OP4576.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r13 + 144], 0
	mov	qword ptr [r13 + 128], 22688
	mov	qword ptr [r13 + 152], 0
	mov	qword ptr [r13 + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_213] # xmm0 = [33,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [r13 + 184], rax
	mov	qword ptr [r13 + 176], rcx
	mov	qword ptr [r13 + 168], rsi
	mov	qword ptr [r13 + 160], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.877:                              # %OP4583.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r13]
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1210
# %bb.878:                              # %OP4589.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	rdi, qword ptr [r13 + 8]
	mov	r8, qword ptr [r13 + 24]
	mov	r9, qword ptr [r13]
	mov	r10, qword ptr [r13 + 16]
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_887:                              # %OP3953.PUSH1
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	add	r14, r11
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2988
# %bb.888:                              # %OP3955.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r15, r13
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.889:                              # %OP3959.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.890:                              # %OP3964.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.891:                              # %OP3969.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.892:                              # %OP3974.SWAP1
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.893:                              # %OP3975.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rcx
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_894:                              # %OP6048.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.895:                              # %OP6049.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.896:                              # %OP6053.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	adc	rax, 0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.897:                              # %OP6064.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_188] # xmm0 = [47,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 47
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.898:                              # %OP6067.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22721
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_188] # xmm0 = [47,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.899:                              # %OP6074.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.900:                              # %OP6080.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_901:                              # %OP5206.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	r12, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.902:                              # %OP5208.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 3]
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.903:                              # %OP5212.PUSH1
	add	r13, r15
	add	r14, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 32
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.904:                              # %OP5219.PUSH1
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	sub	rsp, 8
	push	r15
	push	qword ptr [r13 + 24]
	push	qword ptr [r13 + 16]
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.905:                              # %OP5223.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_177] # ymm0 = [7522454415709463922,7598452654992531572,2333816150210998816,5726166815767029050]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 8
	movabs	rax, 5726166815767029050
	movabs	r10, 2333816150210998816
	movabs	r8, 7522454415709463922
	movabs	r9, 7598452654992531572
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.906:                              # %OP5228.SWAP1
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.907:                              # %OP5229.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 100
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_908:                              # %OP4509.PUSH1
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	add	rdi, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r15, rdi
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1210
# %bb.909:                              # %OP4511.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r14 + 24], rax
	mov	qword ptr [r13 + r14 + 16], 0
	mov	qword ptr [r13 + r14], 0
	mov	qword ptr [r13 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.910:                              # %OP4515.PUSH1
	add	r13, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.911:                              # %OP4520.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.912:                              # %OP4525.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.913:                              # %OP4530.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1210
# %bb.914:                              # %OP4531.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rcx
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_922:                              # %OP5421.PUSH1
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1087
# %bb.923:                              # %OP5422.MLOAD.contd
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r15
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	mov	r14, rbx
	push	rbx
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1087
# %bb.924:                              # %OP5426.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [rax + 3]
	add	r13, r15
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	r10, qword ptr [r11 + 16]
	mov	r9, qword ptr [r11]
	mov	r8, qword ptr [r11 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	shl	rbx, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	adc	rax, 0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + rbx], ymm0
	mov	qword ptr [r11 + 152], rcx
	mov	qword ptr [r11 + 144], rdx
	mov	qword ptr [r11 + 136], rsi
	mov	qword ptr [r11 + 128], rdi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.925:                              # %OP5437.PUSH1
	add	r15, rbx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_72] # xmm0 = [34,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax + 144], rdx
	mov	qword ptr [rax + 128], rdi
	mov	qword ptr [rax + 152], rcx
	mov	qword ptr [rax + 136], rsi
	sub	rsp, 32
	mov	rbx, r14
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 34
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.926:                              # %OP5440.PUSH1
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rax
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rdi + 144], 0
	mov	qword ptr [rdi + 128], 23088
	mov	qword ptr [rdi + 152], 0
	mov	qword ptr [rdi + 136], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 34
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [rdi + 176], rcx
	mov	qword ptr [rdi + 160], rdx
	mov	qword ptr [rdi + 184], rax
	mov	qword ptr [rdi + 168], rsi
	mov	rdi, rbx
	mov	rsi, r15
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_2380
# %bb.927:                              # %OP5447.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymm1, ymmword ptr [rdi]
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 24], rax
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.928:                              # %OP5453.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	r11, qword ptr [r14 + 8]
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rsi + 24]
	mov	r8, qword ptr [rsi]
	mov	r9, qword ptr [rsi + 8]
	mov	r10, qword ptr [rsi + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], r9
	sub	r8, rdx
	sbb	r9, r11
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rsi], r8
	mov	qword ptr [rsi + 16], r10
	mov	qword ptr [rsi + 8], r9
	mov	qword ptr [rsi + 24], rdi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r11
	mov	rdi, rbx
	jmp	.LBB5_993
.LBB5_929:                              # %OP2077.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	jmp	.LBB5_885
.LBB5_932:                              # %OP5323.PUSH1
	add	r13, 2
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3049
# %bb.933:                              # %OP5325.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.934:                              # %OP5329.PUSH1
	add	r12, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.935:                              # %OP5334.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.936:                              # %OP5339.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r12       # 8-byte Spill
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.937:                              # %OP5344.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.938:                              # %OP5345.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_939:                              # %OP6010.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	r12, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.940:                              # %OP6012.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 3]
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.941:                              # %OP6016.PUSH1
	add	r13, r15
	add	r14, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 32
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.942:                              # %OP6023.PUSH1
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	sub	rsp, 8
	push	r15
	push	qword ptr [r13 + 24]
	push	qword ptr [r13 + 16]
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.943:                              # %OP6027.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_177] # ymm0 = [7522454415709463922,7598452654992531572,2333816150210998816,5726166815767029050]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 8
	movabs	rax, 5726166815767029050
	movabs	r10, 2333816150210998816
	movabs	r8, 7522454415709463922
	movabs	r9, 7598452654992531572
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.944:                              # %OP6032.SWAP1
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.945:                              # %OP6033.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 100
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_946:                              # %OP7007.PUSH1
	add	r13, 2
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_931
# %bb.947:                              # %OP7009.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.948:                              # %OP7013.PUSH1
	add	r12, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.949:                              # %OP7018.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_110] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.950:                              # %OP7023.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r12       # 8-byte Spill
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.951:                              # %OP7028.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.952:                              # %OP7029.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_953:                              # %OP4000.PUSH1
	mov	rbx, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3070
# %bb.954:                              # %OP4001.MLOAD.contd
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r15
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	shl	r8, 5
	mov	qword ptr [r15 + r8 + 16], rdx
	mov	qword ptr [r15 + r8], rdi
	mov	qword ptr [r15 + r8 + 24], rcx
	mov	r14, r8
	mov	qword ptr [r15 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r13
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3070
# %bb.955:                              # %OP4005.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 3
	mov	r11, r14
	mov	r14, rax
	add	r11, r15
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r13, r14
	shl	r13, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	adc	rax, 0
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r11 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_371
# %bb.956:                              # %OP4016.PUSH1
	add	r15, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_72] # xmm0 = [34,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax + 144], rdx
	mov	qword ptr [rax + 128], rdi
	mov	qword ptr [rax + 152], rcx
	mov	qword ptr [rax + 136], rsi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 34
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_371
# %bb.957:                              # %OP4019.PUSH1
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rdi + 144], 0
	mov	qword ptr [rdi + 128], 23088
	mov	qword ptr [rdi + 152], 0
	mov	qword ptr [rdi + 136], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 34
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [rdi + 176], rcx
	mov	qword ptr [rdi + 160], rdx
	mov	qword ptr [rdi + 184], rax
	mov	qword ptr [rdi + 168], rsi
	mov	rdi, r13
	mov	rsi, r15
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_371
# %bb.958:                              # %OP4026.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	vmovdqu	ymm1, ymmword ptr [r8]
	mov	qword ptr [r8], rdx
	mov	qword ptr [r8 + 8], rsi
	mov	qword ptr [r8 + 16], rcx
	mov	qword ptr [r8 + 24], rax
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.959:                              # %OP4032.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rbx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rsi + 24]
	mov	r8, qword ptr [rsi]
	mov	r9, qword ptr [rsi + 8]
	mov	r10, qword ptr [rsi + 16]
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rdi
	mov	qword ptr [r11 + 8], r9
	sub	r8, rdx
	sbb	r9, rbx
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rsi], r8
	mov	qword ptr [rsi + 16], r10
	mov	qword ptr [rsi + 8], r9
	mov	qword ptr [rsi + 24], rdi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rbx
	mov	rdi, r13
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_960:                              # %OP2063.PUSH1
	add	r15, r11
	add	rbx, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15 + 160], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	jmp	.LBB5_885
.LBB5_961:                              # %OP2033.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
	mov	rdi, r12
	jmp	.LBB5_885
.LBB5_962:                              # %OP4813.PUSH1
	add	r11, r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_963:                              # %OP2609.PUSH1
	mov	rbx, r10
	add	r15, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [r15 + 128], ymm0
	jmp	.LBB5_378
.LBB5_964:                              # %OP6598.PUSH1
	mov	rbx, rsi
	add	rax, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rax], ymm0
	shl	r14, 5
	lea	rsi, [r11 + r14]
	add	rsi, -32
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	jmp	.LBB5_378
.LBB5_966:                              # %OP9698.PUSH1
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.967:                              # %OP9699.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	r14, rax
	add	r12, rax
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1151
# %bb.968:                              # %OP9703.PUSH1
	mov	rax, qword ptr [r15 + 24]
	mov	r10, qword ptr [r15 + 16]
	mov	r9, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	mov	r13, qword ptr [rbp - 96]       # 8-byte Reload
	lea	rbx, [r13 + 5]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r15, rbx
	shl	r15, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r14 + 144], r10
	mov	qword ptr [r14 + 128], r9
	adc	rax, 0
	mov	qword ptr [r14 + 152], rax
	mov	qword ptr [r14 + 136], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax + r15], ymm0
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 200], rsi
	mov	qword ptr [r14 + 192], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3087
# %bb.969:                              # %OP9714.DUP4
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	lea	rbx, [r13 + 7]
	mov	rdx, qword ptr [r14 + 48]
	mov	rdi, qword ptr [r14 + 32]
	mov	rsi, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	rax, qword ptr [r14 + 136]
	mov	r8, qword ptr [r14 + 152]
	mov	r9, qword ptr [r14 + 128]
	mov	r10, qword ptr [r14 + 144]
	mov	qword ptr [r14 + 208], r10
	mov	qword ptr [r14 + 192], r9
	mov	qword ptr [r14 + 216], r8
	mov	qword ptr [r14 + 200], rax
	lea	r12, [r13 + 8]
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	r13, rbx
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rdx
	mov	qword ptr [r11 + r13 + 24], rcx
	mov	qword ptr [r11 + r13], rdi
	mov	qword ptr [r11 + r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3097
# %bb.970:                              # %OP9717.MLOAD.contd
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	rsi, qword ptr [r14 + 200]
	mov	rcx, qword ptr [r14 + 216]
	mov	rdi, qword ptr [r14 + 192]
	mov	rdx, qword ptr [r14 + 208]
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rdx
	mov	qword ptr [r11 + r12], rdi
	mov	qword ptr [r11 + r12 + 24], rcx
	mov	qword ptr [r11 + r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.971:                              # %OP9720.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r14 + 216]
	mov	rcx, qword ptr [r14 + 208]
	mov	rdx, qword ptr [r14 + 192]
	mov	rsi, qword ptr [r14 + 200]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 152], rax
	mov	qword ptr [r14 + 128], rdx
	mov	qword ptr [r14 + 144], rcx
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 192], rdi
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r14 + 200], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.972:                              # %OP9725.MLOAD.contd
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r11
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15 + 16]
	mov	rax, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	add	rax, 32
	adc	r8, 0
	adc	rdi, 0
	adc	rsi, 0
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15 + 24], rsi
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 208], r10
	mov	qword ptr [r14 + 192], rdx
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r14 + 200], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], r9
	vmovdqu	ymm0, ymmword ptr [r14 + 128]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [r14 + 312], rsi
	mov	qword ptr [r14 + 304], rdi
	mov	qword ptr [r14 + 296], r8
	mov	qword ptr [r14 + 288], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 320], ymm0
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	add	r10, 11
	jmp	.LBB5_2839
.LBB5_973:                              # %OP1346.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_974:                              # %OP1322.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_975:                              # %OP1308.PUSH1
	add	rbx, r11
	add	r14, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_976:                              # %OP5080.PUSH1
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3062
# %bb.977:                              # %OP5081.MLOAD.contd
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r13
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	shl	r8, 5
	mov	qword ptr [r13 + r8 + 16], rdx
	mov	qword ptr [r13 + r8], rdi
	mov	qword ptr [r13 + r8 + 24], rcx
	mov	r14, r8
	mov	qword ptr [r13 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3062
# %bb.978:                              # %OP5085.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 3
	mov	r11, r14
	mov	r14, rax
	add	r11, r13
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r12, r14
	shl	r12, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	adc	rax, 0
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r11 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_371
# %bb.979:                              # %OP5096.PUSH1
	add	r13, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 41
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_371
# %bb.980:                              # %OP5099.PUSH1
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22523
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 41
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], rsi
	mov	rdi, r12
	mov	rsi, r13
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_371
# %bb.981:                              # %OP5106.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.982:                              # %OP5112.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rdi
	mov	qword ptr [r11 + 8], r9
	sub	r8, rdx
	sbb	r9, rsi
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_983:                              # %OP7194.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.984:                              # %OP7195.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r15, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1151
# %bb.985:                              # %OP7199.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r9
	mov	qword ptr [r11 + r13 + 8], rsi
	mov	qword ptr [r11 + r13 + 24], rcx
	mov	qword ptr [r11 + r13 + 16], rdx
	mov	qword ptr [r11 + r13], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.986:                              # %OP7210.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_90] # xmm0 = [38,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 38
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.987:                              # %OP7213.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_180] # xmm0 = [22252,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_90] # xmm0 = [38,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r13
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.988:                              # %OP7220.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.989:                              # %OP7226.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_990:                              # %OP1287.PUSH1
	add	r12, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [r12 + 64], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_995:                              # %OP5806.PUSH1
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	add	r14, r11
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.996:                              # %OP5808.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r15, r13
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.997:                              # %OP5812.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.998:                              # %OP5817.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.999:                              # %OP5822.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1000:                             # %OP5827.SWAP1
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1001:                             # %OP5828.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rcx
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1002:                             # %OP1591.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1003:                             # %OP5857.PUSH1
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	add	r14, r11
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1004:                             # %OP5859.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r15, r13
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1005:                             # %OP5863.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1006:                             # %OP5868.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1007:                             # %OP5873.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1008:                             # %OP5878.SWAP1
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1009:                             # %OP5879.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rcx
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1010:                             # %OP5040.PUSH1
	add	r14, r11
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2988
# %bb.1011:                             # %OP5042.MLOAD.contd
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	mov	r15, r13
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1012:                             # %OP5046.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1013:                             # %OP5051.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1014:                             # %OP5056.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbx + 64]
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], rdi
	mov	qword ptr [rbx + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1015:                             # %OP5061.SWAP1
	mov	rax, qword ptr [rbx + 88]
	mov	r8, qword ptr [rbx + 64]
	mov	r9, qword ptr [rbx + 72]
	mov	r10, qword ptr [rbx + 80]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1016:                             # %OP5062.MLOAD.contd
	mov	rax, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r14 + 24]
	mov	r8, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rcx
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1017:                             # %OP7156.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	r12, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.1018:                             # %OP7158.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 3]
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1019:                             # %OP7162.PUSH1
	add	r13, r15
	add	r14, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_4] # xmm1 = [4,0]
	vmovdqu	ymmword ptr [r14], ymm1
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	vmovdqu	ymmword ptr [rbx + 128], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1020:                             # %OP7169.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_110] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	sub	rsp, 8
	push	r15
	push	qword ptr [r13 + 24]
	push	qword ptr [r13 + 16]
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1021:                             # %OP7173.PUSH32
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_177] # ymm0 = [7522454415709463922,7598452654992531572,2333816150210998816,5726166815767029050]
	vmovups	ymmword ptr [r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_36] # xmm0 = [68,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 8
	movabs	rax, 5726166815767029050
	movabs	r10, 2333816150210998816
	movabs	r8, 7522454415709463922
	movabs	r9, 7598452654992531572
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1022:                             # %OP7178.SWAP1
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.1023:                             # %OP7179.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rsi
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rcx
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 16], r8
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], rdi
	sub	rdi, rcx
	sbb	r9, rsi
	sbb	r8, rdx
	sbb	r10, rax
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_39] # xmm0 = [100,0]
	vmovdqu	ymmword ptr [r13], ymm0
	add	rdi, 100
	adc	r9, 0
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [r12], rdi
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], rdx
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1024:                             # %OP1263.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, r12
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1026:                             # %OP1577.PUSH1
	add	r15, r11
	add	rbx, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15 + 288], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1027:                             # %OP1249.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1028:                             # %OP2230.PUSH1
	add	r15, r11
	add	rbx, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15 + 288], ymm0
.LBB5_1029:                             # %OP2230.PUSH1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	jmp	.LBB5_993
.LBB5_1030:                             # %OP2415.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdi, r12
	jmp	.LBB5_993
.LBB5_1031:                             # %OP1523.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
	mov	rdi, r12
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1032:                             # %OP2176.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
.LBB5_992:                              # %OP2453.PUSH1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_993:                              # %OP2453.PUSH1
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_142
# %bb.994:                              # %select.false57302
	mov	eax, ecx
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1034:                             # %resize.i50525
	mov	esi, 32
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_115
# %bb.1035:
	mov	rcx, rsi
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1036:                             # %resize.i50540
	mov	esi, 64
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, r12
	mov	r12, r8
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	mov	r8, r12
	mov	r12, r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_116
	jmp	.LBB5_1037
.LBB5_1038:                             # %resize.i50555
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, r9
	mov	qword ptr [rbp - 176], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 176]      # 8-byte Reload
	mov	r10, -1
	mov	r9, r12
	test	al, al
	je	.LBB5_118
	jmp	.LBB5_1039
.LBB5_3029:                             # %resize.i50570
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 136], r12      # 8-byte Spill
	mov	r12, r11
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, r12
	mov	r12, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB5_119
	jmp	.LBB5_1191
.LBB5_1040:                             # %resize.i50586
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.1041:                             # %resize.i50586.OP7465.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r10, qword ptr [rax + 40]
	mov	r9, -1
	jmp	.LBB5_122
.LBB5_1042:                             # %resize.i50601
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	mov	qword ptr [rbp - 160], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 160]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB5_123
	jmp	.LBB5_1191
.LBB5_1043:                             # %resize.i50617
	mov	r12, rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.1044:                             # %resize.i50617.OP7470.MLOAD.contd_crit_edge
	mov	r8, qword ptr [rbx + 88]
	mov	rcx, qword ptr [rbx + 80]
	mov	rdx, qword ptr [rbx + 64]
	mov	rdi, qword ptr [rbx + 72]
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rax, r12
	jmp	.LBB5_124
.LBB5_1045:                             # %resize.i49709
	mov	r13, r9
	mov	r12, rdx
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.1046:                             # %resize.i49709.OP2737.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbx + 88]
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	rax, qword ptr [rbx + 80]
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	rax, qword ptr [rbx + 64]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	rax, qword ptr [rbx + 72]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, r12
	mov	r9, r13
	jmp	.LBB5_52
.LBB5_1047:                             # %resize.i49724
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, -1
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_53
	jmp	.LBB5_1049
.LBB5_1048:                             # %resize.i49739
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	test	al, al
	je	.LBB5_54
.LBB5_1049:
	mov	rcx, qword ptr [rbp - 200]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1050:                             # %resize.i51662
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_29
	jmp	.LBB5_1051
.LBB5_1052:                             # %resize.i51068
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_6
	jmp	.LBB5_1051
.LBB5_3032:                             # %resize.i50631
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r12
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_432
	jmp	.LBB5_1244
.LBB5_1053:                             # %resize.i50646
	mov	esi, 64
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_433
	jmp	.LBB5_1244
.LBB5_1054:
	mov	rcx, r14
	jmp	.LBB5_1055
.LBB5_1243:                             # %resize.i49768
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r14
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_58
	jmp	.LBB5_1244
.LBB5_1056:                             # %resize.i
	mov	esi, 96
	mov	rdi, r12
	mov	r15, rdx
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, r15
	test	al, al
	je	.LBB5_10
# %bb.1057:
	xor	ecx, ecx
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_1058:
	mov	r10, qword ptr [rbp - 192]      # 8-byte Reload
	add	r10, 9
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1059:                             # %resize.i49754
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_441
.LBB5_66:
	mov	rcx, qword ptr [rbp - 176]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1060:
	inc	r14
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1061:                             # %select.false
	mov	eax, ecx
	jmp	.LBB5_12
.LBB5_1062:                             # %resize.i51415
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r12
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_83
	jmp	.LBB5_142
.LBB5_1063:                             # %resize.i51430
	mov	r12, rsi
	mov	esi, 64
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, r12
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_84
	jmp	.LBB5_142
.LBB5_1064:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -2
	jmp	.LBB5_3001
.LBB5_1065:                             # %resize.i51386
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r13
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_78
	jmp	.LBB5_142
.LBB5_1066:                             # %resize.i51401
	mov	esi, 64
	mov	rdi, r13
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_79
	jmp	.LBB5_142
.LBB5_321:
	mov	rdx, rbx
	jmp	.LBB5_2884
.LBB5_322:                              # %select.false57346
	mov	eax, ecx
	jmp	.LBB5_320
.LBB5_1067:
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_2988
.LBB5_1957:                             # %resize.i49799
	mov	esi, 96
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_235
	jmp	.LBB5_1958
.LBB5_1068:                             # %resize.i52104
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_142
# %bb.1069:                             # %resize.i52104.OP10130.MLOAD.contd_crit_edge
	mov	r8, qword ptr [r12 - 72]
	mov	rax, qword ptr [r12 - 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [r12 - 96]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	rax, qword ptr [r12 - 88]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rax + 24]
	mov	r10, qword ptr [rax + 40]
	xor	eax, eax
	xor	edx, edx
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB5_16
.LBB5_3036:                             # %resize.i52119
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 96
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [rbp - 112], rcx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	vpxor	xmm1, xmm1, xmm1
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	test	al, al
	je	.LBB5_17
	jmp	.LBB5_3037
.LBB5_1070:                             # %resize.i52134
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_18
	jmp	.LBB5_3037
.LBB5_965:                              # %select.false56257
	mov	eax, ecx
	jmp	.LBB5_380
.LBB5_3085:                             # %resize.i52180
	mov	qword ptr [rbp - 144], rsi      # 8-byte Spill
	mov	esi, 32
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	mov	rsi, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_286
	jmp	.LBB5_1244
.LBB5_1071:                             # %resize.i49875
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.1072:                             # %resize.i49875.OP3797.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbx - 232]
	mov	rcx, qword ptr [rbx - 240]
	mov	rdi, qword ptr [rbx - 256]
	mov	rdx, qword ptr [rbx - 248]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_283
.LBB5_1073:
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1074:                             # %resize.i52226
	mov	esi, 32
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_729
	jmp	.LBB5_142
.LBB5_1075:                             # %resize.i49465
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1039
# %bb.1076:                             # %resize.i49465.OP1039.MLOAD.contd_crit_edge
	mov	r10, r12
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rsi, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	jmp	.LBB5_269
.LBB5_1248:                             # %resize.i49480
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB5_270
	jmp	.LBB5_1210
.LBB5_1077:                             # %resize.i49495
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_271
	jmp	.LBB5_1039
.LBB5_1078:                             # %resize.i49510
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	test	al, al
	je	.LBB5_273
	jmp	.LBB5_1039
.LBB5_1079:                             # %resize.i49905
	mov	esi, 32
	mov	rdi, r12
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	test	al, al
	je	.LBB5_218
	jmp	.LBB5_1083
.LBB5_1080:                             # %resize.i49813
	mov	esi, 32
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 136]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_200
# %bb.1081:
	mov	rcx, rdx
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1082:                             # %resize.i49920
	mov	esi, 64
	mov	rdi, r12
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	test	al, al
	je	.LBB5_219
	jmp	.LBB5_1083
.LBB5_1084:                             # %resize.i49828
	mov	esi, 64
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_201
	jmp	.LBB5_1087
.LBB5_1085:                             # %resize.i49843
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	test	al, al
	je	.LBB5_205
	jmp	.LBB5_1087
.LBB5_1086:                             # %resize.i49859
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	test	al, al
	je	.LBB5_208
	jmp	.LBB5_1087
.LBB5_1088:                             # %resize.i50056
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3062
# %bb.1089:                             # %resize.i50056.OP5180.MLOAD.contd_crit_edge
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14]
	mov	rax, qword ptr [r14 + 8]
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, r12
	mov	r12, rcx
	jmp	.LBB5_166
.LBB5_1090:                             # %resize.i50071
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, -1
	mov	r10, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_167
	jmp	.LBB5_1093
.LBB5_1091:                             # %resize.i50086
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, r10
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, r13
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_168
	jmp	.LBB5_1093
.LBB5_1092:                             # %resize.i50101
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_169
	jmp	.LBB5_1093
.LBB5_1094:                             # %resize.i49404
	mov	r15, r8
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.1095:                             # %resize.i49404.OP934.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbx + 56]
	mov	rcx, qword ptr [rbx + 48]
	mov	rsi, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 40]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r10, r12
	mov	r8, r15
	jmp	.LBB5_258
.LBB5_1096:                             # %resize.i49419
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [rbp - 112], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB5_259
	jmp	.LBB5_1244
.LBB5_1276:                             # %resize.i49434
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	test	al, al
	je	.LBB5_260
	jmp	.LBB5_1087
.LBB5_1097:                             # %resize.i49449
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	mov	r10, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 136]       # 8-byte Reload
	test	al, al
	je	.LBB5_262
	jmp	.LBB5_1087
.LBB5_1098:                             # %resize.i49343
	mov	r15, r8
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.1099:                             # %resize.i49343.OP829.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbx + 56]
	mov	rcx, qword ptr [rbx + 48]
	mov	rsi, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 40]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r10, r12
	mov	r8, r15
	jmp	.LBB5_247
.LBB5_1100:                             # %resize.i49358
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [rbp - 112], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB5_248
	jmp	.LBB5_1244
.LBB5_1101:                             # %resize.i49373
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	test	al, al
	je	.LBB5_249
	jmp	.LBB5_1087
.LBB5_1102:                             # %resize.i49388
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	mov	r10, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 136]       # 8-byte Reload
	test	al, al
	je	.LBB5_251
	jmp	.LBB5_1087
.LBB5_1103:                             # %resize.i50840
	mov	esi, 32
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, r12
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 160]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_333
	jmp	.LBB5_1124
.LBB5_1104:                             # %resize.i50855
	mov	esi, 64
	mov	r13, rdi
	mov	r12, r10
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdi, r13
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r10, r12
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_334
# %bb.1105:
	mov	rcx, rdx
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1106:                             # %resize.i50870
	mov	qword ptr [rbp - 176], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 176]      # 8-byte Reload
	mov	r10, -1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_336
	jmp	.LBB5_1113
.LBB5_1107:                             # %resize.i50885
	mov	qword ptr [rbp - 160], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 160]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_337
	jmp	.LBB5_1124
.LBB5_1108:                             # %resize.i51281
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.1109:                             # %resize.i51281.OP9008.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r14 + 184]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r8, qword ptr [r14 + 176]
	mov	r9, qword ptr [r14 + 160]
	mov	r10, qword ptr [r14 + 168]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB5_395
.LBB5_1110:                             # %resize.i51296
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_396
	jmp	.LBB5_1113
.LBB5_1111:                             # %resize.i51311
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_397
	jmp	.LBB5_1113
.LBB5_1112:                             # %resize.i51326
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_398
	jmp	.LBB5_1113
.LBB5_1114:                             # %resize.i51342
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1124
# %bb.1115:                             # %resize.i51342.OP9037.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r14 + 184]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	rax, qword ptr [r14 + 176]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [r14 + 160]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r8, qword ptr [r14 + 168]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB5_399
.LBB5_3069:                             # %resize.i51357
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_400
	jmp	.LBB5_1124
.LBB5_3073:                             # %resize.i51372
	mov	esi, 96
	mov	r12, rdi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rdi, r12
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_401
	jmp	.LBB5_1171
.LBB5_1116:                             # %resize.i50930
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.1117:                             # %resize.i50930.OP8137.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r14 + 120]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r8, qword ptr [r14 + 112]
	mov	r9, qword ptr [r14 + 96]
	mov	r10, qword ptr [r14 + 104]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB5_501
.LBB5_1118:                             # %resize.i50945
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_502
	jmp	.LBB5_1113
.LBB5_1119:                             # %resize.i50960
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_503
	jmp	.LBB5_1113
.LBB5_1120:                             # %resize.i50975
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_504
.LBB5_1113:
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_1121:                             # %resize.i50991
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1124
# %bb.1122:                             # %resize.i50991.OP8166.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r14 + 120]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [r14 + 112]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	rax, qword ptr [r14 + 96]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	r8, qword ptr [r14 + 104]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 120]      # 8-byte Reload
	jmp	.LBB5_505
.LBB5_1123:                             # %resize.i51006
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_506
	jmp	.LBB5_1124
.LBB5_1125:                             # %resize.i51021
	mov	esi, 96
	mov	r12, rdi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rdi, r12
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_507
	jmp	.LBB5_142
.LBB5_3072:                             # %resize.i50117
	mov	esi, 96
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_351
	jmp	.LBB5_1244
.LBB5_1126:                             # %resize.i52196
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.1127:                             # %resize.i52196.OP10301.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r12 - 8]
	mov	rdi, qword ptr [r12 - 16]
	mov	rcx, qword ptr [r12 - 32]
	mov	rdx, qword ptr [r12 - 24]
	jmp	.LBB5_447
.LBB5_1128:                             # %resize.i49587
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.1129:                             # %resize.i49587.OP2119.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r15 + 56]
	mov	rcx, qword ptr [r15 + 48]
	mov	rsi, qword ptr [r15 + 32]
	mov	rdx, qword ptr [r15 + 40]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r10, r12
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB5_187
.LBB5_1130:                             # %resize.i49602
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_188
	jmp	.LBB5_1087
.LBB5_1298:                             # %resize.i49617
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_189
	jmp	.LBB5_1083
.LBB5_1131:                             # %resize.i49632
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_191
	jmp	.LBB5_1083
.LBB5_3057:                             # %resize.i50207
	mov	esi, 96
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_418
	jmp	.LBB5_1244
.LBB5_1132:                             # %resize.i49934
	mov	qword ptr [rbp - 144], rsi      # 8-byte Spill
	mov	esi, 32
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 144]      # 8-byte Reload
	test	al, al
	je	.LBB5_363
	jmp	.LBB5_1134
.LBB5_1133:                             # %resize.i49949
	mov	qword ptr [rbp - 144], rsi      # 8-byte Spill
	mov	esi, 64
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 144]      # 8-byte Reload
	test	al, al
	je	.LBB5_364
	jmp	.LBB5_1134
.LBB5_1135:                             # %resize.i50162
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_141
	jmp	.LBB5_1087
.LBB5_1136:                             # %resize.i49891
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_487
	jmp	.LBB5_1244
.LBB5_1137:                             # %resize.i50373
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.1138:                             # %resize.i50373.OP7349.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	jmp	.LBB5_450
.LBB5_1422:                             # %resize.i50388
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_451
	jmp	.LBB5_1151
.LBB5_1139:                             # %resize.i50403
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_452
	jmp	.LBB5_1148
.LBB5_1140:                             # %resize.i50418
	mov	qword ptr [rbp - 56], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_453
	jmp	.LBB5_1148
.LBB5_1141:                             # %resize.i50434
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.1142:                             # %resize.i50434.OP7380.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	jmp	.LBB5_455
.LBB5_1143:                             # %resize.i50450
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.1144:                             # %resize.i50450.OP7393.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	jmp	.LBB5_458
.LBB5_1145:                             # %resize.i50465
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_459
	jmp	.LBB5_1151
.LBB5_1146:                             # %resize.i50480
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_460
	jmp	.LBB5_1148
.LBB5_1147:                             # %resize.i50495
	mov	qword ptr [rbp - 56], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_461
	jmp	.LBB5_1148
.LBB5_1149:                             # %resize.i50511
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_463
	jmp	.LBB5_1958
.LBB5_1150:
	dec	r13
	jmp	.LBB5_1151
.LBB5_1152:                             # %resize.i51084
	mov	r13, r10
	mov	r12, r9
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.1153:                             # %resize.i51084.OP8652.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, r12
	mov	r10, r13
	jmp	.LBB5_615
.LBB5_1154:                             # %resize.i51678
	mov	r13, r10
	mov	r12, r9
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.1155:                             # %resize.i51678.OP9594.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, r12
	mov	r10, r13
	jmp	.LBB5_622
.LBB5_1156:                             # %resize.i51099
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, -1
	test	al, al
	je	.LBB5_616
	jmp	.LBB5_3087
.LBB5_1157:                             # %resize.i51114
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_617
	jmp	.LBB5_3087
.LBB5_1158:                             # %resize.i51693
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, -1
	test	al, al
	je	.LBB5_623
	jmp	.LBB5_3087
.LBB5_1159:                             # %resize.i51708
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_624
	jmp	.LBB5_3087
.LBB5_1160:                             # %resize.i51129
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, -1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_618
	jmp	.LBB5_3087
.LBB5_1161:                             # %resize.i51144
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_619
	jmp	.LBB5_3087
.LBB5_1162:                             # %resize.i51723
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, -1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_625
	jmp	.LBB5_3087
.LBB5_1163:                             # %resize.i51738
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_626
	jmp	.LBB5_3087
.LBB5_1164:                             # %resize.i51160
	mov	qword ptr [rbp - 56], rdi       # 8-byte Spill
	mov	r14, rsi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rax
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.1165:                             # %resize.i51160.OP8672.MLOAD.contd_crit_edge
	mov	rsi, r14
	mov	rax, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	rdx, qword ptr [r14 + 16]
	mov	r8, qword ptr [r14]
	mov	r14, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_620
.LBB5_1166:                             # %resize.i51754
	mov	qword ptr [rbp - 56], rdi       # 8-byte Spill
	mov	r14, rsi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rax
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.1167:                             # %resize.i51754.OP9614.MLOAD.contd_crit_edge
	mov	rsi, r14
	mov	rax, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	rdx, qword ptr [r14 + 16]
	mov	r8, qword ptr [r14]
	mov	r14, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_627
.LBB5_1168:                             # %resize.i51176
	mov	r15, rdx
	mov	r14, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1169:                             # %resize.i51176.OP8703.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r8, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, r14
	mov	rdx, r15
	jmp	.LBB5_519
.LBB5_1170:                             # %resize.i51191
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_520
	jmp	.LBB5_1171
.LBB5_1172:                             # %resize.i51206
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_521
	jmp	.LBB5_2795
.LBB5_1173:                             # %resize.i51220
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 152]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	test	al, al
	je	.LBB5_523
	jmp	.LBB5_1176
.LBB5_1174:                             # %resize.i51235
	mov	esi, 64
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	test	al, al
	je	.LBB5_524
	jmp	.LBB5_2448
.LBB5_3079:                             # %resize.i51250
	mov	qword ptr [rbp - 152], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 152]      # 8-byte Reload
	mov	r10, -1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_526
	jmp	.LBB5_3080
.LBB5_1175:                             # %resize.i51265
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_527
.LBB5_1176:
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_1177:                             # %resize.i49526
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.1178:                             # %resize.i49526.OP1633.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r15 + 56]
	mov	rcx, qword ptr [r15 + 48]
	mov	rsi, qword ptr [r15 + 32]
	mov	rdx, qword ptr [r15 + 40]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r10, r12
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB5_474
.LBB5_1179:                             # %resize.i49541
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_475
	jmp	.LBB5_1087
.LBB5_1180:                             # %resize.i49556
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_476
	jmp	.LBB5_1083
.LBB5_1181:                             # %resize.i49571
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	test	al, al
	je	.LBB5_478
	jmp	.LBB5_1083
.LBB5_1182:                             # %resize.i49963
	mov	esi, 32
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_687
# %bb.1183:
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1184:                             # %resize.i49978
	mov	esi, 64
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, r10
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, r13
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_688
	jmp	.LBB5_1083
.LBB5_1190:                             # %resize.i49993
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_692
	jmp	.LBB5_1191
.LBB5_1185:                             # %resize.i50009
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.1186:                             # %resize.i50009.OP5154.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r10, qword ptr [rax + 40]
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB5_695
.LBB5_1187:                             # %resize.i50024
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 160], r10      # 8-byte Spill
	mov	qword ptr [rbp - 168], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 168]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 160]      # 8-byte Reload
	test	al, al
	je	.LBB5_696
	jmp	.LBB5_1191
.LBB5_1188:                             # %resize.i50040
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.1189:                             # %resize.i50040.OP5159.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r10, qword ptr [rax + 56]
	mov	rcx, qword ptr [rax + 48]
	mov	rdx, qword ptr [rax + 32]
	mov	rdi, qword ptr [rax + 40]
	jmp	.LBB5_697
.LBB5_1192:                             # %resize.i50311
	mov	r15, rcx
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1093
# %bb.1193:                             # %resize.i50311.OP7237.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, r15
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
	jmp	.LBB5_638
.LBB5_3030:                             # %resize.i50326
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	test	al, al
	je	.LBB5_639
	jmp	.LBB5_1093
.LBB5_1194:                             # %resize.i50341
	mov	rdi, r11
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_640
	jmp	.LBB5_1958
.LBB5_1195:                             # %resize.i50357
	mov	qword ptr [rbp - 136], r11      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1093
# %bb.1196:                             # %resize.i50357.OP7252.MLOAD.contd_crit_edge
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rax, qword ptr [r8 + 24]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, qword ptr [r8 + 16]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	rax, qword ptr [r8 + 8]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	jmp	.LBB5_641
.LBB5_1197:                             # %resize.i49648
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.1198:                             # %resize.i49648.OP2286.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r15 + 56]
	mov	rcx, qword ptr [r15 + 48]
	mov	rsi, qword ptr [r15 + 32]
	mov	rdx, qword ptr [r15 + 40]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r10, r12
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB5_663
.LBB5_1199:                             # %resize.i49663
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_664
	jmp	.LBB5_1087
.LBB5_1200:                             # %resize.i49678
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_665
	jmp	.LBB5_1083
.LBB5_1201:                             # %resize.i49693
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm1, xmm1, xmm1
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_667
	jmp	.LBB5_1083
.LBB5_1202:                             # %resize.i50176
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r13
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_652
	jmp	.LBB5_142
.LBB5_1203:                             # %resize.i50191
	mov	esi, 64
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_653
	jmp	.LBB5_142
.LBB5_1204:                             # %resize.i50131
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r13
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_572
	jmp	.LBB5_142
.LBB5_1205:                             # %resize.i50146
	mov	esi, 64
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_573
	jmp	.LBB5_142
.LBB5_1206:                             # %resize.i50221
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r13
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_610
	jmp	.LBB5_142
.LBB5_1207:                             # %resize.i50236
	mov	esi, 64
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_611
	jmp	.LBB5_142
.LBB5_1208:                             # %resize.i50250
	mov	esi, 32
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_704
	jmp	.LBB5_1051
.LBB5_1209:                             # %resize.i50265
	mov	esi, 64
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_705
	jmp	.LBB5_1210
.LBB5_1211:                             # %resize.i50280
	mov	qword ptr [rbp - 136], r11      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, -1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_707
	jmp	.LBB5_1083
.LBB5_1212:                             # %resize.i50295
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_708
	jmp	.LBB5_142
.LBB5_1213:
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	add	r10, 9
	jmp	.LBB5_1051
.LBB5_1033:                             # %select.false56272
	mov	eax, ecx
	jmp	.LBB5_791
.LBB5_3049:
	mov	rcx, r13
	jmp	.LBB5_2988
	.p2align	4, 0x90
.LBB5_32:                               # %dynamic_jump_table
                                        # =>This Inner Loop Header: Depth=1
	xor	eax, eax
	mov	r8d, 9382
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1452
# %bb.33:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 3407
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1809
# %bb.34:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 5740
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1478
# %bb.35:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 4350
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1823
# %bb.36:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 4959
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1853
# %bb.37:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 5315
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1901
# %bb.38:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 5097
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1670
# %bb.39:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rsi, -4960
	adc	rcx, -1
	adc	r13, -1
	adc	rdi, -1
	xor	eax, eax
	mov	r8d, 26
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	ecx, 0
	sbb	rcx, r13
	sbb	rax, rdi
	jb	.LBB5_3092
# %bb.40:                               # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rax, [rip + .LJTI5_4]
	movsxd	rcx, dword ptr [rax + 4*rsi]
	add	rcx, rax
	jmp	rcx
.LBB5_1451:                             # %OP2896.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, r8
	shl	rax, 5
	mov	rsi, qword ptr [r11 + rax - 128]
	mov	rcx, qword ptr [r11 + rax - 120]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	r13, qword ptr [r11 + rax - 112]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + rax - 128], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	mov	qword ptr [r11 + rax - 80], r13
	mov	qword ptr [r11 + rax - 72], rdi
	mov	qword ptr [r11 + rax - 96], rsi
	mov	qword ptr [r11 + rax - 88], rcx
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	add	r8, -3
	jmp	.LBB5_1740
	.p2align	4, 0x90
.LBB5_1452:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 16233
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1462
# %bb.1453:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 19518
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1484
# %bb.1454:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 17776
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1498
# %bb.1455:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 17013
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1555
# %bb.1456:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 16615
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1605
# %bb.1457:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 16495
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2072
# %bb.1458:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 16592
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2369
# %bb.1459:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 16593
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2530
# %bb.1460:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 16610
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1461:                             # %OP7657.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 64]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 48]
	vmovaps	xmm2, xmmword ptr [r11 + rax - 32]
	vmovaps	xmm3, xmmword ptr [r11 + rax - 16]
	vmovaps	xmmword ptr [r11 + rax - 48], xmm3
	vmovaps	xmmword ptr [r11 + rax - 64], xmm2
	vmovdqa	xmmword ptr [r11 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 32], xmm0
	jmp	.LBB5_1785
	.p2align	4, 0x90
.LBB5_1462:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 12686
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1492
# %bb.1463:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 11031
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1533
# %bb.1464:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 9966
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1575
# %bb.1465:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 9585
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1653
# %bb.1466:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 9527
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2039
# %bb.1467:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 9383
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	je	.LBB5_1780
# %bb.1468:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 9396
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1783
# %bb.1469:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 9413
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1470:                             # %OP4758.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r13, [rax + 2]
	vmovdqu	ymmword ptr [r11 + rbx + 32], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2988
# %bb.1471:                             # %OP4761.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r15
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 40], rsi
	mov	rax, qword ptr [rbx - 72]
	mov	r8, qword ptr [rbx - 96]
	mov	r9, qword ptr [rbx - 88]
	mov	r10, qword ptr [rbx - 80]
	mov	r12, r13
	shl	r12, 5
	mov	qword ptr [r15 + r12 + 16], r10
	mov	qword ptr [r15 + r12], r8
	mov	qword ptr [r15 + r12 + 24], rax
	mov	qword ptr [r15 + r12 + 8], r9
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2988
# %bb.1472:                             # %OP4765.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rbx + 32]
	vmovdqa	xmm1, xmmword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	vmovdqa	xmmword ptr [rbx + 16], xmm1
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_1087
# %bb.1473:                             # %OP4766.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r12, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 56], rsi
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 40], rcx
	mov	qword ptr [rbx + 32], rax
	mov	r13d, dword ptr [rdi + 164]
	movbe	r11, qword ptr [rdi + 156]
	bswap	r13
	shrd	r13, r11, 32
	movbe	r15, qword ptr [rdi + 148]
	shrd	r11, r15, 32
	shr	r15, 32
	mov	qword ptr [r12 + 16], r15
	mov	qword ptr [r12 + 8], r11
	mov	qword ptr [r12], r13
	mov	qword ptr [r12 + 24], 0
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rbx + 16]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 16], r15
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	mov	qword ptr [rbx + 8], r11
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 16], r9
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12], rdi
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_130] # ymm0 = [8187823086544452773,7854220679750799226,9321359278818002547,14706211957200335488]
	vmovups	ymmword ptr [rbx + 32], ymm0
	mov	qword ptr [rbx + 120], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 104], rcx
	mov	qword ptr [rbx + 96], rax
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rcx
	mov	qword ptr [r12], rax
	sub	rdi, rax
	sbb	r8, rcx
	sbb	r9, rdx
	sbb	r10, rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + 128], ymm0
	add	rdi, 32
	adc	r8, 0
	adc	r9, 0
	adc	r10, 0
	mov	qword ptr [rbx + 112], r9
	mov	qword ptr [rbx + 104], r8
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], r10
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 16], r9
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12], rdi
	mov	qword ptr [rbx + 120], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 104], rcx
	mov	qword ptr [rbx + 96], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_751
# %bb.1474:                             # %OP4779.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1087
# %bb.1475:                             # %OP4781.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 40], rsi
	mov	rax, qword ptr [rbx - 72]
	mov	r8, qword ptr [rbx - 96]
	mov	r9, qword ptr [rbx - 88]
	mov	r10, qword ptr [rbx - 80]
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1087
# %bb.1476:                             # %OP4785.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rbx + 32]
	vmovdqa	xmm1, xmmword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	vmovdqa	xmmword ptr [rbx + 16], xmm1
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1087
# %bb.1477:                             # %OP4786.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r14 + 24]
	mov	r10, qword ptr [r14]
	mov	r9, qword ptr [r14 + 8]
	mov	r8, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 48], r8
	mov	qword ptr [rbx + 32], r10
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 40], r9
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 24], 0
	mov	qword ptr [r12 + 8], 0
	mov	rax, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12], rax
	mov	qword ptr [rbx + 48], r15
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbx + 40], r11
	mov	qword ptr [rbx + 32], r13
	mov	qword ptr [rbx + 56], 0
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 112], r8
	mov	qword ptr [rbx + 104], r9
	mov	qword ptr [rbx + 96], r10
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_131] # ymm0 = [2951364421682967535,10748869590852608278,7620847484418887082,15992936130196719771]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovups	ymmword ptr [r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], r8
	mov	qword ptr [rbx + 136], r9
	mov	qword ptr [rbx + 128], r10
	sub	rax, r10
	sbb	rsi, r9
	sbb	rdi, r8
	sbb	rdx, rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	add	rax, 32
	adc	rsi, 0
	adc	rdi, 0
	adc	rdx, 0
	mov	qword ptr [rbx + 112], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 96], rax
	mov	qword ptr [rbx + 120], rdx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	je	.LBB5_1770
	jmp	.LBB5_751
.LBB5_1478:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 7496
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1514
# %bb.1479:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 8510
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1565
# %bb.1480:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 8017
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1935
# %bb.1481:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 7670
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2022
# %bb.1482:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 7497
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2254
# %bb.1483:                             # %OP3928.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, r8
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 16]
	vmovaps	xmm2, xmmword ptr [r11 + rax - 64]
	vmovaps	xmm3, xmmword ptr [r11 + rax - 48]
	vmovaps	xmmword ptr [r11 + rax - 16], xmm3
	vmovaps	xmmword ptr [r11 + rax - 32], xmm2
	mov	rsi, qword ptr [r11 + rax - 96]
	mov	rcx, qword ptr [r11 + rax - 88]
	mov	rdi, qword ptr [r11 + rax - 72]
	mov	r13, qword ptr [r11 + rax - 80]
	vmovdqa	xmmword ptr [r11 + rax - 80], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 96], xmm0
	mov	qword ptr [r11 + rax - 48], r13
	mov	qword ptr [r11 + rax - 40], rdi
	mov	qword ptr [r11 + rax - 64], rsi
	mov	qword ptr [r11 + rax - 56], rcx
	add	r8, -2
	jmp	.LBB5_1740
.LBB5_1484:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 20853
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1528
# %bb.1485:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 20147
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1569
# %bb.1486:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 19795
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1896
# %bb.1487:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 20087
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1694
# %bb.1488:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 20103
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1728
# %bb.1489:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 20088
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2679
# %bb.1490:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 20098
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1491:                             # %OP9400.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -5
	jmp	.LBB5_1716
.LBB5_1492:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 14416
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1539
# %bb.1493:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 15253
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1580
# %bb.1494:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 14819
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1951
# %bb.1495:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 15009
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2018
# %bb.1496:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 14820
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2270
# %bb.1497:                             # %OP6881.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -12
	jmp	.LBB5_1716
.LBB5_1498:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 18623
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1560
# %bb.1499:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 18218
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1609
# %bb.1500:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 18044
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2129
# %bb.1501:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 18065
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2386
# %bb.1502:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 18045
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2654
# %bb.1503:                             # %OP8314.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rcx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_75] # xmm0 = [18055,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 224]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 64]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rcx, 3
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	jmp	.LBB5_1504
.LBB5_1514:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 6615
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1585
# %bb.1515:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 6244
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1640
# %bb.1516:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 5873
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2036
# %bb.1517:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 5741
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2525
# %bb.1518:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 5752
	or	rax, r13
	or	rax, rcx
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	je	.LBB5_1772
# %bb.1519:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 5811
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1520:                             # %OP3270.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 1]
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r13, [rax + 2]
	mov	rax, qword ptr [r11 + rbx - 232]
	mov	r8, qword ptr [r11 + rbx - 256]
	mov	r9, qword ptr [r11 + rbx - 248]
	mov	rcx, qword ptr [r11 + rbx - 240]
	mov	r15, r12
	mov	r12, r14
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rcx
	mov	qword ptr [r11 + r12], r8
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], r9
	mov	eax, ecx
	mov	qword ptr [r11 + rbx], r8
	mov	qword ptr [r11 + rbx + 8], r9
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r11 + r12 + 16], rax
	mov	qword ptr [r11 + r12 + 8], r9
	mov	qword ptr [r11 + r12], r8
	mov	qword ptr [r11 + r12 + 24], 0
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r15
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_371
# %bb.1521:                             # %OP3278.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 96], r14       # 8-byte Spill
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rbx, rax
	add	r12, rax
	add	r13, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_159] # xmm0 = [10,0]
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	vmovdqu	ymmword ptr [rbx + 96], ymm1
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 10
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1522:                             # %OP3283.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 4]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	lea	r14, [rbx + 96]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	shl	r15, 5
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	qword ptr [rdi + r15], rcx
	mov	qword ptr [rdi + r15 + 24], rax
	mov	qword ptr [rdi + r15 + 8], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.1523:                             # %OP3287.CALLER
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	rcx, qword ptr [rdx + 156]
	movbe	rax, qword ptr [rdx + 148]
	mov	r8d, dword ptr [rdx + 164]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], 0
	mov	rdi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 160], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.1524:                             # %OP3290.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r14 + 16]
	mov	r8, qword ptr [r14]
	mov	r9, qword ptr [r14 + 8]
	mov	r10, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rsi, qword ptr [r13]
	mov	r11, qword ptr [r13 + 8]
	mov	r15, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r14 + 24], r15
	mov	qword ptr [r14 + 8], r11
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rsi
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rcx
	mov	rdi, qword ptr [r12]
	mov	qword ptr [r12], rsi
	mov	rsi, qword ptr [r12 + 8]
	mov	qword ptr [r12 + 8], r11
	mov	rcx, qword ptr [r12 + 24]
	mov	qword ptr [r12 + 24], r15
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	push	r14
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1525:                             # %OP3293.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12 + 16]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], r9
	mov	rdi, r14
	mov	rsi, rbx
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.1526:                             # %OP3295.SSTORE
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, r14
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [r15 - 1]
	lea	rsi, [rbx - 32]
	mov	rdi, r12
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_371
# %bb.1527:                             # %OP3296.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	vmovups	ymmword ptr [r11 + r14], ymm0
	vmovups	ymm1, ymmword ptr [rbx - 160]
	vmovups	ymmword ptr [rbx - 32], ymm1
	mov	rsi, qword ptr [rbx - 288]
	mov	rcx, qword ptr [rbx - 280]
	mov	rdi, qword ptr [rbx - 264]
	mov	r13, qword ptr [rbx - 272]
	vmovups	ymmword ptr [rbx - 288], ymm0
	vmovdqa	xmm0, xmmword ptr [rbx - 256]
	vmovdqa	xmm1, xmmword ptr [rbx - 240]
	mov	qword ptr [rbx - 240], r13
	mov	qword ptr [rbx - 232], rdi
	mov	qword ptr [rbx - 256], rsi
	mov	qword ptr [rbx - 248], rcx
	vmovdqa	xmmword ptr [rbx - 144], xmm1
	vmovdqa	xmmword ptr [rbx - 160], xmm0
	add	r15, -8
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1528:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 21708
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1890
# %bb.1529:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	xor	eax, eax
	mov	r8d, 21383
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1598
# %bb.1530:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	add	rax, -21543
	mov	r8, rcx
	adc	r8, -1
	mov	r9, r13
	adc	r9, -1
	mov	r10, rdi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 69
	cmp	rbx, rax
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB5_2241
# %bb.1531:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rcx, [rip + .LJTI5_8]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	rax
.LBB5_1532:                             # %OP10170.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, r8
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [r11 + rax - 32]
	vmovaps	xmm1, xmmword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 288]
	mov	rcx, qword ptr [r11 + rax - 280]
	mov	rdi, qword ptr [r11 + rax - 264]
	mov	r13, qword ptr [r11 + rax - 272]
	vmovaps	xmmword ptr [r11 + rax - 272], xmm1
	vmovaps	xmmword ptr [r11 + rax - 288], xmm0
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 256]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 240]
	mov	qword ptr [r11 + rax - 240], r13
	mov	qword ptr [r11 + rax - 232], rdi
	mov	qword ptr [r11 + rax - 256], rsi
	mov	qword ptr [r11 + rax - 248], rcx
	vmovdqa	xmmword ptr [r11 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 32], xmm0
	add	r8, -8
	jmp	.LBB5_1740
.LBB5_1533:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 11830
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1593
# %bb.1534:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 12338
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1959
# %bb.1535:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 12444
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2197
# %bb.1536:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 12541
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2412
# %bb.1537:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 12542
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2714
# %bb.1538:                             # %OP5991.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, r8
	shl	rax, 5
	mov	rsi, qword ptr [r11 + rax - 192]
	mov	rcx, qword ptr [r11 + rax - 184]
	mov	rdi, qword ptr [r11 + rax - 168]
	mov	r13, qword ptr [r11 + rax - 176]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + rax - 192], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 160]
	mov	qword ptr [r11 + rax - 144], r13
	mov	qword ptr [r11 + rax - 136], rdi
	mov	qword ptr [r11 + rax - 160], rsi
	mov	qword ptr [r11 + rax - 152], rcx
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	jmp	.LBB5_1739
.LBB5_1539:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 13778
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1871
# %bb.1540:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 14138
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1970
# %bb.1541:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 14201
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1692
# %bb.1542:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 14330
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1723
# %bb.1543:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 14202
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2767
# %bb.1544:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 14214
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1545:                             # %OP6608.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	r14, r8
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_104] # xmm0 = [14331,0,0,0]
	vmovups	ymmword ptr [r11 + r14 - 32], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r14 - 96]
	vmovups	ymmword ptr [r11 + r14], ymm0
	lea	rdi, [r8 + 2]
	mov	rax, qword ptr [r11 + r14 - 56]
	mov	rdx, qword ptr [r11 + r14 - 40]
	mov	rcx, qword ptr [r11 + r14 - 64]
	mov	rsi, qword ptr [r11 + r14 - 48]
	mov	qword ptr [r11 + r14 + 48], rsi
	mov	qword ptr [r11 + r14 + 32], rcx
	mov	qword ptr [r11 + r14 + 56], rdx
	mov	qword ptr [r11 + r14 + 40], rax
	mov	qword ptr [rbp - 136], rdi      # 8-byte Spill
	shl	rdi, 5
	mov	qword ptr [r11 + rdi + 16], rsi
	mov	qword ptr [r11 + rdi], rcx
	mov	qword ptr [r11 + rdi + 24], rdx
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	qword ptr [r11 + rdi + 8], rax
	lea	r15, [r8 + 4]
	mov	qword ptr [r11 + r14 + 96], rcx
	mov	qword ptr [r11 + r14 + 112], rsi
	mov	qword ptr [r11 + r14 + 120], rdx
	mov	qword ptr [r11 + r14 + 104], rax
	mov	qword ptr [rbp - 144], r15      # 8-byte Spill
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_33] # xmm0 = [31,0]
	vmovups	ymmword ptr [r11 + r15], ymm0
	lea	r13, [r8 + 5]
	add	rcx, 31
	adc	rax, 0
	adc	rsi, 0
	adc	rdx, 0
	mov	qword ptr [r11 + r14 + 120], rdx
	mov	qword ptr [r11 + r14 + 112], rsi
	mov	qword ptr [r11 + r14 + 104], rax
	mov	qword ptr [r11 + r14 + 96], rcx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbp - 152], r13      # 8-byte Spill
	shl	r13, 5
	vmovups	ymmword ptr [r11 + r13], ymm0
	vmovups	ymmword ptr [r11 + r14 + 96], ymm0
	mov	qword ptr [r11 + r13 + 24], rdx
	mov	qword ptr [r11 + r13 + 8], rax
	mov	qword ptr [r11 + r13 + 16], rsi
	mov	qword ptr [r11 + r13], rcx
	mov	rdi, rsi
	shld	rdi, rax, 59
	mov	qword ptr [r11 + r15 + 8], rdi
	mov	rdi, rdx
	shr	rdi, 5
	mov	qword ptr [r11 + r15 + 24], rdi
	mov	rdi, rdx
	shld	rdi, rsi, 59
	mov	qword ptr [r11 + r15 + 16], rdi
	mov	rdi, rax
	shld	rdi, rcx, 59
	mov	qword ptr [r11 + r15], rdi
	and	rcx, -32
	mov	qword ptr [r11 + r14 + 104], rax
	mov	qword ptr [r11 + r14 + 96], rcx
	mov	qword ptr [r11 + r14 + 120], rdx
	mov	qword ptr [r11 + r14 + 112], rsi
	vmovups	ymmword ptr [r11 + r15], ymm0
	add	rcx, 32
	adc	rax, 0
	adc	rsi, 0
	adc	rdx, 0
	mov	qword ptr [r11 + r14 + 120], rdx
	mov	qword ptr [r11 + r14 + 112], rsi
	mov	qword ptr [r11 + r14 + 104], rax
	mov	qword ptr [r11 + r14 + 96], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1191
# %bb.1546:                             # %OP6625.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	r14, rax
	add	r15, rax
	add	r13, rax
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r8, qword ptr [r14 + 96]
	mov	rax, qword ptr [r14 + 112]
	mov	r9, qword ptr [r14 + 104]
	mov	r10, qword ptr [r14 + 120]
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 112], rdi
	mov	qword ptr [r14 + 96], rdx
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rdi
	add	r8, rdx
	adc	r9, rsi
	adc	rax, rdi
	adc	r10, rcx
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], r10
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	sub	rsp, 8
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1093
# %bb.1547:                             # %OP6631.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	add	rax, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rdx, qword ptr [r14 + 112]
	mov	rdi, qword ptr [r14 + 96]
	mov	rsi, qword ptr [r14 + 104]
	mov	rcx, qword ptr [r14 + 120]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	r11, qword ptr [r14 + 8]
	mov	r8, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], r11
	mov	rcx, qword ptr [r14 + 56]
	mov	qword ptr [r14 + 56], r8
	mov	r8, qword ptr [r14 + 48]
	mov	qword ptr [r14 + 48], r10
	mov	rbx, qword ptr [r14 + 40]
	mov	qword ptr [r14 + 40], r11
	mov	r12, qword ptr [r14 + 32]
	mov	qword ptr [r14 + 32], r9
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15 + 8], rbx
	mov	qword ptr [r15], r12
	mov	r11, qword ptr [rax + 24]
	mov	qword ptr [rax + 24], rcx
	mov	r10, qword ptr [rax + 16]
	mov	qword ptr [rax + 16], r8
	mov	r9, qword ptr [rax + 8]
	mov	qword ptr [rax + 8], rbx
	mov	r8, qword ptr [rax]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	qword ptr [rax], r12
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r14 + 120], r11
	mov	qword ptr [r14 + 112], r10
	mov	qword ptr [r14 + 104], r9
	mov	qword ptr [r14 + 96], r8
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 200], rsi
	mov	qword ptr [r14 + 192], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r11
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1191
# %bb.1548:                             # %OP6639.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	add	r12, 7
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r8, qword ptr [r15 + 24]
	mov	r10, qword ptr [r15 + 16]
	mov	r9, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 8]
	add	r9, 32
	adc	rdi, 0
	adc	r10, 0
	adc	r8, 0
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r10
	mov	rax, qword ptr [r14 + 40]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rdx, qword ptr [r14 + 56]
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	mov	rcx, qword ptr [r14 + 32]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rsi, qword ptr [r14 + 48]
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13 + 8], rax
	mov	r11, qword ptr [r14 + 64]
	mov	rbx, qword ptr [r14 + 80]
	mov	rsi, qword ptr [r14 + 72]
	mov	rdx, qword ptr [r14 + 88]
	mov	qword ptr [r14 + 216], rdx
	mov	qword ptr [r14 + 200], rsi
	mov	qword ptr [r14 + 208], rbx
	mov	qword ptr [r14 + 192], r11
	mov	rax, r12
	shl	rax, 5
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + rax + 24], rdx
	mov	qword ptr [rcx + rax + 8], rsi
	mov	qword ptr [rcx + rax + 16], rbx
	mov	qword ptr [rcx + rax], r11
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r14 + 280], rdx
	mov	rdx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r14 + 264], rdx
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r14 + 272], rdx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r14 + 256], rdx
	mov	qword ptr [r14 + 312], r8
	mov	qword ptr [r14 + 296], rdi
	mov	qword ptr [r14 + 304], r10
	mov	qword ptr [r14 + 288], r9
	lea	rbx, [rcx + rax]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	mov	r11, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB5_3089
# %bb.1549:                             # %OP6647.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	rcx, qword ptr [r14 + 152]
	mov	rdi, qword ptr [r14 + 128]
	mov	rsi, qword ptr [r14 + 136]
	mov	rdx, qword ptr [r14 + 144]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r14 + 128], xmm0
	vmovdqa	xmmword ptr [r14 + 144], xmm0
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	add	rdi, qword ptr [r14 + 192]
	adc	rsi, qword ptr [r14 + 200]
	adc	rdx, qword ptr [r14 + 208]
	adc	rcx, qword ptr [r14 + 216]
	mov	qword ptr [r14 + 192], rdi
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 200], rsi
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	vmovdqu	ymmword ptr [r14 + 192], ymm1
	mov	rax, qword ptr [r13 + 16]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	r10, qword ptr [r13 + 24]
	vmovdqu	ymmword ptr [r13], ymm1
	mov	qword ptr [r14 + 216], r10
	mov	qword ptr [r14 + 200], r9
	mov	qword ptr [r14 + 208], rax
	mov	qword ptr [r14 + 192], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r14 + 200], rsi
	mov	qword ptr [r14 + 192], rdi
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r14 + 208], rdx
	sub	rsp, 32
	mov	r12, r11
	mov	qword ptr [rsp + 16], r11
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r8d, r8d
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1191
# %bb.1550:                             # %OP6654.POP
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14 + 96], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1191
# %bb.1551:                             # %OP6658.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r10, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx]
	mov	r11, qword ptr [rbx + 8]
	mov	rbx, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rbx
	mov	qword ptr [r15 + 8], r11
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], rsi
	mov	qword ptr [r13 + 24], rbx
	mov	qword ptr [r13 + 8], r11
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], rsi
	mov	r9, qword ptr [r14 + 104]
	mov	rax, qword ptr [r14 + 120]
	mov	rdi, qword ptr [r14 + 96]
	mov	rdx, qword ptr [r14 + 112]
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 192], rdi
	mov	qword ptr [r14 + 216], rax
	mov	rcx, rax
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	qword ptr [r14 + 200], r9
	mov	r8, rdi
	add	r8, rsi
	adc	r9, r11
	mov	r12, rdx
	adc	r12, r10
	adc	rax, rbx
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r12
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r12
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r13 + 24], rbx
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 8], r11
	mov	qword ptr [r13], rsi
	mov	qword ptr [r14 + 120], rbx
	mov	qword ptr [r14 + 112], r10
	mov	qword ptr [r14 + 104], r11
	mov	qword ptr [r14 + 96], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	sub	rsp, 8
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	push	rbx
	push	rax
	push	r12
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1093
# %bb.1552:                             # %OP6665.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r14 + 120]
	mov	rdi, qword ptr [r14 + 96]
	mov	rsi, qword ptr [r14 + 104]
	mov	rdx, qword ptr [r14 + 112]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], rbx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 1
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1093
# %bb.1553:                             # %OP6668.PUSH32
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, rbx
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_105] # ymm0 = [0,0,0,3602879701896396800]
	vmovups	ymmword ptr [r15], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r14 + 120]
	mov	rdi, qword ptr [r14 + 96]
	mov	rsi, qword ptr [r14 + 104]
	mov	rdx, qword ptr [r14 + 112]
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 192], rdi
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r14 + 200], rsi
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	movabs	rax, 3602879701896396800
	xor	r8d, r8d
	xor	r9d, r9d
	push	rbx
	push	rax
	push	0
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1093
# %bb.1554:                             # %OP6673.SWAP2
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovups	ymm0, ymmword ptr [r14 + 96]
	vmovups	ymmword ptr [r14 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_106] # xmm0 = [19497,0]
	vmovdqu	ymmword ptr [r14 + 96], ymm0
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymm1, ymmword ptr [rax]
	vmovdqu	ymmword ptr [rax], ymm0
	vmovdqu	ymmword ptr [r14 + 96], ymm1
	mov	esi, 19497
	xor	ecx, ecx
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	xor	r13d, r13d
	xor	edi, edi
	jmp	.LBB5_1764
.LBB5_1555:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 17332
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1630
# %bb.1556:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 17186
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2223
# %bb.1557:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 17258
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2420
# %bb.1558:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 17187
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2529
# %bb.1559:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 17254
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_1695
	jmp	.LBB5_3092
.LBB5_1560:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 19016
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1636
# %bb.1561:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 18765
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2064
# %bb.1562:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 18865
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2363
# %bb.1563:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 18766
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2585
# %bb.1564:                             # %OP8688.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -7
	jmp	.LBB5_1716
.LBB5_1565:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 8853
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1648
# %bb.1566:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	add	rax, -8616
	mov	r8, rcx
	adc	r8, -1
	mov	r9, r13
	adc	r9, -1
	mov	r10, rdi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 54
	cmp	rbx, rax
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB5_2427
# %bb.1567:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rcx, [rip + .LJTI5_6]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	rax
.LBB5_1568:                             # %OP4420.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_141] # xmm0 = [8670,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm1
	add	r13, 3
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm0
	jmp	.LBB5_1785
.LBB5_1569:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 20485
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1926
# %bb.1570:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 20762
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2025
# %bb.1571:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 20486
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1504
# %bb.1572:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 20619
	or	rax, r13
	or	rax, rcx
	jne	.LBB5_1573
	jmp	.LBB5_1731
.LBB5_1575:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 10783
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1922
# %bb.1576:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 10941
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1712
# %bb.1577:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 10985
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2381
# %bb.1578:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 10986
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2720
# %bb.1579:                             # %OP5386.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, r8
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [r11 + rax - 32]
	vmovaps	xmm1, xmmword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 128]
	mov	rcx, qword ptr [r11 + rax - 120]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	r13, qword ptr [r11 + rax - 112]
	vmovaps	xmmword ptr [r11 + rax - 112], xmm1
	vmovaps	xmmword ptr [r11 + rax - 128], xmm0
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 96]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 80]
	mov	qword ptr [r11 + rax - 80], r13
	mov	qword ptr [r11 + rax - 72], rdi
	mov	qword ptr [r11 + rax - 96], rsi
	mov	qword ptr [r11 + rax - 88], rcx
	vmovdqa	xmmword ptr [r11 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 32], xmm0
	add	r8, -3
	jmp	.LBB5_1740
.LBB5_1580:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 15807
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1665
# %bb.1581:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 15490
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2205
# %bb.1582:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 15692
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2367
# %bb.1583:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 15693
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2613
# %bb.1584:                             # %OP7267.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -2
	jmp	.LBB5_1716
.LBB5_1585:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 7172
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2000
# %bb.1586:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 7231
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2227
# %bb.1587:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 7458
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2273
# %bb.1588:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 7232
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2698
# %bb.1589:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 7386
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1590:                             # %OP3897.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, rbx
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx - 64], ymm0
	lea	rsi, [r11 + rbx]
	add	rsi, -32
	vmovdqu	ymmword ptr [r11 + rbx - 32], ymm0
	mov	rdi, r12
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_751
# %bb.1591:                             # %OP3903.PUSH32
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rax, [r14 + rbx]
	lea	rsi, [r14 + rbx]
	add	rsi, -64
	vmovdqa	xmm0, xmmword ptr [rax - 64]
	vmovdqa	xmm1, xmmword ptr [rax - 48]
	vmovaps	xmm2, xmmword ptr [rax - 32]
	mov	rcx, qword ptr [rax - 8]
	movabs	rdx, -1095216660481
	and	rdx, qword ptr [rax - 16]
	vmovaps	ymm3, ymmword ptr [rip + .LCPI5_109] # ymm3 = [0,0,4294967296,0]
	vmovups	ymmword ptr [rax], ymm3
	movabs	rdi, 4294967296
	or	rdi, rdx
	vmovaps	xmmword ptr [rax - 64], xmm2
	mov	qword ptr [rax - 40], rcx
	mov	qword ptr [rax - 48], rdi
	vmovdqa	xmmword ptr [rax - 16], xmm1
	vmovdqa	xmmword ptr [rax - 32], xmm0
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3081
# %bb.1592:                             # %OP3909.POP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, r15
	add	rax, -9
	jmp	.LBB5_1646
.LBB5_1593:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 11519
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1995
# %bb.1594:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 11630
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2045
# %bb.1595:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 11681
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2268
# %bb.1596:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 11631
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2461
# %bb.1597:                             # %OP5626.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -10
	jmp	.LBB5_1716
.LBB5_1598:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 21207
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2010
# %bb.1599:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 21231
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2371
# %bb.1600:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 21208
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2531
# %bb.1601:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 21212
	or	rsi, r13
	or	rsi, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3092
# %bb.1602:                             # %OP9983.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, r8
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovaps	xmm1, xmmword ptr [rip + .LCPI5_40] # xmm1 = [19511,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 32], ymm1
	mov	rcx, qword ptr [r11 + rax - 96]
	mov	rdx, qword ptr [r11 + rax - 88]
	mov	rsi, qword ptr [r11 + rax - 80]
	mov	rdi, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax + 88], rdi
	mov	qword ptr [r11 + rax + 80], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 64], rcx
	vmovups	ymm1, ymmword ptr [r11 + rax - 64]
	vmovups	ymmword ptr [r11 + rax + 96], ymm1
	vxorps	xmm1, xmm1, xmm1
	vmovups	ymmword ptr [r11 + rax + 128], ymm1
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 160], ymm1
	vmovups	ymmword ptr [r11 + rax + 192], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_41] # xmm0 = [21232,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 224], ymm0
	add	r8, 9
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	mov	qword ptr [r11 + rax + 280], rdi
	mov	qword ptr [r11 + rax + 272], rsi
	mov	qword ptr [r11 + rax + 264], rdx
	mov	qword ptr [r11 + rax + 256], rcx
.LBB5_1603:                             # %OP10181.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	lea	rsi, [r11 + rbx]
	add	rsi, -32
	mov	rdi, r12
	mov	edx, 17
	mov	r14, r11
	mov	r15, rax
	vzeroupper
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB5_142
# %bb.1604:                             # %OP10183.ISZERO
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r14
	dec	r15
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rax, r15
	shl	rax, 5
	mov	rcx, qword ptr [r14 + rax]
	mov	rdx, qword ptr [r14 + rax + 8]
	or	rdx, qword ptr [r14 + rax + 24]
	or	rcx, qword ptr [r14 + rax + 16]
	xor	r8d, r8d
	or	rcx, rdx
	setne	r8b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + rax + 8], xmm0
	mov	qword ptr [r14 + rax], r8
	mov	qword ptr [r14 + rax + 24], 0
	mov	rsi, qword ptr [rbx - 64]
	mov	r13, qword ptr [rbx - 48]
	mov	rcx, qword ptr [rbx - 56]
	mov	rdi, qword ptr [rbx - 40]
	vmovdqu	xmmword ptr [rbx - 56], xmm0
	mov	qword ptr [rbx - 64], r8
	mov	qword ptr [rbx - 40], 0
	mov	qword ptr [rbx - 24], rcx
	mov	qword ptr [rbx - 8], rdi
	mov	qword ptr [rbx - 32], rsi
	mov	qword ptr [rbx - 16], r13
	jmp	.LBB5_1647
.LBB5_1605:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 16851
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1676
# %bb.1606:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 16931
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2422
# %bb.1607:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 16852
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2815
# %bb.1608:                             #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	jmp	.LBB5_1787
.LBB5_1609:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 18503
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2042
# %bb.1610:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 18219
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2573
# %bb.1611:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 18232
	or	rax, r13
	or	rax, rcx
	jne	.LBB5_2429
# %bb.1612:                             # %OP8379.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [r13 + 1]
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	rsi, [r13 + 2]
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rdx, rax
	shl	rdx, 5
	vmovdqu	ymmword ptr [r11 + rdx], ymm0
	lea	rdi, [r13 + 3]
	mov	rax, qword ptr [r11 + rbx - 232]
	mov	r8, qword ptr [r11 + rbx - 256]
	mov	r9, qword ptr [r11 + rbx - 248]
	mov	rcx, qword ptr [r11 + rbx - 240]
	mov	qword ptr [rbp - 184], rsi      # 8-byte Spill
	shl	rsi, 5
	mov	qword ptr [r11 + rsi + 16], rcx
	mov	qword ptr [r11 + rsi], r8
	mov	qword ptr [r11 + rsi + 24], rax
	mov	qword ptr [r11 + rsi + 8], r9
	mov	eax, ecx
	mov	qword ptr [r11 + rdx], r8
	mov	qword ptr [r11 + rdx + 8], r9
	mov	qword ptr [r11 + rdx + 16], rax
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	mov	qword ptr [r11 + rdx + 24], 0
	vpxor	xmm0, xmm0, xmm0
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rsi], ymm0
	lea	rcx, [r13 + 4]
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	mov	r15, rdi
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 16], rax
	mov	qword ptr [r11 + r15 + 8], r9
	mov	qword ptr [r11 + r15], r8
	mov	qword ptr [r11 + r15 + 24], 0
	mov	r14, r12
	mov	qword ptr [rbp - 168], rcx      # 8-byte Spill
	mov	r12, rcx
	shl	r12, 5
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r14
	push	0
	push	rax
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3048
# %bb.1613:                             # %OP8388.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_70] # xmm0 = [17,0]
	vmovdqu	ymmword ptr [r15], ymm0
	add	r12, r14
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm1
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	vmovdqu	ymmword ptr [r15], ymm1
	mov	r15, r13
	add	r13, 5
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [rbp - 192], r13      # 8-byte Spill
	shl	r13, 5
	vmovdqu	ymmword ptr [r14 + r13], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 17
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.1614:                             # %OP8393.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	add	rdi, r14
	add	r13, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi]
	mov	rdx, qword ptr [rdi + 8]
	mov	rsi, qword ptr [rdi + 16]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	vmovdqu	ymmword ptr [r13], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3075
# %bb.1615:                             # %OP8398.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, 6
	mov	rax, qword ptr [r12]
	mov	rcx, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 24]
	mov	rsi, qword ptr [r12 + 16]
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jne	.LBB5_142
# %bb.1616:                             # %OP8400.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rbx, r11
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + r15], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 240], rsi
	mov	qword ptr [rbx + 224], rcx
	mov	qword ptr [rbx + 248], rax
	mov	qword ptr [rbx + 232], rdx
	mov	rdi, rcx
	add	rdi, 1
	mov	r8, rdx
	adc	r8, 0
	mov	r9, rsi
	adc	r9, 0
	mov	r10, rax
	adc	r10, 0
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [r11 + r15 + 16], r9
	mov	qword ptr [r11 + r15 + 8], r8
	mov	qword ptr [r11 + r15 + 24], r10
	mov	qword ptr [r13 + 16], r9
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r8
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15], rcx
	mov	qword ptr [r11 + r15 + 24], rax
	mov	qword ptr [r11 + r15 + 8], rdx
	vmovdqu	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rsi
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3075
# %bb.1617:                             # %OP8406.DUP3
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.1618:                             # %OP8407.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	r11, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	mov	r14, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], r14
	mov	qword ptr [r13 + 8], r8
	mov	qword ptr [r13 + 16], r11
	mov	qword ptr [r13], rax
	movabs	rcx, 7958403348434106751
	mov	qword ptr [r15 + 24], rcx
	movabs	r10, 6891346005080805706
	mov	qword ptr [r15 + 8], r10
	movabs	rcx, 5557266254805274640
	mov	qword ptr [r15 + 16], rcx
	movabs	r9, 1629287684866385609
	mov	qword ptr [r15], r9
	mov	rsi, qword ptr [rbx + 104]
	mov	rcx, qword ptr [rbx + 120]
	mov	rdi, qword ptr [rbx + 96]
	mov	rdx, qword ptr [rbx + 112]
	mov	qword ptr [rbx + 256], rdi
	add	rdi, rax
	mov	qword ptr [rbx + 264], rsi
	adc	rsi, r8
	mov	qword ptr [rbx + 272], rdx
	adc	rdx, r11
	mov	qword ptr [rbx + 280], rcx
	adc	rcx, r14
	mov	qword ptr [rbx + 224], rdi
	mov	qword ptr [rbx + 232], rsi
	mov	qword ptr [rbx + 240], rdx
	mov	qword ptr [rbx + 248], rcx
	sub	rsp, 8
	mov	r8, r9
	mov	r9, r10
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	movabs	rax, 7958403348434106751
	push	rax
	movabs	rax, 5557266254805274640
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1619:                             # %OP8413.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r13 + 16]
	mov	rax, qword ptr [r13]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r9, qword ptr [r13 + 8]
	mov	r14, qword ptr [r13 + 24]
	mov	qword ptr [r15 + 24], r14
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rcx
	mov	r8, rcx
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	mov	qword ptr [r15], rax
	mov	rsi, qword ptr [rbx + 72]
	mov	rcx, qword ptr [rbx + 88]
	mov	rdi, qword ptr [rbx + 64]
	mov	rdx, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 240], rdx
	mov	qword ptr [rbx + 224], rdi
	mov	qword ptr [rbx + 248], rcx
	mov	qword ptr [rbx + 232], rsi
	add	rdi, rax
	adc	rsi, r9
	adc	rdx, r8
	adc	rcx, r14
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	mov	r11, qword ptr [rbx + 32]
	mov	rax, qword ptr [rbx + 48]
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	r10, qword ptr [rbx + 40]
	mov	r8, qword ptr [rbx + 56]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	qword ptr [rbx + 56], rcx
	mov	qword ptr [rbx + 48], rdx
	mov	qword ptr [rbx + 40], rsi
	mov	qword ptr [rbx + 32], rdi
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15], r11
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13], r11
	mov	qword ptr [r15 + 24], r14
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15 + 8], r9
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r15], rax
	mov	qword ptr [rbx + 56], r14
	mov	qword ptr [rbx + 48], r8
	mov	qword ptr [rbx + 40], r9
	mov	qword ptr [rbx + 32], rax
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	sub	rsp, 8
	mov	r8, r11
	mov	r9, r10
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	qword ptr [rbp - 136]           # 8-byte Folded Reload
	push	qword ptr [rbp - 120]           # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3075
# %bb.1620:                             # %OP8420.SWAP4
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r12 + 16]
	mov	r8, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12 + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	r11, qword ptr [rbx]
	mov	r14, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], r14
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12], r11
	mov	r9, qword ptr [rbx - 216]
	mov	rax, qword ptr [rbx - 200]
	mov	r8, qword ptr [rbx - 224]
	mov	r10, qword ptr [rbx - 208]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], rax
	and	r9, r14
	and	rax, rcx
	and	r8, r11
	and	r10, rdi
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [rbx + 56]
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rdx, qword ptr [rbx + 48]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	add	rdi, 96
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.1621:                             # %OP8427.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_2] # xmm0 = [128,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	add	rdi, 128
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	r8, qword ptr [rbx - 192]
	mov	rax, qword ptr [rbx - 176]
	mov	r9, qword ptr [rbx - 184]
	mov	r10, qword ptr [rbx - 168]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r8
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.1622:                             # %OP8433.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_55] # xmm0 = [160,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	add	rdi, 160
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	r8, qword ptr [rbx]
	mov	qword ptr [rbp - 160], r8       # 8-byte Spill
	mov	rax, qword ptr [rbx + 16]
	mov	r10, qword ptr [rbx + 8]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	r9, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 8], r10
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r8, qword ptr [r14]
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	mov	r11, qword ptr [r14 + 16]
	mov	r10, qword ptr [r14 + 8]
	mov	r8, qword ptr [r14 + 24]
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 16], rax
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r14 + 8], rax
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	mov	qword ptr [r14], r9
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12 + 8], r10
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [r12], rax
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx], rax
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12], rdi
	sub	rsp, 8
	mov	r8, r9
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	qword ptr [rbp - 136]           # 8-byte Folded Reload
	push	qword ptr [rbp - 120]           # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3048
# %bb.1623:                             # %OP8440.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_56] # xmm0 = [192,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdx, qword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	add	rdi, 192
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	r9, qword ptr [rbx - 152]
	mov	rax, qword ptr [rbx - 136]
	mov	r8, qword ptr [rbx - 160]
	mov	r10, qword ptr [rbx - 144]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.1624:                             # %OP8447.DUP2
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3075
# %bb.1625:                             # %OP8448.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	r9, qword ptr [rbx + 40]
	mov	rax, qword ptr [rbx + 56]
	mov	r8, qword ptr [rbx + 32]
	mov	r10, qword ptr [rbx + 48]
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12], r8
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r11, qword ptr [r15]
	mov	r14, qword ptr [r15 + 8]
	mov	qword ptr [rbp - 136], r14      # 8-byte Spill
	mov	r14, qword ptr [r15 + 16]
	mov	qword ptr [rbp - 120], r14      # 8-byte Spill
	mov	r14, qword ptr [r15 + 24]
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	mov	qword ptr [r13], r11
	add	r8, r11
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r13 + 8], r11
	adc	r9, r11
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r13 + 16], r11
	adc	r10, r11
	mov	r11, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r13 + 24], r11
	adc	rax, r11
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.1626:                             # %OP8457.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_51] # xmm0 = [224,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	r9, qword ptr [rbx + 40]
	mov	rax, qword ptr [rbx + 56]
	mov	r8, qword ptr [rbx + 32]
	mov	r10, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 32], rdx
	mov	qword ptr [rbx + 56], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 24], rax
	add	r8, 224
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], rax
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 16]
	mov	rsi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	r15, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB5_2145
# %bb.1627:                             # %OP8463.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3048
# %bb.1628:                             # %OP8464.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], rcx
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	add	r9, qword ptr [r15]
	adc	rdi, qword ptr [r15 + 8]
	adc	r10, qword ptr [r15 + 16]
	adc	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15], r9
	mov	rdi, r12
	mov	rsi, rbx
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3050
# %bb.1629:                             #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_1731
.LBB5_1630:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 17576
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2212
# %bb.1631:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 17671
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1717
# %bb.1632:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 17577
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2724
# %bb.1633:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 17586
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1634:                             # %OP8070.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rsi, rdx
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rax, qword ptr [r11 + r14]
	mov	rcx, qword ptr [r11 + r14 + 8]
	or	rcx, qword ptr [r11 + r14 + 24]
	or	rax, qword ptr [r11 + r14 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rdx
	mov	qword ptr [r11 + r14 + 24], 0
	jne	.LBB5_2994
# %bb.1635:                             #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	mov	rdx, rsi
	jmp	.LBB5_1718
.LBB5_1636:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 19284
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1680
# %bb.1637:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 19496
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2388
# %bb.1638:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 19497
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1737
# %bb.1639:                             # %OP9050.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rcx
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	qword ptr [r11 + rax + 32], rdx
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_53] # ymm0 = [0,0,0,19511]
	vmovdqu	ymmword ptr [r11 + rax + 40], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 72], xmm0
	mov	qword ptr [r11 + rax + 88], 0
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 64]
	vmovups	ymm2, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 96], ymm1
	vmovups	ymmword ptr [r11 + rax + 128], ymm2
	add	rcx, 6
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	vmovdqu	xmmword ptr [r11 + rax + 168], xmm0
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [r11 + rax + 160], rdx
	mov	qword ptr [r11 + rax + 184], 0
	jmp	.LBB5_1696
.LBB5_1640:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 6330
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2208
# %bb.1641:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rsi, -6245
	adc	rcx, -1
	adc	r13, -1
	adc	rdi, -1
	xor	eax, eax
	mov	r8d, 39
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	ecx, 0
	sbb	rcx, r13
	sbb	rax, rdi
	jb	.LBB5_3092
# %bb.1642:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rax, [rip + .LJTI5_5]
	movsxd	rcx, dword ptr [rax + 4*rsi]
	add	rcx, rax
	jmp	rcx
.LBB5_1643:                             # %OP3453.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, rbx
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_103] # xmm0 = [18,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx - 64], ymm0
	lea	rsi, [r11 + rbx]
	add	rsi, -32
	vmovdqu	ymmword ptr [r11 + rbx - 32], ymm0
	mov	rdi, r12
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_751
# %bb.1644:                             # %OP3459.PUSH32
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rax, [r14 + rbx]
	vmovdqu	xmm0, xmmword ptr [rax - 24]
	mov	rcx, qword ptr [rax - 8]
	mov	rdx, -256
	and	rdx, qword ptr [rax - 32]
	vmovaps	xmm1, xmmword ptr [rip + .LCPI5_31] # xmm1 = [2,0]
	vmovups	ymmword ptr [rax], ymm1
	lea	rsi, [r14 + rbx]
	add	rsi, -64
	or	rdx, 2
	vmovdqa	xmm1, xmmword ptr [rax - 64]
	vmovaps	xmm2, xmmword ptr [rax - 48]
	vmovdqu	xmmword ptr [rax - 56], xmm0
	mov	qword ptr [rax - 40], rcx
	mov	qword ptr [rax - 64], rdx
	vmovaps	xmmword ptr [rax - 16], xmm2
	vmovdqa	xmmword ptr [rax - 32], xmm1
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3081
# %bb.1645:                             # %OP3465.JUMP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, r15
	add	rax, -3
.LBB5_1646:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, rax
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rax, 5
	mov	rdi, qword ptr [r14 + rax + 24]
	mov	r13, qword ptr [r14 + rax + 16]
	mov	rsi, qword ptr [r14 + rax]
	mov	rcx, qword ptr [r14 + rax + 8]
.LBB5_1647:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r11, r14
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1648:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 9105
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2053
# %bb.1649:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 9202
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2403
# %bb.1650:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 9203
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	jne	.LBB5_1741
# %bb.1651:                             # %OP4649.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, rax
	shl	r15, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [r11 + r15 - 64]
	vmovdqa	xmm1, xmmword ptr [r11 + r15 - 48]
	vmovaps	xmm2, xmmword ptr [r11 + r15 - 32]
	vmovaps	xmm3, xmmword ptr [r11 + r15 - 16]
	vmovaps	xmmword ptr [r11 + r15 - 48], xmm3
	vmovaps	xmmword ptr [r11 + r15 - 64], xmm2
	vmovdqa	xmmword ptr [r11 + r15 - 16], xmm1
	vmovdqa	xmmword ptr [r11 + r15 - 32], xmm0
	lea	r13, [rax - 1]
	mov	r14, r13
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	mov	rax, qword ptr [r11 + r15 - 128]
	mov	rcx, qword ptr [r11 + r15 - 120]
	mov	rdx, qword ptr [r11 + r15 - 112]
	mov	rsi, qword ptr [r11 + r15 - 104]
	mov	qword ptr [r11 + r15 + 24], rsi
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15 + 8], rcx
	mov	qword ptr [r11 + r15], rax
	or	rcx, rsi
	or	rax, rdx
	xor	edx, edx
	or	rax, rcx
	setne	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rdx
	mov	qword ptr [r11 + r14 + 24], 0
	je	.LBB5_3013
# %bb.1652:                             #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jmp	.LBB5_1742
.LBB5_1653:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 9770
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2113
# %bb.1654:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 9879
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2424
# %bb.1655:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 9880
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2519
# %bb.1656:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 9890
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1657:                             # %OP4987.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 144]
	movbe	r9, qword ptr [rax + 136]
	bswap	r8
	shrd	r8, r9, 32
	movbe	rax, qword ptr [rax + 128]
	shrd	r9, rax, 32
	shr	rax, 32
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, r14
	shl	r15, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r15 - 64], ymm0
	mov	qword ptr [r11 + r15 - 16], rax
	mov	qword ptr [r11 + r15 - 24], r9
	mov	qword ptr [r11 + r15 - 32], r8
	mov	qword ptr [r11 + r15 - 8], 0
	mov	qword ptr [r11 + r15 + 16], 0
	mov	qword ptr [r11 + r15 + 24], 0
	mov	qword ptr [r11 + r15], 0
	mov	qword ptr [r11 + r15 + 8], 0
	mov	rbx, r12
	lea	r12, [r14 - 1]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	rbx
	push	0
	push	rax
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3062
# %bb.1658:                             # %OP4995.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rbx, [r15 + r13]
	inc	r14
	shl	r12, 5
	add	r12, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_125] # xmm0 = [3,0]
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r13 + r14], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 3
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.1659:                             # %OP5000.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rsi, [r15 + r13]
	add	rsi, -32
	vmovdqa	xmm0, xmmword ptr [rbx - 32]
	vmovdqa	xmm1, xmmword ptr [rbx - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [rbx - 32], ymm2
	vmovups	ymm2, ymmword ptr [rbx - 64]
	vmovdqa	xmmword ptr [rbx - 48], xmm1
	vmovdqa	xmmword ptr [rbx - 64], xmm0
	vmovups	ymmword ptr [rbx], ymm2
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_751
# %bb.1660:                             # %OP5004.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqu	ymm0, ymmword ptr [rbx - 32]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.1661:                             # %OP5006.PUSH32
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 2]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r14, r8
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_59] # ymm0 = [18446744073709551360,18446744073709551615,18446744073709551615,18446744073709551615]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	mov	rdi, r13
	shl	rdi, 5
	vmovdqu	ymmword ptr [r8 + rdi], ymm0
	and	rcx, -256
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 8], rdx
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymm1, ymmword ptr [rbx - 32]
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	vmovdqu	ymmword ptr [r14], ymm1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_751
# %bb.1662:                             # %OP5013.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_103] # xmm0 = [18,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_2988
# %bb.1663:                             # %OP5016.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	r13, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	r11, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rcx, rdi
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	qword ptr [r14 + 24], r11
	mov	qword ptr [r14 + 8], r9
	mov	r8, qword ptr [rbx - 8]
	mov	qword ptr [rbx - 8], r11
	mov	rdi, qword ptr [rbx - 24]
	mov	qword ptr [rbx - 24], r9
	mov	rsi, r9
	mov	r10, qword ptr [rbx - 16]
	mov	qword ptr [rbx - 16], rdx
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	r9, qword ptr [rbx - 32]
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [r14 + 8], rdi
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r9
	and	r9, r13
	and	rdi, qword ptr [rbp - 136]      # 8-byte Folded Reload
	and	r10, qword ptr [rbp - 112]      # 8-byte Folded Reload
	and	r8, qword ptr [rbp - 96]        # 8-byte Folded Reload
	mov	qword ptr [rbx - 8], r8
	mov	qword ptr [rbx - 16], r10
	mov	qword ptr [rbx - 24], rdi
	mov	qword ptr [rbx - 32], r9
	mov	rax, qword ptr [rbx - 48]
	mov	rcx, qword ptr [rbx - 40]
	mov	qword ptr [rbx - 40], r11
	mov	qword ptr [rbx - 48], rdx
	mov	r14, qword ptr [rbx - 56]
	mov	qword ptr [rbx - 56], rsi
	mov	rdx, rsi
	mov	r13, qword ptr [rbx - 64]
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx], r13
	or	r9, r13
	mov	qword ptr [rbx + 8], r14
	or	rdi, r14
	mov	qword ptr [rbx + 16], rax
	or	r10, rax
	mov	qword ptr [rbx + 24], rcx
	or	r8, rcx
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12], r9
	mov	qword ptr [rbx - 40], r8
	mov	qword ptr [rbx - 48], r10
	mov	qword ptr [rbx - 56], rdi
	mov	qword ptr [rbx - 64], r9
	mov	qword ptr [rbx - 8], r11
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbx - 16], rax
	mov	qword ptr [rbx - 24], rdx
	mov	qword ptr [rbx - 32], rsi
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rsi, [rbx + r15 - 64]
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3071
# %bb.1664:                             # %OP5024.POP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, -5
	mov	rcx, rax
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rax, 5
	mov	rdi, qword ptr [rbx + rax + 24]
	mov	r13, qword ptr [rbx + rax + 16]
	mov	rsi, qword ptr [rbx + rax]
	mov	rcx, qword ptr [rbx + rax + 8]
	mov	r11, rbx
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1665:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	eax, eax
	mov	r8d, 15895
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2028
# %bb.1666:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 15808
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2541
# %bb.1667:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 15817
	or	rax, r13
	or	rax, rcx
	jne	.LBB5_2449
# %bb.1668:                             # %OP7322.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rbx + 1]
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1669:                             # %OP7324.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r15
	mov	rcx, qword ptr [r14 + 24]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rdx
	shl	r13, 5
	mov	edi, 4294967295
	mov	qword ptr [r15 + r13 + 16], rdi
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r15 + r13 + 8], -1
	mov	qword ptr [r15 + r13], -1
	mov	rdi, qword ptr [rbx - 8]
	mov	r8, qword ptr [rbx - 16]
	mov	r9, qword ptr [rbx - 32]
	mov	r10, qword ptr [rbx - 24]
	mov	qword ptr [rbx + 64], r9
	mov	qword ptr [rbx + 72], r10
	mov	qword ptr [rbx + 80], r8
	mov	qword ptr [rbx + 88], rdi
	mov	edi, r8d
	mov	qword ptr [r15 + r13 + 8], r10
	mov	qword ptr [r15 + r13], r9
	mov	qword ptr [r15 + r13 + 16], rdi
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rsi
	mov	qword ptr [r15 + r13 + 8], rdx
	mov	qword ptr [r15 + r13], rax
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_94] # ymm0 = [3889517276384507989,5867812543482431314,7336126653074542545,18421101366999476517]
	jmp	.LBB5_1674
.LBB5_1670:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 5098
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2707
# %bb.1671:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 5107
	or	rax, r13
	or	rax, rcx
	jne	.LBB5_2451
# %bb.1672:                             # %OP2961.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rbx + 1]
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1673:                             # %OP2963.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r15
	mov	rcx, qword ptr [r14 + 24]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rdx
	shl	r13, 5
	mov	edi, 4294967295
	mov	qword ptr [r15 + r13 + 16], rdi
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r15 + r13 + 8], -1
	mov	qword ptr [r15 + r13], -1
	mov	rdi, qword ptr [rbx - 8]
	mov	r8, qword ptr [rbx - 16]
	mov	r9, qword ptr [rbx - 32]
	mov	r10, qword ptr [rbx - 24]
	mov	qword ptr [rbx + 64], r9
	mov	qword ptr [rbx + 72], r10
	mov	qword ptr [rbx + 80], r8
	mov	qword ptr [rbx + 88], rdi
	mov	edi, r8d
	mov	qword ptr [r15 + r13 + 8], r10
	mov	qword ptr [r15 + r13], r9
	mov	qword ptr [r15 + r13 + 16], rdi
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rsi
	mov	qword ptr [r15 + r13 + 8], rdx
	mov	qword ptr [r15 + r13], rax
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_170] # ymm0 = [3447661818411187278,14336860918621248796,13474514036968260181,1260499993158658009]
.LBB5_1674:                             # %OP2963.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 112], rsi
	mov	qword ptr [rbx + 104], rdx
	mov	qword ptr [rbx + 96], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_142
# %bb.1675:                             # %OP2973.POP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, -2
	mov	rcx, rax
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rax, 5
	mov	rdi, qword ptr [r15 + rax + 24]
	mov	r13, qword ptr [r15 + rax + 16]
	mov	rsi, qword ptr [r15 + rax]
	mov	rcx, qword ptr [r15 + rax + 8]
	mov	r11, r15
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1676:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 16616
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2746
# %bb.1677:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 16633
	or	rax, r13
	or	rax, rcx
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	je	.LBB5_1765
# %bb.1678:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 16739
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1679:                             #   in Loop: Header=BB5_32 Depth=1
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1785
.LBB5_1680:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 19017
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2768
# %bb.1681:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 19139
	or	rax, r13
	or	rax, rcx
	jne	.LBB5_2455
# %bb.1682:                             # %OP8864.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rbx, rcx
	shl	rbx, 5
	lea	r15, [rcx + 2]
	mov	eax, dword ptr [r11 + rbx - 80]
	mov	r8, qword ptr [r11 + rbx - 96]
	mov	r9, qword ptr [r11 + rbx - 88]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rbx + 24], ymm0
	mov	qword ptr [r11 + rbx + 8], r9
	mov	qword ptr [r11 + rbx], r8
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 56], 0
	lea	r14, [rcx + 3]
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 8], r9
	mov	qword ptr [r11 + r15 + 16], rax
	mov	qword ptr [r11 + r15], r8
	mov	qword ptr [r11 + r15 + 24], 0
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	shl	r14, 5
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r12
	push	0
	push	rax
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.1683:                             # %OP8872.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r15], ymm0
	add	r14, r13
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm1
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	vmovdqu	ymmword ptr [r15], ymm1
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [r15 + 4]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	shl	r12, 5
	vmovdqu	ymmword ptr [r13 + r12], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 16
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2448
# %bb.1684:                             # %OP8877.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r13
	add	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	add	r12, r13
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbx + 56]
	mov	rcx, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 40]
	mov	rsi, qword ptr [rbx + 48]
	mov	qword ptr [rbp - 136], r15      # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 16], rsi
	mov	qword ptr [r13 + r15], rcx
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 8], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1176
# %bb.1685:                             # %OP8881.DUP7
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, r13
	mov	rax, qword ptr [rbx - 48]
	mov	r8, qword ptr [rbx - 64]
	mov	r9, qword ptr [rbx - 56]
	mov	r10, qword ptr [rbx - 40]
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	rsi, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	rdi, qword ptr [rbx + 32]
	mov	rdx, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 208], rdx
	mov	qword ptr [rbx + 216], rcx
	mov	qword ptr [rbx + 192], rdi
	mov	qword ptr [rbx + 200], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1176
# %bb.1686:                             # %OP8884.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	r11, qword ptr [r14 + 8]
	mov	rax, qword ptr [r14 + 24]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], r8
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], r11
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rsi
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], rcx
	mov	rdi, qword ptr [r13]
	mov	qword ptr [r13], rsi
	mov	rsi, qword ptr [r13 + 8]
	mov	qword ptr [r13 + 8], r11
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	qword ptr [rbp - 96]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2448
# %bb.1687:                             # %OP8887.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r13 + 16]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r13 + 24]
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rcx
	mov	rax, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	rdx, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 48]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1171
# %bb.1688:                             # %OP8890.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1176
# %bb.1689:                             # %OP8892.PUSH32
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_59] # ymm0 = [18446744073709551360,18446744073709551615,18446744073709551615,18446744073709551615]
	vmovups	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, -256
	and	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 24]
	mov	qword ptr [r12], rdx
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 1
	or	rdx, 1
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	vmovdqu	ymm0, ymmword ptr [r14]
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rax
	mov	qword ptr [r14 + 16], rcx
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_2448
# %bb.1690:                             # %OP8898.MLOAD
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2448
# %bb.1691:                             # %OP8898.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r15 + 24]
	mov	rax, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 16]
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	rdi, qword ptr [rbx - 64]
	mov	r8, qword ptr [rbx - 48]
	mov	r9, qword ptr [rbx - 56]
	mov	r10, qword ptr [rbx - 40]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14], rdi
	mov	r11, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], r10
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r8
	mov	r8, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], r9
	mov	r9, qword ptr [rbx]
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r14 + 24], r11
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [r14], r9
	vmovups	ymm0, ymmword ptr [rbx + 32]
	mov	qword ptr [rbx + 56], r11
	mov	qword ptr [rbx + 32], r9
	mov	qword ptr [rbx + 40], r8
	mov	qword ptr [rbx + 48], r10
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_60] # ymm0 = [11348099137141030273,12917312845968664816,12282109317518828677,2079896664552183501]
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	jmp	.LBB5_1769
.LBB5_1692:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 14139
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2265
# %bb.1693:                             # %OP6568.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -8
	jmp	.LBB5_1716
.LBB5_1694:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 19796
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2262
.LBB5_1695:                             #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
.LBB5_1696:                             # %OP9228.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdi, r10
	shl	rdi, 5
	mov	r14, qword ptr [r11 + rdi - 96]
	mov	rax, qword ptr [r11 + rdi - 88]
	mov	rcx, qword ptr [r11 + rdi - 80]
	mov	rdx, qword ptr [r11 + rdi - 72]
	mov	qword ptr [r11 + rdi + 24], rdx
	mov	qword ptr [r11 + rdi + 16], rcx
	mov	qword ptr [r11 + rdi + 8], rax
	mov	qword ptr [r11 + rdi], r14
	mov	r12, qword ptr [r12 + 40]
	mov	r8, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r8, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	mov	rbx, r10
	xor	r10d, r10d
	mov	r11, rax
	neg	r11
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	lea	r13, [rbx + 1]
	sbb	r10, rdx
	lea	rbx, [r11 + rdi]
	lea	rdi, [r11 + rdi - 96]
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	cmovb	rsi, r9
	mov	rdi, r14
	cmp	rsi, r8
	mov	qword ptr [rbp - 176], r13      # 8-byte Spill
	ja	.LBB5_1788
.LBB5_1697:                             # %OP9230.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r14 + r15 + 24]
	mov	r8, qword ptr [r14 + r15 + 16]
	mov	r9, qword ptr [r14 + r15]
	mov	r10, qword ptr [r14 + r15 + 8]
	movbe	qword ptr [rbx + 24], r9
	movbe	qword ptr [rbx + 8], r8
	movbe	qword ptr [rbx], rsi
	movbe	qword ptr [rbx + 16], r10
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rsi + 2]
	mov	r15, r13
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 24], 0
	mov	qword ptr [r11 + r15 + 8], 0
	mov	qword ptr [r11 + r15 + 16], 0
	mov	qword ptr [r11 + r15], 32
	mov	qword ptr [rbx - 72], 0
	mov	qword ptr [rbx - 88], 0
	mov	qword ptr [rbx - 80], 0
	mov	qword ptr [rbx - 96], 32
	mov	qword ptr [r11 + r15 + 24], rdx
	mov	qword ptr [r11 + r15 + 8], rax
	mov	qword ptr [r11 + r15 + 16], rcx
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [rbp - 184], r12      # 8-byte Spill
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	add	rdi, 32
	adc	rax, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r11 + r15 + 24], rdx
	mov	qword ptr [r11 + r15 + 16], rcx
	mov	qword ptr [r11 + r15 + 8], rax
	mov	qword ptr [r11 + r15], rdi
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r13
	mov	rsi, rbx
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3048
# %bb.1698:                             # %OP9236.DUP3
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, r14
	add	qword ptr [rbp - 88], r14       # 8-byte Folded Spill
	mov	r14, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 56]
	mov	rax, qword ptr [rbx - 40]
	mov	rcx, qword ptr [rbx - 48]
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15], r14
	mov	qword ptr [r15 + 8], rdx
	mov	r12, qword ptr [r13 + 40]
	mov	rdi, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	rdi, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	mov	r10, rdx
	neg	r10
	mov	r10d, 0
	sbb	r10, rcx
	sbb	r9, rax
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	lea	r9, [r9 + 3]
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	cmovb	rsi, r8
	mov	r8, r14
	cmp	rsi, rdi
	ja	.LBB5_1790
.LBB5_1699:                             # %OP9237.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	add	r13, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r14 + r13 + 24]
	mov	rdi, qword ptr [r14 + r13 + 16]
	mov	r11, qword ptr [r14 + r13]
	mov	r10, qword ptr [r14 + r13 + 8]
	movbe	qword ptr [r15 + 24], r11
	movbe	qword ptr [r15 + 8], rdi
	movbe	qword ptr [r15], rsi
	movbe	qword ptr [r15 + 16], r10
	movbe	qword ptr [rbx - 40], r11
	movbe	qword ptr [rbx - 56], rdi
	movbe	qword ptr [rbx - 48], r10
	movbe	qword ptr [rbx - 64], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], r8
	mov	rax, r8
	mov	r8, qword ptr [rbx - 88]
	mov	r14, qword ptr [rbx - 72]
	mov	r9, qword ptr [rbx - 96]
	mov	r13, qword ptr [rbx - 80]
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12], r9
	add	r9, rax
	mov	qword ptr [r12 + 8], r8
	adc	r8, rdx
	mov	qword ptr [r12 + 16], r13
	adc	r13, rcx
	mov	qword ptr [r12 + 24], r14
	adc	r14, qword ptr [rbp - 96]       # 8-byte Folded Reload
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15 + 24], r14
	mov	qword ptr [rbx - 48], r13
	mov	qword ptr [rbx - 64], r9
	mov	qword ptr [rbx - 40], r14
	mov	qword ptr [rbx - 56], r8
	movbe	qword ptr [r15 + 24], r11
	movbe	qword ptr [r15 + 16], r10
	movbe	qword ptr [r15 + 8], rdi
	movbe	qword ptr [r15], rsi
	mov	rax, qword ptr [rbx + 24]
	movbe	qword ptr [rbx + 24], r11
	mov	rcx, qword ptr [rbx + 16]
	movbe	qword ptr [rbx + 16], r10
	mov	rdx, qword ptr [rbx + 8]
	movbe	qword ptr [rbx + 8], rdi
	mov	rdi, qword ptr [rbx]
	movbe	qword ptr [rbx], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbx - 40], rax
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 64], rdi
	mov	qword ptr [r15 + 24], r14
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15], r9
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3048
# %bb.1700:                             # %OP9245.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r13, qword ptr [r14 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13 + 48]
	sub	rax, r14
	mov	qword ptr [rbp - 112], r13      # 8-byte Spill
	cmp	rax, 95
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	jbe	.LBB5_1792
.LBB5_1701:                             # %OP9247.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r13 + 8]
	mov	r13, qword ptr [rcx + r14 + 88]
	mov	rdx, qword ptr [rcx + r14 + 80]
	mov	rax, qword ptr [rcx + r14 + 64]
	mov	rcx, qword ptr [rcx + r14 + 72]
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [rdi + 24], rax
	bswap	rax
	movbe	qword ptr [rdi + 8], rdx
	bswap	rdx
	movbe	qword ptr [rdi + 16], rcx
	bswap	rcx
	movbe	qword ptr [rdi], r13
	bswap	r13
	mov	rdi, rsi
	shl	rdi, 5
	movabs	rsi, -8398153622332309955
	mov	qword ptr [r11 + rdi + 24], rsi
	movabs	rsi, 2566905653940452042
	mov	qword ptr [r11 + rdi + 8], rsi
	movabs	rsi, 5849837596940291193
	mov	qword ptr [r11 + rdi + 16], rsi
	movabs	rsi, -6221901752695177201
	mov	qword ptr [r11 + rdi], rsi
	mov	rsi, qword ptr [rbx - 88]
	mov	r8, qword ptr [rbx - 72]
	mov	r9, qword ptr [rbx - 96]
	mov	r10, qword ptr [rbx - 80]
	mov	qword ptr [rbx + 176], r10
	mov	qword ptr [rbx + 184], r8
	mov	qword ptr [rbx + 160], r9
	mov	qword ptr [rbx + 168], rsi
	add	r13, r9
	adc	rdx, rsi
	adc	rcx, r10
	adc	rax, r8
	mov	qword ptr [rbx + 128], r13
	mov	qword ptr [rbx + 136], rdx
	mov	qword ptr [rbx + 144], rcx
	mov	qword ptr [rbx + 152], rax
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r8, qword ptr [rsi + 16]
	mov	r14, qword ptr [rsi + 48]
	sub	r8, r14
	mov	rsi, r13
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	lea	rax, [r11 + rdi]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, -1
	cmovb	rsi, rax
	cmp	rsi, r8
	ja	.LBB5_3077
.LBB5_1702:                             # %OP9253.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	add	r14, qword ptr [rax + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_85] # ymm0 = [4467210859592250251,8776488692518497873,14626019898627432227,1098941167306647465]
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rax, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12]
	mov	qword ptr [rbp - 160], rcx      # 8-byte Spill
	mov	r8, qword ptr [r12 + 8]
	mov	r9, qword ptr [r12 + 24]
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r10 + 24], r9
	mov	qword ptr [r10 + 8], r8
	mov	qword ptr [r10 + 16], rax
	mov	rsi, rax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	qword ptr [r10], rcx
	mov	rdx, qword ptr [r15 + 8]
	mov	rax, qword ptr [r15 + 24]
	mov	r14, qword ptr [r15]
	mov	rdi, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 144], rdi
	mov	qword ptr [rbx + 128], r14
	mov	qword ptr [rbx + 152], rax
	mov	qword ptr [rbx + 136], rdx
	add	r14, rcx
	adc	rdx, r8
	adc	rdi, rsi
	adc	rax, r9
	mov	qword ptr [r10], r14
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rdi
	mov	qword ptr [r10 + 24], rax
	mov	rsi, rax
	mov	r13, qword ptr [rbx - 64]
	mov	r11, qword ptr [rbx - 56]
	mov	rcx, qword ptr [rbx - 48]
	mov	rax, qword ptr [rbx - 40]
	mov	qword ptr [rbx - 40], rsi
	mov	qword ptr [rbx - 48], rdi
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 64], r14
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 8], r11
	mov	qword ptr [r10], r13
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [rbp - 136], r11      # 8-byte Spill
	mov	qword ptr [r12 + 8], r11
	mov	qword ptr [rbp - 112], r13      # 8-byte Spill
	mov	qword ptr [r12], r13
	mov	qword ptr [r10 + 24], r9
	mov	rcx, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 8], r8
	mov	rax, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [r10], rax
	mov	qword ptr [rbx - 40], r9
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 56], r8
	mov	qword ptr [rbx - 64], rax
	mov	r11, rsi
	mov	qword ptr [r10 + 24], rsi
	mov	qword ptr [r10 + 16], rdi
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10], r14
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rsi + 40]
	mov	r9, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	r9, r13
	mov	rsi, r14
	add	rsi, 32
	mov	rax, -1
	cmovb	rsi, rax
	xor	r8d, r8d
	neg	rdx
	mov	ecx, 0
	sbb	rcx, rdi
	sbb	r8, r11
	cmovb	rsi, rax
	cmp	rsi, r9
	ja	.LBB5_3078
.LBB5_1703:                             # %OP9260.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 8], rax
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r14 + r13], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [rbx - 48]
	mov	rdi, qword ptr [rbx - 40]
	mov	r14, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rsi + 8], rdx
	mov	qword ptr [rsi + 24], rdi
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi], r14
	add	r14, 96
	adc	rdx, 0
	adc	rcx, 0
	adc	rdi, 0
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12], r14
	mov	qword ptr [r12 + 16], rcx
	mov	r10, qword ptr [rbx + 8]
	mov	r13, qword ptr [rbx + 24]
	mov	rsi, qword ptr [rbx]
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	rax, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 24], r13
	mov	qword ptr [r12 + 8], r10
	mov	rsi, qword ptr [r15]
	mov	r11, qword ptr [r15 + 16]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 24]
	mov	qword ptr [rbp - 136], r13      # 8-byte Spill
	mov	qword ptr [r15 + 24], r13
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [rbp - 144], r10      # 8-byte Spill
	mov	qword ptr [r15 + 8], r10
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r15], r10
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12], rsi
	mov	qword ptr [rbx + 24], r9
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [rbx], rsi
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rax + 40]
	mov	r9, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	r9, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rdi
	cmovb	rsi, r11
	cmp	rsi, r9
	ja	.LBB5_3063
.LBB5_1704:                             # %OP9267.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, qword ptr [r12 + 8]
	movbe	qword ptr [r14 + r13 + 24], r10
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 8], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r14 + r13], rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_2] # xmm0 = [128,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [rbx - 48]
	mov	r11, qword ptr [rbx - 40]
	mov	r14, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 56]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rax + 8], rdx
	mov	qword ptr [rax + 24], r11
	mov	qword ptr [rax + 16], rcx
	mov	qword ptr [rax], r14
	add	r14, 128
	adc	rdx, 0
	adc	rcx, 0
	adc	r11, 0
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15], r14
	mov	qword ptr [r15 + 16], rcx
	mov	r13, qword ptr [rbx - 24]
	mov	rax, qword ptr [rbx - 8]
	mov	r10, qword ptr [rbx - 32]
	mov	rdi, qword ptr [rbx - 16]
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 32], r14
	mov	qword ptr [rbx - 8], r11
	mov	qword ptr [rbx - 24], rdx
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15], r10
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r13
	mov	r12, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 144], rdi      # 8-byte Spill
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbp - 136], r13      # 8-byte Spill
	mov	qword ptr [rbx + 8], r13
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	mov	qword ptr [rbx], r10
	mov	qword ptr [r15 + 24], r9
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15], r12
	mov	qword ptr [rbx - 8], r9
	mov	qword ptr [rbx - 16], rsi
	mov	qword ptr [rbx - 24], r8
	mov	qword ptr [rbx - 32], r12
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], r14
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rsi + 40]
	mov	r9, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	r9, r13
	mov	rsi, r14
	add	rsi, 32
	mov	rax, -1
	cmovb	rsi, rax
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, r11
	cmovb	rsi, rax
	cmp	rsi, r9
	ja	.LBB5_3102
.LBB5_1705:                             # %OP9274.ADDRESS
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 8], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r13], rax
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r11d, dword ptr [rcx + 144]
	movbe	rax, qword ptr [rcx + 136]
	movbe	rsi, qword ptr [rcx + 128]
	mov	r8, rsi
	bswap	r11
	shld	r8, rax, 32
	shrd	r11, rax, 32
	shr	rsi, 32
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], r11
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 160
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rdi + 16], 0
	mov	qword ptr [rdi], 160
	mov	qword ptr [rdi + 24], 0
	mov	qword ptr [rdi + 8], 0
	mov	r14, qword ptr [rbx - 64]
	mov	rax, qword ptr [rbx - 48]
	mov	rdx, qword ptr [rbx - 56]
	mov	rcx, qword ptr [rbx - 40]
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [r9 + 24], rcx
	mov	qword ptr [r9 + 16], rax
	mov	qword ptr [r9 + 8], rdx
	mov	qword ptr [r9], r14
	add	r14, 160
	adc	rdx, 0
	adc	rax, 0
	adc	rcx, 0
	mov	qword ptr [rdi], r14
	mov	qword ptr [rdi + 8], rdx
	mov	qword ptr [rdi + 16], rax
	mov	qword ptr [rdi + 24], rcx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx], r14
	mov	qword ptr [rdi + 16], rsi
	mov	qword ptr [rdi + 8], r8
	mov	qword ptr [rdi], r11
	mov	qword ptr [rdi + 24], 0
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15], r11
	mov	qword ptr [r15 + 24], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_55] # xmm0 = [160,0]
	vmovdqu	ymmword ptr [rdi], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [rdi + 24], rcx
	mov	qword ptr [rdi + 16], rax
	mov	qword ptr [rdi + 8], rdx
	mov	qword ptr [rdi], r14
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rsi + 40]
	mov	r9, qword ptr [rdi + 16]
	mov	r13, qword ptr [rdi + 48]
	sub	r9, r13
	mov	rsi, r14
	add	rsi, 32
	mov	r12, -1
	cmovb	rsi, r12
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r8, rcx
	cmovb	rsi, r12
	cmp	rsi, r9
	ja	.LBB5_1794
.LBB5_1706:                             # %OP9283.DUP2
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, qword ptr [rdi + 8]
	movbe	qword ptr [r14 + r13 + 24], r11
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + r13 + 8], rax
	mov	qword ptr [r14 + r13], 0
	mov	rax, qword ptr [rbx - 16]
	mov	r14, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 8]
	mov	qword ptr [r15 + 24], rdx
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r14
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r9 + 16]
	mov	r13, qword ptr [r9 + 48]
	sub	rdi, r13
	mov	rsi, r14
	add	rsi, 32
	cmovb	rsi, r12
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r12
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	cmp	rsi, rdi
	ja	.LBB5_1795
.LBB5_1707:                             # %OP9284.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, qword ptr [r9 + 8]
	mov	rsi, qword ptr [r14 + r13 + 24]
	mov	rcx, qword ptr [r14 + r13 + 16]
	mov	r8, qword ptr [r14 + r13]
	mov	r9, qword ptr [r14 + r13 + 8]
	mov	rax, r8
	bswap	rax
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rax, r9
	bswap	rax
	mov	rdx, rax
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	rax, rcx
	movbe	qword ptr [r15 + 16], r9
	movbe	qword ptr [r15], rsi
	movbe	qword ptr [r15 + 24], r8
	movbe	qword ptr [r15 + 8], rcx
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r12 + 16], r9
	movbe	qword ptr [r12], rsi
	movbe	qword ptr [r12 + 24], r8
	movbe	qword ptr [r12 + 8], rcx
	mov	rdi, rcx
	bswap	rax
	mov	rcx, rax
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	r14, qword ptr [rbx - 64]
	mov	r13, qword ptr [rbx - 48]
	mov	r11, qword ptr [rbx - 56]
	mov	rax, qword ptr [rbx - 40]
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 8], r11
	mov	qword ptr [r10 + 16], r13
	mov	qword ptr [r10], r14
	mov	r10, rsi
	bswap	r10
	sub	r14, r10
	sbb	r11, rcx
	sbb	r13, rdx
	sbb	rax, qword ptr [rbp - 112]      # 8-byte Folded Reload
	mov	qword ptr [r12 + 8], r11
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], r14
	mov	qword ptr [r12 + 16], r13
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r11
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15], r14
	movbe	qword ptr [r12 + 24], r8
	movbe	qword ptr [r12 + 16], r9
	mov	rcx, rdi
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	movbe	qword ptr [r12 + 8], rdi
	movbe	qword ptr [r12], rsi
	mov	rdx, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	movbe	qword ptr [rbx + 24], r8
	mov	rdi, qword ptr [rbx + 16]
	movbe	qword ptr [rbx + 16], r9
	mov	rdx, qword ptr [rbx + 8]
	movbe	qword ptr [rbx + 8], rcx
	mov	rcx, qword ptr [rbx]
	movbe	qword ptr [rbx], rsi
	mov	qword ptr [r12], rcx
	add	r14, rcx
	mov	qword ptr [r12 + 8], rdx
	adc	r11, rdx
	mov	qword ptr [r12 + 16], rdi
	adc	r13, rdi
	mov	rcx, r11
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r12 + 24], rdx
	adc	rax, rdx
	mov	r11, rax
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15], r14
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15 + 24], rax
	movbe	qword ptr [r12 + 24], r8
	movbe	qword ptr [r12 + 16], r9
	mov	rax, qword ptr [rbp - 160]      # 8-byte Reload
	movbe	qword ptr [r12 + 8], rax
	movbe	qword ptr [r12], rsi
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 16]
	mov	r12, qword ptr [rdi + 48]
	sub	rax, r12
	mov	rsi, r10
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	ecx, ecx
	neg	qword ptr [rbp - 152]           # 8-byte Folded Spill
	mov	edx, 0
	sbb	rdx, qword ptr [rbp - 144]      # 8-byte Folded Reload
	sbb	rcx, qword ptr [rbp - 112]      # 8-byte Folded Reload
	cmovb	rsi, r9
	cmp	rsi, rax
	mov	rcx, rdi
	ja	.LBB5_1797
.LBB5_1708:                             # %OP9293.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r12, qword ptr [rcx + 8]
	movbe	qword ptr [r10 + r12 + 24], r14
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r10 + r12 + 16], rax
	movbe	qword ptr [r10 + r12 + 8], r13
	movbe	qword ptr [r10 + r12], r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_56] # xmm0 = [192,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	r11, qword ptr [rbx - 64]
	mov	r10, qword ptr [rbx - 48]
	mov	r8, qword ptr [rbx - 56]
	mov	rdi, qword ptr [rbx - 40]
	mov	qword ptr [rbx - 40], rax
	mov	qword ptr [rbx - 56], rsi
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 64], rdx
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15], r11
	mov	qword ptr [r15 + 16], r10
	add	r11, 192
	adc	r8, 0
	adc	r10, 0
	adc	rdi, 0
	mov	rcx, qword ptr [rbx - 16]
	mov	rax, qword ptr [rbx - 8]
	mov	r15, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	qword ptr [rbx - 16], r10
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	qword ptr [rbx - 24], r8
	mov	qword ptr [rbx - 32], r11
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	qword ptr [rbx - 8], rdi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rsi - 1]
	mov	qword ptr [rbp - 112], r12      # 8-byte Spill
	shl	r12, 5
	add	r12, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r9
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r9
	cmp	rsi, rdi
	ja	.LBB5_1798
.LBB5_1709:                             # %OP9299.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, qword ptr [r14 + 8]
	movbe	qword ptr [r15 + r13 + 24], r11
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	movbe	qword ptr [r15 + r13 + 8], r10
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r13], rax
	mov	rax, qword ptr [rbx - 48]
	mov	r14, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 56]
	mov	rcx, qword ptr [rbx - 40]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r14
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [r13 + 40]
	mov	r8, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r8, r15
	mov	rsi, r14
	add	rsi, 32
	mov	rdi, -1
	cmovb	rsi, rdi
	xor	r9d, r9d
	mov	r10, rdx
	neg	r10
	mov	r10d, 0
	sbb	r10, rax
	sbb	r9, rcx
	cmovb	rsi, rdi
	mov	rdi, r14
	cmp	rsi, r8
	ja	.LBB5_1799
.LBB5_1710:                             # %OP9300.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r14 + r15 + 16]
	mov	r8, qword ptr [r14 + r15 + 24]
	mov	r9, qword ptr [r14 + r15]
	mov	r10, qword ptr [r14 + r15 + 8]
	mov	r11, qword ptr [rbx - 96]
	mov	r14, qword ptr [rbx - 88]
	mov	r15, qword ptr [rbx - 72]
	mov	r12, qword ptr [rbx - 80]
	movbe	qword ptr [rbx - 80], r10
	movbe	qword ptr [rbx - 72], r9
	movbe	qword ptr [rbx - 96], r8
	movbe	qword ptr [rbx - 88], rsi
	mov	qword ptr [rbx - 16], r12
	mov	qword ptr [rbx - 8], r15
	mov	qword ptr [rbx - 32], r11
	mov	qword ptr [rbx - 24], r14
	add	rdi, r11
	adc	rdx, r14
	adc	rax, r12
	adc	rcx, r15
	mov	qword ptr [rbx - 64], rdi
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 48], rax
	mov	qword ptr [rbx - 40], rcx
	mov	rdi, r13
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3071
# %bb.1711:                             # %OP9304.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, r13
	vmovdqa	xmm0, xmmword ptr [rbx - 96]
	vmovdqa	xmm1, xmmword ptr [rbx - 80]
	mov	rsi, qword ptr [rbx - 128]
	mov	rcx, qword ptr [rbx - 120]
	mov	rdi, qword ptr [rbx - 104]
	mov	r13, qword ptr [rbx - 112]
	vmovdqa	xmmword ptr [rbx - 112], xmm1
	vmovdqa	xmmword ptr [rbx - 128], xmm0
	mov	qword ptr [rbx - 80], r13
	mov	qword ptr [rbx - 72], rdi
	mov	qword ptr [rbx - 96], rsi
	mov	qword ptr [rbx - 88], rcx
	add	qword ptr [rbp - 48], -3        # 8-byte Folded Spill
	jmp	.LBB5_1764
.LBB5_1712:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 10784
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_496
# %bb.1713:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 10922
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2611
# %bb.1714:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 10935
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1715:                             # %OP5363.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -6
.LBB5_1716:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rcx
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	shl	rax, 5
	mov	rdi, qword ptr [r11 + rax + 24]
	mov	r13, qword ptr [r11 + rax + 16]
	mov	rsi, qword ptr [r11 + rax]
	mov	rcx, qword ptr [r11 + rax + 8]
	jmp	.LBB5_32
.LBB5_1717:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 17672
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2639
.LBB5_1718:                             # %OP8112.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	lea	r14, [r11 + rax]
	lea	rsi, [r11 + rax]
	add	rsi, -32
	vmovaps	xmm0, xmmword ptr [r11 + rax - 16]
	vmovaps	xmm1, xmmword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 64]
	mov	r8, qword ptr [r11 + rax - 56]
	vmovaps	xmmword ptr [r11 + rax - 64], xmm1
	mov	r13d, dword ptr [r11 + rax - 48]
	vmovaps	xmmword ptr [r11 + rax - 48], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r11 + rax - 32], ymm0
	lea	rcx, [r11 + rax - 64]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	vmovups	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], r8
	mov	qword ptr [r11 + rax], rdi
	mov	qword ptr [r11 + rax + 16], r13
	mov	qword ptr [r11 + rax + 56], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [r12 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	rax, rbx
	cmp	rax, 31
	jbe	.LBB5_3095
.LBB5_1719:                             # %OP8121.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + rbx + 24], rdi
	movbe	qword ptr [rax + rbx + 16], r8
	movbe	qword ptr [rax + rbx + 8], r13
	mov	qword ptr [rax + rbx], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_83] # xmm0 = [9,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r14 + 32], ymm0
	mov	rbx, qword ptr [r12 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	rax, r15
	cmp	rax, 63
	jbe	.LBB5_1808
.LBB5_1720:                             # %OP8124.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_84] # ymm0 = [0,0,0,648518346341351424]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [r14 - 32]
	vmovdqa	xmm1, xmmword ptr [r14 - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [r14 - 32], ymm2
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_142
# %bb.1721:                             # %OP8127.SSTORE
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, r12
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	je	.LBB5_1722
	jmp	.LBB5_3071
.LBB5_1723:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 14331
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2523
# %bb.1724:                             # %OP6679.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_102] # xmm0 = [15,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	r13, r12
	lea	r12, [rax - 1]
	lea	r14, [r11 + rbx - 32]
	mov	rdi, r13
	mov	rsi, r14
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3097
# %bb.1725:                             # %OP6682.POP
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_103] # xmm0 = [18,0,0,0]
	vmovdqu	ymmword ptr [rbx - 96], ymm0
	lea	r15, [rbx - 64]
	vmovdqu	ymmword ptr [rbx - 64], ymm0
	mov	rdi, r13
	mov	rsi, r15
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3097
# %bb.1726:                             # %OP6687.PUSH32
                                        #   in Loop: Header=BB5_32 Depth=1
	shl	r12, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_59] # ymm0 = [18446744073709551360,18446744073709551615,18446744073709551615,18446744073709551615]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovups	ymmword ptr [rax + r12], ymm0
	add	rbx, -96
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, -256
	and	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 24]
	mov	qword ptr [r15], rdx
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 1
	or	rdx, 1
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3088
# %bb.1727:                             # %OP6693.JUMP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, r13
	jmp	.LBB5_1770
.LBB5_1728:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, rsi
	xor	rax, 20104
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2575
# %bb.1729:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 20142
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1730:                             # %OP9414.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqu	ymm0, ymmword ptr [r11 + rcx - 224]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
.LBB5_1731:                             # %OP9667.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r10, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	rbx, [r11 + rax]
	mov	r15, qword ptr [r12 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	mov	r13, r15
	cmp	rax, 95
	jbe	.LBB5_1801
.LBB5_1732:                             # %OP9669.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r15 + 8]
	mov	r12, qword ptr [rcx + r14 + 88]
	mov	rdx, qword ptr [rcx + r14 + 80]
	mov	rax, qword ptr [rcx + r14 + 64]
	mov	rsi, qword ptr [rcx + r14 + 72]
	movbe	qword ptr [rbx + 24], rax
	movbe	qword ptr [rbx + 8], rdx
	movbe	qword ptr [rbx], r12
	movbe	qword ptr [rbx + 16], rsi
	mov	rcx, r10
	shl	rcx, 5
	movabs	rdi, 1801721325924909056
	mov	qword ptr [r11 + rcx + 24], rdi
	mov	qword ptr [r11 + rcx + 8], 0
	mov	qword ptr [r11 + rcx + 16], 0
	mov	qword ptr [r11 + rcx], 0
	movbe	qword ptr [rbx + 80], rsi
	mov	rdi, rsi
	bswap	rdi
	movbe	qword ptr [rbx + 72], rdx
	bswap	rdx
	movbe	qword ptr [rbx + 64], r12
	movbe	qword ptr [rbx + 88], rax
	bswap	r12
	mov	r8, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13 + 48]
	sub	r8, r15
	mov	rsi, r12
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rdi
	bswap	rax
	sbb	r9, rax
	lea	r14, [r11 + rcx]
	mov	rax, -1
	cmovb	rsi, rax
	cmp	rsi, r8
	ja	.LBB5_1803
.LBB5_1733:                             # %OP9673.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, qword ptr [r13 + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_71] # xmm0 = [281,0,0,0]
	vmovups	ymmword ptr [r12 + r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	rdi, qword ptr [rbx + 16]
	mov	rax, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 88], r9
	mov	qword ptr [rbx + 72], r8
	mov	qword ptr [rbx + 80], rdi
	mov	qword ptr [rbx + 64], rax
	mov	r15, rax
	add	r15, 2
	mov	rsi, r8
	adc	rsi, 0
	mov	rcx, rdi
	adc	rcx, 0
	mov	rdx, r9
	adc	rdx, 0
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rdx
	mov	qword ptr [r14], r15
	mov	qword ptr [r14 + 16], rcx
	mov	r12, qword ptr [rbx - 56]
	mov	r10, qword ptr [rbx - 40]
	mov	r11, qword ptr [rbx - 64]
	mov	r13, qword ptr [rbx - 48]
	mov	qword ptr [rbx - 64], r15
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 40], rdx
	mov	qword ptr [rbx - 56], rsi
	mov	qword ptr [r14 + 16], r13
	mov	qword ptr [r14], r11
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r12
	mov	qword ptr [rbp - 112], r11      # 8-byte Spill
	mov	qword ptr [rbx], r11
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	mov	qword ptr [rbx + 16], r13
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	mov	qword ptr [rbx + 8], r12
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [r14], rax
	mov	qword ptr [rbx - 40], r9
	mov	qword ptr [rbx - 48], rdi
	mov	qword ptr [rbx - 56], r8
	mov	qword ptr [rbx - 64], rax
	mov	qword ptr [r14 + 24], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14], r15
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rax + 40]
	mov	rdi, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	rdi, r13
	mov	rax, r15
	add	rax, 32
	mov	r9, -1
	cmovb	rax, r9
	xor	r8d, r8d
	neg	rsi
	mov	esi, 0
	sbb	rsi, rcx
	sbb	r8, rdx
	cmovb	rax, r9
	lea	rsi, [rbx - 64]
	cmp	rax, rdi
	ja	.LBB5_3099
.LBB5_1734:                             # %OP9680.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 8], rax
	movbe	qword ptr [r15 + r13], r10
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_72] # xmm0 = [34,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [rbx - 40]
	mov	r15, qword ptr [rbx - 64]
	mov	rdi, qword ptr [rbx - 56]
	mov	rdx, qword ptr [rbx - 48]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], r15
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rdi
	add	r15, 34
	adc	rdi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax - 1]
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	shl	r8, 5
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rax + 40]
	mov	r9, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	r9, r12
	mov	rax, r15
	add	rax, 32
	mov	r10, -1
	cmovb	rax, r10
	xor	r11d, r11d
	neg	rdi
	mov	edi, 0
	sbb	rdi, rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rdi, [rdx + r8]
	sbb	r11, rcx
	mov	r11, qword ptr [rdx + r8]
	mov	rcx, qword ptr [rdx + r8 + 16]
	cmovb	rax, r10
	mov	r14, qword ptr [rdx + r8 + 8]
	mov	rdx, qword ptr [rdx + r8 + 24]
	cmp	rax, r9
	ja	.LBB5_3055
.LBB5_1735:                             # %OP9684.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r12, qword ptr [r13 + 8]
	movbe	qword ptr [r15 + r12 + 24], r11
	movbe	qword ptr [r15 + r12 + 16], r14
	movbe	qword ptr [r15 + r12 + 8], rcx
	movbe	qword ptr [r15 + r12], rdx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_73] # xmm0 = [66,0,0,0]
	vmovdqu	ymmword ptr [rdi], ymm0
	vmovdqu	ymm1, ymmword ptr [rbx - 64]
	vmovdqu	ymmword ptr [rbx - 64], ymm0
	vmovdqu	ymmword ptr [rbx - 32], ymm1
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3056
# %bb.1736:                             # %OP9687.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovdqa	xmm0, xmmword ptr [rbx - 64]
	vmovdqa	xmm1, xmmword ptr [rbx - 48]
	mov	rsi, qword ptr [rbx - 96]
	mov	rcx, qword ptr [rbx - 88]
	mov	rdi, qword ptr [rbx - 72]
	mov	r13, qword ptr [rbx - 80]
	vmovdqa	xmmword ptr [rbx - 80], xmm1
	vmovdqa	xmmword ptr [rbx - 96], xmm0
	mov	qword ptr [rbx - 48], r13
	mov	qword ptr [rbx - 40], rdi
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 56], rcx
	add	qword ptr [rbp - 48], -2        # 8-byte Folded Spill
	jmp	.LBB5_1764
.LBB5_1504:                             # %OP9623.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rdi
	shl	rax, 5
	lea	rsi, [r11 + rax]
	lea	r9, [rdi + 2]
	mov	r8d, dword ptr [r11 + rax - 48]
	mov	r13, qword ptr [r11 + rax - 64]
	mov	r10, qword ptr [r11 + rax - 56]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], r10
	mov	qword ptr [r11 + rax], r13
	mov	qword ptr [r11 + rax + 16], r8
	mov	qword ptr [r11 + rax + 56], 0
	lea	rcx, [rdi + 3]
	mov	rax, r9
	shl	rax, 5
	lea	r12, [r11 + rax]
	mov	qword ptr [r11 + rax + 8], r10
	mov	qword ptr [r11 + rax + 16], r8
	mov	qword ptr [r11 + rax], r13
	mov	qword ptr [r11 + rax + 24], 0
	add	rdi, 4
	mov	qword ptr [rbp - 184], rcx      # 8-byte Spill
	mov	rax, rcx
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	rcx, [r11 + rax]
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [r14 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	rax, rbx
	cmp	rax, 31
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	qword ptr [rbp - 112], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 168], rdi      # 8-byte Spill
	jbe	.LBB5_3100
.LBB5_1505:                             # %OP9631.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + rbx + 24], r13
	movbe	qword ptr [rax + rbx + 16], r10
	movbe	qword ptr [rax + rbx + 8], r8
	mov	qword ptr [rax + rbx], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [rcx], ymm1
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [rcx], ymm0
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 5]
	mov	rax, rdi
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm1
	lea	r12, [r11 + rax]
	mov	rbx, qword ptr [r14 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	rax, r15
	cmp	rax, 63
	jbe	.LBB5_1804
.LBB5_1506:                             # %OP9636.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_76] # ymm0 = [0,0,0,1152921504606846976]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rsi + 48]
	mov	rcx, qword ptr [rsi + 32]
	mov	rdx, qword ptr [rsi + 40]
	mov	r14, rsi
	mov	rsi, qword ptr [rsi + 56]
	mov	qword ptr [rbp - 176], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], rsi
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	qword ptr [r11 + r13 + 16], rax
	mov	qword ptr [r11 + r13], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3048
# %bb.1507:                             # %OP9640.DUP6
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, rbx
	mov	r9, qword ptr [r14 - 16]
	mov	rcx, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	mov	rax, qword ptr [r14 - 8]
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], r9
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	mov	qword ptr [r13], rcx
	mov	rax, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	r15, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 48]
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 216], rcx
	mov	qword ptr [r14 + 192], r15
	mov	qword ptr [r14 + 200], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rdi, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r11
	cmp	rsi, rdi
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	ja	.LBB5_1805
.LBB5_1508:                             # %OP9643.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, qword ptr [r14 + 8]
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 16], rax
	movbe	qword ptr [r15 + rbx + 8], r9
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	mov	rdi, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12]
	mov	rbx, qword ptr [r12 + 8]
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 144], r9       # 8-byte Spill
	mov	qword ptr [r14], r9
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [rbp - 152], rbx      # 8-byte Spill
	mov	qword ptr [r14 + 8], rbx
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	r15, qword ptr [r10]
	mov	rdi, qword ptr [r10 + 16]
	mov	r8, qword ptr [r10 + 8]
	mov	r9, qword ptr [r10 + 24]
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10], rcx
	mov	qword ptr [r10 + 16], rsi
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12], r15
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rax + 40]
	mov	rax, qword ptr [rcx + 16]
	mov	qword ptr [rbp - 160], rcx      # 8-byte Spill
	mov	rbx, qword ptr [rcx + 48]
	sub	rax, rbx
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r11
	xor	ecx, ecx
	neg	r8
	mov	edx, 0
	sbb	rdx, rdi
	sbb	rcx, r9
	cmovb	rsi, r11
	cmp	rsi, rax
	ja	.LBB5_1806
.LBB5_1509:                             # %OP9646.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 160]      # 8-byte Reload
	add	rbx, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	mov	rax, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10]
	mov	rdx, qword ptr [r10 + 8]
	mov	rsi, qword ptr [r10 + 16]
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rax, qword ptr [rsi + 32]
	mov	rcx, qword ptr [rsi + 48]
	mov	rdx, qword ptr [rsi + 40]
	mov	rsi, qword ptr [rsi + 56]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, rbx
	mov	rsi, r14
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1124
# %bb.1510:                             # %OP9649.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12 + 24], rdx
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, rbx
	mov	rsi, r12
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3048
# %bb.1511:                             # %OP9651.PUSH32
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_59] # ymm0 = [18446744073709551360,18446744073709551615,18446744073709551615,18446744073709551615]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, -256
	and	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 24]
	mov	qword ptr [r12], rdx
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 1
	or	rdx, 1
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	vmovdqu	ymm0, ymmword ptr [r14]
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rax
	mov	qword ptr [r14 + 16], rcx
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, rbx
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_2145
# %bb.1512:                             # %OP9657.MLOAD
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r15, qword ptr [r10]
	mov	r13, qword ptr [rbx + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	rbx, qword ptr [r13 + 48]
	sub	rax, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	rcx, -1
	cmovb	rsi, rcx
	xor	edx, edx
	cmp	rdx, qword ptr [r10 + 8]
	mov	edi, 0
	sbb	rdi, qword ptr [r10 + 16]
	sbb	rdx, qword ptr [r10 + 24]
	cmovb	rsi, rcx
	cmp	rsi, rax
	ja	.LBB5_1807
.LBB5_1513:                             # %OP9657.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, qword ptr [r13 + 8]
	mov	rax, qword ptr [r15 + rbx + 16]
	mov	rcx, qword ptr [r15 + rbx + 24]
	mov	rdx, qword ptr [r15 + rbx]
	mov	rbx, qword ptr [r15 + rbx + 8]
	movbe	qword ptr [r10 + 16], rbx
	movbe	qword ptr [r10], rcx
	movbe	qword ptr [r10 + 24], rdx
	movbe	qword ptr [r10 + 8], rax
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdi, qword ptr [rsi - 32]
	mov	r8, qword ptr [rsi - 16]
	mov	r9, qword ptr [rsi - 24]
	mov	r15, r10
	mov	r10, qword ptr [rsi - 8]
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14], rdi
	mov	r11, qword ptr [rsi + 16]
	mov	qword ptr [rsi + 16], r8
	mov	r8, qword ptr [rsi]
	mov	qword ptr [rsi], rdi
	mov	rdi, qword ptr [rsi + 8]
	mov	qword ptr [rsi + 8], r9
	mov	r9, qword ptr [rsi + 24]
	mov	qword ptr [rsi + 24], r10
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], rdi
	vmovups	ymm0, ymmword ptr [rsi + 32]
	mov	qword ptr [rsi + 56], r9
	mov	qword ptr [rsi + 32], r8
	mov	qword ptr [rsi + 40], rdi
	mov	qword ptr [rsi + 48], r11
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_77] # ymm0 = [11429787529324990629,10934669705380125472,8498024259589154852,11015329927845009845]
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	movbe	qword ptr [r12 + 24], rdx
	movbe	qword ptr [r12 + 16], rbx
	movbe	qword ptr [r12 + 8], rax
	movbe	qword ptr [r12], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_142
.LBB5_1722:                             # %OP8128.JUMP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, -3
	jmp	.LBB5_1771
.LBB5_1737:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 19511
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1738:                             # %OP9059.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rax, r8
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [r11 + rax - 32]
	vmovaps	xmm1, xmmword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 192]
	mov	rcx, qword ptr [r11 + rax - 184]
	mov	rdi, qword ptr [r11 + rax - 168]
	mov	r13, qword ptr [r11 + rax - 176]
	vmovaps	xmmword ptr [r11 + rax - 176], xmm1
	vmovaps	xmmword ptr [r11 + rax - 192], xmm0
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 160]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 144]
	mov	qword ptr [r11 + rax - 144], r13
	mov	qword ptr [r11 + rax - 136], rdi
	mov	qword ptr [r11 + rax - 160], rsi
	mov	qword ptr [r11 + rax - 152], rcx
	vmovdqa	xmmword ptr [r11 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 32], xmm0
.LBB5_1739:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r8, -5
.LBB5_1740:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	jmp	.LBB5_32
.LBB5_1741:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	xor	rsi, 9294
	or	rsi, r13
	or	rsi, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3092
.LBB5_1742:                             # %OP4695.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rbx + 1]
	mov	r14, rbx
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 80]
	mov	rcx, qword ptr [r11 + rbx - 96]
	mov	rdx, qword ptr [r11 + rbx - 88]
	mov	rsi, qword ptr [r11 + rbx - 72]
	mov	qword ptr [r11 + rbx + 24], rsi
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx], rcx
	mov	rdi, qword ptr [r11 + rbx - 32]
	mov	r8, qword ptr [r11 + rbx - 24]
	mov	r9, qword ptr [r11 + rbx - 16]
	mov	r10, qword ptr [r11 + rbx - 8]
	mov	r13, r15
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], r10
	mov	qword ptr [r11 + r13 + 16], r9
	mov	qword ptr [r11 + r13 + 8], r8
	mov	qword ptr [r11 + r13], rdi
	cmp	rdi, rcx
	sbb	r8, rdx
	sbb	r9, rax
	sbb	r10, rsi
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_1781
	jmp	.LBB5_1743
.LBB5_1751:                             # %OP4426.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 164]
	movbe	r9, qword ptr [rax + 156]
	bswap	r8
	shrd	r8, r9, 32
	movbe	rax, qword ptr [rax + 148]
	shrd	r9, rax, 32
	shr	rax, 32
	mov	r15, r12
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, r10
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 8], r9
	mov	qword ptr [r11 + r12 + 16], rax
	mov	qword ptr [r11 + r12], r8
	mov	qword ptr [r11 + r12 + 24], 0
	lea	rbx, [r10 + 2]
	mov	qword ptr [r11 + r12 + 56], 0
	mov	qword ptr [r11 + r12 + 40], 0
	mov	qword ptr [r11 + r12 + 48], 0
	mov	qword ptr [r11 + r12 + 32], 0
	lea	r14, [r10 + 3]
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], r9
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx], r8
	mov	qword ptr [r11 + rbx + 24], 0
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r15
	push	0
	push	rax
	mov	r13, r11
	mov	r15, r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1087
# %bb.1752:                             # %OP4432.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_139] # xmm0 = [13,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	add	r14, r13
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm1
	vmovdqu	ymmword ptr [rbx], ymm1
	add	r15, 4
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r13 + r15], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 13
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1753:                             # %OP4437.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r12, r13
	add	r15, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 56]
	mov	rcx, qword ptr [r12 + 32]
	mov	rdx, qword ptr [r12 + 40]
	mov	rsi, qword ptr [r12 + 48]
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	vmovdqu	ymmword ptr [r15], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.1754:                             # %OP4442.SWAP4
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r13, r15
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r12 - 16]
	mov	r8, qword ptr [r12 - 32]
	mov	r9, qword ptr [r12 - 24]
	mov	r10, qword ptr [r12 - 8]
	mov	qword ptr [r12 - 8], rsi
	mov	qword ptr [r12 - 24], rdx
	mov	qword ptr [r12 - 16], rcx
	mov	qword ptr [r12 - 32], rax
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14], r8
	mov	r11, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rdi
	mov	rdi, qword ptr [rbx]
	mov	qword ptr [rbx], r8
	mov	r8, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], r9
	mov	r9, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [r12 - 8], r9
	mov	qword ptr [r12 - 16], r11
	mov	qword ptr [r12 - 24], r8
	mov	qword ptr [r12 - 32], rdi
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.1755:                             # %OP4446.DUP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [r12 + 32]
	mov	rsi, qword ptr [r12 + 40]
	mov	rcx, qword ptr [r12 + 56]
	mov	rdx, qword ptr [r12 + 48]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.1756:                             # %OP4447.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	r9, qword ptr [r12 - 184]
	mov	rax, qword ptr [r12 - 168]
	mov	r8, qword ptr [r12 - 192]
	mov	r10, qword ptr [r12 - 176]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1757:                             # %OP4451.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	rcx, qword ptr [r12 + 56]
	mov	rdi, qword ptr [r12 + 32]
	mov	rsi, qword ptr [r12 + 40]
	mov	rdx, qword ptr [r12 + 48]
	mov	qword ptr [r12 + 48], r10
	mov	qword ptr [r12 + 32], r8
	mov	qword ptr [r12 + 56], rax
	mov	qword ptr [r12 + 40], r9
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	r8, r15
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.1758:                             # %OP4452.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [r15 + 24]
	mov	r10, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 8], rdx
	mov	eax, 4294967295
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], -1
	mov	qword ptr [r14], -1
	mov	rax, qword ptr [r12 - 216]
	mov	r8, qword ptr [r12 - 200]
	mov	r11, qword ptr [r12 - 224]
	mov	r9, qword ptr [r12 - 208]
	mov	qword ptr [r13 + 16], r9
	mov	qword ptr [r13], r11
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rax
	mov	r9d, r9d
	mov	qword ptr [r14], r11
	mov	qword ptr [r14 + 8], rax
	mov	qword ptr [r14 + 16], r9
	mov	qword ptr [r14 + 24], 0
	mov	r8, qword ptr [r12 - 32]
	mov	r15, qword ptr [r12 - 24]
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	mov	rcx, qword ptr [r12 - 16]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [r12 - 16], r9
	mov	r9, qword ptr [r12 - 8]
	mov	qword ptr [r12 - 24], rax
	mov	qword ptr [r12 - 32], r11
	mov	qword ptr [r12 - 8], 0
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], r15
	mov	qword ptr [r14], r8
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_140] # ymm0 = [16562711945520663032,12849734440052902119,3802271995129176363,12359338596208588178]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r11, qword ptr [r12 + 56]
	mov	rcx, qword ptr [r12 + 32]
	mov	r15, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 48]
	vmovdqu	ymmword ptr [r12 + 32], ymm0
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r13 + 8], r15
	mov	qword ptr [r12 + 176], rsi
	mov	qword ptr [r12 + 160], r10
	mov	qword ptr [r12 + 184], rdi
	mov	qword ptr [r12 + 168], rdx
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13], r10
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r12 + 176], rax
	mov	qword ptr [r12 + 160], rcx
	mov	qword ptr [r12 + 184], r11
	mov	qword ptr [r12 + 168], r15
	sub	rcx, r10
	sbb	r15, rdx
	sbb	rax, rsi
	sbb	r11, rdi
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 8], r15
	mov	qword ptr [r13 + 24], r11
	add	rcx, r8
	adc	r15, qword ptr [rbp - 96]       # 8-byte Folded Reload
	adc	rax, qword ptr [rbp - 88]       # 8-byte Folded Reload
	adc	r11, r9
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], r11
	mov	qword ptr [r14 + 8], r15
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx + 24], r11
	mov	qword ptr [rbx + 8], r15
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], r10
	lea	rbx, [r12 - 32]
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [r14 - 1]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_2988
# %bb.1759:                             # %OP4465.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rbx + r13], ymm0
	lea	r15, [r14 + 1]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.1760:                             # %OP4467.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	rax, qword ptr [r12 - 168]
	mov	r8, qword ptr [r12 - 192]
	mov	r9, qword ptr [r12 - 184]
	mov	r10, qword ptr [r12 - 176]
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [rbx + r15 + 16], r10
	mov	qword ptr [rbx + r15], r8
	mov	qword ptr [rbx + r15 + 24], rax
	mov	qword ptr [rbx + r15 + 8], r9
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.1761:                             # %OP4471.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, rbx
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1210
# %bb.1762:                             # %OP4472.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, rbx
	mov	rax, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	edi, 4294967295
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], -1
	mov	qword ptr [r15], -1
	mov	rdi, qword ptr [r12 - 200]
	mov	r8, qword ptr [r12 - 208]
	mov	r10, qword ptr [r12 - 224]
	mov	r9, qword ptr [r12 - 216]
	mov	qword ptr [r12 + 64], r10
	mov	qword ptr [r12 + 72], r9
	mov	qword ptr [r12 + 80], r8
	mov	qword ptr [r12 + 88], rdi
	mov	r8d, r8d
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r10
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15 + 24], 0
	mov	rdi, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], r8
	mov	r8, qword ptr [r13 + 8]
	mov	qword ptr [r13 + 8], r9
	mov	r9, qword ptr [r13]
	mov	qword ptr [r13], r10
	mov	r10, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15], r9
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [r12 + 88], rax
	mov	qword ptr [r12 + 80], rcx
	mov	qword ptr [r12 + 72], rdx
	mov	qword ptr [r12 + 64], rsi
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_131] # ymm0 = [2951364421682967535,10748869590852608278,7620847484418887082,15992936130196719771]
	vmovups	ymmword ptr [r12 + 96], ymm0
	vmovups	ymmword ptr [r15], ymm0
	mov	qword ptr [r12 + 96], rsi
	sub	r9, rsi
	mov	qword ptr [r12 + 104], rdx
	sbb	r8, rdx
	mov	qword ptr [r12 + 112], rcx
	sbb	rdi, rcx
	mov	qword ptr [r12 + 120], rax
	sbb	r10, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12 + 128], ymm0
	add	r9, 32
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [r12 + 80], rdi
	mov	qword ptr [r12 + 72], r8
	mov	qword ptr [r12 + 64], r9
	adc	r10, 0
	mov	qword ptr [r12 + 88], r10
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.1763:                             # %OP4488.POP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rsi, qword ptr [r12 - 256]
	mov	rcx, qword ptr [r12 - 248]
	mov	rdi, qword ptr [r12 - 232]
	mov	r13, qword ptr [r12 - 240]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r12 - 256], ymm0
	vmovdqu	ymm0, ymmword ptr [r12 - 224]
	mov	qword ptr [r12 - 208], r13
	mov	qword ptr [r12 - 200], rdi
	mov	qword ptr [r12 - 224], rsi
	mov	qword ptr [r12 - 216], rcx
	vmovdqu	ymmword ptr [r12 - 64], ymm0
	add	qword ptr [rbp - 48], -7        # 8-byte Folded Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_1764:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1765:                             # %OP7670.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, r13
	shl	rbx, 5
	mov	eax, dword ptr [r11 + rbx - 48]
	vmovaps	xmm0, xmmword ptr [r11 + rbx - 64]
	vmovaps	xmmword ptr [r11 + rbx], xmm0
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	mov	eax, dword ptr [r11 + rbx - 80]
	vmovaps	xmm0, xmmword ptr [r11 + rbx - 96]
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_86] # ymm1 = [0,2951364421682967535,10748869590852608278,7620847484418887082]
	vmovdqu	ymmword ptr [r11 + rbx + 56], ymm1
	vmovaps	xmmword ptr [r11 + rbx + 32], xmm0
	mov	qword ptr [r11 + rbx + 48], rax
	movabs	rax, -2453807943512831845
	mov	qword ptr [r11 + rbx + 88], rax
	vmovups	ymm0, ymmword ptr [r11 + rbx - 32]
	vmovups	ymmword ptr [r11 + rbx + 96], ymm0
	lea	rax, [r13 + 5]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx + 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3056
# %bb.1766:                             # %OP7680.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r15
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	lea	r14, [r13 + 6]
	mov	r12, qword ptr [rbp - 88]       # 8-byte Reload
	shl	r12, 5
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12], rdi
	mov	qword ptr [r15 + r12 + 24], rcx
	mov	qword ptr [r15 + r12 + 8], rsi
	mov	r8, qword ptr [rbx + 96]
	mov	rax, qword ptr [rbx + 112]
	mov	r9, qword ptr [rbx + 104]
	mov	r10, qword ptr [rbx + 120]
	mov	r13, r14
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 24], r10
	mov	qword ptr [r15 + r13 + 8], r9
	mov	qword ptr [r15 + r13], r8
	mov	qword ptr [r15 + r13 + 16], rax
	mov	qword ptr [rbx + 232], rsi
	mov	qword ptr [rbx + 248], rcx
	mov	qword ptr [rbx + 240], rdx
	mov	qword ptr [rbx + 224], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1055
# %bb.1767:                             # %OP7685.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r12, r15
	add	r13, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovups	ymm0, ymmword ptr [rbx + 96]
	mov	qword ptr [rbx + 120], rax
	mov	qword ptr [rbx + 96], rdx
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rcx
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx + 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3056
# %bb.1768:                             # %OP7691.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 152], rsi
	mov	qword ptr [rbx + 136], rcx
	mov	qword ptr [rbx + 144], rax
	mov	qword ptr [rbx + 128], rdx
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rcx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rdx
	mov	rdi, qword ptr [rbx + 104]
	mov	r8, qword ptr [rbx + 120]
	mov	r9, qword ptr [rbx + 96]
	mov	r10, qword ptr [rbx + 112]
	mov	qword ptr [rbx + 112], rax
	mov	qword ptr [rbx + 96], rdx
	mov	qword ptr [rbx + 120], rsi
	mov	qword ptr [rbx + 104], rcx
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], rdi
	sub	r9, rdx
	sbb	rdi, rcx
	sbb	r10, rax
	sbb	r8, rsi
	mov	qword ptr [rbx + 96], r9
	mov	qword ptr [rbx + 104], rdi
	mov	qword ptr [rbx + 112], r10
	mov	qword ptr [rbx + 120], r8
	mov	qword ptr [rbx + 128], rdx
	mov	qword ptr [rbx + 152], rsi
	mov	qword ptr [rbx + 136], rcx
	mov	qword ptr [rbx + 144], rax
.LBB5_1769:                             # %OP7691.MLOAD.contd
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_142
.LBB5_1770:                             # %OP4800.POP
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, -4
.LBB5_1771:                             # %dynamic_jump_table
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, rax
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rax, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [r11 + rax + 24]
	mov	r13, qword ptr [r11 + rax + 16]
	mov	rsi, qword ptr [r11 + rax]
	mov	rcx, qword ptr [r11 + rax + 8]
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1772:                             # %OP3239.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [r10 + 1]
	mov	rbx, r10
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r15, [r10 + 2]
	mov	rax, qword ptr [r11 + rbx - 200]
	mov	r8, qword ptr [r11 + rbx - 224]
	mov	r9, qword ptr [r11 + rbx - 216]
	mov	rcx, qword ptr [r11 + rbx - 208]
	mov	qword ptr [rbp - 112], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rcx
	mov	qword ptr [r11 + r13], r8
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 8], r9
	mov	eax, ecx
	mov	qword ptr [r11 + rbx], r8
	mov	qword ptr [r11 + rbx + 8], r9
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r11 + r13 + 16], rax
	mov	qword ptr [r11 + r13 + 8], r9
	mov	qword ptr [r11 + r13], r8
	mov	qword ptr [r11 + r13 + 24], 0
	mov	qword ptr [rbp - 120], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r12
	push	0
	push	rax
	mov	r12, r11
	mov	r14, r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.1773:                             # %OP3247.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r13, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_159] # xmm0 = [10,0]
	vmovdqu	ymmword ptr [r13], ymm0
	add	r15, r12
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r13], ymm1
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	add	r14, 3
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	vmovdqu	ymmword ptr [r12 + r14], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 10
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1083
# %bb.1774:                             # %OP3252.PUSH1
                                        #   in Loop: Header=BB5_32 Depth=1
	add	rbx, r12
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rdi, 4
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	vmovdqu	ymmword ptr [r15], ymm0
	add	r14, r12
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	r15, rdi
	shl	r15, 5
	mov	qword ptr [r12 + r15 + 16], rsi
	mov	qword ptr [r12 + r15], rcx
	mov	qword ptr [r12 + r15 + 24], rax
	mov	qword ptr [r12 + r15 + 8], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_751
# %bb.1775:                             # %OP3256.CALLER
                                        #   in Loop: Header=BB5_32 Depth=1
	add	r15, r12
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	rcx, qword ptr [rdx + 156]
	movbe	rax, qword ptr [rdx + 148]
	mov	r8d, dword ptr [rdx + 164]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], 0
	mov	rdi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 160], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.1776:                             # %OP3259.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r14 + 16]
	mov	r8, qword ptr [r14]
	mov	r9, qword ptr [r14 + 8]
	mov	r10, qword ptr [r14 + 24]
	mov	r12, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [r12 + 16]
	mov	rsi, qword ptr [r12]
	mov	r11, qword ptr [r12 + 8]
	mov	r15, qword ptr [r12 + 24]
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r8
	mov	qword ptr [r14 + 24], r15
	mov	qword ptr [r14 + 8], r11
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rsi
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], rcx
	mov	rdi, qword ptr [r13]
	mov	qword ptr [r13], rsi
	mov	rsi, qword ptr [r13 + 8]
	mov	qword ptr [r13 + 8], r11
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 24], r15
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1083
# %bb.1777:                             # %OP3262.SWAP1
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r13 + 16]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.1778:                             # %OP3264.SLOAD
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.1779:                             # %OP3265.PUSH2
                                        #   in Loop: Header=BB5_32 Depth=1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_160] # xmm0 = [5811,0,0,0]
	vmovups	ymmword ptr [r13], ymm0
	vmovdqu	ymm1, ymmword ptr [rbx]
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymm0, ymmword ptr [rbx - 160]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB5_1785
.LBB5_1780:                             # %dynamic_jump_table.OP4740.JUMPDEST_crit_edge
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
.LBB5_1781:                             # %OP4740.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_132] # xmm0 = [11,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1782:                             # %OP4743.PUSH2
                                        #   in Loop: Header=BB5_32 Depth=1
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_137] # xmm0 = [9396,0,0,0]
	vmovups	ymmword ptr [r14 + r15], ymm0
	vmovdqu	ymm1, ymmword ptr [rbx]
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r14 + r15], ymm1
	add	r13, 3
	vmovdqu	ymm0, ymmword ptr [rbx - 96]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r11, r14
	jmp	.LBB5_1785
.LBB5_1783:                             # %OP4748.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_132] # xmm0 = [11,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r14, [r13 - 1]
	lea	rsi, [r11 + rbx]
	add	rsi, -32
	mov	rdi, r12
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_371
# %bb.1784:                             # %OP4751.PUSH2
                                        #   in Loop: Header=BB5_32 Depth=1
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_133] # xmm0 = [9413,0,0,0]
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	add	rbx, r15
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	eax, dword ptr [rdx + 164]
	movbe	rcx, qword ptr [rdx + 156]
	bswap	rax
	shrd	rax, rcx, 32
	movbe	rdx, qword ptr [rdx + 148]
	shrd	rcx, rdx, 32
	shr	rdx, 32
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 48], 0
	mov	qword ptr [rbx + 56], 0
	mov	qword ptr [rbx + 32], 8655
	mov	qword ptr [rbx + 40], 0
	mov	rax, qword ptr [rbx - 56]
	mov	rcx, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 40]
	mov	rsi, qword ptr [rbx - 48]
	mov	qword ptr [rbx + 80], rsi
	mov	qword ptr [rbx + 88], rdx
	mov	qword ptr [rbx + 64], rcx
	mov	qword ptr [rbx + 72], rax
	add	r13, 4
	mov	rax, qword ptr [rbx - 128]
	mov	rcx, qword ptr [rbx - 120]
	mov	rdx, qword ptr [rbx - 104]
	mov	rsi, qword ptr [rbx - 112]
	mov	qword ptr [rbx + 112], rsi
	mov	qword ptr [rbx + 120], rdx
	mov	qword ptr [rbx + 96], rax
	mov	qword ptr [rbx + 104], rcx
	mov	r11, r15
.LBB5_1785:                             # %OP7701.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	lea	rbx, [r13 + 1]
	mov	r12, r13
	shl	r12, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	rax, qword ptr [r11 + r12 - 40]
	mov	rcx, qword ptr [r11 + r12 - 64]
	mov	rdx, qword ptr [r11 + r12 - 56]
	mov	rsi, qword ptr [r11 + r12 - 48]
	mov	r15, rbx
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 16], rsi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 24], rax
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	rdi, qword ptr [r11 + r12 - 32]
	mov	r8, qword ptr [r11 + r12 - 16]
	mov	r9, qword ptr [r11 + r12 - 24]
	mov	r10, qword ptr [r11 + r12 - 8]
	mov	qword ptr [r11 + r12 + 88], r10
	mov	qword ptr [r11 + r12 + 80], r8
	mov	qword ptr [r11 + r12 + 72], r9
	mov	qword ptr [r11 + r12 + 64], rdi
	cmp	rcx, rdi
	sbb	rdx, r9
	sbb	rsi, r8
	sbb	rax, r10
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jb	.LBB5_2910
# %bb.1786:                             #   in Loop: Header=BB5_32 Depth=1
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_1787:                             # %OP7740.JUMPDEST
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 72]
	mov	rdx, qword ptr [r11 + rax - 80]
	mov	rsi, qword ptr [r11 + rax - 96]
	mov	r8, rsi
	sub	r8, qword ptr [r11 + rax - 64]
	mov	rdi, qword ptr [r11 + rax - 88]
	mov	qword ptr [r11 + rax - 64], rsi
	mov	r9, rdi
	sbb	r9, qword ptr [r11 + rax - 56]
	mov	r10, rdx
	sbb	r10, qword ptr [r11 + rax - 48]
	mov	qword ptr [r11 + rax - 56], rdi
	mov	qword ptr [r11 + rax - 48], rdx
	mov	r11, rcx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r11, qword ptr [rdx + rax - 40]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rax - 40], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rcx + rax - 128]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + rax - 120]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rdx + rax - 104]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rdx + rax - 112]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rax - 128], r8
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rax - 120], r9
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rax - 112], r10
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + rax - 104], r11
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rax - 80], r13
	mov	qword ptr [r11 + rax - 72], rdi
	mov	qword ptr [r11 + rax - 96], rsi
	mov	qword ptr [r11 + rax - 88], rcx
	add	rbx, -3
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1788:                             # %resize.i51446
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3048
# %bb.1789:                             # %resize.i51446.OP9230.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 24]
	mov	rcx, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax]
	mov	rax, qword ptr [rax + 8]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 176]      # 8-byte Reload
	jmp	.LBB5_1697
.LBB5_1790:                             # %resize.i51462
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_2145
# %bb.1791:                             # %resize.i51462.OP9237.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbx - 40]
	mov	rcx, qword ptr [rbx - 48]
	mov	r8, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 56]
	jmp	.LBB5_1699
.LBB5_1792:                             # %resize.i51478
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1176
# %bb.1793:                             # %resize.i51478.OP9247.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	jmp	.LBB5_1701
.LBB5_3077:                             # %resize.i51493
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_1702
	jmp	.LBB5_1176
.LBB5_3078:                             # %resize.i51508
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_1703
	jmp	.LBB5_2145
.LBB5_3063:                             # %resize.i51523
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	test	al, al
	je	.LBB5_1704
	jmp	.LBB5_3048
.LBB5_3102:                             # %resize.i51538
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_1705
	jmp	.LBB5_142
.LBB5_1794:                             # %resize.i51553
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 152], rdi      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 152]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 144]      # 8-byte Reload
	test	al, al
	je	.LBB5_1706
	jmp	.LBB5_3048
.LBB5_1795:                             # %resize.i51569
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_2145
# %bb.1796:                             # %resize.i51569.OP9284.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	r9, r12
	jmp	.LBB5_1707
.LBB5_1797:                             # %resize.i51584
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	mov	r14, r11
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r11, r14
	mov	r14, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, -1
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB5_1708
	jmp	.LBB5_3048
.LBB5_1798:                             # %resize.i51599
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB5_1709
	jmp	.LBB5_2448
.LBB5_1799:                             # %resize.i51615
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, r13
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_142
# %bb.1800:                             # %resize.i51615.OP9300.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rcx, qword ptr [rbx - 40]
	mov	rax, qword ptr [rbx - 48]
	mov	rdi, qword ptr [rbx - 64]
	mov	rdx, qword ptr [rbx - 56]
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_1710
.LBB5_1801:                             # %resize.i51845
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3096
# %bb.1802:                             # %resize.i51845.OP9669.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, r12
	jmp	.LBB5_1732
.LBB5_1803:                             # %resize.i51860
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_1733
	jmp	.LBB5_3001
.LBB5_3099:                             # %resize.i51875
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	rsi, rax
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	test	al, al
	je	.LBB5_1734
	jmp	.LBB5_142
.LBB5_3055:                             # %resize.i51890
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	rsi, rax
	mov	qword ptr [rbp - 112], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 136], r11      # 8-byte Spill
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	test	al, al
	je	.LBB5_1735
	jmp	.LBB5_3056
.LBB5_3100:                             # %resize.i51768
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	esi, 32
	mov	rdi, r14
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 168]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_1505
	jmp	.LBB5_3101
.LBB5_1804:                             # %resize.i51783
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	esi, 64
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, rcx
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, r14
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_1506
	jmp	.LBB5_2145
.LBB5_1805:                             # %resize.i51798
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 152], r14      # 8-byte Spill
	mov	r14, r9
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, r14
	mov	r14, qword ptr [rbp - 152]      # 8-byte Reload
	mov	r11, -1
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_1508
	jmp	.LBB5_3048
.LBB5_1806:                             # %resize.i51813
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_1509
	jmp	.LBB5_2145
.LBB5_1807:                             # %resize.i51829
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_1513
	jmp	.LBB5_2145
.LBB5_3095:                             # %resize.i50899
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, r12
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	test	al, al
	je	.LBB5_1719
	jmp	.LBB5_142
.LBB5_1808:                             # %resize.i50914
                                        #   in Loop: Header=BB5_32 Depth=1
	mov	r12, rsi
	mov	esi, 64
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, r12
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB5_1720
	jmp	.LBB5_142
.LBB5_1809:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1961
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1816
# %bb.1810:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2597
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1830
# %bb.1811:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2259
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1847
# %bb.1812:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2099
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1942
# %bb.1813:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2034
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2155
# %bb.1814:                             # %dynamic_jump_table
	add	rsi, -1962
	adc	rcx, -1
	adc	r13, -1
	adc	rdi, -1
	xor	eax, eax
	mov	r8d, 38
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	ecx, 0
	sbb	rcx, r13
	sbb	rax, rdi
	jb	.LBB5_3092
# %bb.1815:                             # %dynamic_jump_table
	lea	rax, [rip + .LJTI5_1]
	movsxd	rcx, dword ptr [rax + 4*rsi]
	add	rcx, rax
	jmp	rcx
.LBB5_1282:                             # %OP1141.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_325
.LBB5_1816:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1109
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1835
# %bb.1817:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 755
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1859
# %bb.1818:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 947
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1931
# %bb.1819:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 876
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2121
# %bb.1820:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 889
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2365
# %bb.1821:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 877
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1822
.LBB5_1225:                             # %OP417.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	lea	rsi, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
.LBB5_884:                              # %OP2101.PUSH1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_885:                              # %OP2101.PUSH1
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_886
.LBB5_142:
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1823:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3939
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1842
# %bb.1824:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3638
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1913
# %bb.1825:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3503
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2087
# %bb.1826:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3586
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2289
# %bb.1827:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3504
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1828
# %bb.1393:                             # %OP2021.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_179
.LBB5_1830:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3044
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1865
# %bb.1831:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2870
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1963
# %bb.1832:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2753
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2201
# %bb.1833:                             # %dynamic_jump_table
	mov	rax, rsi
	add	rax, -2627
	mov	r8, rcx
	adc	r8, -1
	mov	r9, r13
	adc	r9, -1
	mov	r10, rdi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 38
	cmp	rbx, rax
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB5_2453
# %bb.1834:                             # %dynamic_jump_table
	lea	rcx, [rip + .LJTI5_2]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	rax
.LBB5_1294:                             # %OP1507.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_134
.LBB5_1835:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1443
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1884
# %bb.1836:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1302
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1939
# %bb.1837:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1184
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2032
# %bb.1838:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1160
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2355
# %bb.1839:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1110
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1840
# %bb.1267:                             # %OP590.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_68
.LBB5_1842:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4145
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1917
# %bb.1843:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4055
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2090
# %bb.1844:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4100
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2292
# %bb.1845:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4056
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1846
# %bb.1399:                             # %OP2400.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rcx
	mov	r15, rcx
	jmp	.LBB5_595
.LBB5_1847:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2409
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1946
# %bb.1848:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2322
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2159
# %bb.1849:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2379
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2317
# %bb.1850:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2323
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1851
# %bb.1290:                             # %OP1358.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_678
.LBB5_1853:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4595
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1965
# %bb.1854:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4493
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2182
# %bb.1855:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4544
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2339
# %bb.1856:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4494
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1857
# %bb.1421:                             # %OP2665.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	xor	ecx, ecx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_630
.LBB5_1859:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 368
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1980
# %bb.1860:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 548
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2101
# %bb.1861:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 646
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2301
# %bb.1862:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 549
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1863
# %bb.1220:                             # %OP263.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_163
.LBB5_1865:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3226
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1985
# %bb.1866:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3305
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2117
# %bb.1867:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3356
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2308
# %bb.1868:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3306
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1869
# %bb.1328:                             # %OP1934.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_410
.LBB5_1871:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 13313
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_1990
# %bb.1872:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 13463
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2194
# %bb.1873:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 13612
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2350
# %bb.1874:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13464
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2513
# %bb.1875:                             # %OP6310.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1876:                             # %OP6313.PUSH21
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_109] # ymm0 = [0,0,4294967296,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 16]
	movabs	rdi, 4294967296
	mov	qword ptr [rbx + 16], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r14 + r15 + 16], rax
	mov	qword ptr [r14 + r15], rdx
	mov	qword ptr [r14 + r15 + 24], rcx
	mov	qword ptr [r14 + r15 + 8], rsi
	mov	rdx, rcx
	shld	rdx, rax, 32
	shr	rcx, 32
	mov	qword ptr [rbx], rdx
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	qword ptr [rbx + 8], rcx
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_98] # xmm1 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm1
	shr	rax, 32
	xor	ecx, ecx
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	al, al
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	je	.LBB5_2514
# %bb.1877:                             # %OP6321.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 2]
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_931
# %bb.1878:                             # %OP6323.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1879:                             # %OP6327.PUSH1
	add	r12, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1880:                             # %OP6332.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_110] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1881:                             # %OP6337.PUSH32
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r12       # 8-byte Spill
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_36] # xmm0 = [68,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1882:                             # %OP6342.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.1883:                             # %OP6343.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rcx
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], r8
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11], rcx
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r11 + 24], r10
	mov	qword ptr [r11 + 16], r8
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r11], rdi
	sub	rdi, rcx
	sbb	r9, rsi
	sbb	r8, rdx
	sbb	r10, rax
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_39] # xmm0 = [100,0]
	vmovdqu	ymmword ptr [r11], ymm0
	add	rdi, 100
	adc	r9, 0
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1884:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1657
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_1975
# %bb.1885:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1522
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2057
# %bb.1886:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1444
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1275
# %bb.1887:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1471
	or	rax, r13
	or	rax, rcx
	je	.LBB5_242
# %bb.1888:                             # %dynamic_jump_table
	xor	rsi, 1489
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1889:                             # %OP790.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	r10, qword ptr [r11 + rax - 32]
	mov	rsi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rax, r10
	add	rax, 32
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	jmp	.LBB5_244
.LBB5_1890:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 21834
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2005
# %bb.1891:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 21791
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2257
# %bb.1892:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 21792
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2533
# %bb.1893:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 21819
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2535
# %bb.1894:                             # %dynamic_jump_table
	xor	rsi, 21831
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1895:                             # %OP10357.JUMPDEST.loopexit53511
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r14
	shl	rax, 5
	mov	r10, qword ptr [r11 + rax - 40]
	mov	rcx, r11
	mov	r11, qword ptr [r11 + rax - 48]
	mov	r8, qword ptr [rcx + rax - 64]
	mov	r9, qword ptr [rcx + rax - 56]
	jmp	.LBB5_748
.LBB5_1896:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 19668
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2049
# %bb.1897:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 19746
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2275
# %bb.1898:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 19669
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_82
# %bb.1899:                             # %dynamic_jump_table
	xor	rsi, 19674
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1900:                             # %OP9186.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_77
.LBB5_1901:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 5421
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2080
# %bb.1902:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 5517
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2286
# %bb.1903:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 5422
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2466
# %bb.1904:                             # %OP3073.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	je	.LBB5_2468
	jmp	.LBB5_1955
.LBB5_1913:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3733
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2094
# %bb.1914:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3840
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2295
# %bb.1915:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3734
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1916
# %bb.1395:                             # %OP2179.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_657
.LBB5_1917:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4212
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2098
# %bb.1918:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4320
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2298
# %bb.1919:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4213
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1920
# %bb.1418:                             # %OP2498.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_310
.LBB5_1922:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 10369
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2109
# %bb.1923:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 10558
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2304
# %bb.1924:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 10370
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2479
# %bb.1925:                             # %OP5177.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	jmp	.LBB5_165
.LBB5_1926:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 20303
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2232
# %bb.1927:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 20354
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2306
# %bb.1928:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20304
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2877
# %bb.1929:                             # %dynamic_jump_table
	xor	rsi, 20335
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1930:                             # %OP9554.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 216]      # 8-byte Reload
	jmp	.LBB5_2881
.LBB5_1931:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1028
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2125
# %bb.1932:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1083
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2310
# %bb.1933:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1029
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1934
# %bb.1256:                             # %OP540.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	jmp	.LBB5_106
.LBB5_1935:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 8217
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2146
# %bb.1936:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 8313
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2312
# %bb.1937:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 8218
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2484
# %bb.1938:                             # %OP4201.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2150
.LBB5_1939:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1382
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2151
# %bb.1940:                             # %dynamic_jump_table
	add	rsi, -1383
	adc	rcx, -1
	adc	r13, -1
	adc	rdi, -1
	xor	eax, eax
	mov	r8d, 38
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	ecx, 0
	sbb	rcx, r13
	sbb	rax, rdi
	jb	.LBB5_3092
# %bb.1941:                             # %dynamic_jump_table
	lea	rax, [rip + .LJTI5_0]
	movsxd	rcx, dword ptr [rax + 4*rsi]
	add	rcx, rax
	jmp	rcx
.LBB5_1272:                             # %OP724.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	r13, [rax + 2]
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1273:                             # %OP727.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	shl	r13, 5
	movzx	r8d, byte ptr [r14 - 32]
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 8], rcx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	jmp	.LBB5_1259
.LBB5_1942:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2150
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2163
# %bb.1943:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2195
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2320
# %bb.1944:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2151
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1945
# %bb.1287:                             # %OP1234.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rcx
	mov	r15, rcx
	jmp	.LBB5_536
.LBB5_1946:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2516
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2167
# %bb.1947:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 2546
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2323
# %bb.1948:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2517
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_299
# %bb.1949:                             # %dynamic_jump_table
	xor	rsi, 2525
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1950:                             # %OP1459.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_374
.LBB5_1951:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 14620
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2171
# %bb.1952:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 14716
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2326
# %bb.1953:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 14621
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2500
# %bb.1954:                             # %OP6778.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	je	.LBB5_2502
	jmp	.LBB5_1955
.LBB5_1959:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 12009
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2179
# %bb.1960:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 12186
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2337
# %bb.1961:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12010
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2506
# %bb.1962:                             # %OP5789.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_305
.LBB5_1963:                             # %dynamic_jump_table
	mov	rax, rsi
	add	rax, -2922
	mov	r8, rcx
	adc	r8, -1
	mov	r9, r13
	adc	r9, -1
	mov	r10, rdi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 46
	cmp	rbx, rax
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB5_2251
# %bb.1964:                             # %dynamic_jump_table
	lea	rcx, [rip + .LJTI5_3]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	rax
.LBB5_1300:                             # %OP1704.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_186] # xmm0 = [1921,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
.LBB5_1301:                             # %OP5731.JUMPDEST
	lea	r14, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
.LBB5_1302:                             # %OP5731.JUMPDEST
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
.LBB5_1303:                             # %OP3919.PUSH20
	mov	rax, r14
	shl	rax, 5
	mov	dword ptr [rbx + 20], 0
	mov	qword ptr [rbx + 24], 0
	mov	rdi, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 16]
	mov	rsi, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	qword ptr [r15 + rax], rsi
	mov	qword ptr [r15 + rax + 16], r13
	mov	qword ptr [r15 + rax + 8], rcx
	mov	qword ptr [r15 + rax + 24], rdi
.LBB5_1304:                             # %dynamic_jump_table
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	r11, r15
	jmp	.LBB5_32
.LBB5_1965:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4767
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2186
# %bb.1966:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 4810
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2341
# %bb.1967:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4768
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_1968
# %bb.1448:                             # %OP2802.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 176], rax      # 8-byte Spill
	jmp	.LBB5_57
.LBB5_1970:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 13884
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jge	.LBB5_2190
# %bb.1971:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 13985
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2344
# %bb.1972:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13885
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2510
# %bb.1973:                             # %OP6462.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rsi, [rax - 1]
	mov	r12, rsi
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	je	.LBB5_2512
# %bb.1974:                             # %OP6466.PUSH1
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	jmp	.LBB5_1956
.LBB5_1975:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1792
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2061
# %bb.1976:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1658
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_257
# %bb.1977:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1741
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1278
# %bb.1978:                             # %dynamic_jump_table
	xor	rsi, 1759
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1979:                             # %OP1000.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	r14, rsi
	add	r14, 32
	mov	r15, rdx
	adc	r15, 0
	mov	r13, rcx
	adc	r13, 0
	mov	r12, r8
	adc	r12, 0
	jmp	.LBB5_266
.LBB5_1980:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 221
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2068
# %bb.1981:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 16
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 216]       # 8-byte Reload
	je	.LBB5_1214
# %bb.1982:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 124
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1215
# %bb.1983:                             # %dynamic_jump_table
	xor	rsi, 162
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1984:                             # %OP82.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	mov	rsi, qword ptr [r11 + rdx - 8]
	mov	rcx, qword ptr [r11 + rdx - 16]
	mov	rax, qword ptr [r11 + rdx - 32]
	mov	rbx, qword ptr [r11 + rdx - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_176
.LBB5_1985:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 3161
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2076
# %bb.1986:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3045
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1311
# %bb.1987:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3063
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1324
# %bb.1988:                             # %dynamic_jump_table
	xor	rsi, 3097
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1989:                             # %OP1805.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1315
.LBB5_1990:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 12954
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2084
# %bb.1991:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12687
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2598
# %bb.1992:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12795
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2599
# %bb.1993:                             # %dynamic_jump_table
	xor	rsi, 12912
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1994:                             # %OP6116.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_609
.LBB5_1995:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 11285
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2105
# %bb.1996:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11032
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2603
# %bb.1997:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11068
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2608
# %bb.1998:                             # %dynamic_jump_table
	xor	rsi, 11180
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1999:                             # %OP5459.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	lea	r13, [rcx + 2]
	mov	r12, rcx
	jmp	.LBB5_138
.LBB5_2000:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 6848
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2175
# %bb.2001:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 6616
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2616
# %bb.2002:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 6625
	or	rax, r13
	or	rax, rcx
	je	.LBB5_274
# %bb.2003:                             # %dynamic_jump_table
	xor	rsi, 6741
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2004:                             # %OP3619.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [rax + 2]
	lea	r12, [rax + 1]
	jmp	.LBB5_277
.LBB5_2005:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 21974
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2260
# %bb.2006:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 21835
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2534
# %bb.2007:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 21930
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2536
# %bb.2008:                             # %dynamic_jump_table
	xor	rsi, 21948
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2009:                             # %OP10424.JUMPDEST.preheader.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r10, rbx
	shl	r10, 5
	mov	r8, qword ptr [r11 + r10 - 72]
	mov	rcx, qword ptr [r11 + r10 - 80]
	mov	rsi, qword ptr [r11 + r10 - 96]
	mov	rdx, qword ptr [r11 + r10 - 88]
	mov	rax, qword ptr [r11 + r10 - 8]
	mov	rdi, qword ptr [r11 + r10 - 16]
	mov	r9, qword ptr [r11 + r10 - 24]
	mov	r10, qword ptr [r11 + r10 - 32]
	mov	r15, rbx
	mov	r14, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_735
.LBB5_2010:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 20982
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2278
# %bb.2011:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20854
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB5_1375
# %bb.2012:                             # %dynamic_jump_table
	xor	rsi, 20952
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2013:                             # %OP9843.JUMPDEST
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [r15 + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r9, r12
	mov	r12, r15
	shl	r12, 5
	mov	rdi, qword ptr [r11 + r12 - 32]
	mov	rsi, qword ptr [r11 + r12 - 24]
	mov	rdx, qword ptr [r11 + r12 - 16]
	mov	rcx, qword ptr [r11 + r12 - 8]
	mov	qword ptr [r11 + r12 + 24], rcx
	mov	qword ptr [r11 + r12 + 16], rdx
	mov	qword ptr [r11 + r12 + 8], rsi
	mov	qword ptr [r11 + r12], rdi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3000
# %bb.2014:                             # %OP9845.MLOAD.contd
	add	r12, r13
	mov	r8, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	r14, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx + 24]
	mov	rdi, qword ptr [r12 - 32]
	mov	rsi, qword ptr [r12 - 24]
	mov	rdx, qword ptr [r12 - 16]
	mov	rcx, qword ptr [r12 - 8]
	mov	qword ptr [r12 - 8], r9
	mov	qword ptr [r12 - 16], r14
	mov	qword ptr [r12 - 24], r10
	mov	qword ptr [r12 - 32], r8
	mov	r11, qword ptr [r12 - 64]
	mov	rbx, qword ptr [r12 - 56]
	dec	r15
	or	r10, r9
	mov	r9, r15
	shl	r9, 5
	or	r8, r14
	xor	r14d, r14d
	or	r8, r10
	mov	r8, qword ptr [r12 - 48]
	mov	r10, qword ptr [r12 - 40]
	mov	qword ptr [r12 - 40], rcx
	mov	qword ptr [r12 - 48], rdx
	mov	qword ptr [r12 - 56], rsi
	mov	qword ptr [r12 - 64], rdi
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [r12 + 8], rbx
	mov	qword ptr [r12], r11
	sete	r14b
	mov	qword ptr [r13 + r9], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + r9 + 8], xmm0
	mov	qword ptr [r13 + r9 + 24], 0
	mov	r11, r13
	je	.LBB5_31
# %bb.2015:                             # %OP9852.DUP1
	add	r9, r11
	mov	qword ptr [r9], rdi
	mov	qword ptr [r9 + 16], rdx
	mov	qword ptr [r9 + 8], rsi
	mov	qword ptr [r9 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rbx, r15
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 16], 0
	mov	qword ptr [r11 + rbx], 32
	mov	qword ptr [r11 + rbx + 24], 0
	mov	qword ptr [r11 + rbx + 8], 0
	mov	rax, rdi
	add	rax, 32
	mov	r8, rsi
	adc	r8, 0
	mov	r9, rdx
	adc	r9, 0
	mov	r10, rcx
	adc	r10, 0
	mov	qword ptr [r12 - 16], r9
	mov	qword ptr [r12 - 32], rax
	mov	qword ptr [r12 - 8], r10
	mov	qword ptr [r12 - 24], r8
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r13, r11
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2016:                             # %OP9857.MLOAD.contd
	add	rbx, r13
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rcx
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 32
	mov	qword ptr [r12 + 88], rsi
	mov	qword ptr [r12 + 80], rax
	mov	qword ptr [r12 + 72], rdx
	mov	qword ptr [r12 + 64], rcx
	xor	edi, edi
	mov	r8d, 31
	cmp	r8, rcx
	mov	ecx, 0
	sbb	rcx, rdx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	rdi, rsi
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jae	.LBB5_3031
# %bb.2017:
	mov	r11, r13
	jmp	.LBB5_2280
.LBB5_2018:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 15157
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2284
# %bb.2019:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 15010
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_426
# %bb.2020:                             # %dynamic_jump_table
	xor	rsi, 15148
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2021:                             # %OP7038.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_429
.LBB5_2022:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 7793
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2315
# %bb.2023:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 7671
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2496
# %bb.2024:                             # %OP3984.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_331
.LBB5_2025:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 20831
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2347
# %bb.2026:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20763
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2722
# %bb.2027:                             # %OP9734.JUMPDEST.preheader.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2839
.LBB5_2028:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 16111
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2352
# %bb.2029:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 15896
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_112
# %bb.2030:                             # %dynamic_jump_table
	xor	rsi, 16004
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2031:                             # %OP7386.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 2]
	lea	r13, [rax + 1]
	jmp	.LBB5_113
.LBB5_2032:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 1251
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2358
# %bb.2033:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1185
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2034
# %bb.1268:                             # %OP629.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_152
.LBB5_2036:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 6115
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2361
# %bb.2037:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 5874
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2520
# %bb.2038:                             # %OP3308.JUMPDEST.loopexit
	mov	r15, r12
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_227
.LBB5_2039:                             # %dynamic_jump_table
	add	rsi, -9528
	adc	rcx, -1
	adc	r13, -1
	adc	rdi, -1
	xor	eax, eax
	mov	r8d, 34
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	ecx, 0
	sbb	rcx, r13
	sbb	rax, rdi
	jb	.LBB5_3092
# %bb.2040:                             # %dynamic_jump_table
	lea	rax, [rip + .LJTI5_7]
	movsxd	rcx, dword ptr [rax + 4*rsi]
	add	rcx, rax
	jmp	rcx
.LBB5_2041:                             # %OP4816.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_549
.LBB5_2042:                             # %dynamic_jump_table
	xor	eax, eax
	mov	r8d, 18572
	cmp	r8, rsi
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, r13
	sbb	rax, rdi
	jl	.LBB5_2383
# %bb.2043:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 18504
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2578
# %bb.2044:                             # %OP8530.JUMPDEST.preheader.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2439
.LBB5_2045:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11520
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2537
# %bb.2046:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11530
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2539
# %bb.2047:                             # %dynamic_jump_table
	xor	rsi, 11616
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2048:                             # %OP5615.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2540
.LBB5_2049:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 19519
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2542
# %bb.2050:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 19587
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2553
# %bb.2051:                             # %dynamic_jump_table
	xor	rsi, 19655
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2052:                             # %OP9175.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_76
.LBB5_2053:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 8854
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2552
# %bb.2054:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 8992
	or	rax, r13
	or	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB5_2554
# %bb.2055:                             # %dynamic_jump_table
	xor	rsi, 9096
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2056:                             # %OP4595.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r15d, dword ptr [rcx + 164]
	movbe	rax, qword ptr [rcx + 156]
	movbe	r12, qword ptr [rcx + 148]
	mov	rdx, r12
	shld	rdx, rax, 32
	bswap	r15
	shrd	r15, rax, 32
	shr	r12, 32
	xor	eax, eax
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rcx + 3]
	jmp	.LBB5_367
.LBB5_2057:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1523
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_246
# %bb.2058:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1606
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1277
# %bb.2059:                             # %dynamic_jump_table
	xor	rsi, 1624
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2060:                             # %OP895.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	r14, rsi
	add	r14, 32
	mov	r15, rdx
	adc	r15, 0
	mov	r13, rcx
	adc	r13, 0
	mov	r12, r8
	adc	r12, 0
	jmp	.LBB5_255
.LBB5_2061:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1793
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1279
# %bb.2062:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1913
	or	rax, r13
	or	rax, rcx
	je	.LBB5_369
# %bb.2063:                             # %dynamic_jump_table
	xor	rsi, 1921
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1280:                             # %OP1114.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	r13, [rax + 2]
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1281:                             # %OP1117.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	shl	r13, 5
	mov	eax, dword ptr [r14 - 16]
	mov	r8, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	qword ptr [r14 - 8], rcx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	qword ptr [r12 + r13 + 8], rsi
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13], rdi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	0
	push	rax
	jmp	.LBB5_1260
.LBB5_2064:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 18624
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2563
# %bb.2065:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 18646
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2569
# %bb.2066:                             # %dynamic_jump_table
	xor	rsi, 18755
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2067:                             # %OP8681.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_8
.LBB5_2068:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 222
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1216
# %bb.2069:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 260
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1217
# %bb.2070:                             # %dynamic_jump_table
	xor	rsi, 331
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2071:                             # %OP161.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	jmp	.LBB5_303
.LBB5_2072:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 16234
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2570
# %bb.2073:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 16280
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2656
# %bb.2074:                             # %dynamic_jump_table
	xor	rsi, 16388
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2075:                             # %OP7555.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 2]
	lea	r15, [rax + 1]
	jmp	.LBB5_2657
.LBB5_2076:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3162
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_304
# %bb.2077:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3170
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1325
# %bb.2078:                             # %dynamic_jump_table
	xor	rsi, 3192
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2079:                             # %OP1880.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_513
.LBB5_2080:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 5316
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2574
# %bb.2081:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 5326
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2576
# %bb.2082:                             # %dynamic_jump_table
	xor	rsi, 5412
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2083:                             # %OP3067.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2577
.LBB5_2084:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12955
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1335
# %bb.2085:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13089
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2600
# %bb.2086:                             # %dynamic_jump_table
	xor	rsi, 13197
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_1338
	jmp	.LBB5_3092
.LBB5_2087:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3408
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1333
# %bb.2088:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3437
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1357
# %bb.2089:                             # %dynamic_jump_table
	xor	rsi, 3459
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1360:                             # %OP2000.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1361
.LBB5_2090:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3940
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1397
# %bb.2091:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3962
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1398
# %bb.2092:                             # %dynamic_jump_table
	xor	rsi, 4034
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2093:                             # %OP2385.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_593
.LBB5_2094:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3639
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1394
# %bb.2095:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3704
	or	rax, r13
	or	rax, rcx
	je	.LBB5_490
# %bb.2096:                             # %dynamic_jump_table
	xor	rsi, 3712
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2097:                             # %OP2164.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_655
.LBB5_2098:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4146
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1401
# %bb.2099:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4154
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1404
# %bb.2100:                             # %dynamic_jump_table
	xor	rsi, 4176
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1408:                             # %OP2484.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1409
.LBB5_1401:                             # %OP2465.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovdqu	ymmword ptr [r11 + rcx], ymm0
.LBB5_1402:                             # %OP6694.JUMPDEST
	lea	r8, [rax + 1]
	shl	rax, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_62] # ymm0 = [1334235591823946793,17506911942776287085,12466797459648398990,1552346174029726346]
.LBB5_1403:                             # %dynamic_jump_table
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rcx, qword ptr [r11 + rax - 24]
	mov	rdi, qword ptr [r11 + rax - 8]
	mov	r13, qword ptr [r11 + rax - 16]
	mov	rax, r8
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	shl	r8, 5
	mov	qword ptr [r11 + r8 + 16], r13
	mov	qword ptr [r11 + r8 + 24], rdi
	mov	qword ptr [r11 + r8], rsi
	mov	qword ptr [r11 + r8 + 8], rcx
	jmp	.LBB5_445
.LBB5_2101:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 369
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1218
# %bb.2102:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 429
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1219
# %bb.2103:                             # %dynamic_jump_table
	xor	rsi, 467
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2104:                             # %OP225.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_45
.LBB5_2105:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11286
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2604
# %bb.2106:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11424
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2606
# %bb.2107:                             # %dynamic_jump_table
	xor	rsi, 11434
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2108:                             # %OP5525.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	je	.LBB5_2538
	jmp	.LBB5_1955
.LBB5_2109:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 9967
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2609
# %bb.2110:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 10108
	or	rax, r13
	or	rax, rcx
	je	.LBB5_683
# %bb.2111:                             # %dynamic_jump_table
	xor	rsi, 10220
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2112:                             # %OP5118.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [r10 + 2]
	jmp	.LBB5_686
.LBB5_2113:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 9586
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2610
# %bb.2114:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 9722
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2612
# %bb.2115:                             # %dynamic_jump_table
	xor	rsi, 9737
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2116:                             # %OP4923.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_2740
.LBB5_2117:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3227
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1326
# %bb.2118:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3249
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1327
# %bb.2119:                             # %dynamic_jump_table
	xor	rsi, 3284
	or	rsi, r13
	or	rsi, rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jne	.LBB5_3092
# %bb.2120:                             # %OP1919.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_409
.LBB5_2121:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 756
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1222
# %bb.2122:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 794
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1223
# %bb.2123:                             # %dynamic_jump_table
	xor	rsi, 843
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2124:                             # %OP401.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	jmp	.LBB5_48
.LBB5_2125:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 948
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1238
# %bb.2126:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 993
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1250
# %bb.2127:                             # %dynamic_jump_table
	xor	rsi, 1007
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2128:                             # %OP525.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_104
.LBB5_2129:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 17777
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2673
# %bb.2130:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 17887
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2674
# %bb.2131:                             # %dynamic_jump_table
	xor	rsi, 17899
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2132:                             # %OP8233.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [r10 + 1]
	mov	rax, r10
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	rax, [r10 + 2]
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	qword ptr [rbp - 184], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r13, r11
	mov	rbx, r10
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3080
# %bb.2133:                             # %OP8236.MLOAD.contd
	add	r15, r13
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	mov	qword ptr [r15 + 8], rsi
	lea	r14, [rbx + 3]
	mov	r11, qword ptr [rbp - 144]      # 8-byte Reload
	shl	r11, 5
	movabs	rax, 7020072847491925187
	mov	qword ptr [r13 + r11 + 16], rax
	movabs	r8, 7389765400633884136
	mov	qword ptr [r13 + r11], r8
	movabs	r10, -3415473885159550854
	mov	qword ptr [r13 + r11 + 24], r10
	movabs	r9, 2511005646928131014
	mov	qword ptr [r13 + r11 + 8], r9
	lea	r15, [rbx + 4]
	mov	qword ptr [rbp - 176], r14      # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 16], 0
	mov	qword ptr [r13 + r14], 32
	mov	qword ptr [r13 + r14 + 24], 0
	mov	qword ptr [r13 + r14 + 8], 0
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13 + r15], ymm0
	add	rbx, 5
	mov	qword ptr [rbp - 152], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r13 + rbx + 24], rcx
	mov	qword ptr [r13 + rbx + 8], rsi
	mov	qword ptr [r13 + rbx + 16], rdx
	mov	qword ptr [r13 + rbx], rdi
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + r15 + 8], rsi
	mov	qword ptr [r13 + r15 + 24], rcx
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15], rdi
	mov	qword ptr [r13 + r11 + 8], rsi
	mov	qword ptr [r13 + r11], rdi
	mov	qword ptr [r13 + r11 + 24], rcx
	mov	qword ptr [r13 + r11 + 16], rdx
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_78] # ymm1 = [7389765400633884136,2511005646928131014,7020072847491925187,15031270188550000762]
	vmovdqu	ymmword ptr [r13 + r15], ymm1
	vmovdqu	ymmword ptr [r13 + r14], ymm1
	vmovdqu	ymmword ptr [r13 + r15], ymm0
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	vmovdqu	ymmword ptr [r13 + r11], ymm0
	mov	qword ptr [r13 + r15 + 24], rcx
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15 + 8], rsi
	mov	qword ptr [r13 + r15], rdi
	sub	rsp, 8
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3048
# %bb.2134:                             # %OP8246.PUSH20
	mov	r12, qword ptr [rbp - 112]      # 8-byte Reload
	add	r12, r13
	add	r14, r13
	add	r15, r13
	add	rbx, r13
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 - 208]
	mov	r8, qword ptr [r12 - 224]
	mov	r9, qword ptr [r12 - 216]
	mov	rcx, qword ptr [r12 - 200]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	eax, eax
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], 0
	mov	r10, qword ptr [r12 + 40]
	mov	r11, qword ptr [r12 + 56]
	mov	r13, qword ptr [r12 + 32]
	mov	rax, qword ptr [r12 + 48]
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r13
	mov	qword ptr [rbx + 24], r11
	mov	qword ptr [rbx + 8], r10
	mov	rdi, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 16]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	qword ptr [r12 + 192], rdi
	add	rdi, r13
	mov	qword ptr [r12 + 200], rsi
	adc	rsi, r10
	mov	qword ptr [r12 + 208], rdx
	adc	rdx, rax
	mov	qword ptr [r12 + 216], rcx
	adc	rcx, r11
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2135:                             # %OP8254.DUP10
	mov	rax, qword ptr [r12 - 176]
	mov	r8, qword ptr [r12 - 192]
	mov	r9, qword ptr [r12 - 184]
	mov	r10, qword ptr [r12 - 168]
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	and	r9, qword ptr [r14 + 8]
	and	r10, qword ptr [r14 + 24]
	and	r8, qword ptr [r14]
	and	rax, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r12 + 56]
	mov	rdi, qword ptr [r12 + 32]
	mov	rsi, qword ptr [r12 + 40]
	mov	rdx, qword ptr [r12 + 48]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbp - 136], rbx      # 8-byte Spill
	mov	qword ptr [rbx + 8], rsi
	add	rdi, 96
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jne	.LBB5_3048
# %bb.2136:                             # %OP8260.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_2] # xmm0 = [128,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	add	rdi, 128
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [r12 - 160]
	mov	rax, qword ptr [r12 - 144]
	mov	r9, qword ptr [r12 - 152]
	mov	r10, qword ptr [r12 - 136]
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3048
# %bb.2137:                             # %OP8266.PUSH1
	mov	rbx, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_55] # xmm0 = [160,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	add	rdi, 160
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [r12 - 128]
	mov	rax, qword ptr [r12 - 112]
	mov	r9, qword ptr [r12 - 120]
	mov	r10, qword ptr [r12 - 104]
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3048
# %bb.2138:                             # %OP8272.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_56] # xmm0 = [192,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdx, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	add	rdi, 192
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [rbx - 96]
	mov	rax, qword ptr [rbx - 80]
	mov	r9, qword ptr [rbx - 88]
	mov	r10, qword ptr [rbx - 72]
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	sub	rsp, 8
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3048
# %bb.2139:                             # %OP8278.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_51] # xmm0 = [224,0,0,0]
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdx, qword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	r11, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	add	rdi, 224
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	r9, qword ptr [rbx - 56]
	mov	rax, qword ptr [rbx - 40]
	mov	r8, qword ptr [rbx - 64]
	mov	r10, qword ptr [rbx - 48]
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	sub	rsp, 8
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1151
# %bb.2140:                             # %OP8285.DUP4
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3050
# %bb.2141:                             # %OP8286.MLOAD.contd
	mov	r8, rbx
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	rbx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	r9, qword ptr [r8 + 40]
	mov	rax, qword ptr [r8 + 56]
	mov	r11, r8
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	r8, qword ptr [r8 + 32]
	mov	r10, qword ptr [r11 + 48]
	mov	qword ptr [r11 + 208], r10
	mov	qword ptr [r11 + 192], r8
	mov	qword ptr [r11 + 216], rax
	mov	qword ptr [r11 + 200], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [r14]
	mov	r12, qword ptr [r14 + 8]
	mov	qword ptr [rbp - 168], r12      # 8-byte Spill
	mov	r12, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 160], r12      # 8-byte Spill
	mov	r12, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 152], r12      # 8-byte Spill
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14], rdi
	mov	qword ptr [rbx], r11
	add	r8, r11
	mov	r11, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rbx + 8], r11
	adc	r9, r11
	mov	r11, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [rbx + 16], r11
	adc	r10, r11
	mov	r11, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbx + 24], r11
	adc	rax, r11
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rdi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	rbx, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB5_1151
# %bb.2142:                             # %OP8295.PUSH2
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	add	r11, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdi, qword ptr [r14 + 24]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	r9, qword ptr [rbx + 40]
	mov	rax, qword ptr [rbx + 56]
	mov	r8, qword ptr [rbx + 32]
	mov	r10, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 32], rdx
	mov	qword ptr [rbx + 56], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], rax
	add	r8, 256
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], rax
	mov	r15, qword ptr [r11]
	mov	rsi, qword ptr [r11 + 16]
	mov	rdi, qword ptr [r11 + 8]
	mov	rdx, qword ptr [r11 + 24]
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r14 + 24], rdx
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14 + 8], rdi
	mov	qword ptr [r14], r15
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rdx
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	rsi, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], rdi
	mov	rdi, qword ptr [rbx]
	mov	qword ptr [rbx], r15
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14], rdi
	sub	rsp, 8
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3080
# %bb.2143:                             # %OP8302.DUP1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rbx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3048
# %bb.2144:                             # %OP8303.MLOAD.contd
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], rcx
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdi, qword ptr [r14 + 8]
	mov	r8, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], rdi
	add	r9, qword ptr [r15]
	adc	rdi, qword ptr [r15 + 8]
	adc	r10, qword ptr [r15 + 16]
	adc	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15], r9
	mov	rdi, r12
	mov	rsi, r14
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	je	.LBB5_2402
.LBB5_2145:
	mov	rcx, qword ptr [rbp - 184]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_2146:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 8018
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_217
# %bb.2147:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 8122
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2615
# %bb.2148:                             # %dynamic_jump_table
	xor	rsi, 8132
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2149:                             # %OP4159.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	jne	.LBB5_2989
.LBB5_2150:                             # %OP4201.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 128]
	mov	rdx, qword ptr [r11 + rax - 120]
	mov	rsi, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_152] # xmm0 = [8228,0,0,0]
	jmp	.LBB5_430
.LBB5_2151:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1303
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1270
# %bb.2152:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1332
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1271
# %bb.2153:                             # %dynamic_jump_table
	xor	rsi, 1354
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2154:                             # %OP709.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r15 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_195
.LBB5_2155:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2035
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1284
# %bb.2156:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2043
	or	rax, r13
	or	rax, rcx
	je	.LBB5_212
# %bb.2157:                             # %dynamic_jump_table
	xor	rsi, 2065
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2158:                             # %OP1187.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_214
.LBB5_2159:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2260
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_542
# %bb.2160:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2278
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1289
# %bb.2161:                             # %dynamic_jump_table
	xor	rsi, 2312
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2162:                             # %OP1349.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_546
.LBB5_2163:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2100
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1285
# %bb.2164:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2122
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1286
# %bb.2165:                             # %dynamic_jump_table
	xor	rsi, 2129
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2166:                             # %OP1219.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_534
.LBB5_2167:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2410
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1291
# %bb.2168:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2439
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1292
# %bb.2169:                             # %dynamic_jump_table
	xor	rsi, 2461
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2170:                             # %OP1426.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_495
.LBB5_2171:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 14417
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2614
# %bb.2172:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 14473
	or	rax, r13
	or	rax, rcx
	je	.LBB5_313
# %bb.2173:                             # %dynamic_jump_table
	xor	rsi, 14611
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2174:                             # %OP6772.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_316
.LBB5_2175:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 6849
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2617
# %bb.2176:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 6957
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2623
# %bb.2177:                             # %dynamic_jump_table
	xor	rsi, 7065
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2178:                             # %OP3751.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [rax + 2]
	lea	r12, [rax + 1]
	jmp	.LBB5_280
.LBB5_2179:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11831
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2618
# %bb.2180:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11859
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2624
# %bb.2181:                             # %dynamic_jump_table
	xor	rsi, 11997
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_2626
	jmp	.LBB5_3092
.LBB5_2182:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4351
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1419
# %bb.2183:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4386
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1420
# %bb.2184:                             # %dynamic_jump_table
	xor	rsi, 4409
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2185:                             # %OP2612.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_425
.LBB5_2186:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4596
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1439
# %bb.2187:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4618
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1445
# %bb.2188:                             # %dynamic_jump_table
	xor	rsi, 4647
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2189:                             # %OP2731.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_50
.LBB5_2190:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13779
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2518
# %bb.2191:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13789
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2634
# %bb.2192:                             # %dynamic_jump_table
	xor	rsi, 13875
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2193:                             # %OP6456.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2635
.LBB5_2194:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13314
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_1362
# %bb.2195:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13426
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2636
# %bb.2196:                             # %dynamic_jump_table
	xor	rsi, 13459
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_2283
	jmp	.LBB5_3092
.LBB5_2197:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12339
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2641
# %bb.2198:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12349
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2652
# %bb.2199:                             # %dynamic_jump_table
	xor	rsi, 12435
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2200:                             # %OP5936.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2653
.LBB5_2201:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2754
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_469
# %bb.2202:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2772
	or	rax, r13
	or	rax, rcx
	je	.LBB5_1297
# %bb.2203:                             # %dynamic_jump_table
	xor	rsi, 2806
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2204:                             # %OP1618.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_473
.LBB5_2205:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 15254
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2661
# %bb.2206:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 15340
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2663
# %bb.2207:                             # %dynamic_jump_table
	xor	rsi, 15357
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_632
	jmp	.LBB5_3092
.LBB5_2208:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 6331
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2708
# %bb.2209:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 6446
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2712
# %bb.2210:                             # %dynamic_jump_table
	xor	rsi, 6580
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2211:                             # %OP3559.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_354
.LBB5_2212:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 17333
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2711
# %bb.2213:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 17449
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2713
# %bb.2214:                             # %dynamic_jump_table
	xor	rsi, 17456
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
.LBB5_2215:                             # %OP8020.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_142] # ymm0 = [18446744073709551615,18446744073709551615,18446744073709551615,9223372036854775807]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r14, [rax + 2]
	mov	rax, qword ptr [r11 + rbx - 32]
	mov	rcx, qword ptr [r11 + rbx - 24]
	mov	rdx, qword ptr [r11 + rbx - 16]
	mov	rsi, qword ptr [r11 + rbx - 8]
	mov	r15, r12
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 24], rsi
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15 + 8], rcx
	mov	qword ptr [r11 + r15], rax
	xor	eax, eax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx + 24], 0
	test	rsi, rsi
	setns	al
	mov	qword ptr [r11 + rbx], rax
	jns	.LBB5_2725
# %bb.2216:                             # %OP8027.PUSH1
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3097
# %bb.2217:                             # %OP8028.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r15, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3097
# %bb.2218:                             # %OP8032.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r9
	mov	qword ptr [r11 + r12 + 8], rsi
	mov	qword ptr [r11 + r12 + 24], rcx
	mov	qword ptr [r11 + r12 + 16], rdx
	mov	qword ptr [r11 + r12], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2219:                             # %OP8043.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_42] # xmm0 = [42,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 42
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2220:                             # %OP8046.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_143] # xmm0 = [22608,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_42] # xmm0 = [42,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_3076
# %bb.2221:                             # %OP8053.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3000
# %bb.2222:                             # %OP8059.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2223:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 17014
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2718
# %bb.2224:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 17144
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2719
# %bb.2225:                             # %dynamic_jump_table
	xor	rsi, 17158
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2226:                             # %OP7876.JUMPDEST.preheader.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, rbx
	shl	rdx, 5
	mov	rax, qword ptr [r11 + rdx - 40]
	mov	rcx, qword ptr [r11 + rdx - 48]
	mov	rsi, qword ptr [r11 + rdx - 64]
	mov	rdx, qword ptr [r11 + rdx - 56]
	jmp	.LBB5_2789
.LBB5_2227:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 7173
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2742
# %bb.2228:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 7192
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2743
# %bb.2229:                             # %dynamic_jump_table
	xor	rsi, 7212
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2230:                             # %OP3822.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rax
	shl	r14, 5
	mov	rdi, qword ptr [r11 + r14 - 224]
	mov	rsi, qword ptr [r11 + r14 - 216]
	mov	rdx, qword ptr [r11 + r14 - 208]
	mov	rcx, qword ptr [r11 + r14 - 200]
	mov	qword ptr [r11 + r14 - 8], rcx
	mov	qword ptr [r11 + r14 - 16], rdx
	mov	qword ptr [r11 + r14 - 24], rsi
	mov	qword ptr [r11 + r14 - 32], rdi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r12
	mov	r15, r11
	mov	r12, rax
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_751
# %bb.2231:                             # %OP3825.MLOAD.contd
	add	r14, r15
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 - 16], 0
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 - 32], 7232
	mov	qword ptr [r14 - 24], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14], 7
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r14 + 48], rsi
	mov	qword ptr [r14 + 56], rdx
	mov	qword ptr [r14 + 32], rax
	mov	qword ptr [r14 + 40], rcx
	mov	r13, r12
	add	r13, 3
	mov	qword ptr [r14 + 80], 0
	mov	qword ptr [r14 + 88], 0
	mov	qword ptr [r14 + 64], 32
	mov	qword ptr [r14 + 72], 0
	mov	rdi, qword ptr [r14 - 208]
	mov	r8, qword ptr [r14 - 224]
	mov	r9, qword ptr [r14 - 216]
	mov	r10, qword ptr [r14 - 200]
	jmp	.LBB5_2745
.LBB5_2232:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20148
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2748
# %bb.2233:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20235
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2757
# %bb.2234:                             # %dynamic_jump_table
	xor	rsi, 20259
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2235:                             # %OP9491.JUMPDEST.loopexit56158
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2236
.LBB5_2241:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 21384
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2858
# %bb.2242:                             # %dynamic_jump_table
	xor	rsi, 21445
	or	rsi, r13
	or	rsi, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3092
# %bb.2243:                             # %OP10073.JUMPDEST.loopexit53509
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rsi, r14
	shl	rsi, 5
	mov	rax, qword ptr [r11 + rsi - 72]
	mov	rcx, qword ptr [r11 + rsi - 80]
	mov	rdx, qword ptr [r11 + rsi - 96]
	mov	rdi, qword ptr [r11 + rsi - 88]
	jmp	.LBB5_2244
.LBB5_2251:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2871
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB5_1299
# %bb.2252:                             # %dynamic_jump_table
	xor	rsi, 2893
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2253:                             # %OP1689.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_650
.LBB5_2254:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 7502
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2528
# %bb.2255:                             # %dynamic_jump_table
	xor	rsi, 7530
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2256:                             # %OP3940.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_328
.LBB5_2257:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 21709
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2532
# %bb.2258:                             # %dynamic_jump_table
	xor	rsi, 21774
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2259:                             # %OP10313.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_289
.LBB5_2260:                             # %dynamic_jump_table
	add	rsi, -21975
	adc	rcx, -1
	adc	r13, -1
	adc	rdi, -1
	cmp	rsi, 2
	sbb	rcx, 0
	sbb	r13, 0
	sbb	rdi, 0
	jae	.LBB5_3092
# %bb.2261:                             # %OP10446.JUMPDEST.preheader.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_744
.LBB5_2262:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 19912
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2676
# %bb.2263:                             # %dynamic_jump_table
	xor	rsi, 20000
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2264:                             # %OP9350.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rsi + 104]
	mov	rcx, qword ptr [rsi + 96]
	mov	rax, qword ptr [rsi + 80]
	mov	rsi, qword ptr [rsi + 88]
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rdi + 2]
	lea	r15, [rdi + 1]
	jmp	.LBB5_2677
.LBB5_2265:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 14148
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2601
# %bb.2266:                             # %dynamic_jump_table
	xor	rsi, 14193
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2267:                             # %OP6595.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_723
.LBB5_2268:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 11682
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2457
# %bb.2269:                             # %OP5653.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_383
.LBB5_2270:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 14833
	or	rax, r13
	or	rax, rcx
	je	.LBB5_2660
# %bb.2271:                             # %dynamic_jump_table
	xor	rsi, 14954
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2272:                             # %OP6965.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, r10
	shl	rdx, 5
	mov	r14, qword ptr [r11 + rdx - 48]
	mov	r8, qword ptr [r11 + rdx - 64]
	mov	r9, qword ptr [r11 + rdx - 56]
	mov	rcx, qword ptr [r11 + rdx - 8]
	mov	rax, qword ptr [r11 + rdx - 16]
	mov	rsi, qword ptr [r11 + rdx - 24]
	mov	rdx, qword ptr [r11 + rdx - 32]
	jmp	.LBB5_703
.LBB5_2273:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 7459
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2459
# %bb.2274:                             # %OP3916.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_370
.LBB5_2275:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 19747
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_82
# %bb.2276:                             # %dynamic_jump_table
	xor	rsi, 19792
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2277:                             # %OP9224.JUMPDEST.loopexit
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB5_2814
.LBB5_2278:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20983
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3091
# %bb.2279:                             # %OP9867.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2280:                             # %OP9867.JUMPDEST
	lea	r12, [r15 - 1]
	lea	r13, [r15 - 2]
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	shl	r13, 5
	mov	rcx, qword ptr [r11 + r13 + 24]
	mov	rdx, qword ptr [r11 + r13 + 16]
	mov	rdi, qword ptr [r11 + r13]
	mov	rsi, qword ptr [r11 + r13 + 8]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3097
# %bb.2281:                             # %OP9869.MLOAD.contd
	add	r13, r14
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13 + 24], rdx
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 8], rcx
	or	rcx, rdx
	or	rax, rsi
	or	rax, rcx
	je	.LBB5_2971
# %bb.2282:
	mov	r11, r14
.LBB5_2283:                             # %OP6305.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_31
.LBB5_2284:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 15158
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2463
# %bb.2285:                             # %OP7044.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	je	.LBB5_2465
	jmp	.LBB5_1955
.LBB5_2286:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 5518
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2469
# %bb.2287:                             # %OP3121.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rax, qword ptr [r11 + r14]
	mov	rcx, qword ptr [r11 + r14 + 8]
	or	rcx, qword ptr [r11 + r14 + 24]
	or	rax, qword ptr [r11 + r14 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rdx
	mov	qword ptr [r11 + r14 + 24], 0
	jne	.LBB5_3010
# %bb.2288:
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jmp	.LBB5_2470
.LBB5_2289:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3587
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_182
# %bb.2290:                             # %dynamic_jump_table
	xor	rsi, 3605
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2291:                             # %OP2080.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, rsi
	add	rax, 32
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	jmp	.LBB5_184
.LBB5_2292:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4101
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2293
# %bb.1400:                             # %OP2432.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, rsi
	add	rax, 32
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	jmp	.LBB5_598
.LBB5_2295:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3841
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2296
# %bb.1396:                             # %OP2247.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, rsi
	add	rax, 32
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	jmp	.LBB5_660
.LBB5_2298:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4321
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_551
# %bb.2299:                             # %dynamic_jump_table
	xor	rsi, 4329
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2300:                             # %OP2570.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_700
.LBB5_2301:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 647
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2302
# %bb.1221:                             # %OP309.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	jmp	.LBB5_99
.LBB5_2304:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 10559
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2480
# %bb.2305:                             # %OP5238.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 2]
	lea	r15, [rax + 1]
	jmp	.LBB5_346
.LBB5_2306:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20355
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2482
# %bb.2307:                             # %OP9570.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_26
.LBB5_2308:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 3357
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2309
# %bb.1329:                             # %OP1956.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_608
.LBB5_2310:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1084
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_171
# %bb.2311:                             # %dynamic_jump_table
	xor	rsi, 1092
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1265:                             # %OP574.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	r13, [rax + 2]
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1266:                             # %OP577.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	rax, qword ptr [r14 - 8]
	mov	r8, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	r10, qword ptr [r14 - 16]
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 8], rcx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	shl	r13, 5
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13], rdi
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	qword ptr [r12 + r13 + 8], rsi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	rax
	push	r10
	jmp	.LBB5_1260
.LBB5_2312:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 8314
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2487
# %bb.2313:                             # %dynamic_jump_table
	xor	rsi, 8422
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2314:                             # %OP4293.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 2]
	lea	rdi, [rax + 1]
	jmp	.LBB5_2488
.LBB5_2315:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 7794
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2498
# %bb.2316:                             # %OP4038.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	lea	r13, [rcx + 2]
	mov	r12, rcx
	jmp	.LBB5_484
.LBB5_2317:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2380
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_164
# %bb.2318:                             # %dynamic_jump_table
	xor	rsi, 2388
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2319:                             # %OP1389.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_342
.LBB5_2320:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2196
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2321
# %bb.1288:                             # %OP1266.JUMPDEST.loopexit
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r12
	shl	rax, 5
	mov	r10, qword ptr [r11 + rax - 8]
	mov	rbx, qword ptr [r11 + rax - 16]
	mov	r15, qword ptr [r11 + rax - 24]
	mov	r13, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, r13
	add	rax, 32
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rax, r15
	adc	rax, 0
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	rax, rbx
	adc	rax, 0
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	rax, r10
	adc	rax, 0
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	jmp	.LBB5_539
.LBB5_2323:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 2547
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2324
# %bb.1293:                             # %OP1474.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_375
.LBB5_2326:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 14717
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2503
# %bb.2327:                             # %OP6826.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rsi, [rax - 1]
	mov	r12, rsi
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	je	.LBB5_2505
# %bb.2328:                             # %OP6830.PUSH1
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	jmp	.LBB5_2329
.LBB5_2337:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12187
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2508
# %bb.2338:                             # %OP5837.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_517
.LBB5_2339:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4545
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2340
# %bb.1423:                             # %OP2687.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	xor	ecx, ecx
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1424:                             # %OP2687.JUMPDEST
	shl	rdx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rdx], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r11 + rdx + 32], ymm0
	vmovups	ymmword ptr [r11 + rdx + 64], ymm0
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rsi, 3
	mov	rbx, rsi
	shl	rsi, 5
	mov	qword ptr [r11 + rsi + 16], rcx
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 8], rcx
	mov	qword ptr [r11 + rsi + 24], rcx
	mov	r14, rdx
	mov	r15, rax
	add	rax, -4
	mov	rdx, rcx
	adc	rdx, -1
	mov	rdi, rcx
	adc	rdi, -1
	adc	rcx, -1
	mov	qword ptr [r11 + r14 + 64], rax
	mov	qword ptr [r11 + r14 + 80], rdi
	mov	qword ptr [r11 + r14 + 72], rdx
	mov	qword ptr [r11 + r14 + 88], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rsi], ymm0
	mov	qword ptr [r11 + r14 + 152], rcx
	mov	qword ptr [r11 + r14 + 144], rdi
	mov	qword ptr [r11 + r14 + 136], rdx
	mov	qword ptr [r11 + r14 + 128], rax
	xor	r8d, r8d
	mov	r9d, 31
	cmp	r9, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	eax, 0
	sbb	rax, rdi
	sbb	r8, rcx
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	jb	.LBB5_1427
.LBB5_1425:                             # %OP2677.PUSH1
	add	r14, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [r14 + 128], ymm0
	jmp	.LBB5_378
.LBB5_2341:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 4811
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2342
# %bb.1449:                             # %OP2837.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 176], rax      # 8-byte Spill
	jmp	.LBB5_444
.LBB5_2344:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13986
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_390
# %bb.2345:                             # %dynamic_jump_table
	xor	rsi, 14124
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2346:                             # %OP6557.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_393
.LBB5_2347:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 20832
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2855
# %bb.2348:                             # %dynamic_jump_table
	xor	rsi, 20846
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2349:                             # %OP9803.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_531
.LBB5_2350:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 13613
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2515
# %bb.2351:                             # %OP6359.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_491
.LBB5_2352:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 16112
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_114
# %bb.2353:                             # %dynamic_jump_table
	xor	rsi, 16223
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2354:                             # %OP9175.JUMPDEST.sink.split.loopexit
	xor	eax, eax
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_74
.LBB5_2355:                             # %dynamic_jump_table
	mov	al, 1
	mov	r8, rsi
	xor	r8, 1161
	or	r8, r13
	or	rcx, rdi
	or	r8, rcx
	je	.LBB5_142
# %bb.2356:                             # %dynamic_jump_table
	xor	rsi, 1163
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2357:                             # %OP614.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_150
.LBB5_2358:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 1252
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2359
# %bb.1269:                             # %OP665.JUMPDEST.loopexit
	mov	r15, r12
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_226
.LBB5_2361:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 6116
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2522
# %bb.2362:                             # %OP3393.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [r10 + 1]
	mov	r13, r12
	jmp	.LBB5_232
.LBB5_2363:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 18866
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2527
# %bb.2364:                             # %OP8750.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1366
.LBB5_2365:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 890
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2366
# %bb.1226:                             # %OP425.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	r13, [rax + 2]
	vmovdqu	ymmword ptr [r11 + r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1227:                             # %OP428.MLOAD.contd
	add	r14, r15
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	lea	rax, [r8 + 3]
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 32
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	qword ptr [r15 + r13 + 8], 0
	lea	r12, [r8 + 4]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r13, rax
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 32
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12], rdi
	mov	qword ptr [r15 + r12 + 24], rcx
	mov	qword ptr [r15 + r12 + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1228:                             # %OP433.DUP4
	add	r13, r15
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1229:                             # %OP434.MLOAD.contd
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	add	rax, r15
	add	r12, r15
	mov	r15, rax
	mov	rax, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	r11, qword ptr [r14 + 40]
	mov	rbx, qword ptr [r14 + 56]
	mov	rcx, qword ptr [r14 + 32]
	mov	rax, qword ptr [r14 + 48]
	mov	rdi, qword ptr [r15]
	add	rdi, rcx
	mov	rsi, qword ptr [r15 + 8]
	adc	rsi, r11
	mov	rdx, qword ptr [r15 + 16]
	adc	rdx, rax
	mov	qword ptr [r14 + 176], rax
	mov	qword ptr [r14 + 160], rcx
	mov	rcx, qword ptr [r15 + 24]
	adc	rcx, rbx
	mov	qword ptr [r14 + 184], rbx
	mov	qword ptr [r14 + 168], r11
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	qword ptr [rbp - 104]           # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1230:                             # %OP439.DUP4
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	rdx, qword ptr [r14 - 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1231:                             # %OP440.MLOAD.contd
	mov	rdi, qword ptr [r14 + 56]
	mov	r8, qword ptr [r14 + 48]
	mov	r9, qword ptr [r14 + 32]
	mov	rdx, qword ptr [r14 + 40]
	mov	rax, qword ptr [r14]
	add	rax, r9
	mov	rcx, qword ptr [r14 + 8]
	adc	rcx, rdx
	mov	qword ptr [r14 + 8], rdx
	mov	rdx, qword ptr [r14 + 16]
	adc	rdx, r8
	mov	rsi, qword ptr [r14 + 24]
	adc	rsi, rdi
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 16], r8
	mov	r8, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	r9, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 24], rsi
	mov	r10, qword ptr [r15 + 8]
	mov	qword ptr [r15 + 8], rcx
	add	rdi, qword ptr [r14 - 32]
	adc	r10, qword ptr [r14 - 24]
	adc	r9, qword ptr [r14 - 16]
	adc	r8, qword ptr [r14 - 8]
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 16], r9
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13], rdi
	mov	r11, qword ptr [rbx]
	mov	r15, qword ptr [rbx + 8]
	mov	r13, qword ptr [rbx + 16]
	mov	rbx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rbx
	mov	qword ptr [r12 + 16], r13
	mov	qword ptr [r12 + 8], r15
	mov	qword ptr [r12], r11
	mov	qword ptr [r14 + 184], rbx
	mov	qword ptr [r14 + 176], r13
	mov	qword ptr [r14 + 168], r15
	mov	qword ptr [r14 + 160], r11
	mov	qword ptr [r14 + 216], rsi
	mov	qword ptr [r14 + 208], rdx
	mov	qword ptr [r14 + 200], rcx
	mov	qword ptr [r14 + 192], rax
	mov	qword ptr [r14 + 248], r8
	mov	qword ptr [r14 + 240], r9
	mov	qword ptr [r14 + 232], r10
	mov	qword ptr [r14 + 224], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 256], ymm0
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 9
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_1232
.LBB5_2367:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 15491
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2555
# %bb.2368:                             # %OP7188.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 2]
	lea	r13, [rax + 1]
	jmp	.LBB5_634
.LBB5_2369:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 16496
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2559
# %bb.2370:                             # %OP7599.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2659
.LBB5_2371:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 21232
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2564
# %bb.2372:                             # %OP9995.JUMPDEST
	mov	r10, rdx
	lea	rsi, [rdx - 1]
	mov	rax, rsi
	shl	rax, 5
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [r13 + rax]
	mov	rdx, qword ptr [r13 + rax + 8]
	or	rdx, qword ptr [r13 + rax + 24]
	or	rcx, qword ptr [r13 + rax + 16]
	or	rcx, rdx
	jne	.LBB5_2566
# %bb.2373:                             # %OP9998.PUSH1
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	add	rax, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r14, r12
	lea	r12, [r10 + 1]
	shl	r10, 5
	vmovdqu	ymmword ptr [r13 + r10], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r14
	mov	r15, r10
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3074
# %bb.2374:                             # %OP10000.MLOAD.contd
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	add	r15, r13
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r12 + 24], rax
	mov	qword ptr [r13 + r12 + 16], 0
	mov	qword ptr [r13 + r12], 0
	mov	qword ptr [r13 + r12 + 8], 0
	mov	qword ptr [r15 + 80], rdx
	mov	qword ptr [r15 + 64], rdi
	mov	qword ptr [r15 + 88], rcx
	mov	qword ptr [r15 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r14
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2375:                             # %OP10004.PUSH1
	add	r12, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 104], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 64], rdi
	mov	qword ptr [r15 + 72], rsi
	mov	qword ptr [r15 + 80], rdx
	mov	qword ptr [r15 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2376:                             # %OP10009.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_37] # xmm0 = [29,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 104], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 64], rdi
	mov	qword ptr [r15 + 72], rsi
	mov	qword ptr [r15 + 80], rdx
	mov	qword ptr [r15 + 88], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 29
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2377:                             # %OP10014.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_38] # ymm0 = [8390876135520468992,2336927775650443118,2333816150206477423,4712001552627495738]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 104], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 64], rdi
	mov	qword ptr [r15 + 72], rsi
	mov	qword ptr [r15 + 80], rdx
	mov	qword ptr [r15 + 88], rcx
	sub	rsp, 8
	movabs	rax, 4712001552627495738
	movabs	r10, 2333816150206477423
	movabs	r8, 8390876135520468992
	movabs	r9, 2336927775650443118
	push	r14
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2378:                             # %OP10019.SWAP1
	vmovdqa	xmm0, xmmword ptr [r15]
	vmovdqa	xmm1, xmmword ptr [r15 + 16]
	mov	rdi, qword ptr [r15 - 32]
	mov	rsi, qword ptr [r15 - 24]
	mov	rcx, qword ptr [r15 - 8]
	mov	rdx, qword ptr [r15 - 16]
	vmovdqa	xmmword ptr [r15 - 16], xmm1
	vmovdqa	xmmword ptr [r15 - 32], xmm0
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r14
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.2379:                             # %OP10020.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rcx, qword ptr [rbx + 16]
	mov	rax, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r9, qword ptr [r15 - 16]
	mov	r8, qword ptr [r15 - 32]
	mov	r10, qword ptr [r15 - 24]
	mov	r11, qword ptr [r15 - 8]
	mov	qword ptr [r15 - 8], rdi
	mov	qword ptr [r15 - 24], rdx
	mov	qword ptr [r15 - 16], rcx
	mov	qword ptr [r15 - 32], rax
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15 + 16], r9
	mov	qword ptr [r15], r8
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r12 + 24], r11
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], r9
	mov	qword ptr [r12], r8
	sub	r8, rax
	sbb	r10, rdx
	sbb	r9, rcx
	sbb	r11, rdi
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15 + 16], r9
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_39] # xmm0 = [100,0]
	vmovdqu	ymmword ptr [r12], ymm0
	add	r8, 100
	adc	r10, 0
	adc	r9, 0
	adc	r11, 0
	mov	qword ptr [r15 - 8], r11
	mov	qword ptr [r15 - 16], r9
	mov	qword ptr [r15 - 24], r10
	mov	qword ptr [r15 - 32], r8
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], rax
	mov	rdi, r14
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_3090
.LBB5_2380:
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_2381:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 10942
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2571
# %bb.2382:                             # %OP5370.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_300
.LBB5_2383:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 18573
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	je	.LBB5_2869
# %bb.2384:                             # %dynamic_jump_table
	xor	rsi, 18604
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2385:                             # %OP8612.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 216]      # 8-byte Reload
	jmp	.LBB5_2873
.LBB5_2386:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 18066
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2619
# %bb.2387:                             # %OP8327.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	jmp	.LBB5_402
.LBB5_2388:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 19285
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2621
# %bb.2389:                             # %OP8917.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 1]
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	add	rax, 2
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	qword ptr [rbp - 176], r13      # 8-byte Spill
	shl	r13, 5
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1171
# %bb.2390:                             # %OP8920.MLOAD.contd
	add	r13, r15
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	mov	qword ptr [r13 + 8], rsi
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	lea	r14, [r8 + 3]
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	shl	r11, 5
	movabs	rax, -819999302486723315
	mov	qword ptr [r15 + r11 + 16], rax
	movabs	r10, -2217103280690290073
	mov	qword ptr [r15 + r11], r10
	movabs	rax, 8970164247407462211
	mov	qword ptr [r15 + r11 + 24], rax
	movabs	r9, 5975438654008247698
	mov	qword ptr [r15 + r11 + 8], r9
	lea	r13, [r8 + 4]
	mov	qword ptr [rbp - 168], r14      # 8-byte Spill
	mov	rax, r14
	shl	rax, 5
	mov	qword ptr [r15 + rax + 16], 0
	mov	qword ptr [r15 + rax], 32
	mov	qword ptr [r15 + rax + 24], 0
	mov	qword ptr [r15 + rax + 8], 0
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	lea	r14, [r8 + 5]
	mov	qword ptr [rbp - 144], r14      # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r11 + 8], rsi
	mov	qword ptr [r15 + r11], rdi
	mov	qword ptr [r15 + r11 + 24], rcx
	mov	qword ptr [r15 + r11 + 16], rdx
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_54] # ymm1 = [16229640793019261543,5975438654008247698,17626744771222828301,8970164247407462211]
	vmovdqu	ymmword ptr [r15 + r13], ymm1
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	vmovdqu	ymmword ptr [r15 + rax], ymm1
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	mov	qword ptr [rbp - 136], r11      # 8-byte Spill
	vmovdqu	ymmword ptr [r15 + r11], ymm0
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	qword ptr [r15 + r13], rdi
	sub	rsp, 8
	mov	r8, r10
	push	r12
	movabs	rax, 8970164247407462211
	push	rax
	movabs	rax, -819999302486723315
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.2391:                             # %OP8930.PUSH20
	add	rbx, r15
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	add	rdx, r15
	add	r13, r15
	add	r14, r15
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [rdx], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbx - 208]
	mov	r8, qword ptr [rbx - 224]
	mov	r9, qword ptr [rbx - 216]
	mov	rcx, qword ptr [rbx - 200]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	eax, eax
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 24], 0
	mov	r10, qword ptr [rbx + 40]
	mov	r11, qword ptr [rbx + 56]
	mov	r15, rdx
	mov	rax, qword ptr [rbx + 32]
	mov	r12, qword ptr [rbx + 48]
	mov	qword ptr [r14 + 16], r12
	mov	qword ptr [r14], rax
	mov	qword ptr [r14 + 24], r11
	mov	qword ptr [r14 + 8], r10
	mov	rdi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 192], rdi
	add	rdi, rax
	mov	qword ptr [rbx + 200], rsi
	adc	rsi, r10
	mov	qword ptr [rbx + 208], rdx
	adc	rdx, r12
	mov	qword ptr [rbx + 216], rcx
	adc	rcx, r11
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	0
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2392:                             # %OP8938.DUP10
	mov	rax, qword ptr [rbx - 176]
	mov	r8, qword ptr [rbx - 192]
	mov	r9, qword ptr [rbx - 184]
	mov	r10, qword ptr [rbx - 168]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	and	r9, qword ptr [r15 + 8]
	and	r10, qword ptr [r15 + 24]
	and	r8, qword ptr [r15]
	and	rax, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [rbx + 56]
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rdx, qword ptr [rbx + 48]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	mov	qword ptr [r14 + 8], rsi
	add	rdi, 96
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.2393:                             # %OP8944.PUSH1
	mov	r14, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_2] # xmm0 = [128,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	add	rdi, 128
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [rbx - 160]
	mov	rax, qword ptr [rbx - 144]
	mov	r9, qword ptr [rbx - 152]
	mov	r10, qword ptr [rbx - 136]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	sub	rsp, 8
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.2394:                             # %OP8950.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_55] # xmm0 = [160,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	add	rdi, 160
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [rbx - 128]
	mov	rax, qword ptr [rbx - 112]
	mov	r9, qword ptr [rbx - 120]
	mov	r10, qword ptr [rbx - 104]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	sub	rsp, 8
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.2395:                             # %OP8956.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_56] # xmm0 = [192,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	add	rdi, 192
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [rbx - 96]
	mov	rax, qword ptr [rbx - 80]
	mov	r9, qword ptr [rbx - 88]
	mov	r10, qword ptr [rbx - 72]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	sub	rsp, 8
	push	r12
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1124
# %bb.2396:                             # %OP8962.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_51] # xmm0 = [224,0,0,0]
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdx, qword ptr [rbx + 48]
	mov	rdi, qword ptr [rbx + 32]
	mov	rsi, qword ptr [rbx + 40]
	mov	rcx, qword ptr [rbx + 56]
	mov	r11, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	add	rdi, 224
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	r9, qword ptr [rbx - 56]
	mov	rax, qword ptr [rbx - 40]
	mov	r8, qword ptr [rbx - 64]
	mov	r10, qword ptr [rbx - 48]
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	sub	rsp, 8
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2397:                             # %OP8969.DUP4
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3080
# %bb.2398:                             # %OP8970.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], rdi
	mov	r9, qword ptr [rbx + 40]
	mov	r11, qword ptr [rbx + 56]
	mov	r8, qword ptr [rbx + 32]
	mov	r10, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 208], r10
	mov	qword ptr [rbx + 192], r8
	mov	qword ptr [rbx + 216], r11
	mov	qword ptr [rbx + 200], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	r11, rcx
	mov	qword ptr [rax], r8
	mov	qword ptr [rax + 16], r10
	mov	qword ptr [rax + 8], r9
	mov	qword ptr [rax + 24], r11
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax], rdi
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r14, qword ptr [r15]
	mov	r12, qword ptr [r15 + 8]
	mov	qword ptr [rbp - 160], r12      # 8-byte Spill
	mov	r12, qword ptr [r15 + 16]
	mov	qword ptr [rbp - 152], r12      # 8-byte Spill
	mov	r12, qword ptr [r15 + 24]
	mov	qword ptr [rbp - 144], r12      # 8-byte Spill
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	mov	qword ptr [rax], r14
	add	r8, r14
	mov	r14, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [rax + 8], r14
	adc	r9, r14
	mov	r14, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rax + 16], r14
	adc	r10, r14
	mov	r14, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rax + 24], r14
	adc	r11, r14
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax], rdi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	r11
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2399:                             # %OP8979.PUSH2
	mov	r14, qword ptr [rbp - 136]      # 8-byte Reload
	add	r14, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r15 + 24]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdx
	mov	r9, qword ptr [rbx + 40]
	mov	rax, qword ptr [rbx + 56]
	mov	r8, qword ptr [rbx + 32]
	mov	r10, qword ptr [rbx + 48]
	mov	qword ptr [rbx + 48], rcx
	mov	qword ptr [rbx + 32], rdx
	mov	qword ptr [rbx + 56], rdi
	mov	qword ptr [rbx + 40], rsi
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 24], rax
	add	r8, 256
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], rax
	mov	r11, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 24]
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r15 + 24], rdx
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15], r11
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rdx
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	rsi, qword ptr [rbx + 8]
	mov	qword ptr [rbx + 8], rdi
	mov	rdi, qword ptr [rbx]
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	mov	qword ptr [rbx], r11
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	sub	rsp, 8
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1171
# %bb.2400:                             # %OP8986.DUP1
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	rbx, r14
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jne	.LBB5_1124
# %bb.2401:                             # %OP8987.MLOAD.contd
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], rcx
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdi, qword ptr [r14 + 8]
	mov	r8, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], rdi
	add	r9, qword ptr [r15]
	adc	rdi, qword ptr [r15 + 8]
	adc	r10, qword ptr [r15 + 16]
	adc	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15], r9
	mov	rdi, r12
	mov	rsi, r14
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3048
.LBB5_2402:                             # %OP8307.PUSH2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_57] # xmm0 = [18045,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rdx
	mov	rdi, qword ptr [r14 - 224]
	mov	r8, qword ptr [r14 - 208]
	mov	r9, qword ptr [r14 - 216]
	mov	r10, qword ptr [r14 - 200]
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB5_2777
.LBB5_2403:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 9106
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2628
# %bb.2404:                             # %OP4601.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r10, [rax - 1]
	mov	r13, r10
	shl	r13, 5
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [r11 + r13]
	mov	rcx, qword ptr [r11 + r13 + 8]
	or	rcx, qword ptr [r11 + r13 + 24]
	or	rax, qword ptr [r11 + r13 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r13 + 8], xmm0
	mov	qword ptr [r11 + r13], rdx
	mov	qword ptr [r11 + r13 + 24], 0
	je	.LBB5_2630
# %bb.2405:                             # %OP4605.PUSH1
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	add	r13, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_751
# %bb.2406:                             # %OP4606.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rbx + 1]
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + rbx + 24], rax
	mov	qword ptr [r15 + rbx + 16], 0
	mov	qword ptr [r15 + rbx], 0
	mov	qword ptr [r15 + rbx + 8], 0
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.2407:                             # %OP4610.PUSH1
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	lea	r12, [r15 + rbx]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 2
	add	r14, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [r13 + 24]
	mov	rax, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r10, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	r13, rbx
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r9
	mov	qword ptr [r15 + rbx + 8], rsi
	mov	qword ptr [r15 + rbx + 24], rcx
	mov	qword ptr [r15 + rbx + 16], rdx
	mov	qword ptr [r15 + rbx], rdi
	mov	qword ptr [r12 + 104], r10
	mov	qword ptr [r12 + 96], r9
	mov	qword ptr [r12 + 120], r8
	mov	qword ptr [r12 + 112], rax
	vmovups	ymmword ptr [r15 + rbx], ymm0
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3093
# %bb.2408:                             # %OP4621.PUSH1
	add	rbx, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3093
# %bb.2409:                             # %OP4624.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_95] # xmm0 = [23300,0,0,0]
	vmovups	ymmword ptr [r12 + 96], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovups	ymmword ptr [r12 + 128], ymm0
	vmovups	ymmword ptr [rbx], ymm0
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 128], rdx
	mov	rdi, r15
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_3093
# %bb.2410:                             # %OP4631.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r12 - 32]
	mov	qword ptr [r12 - 8], rax
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	vmovdqu	ymmword ptr [r14], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.2411:                             # %OP4637.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rcx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], rcx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rdx
	mov	r8, qword ptr [r12 - 24]
	mov	r9, qword ptr [r12 - 8]
	mov	r10, qword ptr [r12 - 32]
	mov	r11, qword ptr [r12 - 16]
	mov	qword ptr [r12 - 16], rax
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 8], rdi
	mov	qword ptr [r12 - 24], rcx
	mov	qword ptr [r14], r10
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], r8
	sub	r10, rdx
	sbb	r8, rcx
	sbb	r11, rax
	sbb	r9, rdi
	mov	qword ptr [r12 - 32], r10
	mov	qword ptr [r12 - 24], r8
	mov	qword ptr [r12 - 16], r11
	mov	qword ptr [r12 - 8], r9
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, r15
	jmp	.LBB5_1911
.LBB5_2412:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 12445
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2631
# %bb.2413:                             # %OP5942.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rax, qword ptr [r11 + r14]
	mov	rcx, qword ptr [r11 + r14 + 8]
	or	rcx, qword ptr [r11 + r14 + 24]
	or	rax, qword ptr [r11 + r14 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rdx
	mov	qword ptr [r11 + r14 + 24], 0
	je	.LBB5_2633
	jmp	.LBB5_2414
.LBB5_2420:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 17259
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2637
# %bb.2421:                             # %OP7929.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_332
.LBB5_2422:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 16932
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2642
# %bb.2423:                             # %OP9175.JUMPDEST.sink.split.loopexit55265
	mov	eax, 1
	xor	ecx, ecx
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_75
.LBB5_2424:                             # %dynamic_jump_table
	mov	rax, rsi
	xor	rax, 9771
	or	rax, r13
	or	rcx, rdi
	or	rax, rcx
	jne	.LBB5_2644
# %bb.2425:                             # %OP4934.JUMPDEST
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r15
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_125] # xmm0 = [3,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm0
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rsi, qword ptr [r11 + rax - 120]
	mov	rdx, qword ptr [r11 + rax - 112]
	mov	rcx, qword ptr [r11 + rax - 104]
	mov	qword ptr [r11 + rax + 120], rcx
	mov	qword ptr [r11 + rax + 112], rdx
	mov	qword ptr [r11 + rax + 104], rsi
	mov	qword ptr [r11 + rax + 96], rdi
	add	r15, 5
	mov	r8, qword ptr [r11 + rax - 32]
	mov	r9, qword ptr [r11 + rax - 24]
	mov	r10, qword ptr [r11 + rax - 16]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rax - 8]
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 152], r11
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 144], r10
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 136], r9
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 128], r8
	mov	rbx, r15
	shl	rbx, 5
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx + 24], rcx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx + 8], rsi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx + 16], rdx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx], rdi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 216], r11
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 200], r9
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 208], r10
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 192], r8
	cmp	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	r11, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_3012
# %bb.2426:
	mov	r10, r15
	jmp	.LBB5_2646
.LBB5_2427:                             # %dynamic_jump_table
	xor	rsi, 8511
	or	rsi, r13
	or	rcx, rdi
	or	rcx, rsi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3092
# %bb.2428:                             # %OP4337.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [r10 + 1]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	jmp	.LBB5_2490
.LBB5_2429:                             # %dynamic_jump_table
	xor	rsi, 18387
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2430:                             # %OP8470.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, r10
	shl	r14, 5
	mov	rax, qword ptr [r11 + r14 - 32]
	mov	rcx, qword ptr [r11 + r14 - 24]
	mov	rdx, qword ptr [r11 + r14 - 16]
	mov	rsi, qword ptr [r11 + r14 - 8]
	mov	qword ptr [r11 + r14 - 40], rsi
	mov	qword ptr [r11 + r14 - 48], rdx
	mov	qword ptr [r11 + r14 - 56], rcx
	mov	qword ptr [r11 + r14 - 64], rax
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_68] # ymm0 = [4922695492300419442,11720276343920480633,2148283114,0]
	vmovups	ymmword ptr [r11 + r14 - 32], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_69] # xmm0 = [1825482322,0,0,0]
	vmovups	ymmword ptr [r11 + r14], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r14 - 224]
	vmovdqu	ymm1, ymmword ptr [r11 + r14 - 96]
	vmovups	ymmword ptr [r11 + r14 + 32], ymm0
	mov	qword ptr [r11 + r14 + 88], rsi
	mov	qword ptr [r11 + r14 + 80], rdx
	mov	qword ptr [r11 + r14 + 72], rcx
	mov	qword ptr [r11 + r14 + 64], rax
	vmovdqu	ymmword ptr [r11 + r14 + 96], ymm1
	lea	r13, [r10 + 5]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14 + 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r15, r11
	mov	r12, r10
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_931
# %bb.2431:                             # %OP8479.MLOAD.contd
	add	r14, r15
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	r8, qword ptr [r14 + 24]
	mov	rax, qword ptr [r14]
	mov	r9, qword ptr [r14 + 8]
	mov	r10, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 16], r10
	lea	rbx, [r12 + 6]
	mov	qword ptr [r15 + r13], rax
	mov	qword ptr [r15 + r13 + 24], r8
	mov	qword ptr [r15 + r13 + 8], r9
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_50] # xmm0 = [4294967295,0]
	vmovdqu	ymmword ptr [r15 + rbx], ymm0
	mov	r8d, eax
	mov	qword ptr [r15 + r13], r8
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13 + 24], 0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_51] # xmm1 = [224,0,0,0]
	vmovdqu	ymmword ptr [r15 + rbx], ymm1
	shl	rax, 32
	vmovdqa	xmmword ptr [r15 + r13], xmm0
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + rbx + 16], rdx
	mov	qword ptr [r15 + rbx + 8], rsi
	mov	qword ptr [r15 + rbx], rdi
	mov	qword ptr [r15 + rbx + 24], rcx
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2432:                             # %OP8487.PUSH1
	add	r13, r15
	add	r12, 7
	add	rbx, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r14 + 152]
	mov	rdx, qword ptr [r14 + 144]
	mov	rdi, qword ptr [r14 + 128]
	mov	rsi, qword ptr [r14 + 136]
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	r9, qword ptr [r14 + 40]
	mov	rax, qword ptr [r14 + 56]
	mov	r8, qword ptr [r14 + 32]
	mov	r10, qword ptr [r14 + 48]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	mov	eax, r10d
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12 + 8], rsi
	mov	qword ptr [r15 + r12], rdi
	mov	qword ptr [r15 + r12 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2433:                             # %OP8495.PUSH1
	add	r12, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	r9, qword ptr [r14 + 72]
	mov	rax, qword ptr [r14 + 88]
	mov	r8, qword ptr [r14 + 64]
	mov	r10, qword ptr [r14 + 80]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2434:                             # %OP8500.PUSH1
	mov	r15, rbx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r10, qword ptr [r13 + 24]
	mov	rbx, qword ptr [r13 + 16]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	rdi, r8
	add	rdi, 32
	mov	rsi, r9
	adc	rsi, 0
	mov	rax, rbx
	adc	rax, 0
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	r11, r10
	adc	r11, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15 + 8], rsi
	vmovdqu	ymmword ptr [r12], ymm0
	add	r8, 64
	adc	r9, 0
	adc	rbx, 0
	adc	r10, 0
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rbx
	mov	qword ptr [r15], r8
	mov	rdx, qword ptr [r14 + 136]
	mov	rcx, qword ptr [r14 + 152]
	mov	r13, qword ptr [r14 + 128]
	mov	rax, qword ptr [r14 + 144]
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r13
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r14 + 256], r8
	sub	r8, r13
	mov	qword ptr [r14 + 264], r9
	sbb	r9, rdx
	mov	qword ptr [r14 + 272], rbx
	sbb	rbx, rax
	mov	qword ptr [r14 + 280], r10
	sbb	r10, rcx
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], rbx
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r14 + 280], r11
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r14 + 272], rdx
	mov	qword ptr [r14 + 264], rsi
	mov	qword ptr [r14 + 256], rdi
	sub	rsp, 8
	mov	rcx, r11
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2435:                             # %OP8510.DUP4
	mov	rdx, qword ptr [r14 + 112]
	mov	rdi, qword ptr [r14 + 96]
	mov	rsi, qword ptr [r14 + 104]
	mov	rcx, qword ptr [r14 + 120]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [r15 + 8]
	mov	r8, qword ptr [r15 + 24]
	mov	r9, qword ptr [r15]
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	r10, qword ptr [r15 + 16]
	mov	qword ptr [r14 + 272], r10
	mov	qword ptr [r14 + 256], r9
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	lea	r13, [r9 + 9]
	mov	qword ptr [r14 + 280], r8
	mov	qword ptr [r14 + 264], rax
	lea	rax, [r9 + 10]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3076
# %bb.2436:                             # %OP8513.MLOAD.contd
	add	r13, r15
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	rsi, qword ptr [r14 + 264]
	mov	rcx, qword ptr [r14 + 280]
	mov	rdi, qword ptr [r14 + 256]
	mov	rdx, qword ptr [r14 + 272]
	mov	rbx, qword ptr [rbp - 104]      # 8-byte Reload
	shl	rbx, 5
	mov	qword ptr [r15 + rbx + 16], rdx
	mov	qword ptr [r15 + rbx], rdi
	mov	qword ptr [r15 + rbx + 24], rcx
	mov	qword ptr [r15 + rbx + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2437:                             # %OP8516.PUSH1
	mov	r15, rbx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r14 + 280]
	mov	rcx, qword ptr [r14 + 272]
	mov	rdx, qword ptr [r14 + 256]
	mov	rsi, qword ptr [r14 + 264]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 256], rdx
	mov	qword ptr [r14 + 264], rsi
	mov	qword ptr [r14 + 272], rcx
	mov	qword ptr [r14 + 280], rax
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rdi]
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 16], rcx
	vmovdqu	ymmword ptr [r14 + 256], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12 + 24]
	mov	qword ptr [r14 + 280], rcx
	mov	qword ptr [r14 + 272], rdx
	mov	qword ptr [r14 + 256], rdi
	mov	qword ptr [r14 + 264], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3056
# %bb.2438:                             # %OP8521.MLOAD.contd
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rax, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 280], rdi
	mov	qword ptr [r14 + 264], rax
	mov	qword ptr [r14 + 272], rcx
	mov	qword ptr [r14 + 256], rdx
	mov	rsi, qword ptr [r12 + 8]
	mov	r9, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r14 + 272], r10
	mov	qword ptr [r14 + 256], r8
	mov	qword ptr [r14 + 280], r9
	mov	qword ptr [r14 + 264], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	add	r8, 32
	adc	rsi, 0
	adc	r10, 0
	adc	r9, 0
	mov	qword ptr [r14 + 272], r10
	mov	qword ptr [r14 + 256], r8
	mov	qword ptr [r14 + 264], rsi
	mov	qword ptr [r14 + 280], r9
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r14 + 272], rcx
	mov	qword ptr [r14 + 256], rdx
	mov	qword ptr [r14 + 280], rdi
	mov	qword ptr [r14 + 264], rax
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], rax
	vmovdqu	ymm0, ymmword ptr [r14 + 192]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [r14 + 376], r9
	mov	qword ptr [r14 + 368], r10
	mov	qword ptr [r14 + 360], rsi
	mov	qword ptr [r14 + 352], r8
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 384], ymm0
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, 13
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2439:                             # %OP8530.JUMPDEST.preheader
	lea	r10, [r14 + 1]
	mov	r15, r14
	shl	r15, 5
	mov	rbx, r10
	shl	rbx, 5
	mov	rsi, qword ptr [r11 + r15 - 112]
	mov	rdi, qword ptr [r11 + r15 - 128]
	mov	r8, qword ptr [r11 + r15 - 120]
	mov	r9, qword ptr [r11 + r15 - 104]
	mov	qword ptr [r11 + r15 + 24], r9
	mov	qword ptr [r11 + r15 + 8], r8
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15], rdi
	mov	r13, qword ptr [r11 + r15 - 32]
	mov	rdx, qword ptr [r11 + r15 - 24]
	mov	rcx, qword ptr [r11 + r15 - 16]
	mov	rax, qword ptr [r11 + r15 - 8]
	mov	qword ptr [r11 + rbx + 24], rax
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], r13
	cmp	r13, rdi
	mov	rdi, rdx
	sbb	rdi, r8
	mov	rdi, rcx
	sbb	rdi, rsi
	mov	rsi, rax
	sbb	rsi, r9
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 + 8], xmm0
	mov	qword ptr [r11 + r15], rsi
	mov	qword ptr [r11 + r15 + 24], 0
	jae	.LBB5_2580
# %bb.2440:                             # %OP8537.DUP2.lr.ph
	mov	rdi, rax
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	add	r15, r11
	add	rbx, r11
	mov	r10, rbx
	mov	r14, rax
.LBB5_2441:                             # %OP8537.DUP2
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	mov	rax, qword ptr [r15 - 40]
	mov	rbx, qword ptr [r15 - 64]
	mov	r9, qword ptr [r15 - 56]
	mov	r8, qword ptr [r15 - 48]
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15], rbx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r13
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 24], r14
	add	rbx, r13
	adc	r9, rdx
	adc	r8, rcx
	adc	rax, r14
	mov	qword ptr [r15], rbx
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], rax
	mov	rdi, qword ptr [r12 + 40]
	mov	r12, r10
	mov	r10, qword ptr [rdi + 16]
	mov	r14, qword ptr [rdi + 48]
	sub	r10, r14
	mov	rsi, rbx
	add	rsi, 32
	mov	rcx, -1
	cmovb	rsi, rcx
	neg	r9
	mov	r9d, 0
	sbb	r9, r8
	mov	r8d, 0
	sbb	r8, rax
	cmovb	rsi, rcx
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	cmp	rsi, r10
	ja	.LBB5_2445
.LBB5_2442:                             # %OP8540.MLOAD.contd
                                        #   in Loop: Header=BB5_2441 Depth=1
	add	r14, qword ptr [rdi + 8]
	mov	rsi, qword ptr [rbx + r14 + 24]
	mov	rdi, qword ptr [rbx + r14 + 16]
	mov	r8, qword ptr [rbx + r14]
	mov	rbx, qword ptr [rbx + r14 + 8]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	movbe	qword ptr [r15 + 24], r8
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	movbe	qword ptr [r15 + 8], rdi
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	movbe	qword ptr [r15], rsi
	movbe	qword ptr [r15 + 16], rbx
	mov	rsi, qword ptr [r15 - 80]
	mov	rdi, qword ptr [r15 - 96]
	mov	r8, qword ptr [r15 - 88]
	mov	r9, qword ptr [r15 - 72]
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rdi
	mov	qword ptr [r15 + 64], r13
	add	r13, rdi
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 72], rdx
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r15 + 80], rcx
	adc	rdx, r8
	adc	rcx, rsi
	adc	rax, r9
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rdi, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9 + 48]
	sub	rdi, r14
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r10, r12
	mov	rcx, r9
	ja	.LBB5_2447
.LBB5_2443:                             # %OP8545.PUSH1
                                        #   in Loop: Header=BB5_2441 Depth=1
	add	r14, qword ptr [rcx + 8]
	mov	qword ptr [r13 + r14 + 8], rbx
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r13 + r14], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [r13 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r13 + r14 + 24], rax
	mov	r14, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	rdx, qword ptr [r15 - 24]
	mov	r13, qword ptr [r15 - 32]
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	r14, 0
	mov	qword ptr [r15 - 32], r13
	mov	qword ptr [r15 - 16], rcx
	mov	qword ptr [r15 - 24], rdx
	mov	qword ptr [r15 - 8], r14
	mov	rsi, qword ptr [r15 - 104]
	mov	rdi, qword ptr [r15 - 128]
	mov	r8, qword ptr [r15 - 120]
	mov	r9, qword ptr [r15 - 112]
	mov	qword ptr [r15 + 16], r9
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r10], r13
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 24], r14
	mov	qword ptr [r10 + 8], rdx
	cmp	r13, rdi
	mov	rdi, rdx
	sbb	rdi, r8
	mov	rdi, rcx
	sbb	rdi, r9
	mov	rdi, r14
	sbb	rdi, rsi
	setae	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jb	.LBB5_2441
	jmp	.LBB5_2444
.LBB5_2445:                             # %resize.i51037
                                        #   in Loop: Header=BB5_2441 Depth=1
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1171
# %bb.2446:                             # %resize.i51037.OP8540.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_2441 Depth=1
	mov	rax, qword ptr [r15 - 8]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	rax, qword ptr [r15 - 16]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB5_2442
.LBB5_2447:                             # %resize.i51052
                                        #   in Loop: Header=BB5_2441 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, r10
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	r10, r12
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2443
	jmp	.LBB5_2448
.LBB5_1573:                             # %dynamic_jump_table
	xor	rsi, 20677
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1574:                             # %OP9689.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_530
.LBB5_2449:                             # %dynamic_jump_table
	xor	rsi, 15885
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2450:                             # %OP7336.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1447
.LBB5_2451:                             # %dynamic_jump_table
	xor	rsi, 5175
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2452:                             # %OP2975.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_153
.LBB5_2453:                             # %dynamic_jump_table
	xor	rsi, 2598
	or	rsi, r13
	or	rcx, rdi
	or	rcx, rsi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3092
# %bb.2454:                             # %OP1496.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_570
.LBB5_2455:                             # %dynamic_jump_table
	xor	rsi, 19273
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2456:                             # %OP8909.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2551
.LBB5_1934:                             # %dynamic_jump_table
	xor	rsi, 1064
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1257:                             # %OP552.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	lea	r13, [rax + 2]
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1258:                             # %OP555.MLOAD.contd
	add	r14, r12
	add	r15, r12
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	or	rax, qword ptr [r14 - 16]
	mov	qword ptr [r14 - 32], rdi
	mov	qword ptr [r14 - 16], rdx
	mov	qword ptr [r14 - 24], rsi
	or	r9, qword ptr [r14 - 8]
	mov	qword ptr [r14 - 8], rcx
	xor	r8d, r8d
	or	r9, rax
	setne	r8b
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	shl	r13, 5
.LBB5_1259:                             # %OP555.MLOAD.contd
	mov	qword ptr [r12 + r13 + 24], rcx
	mov	qword ptr [r12 + r13 + 8], rsi
	mov	qword ptr [r12 + r13 + 16], rdx
	mov	qword ptr [r12 + r13], rdi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r9d, r9d
.LBB5_1260:                             # %OP555.MLOAD.contd
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1261:                             # %OP561.MLOAD
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.1262:                             # %OP561.MLOAD.contd
	lea	rsi, [r14 - 32]
	mov	rax, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	r8, qword ptr [r14 - 8]
	mov	r9, qword ptr [r14 - 16]
	mov	r10, qword ptr [r14 - 32]
	mov	r11, qword ptr [r14 - 24]
	sub	r10, rcx
	sbb	r11, rdx
	sbb	r9, rdi
	sbb	r8, rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 32
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	add	r10, 32
	adc	r11, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r14 - 32], r10
	mov	qword ptr [r14 - 24], r11
	mov	qword ptr [r14 - 16], r9
	mov	qword ptr [r14 - 8], r8
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 8], rdx
	mov	rdi, r12
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB5_1264
.LBB5_1263:                             # %select.end56247
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	dec	rcx
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_2457:                             # %dynamic_jump_table
	xor	rsi, 11710
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2458:                             # %OP5660.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_579
.LBB5_2459:                             # %dynamic_jump_table
	xor	rsi, 7487
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2460:                             # %OP3923.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_566
.LBB5_2461:                             # %dynamic_jump_table
	xor	rsi, 11642
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2462:                             # %OP5637.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_651
.LBB5_3091:                             # %dynamic_jump_table
	xor	rsi, 21070
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_2681
	jmp	.LBB5_3092
.LBB5_2463:                             # %dynamic_jump_table
	xor	rsi, 15244
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2464:                             # %OP7086.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2465:                             # %OP7086.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 288]
	mov	rdx, qword ptr [r11 + rax - 280]
	mov	rsi, qword ptr [r11 + rax - 272]
	mov	rdi, qword ptr [r11 + rax - 264]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_100] # xmm0 = [15254,0,0,0]
	jmp	.LBB5_430
.LBB5_2466:                             # %dynamic_jump_table
	xor	rsi, 5508
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2467:                             # %OP3115.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2468:                             # %OP3115.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 160]
	mov	rdx, qword ptr [r11 + rax - 152]
	mov	rsi, qword ptr [r11 + rax - 144]
	mov	rdi, qword ptr [r11 + rax - 136]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_168] # xmm0 = [5518,0,0,0]
	jmp	.LBB5_430
.LBB5_2469:                             # %dynamic_jump_table
	xor	rsi, 5604
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
.LBB5_2470:                             # %OP3163.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	lea	r15, [rax + 1]
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r14, [rax + 2]
	mov	rax, qword ptr [r11 + rbx - 200]
	mov	r8, qword ptr [r11 + rbx - 224]
	mov	r9, qword ptr [r11 + rbx - 216]
	mov	rcx, qword ptr [r11 + rbx - 208]
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 16], rcx
	mov	qword ptr [r11 + r15], r8
	mov	qword ptr [r11 + r15 + 24], rax
	mov	qword ptr [r11 + r15 + 8], r9
	mov	eax, ecx
	mov	qword ptr [r11 + rbx], r8
	mov	qword ptr [r11 + rbx + 8], r9
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r11 + r15 + 16], rax
	mov	qword ptr [r11 + r15 + 8], r9
	mov	qword ptr [r11 + r15], r8
	mov	qword ptr [r11 + r15 + 24], 0
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	shl	r14, 5
	vmovdqu	ymmword ptr [r11 + r14], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r12
	push	0
	push	rax
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1087
# %bb.2471:                             # %OP3171.PUSH1
	add	r15, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_159] # xmm0 = [10,0]
	vmovdqu	ymmword ptr [r15], ymm0
	add	r14, r13
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vmovdqu	ymmword ptr [r14], ymm1
	vmovdqu	ymmword ptr [r15], ymm1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 3]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	shl	r12, 5
	vmovdqu	ymmword ptr [r13 + r12], ymm1
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 10
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.2472:                             # %OP3176.PUSH1
	add	rbx, r13
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [rax + 4]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	vmovdqu	ymmword ptr [r14], ymm0
	add	r12, r13
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	r14, rdi
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 16], rsi
	mov	qword ptr [r13 + r14], rcx
	mov	qword ptr [r13 + r14 + 24], rax
	mov	qword ptr [r13 + r14 + 8], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.2473:                             # %OP3180.CALLER
	add	r14, r13
	mov	rdx, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	rcx, qword ptr [rdx + 156]
	movbe	rax, qword ptr [rdx + 148]
	mov	r8d, dword ptr [rdx + 164]
	mov	r9, rax
	shld	r9, rcx, 32
	bswap	r8
	shrd	r8, rcx, 32
	shr	rax, 32
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 24], 0
	mov	rdi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 160], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.2474:                             # %OP3183.SWAP1
	mov	rax, qword ptr [r12 + 16]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 24]
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rcx, qword ptr [rdx + 16]
	mov	rsi, qword ptr [rdx]
	mov	r11, qword ptr [rdx + 8]
	mov	r13, qword ptr [rdx + 24]
	mov	qword ptr [rdx + 24], r10
	mov	qword ptr [rdx + 8], r9
	mov	qword ptr [rdx + 16], rax
	mov	qword ptr [rdx], r8
	mov	qword ptr [r12 + 24], r13
	mov	qword ptr [r12 + 8], r11
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rsi
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 16], rcx
	mov	rdi, qword ptr [r15]
	mov	qword ptr [r15], rsi
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [r15 + 8], r11
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [r15 + 24], r13
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.2475:                             # %OP3186.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 16]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.2476:                             # %OP3188.SLOAD
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.2477:                             # %OP3189.DUP6
	mov	rax, qword ptr [rbx - 144]
	mov	rdx, qword ptr [rbx - 160]
	mov	rsi, qword ptr [rbx - 152]
	mov	rcx, qword ptr [rbx - 136]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rdx
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx + 16]
	cmp	qword ptr [rbx], rdx
	sbb	rdi, rsi
	sbb	r9, rax
	sbb	r8, rcx
	setae	dil
	movzx	edi, dil
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], 0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	jb	.LBB5_2964
# %bb.2478:
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	jmp	.LBB5_2526
.LBB5_1828:                             # %dynamic_jump_table
	xor	rsi, 3526
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1829:                             # %OP2036.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_181
.LBB5_1846:                             # %dynamic_jump_table
	xor	rsi, 4083
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_596
	jmp	.LBB5_3092
.LBB5_1916:                             # %dynamic_jump_table
	xor	rsi, 3823
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_658
	jmp	.LBB5_3092
.LBB5_1920:                             # %dynamic_jump_table
	xor	rsi, 4236
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1921:                             # %OP2513.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_312
.LBB5_2293:                             # %dynamic_jump_table
	xor	rsi, 4135
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2294:                             # %OP2456.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_600
.LBB5_2296:                             # %dynamic_jump_table
	xor	rsi, 3875
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2297:                             # %OP2271.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_662
.LBB5_1863:                             # %dynamic_jump_table
	xor	rsi, 587
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1864:                             # %OP281.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	jmp	.LBB5_98
.LBB5_2302:                             # %dynamic_jump_table
	xor	rsi, 685
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2303:                             # %OP327.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	jmp	.LBB5_46
.LBB5_1450:                             # %OP2889.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_110
.LBB5_2479:                             # %dynamic_jump_table
	xor	rsi, 10425
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_344
	jmp	.LBB5_3092
.LBB5_2480:                             # %dynamic_jump_table
	xor	rsi, 10667
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2481:                             # %OP5282.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_348
.LBB5_2482:                             # %dynamic_jump_table
	xor	rsi, 20377
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2483:                             # %OP9587.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_28
.LBB5_1869:                             # %dynamic_jump_table
	xor	rsi, 3335
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1870:                             # %OP1941.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_607
.LBB5_2309:                             # %dynamic_jump_table
	xor	rsi, 3386
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1330:                             # %OP1963.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
.LBB5_1331:                             # %OP1963.JUMPDEST
	shl	rcx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rcx + 32], ymm0
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 3
	mov	rax, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	edx, edx
	mov	rdi, rax
	add	rdi, -4
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	r10d, 0
	adc	r10, -1
	mov	qword ptr [r11 + rcx + 64], rdi
	mov	qword ptr [r11 + rcx + 80], r9
	mov	qword ptr [r11 + rcx + 72], r8
	mov	qword ptr [r11 + rcx + 88], r10
	mov	qword ptr [r11 + rcx + 128], rdi
	mov	qword ptr [r11 + rcx + 144], r9
	mov	qword ptr [r11 + rcx + 136], r8
	mov	qword ptr [r11 + rcx + 152], r10
	mov	r11d, 31
	cmp	r11, rdi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edi, 0
	sbb	rdi, r8
	mov	edi, 0
	sbb	rdi, r9
	sbb	rdx, r10
	setb	dl
	movzx	edx, dl
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jb	.LBB5_1334
.LBB5_1332:                             # %OP684.PUSH1
	add	rcx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rcx + 128], ymm0
	jmp	.LBB5_378
.LBB5_1822:                             # %dynamic_jump_table
	xor	rsi, 882
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_49
	jmp	.LBB5_3092
.LBB5_2484:                             # %dynamic_jump_table
	xor	rsi, 8228
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2485:                             # %OP4207.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rax, qword ptr [r11 + r14]
	mov	rcx, qword ptr [r11 + r14 + 8]
	or	rcx, qword ptr [r11 + r14 + 24]
	or	rax, qword ptr [r11 + r14 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rdx
	mov	qword ptr [r11 + r14 + 24], 0
	jne	.LBB5_2979
# %bb.2486:
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
.LBB5_2487:                             # %OP4249.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	rdi, [rax + 1]
	lea	r8, [rax + 2]
	mov	rax, qword ptr [r11 + rbx - 136]
	mov	rcx, qword ptr [r11 + rbx - 160]
	mov	rdx, qword ptr [r11 + rbx - 152]
	mov	rsi, qword ptr [r11 + rbx - 144]
	mov	r13, rdi
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], rsi
	mov	qword ptr [r11 + r13], rcx
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_2959
.LBB5_2488:                             # %OP4293.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	rax, qword ptr [r11 + rbx - 128]
	mov	rcx, qword ptr [r11 + rbx - 120]
	mov	rdx, qword ptr [r11 + rbx - 112]
	mov	rsi, qword ptr [r11 + rbx - 104]
	mov	r13, rdi
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], rsi
	mov	qword ptr [r11 + r13 + 16], rdx
	mov	qword ptr [r11 + r13 + 8], rcx
	mov	qword ptr [r11 + r13], rax
	or	rcx, rsi
	or	rax, rdx
	xor	edx, edx
	or	rax, rcx
	setne	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rdx
	mov	qword ptr [r11 + rbx + 24], 0
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	je	.LBB5_2951
# %bb.2489:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2490:                             # %OP4337.JUMPDEST
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r8d, dword ptr [rax + 164]
	movbe	r9, qword ptr [rax + 156]
	bswap	r8
	shrd	r8, r9, 32
	movbe	rax, qword ptr [rax + 148]
	shrd	r9, rax, 32
	shr	rax, 32
	mov	r14, r10
	shl	r14, 5
	mov	qword ptr [r11 + r14 + 8], r9
	mov	qword ptr [r11 + r14 + 16], rax
	mov	qword ptr [r11 + r14], r8
	mov	qword ptr [r11 + r14 + 24], 0
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	lea	r13, [r10 + 2]
	mov	rbx, qword ptr [rbp - 88]       # 8-byte Reload
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 24], 0
	mov	qword ptr [r11 + rbx + 8], 0
	mov	qword ptr [r11 + rbx + 16], 0
	mov	qword ptr [r11 + rbx], 0
	mov	qword ptr [r11 + r14 + 24], 0
	mov	qword ptr [r11 + r14 + 8], 0
	mov	qword ptr [r11 + r14 + 16], 0
	mov	qword ptr [r11 + r14], 0
	mov	qword ptr [r11 + rbx + 8], r9
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx], r8
	mov	qword ptr [r11 + rbx + 24], 0
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	push	r15
	push	0
	push	rax
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.2491:                             # %OP4343.PUSH1
	add	rbx, r12
	add	r13, r12
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_139] # xmm0 = [13,0]
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 13
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.2492:                             # %OP4346.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	add	r14, r12
	vmovdqu	ymm1, ymmword ptr [r14]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	rdi, r15
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.2493:                             # %OP4349.SLOAD
	mov	rdi, r15
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.2494:                             # %OP4350.DUP1
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	rdi, qword ptr [r14 - 128]
	mov	r8, qword ptr [r14 - 112]
	mov	r9, qword ptr [r14 - 120]
	mov	r10, qword ptr [r14 - 104]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 16], r8
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], rdi
	cmp	rcx, rdi
	sbb	rdx, r9
	sbb	rsi, r8
	sbb	rax, r10
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jb	.LBB5_2935
# %bb.2495:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB5_2588
.LBB5_2496:                             # %dynamic_jump_table
	xor	rsi, 7682
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2497:                             # %OP3991.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_481
.LBB5_2498:                             # %dynamic_jump_table
	xor	rsi, 7877
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2499:                             # %OP4054.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_215
.LBB5_1851:                             # %dynamic_jump_table
	xor	rsi, 2345
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1852:                             # %OP1373.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_680
.LBB5_1945:                             # %dynamic_jump_table
	xor	rsi, 2178
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_537
	jmp	.LBB5_3092
.LBB5_2321:                             # %dynamic_jump_table
	xor	rsi, 2230
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2322:                             # %OP1290.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_541
.LBB5_2324:                             # %dynamic_jump_table
	xor	rsi, 2576
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2325:                             # %OP1481.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_569
.LBB5_2500:                             # %dynamic_jump_table
	xor	rsi, 14707
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2501:                             # %OP6820.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2502:                             # %OP6820.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 288]
	mov	rdx, qword ptr [r11 + rax - 280]
	mov	rsi, qword ptr [r11 + rax - 272]
	mov	rdi, qword ptr [r11 + rax - 264]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_101] # xmm0 = [14717,0,0,0]
	jmp	.LBB5_430
.LBB5_2503:                             # %dynamic_jump_table
	xor	rsi, 14803
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2504:                             # %OP6868.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2505:                             # %OP6868.JUMPDEST
	mov	rax, rsi
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_96] # xmm0 = [14820,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 352]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 320]
	vmovups	ymm2, ymmword ptr [r11 + rax - 288]
	vmovups	ymm3, ymmword ptr [r11 + rax - 256]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	vmovups	ymm0, ymmword ptr [r11 + rax - 224]
	vmovups	ymmword ptr [r11 + rax + 160], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 192]
	vmovups	ymmword ptr [r11 + rax + 192], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 160]
	vmovups	ymmword ptr [r11 + rax + 224], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 128]
	vmovups	ymmword ptr [r11 + rax + 256], ymm0
	add	rsi, 10
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymmword ptr [r11 + rax + 288], ymm0
	jmp	.LBB5_2543
.LBB5_2506:                             # %dynamic_jump_table
	xor	rsi, 12046
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2507:                             # %OP5793.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_514
.LBB5_2508:                             # %dynamic_jump_table
	xor	rsi, 12198
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2509:                             # %OP5844.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_673
.LBB5_1857:                             # %dynamic_jump_table
	xor	rsi, 4516
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1858:                             # %OP2680.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r15, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_631
.LBB5_1968:                             # %dynamic_jump_table
	xor	rsi, 4782
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1969:                             # %OP2813.JUMPDEST.preheader.loopexit
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, rdi
	shl	rdx, 5
	mov	rax, qword ptr [r11 + rdx - 40]
	mov	rcx, qword ptr [r11 + rdx - 48]
	mov	rsi, qword ptr [r11 + rdx - 64]
	mov	rdx, qword ptr [r11 + rdx - 56]
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	jmp	.LBB5_60
.LBB5_2340:                             # %dynamic_jump_table
	xor	rsi, 4567
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1426:                             # %OP2702.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r15, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1427:                             # %OP2702.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2352]
	push	r15
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2328]
	mov	rcx, qword ptr [rbp - 2352]
	mov	rdx, qword ptr [rbp - 2344]
	mov	rsi, qword ptr [rbp - 2336]
	mov	qword ptr [r11 + rbx - 48], rsi
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 40], rax
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	rax, r14
	shl	rax, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax], -1
	mov	qword ptr [r11 + rax + 8], -1
	mov	qword ptr [r11 + rax + 24], 0
	mov	eax, esi
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_1428:                             # %OP7270.JUMPDEST
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [r15 + 1]
	mov	rax, r15
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.1429:                             # %OP7273.PUSH20
	lea	r10, [r15 + 2]
	mov	r12, r13
	shl	r12, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	mov	eax, dword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rax
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	bswap	rcx
	mov	qword ptr [rbx + 24], 0
	shrd	rcx, rdx, 32
	movbe	rsi, qword ptr [rsi + 148]
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	rdi, qword ptr [rbx + 8]
	xor	rdi, rdx
	mov	qword ptr [r14 + r12 + 8], rdx
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rdi
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	jne	.LBB5_1432
# %bb.1430:
	mov	r11, r14
	mov	rax, r15
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_1431:                             # %OP7317.JUMPDEST
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_176] # xmm0 = [15817,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	eax, 1
	jmp	.LBB5_74
.LBB5_2342:                             # %dynamic_jump_table
	xor	rsi, 4819
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2343:                             # %OP2845.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_107
.LBB5_2510:                             # %dynamic_jump_table
	xor	rsi, 13971
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2511:                             # %OP6504.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2512:                             # %OP6504.JUMPDEST
	mov	rax, rsi
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_97] # xmm0 = [11631,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 288]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 256]
	vmovups	ymm2, ymmword ptr [r11 + rax - 224]
	vmovups	ymm3, ymmword ptr [r11 + rax - 192]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	vmovups	ymm0, ymmword ptr [r11 + rax - 160]
	vmovups	ymmword ptr [r11 + rax + 160], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 128]
	vmovups	ymmword ptr [r11 + rax + 192], ymm0
	add	rsi, 8
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymmword ptr [r11 + rax + 224], ymm0
	jmp	.LBB5_2551
.LBB5_2513:                             # %dynamic_jump_table
	xor	rsi, 13602
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
.LBB5_2514:                             # %OP6352.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r10
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_113] # xmm0 = [13459,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 64]
	vmovups	ymm2, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	add	r10, 4
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	jmp	.LBB5_508
.LBB5_2515:                             # %dynamic_jump_table
	xor	rsi, 13641
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2516:                             # %OP6366.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.2517:                             # %OP6369.PUSH21
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_109] # ymm0 = [0,0,4294967296,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 16]
	movabs	rdi, 4294967296
	mov	qword ptr [rbx + 16], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r14 + r15 + 16], rax
	mov	qword ptr [r14 + r15], rdx
	mov	qword ptr [r14 + r15 + 24], rcx
	mov	qword ptr [r14 + r15 + 8], rsi
	mov	rdx, rcx
	shld	rdx, rax, 32
	shr	rcx, 32
	mov	qword ptr [rbx], rdx
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	qword ptr [rbx + 8], rcx
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_98] # xmm1 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm1
	shr	rax, 32
	xor	ecx, ecx
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	al, al
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	jne	.LBB5_3020
.LBB5_2518:                             # %OP6408.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 224]
	mov	rdx, qword ptr [r11 + rax - 216]
	mov	rsi, qword ptr [r11 + rax - 208]
	mov	rdi, qword ptr [r11 + rax - 200]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_112] # xmm0 = [13789,0,0,0]
	jmp	.LBB5_430
.LBB5_2519:                             # %OP4981.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_2730
.LBB5_1840:                             # %dynamic_jump_table
	xor	rsi, 1132
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.1841:                             # %OP605.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	jmp	.LBB5_69
.LBB5_2034:                             # %dynamic_jump_table
	xor	rsi, 1230
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2035:                             # %OP650.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_224
.LBB5_2359:                             # %dynamic_jump_table
	xor	rsi, 1281
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2360:                             # %OP672.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_90
.LBB5_2520:                             # %dynamic_jump_table
	xor	rsi, 6008
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2521:                             # %OP3349.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 2]
	lea	rdi, [rax + 1]
	jmp	.LBB5_230
.LBB5_2522:                             # %dynamic_jump_table
	xor	rsi, 6227
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_92
	jmp	.LBB5_3092
.LBB5_2523:                             # %dynamic_jump_table
	xor	rsi, 14381
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2524:                             # %OP6694.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1402
.LBB5_2525:                             # %OP3232.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rsi, rdi
	shl	rsi, 5
	mov	rcx, qword ptr [r11 + rsi - 136]
	mov	rax, qword ptr [r11 + rsi - 144]
	mov	rdx, qword ptr [r11 + rsi - 160]
	mov	rsi, qword ptr [r11 + rsi - 152]
	lea	r8, [rdi + 4]
.LBB5_2526:                             # %OP3232.JUMPDEST
	shl	rdi, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_164] # xmm0 = [5752,0,0,0]
	vmovups	ymmword ptr [r11 + rdi], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rdi - 224]
	vmovdqu	ymm1, ymmword ptr [r11 + rdi - 192]
	vmovdqu	ymmword ptr [r11 + rdi + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rdi + 64], ymm1
	mov	qword ptr [r11 + rdi + 104], rsi
	mov	qword ptr [r11 + rdi + 96], rdx
	mov	qword ptr [r11 + rdi + 112], rax
	mov	qword ptr [r11 + rdi + 120], rcx
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	jmp	.LBB5_2656
.LBB5_2527:                             # %dynamic_jump_table
	xor	rsi, 19007
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_508
	jmp	.LBB5_3092
.LBB5_2528:                             # %OP3933.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_101
.LBB5_2529:                             # %OP7900.JUMPDEST.loopexit
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB5_2809
.LBB5_2530:                             # %OP7648.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2562
.LBB5_2531:                             # %OP9979.JUMPDEST.loopexit
	mov	rax, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_2689
.LBB5_2532:                             # %OP10264.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_284
.LBB5_2533:                             # %OP10328.JUMPDEST.preheader.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, r15
	shl	r9, 5
	mov	rax, qword ptr [r11 + r9 - 72]
	mov	rcx, qword ptr [r11 + r9 - 80]
	mov	r14, qword ptr [r11 + r9 - 96]
	mov	rdx, qword ptr [r11 + r9 - 88]
	mov	rsi, qword ptr [r11 + r9 - 8]
	mov	rdi, qword ptr [r11 + r9 - 16]
	mov	r8, qword ptr [r11 + r9 - 24]
	mov	r9, qword ptr [r11 + r9 - 32]
	jmp	.LBB5_292
.LBB5_2534:                             # %OP10361.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_727
.LBB5_2535:                             # %OP10349.JUMPDEST.loopexit56160
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_743
.LBB5_2536:                             # %OP10409.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_732
.LBB5_2537:                             # %OP5567.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2538:                             # %OP5567.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 224]
	mov	rdx, qword ptr [r11 + rax - 216]
	mov	rsi, qword ptr [r11 + rax - 208]
	mov	rdi, qword ptr [r11 + rax - 200]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_123] # xmm0 = [11530,0,0,0]
	jmp	.LBB5_430
.LBB5_2539:                             # %OP5573.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax - 1]
	mov	r14, r13
	shl	r14, 5
	mov	rax, qword ptr [r11 + r14]
	mov	rcx, qword ptr [r11 + r14 + 8]
	or	rcx, qword ptr [r11 + r14 + 24]
	or	rax, qword ptr [r11 + r14 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rdx
	mov	qword ptr [r11 + r14 + 24], 0
	jne	.LBB5_2414
.LBB5_2540:                             # %OP5615.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_97] # xmm0 = [11631,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 288]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 256]
	vmovups	ymm2, ymmword ptr [r11 + rax - 224]
	vmovups	ymm3, ymmword ptr [r11 + rax - 192]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	vmovups	ymm0, ymmword ptr [r11 + rax - 160]
	vmovups	ymmword ptr [r11 + rax + 160], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 128]
	vmovups	ymmword ptr [r11 + rax + 192], ymm0
	add	r13, 8
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymmword ptr [r11 + rax + 224], ymm0
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jmp	.LBB5_2673
.LBB5_2541:                             # %OP7317.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r10, [rax + 2]
	jmp	.LBB5_1431
.LBB5_2542:                             # %OP9067.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2543:                             # %OP9067.JUMPDEST
	mov	r12, rsi
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_97] # xmm0 = [11631,0,0,0]
	vmovups	ymmword ptr [r11 + r12], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r12 - 288]
	vmovdqu	ymm1, ymmword ptr [r11 + r12 - 256]
	vmovups	ymm2, ymmword ptr [r11 + r12 - 224]
	vmovups	ymm3, ymmword ptr [r11 + r12 - 192]
	vmovups	ymmword ptr [r11 + r12 + 32], ymm0
	vmovdqu	ymmword ptr [r11 + r12 + 64], ymm1
	vmovups	ymmword ptr [r11 + r12 + 96], ymm2
	vmovups	ymmword ptr [r11 + r12 + 128], ymm3
	vmovups	ymm0, ymmword ptr [r11 + r12 - 160]
	vmovups	ymmword ptr [r11 + r12 + 160], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r12 - 128]
	vmovups	ymmword ptr [r11 + r12 + 192], ymm0
	lea	r13, [rsi + 8]
	vmovups	ymm0, ymmword ptr [r11 + r12 - 64]
	vmovups	ymmword ptr [r11 + r12 + 224], ymm0
	lea	rax, [rsi + 9]
	vmovups	ymm0, ymmword ptr [r11 + r12 - 32]
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	vmovups	ymmword ptr [r11 + r13], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r12 - 96]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	shl	rax, 5
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	vmovups	ymmword ptr [r11 + rax], ymm0
	lea	r14, [rsi + 11]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r12 + 320], ymm0
	mov	r13, rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1055
# %bb.2544:                             # %OP9079.MLOAD.contd
	add	r12, r15
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 320], rdi
	add	r13, 12
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14], 32
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 320], rdi
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	r9, qword ptr [r12 + 232]
	mov	rax, qword ptr [r12 + 248]
	mov	r8, qword ptr [r12 + 224]
	mov	r10, qword ptr [r12 + 240]
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	mov	rbx, r13
	shl	rbx, 5
	mov	qword ptr [r15 + rbx + 16], r10
	mov	qword ptr [r15 + rbx], r8
	mov	qword ptr [r15 + rbx + 24], rax
	mov	qword ptr [r15 + rbx + 8], r9
	mov	qword ptr [r12 + 440], rcx
	mov	qword ptr [r12 + 432], rdx
	mov	qword ptr [r12 + 424], rsi
	mov	qword ptr [r12 + 416], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2795
# %bb.2545:                             # %OP9086.PUSH1
	add	r14, r15
	add	rbx, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	r9, qword ptr [r12 + 264]
	mov	rax, qword ptr [r12 + 280]
	mov	r8, qword ptr [r12 + 256]
	mov	r10, qword ptr [r12 + 272]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 432], rdx
	mov	qword ptr [r12 + 416], rdi
	mov	qword ptr [r12 + 440], rcx
	mov	qword ptr [r12 + 424], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB5_2795
# %bb.2546:                             # %OP9091.PUSH1
	add	r13, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	vmovups	xmm0, xmmword ptr [r13 + 8]
	mov	rax, qword ptr [r13]
	mov	r8, qword ptr [r13 + 24]
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx], rax
	vmovups	xmmword ptr [rbx + 8], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r12 + 416], ymm0
	movzx	r8d, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], 0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_99] # xmm1 = [248,0,0,0]
	vmovdqu	ymmword ptr [r12 + 416], ymm1
	shl	rax, 56
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [r12 + 440], rcx
	mov	qword ptr [r12 + 432], rdx
	mov	qword ptr [r12 + 416], rdi
	mov	qword ptr [r12 + 424], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2795
# %bb.2547:                             # %OP9100.PUSH1
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	add	rax, r15
	mov	r15, rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 1
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	vmovups	ymm0, ymmword ptr [r12 + 224]
	mov	qword ptr [r12 + 248], rax
	mov	qword ptr [r12 + 224], rdx
	mov	qword ptr [r12 + 232], rsi
	mov	qword ptr [r12 + 240], rcx
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2448
# %bb.2548:                             # %OP9108.MLOAD.contd
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 32
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 320], rdi
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 328], rsi
	mov	r9, qword ptr [r12 + 232]
	mov	rax, qword ptr [r12 + 248]
	mov	r8, qword ptr [r12 + 224]
	mov	r10, qword ptr [r12 + 240]
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	mov	qword ptr [r12 + 320], r8
	mov	qword ptr [r12 + 328], r9
	mov	qword ptr [r12 + 336], r10
	mov	qword ptr [r12 + 344], rax
	add	r8, -32
	adc	r9, -1
	adc	r10, -1
	adc	rax, -1
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 320], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2448
# %bb.2549:                             # %OP9116.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 16]
	mov	r10, qword ptr [r12 + 248]
	mov	r8, qword ptr [r12 + 224]
	mov	r9, qword ptr [r12 + 232]
	mov	r11, qword ptr [r12 + 240]
	mov	qword ptr [r12 + 240], rsi
	mov	qword ptr [r12 + 224], rcx
	mov	qword ptr [r12 + 248], rax
	mov	qword ptr [r12 + 232], rdx
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	sub	rsp, 8
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2550:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
.LBB5_2551:                             # %OP8909.JUMPDEST
	mov	rcx, rsi
	shl	rcx, 5
	lea	rax, [r11 + rcx]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_107] # xmm0 = [19285,0,0,0]
	jmp	.LBB5_2675
.LBB5_2552:                             # %OP4498.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_359
.LBB5_2553:                             # %OP9121.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2665
.LBB5_2554:                             # %OP4540.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdx, [rax + 2]
	lea	rsi, [rax + 1]
	jmp	.LBB5_362
.LBB5_1305:                             # %OP1708.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
.LBB5_1306:                             # %OP1708.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	r14, 3
	mov	rdx, qword ptr [r13 + 80]
	mov	rsi, r14
	shl	rsi, 5
	xor	ecx, ecx
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 159
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	jae	.LBB5_1308
# %bb.1307:
	mov	r15, r14
	jmp	.LBB5_1310
.LBB5_2366:                             # %dynamic_jump_table
	xor	rsi, 924
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
.LBB5_1232:                             # %OP456.JUMPDEST.preheader
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [r14 + 1]
	shl	r14, 5
	mov	r13, rdi
	shl	r13, 5
	mov	r10, qword ptr [r11 + r14 - 8]
	mov	rcx, qword ptr [r11 + r14 - 16]
	mov	r12, qword ptr [r11 + r14 - 32]
	cmp	r12, qword ptr [r11 + r14 - 128]
	mov	rdx, qword ptr [r11 + r14 - 24]
	mov	rsi, rdx
	sbb	rsi, qword ptr [r11 + r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [r11 + r14 - 112]
	mov	qword ptr [r11 + r13 + 16], rcx
	mov	qword ptr [r11 + r13], r12
	mov	rsi, r10
	sbb	rsi, qword ptr [r11 + r14 - 104]
	mov	qword ptr [r11 + r13 + 24], r10
	mov	qword ptr [r11 + r13 + 8], rdx
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rsi
	mov	qword ptr [r11 + r14 + 24], 0
	jb	.LBB5_1233
.LBB5_1237:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_1238:                             # %OP475.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, rcx
	shl	r15, 5
	mov	rax, qword ptr [r11 + r15 - 160]
	lea	r14, [rcx - 5]
	mov	rcx, qword ptr [r11 + r15 - 200]
	mov	rsi, qword ptr [r11 + r15 - 216]
	mov	rdx, qword ptr [r11 + r15 - 208]
	mov	r8, r14
	shl	r8, 5
	mov	rdi, qword ptr [r11 + r15 - 224]
	add	rdi, rax
	adc	rsi, qword ptr [r11 + r15 - 152]
	adc	rdx, qword ptr [r11 + r15 - 144]
	adc	rcx, qword ptr [r11 + r15 - 136]
	mov	qword ptr [r11 + r15 - 224], rdi
	mov	qword ptr [r11 + r15 - 208], rdx
	mov	qword ptr [r11 + r15 - 216], rsi
	mov	qword ptr [r11 + r15 - 200], rcx
	xor	r9d, r9d
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 - 184], xmm0
	and	rax, 31
	mov	qword ptr [r11 + r15 - 192], rax
	mov	qword ptr [r11 + r15 - 168], 0
	sete	r9b
	mov	qword ptr [r11 + r8], r9
	vmovdqu	xmmword ptr [r11 + r8 + 8], xmm0
	mov	qword ptr [r11 + r8 + 24], 0
	je	.LBB5_1251
# %bb.1239:                             # %OP492.DUP1
	mov	r9, r12
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	lea	r12, [r8 - 3]
	add	r15, r11
	sub	rdi, rax
	sbb	rsi, 0
	sbb	rdx, 0
	sbb	rcx, 0
	mov	qword ptr [r15 - 160], rdi
	mov	qword ptr [r15 - 152], rsi
	mov	qword ptr [r15 - 144], rdx
	mov	qword ptr [r15 - 136], rcx
	mov	qword ptr [r15 - 128], rdi
	mov	qword ptr [r15 - 120], rsi
	mov	qword ptr [r15 - 112], rdx
	mov	qword ptr [r15 - 104], rcx
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3097
# %bb.1240:                             # %OP496.MLOAD.contd
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [rax - 1]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	rbx, rdi
	mov	qword ptr [r15 - 112], rsi
	mov	qword ptr [r15 - 128], rcx
	mov	qword ptr [r15 - 104], rax
	mov	qword ptr [r15 - 120], rdx
	shl	r12, 5
	mov	qword ptr [r13 + r12 + 16], 0
	mov	qword ptr [r13 + r12], 1
	mov	qword ptr [r13 + r12 + 24], 0
	mov	qword ptr [r13 + r12 + 8], 0
	lea	rsi, [r15 - 64]
	mov	rax, rdi
	shl	rax, 5
	xor	ecx, ecx
	mov	edx, 32
	sub	rdx, qword ptr [r15 - 192]
	mov	edi, 0
	sbb	rdi, qword ptr [r15 - 184]
	mov	r8d, 0
	sbb	r8, qword ptr [r15 - 176]
	sbb	rcx, qword ptr [r15 - 168]
	mov	qword ptr [r15 - 64], rdx
	mov	qword ptr [r15 - 56], rdi
	mov	qword ptr [r15 - 48], r8
	mov	qword ptr [r15 - 40], rcx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovups	ymmword ptr [r13 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB5_1249
# %bb.1241:                             # %OP503.SUB
	add	r12, r13
	mov	r8, qword ptr [r15 - 64]
	mov	r9, qword ptr [r15 - 56]
	mov	rax, qword ptr [r15 - 48]
	mov	r10, qword ptr [r15 - 40]
	not	r10
	not	rax
	not	r9
	not	r8
	add	r8, qword ptr [r15 - 96]
	adc	r9, qword ptr [r15 - 88]
	adc	rax, qword ptr [r15 - 80]
	adc	r10, qword ptr [r15 - 72]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, -4
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	and	rax, qword ptr [r13 + rbx + 16]
	and	r8, qword ptr [r13 + rbx]
	and	r10, qword ptr [r13 + rbx + 24]
	and	r9, qword ptr [r13 + rbx + 8]
	mov	qword ptr [r13 + rbx + 8], r9
	mov	qword ptr [r13 + rbx + 24], r10
	mov	qword ptr [r13 + rbx], r8
	mov	qword ptr [r13 + rbx + 16], rax
	mov	rsi, qword ptr [r15 - 152]
	mov	rcx, qword ptr [r15 - 136]
	mov	rdi, qword ptr [r15 - 160]
	mov	rdx, qword ptr [r15 - 144]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1242:                             # %OP508.PUSH1
	add	rbx, r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 - 136]
	mov	rcx, qword ptr [r15 - 144]
	mov	rdx, qword ptr [r15 - 152]
	mov	rsi, qword ptr [r15 - 160]
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm0, xmmword ptr [r15 - 224]
	vmovdqa	xmm1, xmmword ptr [r15 - 208]
	mov	qword ptr [r15 - 224], rsi
	mov	qword ptr [r15 - 216], rdx
	mov	qword ptr [r15 - 208], rcx
	mov	qword ptr [r15 - 200], rax
	vmovdqa	xmmword ptr [r15 - 144], xmm1
	vmovdqa	xmmword ptr [r15 - 160], xmm0
	mov	r11, r13
	jmp	.LBB5_1251
.LBB5_2555:                             # %dynamic_jump_table
	xor	rsi, 15599
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2556:                             # %OP7232.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [r14 + 1]
	jmp	.LBB5_636
.LBB5_2557:                             # %OP3435.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 32]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	r10, qword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 8]
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 64]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 48]
	mov	qword ptr [r11 + rax - 40], rsi
	mov	qword ptr [r11 + rax - 48], r10
	mov	qword ptr [r11 + rax - 56], rdx
	mov	qword ptr [r11 + rax - 64], rcx
	vmovdqa	xmmword ptr [r11 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 32], xmm0
	lea	r15, [r14 - 1]
	mov	rbx, r11
	mov	r11, r15
	shl	r11, 5
	mov	rdi, rdx
	or	rdi, rsi
	mov	r8, rcx
	or	r8, r10
	xor	r9d, r9d
	or	r8, rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + r11 + 8], xmm0
	sete	r9b
	mov	qword ptr [rbx + r11], r9
	mov	qword ptr [rbx + r11 + 24], 0
	mov	r9, qword ptr [rbp - 128]       # 8-byte Reload
	mov	rdi, qword ptr [r9 + 128]
	mov	r8, qword ptr [r9 + 136]
	mov	r9d, dword ptr [r9 + 144]
	je	.LBB5_2900
# %bb.2558:                             # %OP3442.PUSH2
	add	rax, rbx
	add	r11, rbx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_157] # xmm0 = [6275,0,0,0]
	vmovups	ymmword ptr [r11], ymm0
	bswap	r8
	bswap	r9
	shrd	r9, r8, 32
	bswap	rdi
	shrd	r8, rdi, 32
	shr	rdi, 32
	mov	qword ptr [rax + 16], rdi
	mov	qword ptr [rax + 8], r8
	mov	qword ptr [rax], r9
	mov	qword ptr [rax + 24], 0
	vmovdqu	ymm0, ymmword ptr [rax - 96]
	vmovdqu	ymmword ptr [rax + 32], ymm0
	mov	rdi, r14
	add	rdi, 3
	mov	qword ptr [rax + 80], r10
	mov	qword ptr [rax + 64], rcx
	mov	qword ptr [rax + 72], rdx
	mov	qword ptr [rax + 88], rsi
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	r11, rbx
	jmp	.LBB5_2656
.LBB5_1309:                             # %OP1723.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1310:                             # %OP1723.JUMPDEST
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rbx, qword ptr [r11 + r15 - 64]
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 56], r13
	mov	qword ptr [r11 + r15 + 48], r12
	mov	qword ptr [r11 + r15 + 40], r14
	mov	qword ptr [r11 + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3472]
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3456]
	mov	rcx, qword ptr [rbp - 3472]
	mov	rdx, qword ptr [rbp - 3464]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rax + r15 + 32], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rbx
	add	rbx, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rbx
	sub	rsp, 8
	lea	rdi, [rbp - 3440]
	mov	rsi, rbx
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	mov	rbx, qword ptr [rbp - 88]       # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3424]
	mov	r10, qword ptr [rbp - 3440]
	mov	rdx, qword ptr [rbp - 3432]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], r13
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 8], r14
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 16], r12
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rsi + r15], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rsi + r15 - 16]
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [rsi + r15 - 32]
	mov	qword ptr [rbp - 144], r11      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rsi + r15 - 24]
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rsi + r15 - 8]
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], r10
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], r9
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], rdi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], r11
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rcx
	mov	rsi, rcx
	add	rsi, 64
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 1360]
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1360]
	mov	rcx, qword ptr [rbp - 1352]
	mov	rdx, qword ptr [rbp - 1336]
	mov	rsi, qword ptr [rbp - 1344]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 16], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 144], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 152], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 128], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 136], r14
	add	rsi, 96
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], rdx
	sub	rsp, 8
	lea	rdi, [rbp - 1328]
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	push	rbx
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1312]
	mov	rcx, qword ptr [rbp - 1328]
	mov	rdx, qword ptr [rbp - 1320]
	mov	rsi, qword ptr [rbp - 1304]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 56], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 40], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 + 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rcx
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	add	rcx, r8
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	adc	rsi, r14
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rdx, r12
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	adc	rdi, r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], rdi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 120], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 104], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 112], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 96], r8
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 6
	mov	rax, r8
	add	rax, 160
	mov	rcx, r14
	adc	rcx, 0
	mov	rdx, r12
	adc	rdx, 0
	mov	rsi, r13
	adc	rsi, 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 152], rsi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 + 136], rcx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 144], rdx
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rcx + r15 + 128], rax
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r8
	mov	qword ptr [rax + rbx], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], r12
	add	rsi, 128
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 184], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 168], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 160], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 176], r12
	sub	rsp, 8
	lea	rdi, [rbp - 1296]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	push	qword ptr [rbp - 88]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1272]
	mov	rcx, qword ptr [rbp - 1296]
	mov	rdx, qword ptr [rbp - 1288]
	mov	rsi, qword ptr [rbp - 1280]
	mov	qword ptr [r11 + r15 + 176], rsi
	mov	qword ptr [r11 + r15 + 160], rcx
	mov	qword ptr [r11 + r15 + 184], rax
	mov	qword ptr [r11 + r15 + 168], rdx
	mov	qword ptr [r11 + r15 + 240], rsi
	mov	qword ptr [r11 + r15 + 224], rcx
	mov	qword ptr [r11 + r15 + 248], rax
	mov	qword ptr [r11 + r15 + 232], rdx
	movabs	rdi, 4294967297
	cmp	rcx, rdi
	sbb	rdx, 0
	sbb	rsi, 0
	sbb	rax, 0
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 16], 0
	mov	qword ptr [r11 + rbx + 8], 0
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_1323
.LBB5_1311:                             # %OP1767.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	add	rsi, qword ptr [r11 + rax - 96]
	adc	rdx, qword ptr [r11 + rax - 88]
	mov	rcx, qword ptr [r11 + rax - 16]
	adc	rcx, qword ptr [r11 + rax - 80]
	adc	r8, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax - 32], rsi
	mov	qword ptr [r11 + rax - 24], rdx
	mov	qword ptr [r11 + rax - 16], rcx
	mov	qword ptr [r11 + rax - 8], r8
	mov	r9, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rbx, qword ptr [r11 + rax - 120]
	mov	r12, rsi
	add	r12, 32
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmp	rdi, r12
	mov	rdi, rbx
	sbb	rdi, r13
	mov	rdi, r9
	sbb	rdi, r14
	mov	r10, qword ptr [r11 + rax - 104]
	mov	rdi, r10
	sbb	rdi, r15
	mov	qword ptr [r11 + rax + 64], rsi
	mov	qword ptr [r11 + rax + 72], rdx
	mov	qword ptr [r11 + rax + 80], rcx
	mov	qword ptr [r11 + rax + 88], r8
	mov	qword ptr [r11 + rax + 32], r12
	mov	qword ptr [r11 + rax + 40], r13
	mov	qword ptr [r11 + rax + 48], r14
	mov	qword ptr [r11 + rax + 56], r15
	setae	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rax], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rax + 8], xmm0
	mov	qword ptr [r11 + rax + 24], 0
	jb	.LBB5_1322
# %bb.1312:
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1313:                             # %OP1781.JUMPDEST
	lea	r12, [rbx + 1]
	shl	rbx, 5
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], rsi
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 24], r8
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1264]
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1264]
	mov	rcx, qword ptr [rbp - 1256]
	mov	rdx, qword ptr [rbp - 1248]
	mov	rdi, qword ptr [rbp - 1240]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 8], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 16], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 24], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + rbx - 32], rax
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rsi, r12
	shl	rsi, 5
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r8, qword ptr [r8 + rbx - 40]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rbx - 40], r15
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r9, qword ptr [r9 + rbx - 48]
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + rbx - 48], r14
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [r10 + rbx - 56]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + rbx - 56], r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rbx - 64]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r8 + rbx - 64], r12
	add	r12, rax
	adc	r13, rcx
	adc	r14, rdx
	adc	r15, rdi
	cmp	qword ptr [rbp - 80], r12       # 8-byte Folded Reload
	sbb	qword ptr [rbp - 96], r13       # 8-byte Folded Spill
	sbb	qword ptr [rbp - 88], r14       # 8-byte Folded Spill
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	r14, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], r14
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 16], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 8], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx], r11
	sbb	qword ptr [rbp - 112], r15      # 8-byte Folded Spill
	setae	r8b
	movabs	r9, 4294967297
	cmp	rax, r9
	mov	r9, rcx
	sbb	r9, 0
	mov	r9, rdx
	sbb	r9, 0
	mov	r9, rdi
	sbb	r9, 0
	setb	r9b
	xor	r10d, r10d
	movabs	r11, 4294967296
	cmp	r11, rax
	mov	r11d, 0
	sbb	r11, rcx
	mov	r11d, 0
	sbb	r11, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	sbb	r10, rdi
	mov	qword ptr [r11 + rbx + 120], rdi
	mov	qword ptr [r11 + rbx + 112], rdx
	mov	qword ptr [r11 + rbx + 104], rcx
	mov	qword ptr [r11 + rbx + 96], rax
	setb	al
	movzx	eax, al
	mov	qword ptr [r11 + rbx + 64], rax
	mov	qword ptr [r11 + rbx + 88], 0
	mov	qword ptr [r11 + rbx + 80], 0
	mov	qword ptr [r11 + rbx + 72], 0
	and	r9b, r8b
	movzx	eax, r9b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rax
	mov	qword ptr [r11 + rsi + 24], 0
	test	al, al
	je	.LBB5_1321
# %bb.1314:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_1315:                             # %OP1805.JUMPDEST
	mov	r15, r10
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [r11 + r15 - 32]
	vmovdqa	xmm1, xmmword ptr [r11 + r15 - 16]
	vmovaps	xmm2, xmmword ptr [r11 + r15 - 96]
	vmovaps	xmm3, xmmword ptr [r11 + r15 - 80]
	vmovdqa	xmmword ptr [r11 + r15 - 80], xmm1
	vmovaps	xmmword ptr [r11 + r15 - 96], xmm0
	mov	rcx, qword ptr [r11 + r15 - 56]
	mov	rax, qword ptr [r11 + r15 - 40]
	mov	rdx, qword ptr [r11 + r15 - 64]
	mov	rsi, qword ptr [r11 + r15 - 48]
	vmovaps	xmmword ptr [r11 + r15 - 48], xmm3
	vmovaps	xmmword ptr [r11 + r15 - 64], xmm2
	mov	qword ptr [r11 + r15 - 16], rsi
	mov	qword ptr [r11 + r15 - 32], rdx
	mov	qword ptr [r11 + r15 - 8], rax
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15], rdx
	mov	qword ptr [r11 + r15 + 24], rax
	mov	qword ptr [r11 + r15 + 8], rcx
	lea	r8, [r10 + 2]
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	lea	rdi, [r10 + 3]
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	shl	r8, 5
	add	rdx, 31
	adc	rcx, 0
	adc	rsi, 0
	adc	rax, 0
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	shl	rdi, 5
	mov	qword ptr [r11 + rdi], rdx
	mov	qword ptr [r11 + rdi + 8], rcx
	mov	qword ptr [r11 + rdi + 16], rsi
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	qword ptr [r11 + rdi + 24], rax
	and	rdx, -32
	add	rdx, 32
	adc	rcx, 0
	adc	rsi, 0
	adc	rax, 0
	mov	qword ptr [r11 + r15 + 48], rsi
	mov	qword ptr [r11 + r15 + 40], rcx
	mov	qword ptr [r11 + r15 + 32], rdx
	mov	qword ptr [r11 + r15 + 56], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	r13, r8
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1210
# %bb.1316:                             # %OP1820.MLOAD.contd
	add	r15, r14
	add	r13, r14
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, r14
	mov	r14, rax
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r15 + 32]
	add	r8, rdx
	mov	qword ptr [r15 + 32], rdx
	mov	r9, qword ptr [r15 + 40]
	adc	r9, rsi
	mov	r10, qword ptr [r15 + 48]
	adc	r10, rcx
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 40], rsi
	mov	r11, qword ptr [r15 + 56]
	adc	r11, rax
	mov	qword ptr [r15 + 56], rax
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r13 + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	sub	rsp, 8
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	r12
	push	r11
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1317:                             # %OP1826.DUP1
	mov	rsi, qword ptr [r15 + 40]
	mov	rcx, qword ptr [r15 + 56]
	mov	rdi, qword ptr [r15 + 32]
	mov	rdx, qword ptr [r15 + 48]
	vmovdqa	xmm0, xmmword ptr [r15 - 64]
	vmovdqa	xmm1, xmmword ptr [r15 - 48]
	vmovaps	xmm2, xmmword ptr [r15 - 32]
	vmovaps	xmm3, xmmword ptr [r15 - 16]
	mov	qword ptr [r15 - 48], rdx
	mov	qword ptr [r15 - 64], rdi
	mov	qword ptr [r15 - 40], rcx
	mov	qword ptr [r15 - 56], rsi
	vmovdqa	xmmword ptr [r15 - 16], xmm1
	vmovdqa	xmmword ptr [r15 - 32], xmm0
	mov	r9, qword ptr [r15 + 8]
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r10, qword ptr [r15 + 16]
	vmovaps	xmmword ptr [r15 + 16], xmm3
	vmovaps	xmmword ptr [r15], xmm2
	mov	qword ptr [r15 + 48], r10
	mov	qword ptr [r15 + 32], r8
	mov	qword ptr [r15 + 56], rax
	mov	qword ptr [r15 + 40], r9
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r15 + 152], rcx
	mov	qword ptr [r15 + 144], rdx
	mov	qword ptr [r15 + 136], rsi
	mov	qword ptr [r15 + 128], rdi
	sub	rsp, 8
	push	r12
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.1318:                             # %OP1834.PUSH1
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	r12, [rax + 5]
	mov	rdx, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rdx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	mov	qword ptr [r13 + 24], rdx
	mov	rax, qword ptr [r15 - 32]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	mov	r8, qword ptr [r15 - 16]
	mov	r9, qword ptr [r15 - 24]
	mov	r10, qword ptr [r15 - 8]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	qword ptr [r14], rax
	mov	r11, qword ptr [r15 + 8]
	mov	rbx, qword ptr [r15 + 24]
	mov	r14, qword ptr [r15]
	mov	rax, qword ptr [r15 + 16]
	mov	qword ptr [r15 + 144], rax
	mov	qword ptr [r15 + 128], r14
	mov	qword ptr [r15 + 136], r11
	mov	qword ptr [r15 + 152], rbx
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	shl	r12, 5
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r12 + 16], rax
	mov	qword ptr [r13 + r12], r14
	mov	qword ptr [r13 + r12 + 24], rbx
	mov	qword ptr [r13 + r12 + 8], r11
	mov	qword ptr [r15 + 216], r10
	mov	qword ptr [r15 + 208], r8
	mov	qword ptr [r15 + 200], r9
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r15 + 192], rax
	mov	qword ptr [r15 + 248], rdx
	mov	qword ptr [r15 + 240], rcx
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 224], rdi
	lea	rbx, [r13 + r12]
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, rbx
	call	__revmc_builtin_calldatacopy@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.1319:                             # %OP1842.PUSH1
	mov	rcx, qword ptr [r15 + 88]
	mov	rdi, qword ptr [r15 + 64]
	mov	rsi, qword ptr [r15 + 72]
	mov	rdx, qword ptr [r15 + 80]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	add	rdi, qword ptr [r15 + 128]
	adc	rsi, qword ptr [r15 + 136]
	adc	rdx, qword ptr [r15 + 144]
	adc	rcx, qword ptr [r15 + 152]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rax]
	vpxor	xmm1, xmm1, xmm1
	vmovdqu	ymmword ptr [rax], ymm1
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	qword ptr [r15 + 152], rcx
	mov	qword ptr [r15 + 144], rdx
	mov	qword ptr [r15 + 136], rsi
	mov	qword ptr [r15 + 128], rdi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r8d, r8d
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1210
# %bb.1320:                             # %OP1849.POP
	vmovaps	xmm0, xmmword ptr [r15 + 32]
	vmovaps	xmm1, xmmword ptr [r15 + 48]
	vmovups	ymm2, ymmword ptr [r15 - 64]
	vmovaps	xmmword ptr [r15 - 48], xmm1
	vmovaps	xmmword ptr [r15 - 64], xmm0
	vmovups	ymmword ptr [r15 - 160], ymm2
	vmovdqa	xmm0, xmmword ptr [r15 - 128]
	vmovdqa	xmm1, xmmword ptr [r15 - 112]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_242] # xmm2 = [11859,0]
	vmovups	ymmword ptr [r15 - 128], ymm2
	vmovdqa	xmmword ptr [r15 + 48], xmm1
	vmovdqa	xmmword ptr [r15 + 32], xmm0
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	add	r10, -4
	xor	ecx, ecx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	esi, 11859
	xor	r13d, r13d
	xor	edi, edi
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1275:                             # %OP758.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rcx
	mov	r15, rcx
	jmp	.LBB5_241
.LBB5_1279:                             # %OP1024.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB5_268
.LBB5_1278:                             # %OP986.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r9, qword ptr [r11 + rax - 72]
	mov	r12, qword ptr [r11 + rax - 80]
	mov	r15, qword ptr [r11 + rax - 88]
	mov	r14, qword ptr [r11 + rax - 96]
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	jmp	.LBB5_264
.LBB5_1277:                             # %OP881.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	r9, qword ptr [r11 + rax - 72]
	mov	r12, qword ptr [r11 + rax - 80]
	mov	r15, qword ptr [r11 + rax - 88]
	mov	r14, qword ptr [r11 + rax - 96]
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	jmp	.LBB5_253
.LBB5_2559:                             # %dynamic_jump_table
	xor	rsi, 16505
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2560:                             # %OP7604.JUMPDEST
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rdi
	shl	r14, 5
	mov	rax, qword ptr [r11 + r14 - 48]
	mov	rcx, qword ptr [r11 + r14 - 64]
	mov	rdx, qword ptr [r11 + r14 - 56]
	mov	rsi, qword ptr [r11 + r14 - 40]
	mov	qword ptr [r11 + r14 + 24], rsi
	mov	qword ptr [r11 + r14 + 8], rdx
	mov	qword ptr [r11 + r14 + 16], rax
	mov	qword ptr [r11 + r14], rcx
	lea	r13, [rdi - 1]
	mov	r15, r13
	shl	r13, 5
	mov	rdi, qword ptr [r11 + r13 + 8]
	mov	r8, qword ptr [r11 + r13 + 24]
	mov	r9, qword ptr [r11 + r13 + 16]
	cmp	qword ptr [r11 + r13], rcx
	sbb	rdi, rdx
	sbb	r9, rax
	sbb	r8, rsi
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r13 + 8], xmm0
	mov	qword ptr [r11 + r13], rax
	mov	qword ptr [r11 + r13 + 24], 0
	jb	.LBB5_3002
# %bb.2561:
	mov	r10, r15
.LBB5_2562:                             # %OP7648.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_92] # xmm0 = [16616,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rcx, qword ptr [r11 + rax - 96]
	mov	rdx, qword ptr [r11 + rax - 88]
	mov	rsi, qword ptr [r11 + rax - 80]
	mov	rdi, qword ptr [r11 + rax - 72]
	mov	qword ptr [r11 + rax + 56], rdi
	mov	qword ptr [r11 + rax + 48], rsi
	mov	qword ptr [r11 + rax + 40], rdx
	mov	qword ptr [r11 + rax + 32], rcx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_88] # xmm0 = [8655,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 64], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 32]
	vmovups	ymmword ptr [r11 + rax + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_93] # xmm0 = [16610,0,0,0]
	jmp	.LBB5_2747
.LBB5_2563:                             # %OP8628.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_3
.LBB5_2564:                             # %dynamic_jump_table
	xor	rsi, 21339
	or	rsi, r13
	or	rsi, rcx
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3092
# %bb.2565:                             # %OP10029.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2566:                             # %OP10029.JUMPDEST
	mov	r15, rsi
	shl	r15, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	vmovups	ymmword ptr [r13 + r15 + 32], ymm0
	mov	eax, dword ptr [r13 + r15 - 144]
	vmovaps	xmm0, xmmword ptr [r13 + r15 - 160]
	vmovaps	xmmword ptr [r13 + r15 + 64], xmm0
	mov	qword ptr [r13 + r15 + 80], rax
	mov	qword ptr [r13 + r15 + 88], 0
	vmovups	ymm0, ymmword ptr [r13 + r15 - 96]
	vmovups	ymmword ptr [r13 + r15 + 96], ymm0
	vmovups	ymm0, ymmword ptr [r13 + r15 - 128]
	vmovups	ymmword ptr [r13 + r15 + 128], ymm0
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	lea	r14, [rsi + 6]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + r15 + 160], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2978
# %bb.2567:                             # %OP10038.MLOAD.contd
	add	r15, r13
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 184], rsi
	mov	qword ptr [r15 + 168], rdx
	mov	qword ptr [r15 + 176], rax
	mov	qword ptr [r15 + 160], rcx
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 24], rsi
	mov	qword ptr [r13 + r14 + 16], rax
	mov	qword ptr [r13 + r14 + 8], rdx
	mov	qword ptr [r13 + r14], rcx
	mov	rcx, qword ptr [r15 + 152]
	mov	rdx, qword ptr [r15 + 144]
	mov	rdi, qword ptr [r15 + 128]
	mov	rsi, qword ptr [r15 + 136]
	mov	qword ptr [r15 + 224], rdi
	mov	qword ptr [r15 + 232], rsi
	mov	qword ptr [r15 + 240], rdx
	mov	qword ptr [r15 + 248], rcx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	lea	r14, [rax + 9]
	mov	qword ptr [r15 + 272], rdx
	mov	qword ptr [r15 + 280], rcx
	mov	qword ptr [r15 + 256], rdi
	mov	qword ptr [r15 + 264], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2978
# %bb.2568:                             # %OP10042.MLOAD.contd
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	rdx, qword ptr [r15 + 224]
	mov	rax, qword ptr [r15 + 232]
	mov	rcx, qword ptr [r15 + 248]
	mov	rsi, qword ptr [r15 + 240]
	mov	qword ptr [r15 + 240], r10
	mov	qword ptr [r15 + 248], r9
	mov	qword ptr [r15 + 224], rdi
	mov	qword ptr [r15 + 232], r8
	mov	qword ptr [r15 + 272], rsi
	mov	qword ptr [r15 + 280], rcx
	mov	qword ptr [r15 + 256], rdx
	mov	qword ptr [r15 + 264], rax
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13 + r14], ymm0
	add	rdx, 32
	adc	rax, 0
	adc	rsi, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 224], rdx
	mov	qword ptr [r15 + 240], rsi
	mov	qword ptr [r15 + 232], rax
	mov	qword ptr [r15 + 248], rcx
	mov	qword ptr [r15 + 272], r10
	mov	qword ptr [r15 + 256], rdi
	mov	qword ptr [r15 + 280], r9
	mov	qword ptr [r15 + 264], r8
	mov	qword ptr [r13 + r14 + 16], r10
	mov	qword ptr [r13 + r14], rdi
	mov	qword ptr [r13 + r14 + 8], r8
	mov	qword ptr [r13 + r14 + 24], r9
	vmovdqu	ymm0, ymmword ptr [r15 + 192]
	vmovdqu	ymmword ptr [r15 + 320], ymm0
	mov	r14, qword ptr [rbp - 104]      # 8-byte Reload
	add	r14, 12
	mov	qword ptr [r15 + 352], rdx
	mov	qword ptr [r15 + 368], rsi
	mov	qword ptr [r15 + 360], rax
	mov	qword ptr [r15 + 376], rcx
	mov	r11, r13
	jmp	.LBB5_2859
.LBB5_1214:                             # %OP11.JUMPDEST.loopexit
	mov	r13, r8
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	jmp	.LBB5_42
.LBB5_1216:                             # %OP110.JUMPDEST.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	mov	rsi, qword ptr [r11 + rdx - 8]
	mov	rcx, qword ptr [r11 + rdx - 16]
	mov	rax, qword ptr [r11 + rdx - 32]
	mov	rbx, qword ptr [r11 + rdx - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_177
.LBB5_2569:                             # %OP8645.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_5
.LBB5_1215:                             # %OP64.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdi, 5
	mov	rsi, qword ptr [r11 + rdi - 8]
	mov	rcx, qword ptr [r11 + rdi - 16]
	mov	rax, qword ptr [r11 + rdi - 32]
	mov	rbx, qword ptr [r11 + rdi - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_308
.LBB5_1217:                             # %OP128.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_130
.LBB5_2570:                             # %OP7491.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_431
.LBB5_2571:                             # %dynamic_jump_table
	xor	rsi, 10975
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2572:                             # %OP5380.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_376
.LBB5_1324:                             # %OP1781.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, rsi
	add	rax, 32
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	jmp	.LBB5_1313
.LBB5_1325:                             # %OP1865.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_511
.LBB5_2573:                             # %OP8373.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_406
.LBB5_2574:                             # %OP3019.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_156
.LBB5_2575:                             # %OP9406.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2778
.LBB5_2576:                             # %OP3025.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	jne	.LBB5_1955
.LBB5_2577:                             # %OP3067.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 160]
	mov	rdx, qword ptr [r11 + rax - 152]
	mov	rsi, qword ptr [r11 + rax - 144]
	mov	rdi, qword ptr [r11 + rax - 136]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_169] # xmm0 = [5422,0,0,0]
	jmp	.LBB5_430
.LBB5_2578:                             # %dynamic_jump_table
	xor	rsi, 18528
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2579:                             # %OP8549.JUMPDEST.loopexit56157
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2580
.LBB5_2585:                             # %dynamic_jump_table
	xor	rsi, 18774
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2586:                             # %OP8696.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_518
.LBB5_2587:                             # %OP4394.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2588:                             # %OP4394.JUMPDEST
	lea	r14, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_132] # xmm0 = [11,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_371
# %bb.2589:                             # %OP4397.PUSH2
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_149] # xmm0 = [8629,0,0,0]
	vmovups	ymmword ptr [r15 + r14], ymm0
	vmovdqu	ymm1, ymmword ptr [rbx]
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15 + r14], ymm1
	add	r13, 3
	vmovdqu	ymm0, ymmword ptr [rbx - 160]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	r11, r15
.LBB5_2590:                             # %OP7971.JUMPDEST
	mov	r15, r13
	shl	r15, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	lea	r14, [r13 + 2]
	mov	rax, qword ptr [r11 + r15 - 40]
	mov	rcx, qword ptr [r11 + r15 - 48]
	mov	rdx, qword ptr [r11 + r15 - 64]
	mov	rsi, qword ptr [r11 + r15 - 56]
	mov	rbx, r14
	shl	rbx, 5
	mov	rdi, qword ptr [r11 + r15 - 32]
	add	rdi, rdx
	mov	r8, qword ptr [r11 + r15 - 24]
	adc	r8, rsi
	mov	r9, qword ptr [r11 + r15 - 16]
	adc	r9, rcx
	mov	r10, qword ptr [r11 + r15 - 8]
	adc	r10, rax
	mov	qword ptr [r11 + r15 + 32], rdi
	mov	qword ptr [r11 + r15 + 40], r8
	mov	qword ptr [r11 + r15 + 48], r9
	mov	qword ptr [r11 + r15 + 56], r10
	mov	qword ptr [r11 + r15 + 96], rdi
	mov	qword ptr [r11 + r15 + 104], r8
	mov	qword ptr [r11 + r15 + 112], r9
	mov	qword ptr [r11 + r15 + 120], r10
	cmp	rdi, rdx
	sbb	r8, rsi
	sbb	r9, rcx
	sbb	r10, rax
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_23
# %bb.2591:                             # %OP7982.PUSH1
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	add	r15, r11
	add	rbx, r11
	add	r13, 4
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15 + 96], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.2592:                             # %OP7984.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	r13, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r13 + r14 + 24], rax
	mov	qword ptr [r13 + r14 + 16], 0
	mov	qword ptr [r13 + r14], 0
	mov	qword ptr [r13 + r14 + 8], 0
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r15 + 160], rdi
	mov	qword ptr [r15 + 184], rcx
	mov	qword ptr [r15 + 168], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2593:                             # %OP7988.PUSH1
	add	r13, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r15 + 96]
	mov	rsi, qword ptr [r15 + 104]
	mov	rcx, qword ptr [r15 + 120]
	mov	rdx, qword ptr [r15 + 112]
	mov	qword ptr [r15 + 208], rdx
	mov	qword ptr [r15 + 216], rcx
	mov	qword ptr [r15 + 192], rdi
	mov	qword ptr [r15 + 200], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 160], rdi
	mov	qword ptr [r15 + 168], rsi
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r15 + 184], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2594:                             # %OP7993.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_220] # xmm0 = [27,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r15 + 96]
	mov	rsi, qword ptr [r15 + 104]
	mov	rcx, qword ptr [r15 + 120]
	mov	rdx, qword ptr [r15 + 112]
	mov	qword ptr [r15 + 208], rdx
	mov	qword ptr [r15 + 216], rcx
	mov	qword ptr [r15 + 192], rdi
	mov	qword ptr [r15 + 200], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 160], rdi
	mov	qword ptr [r15 + 168], rsi
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r15 + 184], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 27
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2595:                             # %OP7998.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_221] # ymm0 = [7813594720394805248,8029390848747991654,4188454737263817833,6008195963164914792]
	mov	qword ptr [rbp - 56], r13       # 8-byte Spill
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r15 + 96]
	mov	rsi, qword ptr [r15 + 104]
	mov	rcx, qword ptr [r15 + 120]
	mov	rdx, qword ptr [r15 + 112]
	mov	qword ptr [r15 + 208], rdx
	mov	qword ptr [r15 + 216], rcx
	mov	qword ptr [r15 + 192], rdi
	mov	qword ptr [r15 + 200], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 160], rdi
	mov	qword ptr [r15 + 168], rsi
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r15 + 184], rcx
	sub	rsp, 8
	movabs	rax, 6008195963164914792
	movabs	r10, 4188454737263817833
	movabs	r8, 7813594720394805248
	movabs	r9, 8029390848747991654
	push	r12
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2596:                             # %OP8003.SWAP1
	mov	rax, qword ptr [r15 + 120]
	mov	r8, qword ptr [r15 + 96]
	mov	r9, qword ptr [r15 + 104]
	mov	r10, qword ptr [r15 + 112]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3056
# %bb.2597:                             # %OP8004.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 16], 0
	mov	qword ptr [r11], 100
	mov	qword ptr [r11 + 24], 0
	mov	qword ptr [r11 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rsi
	mov	qword ptr [r15 + 120], rax
	mov	qword ptr [r15 + 104], rcx
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2598:                             # %OP6042.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 2]
	lea	r15, [rax + 1]
	jmp	.LBB5_413
.LBB5_2599:                             # %OP6086.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_415
.LBB5_2600:                             # %OP6175.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 2]
	lea	r15, [rax + 1]
	jmp	.LBB5_1337
.LBB5_1333:                             # %OP1978.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1334:                             # %OP1978.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 3632]
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3616]
	mov	rcx, qword ptr [rbp - 3632]
	mov	rdx, qword ptr [rbp - 3624]
	mov	rsi, r14
	shl	rsi, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], -1
	mov	qword ptr [r11 + rsi], -1
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_1335:                             # %OP6134.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rcx + 1]
	mov	rax, rcx
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	mov	r12, rcx
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1336:                             # %OP6137.PUSH20
	lea	r8, [r12 + 2]
	mov	r12, r15
	shl	r12, 5
	mov	eax, dword ptr [rbx + 16]
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	movbe	rsi, qword ptr [rsi + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r12 + 16], rsi
	mov	qword ptr [r14 + r12], rcx
	mov	rcx, qword ptr [rbx + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r12 + 8], rdi
	mov	qword ptr [r14 + r12 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	r11, r14
	jne	.LBB5_1350
.LBB5_1337:                             # %OP6175.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rax, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 32]
	mov	rdx, qword ptr [r11 + rbx - 24]
	mov	rsi, qword ptr [r11 + rbx - 16]
	mov	r12, r15
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_1343
.LBB5_1338:                             # %OP6219.JUMPDEST.loopexit
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, r12
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r15, [r12 + 2]
	lea	rsi, [r11 + rbx]
	add	rsi, 32
	vmovdqu	ymmword ptr [r11 + rbx + 32], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1339:                             # %OP6223.PUSH32
	add	rbx, r14
	lea	r13, [r12 + 3]
	mov	rax, r15
	shl	rax, 5
	lea	rsi, [r14 + rax]
	mov	rcx, qword ptr [rbx + 56]
	mov	edx, dword ptr [rbx + 52]
	shl	rdx, 32
	mov	r9, qword ptr [rbx - 32]
	mov	rdi, qword ptr [rbx - 24]
	mov	r8d, dword ptr [rbx - 16]
	or	r8, rdx
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovups	ymmword ptr [rbx + 32], ymm0
	shl	r13, 5
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [r14 + rax + 24], rcx
	mov	qword ptr [r14 + rax + 8], rdi
	mov	qword ptr [r14 + rax + 16], r8
	mov	qword ptr [r14 + rax], r9
	vmovdqu	ymmword ptr [r14 + r13], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1340:                             # %OP6237.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1341:                             # %OP6238.MLOAD.contd
	mov	rax, qword ptr [rbx + 32]
	mov	rcx, qword ptr [rbx + 40]
	mov	rdx, qword ptr [rbx + 56]
	mov	rsi, qword ptr [rbx + 48]
	and	qword ptr [rbx + 16], rsi
	and	qword ptr [rbx + 24], rdx
	and	qword ptr [rbx], rax
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r14
	vmovdqu	ymm0, ymmword ptr [r15]
	and	qword ptr [rbx + 8], rcx
	movabs	rax, 6830680982387100012
	mov	qword ptr [rbx + 48], rax
	movabs	rax, -4146803701076386583
	mov	qword ptr [rbx + 56], rax
	movabs	rax, -6405725827882237842
	mov	qword ptr [rbx + 32], rax
	movabs	rax, -7533535990153866891
	mov	qword ptr [rbx + 40], rax
	vpxor	xmm1, xmm1, xmm1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB5_3097
# %bb.1342:                             # %OP6247.POP
	add	r12, -2
	mov	rax, r12
	shl	rax, 5
	mov	rdi, qword ptr [r14 + rax + 24]
	mov	r13, qword ptr [r14 + rax + 16]
	mov	rsi, qword ptr [r14 + rax]
	mov	rcx, qword ptr [r14 + rax + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, r14
	jmp	.LBB5_32
.LBB5_1397:                             # %OP2327.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_387
.LBB5_1394:                             # %OP2104.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_186
.LBB5_1218:                             # %OP179.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_131
.LBB5_1357:                             # %OP1985.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
.LBB5_1358:                             # %OP1985.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_173] # xmm0 = [1161,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 95
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1407
# %bb.1359:
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
.LBB5_1361:                             # %OP2000.JUMPDEST
	mov	r15, rbx
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	inc	rbx
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	rsi, qword ptr [r11 + r15 - 64]
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	r14, qword ptr [r11 + r15 - 56]
	mov	r12, qword ptr [r11 + r15 - 48]
	mov	r13, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r13
	mov	qword ptr [r11 + r15 + 16], r12
	mov	qword ptr [r11 + r15 + 8], r14
	mov	qword ptr [r11 + r15], rsi
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3696]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3680]
	mov	rcx, qword ptr [rbp - 3696]
	mov	rdx, qword ptr [rbp - 3688]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 56], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 48], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rax + r15], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], rsi
	add	rsi, 32
	mov	rdx, r14
	adc	rdx, 0
	mov	rcx, r12
	adc	rcx, 0
	mov	r8, r13
	adc	r8, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], r8
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 3664]
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 3648]
	mov	rcx, qword ptr [rbp - 3664]
	mov	rdx, qword ptr [rbp - 3656]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsi + r15 - 24], rdx
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdx + r15 - 16], rax
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 32], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 8], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 24], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx], 64
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + rbx + 16], 0
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	add	rsi, 64
	adc	r14, 0
	adc	r12, 0
	adc	r13, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], r12
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], rsi
	sub	rsp, 8
	lea	rdi, [rbp - 1456]
	mov	rdx, r14
	mov	rcx, r12
	mov	r8, r13
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 80]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1456]
	mov	rcx, qword ptr [rbp - 1448]
	mov	rdx, qword ptr [rbp - 1432]
	mov	rsi, qword ptr [rbp - 1440]
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15 + 24], rdx
	mov	qword ptr [r11 + r15], rax
	mov	qword ptr [r11 + r15 + 8], rcx
.LBB5_1362:                             # %OP6249.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	r13, rax
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_190] # xmm0 = [14,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3097
# %bb.1363:                             # %OP6252.PUSH20
	mov	r15, r12
	shl	r15, 5
	mov	eax, dword ptr [rbx + 16]
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	movbe	rsi, qword ptr [rsi + 148]
	mov	rdi, rsi
	shld	rdi, rdx, 32
	bswap	rcx
	shrd	rcx, rdx, 32
	shr	rsi, 32
	mov	rdx, qword ptr [rbx]
	xor	rdx, rcx
	mov	qword ptr [r14 + r15 + 16], rsi
	mov	qword ptr [r14 + r15], rcx
	mov	rcx, qword ptr [rbx + 8]
	xor	rcx, rdi
	mov	qword ptr [r14 + r15 + 8], rdi
	mov	qword ptr [r14 + r15 + 24], 0
	xor	rsi, rax
	or	rsi, rdx
	xor	eax, eax
	or	rsi, rcx
	sete	al
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	jne	.LBB5_1381
# %bb.1364:
	mov	r11, r14
	mov	r14, r13
.LBB5_1365:                             # %OP6296.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_113] # xmm0 = [13459,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	ecx, dword ptr [r11 + rax - 80]
	vmovaps	xmm0, xmmword ptr [r11 + rax - 96]
	vmovaps	xmmword ptr [r11 + rax + 32], xmm0
	mov	qword ptr [r11 + rax + 48], rcx
	mov	qword ptr [r11 + rax + 56], 0
	vmovups	ymm0, ymmword ptr [r11 + rax - 64]
	vmovups	ymmword ptr [r11 + rax + 64], ymm0
	add	r14, 4
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 96], ymm0
.LBB5_1366:                             # %OP8750.JUMPDEST
	lea	r12, [r14 + 1]
	mov	r15, r14
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	lea	rax, [r14 + 2]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [rbp - 96], r12       # 8-byte Spill
	shl	r12, 5
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3000
# %bb.1367:                             # %OP8753.MLOAD.contd
	add	r15, r13
	add	r12, r13
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12], rdi
	mov	rbx, r14
	add	r14, 3
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	shl	r11, 5
	add	rbx, 4
	mov	eax, dword ptr [r15 - 48]
	mov	r8, qword ptr [r15 - 64]
	mov	r9, qword ptr [r15 - 56]
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r13 + r11 + 8], r9
	mov	qword ptr [r13 + r11], r8
	mov	qword ptr [r13 + r11 + 16], rax
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	mov	qword ptr [r13 + r11 + 24], 0
	mov	qword ptr [rbp - 112], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r13 + rbx + 24], rcx
	mov	qword ptr [r13 + rbx + 8], rsi
	mov	qword ptr [r13 + rbx], rdi
	mov	qword ptr [r13 + rbx + 16], rdx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + r14 + 24], rcx
	mov	qword ptr [r13 + r14 + 8], rsi
	mov	qword ptr [r13 + r14], rdi
	mov	qword ptr [r13 + r14 + 16], rdx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.1368:                             # %OP8761.PUSH1
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	add	rax, r13
	add	r14, r13
	add	rbx, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_36] # xmm0 = [68,0]
	vmovdqu	ymmword ptr [rax], ymm0
	mov	r13, rax
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	rax, qword ptr [r15 - 8]
	mov	r8, qword ptr [r15 - 32]
	mov	r9, qword ptr [r15 - 24]
	mov	r10, qword ptr [r15 - 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	mov	qword ptr [rbx + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1369:                             # %OP8768.DUP3
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2448
# %bb.1370:                             # %OP8769.MLOAD.contd
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [r15 + 56]
	mov	r8, qword ptr [r15 + 32]
	mov	r9, qword ptr [r15 + 40]
	mov	r10, qword ptr [r15 + 48]
	mov	qword ptr [r15 + 176], r10
	mov	qword ptr [r15 + 160], r8
	mov	qword ptr [r15 + 184], rax
	mov	qword ptr [r15 + 168], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	add	r8, qword ptr [r13]
	adc	r9, qword ptr [r13 + 8]
	adc	r10, qword ptr [r13 + 16]
	adc	rax, qword ptr [r13 + 24]
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r10
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1371:                             # %OP8778.PUSH1
	vmovdqu	ymm0, ymmword ptr [r13]
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	add	r8, 100
	adc	r9, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 24], rax
	mov	rdi, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 16]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2795
# %bb.1372:                             # %OP8785.PUSH1
	mov	rcx, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.1373:                             # %OP8789.MLOAD.contd
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 16]
	mov	r10d, dword ptr [rbx + 24]
	movabs	rcx, -6267430979443359744
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	or	r10, rcx
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2795
# %bb.1374:                             # %OP8796.PUSH2
	vmovdqu	ymm0, ymmword ptr [r15]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_113] # xmm1 = [13459,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm1
	mov	rax, qword ptr [r15 - 80]
	mov	rcx, qword ptr [r15 - 96]
	mov	rdx, qword ptr [r15 - 88]
	mov	rsi, qword ptr [r15 - 72]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rcx
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_1375:                             # %OP9811.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r10
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_34] # xmm0 = [96,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_232] # xmm0 = [20952,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 32]
	vmovups	ymmword ptr [r11 + rax + 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 96], ymm0
	lea	rdx, [r10 + 4]
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	mov	rdi, r14
	cmp	rax, 95
	jbe	.LBB5_1388
.LBB5_1376:                             # %OP9816.MLOAD.contd
	mov	rax, qword ptr [r14 + 8]
	mov	r13, qword ptr [rax + r15 + 88]
	mov	r14, qword ptr [rax + r15 + 80]
	mov	r8, qword ptr [rax + r15 + 64]
	mov	r15, qword ptr [rax + r15 + 72]
	movbe	qword ptr [rbx + 96], r13
	bswap	r13
	movbe	qword ptr [rbx + 112], r15
	bswap	r15
	movbe	qword ptr [rbx + 120], r8
	bswap	r8
	movbe	qword ptr [rbx + 104], r14
	bswap	r14
	add	r10, 5
	mov	rax, rdx
	shl	rax, 5
	lea	rsi, [r11 + rax]
	mov	rcx, r10
	shl	rcx, 5
	lea	r9, [r11 + rcx]
	add	r13, 64
	adc	r14, 0
	adc	r15, 0
	adc	r8, 0
	mov	qword ptr [r11 + rax], r13
	mov	qword ptr [r11 + rax + 16], r15
	mov	qword ptr [r11 + rax + 8], r14
	mov	qword ptr [r11 + rax + 24], r8
	mov	qword ptr [r11 + rcx + 16], 0
	mov	qword ptr [r11 + rcx], 64
	mov	qword ptr [r11 + rcx + 24], 0
	mov	qword ptr [r11 + rcx + 8], 0
	mov	rax, qword ptr [rdi + 16]
	mov	r12, qword ptr [rdi + 48]
	sub	rax, r12
	cmp	rax, 95
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	jbe	.LBB5_1390
.LBB5_1377:                             # %OP9822.DUP1
	mov	rax, qword ptr [rdi + 8]
	movbe	qword ptr [rax + r12 + 88], r13
	movbe	qword ptr [rax + r12 + 80], r14
	movbe	qword ptr [rax + r12 + 72], r15
	movbe	qword ptr [rax + r12 + 64], r8
	mov	rax, qword ptr [rbx + 112]
	mov	r14, qword ptr [rbx + 96]
	mov	rdx, qword ptr [rbx + 104]
	mov	rcx, qword ptr [rbx + 120]
	mov	qword ptr [rsi + 24], rcx
	mov	qword ptr [rsi + 8], rdx
	mov	qword ptr [rsi + 16], rax
	mov	qword ptr [rsi], r14
	mov	qword ptr [r9 + 24], 0
	mov	qword ptr [r9 + 8], 0
	mov	qword ptr [r9 + 16], 0
	mov	qword ptr [r9], 32
	mov	qword ptr [rbx + 216], rcx
	mov	qword ptr [rbx + 200], rdx
	mov	qword ptr [rbx + 208], rax
	mov	qword ptr [rbx + 192], r14
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	r10, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	r10, r13
	mov	r12, rsi
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rax
	sbb	r8, rcx
	mov	r8, -1
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB5_1391
.LBB5_1378:                             # %OP9826.PUSH1
	add	r13, qword ptr [r15 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_45] # ymm0 = [0,0,0,2305843009213693952]
	vmovups	ymmword ptr [r14 + r13], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], r13
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	movabs	rsi, 3475125712568397164
	mov	qword ptr [r9 + 16], rsi
	movabs	rsi, 7791339923917530468
	mov	qword ptr [r9], rsi
	movabs	rsi, 6008195963029701426
	mov	qword ptr [r9 + 24], rsi
	movabs	rsi, 7311142560156836204
	mov	qword ptr [r9 + 8], rsi
	mov	qword ptr [rbx + 208], rcx
	mov	qword ptr [rbx + 192], r13
	mov	qword ptr [rbx + 216], rax
	mov	qword ptr [rbx + 200], rdx
	mov	r14, qword ptr [rdi + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rdi, r15
	mov	rsi, r13
	add	rsi, 32
	cmovb	rsi, r8
	mov	r10, -1
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r10
	cmp	rsi, rdi
	ja	.LBB5_1392
.LBB5_1379:                             # %OP9831.POP
	add	r15, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_233] # ymm0 = [3621828983343440211,7795017850487323184,7809632219745842789,7234307576302018668]
	vmovups	ymmword ptr [r13 + r15], ymm0
	mov	eax, dword ptr [rbx - 48]
	vmovaps	xmm0, xmmword ptr [rbx - 64]
	vmovdqa	xmm1, xmmword ptr [rbx + 64]
	vmovaps	xmm2, xmmword ptr [rbx + 80]
	vmovaps	xmmword ptr [rbx + 64], xmm0
	mov	qword ptr [rbx + 80], rax
	mov	qword ptr [rbx + 88], 0
	vmovups	ymm0, ymmword ptr [rbx + 96]
	vmovaps	xmmword ptr [rbx + 112], xmm2
	vmovdqa	xmmword ptr [rbx + 96], xmm1
	vmovups	ymmword ptr [r12], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_50] # xmm0 = [4294967295,0]
	vmovups	ymmword ptr [rbx + 192], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_234] # xmm0 = [21212,0]
	vmovdqu	ymmword ptr [r9], ymm0
	mov	esi, 21212
	xor	ecx, ecx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
.LBB5_1380:                             # %dynamic_jump_table
	xor	r13d, r13d
	xor	edi, edi
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_1398:                             # %OP2342.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_389
.LBB5_1404:                             # %OP2469.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
.LBB5_1405:                             # %OP2469.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_183] # xmm0 = [1092,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rbx, 3
	mov	r14, qword ptr [r13 + 80]
	mov	rsi, rbx
	shl	rsi, 5
	xor	ecx, ecx
	mov	rdx, r14
	add	rdx, -4
	mov	edi, 0
	adc	rdi, -1
	mov	r8d, 0
	adc	r8, -1
	mov	r9d, 0
	adc	r9, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rdi
	mov	qword ptr [r11 + rax + 88], r9
	mov	qword ptr [r11 + rax + 128], rdx
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rdi
	mov	qword ptr [r11 + rax + 152], r9
	mov	r10d, 63
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edx, 0
	sbb	rdx, r8
	sbb	rcx, r9
	setb	cl
	movzx	ecx, cl
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 16], 0
	mov	qword ptr [r11 + rsi + 24], 0
	mov	qword ptr [r11 + rsi + 8], 0
	jae	.LBB5_1407
# %bb.1406:
	mov	r10, r14
.LBB5_1409:                             # %OP2484.JUMPDEST
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	mov	r12, qword ptr [r11 + r15 - 64]
	mov	r13, qword ptr [r11 + r15 - 56]
	mov	rbx, qword ptr [r11 + r15 - 48]
	mov	r14, qword ptr [r11 + r15 - 40]
	mov	qword ptr [r11 + r15 + 24], r14
	mov	qword ptr [r11 + r15 + 16], rbx
	mov	qword ptr [r11 + r15 + 8], r13
	mov	qword ptr [r11 + r15], r12
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r9, qword ptr [rax + 72]
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	sub	rsp, 8
	lea	rdi, [rbp - 3312]
	mov	rsi, r12
	mov	rdx, r13
	mov	rcx, rbx
	mov	r8, r14
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	ecx, dword ptr [rbp - 3296]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 3312]
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	mov	rsi, qword ptr [rbp - 3304]
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 56], rsi
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 48], rcx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 64], rdx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 - 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 40], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 48], 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], 32
	add	r12, 32
	adc	r13, 0
	adc	rbx, 0
	adc	r14, 0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 24], r14
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 8], r13
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15 + 16], rbx
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r15], r12
	sub	rsp, 8
	lea	rdi, [rbp - 1040]
	mov	rsi, r12
	mov	rdx, r13
	mov	rcx, rbx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	push	qword ptr [rbp - 96]            # 8-byte Folded Reload
	call	.L__revmc_ir_builtin_calldataload
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 1040]
	mov	rcx, qword ptr [rbp - 1032]
	mov	rdx, qword ptr [rbp - 1016]
	mov	rsi, qword ptr [rbp - 1024]
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15 + 24], rdx
	mov	qword ptr [r11 + r15], rax
	mov	qword ptr [r11 + r15 + 8], rcx
	mov	edx, esi
	mov	qword ptr [r11 + r15 - 32], rax
	mov	qword ptr [r11 + r15 - 24], rcx
	mov	qword ptr [r11 + r15 - 16], rdx
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 8], 0
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1410:                             # %OP6698.JUMPDEST
	lea	r14, [rcx + 1]
	mov	r15, rcx
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + r15 - 64], ymm0
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	lea	r13, [rcx + 2]
	mov	r12, r14
	shl	r12, 5
	mov	eax, edx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [r11 + r12 + 8], r9
	mov	qword ptr [r11 + r12], r8
	mov	qword ptr [r11 + r12 + 16], rax
	mov	qword ptr [r11 + r12 + 24], 0
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 24], 0
	mov	qword ptr [r11 + r13 + 8], 0
	mov	qword ptr [r11 + r13 + 16], 0
	mov	qword ptr [r11 + r13], 0
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	mov	rbx, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1055
# %bb.1411:                             # %OP6707.PUSH1
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	lea	r14, [rbx + r15]
	add	r12, rbx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	add	r13, rbx
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_159] # xmm1 = [10,0]
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r14 + 96], ymm0
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	edi, 32
	mov	r8d, 10
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.1412:                             # %OP6712.PUSH1
	lea	rsi, [r14 + 96]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	add	r15, 4
	vmovdqu	ymmword ptr [r14 + 96], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [r14 + 16]
	mov	r8, r15
	shl	r8, 5
	mov	qword ptr [rbx + r8 + 16], rdi
	mov	qword ptr [rbx + r8], rcx
	mov	qword ptr [rbx + r8 + 24], rax
	mov	qword ptr [rbx + r8 + 8], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1413:                             # %OP6716.SWAP4
	vmovaps	xmm0, xmmword ptr [r14 + 96]
	vmovdqa	xmm1, xmmword ptr [r14 + 112]
	mov	rax, qword ptr [r14 - 48]
	mov	r10, qword ptr [r14 - 40]
	and	r10, qword ptr [r14 - 8]
	and	rax, qword ptr [r14 - 16]
	vmovdqa	xmmword ptr [r14 - 16], xmm1
	mov	r8, qword ptr [r14 - 64]
	mov	r9, qword ptr [r14 - 56]
	and	r8, qword ptr [r14 - 32]
	and	r9, qword ptr [r14 - 24]
	vmovaps	xmmword ptr [r14 - 32], xmm0
	vmovdqu	ymm0, ymmword ptr [r13]
	vmovdqu	ymmword ptr [r14 - 64], ymm0
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r10
	mov	rdx, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 112], rdx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	jne	.LBB5_1958
# %bb.1414:                             # %OP6722.SWAP2
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	r8, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	rax, qword ptr [r14 - 8]
	mov	r10, qword ptr [r14 - 16]
	mov	r11, qword ptr [r14 + 8]
	mov	r15, qword ptr [r14]
	mov	r12, qword ptr [r14 + 24]
	mov	r13, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 - 16], r13
	mov	qword ptr [r14 - 8], r12
	mov	qword ptr [r14 - 32], r15
	mov	qword ptr [r14 - 24], r11
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1415:                             # %OP6726.KECCAK256
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rbx, rax
	add	rbx, -64
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax - 1]
	mov	rdi, r12
	mov	rsi, rbx
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1416:                             # %OP6727.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.1417:                             # %OP6728.SWAP1
	vmovdqa	xmm0, xmmword ptr [r14 - 64]
	vmovdqa	xmm1, xmmword ptr [r14 - 48]
	mov	rsi, qword ptr [r14 - 96]
	mov	rcx, qword ptr [r14 - 88]
	mov	rdi, qword ptr [r14 - 72]
	mov	r13, qword ptr [r14 - 80]
	vmovdqa	xmmword ptr [r14 - 80], xmm1
	vmovdqa	xmmword ptr [r14 - 96], xmm0
	mov	qword ptr [r14 - 48], r13
	mov	qword ptr [r14 - 40], rdi
	mov	qword ptr [r14 - 64], rsi
	mov	qword ptr [r14 - 56], rcx
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_210
.LBB5_1407:                             # %OP1370.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_379
.LBB5_1219:                             # %OP207.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_132
.LBB5_2601:                             # %OP6577.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_601
.LBB5_2602:                             # %OP2904.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_172
.LBB5_2603:                             # %OP5408.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_713
.LBB5_2604:                             # %OP5477.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.2605:                             # %OP5480.PUSH21
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_109] # ymm0 = [0,0,4294967296,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 16]
	movabs	rdi, 4294967296
	mov	qword ptr [rbx + 16], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r14 + r15 + 16], rax
	mov	qword ptr [r14 + r15], rdx
	mov	qword ptr [r14 + r15 + 24], rcx
	mov	qword ptr [r14 + r15 + 8], rsi
	mov	rdx, rcx
	shld	rdx, rax, 32
	shr	rcx, 32
	mov	qword ptr [rbx], rdx
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	qword ptr [rbx + 8], rcx
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_98] # xmm1 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm1
	shr	rax, 32
	xor	ecx, ecx
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	al, al
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	jne	.LBB5_3020
.LBB5_2606:                             # %OP5519.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 224]
	mov	rdx, qword ptr [r11 + rax - 216]
	mov	rsi, qword ptr [r11 + rax - 208]
	mov	rdi, qword ptr [r11 + rax - 200]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_124] # xmm0 = [11434,0,0,0]
	jmp	.LBB5_430
.LBB5_2607:                             # %OP4413.JUMPDEST
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [r11 + rax - 64]
	vmovdqa	xmm1, xmmword ptr [r11 + rax - 48]
	vmovaps	xmm2, xmmword ptr [r11 + rax - 32]
	vmovaps	xmm3, xmmword ptr [r11 + rax - 16]
	vmovaps	xmmword ptr [r11 + rax - 48], xmm3
	vmovaps	xmmword ptr [r11 + rax - 64], xmm2
	vmovdqa	xmmword ptr [r11 + rax - 16], xmm1
	vmovdqa	xmmword ptr [r11 + rax - 32], xmm0
	jmp	.LBB5_2590
.LBB5_2608:                             # %OP5412.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_135
.LBB5_2609:                             # %OP5027.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_681
.LBB5_2610:                             # %OP4844.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_2732
.LBB5_2611:                             # %OP5354.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_499
.LBB5_1326:                             # %OP1892.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_670
.LBB5_1222:                             # %OP360.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	jmp	.LBB5_88
.LBB5_2612:                             # %OP4912.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_2738
.LBB5_2613:                             # %dynamic_jump_table
	xor	rsi, 15696
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_1428
	jmp	.LBB5_3092
.LBB5_1327:                             # %OP1907.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_672
.LBB5_1223:                             # %OP378.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rsi, 5
	mov	rdx, qword ptr [r11 + rsi - 8]
	mov	rcx, qword ptr [r11 + rsi - 16]
	mov	rax, qword ptr [r11 + rsi - 32]
	mov	rbx, qword ptr [r11 + rsi - 24]
	jmp	.LBB5_47
.LBB5_1270:                             # %OP687.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r15 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_91
.LBB5_1284:                             # %OP1168.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_480
.LBB5_1285:                             # %OP1199.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_357
.LBB5_1291:                             # %OP1404.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_343
.LBB5_2614:                             # %OP6698.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rcx
	shl	rax, 5
	mov	rdx, qword ptr [r11 + rax - 48]
	mov	r8, qword ptr [r11 + rax - 64]
	mov	r9, qword ptr [r11 + rax - 56]
	jmp	.LBB5_1410
.LBB5_2615:                             # %OP4153.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r13d, dword ptr [rcx + 164]
	movbe	rax, qword ptr [rcx + 156]
	movbe	r14, qword ptr [rcx + 148]
	mov	rdx, r14
	shld	rdx, rax, 32
	bswap	r13
	shrd	r13, rax, 32
	shr	r14, 32
	xor	eax, eax
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rsi + 3]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	rcx, rsi
	jmp	.LBB5_222
.LBB5_2616:                             # %OP3563.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_160
.LBB5_2617:                             # %OP3663.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [rax + 2]
	lea	r12, [rax + 1]
	jmp	.LBB5_278
.LBB5_2618:                             # %OP5731.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1301
.LBB5_2619:                             # %dynamic_jump_table
	xor	rsi, 18112
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2620:                             # %OP8339.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_404
.LBB5_1271:                             # %OP694.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_194
.LBB5_2621:                             # %dynamic_jump_table
	xor	rsi, 19431
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2622:                             # %OP8998.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_394
.LBB5_1289:                             # %OP1325.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, rsi
	add	rax, 32
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	jmp	.LBB5_544
.LBB5_1286:                             # %OP1214.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_358
.LBB5_1292:                             # %OP1411.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_493
.LBB5_2623:                             # %OP3707.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [rax + 2]
	lea	r12, [rax + 1]
	jmp	.LBB5_279
.LBB5_2624:                             # %OP5738.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 1]
	shl	rax, 5
	lea	rbx, [r11 + rax]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.2625:                             # %OP5741.PUSH21
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_109] # ymm0 = [0,0,4294967296,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm0
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 16]
	movabs	rdi, 4294967296
	mov	qword ptr [rbx + 16], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r14 + r15 + 16], rax
	mov	qword ptr [r14 + r15], rdx
	mov	qword ptr [r14 + r15 + 24], rcx
	mov	qword ptr [r14 + r15 + 8], rsi
	mov	rdx, rcx
	shld	rdx, rax, 32
	shr	rcx, 32
	mov	qword ptr [rbx], rdx
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	qword ptr [rbx + 8], rcx
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_98] # xmm1 = [255,0]
	vmovdqu	ymmword ptr [r14 + r15], ymm1
	shr	rax, 32
	xor	ecx, ecx
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	test	al, al
	sete	cl
	mov	qword ptr [rbx], rcx
	mov	r11, r14
	jne	.LBB5_3020
.LBB5_2626:                             # %OP5780.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r10
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_116] # xmm0 = [10935,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 128]
	vmovups	ymm2, ymmword ptr [r11 + rax - 96]
	vmovups	ymm3, ymmword ptr [r11 + rax - 64]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	add	r10, 6
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 160], ymm0
	jmp	.LBB5_402
.LBB5_1274:                             # %OP743.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_239
.LBB5_1419:                             # %OP2585.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_702
.LBB5_1439:                             # %OP2709.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdx, qword ptr [r13 + 80]
	xor	ecx, ecx
	xor	edi, edi
	mov	r15, rdx
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
.LBB5_1440:                             # %OP2709.JUMPDEST
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, r14
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_171] # xmm0 = [1064,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovups	ymmword ptr [r11 + rax + 64], ymm0
	add	r14, 3
	mov	rsi, r14
	shl	rsi, 5
	mov	qword ptr [r11 + rsi + 16], rdi
	mov	qword ptr [r11 + rsi], rdx
	mov	qword ptr [r11 + rsi + 8], rcx
	mov	qword ptr [r11 + rsi + 24], rdi
	add	rdx, -4
	adc	rcx, -1
	mov	r8, rdi
	adc	r8, -1
	adc	rdi, -1
	mov	qword ptr [r11 + rax + 64], rdx
	mov	qword ptr [r11 + rax + 80], r8
	mov	qword ptr [r11 + rax + 72], rcx
	mov	qword ptr [r11 + rax + 88], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rsi], ymm0
	mov	qword ptr [r11 + rax + 152], rdi
	mov	qword ptr [r11 + rax + 144], r8
	mov	qword ptr [r11 + rax + 136], rcx
	mov	qword ptr [r11 + rax + 128], rdx
	xor	r9d, r9d
	mov	r10d, 31
	cmp	r10, rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, r8
	sbb	r9, rdi
	setb	cl
	movzx	ecx, cl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rsi + 8], xmm0
	mov	qword ptr [r11 + rsi], rcx
	mov	qword ptr [r11 + rsi + 24], 0
	jae	.LBB5_1442
# %bb.1441:
	mov	rbx, r14
	jmp	.LBB5_1446
.LBB5_1283:                             # %OP1156.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, qword ptr [rax + 80]
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_327
.LBB5_2627:                             # %OP3429.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_95
.LBB5_2628:                             # %dynamic_jump_table
	xor	rsi, 9192
	or	rsi, r13
	or	rsi, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_3092
# %bb.2629:                             # %OP4643.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2630:                             # %OP4643.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_138] # xmm0 = [9203,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	r10, 3
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	rcx, qword ptr [rsi + 156]
	mov	edx, dword ptr [rsi + 164]
	bswap	rdx
	shrd	rdx, rcx, 32
	movbe	rsi, qword ptr [rsi + 148]
	jmp	.LBB5_96
.LBB5_1420:                             # %OP2597.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	xor	ecx, ecx
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_423
.LBB5_1445:                             # %OP2724.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r15, qword ptr [r13 + 80]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1446:                             # %OP2724.JUMPDEST
	lea	r14, [rbx - 1]
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 48]
	mov	rsi, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r9, qword ptr [r13 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2384]
	push	r15
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2360]
	mov	rcx, qword ptr [rbp - 2384]
	mov	rdx, qword ptr [rbp - 2376]
	mov	rsi, qword ptr [rbp - 2368]
	mov	qword ptr [r11 + rbx - 48], rsi
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 40], rax
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	rax, r14
	shl	rax, 5
	mov	edi, 4294967295
	mov	qword ptr [r11 + rax + 16], rdi
	mov	qword ptr [r11 + rax], -1
	mov	qword ptr [r11 + rax + 8], -1
	mov	qword ptr [r11 + rax + 24], 0
	mov	eax, esi
	mov	qword ptr [r11 + rbx - 64], rcx
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 48], rax
	mov	qword ptr [r11 + rbx - 40], 0
.LBB5_1447:                             # %OP7336.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_172] # xmm0 = [10986,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	add	r14, 3
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 32]
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm0
	jmp	.LBB5_431
.LBB5_2631:                             # %dynamic_jump_table
	xor	rsi, 12531
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2632:                             # %OP5984.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2633:                             # %OP5984.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_114] # xmm0 = [12542,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	ecx, dword ptr [rsi + 164]
	movbe	rdx, qword ptr [rsi + 156]
	bswap	rcx
	movbe	rsi, qword ptr [rsi + 148]
	shrd	rcx, rdx, 32
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	qword ptr [r11 + rax + 40], rdx
	mov	qword ptr [r11 + rax + 48], rsi
	mov	qword ptr [r11 + rax + 32], rcx
	mov	qword ptr [r11 + rax + 56], 0
	mov	rcx, qword ptr [r11 + rax - 160]
	mov	rdx, qword ptr [r11 + rax - 152]
	mov	rsi, qword ptr [r11 + rax - 136]
	mov	rdi, qword ptr [r11 + rax - 144]
	mov	qword ptr [r11 + rax + 80], rdi
	mov	qword ptr [r11 + rax + 88], rsi
	mov	qword ptr [r11 + rax + 64], rcx
	mov	qword ptr [r11 + rax + 72], rdx
	add	r13, 4
	mov	rcx, qword ptr [r11 + rax - 120]
	mov	rdx, qword ptr [r11 + rax - 128]
	mov	rsi, qword ptr [r11 + rax - 104]
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [r11 + rax + 112], rdi
	mov	qword ptr [r11 + rax + 120], rsi
	mov	qword ptr [r11 + rax + 96], rdx
	mov	qword ptr [r11 + rax + 104], rcx
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jmp	.LBB5_2656
.LBB5_2634:                             # %OP6414.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	jne	.LBB5_1955
.LBB5_2635:                             # %OP6456.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 224]
	mov	rdx, qword ptr [r11 + rax - 216]
	mov	rsi, qword ptr [r11 + rax - 208]
	mov	rdi, qword ptr [r11 + rax - 200]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_108] # xmm0 = [13885,0,0,0]
	jmp	.LBB5_430
.LBB5_2636:                             # %OP6296.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_1365
.LBB5_2637:                             # %dynamic_jump_table
	xor	rsi, 17328
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_112
	jmp	.LBB5_3092
.LBB5_2638:                             # %OP10158.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_20
.LBB5_2639:                             # %dynamic_jump_table
	xor	rsi, 17713
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2640:                             # %OP8129.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_500
.LBB5_2641:                             # %OP5888.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_676
.LBB5_2642:                             # %dynamic_jump_table
	xor	rsi, 16943
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2643:                             # %OP7770.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_644
.LBB5_2644:                             # %dynamic_jump_table
	xor	rsi, 9787
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2645:                             # %OP4946.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2646:                             # %OP4946.JUMPDEST
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r12, r10
	shl	r12, 5
	mov	rcx, qword ptr [r11 + r12 - 16]
	mov	r8, qword ptr [r11 + r12 - 8]
	mov	rsi, qword ptr [r11 + r12 - 32]
	mov	rdx, qword ptr [r11 + r12 - 24]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r12 + 32], ymm0
	shld	r8, rcx, 5
	shld	rcx, rdx, 5
	shld	rdx, rsi, 5
	shl	rsi, 5
	mov	qword ptr [r11 + r12 + 16], rcx
	mov	qword ptr [r11 + r12], rsi
	mov	qword ptr [r11 + r12 + 24], r8
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	rax, qword ptr [r11 + r12 - 72]
	mov	rdi, qword ptr [r11 + r12 - 96]
	mov	r9, qword ptr [r11 + r12 - 88]
	mov	rbx, r10
	mov	r10, qword ptr [r11 + r12 - 80]
	mov	qword ptr [r11 + r12 - 32], rdi
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	dec	rbx
	mov	r14, rbx
	shl	r14, 5
	add	rsi, rdi
	mov	qword ptr [r11 + r12 - 24], r9
	adc	rdx, r9
	mov	qword ptr [r11 + r12 - 16], r10
	adc	rcx, r10
	mov	qword ptr [r11 + r12 - 8], rax
	vmovdqu	ymmword ptr [r11 + r12 - 96], ymm0
	adc	r8, rax
	mov	qword ptr [r11 + r14], rsi
	mov	qword ptr [r11 + r14 + 8], rdx
	mov	qword ptr [r11 + r14 + 16], rcx
	mov	qword ptr [r11 + r14 + 24], r8
	mov	r9, qword ptr [r15 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2480]
	push	qword ptr [r15 + 80]
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2456]
	mov	r8, qword ptr [rbp - 2480]
	mov	r9, qword ptr [rbp - 2472]
	mov	rcx, qword ptr [rbp - 2464]
	mov	qword ptr [r13 + r12 - 16], rcx
	mov	qword ptr [r13 + r12 - 32], r8
	mov	qword ptr [r13 + r12 - 8], rax
	mov	qword ptr [r13 + r12 - 24], r9
	mov	eax, 4294967295
	mov	qword ptr [r13 + r12 + 16], rax
	mov	qword ptr [r13 + r12], -1
	mov	qword ptr [r13 + r12 + 24], 0
	mov	qword ptr [r13 + r12 + 8], -1
	mov	eax, ecx
	mov	qword ptr [r13 + r14], r8
	mov	qword ptr [r13 + r14 + 16], rax
	mov	qword ptr [r13 + r14 + 8], r9
	mov	qword ptr [r13 + r14 + 24], 0
	mov	rdi, qword ptr [r13 + r12 - 128]
	mov	rdx, qword ptr [r13 + r12 - 112]
	mov	rsi, qword ptr [r13 + r12 - 120]
	mov	rcx, qword ptr [r13 + r12 - 104]
	mov	qword ptr [r13 + r12 + 24], rcx
	mov	qword ptr [r13 + r12 + 8], rsi
	mov	qword ptr [r13 + r12 + 16], rdx
	mov	qword ptr [r13 + r12], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3070
# %bb.2647:                             # %OP4960.POP
	add	r12, r13
	mov	rax, qword ptr [r12 - 128]
	mov	r10, qword ptr [r12 - 120]
	mov	r11, qword ptr [r12 - 112]
	mov	rbx, qword ptr [r12 - 104]
	mov	qword ptr [r12 - 40], rbx
	mov	qword ptr [r12 - 48], r11
	mov	qword ptr [r12 - 56], r10
	mov	qword ptr [r12 - 64], rax
	mov	rdi, qword ptr [r12 - 96]
	add	rdi, rax
	mov	rsi, qword ptr [r12 - 88]
	adc	rsi, r10
	mov	rdx, qword ptr [r12 - 80]
	adc	rdx, r11
	mov	rcx, qword ptr [r12 - 72]
	adc	rcx, rbx
	mov	qword ptr [r12 - 96], rdi
	mov	qword ptr [r12 - 88], rsi
	mov	qword ptr [r12 - 80], rdx
	mov	qword ptr [r12 - 72], rcx
	mov	r8, qword ptr [r12 - 160]
	mov	r9, qword ptr [r12 - 152]
	mov	r14, qword ptr [r12 - 136]
	mov	r15, qword ptr [r12 - 144]
	mov	qword ptr [r12 - 112], r15
	mov	qword ptr [r12 - 104], r14
	mov	qword ptr [r12 - 128], r8
	mov	qword ptr [r12 - 120], r9
	mov	qword ptr [r12 - 144], r11
	mov	qword ptr [r12 - 136], rbx
	mov	qword ptr [r12 - 160], rax
	mov	qword ptr [r12 - 152], r10
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	rax, -4
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r14
	push	r15
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.2648:                             # %OP4967.PUSH1
	lea	rbx, [r12 - 160]
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, r15
	shl	r14, 5
	add	r14, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	add	qword ptr [rbx], 64
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3083
# %bb.2649:                             # %OP4971.DUP1
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	lea	r15, [r13 - 3]
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14 + 24], rdx
	mov	qword ptr [r14], rax
	mov	qword ptr [r14 + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3084
# %bb.2650:                             # %OP4973.PUSH32
	shl	r15, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_59] # ymm0 = [18446744073709551360,18446744073709551615,18446744073709551615,18446744073709551615]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax + r15], ymm0
	mov	r15, rax
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, -256
	and	rsi, qword ptr [r14]
	mov	qword ptr [r14], rsi
	mov	rdi, qword ptr [r12 - 160]
	mov	r8, qword ptr [r12 - 144]
	mov	r9, qword ptr [r12 - 152]
	mov	r10, qword ptr [r12 - 136]
	mov	qword ptr [r12 - 152], rcx
	mov	qword ptr [r12 - 136], rax
	mov	qword ptr [r12 - 144], rdx
	mov	qword ptr [r12 - 160], rsi
	mov	qword ptr [r12 - 120], r9
	mov	qword ptr [r12 - 104], r10
	mov	qword ptr [r12 - 112], r8
	mov	qword ptr [r12 - 128], rdi
	add	r13, -5
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_2988
# %bb.2651:                             # %OP4977.PUSH1
	mov	rax, r13
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r15 + rax], ymm0
	add	qword ptr [r12 - 192], 1
	adc	qword ptr [r12 - 184], 0
	adc	qword ptr [r12 - 176], 0
	adc	qword ptr [r12 - 168], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, r15
	mov	r10, r13
	jmp	.LBB5_2728
.LBB5_2652:                             # %OP5894.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax - 1]
	mov	r12, r14
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	jne	.LBB5_1955
.LBB5_2653:                             # %OP5936.JUMPDEST
	mov	rax, r14
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 128]
	mov	rdx, qword ptr [r11 + rax - 120]
	mov	rsi, qword ptr [r11 + rax - 112]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [r11 + rax + 24], rdi
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_115] # xmm0 = [12445,0,0,0]
	jmp	.LBB5_430
.LBB5_2654:                             # %dynamic_jump_table
	xor	rsi, 18055
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2655:                             # %OP8320.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rcx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_74] # xmm0 = [14139,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 224]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 192]
	vmovups	ymm2, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	add	rcx, 4
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
.LBB5_2656:                             # %OP7511.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r15, [rax + 1]
	lea	r13, [rax + 2]
	mov	rax, qword ptr [r11 + rbx - 72]
	mov	rcx, qword ptr [r11 + rbx - 96]
	mov	rdx, qword ptr [r11 + rbx - 88]
	mov	rsi, qword ptr [r11 + rbx - 80]
	mov	r12, r15
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_2917
.LBB5_2657:                             # %OP7555.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	rax, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	rsi, qword ptr [r11 + rbx - 48]
	mov	r12, r15
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 16], rsi
	mov	qword ptr [r11 + r12], rcx
	mov	qword ptr [r11 + r12 + 24], rax
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	eax, esi
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx + 16], rax
	mov	qword ptr [r11 + rbx + 24], 0
	or	rcx, rax
	or	rcx, rdx
	je	.LBB5_2902
# %bb.2658:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2659:                             # %OP7599.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_165] # xmm0 = [16505,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	add	r10, 2
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	jmp	.LBB5_2817
.LBB5_2660:                             # %OP6894.JUMPDEST.loopexit
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_552
.LBB5_1297:                             # %OP1594.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rbx
	shl	rax, 5
	mov	r8, qword ptr [r11 + rax - 8]
	mov	rcx, qword ptr [r11 + rax - 16]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	rdi, qword ptr [r11 + rax - 104]
	mov	qword ptr [rbp - 120], rdi      # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 112]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	rax, qword ptr [r11 + rax - 120]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rax, rsi
	add	rax, 32
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	r13, rdx
	adc	r13, 0
	mov	r14, rcx
	adc	r14, 0
	mov	r15, r8
	adc	r15, 0
	jmp	.LBB5_471
.LBB5_2661:                             # %OP7092.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax - 1]
	mov	r12, r13
	shl	r12, 5
	mov	rax, qword ptr [r11 + r12]
	mov	rcx, qword ptr [r11 + r12 + 8]
	or	rcx, qword ptr [r11 + r12 + 24]
	or	rax, qword ptr [r11 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r12 + 8], xmm0
	mov	qword ptr [r11 + r12], rdx
	mov	qword ptr [r11 + r12 + 24], 0
	je	.LBB5_2664
# %bb.2662:                             # %OP7096.PUSH1
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
.LBB5_2329:                             # %OP6830.PUSH1
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r12, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.2330:                             # %OP6831.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rbx, r14
	inc	r14
	mov	r15, rbx
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 16], rdx
	mov	qword ptr [r13 + r14], rdi
	mov	qword ptr [r13 + r14 + 24], rcx
	mov	qword ptr [r13 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2331:                             # %OP6835.PUSH1
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	add	r15, r13
	add	rbx, 2
	add	r14, r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r8, qword ptr [r12 + 24]
	mov	rax, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12]
	mov	r10, qword ptr [r12 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r9
	mov	qword ptr [r13 + rbx + 8], rsi
	mov	qword ptr [r13 + rbx + 24], rcx
	mov	qword ptr [r13 + rbx + 16], rdx
	mov	qword ptr [r13 + rbx], rdi
	mov	qword ptr [r15 + 104], r10
	mov	qword ptr [r15 + 96], r9
	mov	qword ptr [r15 + 120], r8
	mov	qword ptr [r15 + 112], rax
	vmovups	ymmword ptr [r13 + rbx], ymm0
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 104], rsi
	mov	qword ptr [r15 + 96], rdi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2332:                             # %OP6846.PUSH1
	add	rbx, r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2333:                             # %OP6849.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_95] # xmm0 = [23300,0,0,0]
	vmovups	ymmword ptr [r15 + 96], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovups	ymmword ptr [r15 + 128], ymm0
	vmovups	ymmword ptr [rbx], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rsi
	mov	qword ptr [r15 + 128], rdx
	mov	rdi, r12
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_142
# %bb.2334:                             # %OP6856.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r15 - 32]
	mov	qword ptr [r15 - 8], rax
	mov	qword ptr [r15 - 32], rdx
	mov	qword ptr [r15 - 24], rsi
	mov	qword ptr [r15 - 16], rcx
	vmovdqu	ymmword ptr [r14], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.2335:                             # %OP6862.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rdx
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], rcx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rdx
	mov	r8, qword ptr [r15 - 24]
	mov	r9, qword ptr [r15 - 8]
	mov	r10, qword ptr [r15 - 32]
	mov	r11, qword ptr [r15 - 16]
	mov	qword ptr [r15 - 16], rax
	mov	qword ptr [r15 - 32], rdx
	mov	qword ptr [r15 - 8], rdi
	mov	qword ptr [r15 - 24], rcx
	mov	qword ptr [r14], r10
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], r8
	sub	r10, rdx
	sbb	r8, rcx
	sbb	r11, rax
	sbb	r9, rdi
	mov	qword ptr [r15 - 32], r10
	mov	qword ptr [r15 - 24], r8
	mov	qword ptr [r15 - 16], r11
	mov	qword ptr [r15 - 8], r9
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rcx
	mov	rdi, r12
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_2336
.LBB5_1087:
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1296:                             # %OP1526.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [rax + 80]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_468
.LBB5_2663:                             # %OP7134.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2664:                             # %OP7134.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_96] # xmm0 = [14820,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 352]
	vmovdqu	ymm1, ymmword ptr [r11 + rax - 320]
	vmovups	ymm2, ymmword ptr [r11 + rax - 288]
	vmovups	ymm3, ymmword ptr [r11 + rax - 256]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovdqu	ymmword ptr [r11 + rax + 64], ymm1
	vmovups	ymmword ptr [r11 + rax + 96], ymm2
	vmovups	ymmword ptr [r11 + rax + 128], ymm3
	vmovups	ymm0, ymmword ptr [r11 + rax - 224]
	vmovups	ymmword ptr [r11 + rax + 160], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 192]
	vmovups	ymmword ptr [r11 + rax + 192], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 160]
	vmovups	ymmword ptr [r11 + rax + 224], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 128]
	vmovups	ymmword ptr [r11 + rax + 256], ymm0
	add	r13, 10
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 96]
	vmovdqu	ymmword ptr [r11 + rax + 288], ymm0
.LBB5_2665:                             # %OP9121.JUMPDEST
	mov	r12, r13
	shl	r12, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_97] # xmm0 = [11631,0,0,0]
	vmovups	ymmword ptr [r11 + r12], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r12 - 288]
	vmovdqu	ymm1, ymmword ptr [r11 + r12 - 256]
	vmovups	ymm2, ymmword ptr [r11 + r12 - 224]
	vmovups	ymm3, ymmword ptr [r11 + r12 - 192]
	vmovups	ymmword ptr [r11 + r12 + 32], ymm0
	vmovdqu	ymmword ptr [r11 + r12 + 64], ymm1
	vmovups	ymmword ptr [r11 + r12 + 96], ymm2
	vmovups	ymmword ptr [r11 + r12 + 128], ymm3
	vmovups	ymm0, ymmword ptr [r11 + r12 - 160]
	vmovups	ymmword ptr [r11 + r12 + 160], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r12 - 128]
	vmovups	ymmword ptr [r11 + r12 + 192], ymm0
	lea	rax, [r13 + 8]
	vmovups	ymm0, ymmword ptr [r11 + r12 - 64]
	vmovups	ymmword ptr [r11 + r12 + 224], ymm0
	lea	rcx, [r13 + 9]
	vmovups	ymm0, ymmword ptr [r11 + r12 - 32]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	shl	rax, 5
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovups	ymm0, ymmword ptr [r11 + r12 - 96]
	mov	qword ptr [rbp - 112], rcx      # 8-byte Spill
	mov	rax, rcx
	shl	rax, 5
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	vmovups	ymmword ptr [r11 + rax], ymm0
	lea	r14, [r13 + 11]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r12 + 320], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1055
# %bb.2666:                             # %OP9133.MLOAD.contd
	add	r12, r15
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 320], rdi
	add	r13, 12
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 24], 0
	mov	qword ptr [r15 + r14 + 8], 0
	mov	qword ptr [r15 + r14 + 16], 0
	mov	qword ptr [r15 + r14], 32
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 320], rdi
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	r9, qword ptr [r12 + 232]
	mov	rax, qword ptr [r12 + 248]
	mov	r8, qword ptr [r12 + 224]
	mov	r10, qword ptr [r12 + 240]
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	mov	rbx, r13
	shl	rbx, 5
	mov	qword ptr [r15 + rbx + 16], r10
	mov	qword ptr [r15 + rbx], r8
	mov	qword ptr [r15 + rbx + 24], rax
	mov	qword ptr [r15 + rbx + 8], r9
	mov	qword ptr [r12 + 440], rcx
	mov	qword ptr [r12 + 432], rdx
	mov	qword ptr [r12 + 424], rsi
	mov	qword ptr [r12 + 416], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2795
# %bb.2667:                             # %OP9140.PUSH1
	add	r14, r15
	add	rbx, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	r9, qword ptr [r12 + 264]
	mov	rax, qword ptr [r12 + 280]
	mov	r8, qword ptr [r12 + 256]
	mov	r10, qword ptr [r12 + 272]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 432], rdx
	mov	qword ptr [r12 + 416], rdi
	mov	qword ptr [r12 + 440], rcx
	mov	qword ptr [r12 + 424], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB5_2795
# %bb.2668:                             # %OP9145.PUSH1
	add	r13, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	vmovups	xmm0, xmmword ptr [r13 + 8]
	mov	rax, qword ptr [r13]
	mov	r8, qword ptr [r13 + 24]
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx], rax
	vmovups	xmmword ptr [rbx + 8], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r12 + 416], ymm0
	movzx	r8d, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], 0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_99] # xmm1 = [248,0,0,0]
	vmovdqu	ymmword ptr [r12 + 416], ymm1
	shl	rax, 56
	vmovdqa	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [r12 + 440], rcx
	mov	qword ptr [r12 + 432], rdx
	mov	qword ptr [r12 + 416], rdi
	mov	qword ptr [r12 + 424], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2795
# %bb.2669:                             # %OP9154.PUSH1
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	rax, r15
	mov	r15, rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 1
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	vmovups	ymm0, ymmword ptr [r12 + 224]
	mov	qword ptr [r12 + 248], rax
	mov	qword ptr [r12 + 224], rdx
	mov	qword ptr [r12 + 232], rsi
	mov	qword ptr [r12 + 240], rcx
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2448
# %bb.2670:                             # %OP9162.MLOAD.contd
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 32
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 320], rdi
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 328], rsi
	mov	r9, qword ptr [r12 + 232]
	mov	rax, qword ptr [r12 + 248]
	mov	r8, qword ptr [r12 + 224]
	mov	r10, qword ptr [r12 + 240]
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	mov	qword ptr [r12 + 320], r8
	mov	qword ptr [r12 + 328], r9
	mov	qword ptr [r12 + 336], r10
	mov	qword ptr [r12 + 344], rax
	add	r8, -32
	adc	r9, -1
	adc	r10, -1
	adc	rax, -1
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13], r8
	mov	qword ptr [r12 + 344], rcx
	mov	qword ptr [r12 + 336], rdx
	mov	qword ptr [r12 + 328], rsi
	mov	qword ptr [r12 + 320], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2448
# %bb.2671:                             # %OP9170.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 16]
	mov	r10, qword ptr [r12 + 248]
	mov	r8, qword ptr [r12 + 224]
	mov	r9, qword ptr [r12 + 232]
	mov	r11, qword ptr [r12 + 240]
	mov	qword ptr [r12 + 240], rsi
	mov	qword ptr [r12 + 224], rcx
	mov	qword ptr [r12 + 248], rax
	mov	qword ptr [r12 + 232], rdx
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	sub	rsp, 8
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	r10
	push	r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2672:
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_2673:                             # %OP8179.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rbx + 1]
	shl	rbx, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	rdx, qword ptr [r11 + rbx - 176]
	mov	rax, qword ptr [r11 + rbx - 192]
	mov	rcx, qword ptr [r11 + rbx - 184]
	mov	rsi, qword ptr [r11 + rbx - 168]
	mov	r15, r13
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 24], rsi
	mov	qword ptr [r11 + r15 + 8], rcx
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15], rax
	mov	edx, edx
	mov	qword ptr [r11 + rbx + 8], rcx
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 16], rdx
	mov	qword ptr [r11 + rbx + 24], 0
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	movbe	rsi, qword ptr [r8 + 156]
	mov	edi, dword ptr [r8 + 164]
	bswap	rdi
	shrd	rdi, rsi, 32
	movbe	r8, qword ptr [r8 + 148]
	shrd	rsi, r8, 32
	shr	r8, 32
	mov	qword ptr [r11 + r15 + 16], r8
	mov	qword ptr [r11 + r15 + 8], rsi
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [r11 + r15 + 24], 0
	xor	rsi, rcx
	xor	rdi, rax
	xor	r8, rdx
	or	r8, rdi
	xor	eax, eax
	or	r8, rsi
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	jne	.LBB5_2924
.LBB5_2674:                             # %OP8225.JUMPDEST.loopexit
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, rsi
	shl	rcx, 5
	lea	rax, [r11 + rcx]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_118] # xmm0 = [17899,0,0,0]
.LBB5_2675:                             # %OP9306.JUMPDEST.sink.split
	vmovups	ymmword ptr [r11 + rcx], ymm0
	vmovdqu	ymm0, ymmword ptr [rax - 224]
	vmovdqu	ymm1, ymmword ptr [rax - 128]
	vmovups	ymm2, ymmword ptr [rax - 96]
	vmovups	ymm3, ymmword ptr [rax - 64]
	vmovdqu	ymmword ptr [rax + 32], ymm0
	vmovups	ymmword ptr [rax + 64], ymm3
	vmovdqu	ymmword ptr [rax + 96], ymm1
	add	rsi, 5
	vmovups	ymmword ptr [rax + 128], ymm2
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
.LBB5_2676:                             # %OP9306.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [r10 + 1]
	mov	rbx, r10
	shl	rbx, 5
	mov	rdi, qword ptr [r11 + rbx - 40]
	mov	rcx, qword ptr [r11 + rbx - 64]
	mov	rdx, qword ptr [r11 + rbx - 56]
	mov	r8, qword ptr [r11 + rbx - 48]
	mov	qword ptr [r11 + rbx + 16], r8
	mov	qword ptr [r11 + rbx], rcx
	mov	qword ptr [r11 + rbx + 24], rdi
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	r9, qword ptr [rbp - 104]       # 8-byte Reload
	mov	rax, qword ptr [r9 + 80]
	mov	r12, r15
	shl	r12, 5
	cmp	rcx, rax
	mov	rsi, qword ptr [r9 + 88]
	sbb	rdx, rsi
	mov	rcx, qword ptr [r9 + 96]
	sbb	r8, rcx
	mov	rdx, qword ptr [r9 + 104]
	mov	qword ptr [r11 + r12 + 24], rdx
	mov	qword ptr [r11 + r12 + 8], rsi
	mov	qword ptr [r11 + r12 + 16], rcx
	mov	qword ptr [r11 + r12], rax
	sbb	rdi, rdx
	setb	dil
	movzx	edi, dil
	mov	qword ptr [r11 + rbx], rdi
	lea	r13, [r10 + 2]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_2893
.LBB5_2677:                             # %OP9350.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, r10
	shl	rbx, 5
	mov	rdi, qword ptr [r11 + rbx - 16]
	mov	r8, qword ptr [r11 + rbx - 32]
	mov	r9, qword ptr [r11 + rbx - 24]
	mov	r14, r10
	mov	r10, qword ptr [r11 + rbx - 8]
	mov	qword ptr [r11 + rbx + 24], r10
	mov	qword ptr [r11 + rbx + 8], r9
	mov	qword ptr [r11 + rbx + 16], rdi
	mov	qword ptr [r11 + rbx], r8
	mov	r12, r15
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 24], rdx
	mov	qword ptr [r11 + r12 + 16], rcx
	mov	qword ptr [r11 + r12 + 8], rsi
	mov	qword ptr [r11 + r12], rax
	cmp	rax, r8
	sbb	rsi, r9
	sbb	rcx, rdi
	sbb	rdx, r10
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_2886
# %bb.2678:
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
.LBB5_2679:                             # %OP9394.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_122] # xmm0 = [20098,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 128]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	add	rax, r11
	add	rax, -96
.LBB5_2680:                             # %OP9910.JUMPDEST.sink.split
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, r10
	shl	rcx, 5
	add	r10, 3
	mov	rdx, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdi, qword ptr [rax + 24]
	mov	rax, qword ptr [rax + 16]
	mov	qword ptr [r11 + rcx + 80], rax
	mov	qword ptr [r11 + rcx + 88], rdi
	mov	qword ptr [r11 + rcx + 64], rdx
	mov	qword ptr [r11 + rcx + 72], rsi
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
.LBB5_2681:                             # %OP9910.JUMPDEST
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rdi + 1]
	mov	rax, rdi
	shl	rax, 5
	lea	rbx, [r11 + rax]
	lea	rsi, [rdi + 2]
	mov	r8d, dword ptr [r11 + rax - 48]
	mov	r15, qword ptr [r11 + rax - 64]
	mov	r9, qword ptr [r11 + rax - 56]
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	shl	rcx, 5
	lea	rdx, [r11 + rcx]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	mov	qword ptr [r11 + rcx + 8], r9
	mov	qword ptr [r11 + rcx + 16], r8
	mov	qword ptr [r11 + rcx], r15
	mov	qword ptr [r11 + rcx + 24], 0
	add	rdi, 3
	mov	qword ptr [rbp - 168], rsi      # 8-byte Spill
	mov	rax, rsi
	shl	rax, 5
	lea	rcx, [r11 + rax]
	mov	qword ptr [r11 + rax + 24], 0
	mov	qword ptr [r11 + rax + 8], 0
	mov	qword ptr [r11 + rax + 16], 0
	mov	qword ptr [r11 + rax], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rax, r13
	cmp	rax, 31
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	jbe	.LBB5_3051
.LBB5_2682:                             # %OP9918.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + r13 + 24], r15
	movbe	qword ptr [rax + r13 + 16], r9
	movbe	qword ptr [rax + r13 + 8], r8
	mov	qword ptr [rax + r13], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rdx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_58] # xmm1 = [16,0]
	vmovdqu	ymmword ptr [rcx], ymm1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 4]
	mov	rax, rdi
	shl	rax, 5
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	lea	r13, [r11 + rax]
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	jbe	.LBB5_3052
.LBB5_2683:                             # %OP9923.PUSH1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_76] # ymm0 = [0,0,0,1152921504606846976]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 24]
	mov	r15, r8
	shl	r15, 5
	mov	qword ptr [r11 + r15 + 24], rsi
	mov	qword ptr [r11 + r15 + 8], rdx
	mov	qword ptr [r11 + r15 + 16], rax
	mov	qword ptr [r11 + r15], rcx
	mov	rdi, r12
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
	mov	rsi, r13
	mov	r14, r11
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1134
# %bb.2684:                             # %OP9927.DUP5
	mov	rdi, r12
	add	r15, r14
	mov	r10, qword ptr [rbx - 16]
	mov	rcx, qword ptr [rbx - 32]
	mov	r12, qword ptr [rbx - 24]
	mov	rax, qword ptr [rbx - 8]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r12
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [rbp - 144], r15      # 8-byte Spill
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	mov	qword ptr [r15], rcx
	mov	rax, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	r15, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], r15
	mov	qword ptr [rbx + 168], rax
	mov	r14, qword ptr [rdi + 40]
	mov	r9, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	r9, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r11
	cmp	rsi, r9
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	ja	.LBB5_3053
.LBB5_2685:                             # %OP9930.SWAP1
	add	r13, qword ptr [r14 + 8]
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	movbe	qword ptr [r15 + r13 + 16], r12
	movbe	qword ptr [r15 + r13 + 8], r10
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r15 + r13], rax
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rcx, qword ptr [rsi + 24]
	mov	r13, qword ptr [rsi]
	mov	rdx, qword ptr [rsi + 8]
	mov	r8, qword ptr [rsi + 16]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rax]
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax], r13
	mov	qword ptr [rbp - 112], rcx      # 8-byte Spill
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rbp - 120], rdx      # 8-byte Spill
	mov	qword ptr [rax + 8], rdx
	mov	r15, qword ptr [r9]
	mov	rax, qword ptr [r9 + 16]
	mov	rcx, qword ptr [r9 + 8]
	mov	rdx, qword ptr [r9 + 24]
	vmovdqu	ymmword ptr [r9], ymm0
	mov	qword ptr [rsi + 24], rdx
	mov	qword ptr [rsi + 16], rax
	mov	qword ptr [rsi + 8], rcx
	mov	qword ptr [rsi], r15
	mov	r12, qword ptr [rdi + 40]
	mov	r10, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	r10, r14
	mov	rsi, r15
	add	rsi, 32
	cmovb	rsi, r11
	xor	r8d, r8d
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	sbb	r8, rdx
	cmovb	rsi, r11
	cmp	rsi, r10
	ja	.LBB5_3054
.LBB5_2686:                             # %OP9933.SWAP1
	add	r14, qword ptr [r12 + 8]
	movbe	qword ptr [r15 + r14 + 24], r13
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r15 + r14], rax
	mov	rax, qword ptr [r9 + 16]
	mov	rcx, qword ptr [r9]
	mov	rdx, qword ptr [r9 + 8]
	mov	rsi, qword ptr [r9 + 24]
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], rcx
	vmovdqu	ymmword ptr [r9], ymm0
	mov	rsi, rbx
	mov	r12, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.2687:                             # %OP9935.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r15, qword ptr [rbp - 144]      # 8-byte Reload
	jne	.LBB5_1191
# %bb.2688:                             # %OP9936.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	xor	eax, eax
	cmp	byte ptr [rbx], 0
	sete	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB5_2691
.LBB5_2689:                             # %OP9979.JUMPDEST
	add	rax, -3
	mov	rcx, rax
	shl	rcx, 5
.LBB5_2690:                             # %dynamic_jump_table
	mov	rdi, qword ptr [r11 + rcx + 24]
	mov	r13, qword ptr [r11 + rcx + 16]
	mov	rsi, qword ptr [r11 + rcx]
	mov	rcx, qword ptr [r11 + rcx + 8]
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rdx + 312]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	jmp	.LBB5_32
.LBB5_2691:                             # %OP9941.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1191
# %bb.2692:                             # %OP9942.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	r14, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 8], 0
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1191
# %bb.2693:                             # %OP9946.PUSH1
	mov	rax, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, r8
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	add	r9, 36
	adc	r10, 0
	adc	r8, 0
	adc	rax, 0
	mov	qword ptr [r13 + 16], r8
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r10
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1039
# %bb.2694:                             # %OP9957.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_147] # xmm0 = [46,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 46
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1039
# %bb.2695:                             # %OP9960.PUSH1
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 23204
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 46
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], rsi
	mov	rdi, r12
	mov	rsi, r14
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1039
# %bb.2696:                             # %OP9967.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqu	ymmword ptr [r13], ymm1
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1037
# %bb.2697:                             # %OP9973.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], r9
	sub	r8, rdx
	sbb	r9, rsi
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2698:                             # %OP3836.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, rax
	shl	r15, 5
	lea	rbx, [r11 + r15]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_154] # xmm0 = [6,0,0,0]
	vmovdqu	ymmword ptr [r11 + r15 - 32], ymm0
	lea	r14, [rax + 1]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	mov	r13, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_371
# %bb.2699:                             # %OP3841.PUSH32
	lea	rsi, [r15 + r13]
	add	rsi, -32
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_59] # ymm0 = [18446744073709551360,18446744073709551615,18446744073709551615,18446744073709551615]
	vmovups	ymmword ptr [r13 + r14], ymm0
	vmovdqu	xmm0, xmmword ptr [rbx + 8]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, -256
	and	rcx, qword ptr [rbx]
	mov	qword ptr [rbx], rcx
	mov	qword ptr [r13 + r14 + 24], 0
	mov	qword ptr [r13 + r14 + 8], 0
	mov	qword ptr [r13 + r14 + 16], 0
	mov	qword ptr [r13 + r14], 255
	vmovups	xmm1, xmmword ptr [rbx - 184]
	mov	rdx, qword ptr [rbx - 168]
	mov	rdi, qword ptr [rbx - 192]
	mov	qword ptr [rbx + 64], rdi
	mov	qword ptr [rbx + 88], rdx
	vmovups	xmmword ptr [rbx + 72], xmm1
	vxorps	xmm1, xmm1, xmm1
	vmovups	xmmword ptr [r13 + r14 + 8], xmm1
	movzx	edx, dil
	mov	qword ptr [r13 + r14], rdx
	mov	qword ptr [r13 + r14 + 24], 0
	or	rcx, rdx
	vmovdqu	ymm1, ymmword ptr [rbx - 32]
	mov	qword ptr [rbx - 8], rax
	vmovdqu	xmmword ptr [rbx - 24], xmm0
	mov	qword ptr [rbx - 32], rcx
	vmovdqu	ymmword ptr [rbx], ymm1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax - 1]
	mov	rdi, r12
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_102
# %bb.2700:                             # %OP3849.PUSH1
	mov	qword ptr [rbp - 152], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_153] # xmm0 = [8,0,0,0]
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	vmovdqu	ymmword ptr [r13 + r15], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.2701:                             # %OP3852.PUSH32
	add	r14, r13
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	add	r15, 3
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_155] # ymm0 = [0,0,18446744069414584320,18446744073709551615]
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	vpxor	xmm1, xmm1, xmm1
	vmovdqa	xmmword ptr [rbx], xmm1
	movabs	rdi, -4294967296
	mov	qword ptr [rbx + 16], rdi
	mov	qword ptr [rbx + 24], -1
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rdx
	vmovups	ymmword ptr [rbx + 64], ymm0
	and	rax, rdi
	mov	qword ptr [r14 + 24], rcx
	vmovdqa	xmmword ptr [r14], xmm1
	mov	qword ptr [r14 + 16], rax
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rdx, qword ptr [rbx - 152]
	mov	rdi, qword ptr [rbx - 136]
	mov	rsi, qword ptr [rbx - 160]
	mov	r8, qword ptr [rbx - 144]
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 16], r8
	mov	qword ptr [r13 + r15 + 24], rdi
	mov	qword ptr [r13 + r15], rsi
	mov	qword ptr [r13 + r15 + 8], rdx
	vmovdqu	ymmword ptr [rbx + 128], ymm0
	mov	edi, r8d
	mov	qword ptr [r13 + r15], rsi
	mov	qword ptr [r13 + r15 + 16], rdi
	mov	qword ptr [r13 + r15 + 8], rdx
	mov	qword ptr [r13 + r15 + 24], 0
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r13 + r15 + 16], rax
	vmovdqa	xmmword ptr [r13 + r15], xmm1
	mov	qword ptr [r13 + r15 + 24], rcx
	mov	qword ptr [rbx + 80], rax
	mov	qword ptr [rbx + 88], rcx
	vmovdqa	xmmword ptr [rbx + 64], xmm1
	vmovdqu	ymmword ptr [r13 + r15], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [r13 + r15 + 8], rdx
	mov	qword ptr [r13 + r15 + 16], rdi
	mov	qword ptr [r13 + r15], rsi
	mov	qword ptr [r13 + r15 + 24], 0
	or	rax, rdi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rdx
	mov	qword ptr [rbx + 80], rax
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 16], rax
	vmovdqu	ymm1, ymmword ptr [rbx - 32]
	vmovdqu	ymmword ptr [rbx - 32], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm1
	mov	rdi, r12
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.2702:                             # %OP3867.PUSH1
	lea	rsi, [rbx + 64]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r14], ymm0
	vmovdqu	ymmword ptr [rsi], ymm0
	mov	rdi, r12
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_751
# %bb.2703:                             # %OP3870.DUP3
	add	r15, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rax, qword ptr [rbx + 16]
	mov	rsi, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rsi
	and	rdx, qword ptr [rbx + 72]
	and	rcx, qword ptr [rbx + 88]
	and	rsi, qword ptr [rbx + 64]
	and	rax, qword ptr [rbx + 80]
	mov	qword ptr [rbx + 80], rax
	mov	qword ptr [rbx + 64], rsi
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 72], rdx
	mov	r11, qword ptr [rbx - 120]
	mov	rdi, qword ptr [rbx - 104]
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	r12, qword ptr [rbx - 128]
	mov	r13, qword ptr [rbx - 112]
	mov	qword ptr [r15], r12
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], r11
	mov	r8, qword ptr [rbx - 32]
	mov	rdi, qword ptr [rbx - 16]
	mov	r9, qword ptr [rbx - 24]
	mov	r10, qword ptr [rbx - 8]
	mov	qword ptr [rbx + 128], r8
	and	r8, r12
	mov	qword ptr [rbx + 136], r9
	and	r9, r11
	mov	qword ptr [rbx + 144], rdi
	and	rdi, r13
	mov	qword ptr [rbx + 152], r10
	and	r10, qword ptr [rbp - 80]       # 8-byte Folded Reload
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 16], rdi
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], r8
	or	r8, rsi
	or	r9, rdx
	or	rdi, rax
	or	r10, rcx
	mov	qword ptr [rbx + 88], r10
	mov	qword ptr [rbx + 80], rdi
	mov	qword ptr [rbx + 72], r9
	mov	qword ptr [rbx + 64], r8
	vmovdqu	ymm0, ymmword ptr [r14]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], rdi
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rbx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, rbx
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1958
# %bb.2704:                             # %OP3878.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_31] # xmm0 = [2,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	vmovdqu	ymmword ptr [rsi], ymm0
	mov	rdi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_751
# %bb.2705:                             # %OP3881.SWAP1
	mov	rbx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbx + 80]
	mov	rax, qword ptr [rbx + 64]
	mov	r15, qword ptr [rbx + 72]
	mov	r12, qword ptr [rbx + 88]
	mov	rdx, qword ptr [r14 + 24]
	mov	qword ptr [rbp - 144], rdx      # 8-byte Spill
	mov	rcx, qword ptr [r14]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rsi, qword ptr [r14 + 8]
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	mov	r13, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 120], r13      # 8-byte Spill
	mov	qword ptr [r14 + 24], r12
	mov	qword ptr [r14 + 8], r15
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14], rax
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r13
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 80], r9
	mov	qword ptr [rbx + 64], r10
	mov	qword ptr [rbx + 88], rdi
	mov	qword ptr [rbx + 72], r8
	and	r8, r15
	and	r10, rax
	and	rdi, r12
	and	r9, r11
	mov	qword ptr [r14 + 16], r9
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14], r10
	mov	qword ptr [r14 + 8], r8
	mov	r12, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 16]
	mov	rsi, qword ptr [rbx - 8]
	mov	qword ptr [rbx - 8], rdi
	mov	qword ptr [rbx - 16], r9
	mov	qword ptr [rbx - 24], r8
	mov	qword ptr [rbx - 32], r10
	mov	qword ptr [r14 + 24], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rcx
	mov	qword ptr [r14], r12
	mov	r11, qword ptr [rbx - 96]
	mov	rax, qword ptr [rbx - 88]
	mov	r15, qword ptr [rbx - 80]
	mov	r13, qword ptr [rbx - 72]
	mov	qword ptr [rbx + 64], r11
	and	r11, r12
	mov	qword ptr [rbx + 72], rax
	and	rax, rcx
	mov	qword ptr [rbx + 80], r15
	and	r15, rdx
	mov	qword ptr [rbx + 88], r13
	and	r13, rsi
	mov	qword ptr [r14 + 24], r13
	mov	qword ptr [r14 + 16], r15
	mov	qword ptr [r14 + 8], rax
	mov	qword ptr [r14], r11
	mov	qword ptr [rbx - 8], r13
	mov	qword ptr [rbx - 16], r15
	mov	qword ptr [rbx - 24], rax
	mov	qword ptr [rbx - 32], r11
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 16], r9
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [r14], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [rbx + 16], r9
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [rbx], r10
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [r14 + 24], rdx
	mov	r12, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r14 + 16], r12
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r14 + 8], rsi
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r14], rcx
	mov	qword ptr [rbx - 8], rdx
	mov	qword ptr [rbx - 16], r12
	mov	qword ptr [rbx - 24], rsi
	mov	qword ptr [rbx - 32], rcx
	mov	qword ptr [r14 + 24], r13
	mov	qword ptr [r14 + 16], r15
	mov	qword ptr [r14 + 8], rax
	mov	qword ptr [r14], r11
	or	r11, r10
	or	rax, r8
	or	r15, r9
	or	r13, rdi
	mov	qword ptr [rbx - 8], r13
	mov	qword ptr [rbx - 16], r15
	mov	qword ptr [rbx - 24], rax
	mov	qword ptr [rbx - 32], r11
	mov	qword ptr [rbx + 24], rdx
	mov	qword ptr [rbx + 16], r12
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx], rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r12
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_1191
# %bb.2706:                             # %OP3893.PUSH2
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	add	rax, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_156] # xmm0 = [7386,0,0,0]
	vmovdqu	ymmword ptr [rax], ymm0
	lea	rsi, [rbx - 64]
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB5_643
.LBB5_1295:                             # %OP1511.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_466
.LBB5_2707:                             # %OP2956.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r10, [rax + 2]
	jmp	.LBB5_73
.LBB5_2708:                             # %OP3466.JUMPDEST.loopexit
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_196
.LBB5_2709:                             # %OP10154.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 216]      # 8-byte Reload
.LBB5_2710:                             # %OP10154.JUMPDEST
	mov	qword ptr [rbp - 216], rdi      # 8-byte Spill
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	mov	rax, rbx
	shl	rax, 5
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 64]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_34] # xmm1 = [96,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax - 64], ymm1
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	jmp	.LBB5_20
.LBB5_2711:                             # %OP7971.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2590
.LBB5_2712:                             # %OP3515.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_199
.LBB5_2713:                             # %OP8013.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_23
.LBB5_2714:                             # %dynamic_jump_table
	xor	rsi, 12553
	or	rsi, r13
	or	rsi, rcx
	je	.LBB5_411
	jmp	.LBB5_3092
.LBB5_2715:                             # %OP3448.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdi, qword ptr [rax + 128]
	mov	r8, qword ptr [rax + 136]
	mov	r9d, dword ptr [rax + 144]
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2901
.LBB5_2716:                             # %OP4402.JUMPDEST
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_132] # xmm0 = [11,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r14, [r13 - 1]
	lea	rsi, [r11 + rbx]
	add	rsi, -32
	mov	rdi, r12
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB5_371
# %bb.2717:                             # %OP4405.PUSH2
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_145] # xmm0 = [8660,0,0,0]
	vmovups	ymmword ptr [r15 + r14], ymm0
	add	rbx, r15
	mov	rax, qword ptr [rbx - 224]
	mov	rcx, qword ptr [rbx - 216]
	mov	rdx, qword ptr [rbx - 200]
	mov	rsi, qword ptr [rbx - 208]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx + 24], rdx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 8], rcx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_88] # xmm0 = [8655,0,0,0]
	vmovups	ymmword ptr [rbx + 32], ymm0
	vmovups	ymm0, ymmword ptr [rbx - 192]
	vmovups	ymmword ptr [rbx + 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_89] # xmm0 = [8649,0,0,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	r10, r13
	add	r10, 5
	mov	qword ptr [rbx + 144], rsi
	mov	qword ptr [rbx + 152], rdx
	mov	qword ptr [rbx + 128], rax
	mov	qword ptr [rbx + 136], rcx
	mov	r11, r15
	jmp	.LBB5_2817
.LBB5_2718:                             # %OP7788.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2779
.LBB5_2719:                             # %OP7865.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2786
.LBB5_2720:                             # %dynamic_jump_table
	xor	rsi, 10992
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2721:                             # %OP5392.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_571
.LBB5_2722:                             # %dynamic_jump_table
	xor	rsi, 20787
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2723:                             # %OP9753.JUMPDEST.loopexit56159
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2850
.LBB5_2724:                             # %OP8065.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 2]
.LBB5_2725:                             # %OP8065.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_144] # xmm0 = [17586,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 64]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	jmp	.LBB5_431
.LBB5_2726:                             # %OP4826.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_2728
.LBB5_2727:                             # %OP4823.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r10
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
.LBB5_2728:                             # %OP4826.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 104]
	mov	r9, qword ptr [r11 + rax - 112]
	mov	r8, qword ptr [r11 + rax - 128]
	mov	rsi, qword ptr [r11 + rax - 120]
	mov	rdi, qword ptr [r11 + rax - 32]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	r15, r10
	mov	r10, qword ptr [r11 + rax - 16]
	mov	r14, r11
	mov	r11, qword ptr [r11 + rax - 8]
	mov	qword ptr [r14 + rax + 56], r11
	mov	qword ptr [r14 + rax + 48], r10
	mov	qword ptr [r14 + rax + 40], rdx
	mov	qword ptr [r14 + rax + 32], rdi
	cmp	rdi, r8
	mov	rbx, rdx
	sbb	rbx, rsi
	mov	rbx, r10
	sbb	rbx, r9
	mov	rbx, r11
	sbb	rbx, rcx
	setae	bl
	movzx	ebx, bl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r14 + rax + 8], xmm0
	mov	qword ptr [r14 + rax], rbx
	mov	qword ptr [r14 + rax + 24], 0
	jb	.LBB5_2731
# %bb.2729:
	mov	r11, r14
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, r15
.LBB5_2730:                             # %OP4981.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_129] # xmm0 = [9890,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	inc	r10
	mov	ecx, dword ptr [rsi + 144]
	movbe	rdx, qword ptr [rsi + 136]
	bswap	rcx
	shrd	rcx, rdx, 32
	movbe	rsi, qword ptr [rsi + 128]
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	qword ptr [r11 + rax + 16], rsi
	mov	qword ptr [r11 + rax + 8], rdx
	mov	qword ptr [r11 + rax], rcx
	mov	qword ptr [r11 + rax + 24], 0
	mov	eax, 1
	jmp	.LBB5_74
.LBB5_2731:                             # %OP4833.PUSH1
	add	rax, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_125] # xmm0 = [3,0]
	vmovups	ymmword ptr [rax], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rax + 32], ymm0
	vmovups	ymm0, ymmword ptr [rax - 160]
	vmovups	ymmword ptr [rax + 64], ymm0
	mov	qword ptr [rax + 96], r8
	mov	qword ptr [rax + 112], r9
	mov	qword ptr [rax + 104], rsi
	mov	qword ptr [rax + 120], rcx
	add	r15, 5
	mov	qword ptr [rax + 128], rdi
	mov	qword ptr [rax + 144], r10
	mov	qword ptr [rax + 136], rdx
	mov	qword ptr [rax + 152], r11
	mov	rbx, r15
	shl	rbx, 5
	mov	qword ptr [r14 + rbx + 16], r9
	mov	qword ptr [r14 + rbx], r8
	mov	qword ptr [r14 + rbx + 24], rcx
	mov	qword ptr [r14 + rbx + 8], rsi
	mov	qword ptr [rax + 192], rdi
	mov	qword ptr [rax + 208], r10
	mov	qword ptr [rax + 216], r11
	mov	qword ptr [rax + 200], rdx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovdqu	ymmword ptr [r14 + rbx], ymm0
	mov	r11, r14
	mov	r14, qword ptr [rbp - 128]      # 8-byte Reload
	mov	r10, r15
.LBB5_2732:                             # %OP4844.JUMPDEST
	mov	r12, r10
	shl	r12, 5
	mov	rcx, qword ptr [r11 + r12 - 16]
	mov	r8, qword ptr [r11 + r12 - 8]
	mov	rsi, qword ptr [r11 + r12 - 32]
	mov	rdx, qword ptr [r11 + r12 - 24]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r12 + 32], ymm0
	shld	r8, rcx, 5
	shld	rcx, rdx, 5
	shld	rdx, rsi, 5
	shl	rsi, 5
	mov	qword ptr [r11 + r12 + 16], rcx
	mov	qword ptr [r11 + r12], rsi
	mov	qword ptr [r11 + r12 + 24], r8
	mov	qword ptr [r11 + r12 + 8], rdx
	mov	rax, qword ptr [r11 + r12 - 72]
	mov	rdi, qword ptr [r11 + r12 - 96]
	mov	r9, qword ptr [r11 + r12 - 88]
	mov	rbx, r10
	mov	r10, qword ptr [r11 + r12 - 80]
	mov	qword ptr [r11 + r12 - 32], rdi
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	dec	rbx
	mov	r15, rbx
	shl	r15, 5
	add	rsi, rdi
	mov	qword ptr [r11 + r12 - 24], r9
	adc	rdx, r9
	mov	qword ptr [r11 + r12 - 16], r10
	adc	rcx, r10
	mov	qword ptr [r11 + r12 - 8], rax
	vmovdqu	ymmword ptr [r11 + r12 - 96], ymm0
	adc	r8, rax
	mov	qword ptr [r11 + r15], rsi
	mov	qword ptr [r11 + r15 + 8], rdx
	mov	qword ptr [r11 + r15 + 16], rcx
	mov	qword ptr [r11 + r15 + 24], r8
	mov	r9, qword ptr [r14 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2448]
	push	qword ptr [r14 + 80]
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2424]
	mov	r8, qword ptr [rbp - 2448]
	mov	r9, qword ptr [rbp - 2440]
	mov	rcx, qword ptr [rbp - 2432]
	mov	qword ptr [r13 + r12 - 16], rcx
	mov	qword ptr [r13 + r12 - 32], r8
	mov	qword ptr [r13 + r12 - 8], rax
	mov	qword ptr [r13 + r12 - 24], r9
	mov	eax, 4294967295
	mov	qword ptr [r13 + r12 + 16], rax
	mov	qword ptr [r13 + r12], -1
	mov	qword ptr [r13 + r12 + 24], 0
	mov	qword ptr [r13 + r12 + 8], -1
	mov	eax, ecx
	mov	qword ptr [r13 + r15], r8
	mov	qword ptr [r13 + r15 + 16], rax
	mov	qword ptr [r13 + r15 + 8], r9
	mov	qword ptr [rbp - 88], r15       # 8-byte Spill
	mov	qword ptr [r13 + r15 + 24], 0
	mov	rdi, qword ptr [r13 + r12 - 128]
	mov	rdx, qword ptr [r13 + r12 - 112]
	mov	rsi, qword ptr [r13 + r12 - 120]
	mov	rcx, qword ptr [r13 + r12 - 104]
	mov	qword ptr [r13 + r12 + 24], rcx
	mov	qword ptr [r13 + r12 + 8], rsi
	mov	qword ptr [r13 + r12 + 16], rdx
	mov	qword ptr [r13 + r12], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3070
# %bb.2733:                             # %OP4858.POP
	add	r12, r13
	mov	rax, qword ptr [r12 - 128]
	mov	r10, qword ptr [r12 - 120]
	mov	r11, qword ptr [r12 - 112]
	mov	rbx, qword ptr [r12 - 104]
	mov	qword ptr [r12 - 40], rbx
	mov	qword ptr [r12 - 48], r11
	mov	qword ptr [r12 - 56], r10
	mov	qword ptr [r12 - 64], rax
	mov	rdi, qword ptr [r12 - 96]
	add	rdi, rax
	mov	rsi, qword ptr [r12 - 88]
	adc	rsi, r10
	mov	rdx, qword ptr [r12 - 80]
	adc	rdx, r11
	mov	rcx, qword ptr [r12 - 72]
	adc	rcx, rbx
	mov	qword ptr [r12 - 96], rdi
	mov	qword ptr [r12 - 88], rsi
	mov	qword ptr [r12 - 80], rdx
	mov	qword ptr [r12 - 72], rcx
	mov	r8, qword ptr [r12 - 160]
	mov	r9, qword ptr [r12 - 152]
	mov	r14, qword ptr [r12 - 136]
	mov	r15, qword ptr [r12 - 144]
	mov	qword ptr [r12 - 112], r15
	mov	qword ptr [r12 - 104], r14
	mov	qword ptr [r12 - 128], r8
	mov	qword ptr [r12 - 120], r9
	mov	qword ptr [r12 - 144], r11
	mov	qword ptr [r12 - 136], rbx
	mov	qword ptr [r12 - 160], rax
	mov	qword ptr [r12 - 152], r10
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rbx, [rax - 4]
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r14
	push	r15
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3070
# %bb.2734:                             # %OP4865.PUSH1
	lea	rax, [r12 - 160]
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	r14, rbx
	mov	rbx, rax
	shl	r14, 5
	add	r14, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	add	qword ptr [rax], 64
	adc	qword ptr [rax + 8], 0
	adc	qword ptr [rax + 16], 0
	adc	qword ptr [rax + 24], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rax
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_1087
# %bb.2735:                             # %OP4869.SLOAD
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r15, qword ptr [rbp - 128]      # 8-byte Reload
	jne	.LBB5_1087
# %bb.2736:                             # %OP4870.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_98] # xmm0 = [255,0]
	vmovdqu	ymmword ptr [r14], ymm0
	movzx	eax, byte ptr [rbx]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], 0
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	add	rcx, -5
	test	rax, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB5_2943
# %bb.2737:
	mov	r10, rcx
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2738:                             # %OP4912.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_126] # xmm0 = [9771,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovdqu	ymm0, ymmword ptr [r11 + rax - 160]
	vmovdqu	ymmword ptr [r11 + rax + 32], ymm0
	mov	rdi, qword ptr [r11 + rax - 128]
	mov	rsi, qword ptr [r11 + rax - 120]
	mov	rdx, qword ptr [r11 + rax - 112]
	mov	rcx, qword ptr [r11 + rax - 104]
	mov	qword ptr [r11 + rax + 88], rcx
	mov	qword ptr [r11 + rax + 80], rdx
	mov	qword ptr [r11 + rax + 72], rsi
	mov	qword ptr [r11 + rax + 64], rdi
	add	r10, 4
	mov	r8, qword ptr [r11 + rax - 32]
	mov	r9, qword ptr [r11 + rax - 24]
	mov	r14, r10
	mov	r10, qword ptr [r11 + rax - 16]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [r11 + rax - 8]
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 120], r11
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 112], r10
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 104], r9
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + rax + 96], r8
	mov	r13, r14
	mov	rbx, r14
	shl	rbx, 5
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx + 24], rcx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx + 8], rsi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx + 16], rdx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rbx], rdi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 184], r11
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 168], r9
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 176], r10
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r14 + rax + 160], r8
	cmp	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	r11, rcx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	setb	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rbx + 8], xmm0
	mov	qword ptr [r11 + rbx], rax
	mov	qword ptr [r11 + rbx + 24], 0
	jae	.LBB5_2934
# %bb.2739:
	mov	r10, r13
.LBB5_2740:                             # %OP4923.JUMPDEST
	mov	rbx, r10
	shl	rbx, 5
	mov	r8, qword ptr [r11 + rbx - 8]
	mov	rcx, qword ptr [r11 + rbx - 16]
	mov	rsi, qword ptr [r11 + rbx - 32]
	mov	rdx, qword ptr [r11 + rbx - 24]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rbx - 32], ymm0
	shld	r8, rcx, 5
	shld	rcx, rdx, 5
	shld	rdx, rsi, 5
	shl	rsi, 5
	mov	qword ptr [r11 + rbx - 40], r8
	mov	qword ptr [r11 + rbx - 48], rcx
	mov	qword ptr [r11 + rbx - 56], rdx
	mov	qword ptr [r11 + rbx - 64], rsi
	add	r10, -2
	mov	r14, r10
	shl	r14, 5
	add	rsi, qword ptr [r11 + rbx - 96]
	adc	rdx, qword ptr [r11 + rbx - 88]
	adc	rcx, qword ptr [r11 + rbx - 80]
	adc	r8, qword ptr [r11 + rbx - 72]
	mov	qword ptr [r11 + rbx - 96], rsi
	mov	qword ptr [r11 + rbx - 88], rdx
	mov	qword ptr [r11 + rbx - 80], rcx
	mov	qword ptr [r11 + rbx - 72], r8
	mov	r9, qword ptr [r15 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 2416]
	push	qword ptr [r15 + 80]
	mov	r15, r10
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r10, r15
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 2392]
	mov	rcx, qword ptr [rbp - 2416]
	mov	rdx, qword ptr [rbp - 2408]
	mov	rsi, qword ptr [rbp - 2400]
	mov	qword ptr [r11 + rbx - 80], rsi
	mov	qword ptr [r11 + rbx - 96], rcx
	mov	qword ptr [r11 + rbx - 72], rax
	mov	qword ptr [r11 + rbx - 88], rdx
	mov	eax, 4294967295
	mov	qword ptr [r11 + r14 + 16], rax
	mov	qword ptr [r11 + r14], -1
	mov	qword ptr [r11 + r14 + 8], -1
	mov	qword ptr [r11 + r14 + 24], 0
	mov	eax, esi
	mov	qword ptr [r11 + rbx - 96], rcx
	mov	qword ptr [r11 + rbx - 88], rdx
	mov	qword ptr [r11 + rbx - 80], rax
	mov	qword ptr [r11 + rbx - 72], 0
	mov	eax, 1
	jmp	.LBB5_74
.LBB5_2741:                             # %OP10187.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_21
.LBB5_2742:                             # %OP3795.JUMPDEST.loopexit
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [r12 + 1]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	jmp	.LBB5_282
.LBB5_2743:                             # %OP3808.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rax
	shl	r14, 5
	mov	rdi, qword ptr [r11 + r14 - 256]
	mov	rsi, qword ptr [r11 + r14 - 248]
	mov	rdx, qword ptr [r11 + r14 - 240]
	mov	rcx, qword ptr [r11 + r14 - 232]
	mov	qword ptr [r11 + r14 - 8], rcx
	mov	qword ptr [r11 + r14 - 16], rdx
	mov	qword ptr [r11 + r14 - 24], rsi
	mov	qword ptr [r11 + r14 - 32], rdi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r12
	mov	r15, r11
	mov	r12, rax
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_751
# %bb.2744:                             # %OP3811.MLOAD.contd
	add	r14, r15
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 24]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [r14 - 16], 0
	mov	qword ptr [r14 - 8], 0
	mov	qword ptr [r14 - 32], 7212
	mov	qword ptr [r14 - 24], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14], 5
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r14 + 48], rsi
	mov	qword ptr [r14 + 56], rdx
	mov	qword ptr [r14 + 32], rax
	mov	qword ptr [r14 + 40], rcx
	mov	r13, r12
	add	r13, 3
	mov	qword ptr [r14 + 80], 0
	mov	qword ptr [r14 + 88], 0
	mov	qword ptr [r14 + 64], 32
	mov	qword ptr [r14 + 72], 0
	mov	rdi, qword ptr [r14 - 240]
	mov	r8, qword ptr [r14 - 256]
	mov	r9, qword ptr [r14 - 248]
	mov	r10, qword ptr [r14 - 232]
.LBB5_2745:                             # %OP10264.JUMPDEST
	mov	r11, r13
	shl	r11, 5
	mov	qword ptr [r15 + r11 + 24], r10
	mov	qword ptr [r15 + r11 + 8], r9
	mov	qword ptr [r15 + r11 + 16], rdi
	mov	qword ptr [r15 + r11], r8
	add	r8, 32
	adc	r9, 0
	adc	rdi, 0
	adc	r10, 0
	mov	qword ptr [r14 + 40], r9
	mov	qword ptr [r14 + 32], r8
	mov	qword ptr [r14 + 48], rdi
	mov	qword ptr [r14 + 56], r10
	mov	qword ptr [r14 + 88], rdx
	mov	qword ptr [r14 + 80], rsi
	mov	qword ptr [r14 + 72], rcx
	mov	qword ptr [r14 + 64], rax
	mov	r11, r15
	jmp	.LBB5_284
.LBB5_2746:                             # %OP7661.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r10
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_87] # xmm0 = [16633,0,0,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	mov	rcx, qword ptr [r11 + rax - 64]
	mov	rdx, qword ptr [r11 + rax - 56]
	mov	rsi, qword ptr [r11 + rax - 48]
	mov	rdi, qword ptr [r11 + rax - 40]
	mov	qword ptr [r11 + rax + 56], rdi
	mov	qword ptr [r11 + rax + 48], rsi
	mov	qword ptr [r11 + rax + 40], rdx
	mov	qword ptr [r11 + rax + 32], rcx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_88] # xmm0 = [8655,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 64], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 32]
	vmovups	ymmword ptr [r11 + rax + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_89] # xmm0 = [8649,0,0,0]
.LBB5_2747:                             # %OP7746.JUMPDEST
	vmovdqu	ymmword ptr [r11 + rax + 128], ymm0
	add	r10, 6
	mov	qword ptr [r11 + rax + 184], rdi
	mov	qword ptr [r11 + rax + 176], rsi
	mov	qword ptr [r11 + rax + 168], rdx
	mov	qword ptr [r11 + rax + 160], rcx
	jmp	.LBB5_2817
.LBB5_2748:                             # %OP9418.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rax
	shl	r14, 5
	vmovups	ymm0, ymmword ptr [r11 + r14 - 160]
	vmovups	ymmword ptr [r11 + r14], ymm0
	lea	r13, [rax + 2]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r14 + 32], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r15, r11
	mov	r12, rax
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_931
# %bb.2749:                             # %OP9421.MLOAD.contd
	add	r14, r15
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 40], rsi
	mov	r8, qword ptr [r14 - 72]
	mov	rax, qword ptr [r14 - 96]
	mov	r9, qword ptr [r14 - 88]
	mov	r10, qword ptr [r14 - 80]
	mov	qword ptr [rbp - 80], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 16], r10
	lea	rbx, [r12 + 3]
	mov	qword ptr [r15 + r13], rax
	mov	qword ptr [r15 + r13 + 24], r8
	mov	qword ptr [r15 + r13 + 8], r9
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_50] # xmm0 = [4294967295,0]
	vmovdqu	ymmword ptr [r15 + rbx], ymm0
	mov	r8d, eax
	mov	qword ptr [r15 + r13], r8
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13 + 24], 0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_51] # xmm1 = [224,0,0,0]
	vmovdqu	ymmword ptr [r15 + rbx], ymm1
	shl	rax, 32
	vmovdqa	xmmword ptr [r15 + r13], xmm0
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + rbx + 16], rdx
	mov	qword ptr [r15 + rbx + 8], rsi
	mov	qword ptr [r15 + rbx], rdi
	mov	qword ptr [r15 + rbx + 24], rcx
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2750:                             # %OP9429.PUSH1
	add	r13, r15
	add	r12, 4
	add	rbx, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r14 + 56]
	mov	rdx, qword ptr [r14 + 48]
	mov	rdi, qword ptr [r14 + 32]
	mov	rsi, qword ptr [r14 + 40]
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 40], rsi
	mov	qword ptr [r14 + 56], rcx
	mov	qword ptr [r14 + 32], rdi
	mov	qword ptr [r14 + 48], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	r9, qword ptr [r14 - 56]
	mov	rax, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 64]
	mov	r10, qword ptr [r14 - 48]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	mov	eax, r10d
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12 + 8], rsi
	mov	qword ptr [r15 + r12], rdi
	mov	qword ptr [r15 + r12 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2751:                             # %OP9437.PUSH1
	add	r12, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	r9, qword ptr [r14 - 24]
	mov	rax, qword ptr [r14 - 8]
	mov	r8, qword ptr [r14 - 32]
	mov	r10, qword ptr [r14 - 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2752:                             # %OP9442.PUSH1
	mov	r15, rbx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r10, qword ptr [r13 + 24]
	mov	rbx, qword ptr [r13 + 16]
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	mov	rdi, r8
	add	rdi, 32
	mov	rsi, r9
	adc	rsi, 0
	mov	rax, rbx
	adc	rax, 0
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	r11, r10
	adc	r11, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [r15 + 8], rsi
	vmovdqu	ymmword ptr [r12], ymm0
	add	r8, 64
	adc	r9, 0
	adc	rbx, 0
	adc	r10, 0
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rbx
	mov	qword ptr [r15], r8
	mov	rdx, qword ptr [r14 + 40]
	mov	rcx, qword ptr [r14 + 56]
	mov	r13, qword ptr [r14 + 32]
	mov	rax, qword ptr [r14 + 48]
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r13
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r14 + 160], r8
	sub	r8, r13
	mov	qword ptr [r14 + 168], r9
	sbb	r9, rdx
	mov	qword ptr [r14 + 176], rbx
	sbb	rbx, rax
	mov	qword ptr [r14 + 184], r10
	sbb	r10, rcx
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 8], r9
	mov	qword ptr [r12 + 16], rbx
	mov	qword ptr [r12 + 24], r10
	mov	qword ptr [r14 + 184], r11
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 168], rsi
	mov	qword ptr [r14 + 160], rdi
	sub	rsp, 8
	mov	rcx, r11
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2753:                             # %OP9452.DUP4
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [r15 + 8]
	mov	r8, qword ptr [r15 + 24]
	mov	r9, qword ptr [r15]
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	r10, qword ptr [r15 + 16]
	mov	qword ptr [r14 + 176], r10
	mov	qword ptr [r14 + 160], r9
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	lea	r13, [r9 + 6]
	mov	qword ptr [r14 + 184], r8
	mov	qword ptr [r14 + 168], rax
	lea	rax, [r9 + 7]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	shl	r13, 5
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3076
# %bb.2754:                             # %OP9455.MLOAD.contd
	add	r13, r15
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	rsi, qword ptr [r14 + 168]
	mov	rcx, qword ptr [r14 + 184]
	mov	rdi, qword ptr [r14 + 160]
	mov	rdx, qword ptr [r14 + 176]
	mov	rbx, qword ptr [rbp - 104]      # 8-byte Reload
	shl	rbx, 5
	mov	qword ptr [r15 + rbx + 16], rdx
	mov	qword ptr [r15 + rbx], rdi
	mov	qword ptr [r15 + rbx + 24], rcx
	mov	qword ptr [r15 + rbx + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2755:                             # %OP9458.PUSH1
	mov	r15, rbx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r14 + 184]
	mov	rcx, qword ptr [r14 + 176]
	mov	rdx, qword ptr [r14 + 160]
	mov	rsi, qword ptr [r14 + 168]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 160], rdx
	mov	qword ptr [r14 + 168], rsi
	mov	qword ptr [r14 + 176], rcx
	mov	qword ptr [r14 + 184], rax
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymm0, ymmword ptr [rdi]
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 16], rcx
	vmovdqu	ymmword ptr [r14 + 160], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	rcx, qword ptr [r12 + 24]
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 168], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3056
# %bb.2756:                             # %OP9463.MLOAD.contd
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, r11
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rax, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 184], rdi
	mov	qword ptr [r14 + 168], rax
	mov	qword ptr [r14 + 176], rcx
	mov	qword ptr [r14 + 160], rdx
	mov	rsi, qword ptr [r12 + 8]
	mov	r9, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r14 + 176], r10
	mov	qword ptr [r14 + 160], r8
	mov	qword ptr [r14 + 184], r9
	mov	qword ptr [r14 + 168], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	add	r8, 32
	adc	rsi, 0
	adc	r10, 0
	adc	r9, 0
	mov	qword ptr [r14 + 176], r10
	mov	qword ptr [r14 + 160], r8
	mov	qword ptr [r14 + 168], rsi
	mov	qword ptr [r14 + 184], r9
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12], r8
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r14 + 176], rcx
	mov	qword ptr [r14 + 160], rdx
	mov	qword ptr [r14 + 184], rdi
	mov	qword ptr [r14 + 168], rax
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], rax
	vmovdqu	ymm0, ymmword ptr [r14 + 96]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [r14 + 280], r9
	mov	qword ptr [r14 + 272], r10
	mov	qword ptr [r14 + 264], rsi
	mov	qword ptr [r14 + 256], r8
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 288], ymm0
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, 10
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_2758
.LBB5_2757:                             # %OP9472.JUMPDEST.preheader.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2758:                             # %OP9472.JUMPDEST.preheader
	lea	r10, [r14 + 1]
	mov	r15, r14
	shl	r15, 5
	mov	rbx, r10
	shl	rbx, 5
	mov	rsi, qword ptr [r11 + r15 - 112]
	mov	rdi, qword ptr [r11 + r15 - 128]
	mov	r8, qword ptr [r11 + r15 - 120]
	mov	r9, qword ptr [r11 + r15 - 104]
	mov	qword ptr [r11 + r15 + 24], r9
	mov	qword ptr [r11 + r15 + 8], r8
	mov	qword ptr [r11 + r15 + 16], rsi
	mov	qword ptr [r11 + r15], rdi
	mov	r13, qword ptr [r11 + r15 - 32]
	mov	rdx, qword ptr [r11 + r15 - 24]
	mov	rcx, qword ptr [r11 + r15 - 16]
	mov	rax, qword ptr [r11 + r15 - 8]
	mov	qword ptr [r11 + rbx + 24], rax
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 8], rdx
	mov	qword ptr [r11 + rbx], r13
	cmp	r13, rdi
	mov	rdi, rdx
	sbb	rdi, r8
	mov	rdi, rcx
	sbb	rdi, rsi
	mov	rsi, rax
	sbb	rsi, r9
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 + 8], xmm0
	mov	qword ptr [r11 + r15], rsi
	mov	qword ptr [r11 + r15 + 24], 0
	jae	.LBB5_2236
# %bb.2759:                             # %OP9479.DUP2.lr.ph
	mov	rdi, rax
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	mov	qword ptr [rbp - 112], r14      # 8-byte Spill
	add	r15, r11
	add	rbx, r11
	mov	r10, rbx
	mov	r14, rax
.LBB5_2760:                             # %OP9479.DUP2
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	mov	rax, qword ptr [r15 - 40]
	mov	rbx, qword ptr [r15 - 64]
	mov	r9, qword ptr [r15 - 56]
	mov	r8, qword ptr [r15 - 48]
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15], rbx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r13
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 24], r14
	add	rbx, r13
	adc	r9, rdx
	adc	r8, rcx
	adc	rax, r14
	mov	qword ptr [r15], rbx
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 24], rax
	mov	rdi, qword ptr [r12 + 40]
	mov	r12, r10
	mov	r10, qword ptr [rdi + 16]
	mov	r14, qword ptr [rdi + 48]
	sub	r10, r14
	mov	rsi, rbx
	add	rsi, 32
	mov	rcx, -1
	cmovb	rsi, rcx
	neg	r9
	mov	r9d, 0
	sbb	r9, r8
	mov	r8d, 0
	sbb	r8, rax
	cmovb	rsi, rcx
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	cmp	rsi, r10
	ja	.LBB5_2764
.LBB5_2761:                             # %OP9482.MLOAD.contd
                                        #   in Loop: Header=BB5_2760 Depth=1
	add	r14, qword ptr [rdi + 8]
	mov	rsi, qword ptr [rbx + r14 + 24]
	mov	rdi, qword ptr [rbx + r14 + 16]
	mov	r8, qword ptr [rbx + r14]
	mov	rbx, qword ptr [rbx + r14 + 8]
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	movbe	qword ptr [r15 + 24], r8
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	movbe	qword ptr [r15 + 8], rdi
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	movbe	qword ptr [r15], rsi
	movbe	qword ptr [r15 + 16], rbx
	mov	rsi, qword ptr [r15 - 80]
	mov	rdi, qword ptr [r15 - 96]
	mov	r8, qword ptr [r15 - 88]
	mov	r9, qword ptr [r15 - 72]
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rdi
	mov	qword ptr [r15 + 64], r13
	add	r13, rdi
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r15 + 88], rax
	mov	qword ptr [r15 + 72], rdx
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r15 + 80], rcx
	adc	rdx, r8
	adc	rcx, rsi
	adc	rax, r9
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], r13
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	rdi, qword ptr [r9 + 16]
	mov	r14, qword ptr [r9 + 48]
	sub	rdi, r14
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r10, r12
	mov	rcx, r9
	ja	.LBB5_2766
.LBB5_2762:                             # %OP9487.PUSH1
                                        #   in Loop: Header=BB5_2760 Depth=1
	add	r14, qword ptr [rcx + 8]
	mov	qword ptr [r13 + r14 + 8], rbx
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r13 + r14], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [r13 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r13 + r14 + 24], rax
	mov	r14, qword ptr [r15 - 8]
	mov	rcx, qword ptr [r15 - 16]
	mov	rdx, qword ptr [r15 - 24]
	mov	r13, qword ptr [r15 - 32]
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	r14, 0
	mov	qword ptr [r15 - 32], r13
	mov	qword ptr [r15 - 16], rcx
	mov	qword ptr [r15 - 24], rdx
	mov	qword ptr [r15 - 8], r14
	mov	rsi, qword ptr [r15 - 104]
	mov	rdi, qword ptr [r15 - 128]
	mov	r8, qword ptr [r15 - 120]
	mov	r9, qword ptr [r15 - 112]
	mov	qword ptr [r15 + 16], r9
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r10], r13
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 24], r14
	mov	qword ptr [r10 + 8], rdx
	cmp	r13, rdi
	mov	rdi, rdx
	sbb	rdi, r8
	mov	rdi, rcx
	sbb	rdi, r9
	mov	rdi, r14
	sbb	rdi, rsi
	setae	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jb	.LBB5_2760
	jmp	.LBB5_2763
.LBB5_2764:                             # %resize.i51631
                                        #   in Loop: Header=BB5_2760 Depth=1
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1171
# %bb.2765:                             # %resize.i51631.OP9482.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_2760 Depth=1
	mov	rax, qword ptr [r15 - 8]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	rax, qword ptr [r15 - 16]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	r13, qword ptr [r15 - 32]
	mov	rdx, qword ptr [r15 - 24]
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	rdi, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB5_2761
.LBB5_2766:                             # %resize.i51646
                                        #   in Loop: Header=BB5_2760 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, r10
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	r10, r12
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2762
.LBB5_2448:
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_2767:                             # %OP6601.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_725
.LBB5_2768:                             # %OP8808.JUMPDEST
	mov	r9, qword ptr [rbp - 48]        # 8-byte Reload
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	r15, r9
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_61] # xmm0 = [19139,0,0,0]
	vmovups	ymmword ptr [r11 + r15], ymm0
	mov	rax, qword ptr [r11 + r15 - 72]
	mov	rcx, qword ptr [r11 + r15 - 96]
	mov	rdx, qword ptr [r11 + r15 - 88]
	mov	rsi, qword ptr [r11 + r15 - 80]
	mov	qword ptr [r11 + r15 + 48], rsi
	mov	qword ptr [r11 + r15 + 32], rcx
	mov	qword ptr [r11 + r15 + 56], rax
	mov	qword ptr [r11 + r15 + 40], rdx
	lea	r8, [r9 + 3]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_62] # ymm0 = [1334235591823946793,17506911942776287085,12466797459648398990,1552346174029726346]
	vmovups	ymmword ptr [r11 + r15 + 64], ymm0
	lea	rdi, [r9 + 4]
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	shl	r8, 5
	mov	qword ptr [r11 + r8 + 16], rsi
	mov	qword ptr [r11 + r8 + 24], rax
	mov	qword ptr [r11 + r8], rcx
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	qword ptr [r11 + r8 + 8], rdx
	vmovups	ymm0, ymmword ptr [r11 + r15 - 64]
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	shl	rdi, 5
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	vmovups	ymmword ptr [r11 + rdi], ymm0
	lea	r13, [r9 + 6]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r15 + 160], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.2769:                             # %OP8817.MLOAD.contd
	mov	qword ptr [rbp - 112], r15      # 8-byte Spill
	add	r15, r14
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 184], rcx
	mov	qword ptr [r15 + 168], rsi
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r15 + 160], rdi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 7]
	shl	r13, 5
	mov	qword ptr [r14 + r13 + 24], 0
	mov	qword ptr [r14 + r13 + 8], 0
	mov	qword ptr [r14 + r13 + 16], 0
	mov	qword ptr [r14 + r13], 32
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15 + 168], rsi
	mov	qword ptr [r15 + 184], rcx
	mov	qword ptr [r15 + 160], rdi
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r14 + r13 + 24], rcx
	mov	qword ptr [r14 + r13 + 8], rsi
	mov	qword ptr [r14 + r13 + 16], rdx
	mov	qword ptr [r14 + r13], rdi
	mov	r9, qword ptr [r15 + 72]
	mov	rax, qword ptr [r15 + 88]
	mov	r8, qword ptr [r15 + 64]
	mov	r10, qword ptr [r15 + 80]
	mov	rbx, r12
	shl	rbx, 5
	mov	qword ptr [r14 + rbx + 16], r10
	mov	qword ptr [r14 + rbx], r8
	mov	qword ptr [r14 + rbx + 24], rax
	mov	qword ptr [r14 + rbx + 8], r9
	mov	qword ptr [r15 + 280], rcx
	mov	qword ptr [r15 + 272], rdx
	mov	qword ptr [r15 + 264], rsi
	mov	qword ptr [r15 + 256], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3097
# %bb.2770:                             # %OP8824.PUSH1
	add	r13, r14
	add	rbx, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	r9, qword ptr [r15 + 104]
	mov	rax, qword ptr [r15 + 120]
	mov	r8, qword ptr [r15 + 96]
	mov	r10, qword ptr [r15 + 112]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_52] # ymm0 = [18446744073709551615,18446744073709551615,4294967295,0]
	vmovdqu	ymmword ptr [r15 + 256], ymm0
	mov	eax, r10d
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [r15 + 280], rcx
	mov	qword ptr [r15 + 272], rdx
	mov	qword ptr [r15 + 256], rdi
	mov	qword ptr [r15 + 264], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	0
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3097
# %bb.2771:                             # %OP8831.PUSH1
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	add	r10, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdi, 32
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	r9, qword ptr [r10 + 8]
	mov	rax, qword ptr [r10 + 24]
	mov	r8, qword ptr [r10]
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	r10, qword ptr [r10 + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 272], rdx
	mov	qword ptr [r15 + 256], rdi
	mov	qword ptr [r15 + 280], rcx
	mov	qword ptr [r15 + 264], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3097
# %bb.2772:                             # %OP8836.PUSH1
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	lea	r12, [r14 + rax]
	add	r12, 64
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	rax, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rbx, rax
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovups	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	vmovups	ymmword ptr [r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3056
# %bb.2773:                             # %OP8844.MLOAD.contd
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	r14, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 32
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r15 + 160], rdi
	mov	qword ptr [r15 + 184], rcx
	mov	qword ptr [r15 + 168], rsi
	mov	r9, qword ptr [r15 + 72]
	mov	rax, qword ptr [r15 + 88]
	mov	r8, qword ptr [r15 + 64]
	mov	r10, qword ptr [r15 + 80]
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r9
	sub	r8, rdi
	sbb	r9, rsi
	sbb	r10, rdx
	sbb	rax, rcx
	mov	qword ptr [r15 + 160], r8
	mov	qword ptr [r15 + 168], r9
	mov	qword ptr [r15 + 176], r10
	mov	qword ptr [r15 + 184], rax
	add	r8, -32
	adc	r9, -1
	adc	r10, -1
	adc	rax, -1
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14], r8
	mov	qword ptr [r15 + 184], rcx
	mov	qword ptr [r15 + 176], rdx
	mov	qword ptr [r15 + 168], rsi
	mov	qword ptr [r15 + 160], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2774:                             # %OP8852.SWAP1
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	r10, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r11, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 8], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	sub	rsp, 8
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	r11
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	jne	.LBB5_1171
# %bb.2775:                             # %OP8855.DUP1
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.2776:                             # %OP8856.MLOAD.contd
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx], rcx
	mov	rdi, qword ptr [r12 + 8]
	mov	r8, qword ptr [r12 + 24]
	mov	r9, qword ptr [r12]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 8], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	add	r9, 32
	adc	rdi, 0
	adc	r10, 0
	adc	r8, 0
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 24], r8
	mov	r14, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	mov	r12, r14
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB5_1171
.LBB5_2777:                             # %OP9406.JUMPDEST.sink.split
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	mov	rcx, qword ptr [r11 + rax - 32]
	mov	rdx, qword ptr [r11 + rax - 24]
	mov	rsi, qword ptr [r11 + rax - 8]
	mov	rax, qword ptr [r11 + rax - 16]
	mov	qword ptr [rbx + 16], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 8], rdx
.LBB5_2778:                             # %OP9406.JUMPDEST
	mov	rax, r13
	shl	rax, 5
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_68] # ymm0 = [4922695492300419442,11720276343920480633,2148283114,0]
	vmovups	ymmword ptr [r11 + rax], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_69] # xmm0 = [1825482322,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 32], ymm0
	vmovups	ymm0, ymmword ptr [r11 + rax - 96]
	vmovups	ymmword ptr [r11 + rax + 64], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_79] # xmm0 = [20148,0,0,0]
	vmovups	ymmword ptr [r11 + rax + 96], ymm0
	add	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_80] # xmm0 = [20142,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax + 128], ymm0
.LBB5_2779:                             # %OP7788.JUMPDEST
	mov	rbx, r13
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	lea	r14, [r13 + 2]
	lea	rsi, [r11 + rbx]
	add	rsi, 32
	vmovdqu	ymmword ptr [r11 + rbx + 32], ymm0
	mov	rdi, r12
	mov	edx, 17
	mov	r15, r11
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.2780:                             # %OP7792.PUSH1
	add	rbx, r15
	shl	r14, 5
	lea	rax, [r15 + r14]
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	lea	rdi, [r13 + 4]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	r15, qword ptr [r12 + 40]
	mov	rcx, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rcx, r14
	mov	eax, 64
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	xor	eax, eax
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	edx, 0
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	mov	edx, 0
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	cmp	rcx, 95
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	jbe	.LBB5_3044
.LBB5_2781:                             # %OP7794.MLOAD.contd
	mov	rcx, qword ptr [r15 + 8]
	mov	r11, qword ptr [rcx + r14 + 88]
	mov	r10, qword ptr [rcx + r14 + 80]
	mov	r8, qword ptr [rcx + r14 + 64]
	mov	r9, qword ptr [rcx + r14 + 72]
	movbe	qword ptr [rbx + 112], r9
	movbe	qword ptr [rbx + 96], r11
	movbe	qword ptr [rbx + 120], r8
	bswap	r11
	movbe	qword ptr [rbx + 104], r10
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	shl	rdi, 5
	mov	rcx, qword ptr [rbx + 32]
	mov	r13d, ecx
	not	r13d
	and	r13d, 1
	shl	r13d, 8
	xor	eax, eax
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	add	r13, -1
	mov	r15d, 0
	adc	r15, -1
	mov	edx, 0
	adc	rdx, -1
	mov	eax, 0
	adc	rax, -1
	and	r13, rcx
	vpcmpeqd	ymm0, ymm0, ymm0
	vmovdqu	ymmword ptr [rbx + 224], ymm0
	and	r15, qword ptr [rbx + 40]
	and	rdx, qword ptr [rbx + 48]
	and	rax, qword ptr [rbx + 56]
	mov	rsi, rax
	shld	rsi, rdx, 63
	shld	rdx, r15, 63
	shld	r15, r13, 63
	shr	rax
	mov	r13, r15
	add	r13, 31
	mov	r12, rdx
	adc	r12, 0
	mov	rcx, rsi
	adc	rcx, 0
	mov	r14, rax
	adc	r14, 0
	and	r13, -32
	add	r13, r11
	bswap	r9
	bswap	r10
	adc	r12, r10
	adc	rcx, r9
	bswap	r8
	adc	r14, r8
	mov	qword ptr [rbx + 32], 32
	mov	qword ptr [rbx + 48], 0
	mov	qword ptr [rbx + 40], 0
	mov	qword ptr [rbx + 56], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx + 192], ymm0
	add	r13, 32
	adc	r12, 0
	adc	rcx, 0
	adc	r14, 0
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r9 + rdi], r13
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	mov	qword ptr [r9 + rdi + 16], rcx
	mov	qword ptr [rbp - 144], r12      # 8-byte Spill
	mov	qword ptr [r9 + rdi + 8], r12
	mov	qword ptr [rbp - 160], r14      # 8-byte Spill
	mov	qword ptr [r9 + rdi + 24], r14
	mov	qword ptr [rbx + 64], r15
	mov	qword ptr [rbx + 80], rsi
	mov	qword ptr [rbx + 88], rax
	mov	qword ptr [rbx + 72], rdx
	mov	r12, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbx + 160], r12
	mov	r15, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rbx + 176], r15
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbx + 184], r11
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbx + 168], rax
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, qword ptr [r10 + 16]
	mov	r14, qword ptr [r10 + 48]
	sub	rcx, r14
	mov	rsi, r12
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rax
	mov	eax, 0
	sbb	rax, r15
	sbb	qword ptr [rbp - 168], r11      # 8-byte Folded Spill
	lea	rdi, [r9 + rdi]
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	lea	rdx, [rax + 8]
	cmovb	rsi, r8
	cmp	rsi, rcx
	mov	rcx, r10
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	ja	.LBB5_3046
.LBB5_2782:                             # %OP7827.DUP2
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	add	r14, qword ptr [rcx + 8]
	movbe	qword ptr [r12 + r14 + 24], r13
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	movbe	qword ptr [r12 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r12 + r14 + 8], rax
	mov	rax, qword ptr [rbp - 160]      # 8-byte Reload
	movbe	qword ptr [r12 + r14], rax
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r10, qword ptr [rax + 16]
	mov	r13, qword ptr [rax]
	mov	rcx, qword ptr [rax + 8]
	mov	r11, qword ptr [rax + 24]
	mov	qword ptr [rdi + 24], r11
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [rdi + 8], rcx
	mov	qword ptr [rdi + 16], r10
	mov	qword ptr [rdi], r13
	mov	rax, qword ptr [rbx + 104]
	mov	rcx, qword ptr [rbx + 120]
	mov	r14, qword ptr [rbx + 96]
	mov	rdx, qword ptr [rbx + 112]
	mov	qword ptr [rbx + 176], rdx
	mov	qword ptr [rbx + 184], rcx
	mov	qword ptr [rbx + 160], r14
	mov	qword ptr [rbx + 168], rax
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	r12, qword ptr [r15 + 48]
	sub	rdi, r12
	mov	rsi, r14
	add	rsi, 32
	cmovb	rsi, r8
	mov	r9, -1
	xor	r8d, r8d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r8, rcx
	cmovb	rsi, r9
	cmp	rsi, rdi
	ja	.LBB5_3047
.LBB5_2783:                             # %OP7830.PUSH1
	add	r12, qword ptr [r15 + 8]
	movbe	qword ptr [r14 + r12 + 24], r13
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r14 + r12 + 16], rax
	movbe	qword ptr [r14 + r12 + 8], r10
	movbe	qword ptr [r14 + r12], r11
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	rax, qword ptr [rbx + 8]
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	mov	rax, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_185] # xmm1 = [7497,0,0,0]
	mov	rsi, qword ptr [rbx + 120]
	mov	r9, qword ptr [rbx + 112]
	mov	rdi, qword ptr [rbx + 104]
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	mov	rdx, qword ptr [rbx + 96]
	mov	qword ptr [rbp - 152], rdx      # 8-byte Spill
	mov	rax, qword ptr [rbx + 32]
	add	rax, rdx
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	r15, qword ptr [rbx + 40]
	adc	r15, rdi
	mov	r8, qword ptr [rbx + 48]
	adc	r8, r9
	mov	r12, qword ptr [rbx + 56]
	adc	r12, rsi
	vmovdqu	ymmword ptr [rbx + 32], ymm1
	mov	r13, qword ptr [rbp - 96]       # 8-byte Reload
	shl	r13, 5
	mov	r10, qword ptr [rbx + 72]
	mov	r14, qword ptr [rbx + 88]
	mov	rax, r10
	or	rax, r14
	mov	r11, qword ptr [rbx + 64]
	mov	rcx, qword ptr [rbx + 80]
	mov	rdx, r11
	or	rdx, rcx
	xor	edi, edi
	or	rdx, rax
	mov	qword ptr [rbx + 80], r9
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbx + 64], rax
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbx + 88], rsi
	mov	rdx, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [rbx + 72], rdx
	mov	rdx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rdx + 16], rcx
	mov	qword ptr [rdx + 24], r14
	mov	qword ptr [rdx], r11
	mov	qword ptr [rdx + 8], r10
	mov	qword ptr [rbx + 120], rax
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	mov	qword ptr [rbx + 112], r9
	mov	rsi, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rbx + 104], rsi
	mov	rdx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbx + 96], rdx
	mov	qword ptr [rbx + 184], r12
	mov	qword ptr [rbx + 176], r8
	mov	qword ptr [rbx + 168], r15
	mov	r8, rdx
	mov	rdx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 216], rax
	mov	qword ptr [rbx + 208], r9
	mov	qword ptr [rbx + 200], rsi
	mov	qword ptr [rbx + 192], r8
	mov	qword ptr [rbx + 248], r14
	mov	qword ptr [rbx + 240], rcx
	mov	qword ptr [rbx + 232], r10
	mov	qword ptr [rbx + 224], r11
	sete	dil
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r13], rdi
	vmovdqu	xmmword ptr [rax + r13 + 8], xmm0
	mov	qword ptr [rax + r13 + 24], 0
	je	.LBB5_2796
# %bb.2784:                             # %OP7846.DUP1
	add	r13, rax
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_33] # xmm1 = [31,0]
	vmovdqu	ymmword ptr [rbx + 288], ymm1
	xor	eax, eax
	mov	edx, 31
	cmp	rdx, r11
	mov	edx, 0
	sbb	rdx, r10
	mov	edx, 0
	sbb	rdx, rcx
	sbb	rax, r14
	setb	al
	movzx	eax, al
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jae	.LBB5_2797
# %bb.2785:
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
.LBB5_2786:                             # %OP7865.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	lea	rbx, [r11 + rax]
	mov	rdi, qword ptr [r11 + rax - 80]
	mov	rdx, qword ptr [r11 + rax - 96]
	mov	rcx, qword ptr [r11 + rax - 88]
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	lea	rsi, [r10 - 1]
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	shl	rsi, 5
	mov	r8, qword ptr [r11 + rsi]
	add	r8, rdx
	mov	r9, qword ptr [r11 + rsi + 8]
	adc	r9, rcx
	mov	r10, qword ptr [r11 + rsi + 16]
	adc	r10, rdi
	mov	r14, r11
	mov	r11, qword ptr [r11 + rsi + 24]
	mov	qword ptr [r14 + rax - 80], r10
	mov	r10, qword ptr [r14 + rax - 72]
	lea	rsi, [r14 + rsi]
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	adc	r11, r10
	mov	qword ptr [r14 + rax - 96], r8
	lea	rsi, [r14 + rax]
	add	rsi, -32
	mov	qword ptr [r14 + rax - 72], r11
	mov	qword ptr [r14 + rax - 88], r9
	mov	r8, qword ptr [r14 + rax - 56]
	mov	r9, qword ptr [r14 + rax - 48]
	mov	qword ptr [r14 + rax - 48], rdi
	mov	r15, qword ptr [r14 + rax - 64]
	mov	qword ptr [r14 + rax - 64], rdx
	mov	rdx, qword ptr [r14 + rax - 40]
	mov	qword ptr [r14 + rax - 40], r10
	mov	qword ptr [r14 + rax - 56], rcx
	mov	qword ptr [r14 + rax - 16], r9
	mov	qword ptr [r14 + rax - 32], r15
	mov	qword ptr [r14 + rax - 8], rdx
	mov	qword ptr [r14 + rax - 24], r8
	mov	qword ptr [r14 + rax + 16], 0
	mov	qword ptr [r14 + rax], 0
	mov	qword ptr [r14 + rax + 24], 0
	mov	qword ptr [r14 + rax + 8], 0
	mov	r13, qword ptr [r12 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r14, r12
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	cmp	rax, 31
	jbe	.LBB5_3059
.LBB5_2787:                             # %OP7872.PUSH1
	mov	rax, qword ptr [r13 + 8]
	movbe	qword ptr [rax + r12 + 24], r15
	movbe	qword ptr [rax + r12 + 16], r8
	movbe	qword ptr [rax + r12 + 8], r9
	movbe	qword ptr [rax + r12], rdx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_2795
# %bb.2788:                             # %OP7875.SWAP1
	mov	r12, r14
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 16]
	vmovdqa	xmm0, xmmword ptr [rbx - 64]
	vmovdqa	xmm1, xmmword ptr [rbx - 48]
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 40], rax
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 56], rdx
	vmovdqa	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rbp - 96]       # 8-byte Reload
.LBB5_2789:                             # %OP7876.JUMPDEST.preheader
	lea	r15, [rbx + 1]
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	shl	rbx, 5
	add	rbx, r11
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	shl	r15, 5
	add	r15, r11
	.p2align	4, 0x90
.LBB5_2790:                             # %OP7876.JUMPDEST
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_142
# %bb.2791:                             # %OP7879.DUP2
                                        #   in Loop: Header=BB5_2790 Depth=1
	mov	rax, qword ptr [rbx - 16]
	mov	r13, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 8]
	mov	qword ptr [r15 + 24], rdx
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r13
	mov	r9, qword ptr [rbx + 8]
	mov	r14, qword ptr [r12 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rdi, r12
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	mov	rcx, qword ptr [rbx + 24]
	mov	eax, 0
	sbb	rax, rdx
	mov	r10, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_2794
.LBB5_2792:                             # %OP7881.SWAP1
                                        #   in Loop: Header=BB5_2790 Depth=1
	add	r12, qword ptr [r14 + 8]
	movbe	qword ptr [r13 + r12 + 24], r10
	movbe	qword ptr [r13 + r12 + 16], r9
	movbe	qword ptr [r13 + r12 + 8], rdx
	movbe	qword ptr [r13 + r12], rcx
	mov	r9, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 16]
	mov	r11, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 40]
	mov	rcx, qword ptr [rbx - 48]
	mov	rdx, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 64]
	add	rsi, 1
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 40], rax
	mov	r10, rdi
	add	r10, 32
	adc	r11, 0
	adc	r13, 0
	adc	r9, 0
	mov	qword ptr [rbx - 32], r10
	mov	qword ptr [rbx - 16], r13
	mov	qword ptr [rbx - 24], r11
	mov	qword ptr [rbx - 8], r9
	mov	r8, qword ptr [rbx - 96]
	cmp	r10, r8
	mov	r10, qword ptr [rbx - 88]
	sbb	r11, r10
	mov	r11, qword ptr [rbx - 80]
	sbb	r13, r11
	mov	r13, qword ptr [rbx - 72]
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 24], r13
	mov	qword ptr [r15 + 8], r10
	sbb	r9, r13
	setb	r9b
	movzx	r9d, r9b
	mov	qword ptr [rbx], r9
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jb	.LBB5_2790
	jmp	.LBB5_2793
.LBB5_2794:                             # %resize.i50765
                                        #   in Loop: Header=BB5_2790 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB5_2792
.LBB5_2795:
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_2796:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, rax
	jmp	.LBB5_2808
.LBB5_2793:                             # %OP7892.DUP3
	sub	edi, r8d
	and	edi, 31
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx + 24], r13
	add	rdi, r8
	mov	rax, r10
	adc	rax, 0
	mov	rcx, r11
	adc	rcx, 0
	mov	rdx, r13
	adc	rdx, 0
	mov	qword ptr [rbx - 96], rdi
	mov	qword ptr [rbx - 88], rax
	mov	qword ptr [rbx - 80], rcx
	mov	qword ptr [rbx - 72], rdx
	mov	qword ptr [rbx - 32], r8
	mov	qword ptr [rbx - 24], r10
	mov	qword ptr [rbx - 16], r11
	mov	qword ptr [rbx - 8], r13
	jmp	.LBB5_2807
.LBB5_2797:                             # %OP7851.PUSH2
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r13], ymm0
	vmovdqu	ymmword ptr [rbx + 288], ymm0
	lea	rcx, [rbx + 320]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbx + 336], rax
	mov	qword ptr [rbx + 320], r8
	mov	qword ptr [rbx + 328], rsi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbx + 344], rax
	mov	rdi, r12
	mov	rsi, rcx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3060
# %bb.2798:                             # %OP7855.DIV_udiv-special-cases
	mov	r11, qword ptr [rbx + 328]
	mov	r15, qword ptr [rbx + 344]
	mov	rdi, qword ptr [rbx + 320]
	mov	r9, qword ptr [rbx + 336]
	mov	r10, qword ptr [rbx + 312]
	mov	rsi, qword ptr [rbx + 288]
	mov	r8, qword ptr [rbx + 296]
	mov	qword ptr [rbp - 192], rbx      # 8-byte Spill
	mov	rbx, qword ptr [rbx + 304]
	mov	rax, r8
	or	rax, r10
	mov	rcx, rsi
	or	rcx, rbx
	or	rcx, rax
	sete	al
	mov	rcx, r11
	or	rcx, r15
	mov	rdx, rdi
	or	rdx, r9
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, r10
	lzcnt	rdx, rbx
	add	rdx, 64
	test	r10, r10
	cmovne	rdx, rax
	lzcnt	rax, r8
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	lzcnt	r14, rsi
	add	r14, 64
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	test	r8, r8
	cmovne	r14, rax
	sub	r14, -128
	mov	qword ptr [rbp - 120], rbx      # 8-byte Spill
	mov	rax, rbx
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	or	rax, r10
	cmovne	r14, rdx
	lzcnt	rax, r15
	lzcnt	rdx, r9
	add	rdx, 64
	test	r15, r15
	cmovne	rdx, rax
	lzcnt	rax, r11
	lzcnt	rsi, rdi
	add	rsi, 64
	test	r11, r11
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r9
	or	rax, r15
	cmovne	rsi, rdx
	xor	eax, eax
	sub	r14, rsi
	mov	ebx, 0
	sbb	rbx, rbx
	mov	r10d, 0
	sbb	r10, r10
	mov	r8d, 0
	sbb	r8, r8
	mov	edx, 255
	cmp	rdx, r14
	mov	edx, 0
	sbb	rdx, rbx
	mov	edx, 0
	sbb	rdx, r10
	mov	edx, 0
	sbb	rdx, r8
	setb	dl
	or	dl, cl
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	rcx, r15
	cmovne	rcx, rax
	mov	qword ptr [rbp - 184], rcx      # 8-byte Spill
	mov	rsi, r9
	cmovne	rsi, rax
	mov	r15, r11
	cmovne	r15, rax
	cmove	rax, rdi
	jne	.LBB5_2805
# %bb.2799:                             # %OP7855.DIV_udiv-special-cases
	mov	rcx, r14
	xor	rcx, 255
	or	rcx, r10
	mov	rdx, rbx
	or	rdx, r8
	or	rdx, rcx
	je	.LBB5_2805
# %bb.2800:                             # %udiv-bb1
	mov	qword ptr [rbp - 200], r13      # 8-byte Spill
	mov	rax, r14
	add	r14, 1
	adc	rbx, 0
	adc	r10, 0
	adc	r8, 0
	mov	r12, rdi
	mov	qword ptr [rbp - 2736], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 2768], ymm0
	mov	qword ptr [rbp - 2728], r11
	mov	qword ptr [rbp - 2720], r9
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 2712], r13
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	rdx, qword ptr [rbp + rax - 2720]
	mov	rsi, qword ptr [rbp + rax - 2712]
	shld	rsi, rdx, cl
	mov	qword ptr [rbp - 184], rsi      # 8-byte Spill
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 2736]
	mov	r15, qword ptr [rbp + rax - 2728]
	mov	rax, r15
	shr	rax
	shrx	rsi, rax, rsi
	shld	r15, rdi, cl
	or	rsi, rdx
	mov	rax, rbx
	or	rax, r8
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdx, r14
	or	rdx, r10
	xor	r14d, r14d
	or	rdx, rax
	shlx	rax, rdi, rcx
	je	.LBB5_2803
# %bb.2801:                             # %udiv-preheader
	vmovdqu	ymmword ptr [rbp - 2672], ymm0
	mov	qword ptr [rbp - 2704], r12
	mov	qword ptr [rbp - 2696], r11
	mov	qword ptr [rbp - 2688], r9
	mov	qword ptr [rbp - 2680], r13
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	ecx, edx
	and	cl, 7
                                        # kill: def $dl killed $dl killed $rdx
	shr	dl, 3
	movzx	edi, dl
	mov	r12, r8
	mov	r8, qword ptr [rbp + rdi - 2680]
	mov	r11, qword ptr [rbp + rdi - 2688]
	mov	r9, r11
	shrd	r9, r8, cl
	mov	rdx, qword ptr [rbp + rdi - 2704]
	mov	rdi, qword ptr [rbp + rdi - 2696]
	shrx	r14, rdi, rcx
	mov	qword ptr [rbp - 80], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	r10, r12
	shrx	r12, r8, rcx
	mov	r8d, ecx
	not	r8b
                                        # kill: def $cl killed $cl killed $rcx
	shrd	rdx, rdi, cl
	add	r11, r11
	shlx	rcx, r11, r8
	mov	r11, qword ptr [rbp - 112]      # 8-byte Reload
	or	rcx, r14
	mov	rdi, qword ptr [rbp - 136]      # 8-byte Reload
	add	rdi, -1
	mov	qword ptr [rbp - 152], rdi      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	adc	rdi, -1
	mov	qword ptr [rbp - 160], rdi      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 120]      # 8-byte Reload
	adc	rdi, -1
	mov	qword ptr [rbp - 168], rdi      # 8-byte Spill
	mov	rdi, r11
	adc	rdi, -1
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	xor	edi, edi
	mov	qword ptr [rbp - 208], rdi      # 8-byte Spill
	xor	r14d, r14d
	xor	edi, edi
	xor	r13d, r13d
	xor	r8d, r8d
	mov	rbx, qword ptr [rbp - 184]      # 8-byte Reload
	.p2align	4, 0x90
.LBB5_2802:                             # %udiv-do-while
                                        # =>This Inner Loop Header: Depth=1
	shld	r12, r9, 1
	shld	r9, rcx, 1
	shld	rcx, rdx, 1
	shld	rdx, rbx, 1
	shld	rbx, rsi, 1
	or	rbx, r8
	shld	rsi, r15, 1
	or	rsi, r13
	shld	r15, rax, 1
	or	r15, rdi
	add	rax, rax
	or	rax, r14
	cmp	qword ptr [rbp - 152], rdx      # 8-byte Folded Reload
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	sbb	rdi, rcx
	mov	rdi, qword ptr [rbp - 168]      # 8-byte Reload
	sbb	rdi, r9
	mov	rdi, qword ptr [rbp - 176]      # 8-byte Reload
	sbb	rdi, r12
	sar	rdi, 63
	mov	r14d, edi
	and	r14d, 1
	mov	r8, rdi
	and	r8, r11
	mov	r13, rdi
	and	r13, qword ptr [rbp - 120]      # 8-byte Folded Reload
	mov	r11, rdi
	and	r11, qword ptr [rbp - 144]      # 8-byte Folded Reload
	and	rdi, qword ptr [rbp - 136]      # 8-byte Folded Reload
	sub	rdx, rdi
	sbb	rcx, r11
	mov	r11, qword ptr [rbp - 112]      # 8-byte Reload
	sbb	r9, r13
	sbb	r12, r8
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	add	r8, -1
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	adc	rdi, -1
	mov	r13, qword ptr [rbp - 88]       # 8-byte Reload
	adc	r13, -1
	adc	r10, -1
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	or	rdi, r10
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	or	r8, r13
	or	r8, rdi
	mov	edi, 0
	mov	r13d, 0
	mov	r8d, 0
	jne	.LBB5_2802
	jmp	.LBB5_2804
.LBB5_2803:
	xor	ecx, ecx
	mov	qword ptr [rbp - 208], rcx      # 8-byte Spill
	mov	rbx, qword ptr [rbp - 184]      # 8-byte Reload
.LBB5_2804:                             # %udiv-loop-exit
	shld	rbx, rsi, 1
	mov	rcx, qword ptr [rbp - 208]      # 8-byte Reload
	or	rbx, rcx
	mov	qword ptr [rbp - 184], rbx      # 8-byte Spill
	shld	rsi, r15, 1
	or	rsi, rcx
	shld	r15, rax, 1
	or	r15, rcx
	add	rax, rax
	or	rax, r14
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 200]      # 8-byte Reload
.LBB5_2805:                             # %udiv-end
	mov	rdi, qword ptr [r13]
	mov	rcx, qword ptr [r13 + 8]
	mov	r8, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13 + 24]
	imul	r9, rax
	mov	rdx, rax
	mulx	rdx, r11, r8
	imul	r8, r15
	add	r8, rdx
	add	r8, r9
	mov	r9, rsi
	mov	rdx, rsi
	mulx	rdx, rsi, rdi
	imul	r9, rcx
	mov	r10, qword ptr [rbp - 184]      # 8-byte Reload
	imul	r10, rdi
	add	r10, r9
	add	r10, rdx
	add	rsi, r11
	adc	r10, r8
	mov	rdx, rdi
	mulx	r8, r11, rax
	mov	rdx, rcx
	mulx	r9, rax, rax
	add	rax, r8
	adc	r9, 0
	mov	rdx, rdi
	mulx	rdi, r8, r15
	add	r8, rax
	adc	rdi, r9
	setb	al
	movzx	eax, al
	mov	rdx, rcx
	mulx	rcx, r15, r15
	add	r15, rdi
	adc	rcx, rax
	add	r15, rsi
	adc	rcx, r10
	mov	r10, r8
	mov	qword ptr [r13 + 8], r8
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], r11
	mov	qword ptr [r13 + 16], r15
	mov	rbx, qword ptr [rbp - 192]      # 8-byte Reload
	mov	rax, qword ptr [rbx + 168]
	mov	rcx, qword ptr [rbx + 184]
	mov	r14, qword ptr [rbx + 160]
	mov	rdx, qword ptr [rbx + 176]
	mov	qword ptr [rbx + 304], rdx
	mov	qword ptr [rbx + 288], r14
	mov	qword ptr [rbx + 312], rcx
	mov	qword ptr [rbx + 296], rax
	mov	rsi, qword ptr [r12 + 40]
	mov	rdi, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	r12, qword ptr [rsi + 48]
	sub	rdi, r12
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB5_3061
.LBB5_2806:                             # %OP7859.SWAP2
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	add	r12, qword ptr [rax + 8]
	movbe	qword ptr [r14 + r12 + 24], r11
	movbe	qword ptr [r14 + r12 + 16], r10
	movbe	qword ptr [r14 + r12 + 8], r15
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r14 + r12], rax
	mov	rax, qword ptr [rbx + 184]
	mov	rcx, qword ptr [rbx + 176]
	mov	rdx, qword ptr [rbx + 160]
	mov	rsi, qword ptr [rbx + 168]
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 32
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 184], rax
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2807:                             # %OP7900.JUMPDEST
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_2808:                             # %OP7900.JUMPDEST
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
.LBB5_2809:                             # %OP7900.JUMPDEST
	lea	rcx, [r9 - 4]
	mov	rax, r9
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax - 160], ymm0
	lea	rbx, [r11 + rax]
	mov	r14, qword ptr [r12 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	mov	rdx, r14
	cmp	rax, 95
	jbe	.LBB5_3038
.LBB5_2810:                             # %OP7907.MLOAD.contd
	mov	rax, qword ptr [r14 + 8]
	mov	r13, qword ptr [rax + r15 + 88]
	mov	r14, qword ptr [rax + r15 + 80]
	mov	rsi, qword ptr [rax + r15 + 64]
	mov	r15, qword ptr [rax + r15 + 72]
	movbe	qword ptr [rbx - 160], r13
	bswap	r13
	movbe	qword ptr [rbx - 144], r15
	bswap	r15
	movbe	qword ptr [rbx - 136], rsi
	bswap	rsi
	movbe	qword ptr [rbx - 152], r14
	bswap	r14
	mov	rax, rcx
	shl	rax, 5
	lea	rdi, [r11 + rax]
	add	r13, 64
	adc	r14, 0
	adc	r15, 0
	adc	rsi, 0
	mov	qword ptr [r11 + rax], r13
	mov	qword ptr [r11 + rax + 16], r15
	mov	qword ptr [r11 + rax + 8], r14
	mov	qword ptr [r11 + rax + 24], rsi
	mov	qword ptr [rbx - 80], 0
	mov	qword ptr [rbx - 96], 64
	mov	qword ptr [rbx - 72], 0
	mov	qword ptr [rbx - 88], 0
	mov	rax, qword ptr [rdx + 16]
	mov	r12, qword ptr [rdx + 48]
	sub	rax, r12
	cmp	rax, 95
	jbe	.LBB5_3040
.LBB5_2811:                             # %OP7913.DUP1
	mov	rax, qword ptr [rdx + 8]
	movbe	qword ptr [rax + r12 + 88], r13
	movbe	qword ptr [rax + r12 + 80], r14
	movbe	qword ptr [rax + r12 + 72], r15
	movbe	qword ptr [rax + r12 + 64], rsi
	mov	rax, qword ptr [rbx - 136]
	mov	r12, qword ptr [rbx - 160]
	mov	rdx, qword ptr [rbx - 152]
	mov	rcx, qword ptr [rbx - 144]
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi], r12
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [rdi + 8], rdx
	mov	qword ptr [rbx - 80], 0
	mov	qword ptr [rbx - 72], 0
	mov	qword ptr [rbx - 96], 1
	mov	qword ptr [rbx - 88], 0
	mov	qword ptr [rbx - 64], r12
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 40], rax
	add	r9, -3
	mov	r15, r9
	shl	r15, 5
	add	r15, r11
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13 + 48]
	sub	rdi, r14
	mov	rsi, r12
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r10
	cmp	rsi, rdi
	ja	.LBB5_3041
.LBB5_2812:                             # %OP7917.PUSH1
	add	r14, qword ptr [r13 + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_225] # ymm0 = [0,0,0,72057594037927936]
	vmovdqu	ymmword ptr [r12 + r14], ymm0
	mov	rax, qword ptr [rbx - 104]
	mov	rcx, qword ptr [rbx - 112]
	mov	r12, qword ptr [rbx - 128]
	mov	rdx, qword ptr [rbx - 120]
	add	r12, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx - 120], rdx
	mov	qword ptr [rbx - 104], rax
	mov	qword ptr [rbx - 128], r12
	mov	qword ptr [rbx - 112], rcx
	movabs	rsi, 3602879701896396800
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 64], r12
	mov	qword ptr [rbx - 40], rax
	mov	qword ptr [rbx - 56], rdx
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rdi, r14
	mov	rsi, r12
	add	rsi, 32
	cmovb	rsi, r10
	xor	r8d, r8d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r8, rax
	cmovb	rsi, r10
	cmp	rsi, rdi
	ja	.LBB5_3042
.LBB5_2813:                             # %OP7922.POP
	add	r14, qword ptr [r15 + 8]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_226] # xmm0 = [50,0,0,0]
	vmovups	ymmword ptr [r12 + r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_257] # xmm0 = [17254,0,0,0]
	vmovdqu	ymmword ptr [rbx - 128], ymm0
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2814:                             # %OP9224.JUMPDEST
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdx + 312]
	shl	r9, 5
	mov	rsi, qword ptr [r11 + r9 - 32]
	mov	rcx, qword ptr [r11 + r9 - 24]
	mov	r13, qword ptr [r11 + r9 - 16]
	mov	rdi, qword ptr [r11 + r9 - 8]
	mov	qword ptr [r11 + r9 - 32], rax
	mov	qword ptr [r11 + r9 - 16], 0
	mov	qword ptr [r11 + r9 - 8], 0
	mov	qword ptr [r11 + r9 - 24], 0
	mov	qword ptr [r11 + r9 + 24], rdi
	mov	qword ptr [r11 + r9 + 16], r13
	mov	qword ptr [r11 + r9 + 8], rcx
	mov	qword ptr [r11 + r9], rsi
	mov	rdx, qword ptr [rdx + 312]
	jmp	.LBB5_32
.LBB5_2815:                             # %dynamic_jump_table
	xor	rsi, 16858
	or	rsi, r13
	or	rsi, rcx
	jne	.LBB5_3092
# %bb.2816:                             # %OP7746.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2817:                             # %OP7746.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	lea	r14, [r11 + rax]
	mov	edx, dword ptr [r11 + rax - 16]
	mov	rsi, qword ptr [r11 + rax - 32]
	mov	r15, qword ptr [r11 + rax - 24]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + rax - 32], ymm0
	lea	rcx, [r11 + rax - 32]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	vmovdqu	ymmword ptr [r11 + rax + 24], ymm0
	mov	qword ptr [r11 + rax + 8], r15
	mov	qword ptr [r11 + rax], rsi
	mov	qword ptr [r11 + rax + 16], rdx
	mov	qword ptr [r11 + rax + 56], 0
	mov	r13, r12
	mov	r12, qword ptr [r12 + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	rbx, qword ptr [r12 + 48]
	sub	rax, rbx
	cmp	rax, 31
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	jbe	.LBB5_3033
.LBB5_2818:                             # %OP7753.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + rbx + 24], rsi
	movbe	qword ptr [rax + rbx + 16], r15
	movbe	qword ptr [rax + rbx + 8], rdx
	mov	qword ptr [rax + rbx], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_83] # xmm0 = [9,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14 + 32], ymm0
	mov	rbx, qword ptr [r13 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx + 48]
	sub	rax, r15
	cmp	rax, 63
	mov	r12, r13
	jbe	.LBB5_3034
.LBB5_2819:                             # %OP7756.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_84] # ymm0 = [0,0,0,648518346341351424]
	vmovups	ymmword ptr [rax + r15 + 32], ymm0
	vmovdqa	xmm0, xmmword ptr [r14 - 32]
	vmovdqa	xmm1, xmmword ptr [r14 - 16]
	vmovaps	xmm2, xmmword ptr [rip + .LCPI5_0] # xmm2 = [64,0,0,0]
	vmovups	ymmword ptr [r14 - 32], ymm2
	vmovdqa	xmmword ptr [r14 + 16], xmm1
	vmovdqa	xmmword ptr [r14], xmm0
	mov	rdi, r12
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB5_3000
# %bb.2820:                             # %OP7759.SLOAD
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB5_3000
# %bb.2821:                             # %OP7760.PUSH32
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_142] # ymm0 = [18446744073709551615,18446744073709551615,18446744073709551615,9223372036854775807]
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	xmm0, xmmword ptr [r14 - 32]
	mov	rax, qword ptr [r14 - 16]
	mov	cl, 63
	bzhi	rsi, qword ptr [r14 - 8], rcx
	mov	rdi, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 64]
	mov	rcx, qword ptr [r14 - 56]
	mov	r13, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 48], rax
	vmovdqa	xmmword ptr [r14 - 64], xmm0
	mov	qword ptr [r14 - 40], rsi
	mov	qword ptr [r14 - 16], r13
	mov	qword ptr [r14 - 32], r8
	mov	qword ptr [r14 - 24], rcx
	mov	qword ptr [r14 - 8], rdi
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	dec	r10
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 312]
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	rsi, r8
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_32
.LBB5_2822:                             # %OP10210.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [r14 + 1]
	jmp	.LBB5_2829
.LBB5_1250:                             # %OP512.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_1251:                             # %OP512.JUMPDEST
	mov	r15, r14
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [r11 + r15 - 160]
	vmovaps	xmm1, xmmword ptr [r11 + r15 - 144]
	vmovaps	xmm2, xmmword ptr [r11 + r15 - 64]
	vmovaps	xmm3, xmmword ptr [r11 + r15 - 48]
	vmovaps	xmmword ptr [r11 + r15 - 144], xmm3
	vmovaps	xmmword ptr [r11 + r15 - 160], xmm2
	vmovaps	xmmword ptr [r11 + r15 - 48], xmm1
	vmovaps	xmmword ptr [r11 + r15 - 64], xmm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r11 + r15 - 128], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1254
# %bb.1252:                             # %OP519.MLOAD.contd
	lea	rax, [r15 + r13]
	lea	rsi, [r15 + r13]
	add	rsi, -160
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	r9, qword ptr [rax - 160]
	mov	r10, qword ptr [rax - 152]
	mov	r11, qword ptr [rax - 136]
	mov	rbx, qword ptr [rax - 144]
	mov	qword ptr [rax - 80], rbx
	mov	qword ptr [rax - 72], r11
	mov	qword ptr [rax - 96], r9
	mov	qword ptr [rax - 88], r10
	sub	r9, rdi
	sbb	r10, r8
	sbb	rbx, rdx
	sbb	r11, rcx
	mov	qword ptr [rax - 160], r9
	mov	qword ptr [rax - 152], r10
	mov	qword ptr [rax - 144], rbx
	mov	qword ptr [rax - 136], r11
	mov	qword ptr [rax - 112], rdx
	mov	qword ptr [rax - 104], rcx
	mov	qword ptr [rax - 128], rdi
	mov	qword ptr [rax - 120], r8
	mov	rdi, r12
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB5_1255
.LBB5_1253:                             # %select.end56241
	add	r14, -5
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_2823:                             # %OP10197.JUMPDEST.loopexit
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2824:                             # %OP10197.JUMPDEST
	mov	rbx, r14
	shl	rbx, 5
	mov	r15, qword ptr [r11 + rbx - 96]
	mov	rax, qword ptr [r11 + rbx - 88]
	mov	rcx, qword ptr [r11 + rbx - 80]
	mov	rdx, qword ptr [r11 + rbx - 72]
	mov	qword ptr [r11 + rbx + 24], rdx
	mov	qword ptr [r11 + rbx + 16], rcx
	mov	qword ptr [r11 + rbx + 8], rax
	mov	qword ptr [r11 + rbx], r15
	mov	r13, qword ptr [r12 + 40]
	mov	rdi, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rdi, r12
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rax
	mov	eax, 0
	sbb	rax, rcx
	sbb	r9, rdx
	cmovb	rsi, r8
	lea	rax, [r14 + 1]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	cmp	rsi, rdi
	ja	.LBB5_3058
.LBB5_2825:                             # %OP10199.MLOAD.contd
	add	rbx, r11
	add	r12, qword ptr [r13 + 8]
	mov	rax, qword ptr [r15 + r12]
	mov	rcx, qword ptr [r15 + r12 + 8]
	or	rcx, qword ptr [r15 + r12 + 24]
	or	rax, qword ptr [r15 + r12 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], 0
	je	.LBB5_2828
# %bb.2826:                             # %OP10203.DUP3
	mov	r14, qword ptr [rbx - 96]
	mov	rax, qword ptr [rbx - 88]
	mov	rdx, qword ptr [rbx - 80]
	mov	rcx, qword ptr [rbx - 72]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx], r14
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r12, qword ptr [rdi + 40]
	mov	r8, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r8, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	xor	r9d, r9d
	mov	r10, rax
	neg	r10
	mov	r10d, 0
	sbb	r10, rdx
	sbb	r9, rcx
	cmovb	rsi, r11
	mov	r13, r14
	cmp	rsi, r8
	ja	.LBB5_3067
.LBB5_2827:                             # %OP10204.MLOAD.contd
	add	r15, qword ptr [r12 + 8]
	mov	r8, qword ptr [r14 + r15 + 16]
	mov	r9, qword ptr [r14 + r15 + 24]
	mov	r10, qword ptr [r14 + r15]
	mov	r11, qword ptr [r14 + r15 + 8]
	movbe	qword ptr [rbx + 16], r11
	movbe	qword ptr [rbx], r9
	movbe	qword ptr [rbx + 24], r10
	movbe	qword ptr [rbx + 8], r8
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	shl	r14, 5
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	lea	rsi, [r15 + r14]
	movbe	qword ptr [r15 + r14 + 16], r11
	movbe	qword ptr [r15 + r14], r9
	movbe	qword ptr [r15 + r14 + 24], r10
	movbe	qword ptr [r15 + r14 + 8], r8
	mov	qword ptr [rbx + 112], 0
	mov	qword ptr [rbx + 120], 0
	mov	qword ptr [rbx + 96], 32
	mov	qword ptr [rbx + 104], 0
	add	r13, 32
	adc	rax, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 80], rdx
	mov	qword ptr [rbx + 88], rcx
	mov	qword ptr [rbx + 64], r13
	mov	qword ptr [rbx + 72], rax
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_456
.LBB5_751:                              # %select.end56244
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
.LBB5_2884:                             # %return
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rdx], rcx
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB5_2828:
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
.LBB5_2829:                             # %OP10210.JUMPDEST
	mov	r12, r14
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3035
# %bb.2830:                             # %OP10212.MLOAD.contd
	add	r12, r13
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rbx, r15
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + rbx + 24], rax
	mov	qword ptr [r13 + rbx + 16], 0
	mov	qword ptr [r13 + rbx], 0
	mov	qword ptr [r13 + rbx + 8], 0
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3035
# %bb.2831:                             # %OP10216.PUSH1
	add	rbx, r13
	mov	rax, r13
	lea	r13, [r14 + 3]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_4] # xmm1 = [4,0]
	vmovdqu	ymmword ptr [r12 + 64], ymm1
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [rax + r13 + 16], rdx
	mov	qword ptr [rax + r13], rdi
	mov	qword ptr [rax + r13 + 24], rcx
	mov	qword ptr [rax + r13 + 8], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	vmovdqu	ymmword ptr [rax + r13], ymm0
	lea	r15, [r14 + 4]
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [rax + r15 + 24], rcx
	mov	qword ptr [rax + r15 + 16], rdx
	mov	qword ptr [rax + r15 + 8], rsi
	mov	qword ptr [rax + r15], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2832:                             # %OP10223.DUP5
	add	r13, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rdi, qword ptr [r12 - 64]
	mov	rsi, qword ptr [r12 - 56]
	mov	rcx, qword ptr [r12 - 40]
	mov	rdx, qword ptr [r12 - 48]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.2833:                             # %OP10224.MLOAD.contd
	add	r15, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 36
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 176], rdx
	mov	qword ptr [r12 + 160], rdi
	mov	qword ptr [r12 + 184], rcx
	mov	qword ptr [r12 + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2834:                             # %OP10229.DUP5
	mov	rdi, qword ptr [r12 - 64]
	mov	rsi, qword ptr [r12 - 56]
	mov	rcx, qword ptr [r12 - 40]
	mov	rdx, qword ptr [r12 - 48]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.2835:                             # %OP10230.MLOAD.contd
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 128], rax      # 8-byte Spill
	mov	r8, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	qword ptr [rbp - 112], rdx      # 8-byte Spill
	mov	rcx, qword ptr [rbx + 16]
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	r10, qword ptr [r12 - 64]
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	mov	rdx, qword ptr [r12 - 48]
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	rdi, qword ptr [r12 - 56]
	mov	qword ptr [rbp - 136], rdi      # 8-byte Spill
	mov	rsi, qword ptr [r12 - 40]
	mov	qword ptr [rbp - 160], rsi      # 8-byte Spill
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], r10
	mov	rax, qword ptr [r12 + 16]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	r9, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rdi
	mov	rbx, qword ptr [r12]
	mov	qword ptr [r12], r10
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 16], rax
	mov	rdx, r9
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], rbx
	mov	r9, qword ptr [r12 + 88]
	mov	qword ptr [r12 + 88], rcx
	mov	r11, qword ptr [r12 + 80]
	mov	qword ptr [r12 + 80], rax
	mov	r10, qword ptr [r12 + 72]
	mov	qword ptr [r12 + 72], rdx
	mov	rdi, qword ptr [r12 + 64]
	mov	qword ptr [r12 + 64], rbx
	mov	qword ptr [r15 + 24], r9
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15], rdi
	mov	rsi, qword ptr [r12 + 56]
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	qword ptr [r12 + 56], r9
	mov	rcx, qword ptr [r12 + 48]
	mov	qword ptr [rbp - 144], rcx      # 8-byte Spill
	mov	qword ptr [r12 + 48], r11
	mov	rax, qword ptr [r12 + 40]
	mov	qword ptr [rbp - 168], rax      # 8-byte Spill
	mov	qword ptr [r12 + 40], r10
	mov	rdx, qword ptr [r12 + 32]
	mov	qword ptr [r12 + 32], rdi
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rax
	mov	qword ptr [r15], rdx
	mov	qword ptr [r12 + 88], r9
	mov	qword ptr [r12 + 80], r11
	mov	qword ptr [r12 + 72], r10
	mov	r10, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [r12 + 64], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_36] # xmm0 = [68,0]
	vmovdqu	ymmword ptr [r12 + 192], ymm0
	add	rbx, 68
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	adc	rax, 0
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r9, qword ptr [rbp - 104]       # 8-byte Reload
	adc	r9, 0
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	adc	r11, 0
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	qword ptr [r12 + 184], r11
	mov	qword ptr [r12 + 176], r9
	mov	qword ptr [r12 + 168], rax
	mov	qword ptr [r12 + 160], rbx
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [r13 + 16], r9
	mov	qword ptr [r13 + 8], rax
	mov	qword ptr [r13], rbx
	mov	r9, qword ptr [rbp - 128]       # 8-byte Reload
	mov	qword ptr [r12 + 184], r9
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12 + 176], r11
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r12 + 168], rcx
	mov	qword ptr [r12 + 160], r8
	mov	qword ptr [r15 + 24], r9
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15], r8
	mov	rdi, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [r12 + 192], rdi
	add	rdi, rdx
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [r12 + 200], rsi
	adc	rsi, qword ptr [rbp - 168]      # 8-byte Folded Reload
	mov	r13, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r12 + 208], r13
	adc	r13, qword ptr [rbp - 144]      # 8-byte Folded Reload
	mov	qword ptr [r12 + 216], r10
	adc	r10, qword ptr [rbp - 120]      # 8-byte Folded Reload
	mov	qword ptr [r12 + 184], r10
	mov	qword ptr [r12 + 176], r13
	mov	qword ptr [r12 + 168], rsi
	mov	qword ptr [r12 + 160], rdi
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rdi
	mov	qword ptr [r12 + 184], r9
	mov	qword ptr [r12 + 176], r11
	mov	qword ptr [r12 + 168], rcx
	mov	qword ptr [r12 + 160], r8
	mov	qword ptr [r12 + 200], rcx
	mov	qword ptr [r12 + 192], r8
	lea	r15, [r14 + 10]
	mov	qword ptr [rbp - 96], r15       # 8-byte Spill
	shl	r15, 5
	or	rcx, r9
	or	r8, r11
	xor	eax, eax
	or	r8, rcx
	mov	qword ptr [r12 + 216], r9
	mov	qword ptr [r12 + 208], r11
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	mov	qword ptr [r12 + 248], r8
	mov	r8, qword ptr [rbp - 104]       # 8-byte Reload
	mov	qword ptr [r12 + 240], r8
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	mov	qword ptr [r12 + 232], r8
	mov	qword ptr [r12 + 224], rbx
	mov	qword ptr [r12 + 280], r10
	mov	qword ptr [r12 + 272], r13
	mov	qword ptr [r12 + 264], rsi
	mov	qword ptr [r12 + 256], rdi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12 + 288], ymm0
	sete	al
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + r15], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 + 8], xmm0
	mov	qword ptr [r11 + r15 + 24], 0
	je	.LBB5_2849
# %bb.2836:                             # %OP10252.DUP2
	mov	rdx, r13
	add	r15, r11
	add	r14, 11
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], r13
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], r10
	mov	r13, r14
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], 0
	mov	qword ptr [r11 + r13], 0
	mov	qword ptr [r11 + r13 + 24], 0
	mov	qword ptr [r11 + r13 + 8], 0
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	rcx, r10
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2978
# %bb.2837:                             # %OP10255.MLOAD.contd
	add	r13, qword ptr [rbp - 56]       # 8-byte Folded Reload
	mov	rax, qword ptr [rbx + 24]
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], r9
	mov	r11, qword ptr [r12 + 224]
	mov	rbx, qword ptr [r12 + 240]
	mov	r14, qword ptr [r12 + 232]
	mov	rax, qword ptr [r12 + 248]
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r14
	mov	qword ptr [r13 + 16], rbx
	mov	qword ptr [r13], r11
	mov	rsi, qword ptr [r12 + 296]
	mov	rcx, qword ptr [r12 + 312]
	mov	rdi, qword ptr [r12 + 288]
	mov	rdx, qword ptr [r12 + 304]
	mov	qword ptr [r12 + 384], rdi
	add	rdi, r11
	mov	qword ptr [r12 + 392], rsi
	adc	rsi, r14
	mov	qword ptr [r12 + 400], rdx
	adc	rdx, rbx
	mov	qword ptr [r12 + 408], rcx
	adc	rcx, rax
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 24], rcx
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	qword ptr [rbp - 48]            # 8-byte Folded Reload
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1087
# %bb.2838:                             # %OP10260.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	add	qword ptr [r12 + 288], 32
	adc	qword ptr [r12 + 296], 0
	adc	qword ptr [r12 + 304], 0
	adc	qword ptr [r12 + 312], 0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
.LBB5_2839:                             # %OP9734.JUMPDEST.preheader
	lea	rdi, [r10 + 1]
	mov	r14, r10
	shl	r14, 5
	mov	r13, rdi
	shl	r13, 5
	mov	rax, qword ptr [r11 + r14 - 8]
	mov	rcx, qword ptr [r11 + r14 - 16]
	mov	r12, qword ptr [r11 + r14 - 32]
	cmp	r12, qword ptr [r11 + r14 - 128]
	mov	rdx, qword ptr [r11 + r14 - 24]
	mov	rsi, rdx
	sbb	rsi, qword ptr [r11 + r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [r11 + r14 - 112]
	mov	qword ptr [r11 + r13 + 16], rcx
	mov	qword ptr [r11 + r13], r12
	mov	rsi, rax
	sbb	rsi, qword ptr [r11 + r14 - 104]
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 8], rdx
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r14 + 8], xmm0
	mov	qword ptr [r11 + r14], rsi
	mov	qword ptr [r11 + r14 + 24], 0
	jb	.LBB5_2841
# %bb.2840:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_2850
.LBB5_2841:                             # %OP9741.DUP2.lr.ph
	mov	qword ptr [rbp - 128], rdi      # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	add	r14, r11
	add	r13, r11
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	.p2align	4, 0x90
.LBB5_2842:                             # %OP9741.DUP2
                                        # =>This Inner Loop Header: Depth=1
	mov	rbx, qword ptr [r14 - 64]
	add	rbx, r12
	mov	rdi, qword ptr [r14 - 56]
	adc	rdi, rdx
	mov	r8, qword ptr [r14 - 48]
	adc	r8, rcx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], r12
	mov	r9, qword ptr [r14 - 40]
	adc	r9, rax
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14], rbx
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], rdi
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rsi + 40]
	mov	r10, qword ptr [r11 + 16]
	mov	r13, qword ptr [r11 + 48]
	sub	r10, r13
	mov	rsi, rbx
	add	rsi, 32
	mov	r15, -1
	cmovb	rsi, r15
	neg	rdi
	mov	edi, 0
	sbb	rdi, r8
	mov	r8, -1
	mov	edi, 0
	sbb	rdi, r9
	cmovb	rsi, r8
	mov	r9, r11
	cmp	rsi, r10
	ja	.LBB5_2846
.LBB5_2843:                             # %OP9744.MLOAD.contd
                                        #   in Loop: Header=BB5_2842 Depth=1
	add	r13, qword ptr [r11 + 8]
	mov	rsi, qword ptr [rbx + r13 + 16]
	mov	rdi, qword ptr [rbx + r13 + 24]
	mov	r10, qword ptr [rbx + r13]
	mov	rbx, qword ptr [rbx + r13 + 8]
	movbe	qword ptr [r14 + 16], rbx
	mov	qword ptr [rbp - 104], rdi      # 8-byte Spill
	movbe	qword ptr [r14], rdi
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	movbe	qword ptr [r14 + 24], r10
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	movbe	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 80], rcx
	mov	qword ptr [r14 + 64], r12
	mov	qword ptr [r14 + 72], rdx
	mov	qword ptr [r14 + 88], rax
	add	r12, qword ptr [r14 - 96]
	adc	rdx, qword ptr [r14 - 88]
	adc	rcx, qword ptr [r14 - 80]
	adc	rax, qword ptr [r14 - 72]
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r12
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 8], rdx
	mov	rdi, qword ptr [r9 + 16]
	mov	r15, qword ptr [r9 + 48]
	sub	rdi, r15
	mov	rsi, r12
	add	rsi, 32
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r13, r10
	ja	.LBB5_2848
.LBB5_2844:                             # %OP9749.PUSH1
                                        #   in Loop: Header=BB5_2842 Depth=1
	add	r15, qword ptr [r9 + 8]
	mov	qword ptr [r12 + r15 + 8], rbx
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + r15], rax
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [r12 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r12 + r15 + 24], rax
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r12, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	add	r12, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 - 24], rdx
	mov	qword ptr [r14 - 8], rax
	mov	qword ptr [r14 - 32], r12
	mov	qword ptr [r14 - 16], rcx
	cmp	r12, qword ptr [r14 - 128]
	mov	rsi, rdx
	sbb	rsi, qword ptr [r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [r14 - 112]
	mov	rsi, rax
	sbb	rsi, qword ptr [r14 - 104]
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], r12
	setae	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], 0
	jb	.LBB5_2842
	jmp	.LBB5_2845
.LBB5_2846:                             # %resize.i51906
                                        #   in Loop: Header=BB5_2842 Depth=1
	mov	r15, r11
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3098
# %bb.2847:                             # %resize.i51906.OP9744.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_2842 Depth=1
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r12, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rsi + 40]
	vpxor	xmm0, xmm0, xmm0
	mov	r8, -1
	mov	r11, r15
	jmp	.LBB5_2843
.LBB5_2848:                             # %resize.i51921
                                        #   in Loop: Header=BB5_2842 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	test	al, al
	je	.LBB5_2844
	jmp	.LBB5_2795
.LBB5_2845:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_2850
.LBB5_2849:
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
.LBB5_2850:                             # %OP9753.JUMPDEST
	mov	r15, r10
	shl	r15, 5
	mov	rax, qword ptr [r11 + r15 - 160]
	lea	r8, [r10 - 5]
	mov	rcx, qword ptr [r11 + r15 - 200]
	mov	rsi, qword ptr [r11 + r15 - 216]
	mov	rdx, qword ptr [r11 + r15 - 208]
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	shl	r8, 5
	mov	rdi, qword ptr [r11 + r15 - 224]
	add	rdi, rax
	adc	rsi, qword ptr [r11 + r15 - 152]
	adc	rdx, qword ptr [r11 + r15 - 144]
	adc	rcx, qword ptr [r11 + r15 - 136]
	mov	qword ptr [r11 + r15 - 224], rdi
	mov	qword ptr [r11 + r15 - 208], rdx
	mov	qword ptr [r11 + r15 - 216], rsi
	mov	qword ptr [r11 + r15 - 200], rcx
	xor	r9d, r9d
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 - 184], xmm0
	and	rax, 31
	mov	qword ptr [r11 + r15 - 192], rax
	mov	qword ptr [r11 + r15 - 168], 0
	sete	r9b
	mov	qword ptr [r11 + r8], r9
	vmovdqu	xmmword ptr [r11 + r8 + 8], xmm0
	mov	qword ptr [r11 + r8 + 24], 0
	je	.LBB5_2855
# %bb.2851:                             # %OP9770.DUP1
	mov	r9, r12
	lea	r12, [r10 - 3]
	add	r15, r11
	sub	rdi, rax
	sbb	rsi, 0
	sbb	rdx, 0
	sbb	rcx, 0
	mov	qword ptr [r15 - 160], rdi
	mov	qword ptr [r15 - 152], rsi
	mov	qword ptr [r15 - 144], rdx
	mov	qword ptr [r15 - 136], rcx
	mov	qword ptr [r15 - 128], rdi
	mov	qword ptr [r15 - 120], rsi
	mov	qword ptr [r15 - 112], rdx
	mov	qword ptr [r15 - 104], rcx
	mov	r13, r10
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3097
# %bb.2852:                             # %OP9774.MLOAD.contd
	lea	rdi, [r13 - 1]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	rbx, rdi
	mov	qword ptr [r15 - 112], rsi
	mov	qword ptr [r15 - 128], rcx
	mov	qword ptr [r15 - 104], rax
	mov	qword ptr [r15 - 120], rdx
	shl	r12, 5
	mov	qword ptr [r14 + r12 + 16], 0
	mov	qword ptr [r14 + r12], 1
	mov	qword ptr [r14 + r12 + 24], 0
	mov	qword ptr [r14 + r12 + 8], 0
	lea	rsi, [r15 - 64]
	mov	rax, rdi
	shl	rax, 5
	xor	ecx, ecx
	mov	edx, 32
	sub	rdx, qword ptr [r15 - 192]
	mov	edi, 0
	sbb	rdi, qword ptr [r15 - 184]
	mov	r8d, 0
	sbb	r8, qword ptr [r15 - 176]
	sbb	rcx, qword ptr [r15 - 168]
	mov	qword ptr [r15 - 64], rdx
	mov	qword ptr [r15 - 56], rdi
	mov	qword ptr [r15 - 48], r8
	mov	qword ptr [r15 - 40], rcx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r14 + rax], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB5_3086
# %bb.2853:                             # %OP9781.SUB
	add	r12, r14
	mov	r8, qword ptr [r15 - 64]
	mov	r9, qword ptr [r15 - 56]
	mov	rax, qword ptr [r15 - 48]
	mov	r10, qword ptr [r15 - 40]
	not	r10
	not	rax
	not	r9
	not	r8
	add	r8, qword ptr [r15 - 96]
	adc	r9, qword ptr [r15 - 88]
	adc	rax, qword ptr [r15 - 80]
	adc	r10, qword ptr [r15 - 72]
	add	r13, -4
	mov	rbx, r13
	shl	rbx, 5
	and	rax, qword ptr [r14 + rbx + 16]
	and	r8, qword ptr [r14 + rbx]
	and	r10, qword ptr [r14 + rbx + 24]
	and	r9, qword ptr [r14 + rbx + 8]
	mov	qword ptr [r14 + rbx + 8], r9
	mov	qword ptr [r14 + rbx + 24], r10
	mov	qword ptr [r14 + rbx], r8
	mov	qword ptr [r14 + rbx + 16], rax
	mov	rsi, qword ptr [r15 - 152]
	mov	rcx, qword ptr [r15 - 136]
	mov	rdi, qword ptr [r15 - 160]
	mov	rdx, qword ptr [r15 - 144]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1151
# %bb.2854:                             # %OP9786.PUSH1
	add	rbx, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 - 136]
	mov	rcx, qword ptr [r15 - 144]
	mov	rdx, qword ptr [r15 - 152]
	mov	rsi, qword ptr [r15 - 160]
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm0, xmmword ptr [r15 - 224]
	vmovdqa	xmm1, xmmword ptr [r15 - 208]
	mov	qword ptr [r15 - 224], rsi
	mov	qword ptr [r15 - 216], rdx
	mov	qword ptr [r15 - 208], rcx
	mov	qword ptr [r15 - 200], rax
	vmovdqa	xmmword ptr [r15 - 144], xmm1
	vmovdqa	xmmword ptr [r15 - 160], xmm0
	mov	r11, r14
.LBB5_2855:                             # %OP9790.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rbx, 5
	mov	rcx, qword ptr [r11 + rbx - 56]
	mov	rdi, qword ptr [r11 + rbx - 64]
	mov	rax, qword ptr [r11 + rbx - 40]
	mov	rdx, qword ptr [r11 + rbx - 48]
	vmovaps	xmm0, xmmword ptr [r11 + rbx - 160]
	vmovdqa	xmm1, xmmword ptr [r11 + rbx - 144]
	mov	qword ptr [r11 + rbx - 144], rdx
	mov	qword ptr [r11 + rbx - 136], rax
	mov	qword ptr [r11 + rbx - 160], rdi
	mov	qword ptr [r11 + rbx - 152], rcx
	vmovdqa	xmmword ptr [r11 + rbx - 48], xmm1
	vmovaps	xmmword ptr [r11 + rbx - 64], xmm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx - 128], ymm0
	lea	rsi, [r11 + rbx - 160]
	mov	r12, qword ptr [r12 + 40]
	mov	r8, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r8, r15
	cmp	r8, 95
	jbe	.LBB5_3064
.LBB5_2856:                             # %OP9797.MLOAD.contd
	add	r11, rbx
	mov	r10, qword ptr [r12 + 8]
	mov	r8, qword ptr [r10 + r15 + 88]
	mov	r9, qword ptr [r10 + r15 + 80]
	mov	r14, qword ptr [r10 + r15 + 64]
	mov	r10, qword ptr [r10 + r15 + 72]
	mov	rbx, r14
	bswap	rbx
	mov	r15, r10
	bswap	r15
	mov	r12, r9
	bswap	r12
	mov	r13, r8
	bswap	r13
	mov	qword ptr [r11 - 80], rdx
	mov	qword ptr [r11 - 96], rdi
	mov	qword ptr [r11 - 88], rcx
	mov	qword ptr [r11 - 72], rax
	sub	rdi, r13
	sbb	rcx, r12
	sbb	rdx, r15
	sbb	rax, rbx
	mov	qword ptr [r11 - 160], rdi
	mov	qword ptr [r11 - 152], rcx
	mov	qword ptr [r11 - 144], rdx
	mov	qword ptr [r11 - 136], rax
	movbe	qword ptr [r11 - 112], r10
	movbe	qword ptr [r11 - 104], r14
	movbe	qword ptr [r11 - 128], r8
	movbe	qword ptr [r11 - 120], r9
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_3066
.LBB5_2857:                             # %select.end57581
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	add	r10, -5
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_2858:                             # %OP10050.JUMPDEST.preheader.loopexit
	mov	r14, rdx
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_2859:                             # %OP10050.JUMPDEST.preheader
	lea	r8, [r14 + 1]
	mov	r15, r14
	shl	r15, 5
	mov	r13, r8
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	rdx, qword ptr [r11 + r15 - 96]
	mov	rdi, qword ptr [r11 + r15 - 88]
	mov	rcx, qword ptr [r11 + r15 - 80]
	mov	rax, qword ptr [r11 + r15 - 72]
	mov	qword ptr [r11 + r13 + 24], rax
	mov	qword ptr [r11 + r13 + 16], rcx
	mov	qword ptr [r11 + r13 + 8], rdi
	mov	qword ptr [r11 + r13], rdx
	cmp	rdx, 32
	mov	rsi, rdi
	sbb	rsi, 0
	mov	rsi, rcx
	sbb	rsi, 0
	mov	rsi, rax
	sbb	rsi, 0
	setb	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 + 8], xmm0
	mov	qword ptr [r11 + r15], rsi
	mov	qword ptr [r11 + r15 + 24], 0
	jb	.LBB5_2244
# %bb.2860:                             # %OP10056.DUP1.lr.ph
	mov	qword ptr [rbp - 80], r8        # 8-byte Spill
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	add	r15, r11
	add	r13, r11
	mov	r8, qword ptr [r15 - 8]
	mov	r9, qword ptr [r15 - 16]
	mov	rbx, qword ptr [r15 - 32]
	mov	r10, qword ptr [r15 - 24]
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
.LBB5_2861:                             # %OP10056.DUP1
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [r15], rbx
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15 + 16], r9
	mov	qword ptr [r15 + 24], r8
	mov	r13, qword ptr [r12 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	mov	rsi, rbx
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	neg	r10
	mov	ecx, 0
	sbb	rcx, r9
	mov	ecx, 0
	sbb	rcx, r8
	cmovb	rsi, r11
	mov	r14, r13
	cmp	rsi, rax
	ja	.LBB5_2865
.LBB5_2862:                             # %OP10057.MLOAD.contd
                                        #   in Loop: Header=BB5_2861 Depth=1
	add	r12, qword ptr [r13 + 8]
	mov	r8, qword ptr [rbx + r12 + 24]
	mov	r9, qword ptr [rbx + r12 + 16]
	mov	r10, qword ptr [rbx + r12]
	mov	rbx, qword ptr [rbx + r12 + 8]
	movbe	qword ptr [r15 + 24], r10
	movbe	qword ptr [r15 + 8], r9
	movbe	qword ptr [r15], r8
	movbe	qword ptr [r15 + 16], rbx
	mov	rax, qword ptr [r15 - 48]
	mov	r12, qword ptr [r15 - 64]
	mov	rcx, qword ptr [r15 - 56]
	mov	rdx, qword ptr [r15 - 40]
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rsi + 24], rdx
	mov	qword ptr [rsi + 8], rcx
	mov	qword ptr [rsi + 16], rax
	mov	qword ptr [rsi], r12
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	rsi, r12
	add	rsi, 32
	cmovb	rsi, r11
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	mov	eax, 0
	sbb	rax, rdx
	cmovb	rsi, r11
	cmp	rsi, rdi
	ja	.LBB5_2867
.LBB5_2863:                             # %OP10060.PUSH32
                                        #   in Loop: Header=BB5_2861 Depth=1
	add	r13, qword ptr [r14 + 8]
	mov	qword ptr [r12 + r13 + 8], rbx
	mov	qword ptr [r12 + r13], r10
	mov	qword ptr [r12 + r13 + 16], r9
	mov	qword ptr [r12 + r13 + 24], r8
	mov	r8, qword ptr [r15 - 8]
	mov	r9, qword ptr [r15 - 16]
	mov	r10, qword ptr [r15 - 24]
	mov	rbx, qword ptr [r15 - 32]
	mov	rax, qword ptr [r15 - 72]
	mov	rcx, qword ptr [r15 - 80]
	mov	rdx, qword ptr [r15 - 96]
	mov	rdi, qword ptr [r15 - 88]
	add	rdx, -32
	adc	rdi, -1
	adc	rcx, -1
	adc	rax, -1
	mov	qword ptr [r15 - 96], rdx
	mov	qword ptr [r15 - 88], rdi
	mov	qword ptr [r15 - 80], rcx
	mov	qword ptr [r15 - 72], rax
	mov	rsi, qword ptr [r15 - 56]
	mov	r11, qword ptr [r15 - 64]
	mov	r14, qword ptr [r15 - 40]
	mov	r12, qword ptr [r15 - 48]
	vmovdqu	ymmword ptr [r15 - 64], ymm1
	mov	qword ptr [r15 + 16], r12
	mov	qword ptr [r15 + 24], r14
	mov	qword ptr [r15], r11
	mov	qword ptr [r15 + 8], rsi
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	vmovdqu	ymmword ptr [r13], ymm1
	add	r11, 32
	adc	rsi, 0
	adc	r12, 0
	mov	qword ptr [r15 - 48], r12
	mov	qword ptr [r15 - 64], r11
	adc	r14, 0
	mov	qword ptr [r15 - 40], r14
	mov	qword ptr [r15 - 56], rsi
	vmovdqu	ymmword ptr [r15], ymm1
	add	rbx, 32
	adc	r10, 0
	adc	r9, 0
	adc	r8, 0
	mov	qword ptr [r15 - 16], r9
	mov	qword ptr [r15 - 32], rbx
	mov	qword ptr [r15 - 8], r8
	mov	qword ptr [r15 - 24], r10
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	cmp	rdx, 32
	mov	rsi, rdi
	sbb	rsi, 0
	mov	rsi, rcx
	sbb	rsi, 0
	mov	rsi, rax
	sbb	rsi, 0
	setb	sil
	movzx	esi, sil
	mov	qword ptr [r15], rsi
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15 + 24], 0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jae	.LBB5_2861
	jmp	.LBB5_2864
.LBB5_2865:                             # %resize.i52073
                                        #   in Loop: Header=BB5_2861 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.2866:                             # %resize.i52073.OP10057.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_2861 Depth=1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r14, qword ptr [rax + 40]
	vpxor	xmm0, xmm0, xmm0
	mov	r11, -1
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	jmp	.LBB5_2862
.LBB5_2867:                             # %resize.i52088
                                        #   in Loop: Header=BB5_2861 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 128]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	vmovdqa	xmm1, xmmword ptr [rip + .LCPI5_32] # xmm1 = [32,0]
	vpxor	xmm0, xmm0, xmm0
	test	al, al
	je	.LBB5_2863
	jmp	.LBB5_2380
.LBB5_2864:
	mov	r14, qword ptr [rbp - 104]      # 8-byte Reload
.LBB5_2244:                             # %OP10073.JUMPDEST
	mov	r15, r14
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_29] # xmm0 = [1,0]
	vmovups	ymmword ptr [r11 + r15], ymm0
	lea	rbx, [r14 + 2]
	lea	rsi, [r11 + r15]
	add	rsi, 32
	mov	qword ptr [r11 + r15 + 32], rdx
	mov	qword ptr [r11 + r15 + 48], rcx
	mov	qword ptr [r11 + r15 + 40], rdi
	mov	qword ptr [r11 + r15 + 56], rax
	mov	r13, rbx
	shl	r13, 5
	mov	qword ptr [r11 + r13 + 16], 0
	mov	qword ptr [r11 + r13], 32
	mov	qword ptr [r11 + r13 + 24], 0
	mov	qword ptr [r11 + r13 + 8], 0
	xor	r8d, r8d
	mov	r9d, 32
	sub	r9, rdx
	mov	edx, 0
	sbb	rdx, rdi
	mov	edi, 0
	sbb	rdi, rcx
	sbb	r8, rax
	mov	qword ptr [r11 + r15 + 48], rdi
	mov	qword ptr [r11 + r15 + 32], r9
	mov	qword ptr [r11 + r15 + 56], r8
	mov	qword ptr [r11 + r15 + 40], rdx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB5_3037
# %bb.2245:                             # %OP10080.SUB
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, rax
	lea	rcx, [r14 + 3]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	add	r13, rax
	mov	rax, qword ptr [r15 + 56]
	mov	rcx, qword ptr [r15 + 48]
	mov	rdx, qword ptr [r15 + 40]
	mov	rsi, qword ptr [r15 + 32]
	sub	rsi, qword ptr [r15]
	sbb	rdx, qword ptr [r15 + 8]
	sbb	rcx, qword ptr [r15 + 16]
	sbb	rax, qword ptr [r15 + 24]
	mov	qword ptr [r15], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 24], rax
	not	rax
	not	rdx
	not	rcx
	not	rsi
	mov	qword ptr [r15 + 32], rsi
	mov	qword ptr [r15 + 48], rcx
	mov	qword ptr [r15 + 40], rdx
	mov	qword ptr [r15 + 56], rax
	mov	rcx, qword ptr [r15 - 8]
	mov	rdi, qword ptr [r15 - 32]
	mov	rsi, qword ptr [r15 - 24]
	mov	rdx, qword ptr [r15 - 16]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, r12
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.2246:                             # %OP10084.MLOAD.contd
	mov	r9, r12
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], rcx
	and	qword ptr [r15 + 56], rsi
	and	qword ptr [r15 + 40], rdx
	and	qword ptr [r15 + 48], rax
	and	qword ptr [r15 + 32], rcx
	vmovdqu	ymm0, ymmword ptr [r15]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	lea	r12, [r14 + 4]
	mov	rdi, qword ptr [r15 - 64]
	mov	rsi, qword ptr [r15 - 56]
	mov	rcx, qword ptr [r15 - 40]
	mov	rdx, qword ptr [r15 - 48]
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	shl	r14, 5
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rax + r14 + 16], rdx
	mov	qword ptr [rax + r14 + 24], rcx
	mov	qword ptr [rax + r14], rdi
	mov	qword ptr [rax + r14 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3074
# %bb.2247:                             # %OP10088.MLOAD.contd
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r14, r11
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	and	r9, qword ptr [r13 + 8]
	and	r10, qword ptr [r13 + 24]
	and	r8, qword ptr [r13]
	and	rax, qword ptr [r13 + 16]
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 8], r9
	mov	rcx, qword ptr [r15 + 32]
	mov	rdx, qword ptr [r15 + 48]
	mov	rsi, qword ptr [r15 + 40]
	mov	rdi, qword ptr [r15 + 56]
	shl	r12, 5
	mov	qword ptr [r11 + r12 + 8], rsi
	mov	qword ptr [r11 + r12 + 24], rdi
	mov	qword ptr [r11 + r12 + 16], rdx
	mov	qword ptr [r11 + r12], rcx
	or	r8, rcx
	or	r9, rsi
	or	rax, rdx
	or	r10, rdi
	mov	qword ptr [r14 + 24], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14], r8
	mov	rdi, qword ptr [r15 - 64]
	mov	rsi, qword ptr [r15 - 56]
	mov	rdx, qword ptr [r15 - 48]
	mov	rcx, qword ptr [r15 - 40]
	mov	qword ptr [r11 + r12 + 24], rcx
	mov	qword ptr [r11 + r12 + 16], rdx
	mov	qword ptr [r11 + r12 + 8], rsi
	mov	qword ptr [r11 + r12], rdi
	sub	rsp, 8
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	push	r12
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2248:                             # %OP10095.POP
	mov	rax, qword ptr [r15 - 120]
	mov	rcx, qword ptr [r15 - 128]
	mov	rdx, qword ptr [r15 - 104]
	mov	rsi, qword ptr [r15 - 112]
	vmovaps	xmm0, xmmword ptr [r15 - 160]
	vmovdqa	xmm1, xmmword ptr [r15 - 144]
	mov	qword ptr [r15 - 144], rsi
	mov	qword ptr [r15 - 136], rdx
	mov	qword ptr [r15 - 160], rcx
	mov	qword ptr [r15 - 152], rax
	vmovdqa	xmmword ptr [r15 - 112], xmm1
	vmovaps	xmmword ptr [r15 - 128], xmm0
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	lea	r14, [r13 - 5]
	add	rcx, qword ptr [r15 - 192]
	adc	rax, qword ptr [r15 - 184]
	adc	rsi, qword ptr [r15 - 176]
	adc	rdx, qword ptr [r15 - 168]
	mov	qword ptr [r15 - 256], rcx
	mov	qword ptr [r15 - 248], rax
	mov	qword ptr [r15 - 240], rsi
	mov	qword ptr [r15 - 232], rdx
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r15 - 224], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15 - 192], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2978
# %bb.2249:                             # %OP10109.MLOAD.contd
	lea	rsi, [r15 - 224]
	shl	r14, 5
	mov	rax, qword ptr [rbx + 16]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r15 - 168], rdi
	mov	qword ptr [r15 - 184], rdx
	mov	qword ptr [r15 - 176], rax
	mov	qword ptr [r15 - 192], rcx
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r14 + 24], rdi
	mov	qword ptr [r8 + r14 + 8], rdx
	mov	qword ptr [r8 + r14 + 16], rax
	mov	qword ptr [r8 + r14], rcx
	mov	r8, qword ptr [r15 - 232]
	mov	r9, qword ptr [r15 - 240]
	mov	r10, qword ptr [r15 - 248]
	mov	r11, qword ptr [r15 - 256]
	sub	r11, rcx
	sbb	r10, rdx
	sbb	r9, rax
	sbb	r8, rdi
	mov	qword ptr [r15 - 160], r11
	mov	qword ptr [r15 - 152], r10
	mov	qword ptr [r15 - 144], r9
	mov	qword ptr [r15 - 136], r8
	mov	qword ptr [r15 - 104], rdi
	mov	qword ptr [r15 - 120], rdx
	mov	qword ptr [r15 - 112], rax
	mov	qword ptr [r15 - 128], rcx
	mov	rax, qword ptr [r15 - 288]
	mov	rcx, qword ptr [r15 - 272]
	mov	rdx, qword ptr [r15 - 280]
	mov	rdi, qword ptr [r15 - 264]
	mov	qword ptr [r15 - 72], rdi
	mov	qword ptr [r15 - 88], rdx
	mov	qword ptr [r15 - 80], rcx
	mov	qword ptr [r15 - 96], rax
	mov	rax, qword ptr [r15 - 320]
	mov	rcx, qword ptr [r15 - 304]
	mov	rdx, qword ptr [r15 - 312]
	mov	rdi, qword ptr [r15 - 296]
	mov	qword ptr [r15 - 40], rdi
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 48], rcx
	mov	qword ptr [r15 - 64], rax
	mov	rax, qword ptr [rbp - 216]      # 8-byte Reload
	mov	rax, qword ptr [rax + 8]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 - 24], xmm0
	mov	qword ptr [r15 - 32], rax
	mov	qword ptr [r15 - 8], 0
	add	r13, -7
	mov	rdi, r12
	mov	edx, 17
	xor	ecx, ecx
	call	__revmc_builtin_call@PLT
	test	al, al
	mov	rbx, r13
	jne	.LBB5_3037
# %bb.2250:
	lea	rax, [rip + .Ltmp18]
	jmp	.LBB5_2883
.LBB5_1299:                             # %OP1674.JUMPDEST.loopexit
	mov	r13, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_648
.LBB5_1233:                             # %OP463.DUP2.lr.ph
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	add	r14, r11
	add	r13, r11
	mov	qword ptr [rbp - 96], r13       # 8-byte Spill
.LBB5_1234:                             # %OP463.DUP2
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	mov	rax, qword ptr [r14 - 64]
	add	rax, r12
	mov	rdi, qword ptr [r14 - 56]
	adc	rdi, rdx
	mov	r8, qword ptr [r14 - 48]
	adc	r8, rcx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], r12
	mov	r9, qword ptr [r14 - 40]
	adc	r9, r10
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14], rax
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], rdi
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rbx, qword ptr [rsi + 40]
	mov	r10, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r10, r13
	mov	rsi, rax
	add	rsi, 32
	mov	r15, -1
	cmovb	rsi, r15
	neg	rdi
	mov	edi, 0
	sbb	rdi, r8
	mov	r8, -1
	mov	edi, 0
	sbb	rdi, r9
	mov	rdi, rbx
	cmovb	rsi, r8
	mov	r9, rbx
	cmp	rsi, r10
	ja	.LBB5_1245
.LBB5_1235:                             # %OP466.MLOAD.contd
                                        #   in Loop: Header=BB5_1234 Depth=1
	add	r13, qword ptr [rdi + 8]
	mov	rsi, qword ptr [rax + r13 + 16]
	mov	rdi, qword ptr [rax + r13 + 24]
	mov	r10, qword ptr [rax + r13]
	mov	rbx, qword ptr [rax + r13 + 8]
	movbe	qword ptr [r14 + 16], rbx
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	movbe	qword ptr [r14], rdi
	mov	qword ptr [rbp - 128], r10      # 8-byte Spill
	movbe	qword ptr [r14 + 24], r10
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	movbe	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 80], rcx
	mov	qword ptr [r14 + 64], r12
	mov	qword ptr [r14 + 72], rdx
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r14 + 88], rax
	add	r12, qword ptr [r14 - 96]
	adc	rdx, qword ptr [r14 - 88]
	adc	rcx, qword ptr [r14 - 80]
	adc	rax, qword ptr [r14 - 72]
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r12
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 8], rdx
	mov	rdi, qword ptr [r9 + 16]
	mov	r15, qword ptr [r9 + 48]
	sub	rdi, r15
	mov	rsi, r12
	add	rsi, 32
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	r13, r10
	ja	.LBB5_1247
.LBB5_1236:                             # %OP471.PUSH1
                                        #   in Loop: Header=BB5_1234 Depth=1
	add	r15, qword ptr [r9 + 8]
	mov	qword ptr [r12 + r15 + 8], rbx
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [r12 + r15], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r12 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r12 + r15 + 24], rax
	mov	r10, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r12, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	add	r12, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	r10, 0
	mov	qword ptr [r14 - 24], rdx
	mov	qword ptr [r14 - 8], r10
	mov	qword ptr [r14 - 32], r12
	mov	qword ptr [r14 - 16], rcx
	cmp	r12, qword ptr [r14 - 128]
	mov	rsi, rdx
	sbb	rsi, qword ptr [r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [r14 - 112]
	mov	rsi, r10
	sbb	rsi, qword ptr [r14 - 104]
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], r12
	setae	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], 0
	jb	.LBB5_1234
	jmp	.LBB5_1237
.LBB5_1245:                             # %resize.i49313
                                        #   in Loop: Header=BB5_1234 Depth=1
	mov	rbx, rax
	mov	r15, rdi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1210
# %bb.1246:                             # %resize.i49313.OP466.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB5_1234 Depth=1
	mov	rax, qword ptr [r14 - 8]
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	rcx, qword ptr [r14 - 16]
	mov	r12, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rsi + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	r8, -1
	mov	rdi, r15
	mov	rax, rbx
	jmp	.LBB5_1235
.LBB5_1247:                             # %resize.i49327
                                        #   in Loop: Header=BB5_1234 Depth=1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 104]       # 8-byte Reload
	vpxor	xmm0, xmm0, xmm0
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_1236
	jmp	.LBB5_142
.LBB5_2444:
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
.LBB5_2580:                             # %OP8549.JUMPDEST
	mov	r15, r14
	shl	r15, 5
	mov	r9, qword ptr [r11 + r15 - 152]
	mov	r10, qword ptr [r11 + r15 - 136]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [rax + r15 - 144]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovaps	xmm0, xmmword ptr [rax + r15 - 192]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqa	xmm1, xmmword ptr [rax + r15 - 176]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqa	xmmword ptr [rax + r15 - 144], xmm1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [rax + r15 - 160]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovaps	xmmword ptr [rcx + r15 - 160], xmm0
	lea	r12, [r14 - 5]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + r15 - 200]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rdx + r15 - 224]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rdx + r15 - 216]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rdx + r15 - 208]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 208], r11
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 224], rax
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 200], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 216], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 176], rdx
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 192], rdi
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 168], rcx
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 184], rsi
	mov	r8, r12
	shl	r8, 5
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8 + 16], r11
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8 + 24], r10
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8], rax
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8 + 8], r9
	add	rdi, rax
	adc	rsi, r9
	adc	rdx, r11
	adc	rcx, r10
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 216], rsi
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 224], rdi
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 208], rdx
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 200], rcx
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 168], r10
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + r15 - 176], r11
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 184], r9
	mov	qword ptr [r11 + r15 - 192], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_33] # xmm0 = [31,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	xor	r9d, r9d
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 - 184], xmm0
	and	rax, 31
	mov	qword ptr [r11 + r15 - 192], rax
	mov	qword ptr [r11 + r15 - 168], 0
	sete	r9b
	mov	qword ptr [r11 + r8], r9
	vmovdqu	xmmword ptr [r11 + r8 + 8], xmm0
	mov	qword ptr [r11 + r8 + 24], 0
	je	.LBB5_2868
# %bb.2581:                             # %OP8566.DUP1
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	lea	r13, [r14 - 3]
	add	r15, r11
	add	r8, r11
	vmovdqu	xmmword ptr [r8 + 8], xmm0
	mov	qword ptr [r8], rax
	mov	qword ptr [r8 + 24], 0
	sub	rdi, rax
	sbb	rsi, 0
	sbb	rdx, 0
	sbb	rcx, 0
	mov	qword ptr [r15 - 160], rdi
	mov	qword ptr [r15 - 152], rsi
	mov	qword ptr [r15 - 144], rdx
	mov	qword ptr [r15 - 136], rcx
	mov	qword ptr [r15 - 128], rdi
	mov	qword ptr [r15 - 120], rsi
	mov	qword ptr [r15 - 112], rdx
	mov	qword ptr [r15 - 104], rcx
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r12, r14
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.2582:                             # %OP8570.MLOAD.contd
	lea	rdi, [r12 - 1]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	rbx, rdi
	mov	qword ptr [r15 - 112], rsi
	mov	qword ptr [r15 - 128], rcx
	mov	qword ptr [r15 - 104], rax
	mov	qword ptr [r15 - 120], rdx
	shl	r13, 5
	mov	qword ptr [r14 + r13 + 16], 0
	mov	qword ptr [r14 + r13], 1
	mov	qword ptr [r14 + r13 + 24], 0
	mov	qword ptr [r14 + r13 + 8], 0
	mov	rax, qword ptr [r15 - 192]
	mov	rcx, qword ptr [r15 - 176]
	mov	rdx, qword ptr [r15 - 184]
	mov	rdi, qword ptr [r15 - 168]
	lea	rsi, [r15 - 64]
	mov	qword ptr [r15 - 40], rdi
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 48], rcx
	mov	qword ptr [r15 - 64], rax
	mov	r8, rbx
	shl	r8, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r14 + r8], ymm0
	xor	r9d, r9d
	mov	r10d, 32
	sub	r10, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rdi
	mov	qword ptr [r15 - 56], rax
	mov	qword ptr [r15 - 64], r10
	mov	qword ptr [r15 - 48], rdx
	mov	qword ptr [r15 - 40], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r14 + r8], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB5_3086
# %bb.2583:                             # %OP8577.SUB
	add	r13, r14
	mov	rax, qword ptr [r15 - 40]
	mov	rcx, qword ptr [r15 - 48]
	mov	rsi, qword ptr [r15 - 64]
	mov	rdx, qword ptr [r15 - 56]
	sub	rsi, qword ptr [r15 - 96]
	sbb	rdx, qword ptr [r15 - 88]
	sbb	rcx, qword ptr [r15 - 80]
	sbb	rax, qword ptr [r15 - 72]
	mov	qword ptr [r15 - 96], rsi
	mov	qword ptr [r15 - 80], rcx
	mov	qword ptr [r15 - 88], rdx
	mov	qword ptr [r15 - 72], rax
	mov	rdi, rdx
	not	rdi
	mov	r8, rax
	not	r8
	mov	r9, rsi
	not	r9
	mov	r10, rcx
	not	r10
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	add	r12, -4
	mov	rbx, r12
	shl	rbx, 5
	andn	r8, rsi, qword ptr [r14 + rbx]
	andn	r10, rcx, qword ptr [r14 + rbx + 16]
	andn	r9, rdx, qword ptr [r14 + rbx + 8]
	andn	rax, rax, qword ptr [r14 + rbx + 24]
	mov	qword ptr [r14 + rbx + 24], rax
	mov	qword ptr [r14 + rbx + 8], r9
	mov	qword ptr [r14 + rbx + 16], r10
	mov	qword ptr [r14 + rbx], r8
	mov	rsi, qword ptr [r15 - 152]
	mov	rcx, qword ptr [r15 - 136]
	mov	rdi, qword ptr [r15 - 160]
	mov	rdx, qword ptr [r15 - 144]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3097
# %bb.2584:                             # %OP8582.PUSH1
	add	rbx, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 - 136]
	mov	rcx, qword ptr [r15 - 144]
	mov	rdx, qword ptr [r15 - 152]
	mov	rsi, qword ptr [r15 - 160]
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm0, xmmword ptr [r15 - 224]
	vmovdqa	xmm1, xmmword ptr [r15 - 208]
	mov	qword ptr [r15 - 224], rsi
	mov	qword ptr [r15 - 216], rdx
	mov	qword ptr [r15 - 208], rcx
	mov	qword ptr [r15 - 200], rax
	vmovdqa	xmmword ptr [r15 - 144], xmm1
	vmovdqa	xmmword ptr [r15 - 160], xmm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, r14
	jmp	.LBB5_2869
.LBB5_2868:
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2869:                             # %OP8586.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [r11 + rbx - 224]
	vmovdqa	xmm1, xmmword ptr [r11 + rbx - 208]
	vmovaps	xmm2, xmmword ptr [r11 + rbx - 64]
	vmovaps	xmm3, xmmword ptr [r11 + rbx - 48]
	vmovaps	xmmword ptr [r11 + rbx - 208], xmm3
	vmovaps	xmmword ptr [r11 + rbx - 224], xmm2
	vmovdqa	xmmword ptr [r11 + rbx - 48], xmm1
	vmovaps	xmmword ptr [r11 + rbx - 64], xmm0
	lea	r15, [rax - 4]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r11 + rbx - 192], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx - 160], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2870:                             # %OP8596.MLOAD.contd
	add	rbx, r13
	mov	rdx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx - 136], rsi
	mov	qword ptr [rbx - 152], rcx
	mov	qword ptr [rbx - 144], rdx
	mov	qword ptr [rbx - 160], rax
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 24], rsi
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15 + 8], rcx
	mov	qword ptr [r13 + r15], rax
	mov	rdi, qword ptr [rbx - 200]
	mov	r8, qword ptr [rbx - 208]
	mov	r9, qword ptr [rbx - 216]
	mov	r10, qword ptr [rbx - 224]
	sub	r10, rax
	sbb	r9, rcx
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	qword ptr [rbx - 128], r10
	mov	qword ptr [rbx - 120], r9
	mov	qword ptr [rbx - 112], r8
	mov	qword ptr [rbx - 104], rdi
	mov	qword ptr [rbx - 80], rdx
	mov	qword ptr [rbx - 72], rsi
	mov	qword ptr [rbx - 96], rax
	mov	qword ptr [rbx - 88], rcx
	mov	rax, qword ptr [rbx - 264]
	mov	rcx, qword ptr [rbx - 272]
	mov	rdx, qword ptr [rbx - 288]
	mov	rdi, qword ptr [rbx - 280]
	mov	qword ptr [rbx - 64], rdx
	mov	qword ptr [rbx - 56], rdi
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 40], rax
	lea	rsi, [rbx - 32]
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], rax
	mov	qword ptr [rbx - 32], rdx
	mov	qword ptr [rbx - 24], rdi
	mov	rdi, r12
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB5_142
# %bb.2871:                             # %OP8604.ISZERO
	mov	rax, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	or	rcx, qword ptr [rbx - 8]
	or	rax, qword ptr [rbx - 16]
	xor	edx, edx
	xor	esi, esi
	or	rax, rcx
	setne	dl
	sete	sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx - 24], xmm0
	mov	qword ptr [rbx - 32], rsi
	mov	qword ptr [rbx - 8], 0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], 0
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 216]      # 8-byte Reload
	je	.LBB5_2875
# %bb.2872:
	mov	rbx, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_2873:                             # %OP8612.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, rbx
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rcx - 24], xmm0
	mov	qword ptr [r11 + rcx - 32], rax
	mov	qword ptr [r11 + rcx - 8], 0
	add	rbx, -6
	lea	rsi, [r11 + rcx]
	add	rsi, -192
	mov	rdi, r12
	mov	edx, 17
	mov	ecx, 2
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.2874:
	lea	rax, [rip + .Ltmp17]
	jmp	.LBB5_2883
.LBB5_2875:                             # %OP8609.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2763:
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
.LBB5_2236:                             # %OP9491.JUMPDEST
	mov	r15, r14
	shl	r15, 5
	mov	r9, qword ptr [r11 + r15 - 152]
	mov	r10, qword ptr [r11 + r15 - 136]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [rax + r15 - 144]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovaps	xmm0, xmmword ptr [rax + r15 - 192]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqa	xmm1, xmmword ptr [rax + r15 - 176]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	vmovdqa	xmmword ptr [rax + r15 - 144], xmm1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [rax + r15 - 160]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	vmovaps	xmmword ptr [rcx + r15 - 160], xmm0
	lea	r12, [r14 - 5]
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + r15 - 200]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rdx + r15 - 224]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rdx + r15 - 216]
	mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdx, qword ptr [rdx + r15 - 208]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 208], r11
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 224], rax
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 200], r10
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 216], r9
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 176], rdx
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 192], rdi
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 168], rcx
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r15 - 184], rsi
	mov	r8, r12
	shl	r8, 5
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8 + 16], r11
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8 + 24], r10
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8], rax
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r8 + 8], r9
	add	rdi, rax
	adc	rsi, r9
	adc	rdx, r11
	adc	rcx, r10
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 216], rsi
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 224], rdi
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 208], rdx
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 200], rcx
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbx + r15 - 168], r10
	mov	r10, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r10 + r15 - 176], r11
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + r15 - 184], r9
	mov	qword ptr [r11 + r15 - 192], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_33] # xmm0 = [31,0]
	vmovdqu	ymmword ptr [r11 + r8], ymm0
	xor	r9d, r9d
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + r15 - 184], xmm0
	and	rax, 31
	mov	qword ptr [r11 + r15 - 192], rax
	mov	qword ptr [r11 + r15 - 168], 0
	sete	r9b
	mov	qword ptr [r11 + r8], r9
	vmovdqu	xmmword ptr [r11 + r8 + 8], xmm0
	mov	qword ptr [r11 + r8 + 24], 0
	je	.LBB5_2876
# %bb.2237:                             # %OP9508.DUP1
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	lea	r13, [r14 - 3]
	add	r15, r11
	add	r8, r11
	vmovdqu	xmmword ptr [r8 + 8], xmm0
	mov	qword ptr [r8], rax
	mov	qword ptr [r8 + 24], 0
	sub	rdi, rax
	sbb	rsi, 0
	sbb	rdx, 0
	sbb	rcx, 0
	mov	qword ptr [r15 - 160], rdi
	mov	qword ptr [r15 - 152], rsi
	mov	qword ptr [r15 - 144], rdx
	mov	qword ptr [r15 - 136], rcx
	mov	qword ptr [r15 - 128], rdi
	mov	qword ptr [r15 - 120], rsi
	mov	qword ptr [r15 - 112], rdx
	mov	qword ptr [r15 - 104], rcx
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r12, r14
	mov	r14, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.2238:                             # %OP9512.MLOAD.contd
	lea	rdi, [r12 - 1]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	rbx, rdi
	mov	qword ptr [r15 - 112], rsi
	mov	qword ptr [r15 - 128], rcx
	mov	qword ptr [r15 - 104], rax
	mov	qword ptr [r15 - 120], rdx
	shl	r13, 5
	mov	qword ptr [r14 + r13 + 16], 0
	mov	qword ptr [r14 + r13], 1
	mov	qword ptr [r14 + r13 + 24], 0
	mov	qword ptr [r14 + r13 + 8], 0
	mov	rax, qword ptr [r15 - 192]
	mov	rcx, qword ptr [r15 - 176]
	mov	rdx, qword ptr [r15 - 184]
	mov	rdi, qword ptr [r15 - 168]
	lea	rsi, [r15 - 64]
	mov	qword ptr [r15 - 40], rdi
	mov	qword ptr [r15 - 56], rdx
	mov	qword ptr [r15 - 48], rcx
	mov	qword ptr [r15 - 64], rax
	mov	r8, rbx
	shl	r8, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r14 + r8], ymm0
	xor	r9d, r9d
	mov	r10d, 32
	sub	r10, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rdi
	mov	qword ptr [r15 - 56], rax
	mov	qword ptr [r15 - 64], r10
	mov	qword ptr [r15 - 48], rdx
	mov	qword ptr [r15 - 40], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_30] # xmm0 = [256,0]
	vmovdqu	ymmword ptr [r14 + r8], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB5_3086
# %bb.2239:                             # %OP9519.SUB
	add	r13, r14
	mov	rax, qword ptr [r15 - 40]
	mov	rcx, qword ptr [r15 - 48]
	mov	rsi, qword ptr [r15 - 64]
	mov	rdx, qword ptr [r15 - 56]
	sub	rsi, qword ptr [r15 - 96]
	sbb	rdx, qword ptr [r15 - 88]
	sbb	rcx, qword ptr [r15 - 80]
	sbb	rax, qword ptr [r15 - 72]
	mov	qword ptr [r15 - 96], rsi
	mov	qword ptr [r15 - 80], rcx
	mov	qword ptr [r15 - 88], rdx
	mov	qword ptr [r15 - 72], rax
	mov	rdi, rdx
	not	rdi
	mov	r8, rax
	not	r8
	mov	r9, rsi
	not	r9
	mov	r10, rcx
	not	r10
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	add	r12, -4
	mov	rbx, r12
	shl	rbx, 5
	andn	r8, rsi, qword ptr [r14 + rbx]
	andn	r10, rcx, qword ptr [r14 + rbx + 16]
	andn	r9, rdx, qword ptr [r14 + rbx + 8]
	andn	rax, rax, qword ptr [r14 + rbx + 24]
	mov	qword ptr [r14 + rbx + 24], rax
	mov	qword ptr [r14 + rbx + 8], r9
	mov	qword ptr [r14 + rbx + 16], r10
	mov	qword ptr [r14 + rbx], r8
	mov	rsi, qword ptr [r15 - 152]
	mov	rcx, qword ptr [r15 - 136]
	mov	rdi, qword ptr [r15 - 160]
	mov	rdx, qword ptr [r15 - 144]
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3097
# %bb.2240:                             # %OP9524.PUSH1
	add	rbx, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 - 136]
	mov	rcx, qword ptr [r15 - 144]
	mov	rdx, qword ptr [r15 - 152]
	mov	rsi, qword ptr [r15 - 160]
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm0, xmmword ptr [r15 - 224]
	vmovdqa	xmm1, xmmword ptr [r15 - 208]
	mov	qword ptr [r15 - 224], rsi
	mov	qword ptr [r15 - 216], rdx
	mov	qword ptr [r15 - 208], rcx
	mov	qword ptr [r15 - 200], rax
	vmovdqa	xmmword ptr [r15 - 144], xmm1
	vmovdqa	xmmword ptr [r15 - 160], xmm0
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r11, r14
	jmp	.LBB5_2877
.LBB5_2876:
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2877:                             # %OP9528.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [r11 + rbx - 224]
	vmovdqa	xmm1, xmmword ptr [r11 + rbx - 208]
	vmovaps	xmm2, xmmword ptr [r11 + rbx - 64]
	vmovaps	xmm3, xmmword ptr [r11 + rbx - 48]
	vmovaps	xmmword ptr [r11 + rbx - 208], xmm3
	vmovaps	xmmword ptr [r11 + rbx - 224], xmm2
	vmovdqa	xmmword ptr [r11 + rbx - 48], xmm1
	vmovaps	xmmword ptr [r11 + rbx - 64], xmm0
	lea	r15, [rax - 4]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r11 + rbx - 192], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r11 + rbx - 160], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2878:                             # %OP9538.MLOAD.contd
	add	rbx, r13
	mov	rdx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [rbx - 136], rsi
	mov	qword ptr [rbx - 152], rcx
	mov	qword ptr [rbx - 144], rdx
	mov	qword ptr [rbx - 160], rax
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 24], rsi
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15 + 8], rcx
	mov	qword ptr [r13 + r15], rax
	mov	rdi, qword ptr [rbx - 200]
	mov	r8, qword ptr [rbx - 208]
	mov	r9, qword ptr [rbx - 216]
	mov	r10, qword ptr [rbx - 224]
	sub	r10, rax
	sbb	r9, rcx
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	qword ptr [rbx - 128], r10
	mov	qword ptr [rbx - 120], r9
	mov	qword ptr [rbx - 112], r8
	mov	qword ptr [rbx - 104], rdi
	mov	qword ptr [rbx - 80], rdx
	mov	qword ptr [rbx - 72], rsi
	mov	qword ptr [rbx - 96], rax
	mov	qword ptr [rbx - 88], rcx
	mov	rax, qword ptr [rbx - 264]
	mov	rcx, qword ptr [rbx - 272]
	mov	rdx, qword ptr [rbx - 288]
	mov	rdi, qword ptr [rbx - 280]
	mov	qword ptr [rbx - 64], rdx
	mov	qword ptr [rbx - 56], rdi
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 40], rax
	lea	rsi, [rbx - 32]
	mov	qword ptr [rbx - 16], rcx
	mov	qword ptr [rbx - 8], rax
	mov	qword ptr [rbx - 32], rdx
	mov	qword ptr [rbx - 24], rdi
	mov	rdi, r12
	mov	edx, 17
	call	__revmc_builtin_extcodesize@PLT
	test	al, al
	jne	.LBB5_142
# %bb.2879:                             # %OP9546.ISZERO
	mov	rax, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	or	rcx, qword ptr [rbx - 8]
	or	rax, qword ptr [rbx - 16]
	xor	edx, edx
	xor	esi, esi
	or	rax, rcx
	setne	dl
	sete	sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx - 24], xmm0
	mov	qword ptr [rbx - 32], rsi
	mov	qword ptr [rbx - 8], 0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], 0
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 216]      # 8-byte Reload
	je	.LBB5_2885
# %bb.2880:
	mov	rbx, rax
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
.LBB5_2881:                             # %OP9554.JUMPDEST
	mov	rax, qword ptr [rcx + 8]
	mov	rcx, rbx
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r11 + rcx - 24], xmm0
	mov	qword ptr [r11 + rcx - 32], rax
	mov	qword ptr [r11 + rcx - 8], 0
	add	rbx, -6
	lea	rsi, [r11 + rcx]
	add	rsi, -192
	mov	rdi, r12
	mov	edx, 17
	mov	ecx, 2
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB5_3087
# %bb.2882:
	lea	rax, [rip + .Ltmp19]
.LBB5_2883:                             # %suspend
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [r12 + 32], rax
	mov	al, 32
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_2885:                             # %OP9551.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx + 32], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2886:                             # %OP9356.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2887:                             # %OP9357.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.2888:                             # %OP9361.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r9
	mov	qword ptr [r11 + r15 + 8], rsi
	mov	qword ptr [r11 + r15 + 24], rcx
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2889:                             # %OP9372.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2890:                             # %OP9375.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_121] # xmm0 = [23337,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_3000
# %bb.2891:                             # %OP9382.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3076
# %bb.2892:                             # %OP9388.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2893:                             # %OP9312.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2894:                             # %OP9313.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.2895:                             # %OP9317.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r9
	mov	qword ptr [r11 + r15 + 8], rsi
	mov	qword ptr [r11 + r15 + 24], rcx
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2896:                             # %OP9328.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_119] # xmm0 = [43,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 43
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3000
# %bb.2897:                             # %OP9331.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_120] # xmm0 = [22133,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_119] # xmm0 = [43,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_3000
# %bb.2898:                             # %OP9338.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3076
# %bb.2899:                             # %OP9344.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2900:
	mov	r11, rbx
	mov	r10, r15
.LBB5_2901:                             # %OP3448.JUMPDEST
	mov	rax, r10
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_158] # xmm0 = [6284,0,0,0]
	vmovdqu	ymmword ptr [r11 + rax], ymm0
	add	r10, 2
	bswap	r8
	bswap	r9
	shrd	r9, r8, 32
	bswap	rdi
	shrd	r8, rdi, 32
	shr	rdi, 32
	mov	qword ptr [r11 + rax + 48], rdi
	mov	qword ptr [r11 + rax + 40], r8
	mov	qword ptr [r11 + rax + 32], r9
	mov	qword ptr [r11 + rax + 56], 0
	mov	eax, 1
	jmp	.LBB5_74
.LBB5_2902:                             # %OP7561.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2903:                             # %OP7562.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.2904:                             # %OP7566.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r9
	mov	qword ptr [r11 + r15 + 8], rsi
	mov	qword ptr [r11 + r15 + 24], rcx
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2905:                             # %OP7577.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_150] # xmm0 = [35,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 35
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2906:                             # %OP7580.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_166] # xmm0 = [22058,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_150] # xmm0 = [35,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.2907:                             # %OP7587.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.2908:                             # %OP7593.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_2909
.LBB5_2910:                             # %OP7709.PUSH1
	add	r12, r11
	add	rbx, r11
	add	r13, 3
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12 + 64], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.2911:                             # %OP7711.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [rbp - 88], r13       # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + r14 + 24], rax
	mov	qword ptr [r8 + r14 + 16], 0
	mov	qword ptr [r8 + r14], 0
	mov	qword ptr [r8 + r14 + 8], 0
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 152], rcx
	mov	qword ptr [r12 + 136], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	push	r13
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2912:                             # %OP7715.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r14
	mov	r14, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rdi, qword ptr [r12 + 64]
	mov	rsi, qword ptr [r12 + 72]
	mov	rcx, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	qword ptr [r12 + 176], rdx
	mov	qword ptr [r12 + 184], rcx
	mov	qword ptr [r12 + 160], rdi
	mov	qword ptr [r12 + 168], rsi
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2913:                             # %OP7720.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_46] # xmm0 = [30,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rdi, qword ptr [r12 + 64]
	mov	rsi, qword ptr [r12 + 72]
	mov	rcx, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	qword ptr [r12 + 176], rdx
	mov	qword ptr [r12 + 184], rcx
	mov	qword ptr [r12 + 160], rdi
	mov	qword ptr [r12 + 168], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 152], rcx
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 30
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2914:                             # %OP7725.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_161] # ymm0 = [7310017761088307200,7166468834363207542,4188474601454727777,6008195963164914792]
	mov	qword ptr [rbp - 56], r14       # 8-byte Spill
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rdi, qword ptr [r12 + 64]
	mov	rsi, qword ptr [r12 + 72]
	mov	rcx, qword ptr [r12 + 88]
	mov	rdx, qword ptr [r12 + 80]
	mov	qword ptr [r12 + 176], rdx
	mov	qword ptr [r12 + 184], rcx
	mov	qword ptr [r12 + 160], rdi
	mov	qword ptr [r12 + 168], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r12 + 128], rdi
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 144], rdx
	mov	qword ptr [r12 + 152], rcx
	sub	rsp, 8
	movabs	rax, 6008195963164914792
	movabs	r10, 4188474601454727777
	movabs	r8, 7310017761088307200
	movabs	r9, 7166468834363207542
	push	r13
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3056
# %bb.2915:                             # %OP7730.SWAP1
	mov	rax, qword ptr [r12 + 88]
	mov	r8, qword ptr [r12 + 64]
	mov	r9, qword ptr [r12 + 72]
	mov	r10, qword ptr [r12 + 80]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 72], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r13
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3056
# %bb.2916:                             # %OP7731.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 64], rcx
	mov	qword ptr [r12 + 88], rax
	mov	qword ptr [r12 + 72], rsi
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rcx
	mov	qword ptr [r12 + 88], r10
	mov	qword ptr [r12 + 72], r9
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 80], r8
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11], rcx
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r12 + 88], rax
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 64], rcx
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r11 + 24], r10
	mov	qword ptr [r11 + 16], r8
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r11], rdi
	sub	rdi, rcx
	sbb	r9, rsi
	sbb	r8, rdx
	sbb	r10, rax
	mov	qword ptr [r12 + 88], r10
	mov	qword ptr [r12 + 80], r8
	mov	qword ptr [r12 + 72], r9
	mov	qword ptr [r12 + 64], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_39] # xmm0 = [100,0]
	vmovdqu	ymmword ptr [r11], ymm0
	add	rdi, 100
	adc	r9, 0
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r12 + 88], r10
	mov	qword ptr [r12 + 72], r9
	mov	qword ptr [r12 + 80], r8
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 64], rcx
	mov	qword ptr [r12 + 88], rax
	mov	qword ptr [r12 + 80], rdx
	jmp	.LBB5_2931
.LBB5_2917:                             # %OP7517.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2918:                             # %OP7518.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.2919:                             # %OP7522.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r9
	mov	qword ptr [r11 + r15 + 8], rsi
	mov	qword ptr [r11 + r15 + 24], rcx
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2920:                             # %OP7533.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2921:                             # %OP7536.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_167] # xmm0 = [22969,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.2922:                             # %OP7543.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.2923:                             # %OP7549.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r15
	jmp	.LBB5_2932
.LBB5_1955:                             # %OP6782.PUSH1
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
.LBB5_1956:                             # %OP6782.PUSH1
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r12, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.1905:                             # %OP3030.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rbx, r14
	inc	r14
	mov	r15, rbx
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 16], rdx
	mov	qword ptr [r13 + r14], rdi
	mov	qword ptr [r13 + r14 + 24], rcx
	mov	qword ptr [r13 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1906:                             # %OP3034.PUSH1
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	add	r15, r13
	add	rbx, 2
	add	r14, r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r8, qword ptr [r12 + 24]
	mov	rax, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12]
	mov	r10, qword ptr [r12 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r9
	mov	qword ptr [r13 + rbx + 8], rsi
	mov	qword ptr [r13 + rbx + 24], rcx
	mov	qword ptr [r13 + rbx + 16], rdx
	mov	qword ptr [r13 + rbx], rdi
	mov	qword ptr [r15 + 104], r10
	mov	qword ptr [r15 + 96], r9
	mov	qword ptr [r15 + 120], r8
	mov	qword ptr [r15 + 112], rax
	vmovups	ymmword ptr [r13 + rbx], ymm0
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 104], rsi
	mov	qword ptr [r15 + 96], rdi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1907:                             # %OP3045.PUSH1
	add	rbx, r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.1908:                             # %OP3048.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_95] # xmm0 = [23300,0,0,0]
	vmovups	ymmword ptr [r15 + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [r15 + 128], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rsi
	mov	qword ptr [r15 + 128], rdx
	mov	rdi, r12
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_142
.LBB5_1909:                             # %OP3055.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r15 - 32]
	mov	qword ptr [r15 - 8], rax
	mov	qword ptr [r15 - 32], rdx
	mov	qword ptr [r15 - 24], rsi
	mov	qword ptr [r15 - 16], rcx
	vmovdqu	ymmword ptr [r14], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.1910:                             # %OP3061.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rdx
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], rcx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rdx
	mov	r8, qword ptr [r15 - 24]
	mov	r9, qword ptr [r15 - 8]
	mov	r10, qword ptr [r15 - 32]
	mov	r11, qword ptr [r15 - 16]
	mov	qword ptr [r15 - 16], rax
	mov	qword ptr [r15 - 32], rdx
	mov	qword ptr [r15 - 8], rdi
	mov	qword ptr [r15 - 24], rcx
	mov	qword ptr [r14], r10
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r14 + 8], r8
	sub	r10, rdx
	sbb	r8, rcx
	sbb	r11, rax
	sbb	r9, rdi
	mov	qword ptr [r15 - 32], r10
	mov	qword ptr [r15 - 24], r8
	mov	qword ptr [r15 - 16], r11
	mov	qword ptr [r15 - 8], r9
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rcx
	mov	rdi, r12
.LBB5_1911:                             # %OP3061.MLOAD.contd
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_1912
.LBB5_1244:
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1343:                             # %OP6181.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.1344:                             # %OP6182.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r12, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	mov	qword ptr [r8 + r13 + 16], rdx
	mov	qword ptr [r8 + r13], rdi
	mov	qword ptr [r8 + r13 + 24], rcx
	mov	qword ptr [r8 + r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.1345:                             # %OP6186.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r9
	adc	rax, 0
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1346:                             # %OP6197.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_226] # xmm0 = [50,0,0,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 50
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1347:                             # %OP6200.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rdi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 23250
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_226] # xmm0 = [50,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.1348:                             # %OP6207.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r15
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.1349:                             # %OP6213.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1321:                             # %OP1802.PUSH1
	add	rbx, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rbx + 64], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_2924:                             # %OP8187.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.2925:                             # %OP8188.MLOAD.contd
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 2]
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r15, r8
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r8 + r12 + 16], rdx
	mov	qword ptr [r8 + r12], rdi
	mov	qword ptr [r8 + r12 + 24], rcx
	mov	qword ptr [r8 + r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1151
# %bb.2926:                             # %OP8192.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r9
	mov	qword ptr [r11 + r13 + 8], rsi
	mov	qword ptr [r11 + r13 + 24], rcx
	mov	qword ptr [r11 + r13 + 16], rdx
	mov	qword ptr [r11 + r13], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r13], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2927:                             # %OP8203.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	mov	r14, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3076
# %bb.2928:                             # %OP8206.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r14
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rdi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_117] # xmm0 = [22890,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r14], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r13
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_3076
# %bb.2929:                             # %OP8213.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3000
# %bb.2930:                             # %OP8219.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 8], rdi
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], rax
.LBB5_2931:                             # %OP8219.MLOAD.contd
	mov	rdi, r13
	jmp	.LBB5_2932
.LBB5_1350:                             # %OP6143.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	r12, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.1351:                             # %OP6145.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 3]
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + r13 + 24], rax
	mov	qword ptr [r15 + r13 + 16], 0
	mov	qword ptr [r15 + r13], 0
	mov	qword ptr [r15 + r13 + 8], 0
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1352:                             # %OP6149.PUSH1
	add	r13, r15
	add	r14, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 32
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 152], rcx
	sub	rsp, 32
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r15
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1353:                             # %OP6156.PUSH1
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	r8, qword ptr [r13]
	mov	r9, qword ptr [r13 + 8]
	sub	rsp, 8
	push	r15
	push	qword ptr [r13 + 24]
	push	qword ptr [r13 + 16]
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1354:                             # %OP6160.PUSH32
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI5_177] # ymm0 = [7522454415709463922,7598452654992531572,2333816150210998816,5726166815767029050]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 24], rcx
	sub	rsp, 8
	movabs	rax, 5726166815767029050
	movabs	r10, 2333816150210998816
	movabs	r8, 7522454415709463922
	movabs	r9, 7598452654992531572
	push	r15
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1355:                             # %OP6165.SWAP1
	mov	rax, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, r15
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.1356:                             # %OP6166.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 16]
	mov	rsi, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	sub	r9, rsi
	sbb	r10, rcx
	sbb	r8, rdx
	sbb	rdi, rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 100
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	add	r9, 100
	adc	r10, 0
	adc	r8, 0
	adc	rdi, 0
	mov	qword ptr [rbx], r9
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rcx
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1432:                             # %OP7279.PUSH1
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1151
# %bb.1433:                             # %OP7280.MLOAD.contd
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r15
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 16], 0
	mov	qword ptr [r12], 0
	mov	qword ptr [r12 + 8], 0
	mov	r8, qword ptr [rbp - 80]        # 8-byte Reload
	shl	r8, 5
	mov	qword ptr [r15 + r8 + 16], rdx
	mov	qword ptr [r15 + r8], rdi
	mov	qword ptr [r15 + r8 + 24], rcx
	mov	r14, r8
	mov	qword ptr [r15 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1151
# %bb.1434:                             # %OP7284.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 3
	mov	r11, r14
	mov	r14, rax
	add	r11, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	r13, r14
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r11 + 24], r8
	mov	qword ptr [r11 + 8], r10
	mov	qword ptr [r11 + 16], rax
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r11], r9
	mov	qword ptr [r15 + r13 + 8], rsi
	mov	qword ptr [r15 + r13 + 24], rcx
	mov	qword ptr [r15 + r13 + 16], rdx
	mov	qword ptr [r15 + r13], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1055
# %bb.1435:                             # %OP7295.PUSH1
	add	r15, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_174] # xmm0 = [44,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 44
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1055
# %bb.1436:                             # %OP7298.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_175] # xmm0 = [22564,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_174] # xmm0 = [44,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, r13
	mov	rsi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1055
# %bb.1437:                             # %OP7305.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1438:                             # %OP7311.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r11 + 24], rsi
	mov	qword ptr [r11 + 8], rdx
	mov	qword ptr [r11 + 16], rcx
	mov	qword ptr [r11], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r11], r9
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11 + 24], r8
	mov	qword ptr [r11 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12], rax
	mov	rdi, r13
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1381:                             # %OP6258.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3097
# %bb.1382:                             # %OP6259.MLOAD.contd
	lea	r8, [r13 + 2]
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	add	r15, r9
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	shl	r8, 5
	mov	qword ptr [r9 + r8 + 16], rdx
	mov	qword ptr [r9 + r8], rdi
	mov	qword ptr [r9 + r8 + 24], rcx
	mov	r14, r8
	mov	qword ptr [r9 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3097
# %bb.1383:                             # %OP6263.PUSH1
	lea	r12, [r13 + 3]
	mov	r11, r14
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	add	r11, r14
	mov	rax, qword ptr [rbx + 24]
	mov	r10, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	adc	rax, 0
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r11 + 8], r8
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r14 + r12], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1384:                             # %OP6274.PUSH1
	add	r14, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_110] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 36
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.1385:                             # %OP6277.PUSH1
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [rbx + 144], 0
	mov	qword ptr [rbx + 128], 22768
	mov	qword ptr [rbx + 152], 0
	mov	qword ptr [rbx + 136], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 36
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 160], rdx
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 168], rsi
	mov	rdi, r12
	mov	rsi, r14
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.1386:                             # %OP6284.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.1387:                             # %OP6290.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r8
	mov	qword ptr [r11 + 24], rdi
	mov	qword ptr [r11 + 8], r9
	sub	r8, rdx
	sbb	r9, rsi
	sbb	r10, rcx
	sbb	rdi, rax
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], rdi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1322:                             # %OP1778.PUSH1
	add	r11, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r11 + 32], ymm0
	vmovdqu	ymmword ptr [r11], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r11
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1323:                             # %OP1764.PUSH1
	add	r15, r11
	add	rbx, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15 + 224], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
	jmp	.LBB5_456
.LBB5_1308:                             # %OP1720.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
.LBB5_456:                              # %select.false57133
	mov	eax, ecx
	jmp	.LBB5_751
.LBB5_1442:                             # %OP2721.PUSH1
	add	rax, r11
	add	rsi, r11
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [rax + 128], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_1444
.LBB5_1443:                             # %select.end56528
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_2934:
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	mov	al, 88
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_2935:                             # %OP4356.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.2936:                             # %OP4357.MLOAD.contd
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [r12 + 3]
	mov	rdx, qword ptr [r15 + 16]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	shl	r8, 5
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r15 + r8 + 16], rdx
	mov	qword ptr [r15 + r8], rdi
	mov	qword ptr [r15 + r8 + 24], rcx
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	mov	qword ptr [r15 + r8 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2937:                             # %OP4361.PUSH1
	add	r12, 4
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	add	r11, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r11], rdi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r11 + 24], r8
	mov	qword ptr [r11 + 8], r10
	mov	qword ptr [r11 + 16], rax
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r11], r9
	mov	qword ptr [r15 + r12 + 8], rsi
	mov	qword ptr [r15 + r12 + 24], rcx
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12], rdi
	mov	qword ptr [r14 + 168], r10
	mov	qword ptr [r14 + 160], r9
	mov	qword ptr [r14 + 184], r8
	mov	qword ptr [r14 + 176], rax
	vmovdqu	ymmword ptr [r15 + r12], ymm0
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 168], rsi
	mov	qword ptr [r14 + 160], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.2938:                             # %OP4372.PUSH1
	add	r15, r12
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_147] # xmm0 = [46,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rax + 24]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax + 16]
	mov	qword ptr [r14 + 176], rdx
	mov	qword ptr [r14 + 160], rdi
	mov	qword ptr [r14 + 184], rcx
	mov	qword ptr [r14 + 168], rsi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 46
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.2939:                             # %OP4375.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 24], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_148] # xmm0 = [23042,0,0,0]
	vmovups	ymmword ptr [r14 + 160], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_147] # xmm0 = [46,0]
	vmovdqu	ymmword ptr [r14 + 192], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [r14 + 216], rax
	mov	qword ptr [r14 + 208], rcx
	mov	qword ptr [r14 + 200], rsi
	mov	qword ptr [r14 + 192], rdx
	mov	rdi, r12
	mov	rsi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_751
# %bb.2940:                             # %OP4382.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [rdi], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1148
# %bb.2941:                             # %OP4388.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r11 + 24], rsi
	mov	qword ptr [r11 + 8], rdx
	mov	qword ptr [r11 + 16], rcx
	mov	qword ptr [r11], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r11], r9
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11 + 24], r8
	mov	qword ptr [r11 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13], rax
	mov	rdi, r12
	mov	rsi, rbx
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_2942
.LBB5_1958:
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3020:                             # %OP5749.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r13, [rax + 2]
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r12, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_931
# %bb.3021:                             # %OP5751.MLOAD.contd
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbp - 104], r13      # 8-byte Spill
	mov	r14, r13
	shl	r14, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r12 + r14 + 24], rax
	mov	qword ptr [r12 + r14 + 16], 0
	mov	qword ptr [r12 + r14], 0
	mov	qword ptr [r12 + r14 + 8], 0
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 120], rcx
	mov	qword ptr [rbx + 104], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.3022:                             # %OP5755.PUSH1
	add	r12, r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 4
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.3023:                             # %OP5760.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_58] # xmm0 = [16,0]
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_110] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 36
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 16
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.3024:                             # %OP5765.PUSH32
	vmovaps	ymm0, ymmword ptr [rip + .LCPI5_111] # ymm0 = [0,0,4188471217339196772,5792039734190697573]
	mov	qword ptr [rbp - 56], r12       # 8-byte Spill
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_36] # xmm0 = [68,0]
	vmovdqu	ymmword ptr [rbx + 96], ymm0
	mov	rdx, qword ptr [r15 + 16]
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 144], rdx
	add	rdi, 68
	adc	rsi, 0
	adc	rdx, 0
	adc	rcx, 0
	mov	qword ptr [rbx + 96], rdi
	mov	qword ptr [rbx + 104], rsi
	mov	qword ptr [rbx + 112], rdx
	mov	qword ptr [rbx + 120], rcx
	sub	rsp, 8
	movabs	rax, 5792039734190697573
	movabs	r10, 4188471217339196772
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	r10
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.3025:                             # %OP5770.SWAP1
	mov	rax, qword ptr [r15 + 24]
	mov	r8, qword ptr [r15]
	mov	r9, qword ptr [r15 + 8]
	mov	r10, qword ptr [r15 + 16]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.3026:                             # %OP5771.MLOAD.contd
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	rdi, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rcx
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 16], r8
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11], rcx
	mov	qword ptr [r11 + 16], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r11 + 24], r10
	mov	qword ptr [r11 + 16], r8
	mov	qword ptr [r11 + 8], r9
	mov	qword ptr [r11], rdi
	sub	rdi, rcx
	sbb	r9, rsi
	sbb	r8, rdx
	sbb	r10, rax
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15], rdi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_39] # xmm0 = [100,0]
	vmovdqu	ymmword ptr [r11], ymm0
	add	rdi, 100
	adc	r9, 0
	adc	r8, 0
	adc	r10, 0
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], r8
	mov	qword ptr [r15], rdi
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rbx + 24], r10
	mov	qword ptr [rbx + 16], r8
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], rdx
	jmp	.LBB5_2950
.LBB5_2943:                             # %OP4874.PUSH1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	r15, rcx
	shl	r15, 5
	add	r15, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r13, rsp
	add	r13, -32
	mov	rsp, r13
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r13
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1087
# %bb.2944:                             # %OP4875.MLOAD.contd
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r12 - 80], rdx
	mov	qword ptr [r12 - 96], rdi
	mov	qword ptr [r12 - 72], rcx
	mov	qword ptr [r12 - 88], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1087
# %bb.2945:                             # %OP4879.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	r15, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	add	r11, r15
	mov	rax, qword ptr [r12 - 136]
	mov	r10, qword ptr [r12 - 144]
	mov	r9, qword ptr [r12 - 160]
	mov	r8, qword ptr [r12 - 152]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r8
	adc	rsi, 0
	mov	rdx, r10
	adc	rdx, 0
	mov	rcx, rax
	adc	rcx, 0
	mov	qword ptr [r12 - 160], rdi
	mov	qword ptr [r12 - 144], rdx
	mov	qword ptr [r12 - 152], rsi
	mov	qword ptr [r12 - 136], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	add	r9, 36
	adc	r8, 0
	adc	r10, 0
	adc	rax, 0
	mov	qword ptr [r12 - 80], r10
	mov	qword ptr [r12 - 96], r9
	mov	qword ptr [r12 - 72], rax
	mov	qword ptr [r12 - 88], r8
	mov	qword ptr [r12 - 48], rdx
	mov	qword ptr [r12 - 64], rdi
	mov	qword ptr [r12 - 40], rcx
	mov	qword ptr [r12 - 56], rsi
	mov	qword ptr [r11 + 16], r10
	mov	qword ptr [r11], r9
	mov	qword ptr [r11 + 24], rax
	mov	qword ptr [r11 + 8], r8
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	lea	r14, [rax - 2]
	mov	r13, r14
	shl	r13, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r13], ymm0
	mov	qword ptr [r12 - 8], rcx
	mov	qword ptr [r12 - 16], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 32], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_371
# %bb.2946:                             # %OP4890.PUSH1
	add	r13, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_127] # xmm0 = [61,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [r12 - 96]
	mov	rsi, qword ptr [r12 - 88]
	mov	rcx, qword ptr [r12 - 72]
	mov	rdx, qword ptr [r12 - 80]
	mov	qword ptr [r12 - 16], rdx
	mov	qword ptr [r12 - 8], rcx
	mov	qword ptr [r12 - 32], rdi
	mov	qword ptr [r12 - 24], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 61
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_371
# %bb.2947:                             # %OP4893.PUSH1
	lea	rsi, [r12 - 64]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r12 - 72]
	mov	rcx, qword ptr [r12 - 80]
	mov	rdx, qword ptr [r12 - 96]
	mov	rdi, qword ptr [r12 - 88]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12 - 96], rdx
	mov	qword ptr [r12 - 80], rcx
	mov	qword ptr [r12 - 88], rdi
	mov	qword ptr [r12 - 72], rax
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_128] # xmm0 = [21997,0,0,0]
	vmovups	ymmword ptr [r12 - 32], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_127] # xmm0 = [61,0]
	vmovdqu	ymmword ptr [r12 - 64], ymm0
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdi
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_371
# %bb.2948:                             # %OP4900.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r12 - 72]
	mov	rcx, qword ptr [r12 - 80]
	mov	rdx, qword ptr [r12 - 88]
	mov	rsi, qword ptr [r12 - 96]
	add	rsi, 64
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm1, xmmword ptr [r12 - 160]
	vmovaps	xmm2, xmmword ptr [r12 - 144]
	mov	qword ptr [r12 - 160], rsi
	mov	qword ptr [r12 - 152], rdx
	mov	qword ptr [r12 - 144], rcx
	mov	qword ptr [r12 - 136], rax
	vmovaps	xmmword ptr [r12 - 80], xmm2
	vmovdqa	xmmword ptr [r12 - 96], xmm1
	mov	r15, qword ptr [rbp - 80]       # 8-byte Reload
	add	r15, -3
	vmovdqu	ymmword ptr [r12 - 128], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.2949:                             # %OP4906.MLOAD.contd
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r12 - 104], rsi
	mov	qword ptr [r12 - 120], rdx
	mov	qword ptr [r12 - 112], rax
	mov	qword ptr [r12 - 128], rcx
	shl	r15, 5
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rdi + r15 + 24], rsi
	mov	qword ptr [rdi + r15 + 8], rdx
	mov	qword ptr [rdi + r15 + 16], rax
	mov	qword ptr [rdi + r15], rcx
	mov	rdi, qword ptr [r12 - 136]
	mov	r8, qword ptr [r12 - 144]
	mov	r9, qword ptr [r12 - 160]
	mov	r10, qword ptr [r12 - 152]
	mov	qword ptr [r12 - 96], r9
	mov	qword ptr [r12 - 80], r8
	mov	qword ptr [r12 - 72], rdi
	mov	qword ptr [r12 - 88], r10
	sub	r9, rcx
	sbb	r10, rdx
	sbb	r8, rax
	sbb	rdi, rsi
	mov	qword ptr [r12 - 160], r9
	mov	qword ptr [r12 - 152], r10
	mov	qword ptr [r12 - 144], r8
	mov	qword ptr [r12 - 136], rdi
	mov	qword ptr [r12 - 112], rax
	mov	qword ptr [r12 - 128], rcx
	mov	qword ptr [r12 - 120], rdx
	mov	qword ptr [r12 - 104], rsi
	jmp	.LBB5_2950
.LBB5_2951:                             # %OP4299.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.2952:                             # %OP4300.MLOAD.contd
	add	r13, r15
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	r12, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r12, 5
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12], rdi
	mov	qword ptr [r15 + r12 + 24], rcx
	mov	qword ptr [r15 + r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.2953:                             # %OP4304.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 3]
	add	r12, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r9
	mov	qword ptr [r15 + r14 + 8], rsi
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2954:                             # %OP4315.PUSH1
	add	r15, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 41
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2955:                             # %OP4318.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_146] # xmm0 = [22444,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	jmp	.LBB5_2956
.LBB5_1055:
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_2414:                             # %OP5946.PUSH1
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.2415:                             # %OP5947.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rbx, r15
	inc	r15
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], rax
	mov	qword ptr [r8 + rbx + 16], 0
	mov	qword ptr [r8 + rbx], 0
	mov	qword ptr [r8 + rbx + 8], 0
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2416:                             # %OP5582.PUSH1
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	lea	r12, [r11 + rbx]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 2
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [r14 + 24]
	mov	rax, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rbx
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r9
	mov	qword ptr [r11 + rbx + 8], rsi
	mov	qword ptr [r11 + rbx + 24], rcx
	mov	qword ptr [r11 + rbx + 16], rdx
	mov	qword ptr [r11 + rbx], rdi
	mov	qword ptr [r12 + 104], r10
	mov	qword ptr [r12 + 96], r9
	mov	qword ptr [r12 + 120], r8
	mov	qword ptr [r12 + 112], rax
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2419
# %bb.2417:                             # %OP5593.PUSH1
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2419
# %bb.2418:                             # %OP5596.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_95] # xmm0 = [23300,0,0,0]
	vmovups	ymmword ptr [r12 + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [r12 + 128], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 128], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	je	.LBB5_2984
	jmp	.LBB5_2419
.LBB5_2959:                             # %OP4255.PUSH1
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdi       # 8-byte Spill
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, r12
	mov	r15, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1958
# %bb.2960:                             # %OP4256.MLOAD.contd
	add	r13, r15
	mov	rdx, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	r12, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r12, 5
	mov	qword ptr [r15 + r12 + 16], rdx
	mov	qword ptr [r15 + r12], rdi
	mov	qword ptr [r15 + r12 + 24], rcx
	mov	qword ptr [r15 + r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1958
# %bb.2961:                             # %OP4260.PUSH1
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r14, [rax + 3]
	add	r12, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r9
	mov	qword ptr [r15 + r14 + 8], rsi
	mov	qword ptr [r15 + r14 + 24], rcx
	mov	qword ptr [r15 + r14 + 16], rdx
	mov	qword ptr [r15 + r14], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r15 + r14], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2962:                             # %OP4271.PUSH1
	add	r15, r14
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_150] # xmm0 = [35,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 35
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1244
# %bb.2963:                             # %OP4274.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_151] # xmm0 = [22217,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_150] # xmm0 = [35,0]
.LBB5_2956:                             # %OP4318.PUSH1
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r15
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1244
# %bb.2957:                             # %OP4325.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.2958:                             # %OP4331.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	jmp	.LBB5_1750
.LBB5_1743:                             # %OP4702.PUSH1
	add	rbx, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r8, rsp
	add	r8, -32
	mov	rsp, r8
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3084
# %bb.1744:                             # %OP4703.MLOAD.contd
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	add	r13, r8
	lea	r12, [r14 + 2]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdx, qword ptr [rax + 16]
	mov	rdi, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [rbp - 80], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r8 + r12 + 16], rdx
	mov	qword ptr [r8 + r12], rdi
	mov	qword ptr [r8 + r12 + 24], rcx
	mov	qword ptr [r8 + r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3084
# %bb.1745:                             # %OP4707.PUSH1
	lea	r15, [r14 + 3]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	shl	r15, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r9
	mov	qword ptr [r11 + r15 + 8], rsi
	mov	qword ptr [r11 + r15 + 24], rcx
	mov	qword ptr [r11 + r15 + 16], rdx
	mov	qword ptr [r11 + r15], rdi
	mov	qword ptr [rbx + 136], r10
	mov	qword ptr [rbx + 128], r9
	mov	qword ptr [rbx + 152], r8
	mov	qword ptr [rbx + 144], rax
	vmovdqu	ymmword ptr [r11 + r15], ymm0
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 136], rsi
	mov	qword ptr [rbx + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1746:                             # %OP4718.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, r15
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_90] # xmm0 = [38,0]
	mov	r15, rax
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [rbx + 144], rdx
	mov	qword ptr [rbx + 128], rdi
	mov	qword ptr [rbx + 152], rcx
	mov	qword ptr [rbx + 136], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 38
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2380
# %bb.1747:                             # %OP4721.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	mov	rsi, r15
	vmovups	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rdi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rdi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rdi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_136] # xmm0 = [22650,0,0,0]
	vmovups	ymmword ptr [rbx + 128], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_90] # xmm0 = [38,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rdi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_2380
# %bb.1748:                             # %OP4728.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r15, rsp
	add	r15, -32
	mov	rsp, r15
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r15
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
# %bb.1749:                             # %OP4734.MLOAD.contd
	mov	rcx, qword ptr [r15 + 16]
	mov	rax, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 24]
.LBB5_1750:                             # %OP4734.MLOAD.contd
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rax
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 16], r10
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], rdi
	sub	r9, rax
	sbb	rdi, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 8], rdi
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rbx], r9
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13], rax
.LBB5_2950:                             # %OP4906.MLOAD.contd
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
.LBB5_2932:                             # %OP8219.MLOAD.contd
	mov	rsi, rbx
.LBB5_2933:                             # %OP8219.MLOAD.contd
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	je	.LBB5_751
.LBB5_2909:                             # %select.false56779
	mov	eax, ecx
	jmp	.LBB5_751
.LBB5_2964:                             # %OP3194.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	r13, rsp
	add	r13, -32
	mov	rsp, r13
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r13
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1087
# %bb.2965:                             # %OP3195.MLOAD.contd
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rcx, qword ptr [r13 + 24]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1087
# %bb.2966:                             # %OP3199.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r8, qword ptr [rbx + 24]
	mov	rax, qword ptr [rbx + 16]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], r10
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13], r9
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 16], rax
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1083
# %bb.2967:                             # %OP3210.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_162] # xmm0 = [40,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rcx, qword ptr [r13 + 24]
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	mov	rdx, qword ptr [r13 + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 40
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1083
# %bb.2968:                             # %OP3213.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_163] # xmm0 = [22804,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_162] # xmm0 = [40,0]
	vmovdqu	ymmword ptr [rbx + 160], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	qword ptr [rbx + 184], rax
	mov	qword ptr [rbx + 176], rcx
	mov	qword ptr [rbx + 168], rsi
	mov	qword ptr [rbx + 160], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, r12
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1083
# %bb.2969:                             # %OP3220.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovdqu	ymm1, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rcx
	vmovdqu	ymmword ptr [r13], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rsp
	add	r14, -32
	mov	rsp, r14
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, r14
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1210
# %bb.2970:                             # %OP3226.MLOAD.contd
	mov	rcx, qword ptr [r14 + 16]
	mov	rax, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rax
	mov	qword ptr [r13 + 24], rsi
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13], rax
	mov	r11, qword ptr [rbx + 8]
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13], r9
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13 + 24], r8
	mov	qword ptr [r13 + 8], r11
	sub	r9, rax
	sbb	r11, rdx
	sbb	r10, rcx
	sbb	r8, rsi
	mov	qword ptr [r15], r9
	mov	qword ptr [r15 + 8], r11
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [rbx + 24], r8
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbx + 8], r11
	mov	qword ptr [rbx], r9
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15], rax
	mov	rdi, r12
	jmp	.LBB5_2932
.LBB5_2971:                             # %OP9872.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3074
# %bb.2972:                             # %OP9873.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	mov	rbx, r12
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], rax
	mov	qword ptr [r8 + rbx + 16], 0
	mov	qword ptr [r8 + rbx], 0
	mov	qword ptr [r8 + rbx + 8], 0
	mov	r14, r15
	shl	r14, 5
	mov	qword ptr [r8 + r14 + 16], rdx
	mov	qword ptr [r8 + r14], rdi
	mov	qword ptr [r8 + r14 + 24], rcx
	mov	qword ptr [r8 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3074
# %bb.2973:                             # %OP9877.PUSH1
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	rbx, r11
	lea	rax, [r15 + 1]
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	lea	r12, [r11 + r14]
	mov	r14, rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	r8, qword ptr [r13 + 24]
	mov	rax, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r10, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	rbx, r14
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r9
	mov	qword ptr [r11 + rbx + 8], rsi
	mov	qword ptr [r11 + rbx + 24], rcx
	mov	qword ptr [r11 + rbx + 16], rdx
	mov	qword ptr [r11 + rbx], rdi
	mov	qword ptr [r12 + 72], r10
	mov	qword ptr [r12 + 64], r9
	mov	qword ptr [r12 + 88], r8
	mov	qword ptr [r12 + 80], rax
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 72], rsi
	mov	qword ptr [r12 + 64], rdi
	sub	rsp, 32
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2978
# %bb.2974:                             # %OP9888.PUSH1
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_42] # xmm0 = [42,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 80], rdx
	mov	qword ptr [r12 + 88], rcx
	mov	qword ptr [r12 + 64], rdi
	mov	qword ptr [r12 + 72], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 42
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2978
# %bb.2975:                             # %OP9891.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_43] # xmm0 = [23122,0,0,0]
	vmovups	ymmword ptr [r12 + 64], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_42] # xmm0 = [42,0]
	vmovdqu	ymmword ptr [r12 + 96], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r12 + 120], rax
	mov	qword ptr [r12 + 112], rcx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdx
	mov	rdi, r13
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_2978
# %bb.2976:                             # %OP9898.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12]
	add	rsi, 64
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm1, xmmword ptr [r12 - 64]
	vmovaps	xmm2, xmmword ptr [r12 - 48]
	mov	qword ptr [r12 - 64], rsi
	mov	qword ptr [r12 - 56], rdx
	mov	qword ptr [r12 - 48], rcx
	mov	qword ptr [r12 - 40], rax
	vmovdqa	xmmword ptr [r12], xmm1
	vmovaps	xmmword ptr [r12 + 16], xmm2
	mov	r14, qword ptr [rbp - 104]      # 8-byte Reload
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r13
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3035
# %bb.2977:                             # %OP9904.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -64
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], rcx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rdx
	mov	r8, qword ptr [r12 - 56]
	mov	r9, qword ptr [r12 - 40]
	mov	r10, qword ptr [r12 - 64]
	mov	r11, qword ptr [r12 - 48]
	mov	qword ptr [r12 - 48], rax
	mov	qword ptr [r12 - 64], rdx
	mov	qword ptr [r12 - 40], rdi
	mov	qword ptr [r12 - 56], rcx
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12], r10
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], r8
	sub	r10, rdx
	sbb	r8, rcx
	sbb	r11, rax
	sbb	r9, rdi
	mov	qword ptr [r14], r10
	mov	qword ptr [r14 + 16], r11
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [r14 + 24], r9
	mov	qword ptr [r12 - 64], r10
	mov	qword ptr [r12 - 48], r11
	mov	qword ptr [r12 - 40], r9
	mov	qword ptr [r12 - 56], r8
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 16], rax
	mov	qword ptr [r12 - 8], rdi
	mov	qword ptr [r12 - 24], rcx
	mov	rdi, r13
	jmp	.LBB5_2933
.LBB5_2978:
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_2979:                             # %OP4211.PUSH1
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_751
# %bb.2980:                             # %OP4212.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rbx, r15
	inc	r15
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], rax
	mov	qword ptr [r8 + rbx + 16], 0
	mov	qword ptr [r8 + rbx], 0
	mov	qword ptr [r8 + rbx + 8], 0
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	je	.LBB5_2981
	jmp	.LBB5_751
.LBB5_2989:                             # %OP4163.PUSH1
	mov	qword ptr [rbp - 80], r14       # 8-byte Spill
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	add	r12, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	r13, r11
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_751
# %bb.2990:                             # %OP4164.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rbx, r14
	inc	r14
	mov	r15, rbx
	shl	r15, 5
	movabs	rax, 631482100863729664
	mov	qword ptr [r13 + r15 + 24], rax
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 16], rdx
	mov	qword ptr [r13 + r14], rdi
	mov	qword ptr [r13 + r14 + 24], rcx
	mov	qword ptr [r13 + r14 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.2991:                             # %OP4168.PUSH1
	mov	qword ptr [rbp - 104], r15      # 8-byte Spill
	add	r15, r13
	add	rbx, 2
	add	r14, r13
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r8, qword ptr [r12 + 24]
	mov	rax, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12]
	mov	r10, qword ptr [r12 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r14 + 24], r8
	mov	qword ptr [r14 + 8], r10
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], r9
	mov	qword ptr [r13 + rbx + 8], rsi
	mov	qword ptr [r13 + rbx + 24], rcx
	mov	qword ptr [r13 + rbx + 16], rdx
	mov	qword ptr [r13 + rbx], rdi
	mov	qword ptr [r15 + 104], r10
	mov	qword ptr [r15 + 96], r9
	mov	qword ptr [r15 + 120], r8
	mov	qword ptr [r15 + 112], rax
	vmovdqu	ymmword ptr [r13 + rbx], ymm0
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 104], rsi
	mov	qword ptr [r15 + 96], rdi
	sub	rsp, 32
	mov	r12, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.2992:                             # %OP4179.PUSH1
	add	rbx, r13
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r14 + 24]
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rdx, qword ptr [r14 + 16]
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	sub	rsp, 32
	mov	qword ptr [rsp + 16], r12
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.2993:                             # %OP4182.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_95] # xmm0 = [23300,0,0,0]
	vmovups	ymmword ptr [r15 + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [r15 + 128], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rsi
	mov	qword ptr [r15 + 128], rdx
	mov	rdi, r12
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	je	.LBB5_1909
	jmp	.LBB5_751
.LBB5_2994:                             # %OP8074.PUSH1
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.2995:                             # %OP8075.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rbx, r15
	inc	r15
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], rax
	mov	qword ptr [r8 + rbx + 16], 0
	mov	qword ptr [r8 + rbx], 0
	mov	qword ptr [r8 + rbx + 8], 0
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.2996:                             # %OP8079.PUSH1
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	lea	r12, [r11 + rbx]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 2
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [r14 + 24]
	mov	rax, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rbx
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r9
	mov	qword ptr [r11 + rbx + 8], rsi
	mov	qword ptr [r11 + rbx + 24], rcx
	mov	qword ptr [r11 + rbx + 16], rdx
	mov	qword ptr [r11 + rbx], rdi
	mov	qword ptr [r12 + 104], r10
	mov	qword ptr [r12 + 96], r9
	mov	qword ptr [r12 + 120], r8
	mov	qword ptr [r12 + 112], rax
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2419
# %bb.2997:                             # %OP8090.PUSH1
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_2419
# %bb.2998:                             # %OP8093.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_82] # xmm0 = [22407,0,0,0]
	vmovups	ymmword ptr [r12 + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [r12 + 128], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 128], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_2419
# %bb.2999:                             # %OP8100.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r12 - 32]
	mov	qword ptr [r12 - 8], rax
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	je	.LBB5_2985
.LBB5_3000:
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
.LBB5_3001:
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3002:                             # %OP7610.PUSH1
	add	r13, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.3003:                             # %OP7611.MLOAD.contd
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	r14, rax
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	r8, rax
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r8 + r12 + 16], rdx
	mov	qword ptr [r8 + r12], rdi
	mov	qword ptr [r8 + r12 + 24], rcx
	mov	qword ptr [r8 + r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
# %bb.3004:                             # %OP7615.PUSH1
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 2
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	r8, qword ptr [r13 + 24]
	mov	rax, qword ptr [r13 + 16]
	mov	r9, qword ptr [r13]
	mov	r10, qword ptr [r13 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r13], rdi
	mov	qword ptr [r13 + 16], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rcx
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r13, rbx
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [r11 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r9
	mov	qword ptr [r11 + rbx + 8], rsi
	mov	qword ptr [r11 + rbx + 24], rcx
	mov	qword ptr [r11 + rbx + 16], rdx
	mov	qword ptr [r11 + rbx], rdi
	mov	qword ptr [r14 + 104], r10
	mov	qword ptr [r14 + 96], r9
	mov	qword ptr [r14 + 120], r8
	mov	qword ptr [r14 + 112], rax
	vmovups	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 96], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3094
# %bb.3005:                             # %OP7626.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, rbx
	mov	rbx, rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_90] # xmm0 = [38,0]
	vmovups	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 104], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vxorps	xmm0, xmm0, xmm0
	vmovups	xmmword ptr [rsp], xmm0
	mov	r8d, 38
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_3094
# %bb.3006:                             # %OP7629.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_91] # xmm0 = [22485,0,0,0]
	vmovups	ymmword ptr [r14 + 96], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_90] # xmm0 = [38,0]
	vmovups	ymmword ptr [r14 + 128], ymm0
	vmovups	ymmword ptr [rbx], ymm0
	mov	qword ptr [r14 + 152], rax
	mov	qword ptr [r14 + 144], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 128], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_3094
# %bb.3007:                             # %OP7636.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r14 - 32]
	mov	qword ptr [r14 - 8], rax
	mov	qword ptr [r14 - 32], rdx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r14 - 16], rcx
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_3076
# %bb.3008:                             # %OP7642.MLOAD.contd
	lea	rsi, [r14 - 32]
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], rcx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14], rdx
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rcx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rdx
	mov	r8, qword ptr [r14 - 24]
	mov	r9, qword ptr [r14 - 8]
	mov	r10, qword ptr [r14 - 32]
	mov	r11, qword ptr [r14 - 16]
	mov	qword ptr [r14 - 16], rax
	mov	qword ptr [r14 - 32], rdx
	mov	qword ptr [r14 - 8], rdi
	mov	qword ptr [r14 - 24], rcx
	mov	qword ptr [r12], r10
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], r8
	sub	r10, rdx
	sbb	r8, rcx
	sbb	r11, rax
	sbb	r9, rdi
	mov	qword ptr [r14 - 32], r10
	mov	qword ptr [r14 - 24], r8
	mov	qword ptr [r14 - 16], r11
	mov	qword ptr [r14 - 8], r9
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rax
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], rcx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_3009
.LBB5_102:
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3010:                             # %OP3125.PUSH1
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	add	r14, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_142
# %bb.3011:                             # %OP3126.MLOAD.contd
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	rbx, r15
	inc	r15
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	shl	rbx, 5
	movabs	rax, 631482100863729664
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	qword ptr [r8 + rbx + 24], rax
	mov	qword ptr [r8 + rbx + 16], 0
	mov	qword ptr [r8 + rbx], 0
	mov	qword ptr [r8 + rbx + 8], 0
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r8 + r15 + 16], rdx
	mov	qword ptr [r8 + r15], rdi
	mov	qword ptr [r8 + r15 + 24], rcx
	mov	qword ptr [r8 + r15 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	r12
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_142
.LBB5_2981:                             # %OP4216.PUSH1
	mov	qword ptr [rbp - 104], rbx      # 8-byte Spill
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	lea	r12, [r11 + rbx]
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 2
	add	r15, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	r8, qword ptr [r14 + 24]
	mov	rax, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	r14, rbx
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r15 + 24], r8
	mov	qword ptr [r15 + 8], r10
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r9
	mov	qword ptr [r11 + rbx + 8], rsi
	mov	qword ptr [r11 + rbx + 24], rcx
	mov	qword ptr [r11 + rbx + 16], rdx
	mov	qword ptr [r11 + rbx], rdi
	mov	qword ptr [r12 + 104], r10
	mov	qword ptr [r12 + 96], r9
	mov	qword ptr [r12 + 120], r8
	mov	qword ptr [r12 + 112], rax
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 104], rsi
	mov	qword ptr [r12 + 96], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1443
# %bb.2982:                             # %OP4227.PUSH1
	add	rbx, qword ptr [rbp - 56]       # 8-byte Folded Reload
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rcx, qword ptr [r15 + 24]
	mov	rdi, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 16]
	mov	qword ptr [r12 + 112], rdx
	mov	qword ptr [r12 + 96], rdi
	mov	qword ptr [r12 + 120], rcx
	mov	qword ptr [r12 + 104], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 37
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1443
# %bb.2983:                             # %OP4230.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_95] # xmm0 = [23300,0,0,0]
	vmovups	ymmword ptr [r12 + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_81] # xmm0 = [37,0]
	vmovdqu	ymmword ptr [r12 + 128], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r12 + 152], rax
	mov	qword ptr [r12 + 144], rcx
	mov	qword ptr [r12 + 136], rsi
	mov	qword ptr [r12 + 128], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1443
.LBB5_2984:                             # %OP4237.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r12 - 32]
	mov	qword ptr [r12 - 8], rax
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 24], rsi
	mov	qword ptr [r12 - 16], rcx
	vmovdqu	ymmword ptr [r15], ymm1
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_1244
.LBB5_2985:                             # %OP3157.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	lea	rsi, [rax + rcx]
	add	rsi, -32
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rcx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rdx
	mov	r8, qword ptr [r12 - 24]
	mov	r9, qword ptr [r12 - 8]
	mov	r10, qword ptr [r12 - 32]
	mov	r11, qword ptr [r12 - 16]
	mov	qword ptr [r12 - 16], rax
	mov	qword ptr [r12 - 32], rdx
	mov	qword ptr [r12 - 8], rdi
	mov	qword ptr [r12 - 24], rcx
	mov	qword ptr [r15], r10
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 24], r9
	mov	qword ptr [r15 + 8], r8
	sub	r10, rdx
	sbb	r8, rcx
	sbb	r11, rax
	sbb	r9, rdi
	mov	qword ptr [r12 - 32], r10
	mov	qword ptr [r12 - 24], r8
	mov	qword ptr [r12 - 16], r11
	mov	qword ptr [r12 - 8], r9
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rcx
.LBB5_2986:                             # %OP3157.MLOAD.contd
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	edx, 16
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB5_2987
.LBB5_2988:                             # %select.end56604
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3012:
	mov	al, 88
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_3013:                             # %OP4657.PUSH1
	add	r14, r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, r12
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_751
# %bb.3014:                             # %OP4658.MLOAD.contd
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	r15, rax
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rcx + 1]
	mov	rdx, qword ptr [rbx + 16]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	r8, rax
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	movabs	rax, 631482100863729664
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r8 + r12 + 16], rdx
	mov	qword ptr [r8 + r12], rdi
	mov	qword ptr [r8 + r12 + 24], rcx
	mov	qword ptr [r8 + r12 + 8], rsi
	sub	rsp, 8
	xor	r8d, r8d
	xor	r9d, r9d
	push	qword ptr [rbp - 72]            # 8-byte Folded Reload
	push	rax
	push	0
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_751
# %bb.3015:                             # %OP4662.PUSH1
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rbx, 2
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	add	r12, r11
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_4] # xmm0 = [4,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	r8, qword ptr [r14 + 24]
	mov	rax, qword ptr [r14 + 16]
	mov	r9, qword ptr [r14]
	mov	r10, qword ptr [r14 + 8]
	mov	rdi, r9
	add	rdi, 4
	mov	rsi, r10
	adc	rsi, 0
	mov	rdx, rax
	adc	rdx, 0
	mov	rcx, r8
	adc	rcx, 0
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r15 + 16], rdx
	mov	qword ptr [r15], rdi
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	r14, rbx
	shl	rbx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	add	r9, 36
	adc	r10, 0
	adc	rax, 0
	adc	r8, 0
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], r9
	mov	qword ptr [r11 + rbx + 8], rsi
	mov	qword ptr [r11 + rbx + 24], rcx
	mov	qword ptr [r11 + rbx + 16], rdx
	mov	qword ptr [r11 + rbx], rdi
	mov	qword ptr [r15 + 104], r10
	mov	qword ptr [r15 + 96], r9
	mov	qword ptr [r15 + 120], r8
	mov	qword ptr [r15 + 112], rax
	vmovdqu	ymmword ptr [r11 + rbx], ymm0
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 104], rsi
	mov	qword ptr [r15 + 96], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1443
# %bb.3016:                             # %OP4673.PUSH1
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	add	rax, rbx
	mov	rbx, rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r15 + 112], rdx
	mov	qword ptr [r15 + 96], rdi
	mov	qword ptr [r15 + 120], rcx
	mov	qword ptr [r15 + 104], rsi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 41
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB5_1443
# %bb.3017:                             # %OP4676.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_32] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rsi
	vmovaps	xmm0, xmmword ptr [rip + .LCPI5_135] # xmm0 = [22176,0,0,0]
	vmovups	ymmword ptr [r15 + 96], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_134] # xmm0 = [41,0]
	vmovdqu	ymmword ptr [r15 + 128], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	qword ptr [r15 + 152], rax
	mov	qword ptr [r15 + 144], rcx
	mov	qword ptr [r15 + 136], rsi
	mov	qword ptr [r15 + 128], rdx
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_codecopy@PLT
	test	al, al
	jne	.LBB5_1443
# %bb.3018:                             # %OP4683.PUSH1
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI5_0] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 64
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovdqu	ymm1, ymmword ptr [r15 - 32]
	mov	qword ptr [r15 - 8], rax
	mov	qword ptr [r15 - 32], rdx
	mov	qword ptr [r15 - 24], rsi
	mov	qword ptr [r15 - 16], rcx
	vmovdqu	ymmword ptr [r12], ymm1
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB5_2380
# %bb.3019:                             # %OP4689.MLOAD.contd
	lea	rsi, [r15 - 32]
	mov	rax, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rdx
	mov	qword ptr [r12 + 24], rdi
	mov	qword ptr [r12 + 8], rcx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rdx
	mov	r8, qword ptr [r15 - 24]
	mov	r9, qword ptr [r15 - 8]
	mov	r10, qword ptr [r15 - 32]
	mov	r11, qword ptr [r15 - 16]
	mov	qword ptr [r15 - 16], rax
	mov	qword ptr [r15 - 32], rdx
	mov	qword ptr [r15 - 8], rdi
	mov	qword ptr [r15 - 24], rcx
	mov	qword ptr [r12], r10
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12 + 24], r9
	mov	qword ptr [r12 + 8], r8
	sub	r10, rdx
	sbb	r8, rcx
	sbb	r11, rax
	sbb	r9, rdi
	mov	qword ptr [r15 - 32], r10
	mov	qword ptr [r15 - 24], r8
	mov	qword ptr [r15 - 16], r11
	mov	qword ptr [r15 - 8], r9
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], rdi
	mov	qword ptr [r15 + 8], rcx
	jmp	.LBB5_2986
.LBB5_1039:
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1093:
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3031:                             # %OP9864.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	vmovdqu	ymmword ptr [r12 + 64], ymm0
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, rbx
	jmp	.LBB5_1911
.LBB5_3093:
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_371:
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3062:
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3033:                             # %resize.i50660
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r13
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_2818
	jmp	.LBB5_1051
.LBB5_3034:                             # %resize.i50675
	mov	esi, 64
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB5_2819
	jmp	.LBB5_3000
.LBB5_1210:
	mov	rcx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3035:
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1083:
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3037:
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3038:                             # %resize.i50781
	mov	r13, rcx
	mov	r12, r9
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_931
# %bb.3039:                             # %resize.i50781.OP7907.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdx, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, r12
	mov	rcx, r13
	jmp	.LBB5_2810
.LBB5_3040:                             # %resize.i50796
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 96
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2811
	jmp	.LBB5_3001
.LBB5_3041:                             # %resize.i50811
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, -1
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2812
	jmp	.LBB5_3043
.LBB5_3042:                             # %resize.i50826
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r13, r9
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, r13
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2813
.LBB5_3043:
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3056:
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3044:                             # %resize.i50691
	mov	r13, rdi
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_1151
# %bb.3045:                             # %resize.i50691.OP7794.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbx + 88]
	mov	qword ptr [rbp - 96], rax       # 8-byte Spill
	mov	rax, qword ptr [rbx + 80]
	mov	qword ptr [rbp - 112], rax      # 8-byte Spill
	mov	rax, qword ptr [rbx + 64]
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	rax, qword ptr [rbx + 72]
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rcx + 40]
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdi, r13
	jmp	.LBB5_2781
.LBB5_3046:                             # %resize.i50706
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r15, rdx
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, -1
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rdx, r15
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	test	al, al
	je	.LBB5_2782
	jmp	.LBB5_3048
.LBB5_3047:                             # %resize.i50721
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB5_2783
.LBB5_3048:
	mov	rcx, qword ptr [rbp - 176]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3050:
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3051:                             # %resize.i52012
	mov	esi, 32
	mov	rdi, r12
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	mov	qword ptr [rbp - 112], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 112]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2682
.LBB5_1191:
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3052:                             # %resize.i52027
	mov	esi, 64
	mov	rdi, r12
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 136]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2683
	jmp	.LBB5_1037
.LBB5_3053:                             # %resize.i52042
	mov	qword ptr [rbp - 176], r10      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 176]      # 8-byte Reload
	mov	r11, -1
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB5_2685
.LBB5_1134:
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3054:                             # %resize.i52057
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB5_2686
.LBB5_1037:
	mov	rcx, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1148:
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_886:                              # %select.false56457
	mov	eax, ecx
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3070:
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3094:
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_1171:
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3058:                             # %resize.i52150
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_2825
	jmp	.LBB5_142
.LBB5_3059:                             # %resize.i50750
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r14
	mov	qword ptr [rbp - 112], r8       # 8-byte Spill
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	mov	qword ptr [rbp - 136], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 112]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_2787
	jmp	.LBB5_3000
.LBB5_1124:
	mov	rcx, qword ptr [rbp - 168]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3060:
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	add	r10, 11
.LBB5_1051:
	mov	qword ptr [rbp - 48], r10       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3061:                             # %resize.i50736
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	mov	qword ptr [rbp - 112], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB5_2806
	jmp	.LBB5_2795
.LBB5_3076:
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3064:                             # %resize.i51937
	mov	r13, rsi
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_3103
# %bb.3065:                             # %resize.i51937.OP9797.MLOAD.contd_crit_edge
	mov	rsi, r13
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 16]
	mov	rdi, qword ptr [r13]
	mov	rcx, qword ptr [r13 + 8]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB5_2856
.LBB5_3066:                             # %select.false57582
	mov	eax, ecx
	jmp	.LBB5_2857
.LBB5_3086:
	mov	rcx, rbx
.LBB5_3087:
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1388:                             # %resize.i51953
	mov	r13, rdx
	mov	r12, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_931
# %bb.1389:                             # %resize.i51953.OP9816.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rax + 40]
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r10, r12
	mov	rdx, r13
	jmp	.LBB5_1376
.LBB5_1390:                             # %resize.i51968
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 96
	mov	qword ptr [rbp - 112], rdi      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_1377
	jmp	.LBB5_3001
.LBB5_1391:                             # %resize.i51983
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r8, -1
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_1378
	jmp	.LBB5_142
.LBB5_1392:                             # %resize.i51998
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB5_1379
	jmp	.LBB5_142
.LBB5_3067:                             # %resize.i52166
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB5_142
# %bb.3068:                             # %resize.i52166.OP10204.MLOAD.contd_crit_edge
	mov	rcx, qword ptr [rbx - 72]
	mov	rdx, qword ptr [rbx - 80]
	mov	r13, qword ptr [rbx - 96]
	mov	rax, qword ptr [rbx - 88]
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	jmp	.LBB5_2827
.LBB5_3071:                             # %return.loopexit52642.split.loop.exit53207
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB5_3082
.LBB5_3074:
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1254:
	add	r14, -3
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1264:                             # %select.false56248
	mov	eax, ecx
	jmp	.LBB5_1263
.LBB5_1255:                             # %select.false56242
	mov	eax, ecx
	jmp	.LBB5_1253
.LBB5_3075:
	mov	rcx, qword ptr [rbp - 192]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_931:
	mov	rcx, r13
.LBB5_1151:
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3080:
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3081:                             # %return.loopexit52642.split.loop.exit53120
	mov	rcx, r15
.LBB5_3082:                             # %return
	add	rcx, -2
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3083:
	mov	rcx, r15
.LBB5_3084:
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_1249:
	mov	rcx, rbx
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3088:                             # %return.loopexit52642.split.loop.exit53243
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, -3
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3089:
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_3090:                             # %select.false57618
	mov	eax, ecx
	jmp	.LBB5_2380
.LBB5_3092:                             # %return.loopexit55261
	mov	al, 89
	jmp	.LBB5_142
.LBB5_1912:                             # %select.false56593
	mov	eax, ecx
	jmp	.LBB5_1244
.LBB5_2419:
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	jmp	.LBB5_2884
.LBB5_2987:                             # %select.false56605
	mov	eax, ecx
	jmp	.LBB5_2988
.LBB5_1444:                             # %select.false56529
	mov	eax, ecx
	jmp	.LBB5_1443
.LBB5_2942:                             # %select.false56739
	mov	eax, ecx
	jmp	.LBB5_1958
.LBB5_2336:                             # %select.false57071
	mov	eax, ecx
	jmp	.LBB5_1087
.LBB5_3009:                             # %select.false57173
	mov	eax, ecx
	jmp	.LBB5_102
.LBB5_3096:
	mov	rcx, r12
.LBB5_3097:
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3098:
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	jmp	.LBB5_3001
.LBB5_3101:
	mov	rcx, r9
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB5_2884
.LBB5_3103:
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	add	r10, -3
	jmp	.LBB5_1051
.Lfunc_end5:
	.size	weth, .Lfunc_end5-weth
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI5_0:
	.long	.LBB5_353-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_159-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_1272-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_3092-.LJTI5_0
	.long	.LBB5_1274-.LJTI5_0
.LJTI5_1:
	.long	.LBB5_565-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_100-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_1282-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_3092-.LJTI5_1
	.long	.LBB5_1283-.LJTI5_1
.LJTI5_2:
	.long	.LBB5_712-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_1294-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_1295-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_3092-.LJTI5_2
	.long	.LBB5_1296-.LJTI5_2
.LJTI5_3:
	.long	.LBB5_382-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_578-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_1300-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_1305-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_3092-.LJTI5_3
	.long	.LBB5_1309-.LJTI5_3
.LJTI5_4:
	.long	.LBB5_1450-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_1451-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_2602-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_3092-.LJTI5_4
	.long	.LBB5_70-.LJTI5_4
.LJTI5_5:
	.long	.LBB5_2627-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_2557-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_2715-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_3092-.LJTI5_5
	.long	.LBB5_1643-.LJTI5_5
.LJTI5_6:
	.long	.LBB5_2587-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_2716-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_2607-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_2215-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_1568-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_3092-.LJTI5_6
	.long	.LBB5_1751-.LJTI5_6
.LJTI5_7:
	.long	.LBB5_547-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_2041-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_2727-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_3092-.LJTI5_7
	.long	.LBB5_2726-.LJTI5_7
.LJTI5_8:
	.long	.LBB5_2709-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_2638-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_1532-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_1603-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_2741-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_2823-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_3092-.LJTI5_8
	.long	.LBB5_2822-.LJTI5_8
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function other
.LCPI6_0:
	.long	96                              # 0x60
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_1:
	.long	64                              # 0x40
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_14:
	.quad	32                              # 0x20
	.quad	0                               # 0x0
.LCPI6_15:
	.long	1066                            # 0x42a
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_16:
	.quad	4                               # 0x4
	.quad	0                               # 0x0
.LCPI6_17:
	.quad	36                              # 0x24
	.quad	0                               # 0x0
.LCPI6_18:
	.long	68                              # 0x44
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_20:
	.long	944                             # 0x3b0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_21:
	.long	3035                            # 0xbdb
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_22:
	.long	256                             # 0x100
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_23:
	.long	757                             # 0x2f5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_24:
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_26:
	.long	31                              # 0x1f
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_27:
	.long	716                             # 0x2cc
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_28:
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_30:
	.long	633                             # 0x279
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_31:
	.quad	2                               # 0x2
	.quad	0                               # 0x0
.LCPI6_32:
	.long	612                             # 0x264
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_33:
	.long	553                             # 0x229
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_34:
	.long	100                             # 0x64
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_36:
	.long	436                             # 0x1b4
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_37:
	.long	391                             # 0x187
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_38:
	.long	204                             # 0xcc
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI6_39:
	.zero	16
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0
.LCPI6_2:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	6917529027641081856             # 0x6000000000000000
.LCPI6_3:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	117300739                       # 0x6fdde03
.LCPI6_4:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	157198259                       # 0x95ea7b3
.LCPI6_5:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	404098525                       # 0x18160ddd
.LCPI6_6:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	599290589                       # 0x23b872dd
.LCPI6_7:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	773487949                       # 0x2e1a7d4d
.LCPI6_8:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	826074471                       # 0x313ce567
.LCPI6_9:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	1889567281                      # 0x70a08231
.LCPI6_10:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2514000705                      # 0x95d89b41
.LCPI6_11:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	2835717307                      # 0xa9059cbb
.LCPI6_12:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3504541104                      # 0xd0e30db0
.LCPI6_13:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	3714247998                      # 0xdd62ed3e
.LCPI6_19:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	288230376151711744              # 0x400000000000000
.LCPI6_25:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	256                             # 0x100
.LCPI6_29:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	216172782113783808              # 0x300000000000000
.LCPI6_35:
	.quad	2951364421682967535             # 0x28f55a4df523b3ef
	.quad	-7697874482856943338            # 0x952ba7f163c4a116
	.quad	7620847484418887082             # 0x69c2b068fc378daa
	.quad	-2453807943512831845            # 0xddf252ad1be2c89b
.LCPI6_40:
	.zero	32
	.text
	.globl	other
	.p2align	4, 0x90
	.type	other,@function
other:                                  # @other
# %bb.0:                                # %entry
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 968
	mov	r13, rsi
	cmp	qword ptr [r9 + 32], 0
	mov	qword ptr [rbp - 56], r9        # 8-byte Spill
	mov	qword ptr [rbp - 112], rsi      # 8-byte Spill
	mov	qword ptr [rbp - 144], r8       # 8-byte Spill
	mov	qword ptr [rbp - 232], rdx      # 8-byte Spill
	je	.LBB6_7
.Ltmp20:                                # Block address taken
# %bb.1:                                # %OP1318.SWAP4
	mov	rax, qword ptr [rdx]
	mov	r11, rax
	shl	rax, 5
	mov	rdx, qword ptr [r13 + rax - 24]
	mov	rsi, qword ptr [r13 + rax - 32]
	mov	rcx, qword ptr [r13 + rax - 136]
	mov	rdi, qword ptr [r13 + rax - 144]
	mov	r8, qword ptr [r13 + rax - 160]
	mov	r10, qword ptr [r13 + rax - 152]
	mov	qword ptr [r13 + rax - 32], r8
	or	rsi, qword ptr [r13 + rax - 16]
	mov	qword ptr [r13 + rax - 16], rdi
	mov	qword ptr [r13 + rax - 24], r10
	or	rdx, qword ptr [r13 + rax - 8]
	mov	qword ptr [r13 + rax - 8], rcx
	add	r11, -5
	mov	rcx, r11
	mov	qword ptr [rbp - 48], r11       # 8-byte Spill
	shl	rcx, 5
	xor	edi, edi
	or	rdx, rsi
	setne	dil
	mov	qword ptr [r13 + rcx], rdi
	mov	qword ptr [r13 + rcx + 16], 0
	mov	qword ptr [r13 + rcx + 24], 0
	mov	qword ptr [r13 + rcx + 8], 0
	je	.LBB6_13
.LBB6_2:                                # %OP1330.JUMPDEST
	mov	rdx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	eax, dword ptr [rdx + 164]
	movbe	rcx, qword ptr [rdx + 156]
	bswap	rax
	shrd	rax, rcx, 32
	movbe	rdx, qword ptr [rdx + 148]
	shrd	rcx, rdx, 32
	shr	rdx, 32
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, r15
	shl	r14, 5
	mov	qword ptr [r13 + r14 + 16], rdx
	mov	qword ptr [r13 + r14 + 8], rcx
	mov	qword ptr [r13 + r14], rax
	mov	qword ptr [r13 + r14 + 24], 0
	movabs	rax, 853098840876558109
	mov	qword ptr [r13 + r14 + 48], rax
	movabs	rax, 9209671211807712987
	mov	qword ptr [r13 + r14 + 56], rax
	movabs	rax, 8244025330319760229
	mov	qword ptr [r13 + r14 + 32], rax
	movabs	rax, 3519572763231433663
	mov	qword ptr [r13 + r14 + 40], rax
	mov	rax, qword ptr [r13 + r14 - 32]
	mov	rcx, qword ptr [r13 + r14 - 24]
	mov	rdx, qword ptr [r13 + r14 - 8]
	mov	rsi, qword ptr [r13 + r14 - 16]
	mov	qword ptr [r13 + r14 + 80], rsi
	mov	qword ptr [r13 + r14 + 88], rdx
	mov	qword ptr [r13 + r14 + 64], rax
	mov	qword ptr [r13 + r14 + 72], rcx
	lea	r12, [r15 + 4]
	mov	qword ptr [r13 + r14 + 112], 0
	mov	qword ptr [r13 + r14 + 120], 0
	mov	qword ptr [r13 + r14 + 96], 64
	mov	qword ptr [r13 + r14 + 104], 0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	mov	r11, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	jne	.LBB6_484
# %bb.3:                                # %OP1337.MLOAD.contd
	mov	rsi, r14
	mov	rdi, r15
	add	rsi, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	r15, qword ptr [rbx]
	mov	r8, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [rsi + 112], rdx
	mov	qword ptr [rsi + 96], r15
	mov	qword ptr [rsi + 120], rcx
	mov	qword ptr [rsi + 104], r8
	lea	r9, [rdi + 5]
	mov	rdi, r12
	shl	rdi, 5
	mov	qword ptr [r13 + rdi + 16], rdx
	mov	qword ptr [r13 + rdi], r15
	mov	qword ptr [r13 + rdi + 24], rcx
	mov	qword ptr [r13 + rdi + 8], r8
	mov	r10, qword ptr [rsi + 64]
	mov	rax, qword ptr [rsi + 80]
	mov	r14, qword ptr [rsi + 72]
	mov	rbx, qword ptr [rsi + 88]
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	shl	r9, 5
	mov	qword ptr [rbp - 72], rbx       # 8-byte Spill
	mov	qword ptr [r13 + r9 + 24], rbx
	mov	qword ptr [rbp - 88], r14       # 8-byte Spill
	mov	qword ptr [r13 + r9 + 8], r14
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	qword ptr [r13 + r9], r10
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	qword ptr [r13 + r9 + 16], rax
	mov	qword ptr [rsi + 200], r8
	mov	qword ptr [rsi + 216], rcx
	mov	qword ptr [rsi + 208], rdx
	mov	qword ptr [rsi + 192], r15
	mov	r12, qword ptr [r11 + 40]
	mov	r10, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	r10, r14
	mov	rax, r15
	add	rax, 32
	mov	r11, -1
	cmovb	rax, r11
	xor	ebx, ebx
	neg	r8
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rbx, rcx
	cmovb	rax, r11
	lea	rbx, [rdi + r13]
	add	r13, r9
	cmp	rax, r10
	ja	.LBB6_32
.LBB6_4:                                # %OP1342.PUSH1
	add	r14, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r14], rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	r12, qword ptr [rbx + 8]
	add	rdx, 32
	adc	r12, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [rsi + 64]
	mov	qword ptr [rsi + 64], rdx
	mov	qword ptr [rsi + 72], r12
	mov	qword ptr [rsi + 80], rcx
	mov	qword ptr [rsi + 88], rax
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rsi + 96], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	r8, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	r8, r14
	cmp	r8, 95
	jbe	.LBB6_33
.LBB6_5:                                # %OP1348.MLOAD.contd
	mov	r11, qword ptr [r15 + 8]
	mov	r9, qword ptr [r11 + r14 + 88]
	mov	r8, qword ptr [r11 + r14 + 80]
	mov	r10, qword ptr [r11 + r14 + 64]
	mov	r11, qword ptr [r11 + r14 + 72]
	mov	r14, r10
	bswap	r14
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], r12
	mov	qword ptr [rbx + 24], rax
	mov	rbx, r9
	bswap	rbx
	sub	rdx, rbx
	mov	rbx, r8
	bswap	rbx
	sbb	r12, rbx
	mov	rbx, r11
	bswap	rbx
	sbb	rcx, rbx
	sbb	rax, r14
	mov	qword ptr [rsi + 64], rdx
	mov	qword ptr [rsi + 72], r12
	mov	qword ptr [rsi + 80], rcx
	mov	qword ptr [rsi + 88], rax
	movbe	qword ptr [rsi + 112], r11
	movbe	qword ptr [rsi + 96], r9
	movbe	qword ptr [rsi + 120], r10
	movbe	qword ptr [rsi + 104], r8
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_449
# %bb.6:                                # %OP1354.POP
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rdi, -2
	jmp	.LBB6_319
.LBB6_7:                                # %no_resume
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_0] # xmm0 = [96,0,0,0]
	vmovups	ymmword ptr [r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + 32], ymm0
	mov	rbx, qword ptr [r9 + 40]
	mov	rax, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rax, r14
	cmp	rax, 95
	jbe	.LBB6_35
.LBB6_8:                                # %OP3.PUSH1
	mov	rax, qword ptr [rbx + 8]
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI6_2] # ymm0 = [0,0,0,6917529027641081856]
	vmovdqu	ymmword ptr [rax + r14 + 64], ymm0
	mov	rax, qword ptr [r8 + 80]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 40], xmm0
	mov	qword ptr [r13 + 32], rax
	mov	qword ptr [r13 + 56], 0
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	xor	ecx, ecx
	mov	qword ptr [r13 + 24], 0
	mov	ebx, 183
	cmp	rax, 4
	setb	cl
	mov	qword ptr [r13], rcx
	jae	.LBB6_14
# %bb.9:
	xor	eax, eax
	xor	ecx, ecx
.LBB6_10:                               # %OP687.JUMPDEST.sink.split
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
.LBB6_11:                               # %OP687.JUMPDEST.sink.split
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
.LBB6_12:                               # %OP687.JUMPDEST.sink.split
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rdx + 1]
	shl	rdx, 5
	mov	qword ptr [r13 + rdx + 8], rax
	mov	qword ptr [r13 + rdx], rbx
	mov	qword ptr [r13 + rdx + 16], rax
	mov	qword ptr [r13 + rdx + 24], rax
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_309
.LBB6_13:                               # %OP1327.PUSH1
	lea	rdx, [rax + r13]
	lea	rsi, [rax + r13]
	add	rsi, -160
	add	rcx, r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rcx], ymm0
	vmovdqu	ymmword ptr [rdx - 128], ymm0
	mov	rdi, r9
	jmp	.LBB6_18
.LBB6_14:                               # %OP8.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	r9, qword ptr [r8 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 1008]
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	push	rax
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 984]
	shr	rax, 32
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 8], xmm0
	mov	qword ptr [r13], rax
	mov	qword ptr [r13 + 24], 0
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	xor	ecx, ecx
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI6_3] # ymm0 = [0,0,0,117300739]
	vmovdqu	ymmword ptr [r13 + 40], ymm0
	mov	edx, 1
	mov	qword ptr [rbp - 48], rdx       # 8-byte Spill
	cmp	rax, 117300739
	sete	cl
	mov	qword ptr [r13 + 32], rcx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jne	.LBB6_20
.LBB6_15:                               # %OP76.JUMPDEST
	mov	rsi, qword ptr [rbp - 144]      # 8-byte Reload
	mov	rcx, qword ptr [rsi + 96]
	mov	rdx, qword ptr [rsi + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [rsi + 120]
	or	rcx, qword ptr [rsi + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_37
	jmp	.LBB6_16
.LBB6_20:                               # %OP20.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	xor	ecx, ecx
	cmp	rax, 157198259
	sete	cl
	vmovaps	ymm1, ymmword ptr [rip + .LCPI6_4] # ymm1 = [0,0,0,157198259]
	vmovups	ymmword ptr [r13 + 40], ymm1
	mov	qword ptr [r13 + 32], rcx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, 157198259
	je	.LBB6_104
# %bb.21:                               # %OP25.DUP1
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	xor	ecx, ecx
	cmp	rax, 404098525
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI6_5] # ymm0 = [0,0,0,404098525]
	vmovdqu	ymmword ptr [r13 + 40], ymm0
	mov	qword ptr [r13 + 32], rcx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, 404098525
	je	.LBB6_391
# %bb.22:                               # %OP30.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	xor	ecx, ecx
	cmp	rax, 599290589
	sete	cl
	vmovaps	ymm1, ymmword ptr [rip + .LCPI6_6] # ymm1 = [0,0,0,599290589]
	vmovups	ymmword ptr [r13 + 40], ymm1
	mov	qword ptr [r13 + 32], rcx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, 599290589
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
	je	.LBB6_142
# %bb.23:                               # %OP35.DUP1
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	xor	ecx, ecx
	cmp	rax, 773487949
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI6_7] # ymm0 = [0,0,0,773487949]
	vmovdqu	ymmword ptr [r13 + 40], ymm0
	mov	qword ptr [r13 + 32], rcx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, 773487949
	je	.LBB6_225
# %bb.24:                               # %OP40.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	xor	ecx, ecx
	cmp	rax, 826074471
	sete	cl
	vmovaps	ymm1, ymmword ptr [rip + .LCPI6_8] # ymm1 = [0,0,0,826074471]
	vmovups	ymmword ptr [r13 + 40], ymm1
	mov	qword ptr [r13 + 32], rcx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, 826074471
	je	.LBB6_229
# %bb.25:                               # %OP45.DUP1
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	xor	ecx, ecx
	cmp	rax, 1889567281
	sete	cl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI6_9] # ymm0 = [0,0,0,1889567281]
	vmovdqu	ymmword ptr [r13 + 40], ymm0
	mov	qword ptr [r13 + 32], rcx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, 1889567281
	je	.LBB6_244
# %bb.26:                               # %OP50.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	mov	ecx, 2514000705
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovaps	ymm1, ymmword ptr [rip + .LCPI6_10] # ymm1 = [0,0,0,2514000705]
	vmovups	ymmword ptr [r13 + 40], ymm1
	mov	qword ptr [r13 + 32], rdx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, -1780966591
	je	.LBB6_261
# %bb.27:                               # %OP55.DUP1
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	mov	ecx, 2835717307
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI6_11] # ymm0 = [0,0,0,2835717307]
	vmovdqu	ymmword ptr [r13 + 40], ymm0
	mov	qword ptr [r13 + 32], rdx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, -1459249989
	je	.LBB6_281
# %bb.28:                               # %OP60.DUP1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	mov	ecx, 3504541104
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovaps	ymm1, ymmword ptr [rip + .LCPI6_12] # ymm1 = [0,0,0,3504541104]
	vmovups	ymmword ptr [r13 + 40], ymm1
	mov	qword ptr [r13 + 32], rdx
	cmp	eax, -790426192
	jne	.LBB6_30
# %bb.29:
	xor	eax, eax
	mov	ebx, 978
	mov	ecx, 1
	jmp	.LBB6_10
.LBB6_30:                               # %OP65.DUP1
	vmovdqu	xmmword ptr [r13 + 72], xmm0
	mov	qword ptr [r13 + 88], 0
	mov	ecx, 3714247998
	xor	edx, edx
	cmp	rax, rcx
	sete	dl
	vmovdqa	ymm0, ymmword ptr [rip + .LCPI6_13] # ymm0 = [0,0,0,3714247998]
	vmovdqu	ymmword ptr [r13 + 40], ymm0
	mov	qword ptr [r13 + 32], rdx
	mov	ecx, 1
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	cmp	eax, -580719298
	je	.LBB6_289
# %bb.31:
	xor	eax, eax
	jmp	.LBB6_11
.LBB6_32:                               # %resize.i8060
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	rsi, rax
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	test	al, al
	je	.LBB6_4
	jmp	.LBB6_92
.LBB6_33:                               # %resize.i8076
	mov	r12, rsi
	mov	esi, 96
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_479
# %bb.34:                               # %resize.i8076.OP1348.MLOAD.contd_crit_edge
	mov	rsi, r12
	mov	rax, qword ptr [r12 + 88]
	mov	rcx, qword ptr [r12 + 80]
	mov	rdx, qword ptr [r12 + 64]
	mov	r12, qword ptr [r12 + 72]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB6_5
.LBB6_35:                               # %resize.i
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
	test	al, al
	je	.LBB6_8
# %bb.36:
	xor	ecx, ecx
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_16:                               # %OP81.PUSH1
	add	r13, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + 32], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, r14
.LBB6_17:                               # %OP81.PUSH1
	mov	rsi, r13
.LBB6_18:                               # %OP81.PUSH1
	mov	edx, 16
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 16
	test	cl, cl
	jne	.LBB6_19
.LBB6_449:                              # %return
	mov	rcx, qword ptr [rbp - 232]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rcx], rdx
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB6_19:                               # %select.false
	mov	eax, ecx
	jmp	.LBB6_449
.LBB6_37:                               # %OP84.JUMPDEST
	mov	rcx, r14
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rdx + 1]
	shl	rdx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_38] # xmm0 = [204,0,0,0]
	vmovdqu	ymmword ptr [r13 + rdx], ymm0
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
.LBB6_38:                               # %OP743.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, rbx
	shl	r12, 5
	lea	r14, [rbx + 2]
	lea	r15, [r12 + r13]
	add	r15, 32
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + r12 + 32], ymm0
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	mov	rdi, rcx
	mov	rsi, r15
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_455
# %bb.39:                               # %OP747.PUSH1
	add	r12, r13
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	lea	rdi, [rbx + 3]
	shl	r14, 5
	lea	r11, [r14 + r13]
	lea	r8, [rbx + 4]
	mov	rsi, qword ptr [r15]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	shl	rdi, 5
	lea	r10, [rdi + r13]
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	shl	r8, 5
	mov	r9d, esi
	not	r9d
	and	r9d, 1
	shl	r9d, 8
	xor	eax, eax
	add	r9, -1
	mov	ecx, 0
	adc	rcx, -1
	mov	edx, 0
	adc	rdx, -1
	adc	rax, -1
	and	r9, rsi
	and	rax, qword ptr [r15 + 24]
	and	rcx, qword ptr [r15 + 8]
	and	rdx, qword ptr [r15 + 16]
	mov	rsi, rax
	shld	rsi, rdx, 63
	shld	rdx, rcx, 63
	shld	rcx, r9, 63
	shr	rax
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 24], rax
	add	rcx, 31
	adc	rdx, 0
	adc	rsi, 0
	adc	rax, 0
	mov	qword ptr [r13 + r8 + 16], rsi
	mov	qword ptr [r13 + r8], rcx
	mov	qword ptr [r13 + r8 + 8], rdx
	mov	qword ptr [r13 + r8 + 24], rax
	and	rcx, -32
	add	rcx, 32
	adc	rdx, 0
	adc	rsi, 0
	adc	rax, 0
	mov	qword ptr [r13 + r14], rcx
	mov	qword ptr [r13 + r14 + 16], rsi
	mov	qword ptr [r13 + r14 + 8], rdx
	mov	qword ptr [r13 + r14 + 24], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + rdi], ymm0
	add	r8, r13
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rdi + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rdi, r14
	mov	r9, rbx
	cmp	rdi, 95
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	jbe	.LBB6_64
.LBB6_40:                               # %OP770.MLOAD.contd
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	rdi, qword ptr [rbx + 8]
	mov	r15, qword ptr [rdi + r14 + 88]
	mov	rbx, qword ptr [rdi + r14 + 80]
	mov	r13, qword ptr [rdi + r14 + 64]
	mov	r14, qword ptr [rdi + r14 + 72]
	movbe	qword ptr [r11], r15
	bswap	r15
	movbe	qword ptr [r11 + 16], r14
	bswap	r14
	movbe	qword ptr [r11 + 24], r13
	bswap	r13
	movbe	qword ptr [r11 + 8], rbx
	bswap	rbx
	add	r15, rcx
	adc	rbx, rdx
	adc	r14, rsi
	adc	r13, rax
	mov	qword ptr [r10], r15
	mov	qword ptr [r10 + 16], r14
	mov	qword ptr [r10 + 8], rbx
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	mov	qword ptr [r10 + 24], r13
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r12, qword ptr [r9 + 48]
	sub	rax, r12
	cmp	rax, 95
	jbe	.LBB6_91
.LBB6_41:                               # %OP776.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r12 + 88], r15
	movbe	qword ptr [rax + r12 + 80], rbx
	movbe	qword ptr [rax + r12 + 72], r14
	movbe	qword ptr [rax + r12 + 64], r13
	mov	rdx, qword ptr [r11 + 16]
	mov	rcx, qword ptr [r11 + 24]
	mov	r15, qword ptr [r11]
	mov	rsi, qword ptr [r11 + 8]
	mov	rbx, r11
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rax, qword ptr [r11 + 16]
	mov	rdi, qword ptr [r11]
	mov	r8, qword ptr [r11 + 8]
	mov	r9, qword ptr [r11 + 24]
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11], r15
	mov	qword ptr [r11 + 16], rdx
	mov	r13, qword ptr [r11 + 32]
	mov	r14, qword ptr [r11 + 48]
	mov	r10, qword ptr [r11 + 40]
	mov	r12, qword ptr [r11 + 56]
	mov	qword ptr [r11 + 56], r9
	mov	qword ptr [r11 + 40], r8
	mov	qword ptr [r11 + 48], rax
	mov	qword ptr [r11 + 32], rdi
	mov	qword ptr [rbx + 24], r12
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r14
	mov	qword ptr [rbx], r13
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], r15
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	mov	qword ptr [rax + 24], r12
	mov	qword ptr [rbp - 96], r14       # 8-byte Spill
	mov	qword ptr [rax + 16], r14
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	mov	qword ptr [rax + 8], r10
	mov	r12, r13
	mov	qword ptr [rax], r13
	mov	qword ptr [r11 + 184], rcx
	mov	qword ptr [r11 + 176], rdx
	mov	qword ptr [r11 + 168], rsi
	mov	qword ptr [r11 + 160], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rax + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rdi, rbx
	mov	rax, r15
	add	rax, 32
	mov	r8, -1
	cmovb	rax, r8
	xor	r9d, r9d
	neg	rsi
	mov	esi, 0
	sbb	rsi, rdx
	sbb	r9, rcx
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rcx + 6]
	mov	qword ptr [rbp - 168], rcx      # 8-byte Spill
	cmovb	rax, r8
	lea	rsi, [r11 + 160]
	cmp	rax, rdi
	ja	.LBB6_66
.LBB6_42:                               # %OP783.PUSH1
	add	rbx, qword ptr [r14 + 8]
	movbe	qword ptr [r15 + rbx + 24], r12
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	add	qword ptr [rax], 32
	adc	qword ptr [rax + 8], 0
	adc	qword ptr [rax + 16], 0
	adc	qword ptr [rax + 24], 0
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rdi + 8]
	mov	rcx, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rdi + 16]
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	mov	qword ptr [r8 + 16], rdi
	mov	qword ptr [r8], rdx
	mov	qword ptr [r8 + 24], rcx
	mov	qword ptr [r8 + 8], rax
	mov	qword ptr [rsi + 16], rdi
	mov	qword ptr [rsi], rdx
	mov	qword ptr [rsi + 8], rax
	mov	qword ptr [rsi + 24], rcx
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_122
# %bb.43:                               # %OP788.PUSH1
	mov	r11, qword ptr [rbp - 168]      # 8-byte Reload
	mov	r15, r11
	shl	r15, 5
	mov	rbx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rbx + 160]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 264], xmm0
	mov	qword ptr [rbx + 280], 0
	mov	eax, edi
	not	eax
	and	eax, 1
	shl	eax, 8
	vmovaps	ymm1, ymmword ptr [rip + .LCPI6_25] # ymm1 = [0,0,0,256]
	vmovups	ymmword ptr [rbx + 232], ymm1
	mov	qword ptr [rbx + 224], rax
	xor	ecx, ecx
	add	rax, -1
	mov	edx, 0
	adc	rdx, -1
	mov	esi, 0
	adc	rsi, -1
	adc	rcx, -1
	and	rax, rdi
	and	rdx, qword ptr [rbx + 168]
	and	rsi, qword ptr [rbx + 176]
	and	rcx, qword ptr [rbx + 184]
	mov	rdi, rcx
	shld	rdi, rsi, 63
	mov	r8, rsi
	shld	r8, rdx, 63
	mov	r9, rdx
	shld	r9, rax, 63
	mov	r10, rcx
	shr	r10
	mov	qword ptr [rbx + 160], r9
	mov	qword ptr [rbx + 168], r8
	mov	qword ptr [rbx + 184], r10
	mov	qword ptr [rbx + 176], rdi
	cmp	rax, 2
	mov	rdi, rdx
	sbb	rdi, 0
	mov	rdi, rsi
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	vmovdqu	xmmword ptr [r13 + r15 + 8], xmm0
	mov	qword ptr [r13 + r15], rdi
	mov	qword ptr [r13 + r15 + 24], 0
	jb	.LBB6_429
# %bb.44:                               # %OP804.DUP1
	add	r15, r13
	vmovaps	xmm1, xmmword ptr [rip + .LCPI6_26] # xmm1 = [31,0,0,0]
	vmovups	ymmword ptr [rbx + 224], ymm1
	xor	edi, edi
	mov	r8d, 63
	cmp	r8, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	eax, 0
	sbb	rax, rsi
	sbb	rdi, rcx
	setb	al
	movzx	eax, al
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 24], 0
	jae	.LBB6_53
# %bb.45:
	mov	qword ptr [rbp - 48], r11       # 8-byte Spill
.LBB6_46:                               # %OP823.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rsi
	shl	rax, 5
	lea	rbx, [rax + r13]
	mov	rdi, qword ptr [r13 + rax - 80]
	mov	rdx, qword ptr [r13 + rax - 96]
	mov	rcx, qword ptr [r13 + rax - 88]
	dec	rsi
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	shl	rsi, 5
	mov	r8, qword ptr [r13 + rsi]
	add	r8, rdx
	mov	r9, qword ptr [r13 + rsi + 8]
	adc	r9, rcx
	mov	r10, qword ptr [r13 + rsi + 16]
	adc	r10, rdi
	mov	r11, qword ptr [r13 + rsi + 24]
	mov	qword ptr [r13 + rax - 80], r10
	mov	r10, qword ptr [r13 + rax - 72]
	lea	rsi, [r13 + rsi]
	mov	qword ptr [rbp - 64], rsi       # 8-byte Spill
	adc	r11, r10
	mov	qword ptr [r13 + rax - 96], r8
	lea	rsi, [rax + r13]
	add	rsi, -32
	mov	qword ptr [r13 + rax - 72], r11
	mov	qword ptr [r13 + rax - 88], r9
	mov	r8, qword ptr [r13 + rax - 56]
	mov	r9, qword ptr [r13 + rax - 48]
	mov	qword ptr [r13 + rax - 48], rdi
	mov	r15, qword ptr [r13 + rax - 64]
	mov	qword ptr [r13 + rax - 64], rdx
	mov	rdx, qword ptr [r13 + rax - 40]
	mov	qword ptr [r13 + rax - 40], r10
	mov	qword ptr [r13 + rax - 56], rcx
	mov	qword ptr [r13 + rax - 16], r9
	mov	qword ptr [r13 + rax - 32], r15
	mov	qword ptr [r13 + rax - 8], rdx
	mov	qword ptr [r13 + rax - 24], r8
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [r14 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	cmp	rax, 31
	jbe	.LBB6_81
.LBB6_47:                               # %OP830.PUSH1
	mov	rax, qword ptr [r13 + 8]
	movbe	qword ptr [rax + r12 + 24], r15
	movbe	qword ptr [rax + r12 + 16], r8
	movbe	qword ptr [rax + r12 + 8], r9
	movbe	qword ptr [rax + r12], rdx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rbx], ymm0
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_449
# %bb.48:                               # %OP833.SWAP1
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 16]
	vmovdqa	xmm0, xmmword ptr [rbx - 64]
	vmovaps	xmm1, xmmword ptr [rbx - 48]
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 40], rax
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 56], rdx
	vmovaps	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
.LBB6_49:                               # %OP834.JUMPDEST.preheader
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdi, [rbx + 1]
	shl	rbx, 5
	add	rbx, r13
	mov	qword ptr [rbp - 64], rdi       # 8-byte Spill
	mov	r15, rdi
	shl	r15, 5
	add	r15, r13
	.p2align	4, 0x90
.LBB6_50:                               # %OP834.JUMPDEST
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_211
# %bb.51:                               # %OP837.DUP2
                                        #   in Loop: Header=BB6_50 Depth=1
	mov	rax, qword ptr [rbx - 16]
	mov	r13, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 8]
	mov	qword ptr [r15 + 24], rdx
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r13
	mov	r9, qword ptr [rbx + 8]
	mov	r14, qword ptr [r14 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rdi, r12
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	mov	rcx, qword ptr [rbx + 24]
	mov	eax, 0
	sbb	rax, rdx
	mov	r10, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB6_448
.LBB6_52:                               # %OP839.SWAP1
                                        #   in Loop: Header=BB6_50 Depth=1
	add	r12, qword ptr [r14 + 8]
	movbe	qword ptr [r13 + r12 + 24], r10
	movbe	qword ptr [r13 + r12 + 16], r9
	movbe	qword ptr [r13 + r12 + 8], rdx
	movbe	qword ptr [r13 + r12], rcx
	mov	r9, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 16]
	mov	r11, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 40]
	mov	rcx, qword ptr [rbx - 48]
	mov	rdx, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 64]
	add	rsi, 1
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 40], rax
	mov	r10, rdi
	add	r10, 32
	adc	r11, 0
	adc	r13, 0
	adc	r9, 0
	mov	qword ptr [rbx - 32], r10
	mov	qword ptr [rbx - 16], r13
	mov	qword ptr [rbx - 24], r11
	mov	qword ptr [rbx - 8], r9
	mov	r8, qword ptr [rbx - 96]
	cmp	r10, r8
	mov	r10, qword ptr [rbx - 88]
	sbb	r11, r10
	mov	r11, qword ptr [rbx - 80]
	sbb	r13, r11
	mov	r13, qword ptr [rbx - 72]
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 24], r13
	mov	qword ptr [r15 + 8], r10
	sbb	r9, r13
	setb	r9b
	movzx	r9d, r9b
	mov	qword ptr [rbx], r9
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jb	.LBB6_50
	jmp	.LBB6_410
.LBB6_448:                              # %resize.i7529
                                        #   in Loop: Header=BB6_50 Depth=1
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB6_52
	jmp	.LBB6_449
.LBB6_53:                               # %OP809.PUSH2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_22] # xmm0 = [256,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	lea	rsi, [rbx + 256]
	vmovups	ymmword ptr [rbx + 224], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx + 128]
	vmovdqu	ymmword ptr [rbx + 256], ymm0
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_472
# %bb.54:                               # %OP813.DIV_udiv-special-cases
	mov	r14, qword ptr [rbx + 264]
	mov	rdi, qword ptr [rbx + 280]
	mov	r11, qword ptr [rbx + 256]
	mov	r13, qword ptr [rbx + 272]
	mov	rsi, qword ptr [rbx + 248]
	mov	r8, qword ptr [rbx + 224]
	mov	r10, qword ptr [rbx + 232]
	mov	r9, qword ptr [rbx + 240]
	mov	rax, r10
	or	rax, rsi
	mov	rcx, r8
	or	rcx, r9
	or	rcx, rax
	sete	al
	mov	rcx, r14
	or	rcx, rdi
	mov	rdx, r11
	mov	rbx, r11
	or	rdx, r13
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, rsi
	lzcnt	rdx, r9
	add	rdx, 64
	test	rsi, rsi
	cmovne	rdx, rax
	lzcnt	rax, r10
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	lzcnt	r11, r8
	add	r11, 64
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	test	r10, r10
	cmovne	r11, rax
	sub	r11, -128
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	mov	rax, r9
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	or	rax, rsi
	cmovne	r11, rdx
	lzcnt	rax, rdi
	lzcnt	rdx, r13
	add	rdx, 64
	test	rdi, rdi
	cmovne	rdx, rax
	lzcnt	rax, r14
	lzcnt	rsi, rbx
	add	rsi, 64
	test	r14, r14
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r13
	or	rax, rdi
	cmovne	rsi, rdx
	xor	r12d, r12d
	sub	r11, rsi
	mov	edx, 0
	sbb	rdx, rdx
	mov	r9d, 0
	sbb	r9, r9
	mov	r10d, 0
	sbb	r10, r10
	mov	esi, 255
	cmp	rsi, r11
	mov	esi, 0
	sbb	rsi, rdx
	mov	esi, 0
	sbb	rsi, r9
	mov	esi, 0
	sbb	rsi, r10
	setb	sil
	or	sil, cl
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmovne	rdi, r12
	mov	r8, rdi
	mov	qword ptr [rbp - 64], r13       # 8-byte Spill
	mov	rsi, r13
	mov	r13, rbx
	cmovne	rsi, r12
	mov	rbx, r14
	cmovne	r14, r12
	mov	rax, r14
	cmove	r12, r13
	jne	.LBB6_417
# %bb.55:                               # %OP813.DIV_udiv-special-cases
	mov	rcx, r11
	xor	rcx, 255
	or	rcx, r9
	mov	rdi, rdx
	or	rdi, r10
	or	rdi, rcx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB6_61
# %bb.56:                               # %udiv-bb18885
	mov	qword ptr [rbp - 184], r15      # 8-byte Spill
	mov	rax, r11
	add	r11, 1
	mov	qword ptr [rbp - 48], r11       # 8-byte Spill
	adc	rdx, 0
	adc	r9, 0
	adc	r10, 0
	mov	qword ptr [rbp - 464], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 496], ymm0
	mov	r12, rbx
	mov	qword ptr [rbp - 456], rbx
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 448], rbx
	mov	qword ptr [rbp - 136], r13      # 8-byte Spill
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 440], r13
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	r11, rdx
	mov	rdx, qword ptr [rbp + rax - 448]
	mov	r8, qword ptr [rbp + rax - 440]
	shld	r8, rdx, cl
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 464]
	mov	r14, qword ptr [rbp + rax - 456]
	mov	rax, r14
	shr	rax
	shrx	rsi, rax, rsi
	shld	r14, rdi, cl
	mov	qword ptr [rbp - 200], r14      # 8-byte Spill
	or	rsi, rdx
	mov	qword ptr [rbp - 216], r11      # 8-byte Spill
	mov	rax, r11
	mov	r11, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 208], r10      # 8-byte Spill
	or	rax, r10
	mov	rdx, r11
	or	rdx, r9
	xor	r14d, r14d
	or	rdx, rax
	shlx	rdx, rdi, rcx
	je	.LBB6_59
# %bb.57:                               # %udiv-preheader8884
	mov	r15, r9
	vmovdqu	ymmword ptr [rbp - 400], ymm0
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbp - 432], rax
	mov	qword ptr [rbp - 424], r12
	mov	qword ptr [rbp - 416], rbx
	mov	qword ptr [rbp - 408], r13
	mov	ecx, r11d
	and	cl, 7
	mov	rax, rdx
	mov	edx, r11d
	shr	dl, 3
	movzx	edx, dl
	mov	rdi, qword ptr [rbp + rdx - 408]
	mov	r9, qword ptr [rbp + rdx - 416]
	mov	qword ptr [rbp - 64], r15       # 8-byte Spill
	mov	r15, r9
	shrd	r15, rdi, cl
	mov	r12, qword ptr [rbp + rdx - 432]
	mov	rdx, qword ptr [rbp + rdx - 424]
	shrx	r14, rdx, rcx
	shrx	rbx, rdi, rcx
	mov	edi, ecx
	not	dil
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rdx, cl
	mov	rdx, rax
	add	r9, r9
	shlx	rcx, r9, rdi
	or	rcx, r14
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 160], rax      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	adc	rdi, -1
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	xor	edi, edi
	mov	qword ptr [rbp - 192], rdi      # 8-byte Spill
	xor	r14d, r14d
	xor	r13d, r13d
	xor	r9d, r9d
	xor	edi, edi
	mov	r11, qword ptr [rbp - 216]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 208]      # 8-byte Reload
	mov	rax, qword ptr [rbp - 200]      # 8-byte Reload
	.p2align	4, 0x90
.LBB6_58:                               # %udiv-do-while8883
                                        # =>This Inner Loop Header: Depth=1
	shld	rbx, r15, 1
	shld	r15, rcx, 1
	shld	rcx, r12, 1
	shld	r12, r8, 1
	shld	r8, rsi, 1
	or	r8, rdi
	shld	rsi, rax, 1
	or	rsi, r9
	shld	rax, rdx, 1
	or	rax, r13
	add	rdx, rdx
	or	rdx, r14
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	cmp	qword ptr [rbp - 136], r12      # 8-byte Folded Reload
	mov	rdi, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	rdi, rcx
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	sbb	rdi, r15
	mov	rdi, qword ptr [rbp - 176]      # 8-byte Reload
	sbb	rdi, rbx
	sar	rdi, 63
	mov	r14d, edi
	and	r14d, 1
	mov	r9, rdi
	and	r9, qword ptr [rbp - 104]       # 8-byte Folded Reload
	mov	r13, rdi
	and	r13, qword ptr [rbp - 128]      # 8-byte Folded Reload
	mov	rdx, rdi
	and	rdx, qword ptr [rbp - 96]       # 8-byte Folded Reload
	and	rdi, qword ptr [rbp - 120]      # 8-byte Folded Reload
	sub	r12, rdi
	sbb	rcx, rdx
	sbb	r15, r13
	sbb	rbx, r9
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rdi, -1
	adc	r11, -1
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	adc	r9, -1
	adc	r10, -1
	mov	rdx, r11
	or	rdx, r10
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	qword ptr [rbp - 64], r9        # 8-byte Spill
	or	rdi, r9
	or	rdi, rdx
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r13d, 0
	mov	r9d, 0
	mov	edi, 0
	jne	.LBB6_58
	jmp	.LBB6_60
.LBB6_64:                               # %resize.i7455
	mov	r13, r11
	mov	r12, r15
	mov	r15, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_474
# %bb.65:                               # %resize.i7455.OP770.MLOAD.contd_crit_edge
	mov	r11, r13
	mov	rax, qword ptr [r13 + 24]
	mov	rsi, qword ptr [r13 + 16]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r10, r15
	mov	r15, r12
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	jmp	.LBB6_40
.LBB6_91:                               # %resize.i7470
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	test	al, al
	je	.LBB6_41
	jmp	.LBB6_92
.LBB6_66:                               # %resize.i7485
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	mov	rsi, rax
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB6_42
	jmp	.LBB6_474
.LBB6_81:                               # %resize.i7514
	mov	qword ptr [rbp - 72], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r14
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	qword ptr [rbp - 104], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB6_47
	jmp	.LBB6_82
.LBB6_59:
	xor	eax, eax
	mov	qword ptr [rbp - 192], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 200]      # 8-byte Reload
.LBB6_60:                               # %udiv-loop-exit8882
	shld	r8, rsi, 1
	mov	rcx, qword ptr [rbp - 192]      # 8-byte Reload
	or	r8, rcx
	shld	rsi, rax, 1
	or	rsi, rcx
	shld	rax, rdx, 1
	or	rax, rcx
	add	rdx, rdx
	or	rdx, r14
	mov	r12, rdx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rbp - 184]      # 8-byte Reload
.LBB6_61:                               # %udiv-end8881
	mov	rdi, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 16]
	mov	r11, qword ptr [r15 + 24]
	imul	r11, r12
	mov	rdx, r12
	mulx	rdx, rbx, r9
	mov	r10, rax
	imul	r9, rax
	add	r9, rdx
	add	r9, r11
	mov	r11, rsi
	mov	rdx, rsi
	mulx	rdx, rsi, rdi
	imul	r11, rcx
	imul	r8, rdi
	add	r8, r11
	add	r8, rdx
	add	rsi, rbx
	adc	r8, r9
	mov	rdx, rdi
	mulx	r9, rbx, r12
	mov	rdx, rcx
	mulx	r11, rax, r12
	add	rax, r9
	adc	r11, 0
	mov	rdx, rdi
	mulx	rdi, rdx, r10
	add	rdx, rax
	adc	rdi, r11
	mov	r11, rdx
	setb	al
	movzx	eax, al
	mov	rdx, rcx
	mulx	rcx, r12, r10
	mov	r10, rbx
	add	r12, rdi
	adc	rcx, rax
	add	r12, rsi
	adc	rcx, r8
	mov	qword ptr [r15 + 8], r11
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15], rbx
	mov	qword ptr [r15 + 16], r12
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rax, qword ptr [rsi + 104]
	mov	rcx, qword ptr [rsi + 120]
	mov	r13, qword ptr [rsi + 96]
	mov	rdx, qword ptr [rsi + 112]
	mov	qword ptr [rsi + 240], rdx
	mov	qword ptr [rsi + 224], r13
	mov	qword ptr [rsi + 248], rcx
	mov	qword ptr [rsi + 232], rax
	mov	r14, qword ptr [r14 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rdi, rbx
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB6_62
.LBB6_63:                               # %OP817.SWAP2
	add	rbx, qword ptr [r14 + 8]
	movbe	qword ptr [r13 + rbx + 24], r10
	movbe	qword ptr [r13 + rbx + 16], r11
	movbe	qword ptr [r13 + rbx + 8], r12
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r13 + rbx], rax
	mov	rdi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 16]
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 32
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rdi], rdx
	mov	qword ptr [rdi + 8], rsi
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [rdi + 24], rax
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 168]      # 8-byte Reload
	jmp	.LBB6_429
.LBB6_62:                               # %resize.i7500
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 64], r10       # 8-byte Spill
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB6_63
	jmp	.LBB6_122
.LBB6_67:                               # %OP88.JUMPDEST
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [r12 + 1]
	mov	r9, r14
	mov	r14, r12
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r13 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_271
# %bb.68:                               # %OP90.MLOAD.contd
	add	r14, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15], rdi
	mov	qword ptr [r13 + r15 + 24], rcx
	mov	qword ptr [r13 + r15 + 8], rsi
	lea	rbx, [r12 + 3]
	mov	r15, r12
	mov	r12, rbx
	shl	r12, 5
	mov	rax, rdi
	add	rax, 32
	mov	r8, rsi
	adc	r8, 0
	mov	r9, rdx
	adc	r9, 0
	mov	r10, rcx
	adc	r10, 0
	mov	qword ptr [r14 + 64], rax
	mov	qword ptr [r14 + 72], r8
	mov	qword ptr [r14 + 80], r9
	mov	qword ptr [r14 + 88], r10
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB6_287
# %bb.69:                               # %OP100.DUP4
	mov	r11, r15
	add	r12, r13
	add	r15, 5
	mov	rdx, qword ptr [r14 - 16]
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [r14 + 72]
	mov	r8, qword ptr [r14 + 88]
	mov	r9, qword ptr [r14 + 64]
	mov	r10, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 144], r10
	mov	qword ptr [r14 + 128], r9
	mov	qword ptr [r14 + 152], r8
	mov	qword ptr [r14 + 136], rax
	lea	rax, [r11 + 6]
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15 + 24], rcx
	mov	qword ptr [r13 + r15], rdi
	mov	qword ptr [r13 + r15 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_211
# %bb.70:                               # %OP103.MLOAD.contd
	add	r15, r13
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	rsi, qword ptr [r14 + 136]
	mov	rcx, qword ptr [r14 + 152]
	mov	rdi, qword ptr [r14 + 128]
	mov	rdx, qword ptr [r14 + 144]
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	shl	rbx, 5
	mov	qword ptr [r13 + rbx + 16], rdx
	mov	qword ptr [r13 + rbx], rdi
	mov	qword ptr [r13 + rbx + 24], rcx
	mov	qword ptr [r13 + rbx + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB6_82
# %bb.71:                               # %OP106.PUSH1
	mov	qword ptr [rbp - 64], rbx       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r14 + 152]
	mov	rcx, qword ptr [r14 + 144]
	mov	rdx, qword ptr [r14 + 128]
	mov	rsi, qword ptr [r14 + 136]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 88], rax
	mov	qword ptr [r14 + 64], rdx
	mov	qword ptr [r14 + 80], rcx
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_82
# %bb.72:                               # %OP111.MLOAD.contd
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	add	r11, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12 + 16]
	mov	rax, qword ptr [r12]
	mov	r8, qword ptr [r12 + 8]
	add	rax, 32
	adc	r8, 0
	adc	rdi, 0
	adc	rsi, 0
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12 + 24], rsi
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 144], r10
	mov	qword ptr [r14 + 128], rdx
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], r9
	vmovdqu	ymm0, ymmword ptr [r14 + 64]
	vmovdqu	ymmword ptr [r11], ymm0
	mov	qword ptr [r14 + 248], rsi
	mov	qword ptr [r14 + 240], rdi
	mov	qword ptr [r14 + 232], r8
	mov	qword ptr [r14 + 224], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 256], ymm0
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 9
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
.LBB6_73:                               # %OP120.JUMPDEST.preheader
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [r14 + 1]
	shl	r14, 5
	mov	r10, r8
	shl	r10, 5
	mov	rax, qword ptr [r13 + r14 - 8]
	mov	rcx, qword ptr [r13 + r14 - 16]
	mov	rdi, r13
	mov	r13, qword ptr [r13 + r14 - 32]
	cmp	r13, qword ptr [rdi + r14 - 128]
	mov	rdx, qword ptr [rdi + r14 - 24]
	mov	rsi, rdx
	sbb	rsi, qword ptr [rdi + r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [rdi + r14 - 112]
	mov	qword ptr [rdi + r10 + 16], rcx
	mov	qword ptr [rdi + r10], r13
	mov	rsi, rax
	sbb	rsi, qword ptr [rdi + r14 - 104]
	mov	qword ptr [rdi + r10 + 24], rax
	mov	qword ptr [rdi + r10 + 8], rdx
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdi + r14 + 8], xmm0
	mov	qword ptr [rdi + r14], rsi
	mov	qword ptr [rdi + r14 + 24], 0
	jae	.LBB6_74
# %bb.83:                               # %OP127.DUP1.lr.ph
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	add	r14, rdi
	add	r10, rdi
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_84:                               # %OP127.DUP1
                                        # =>This Inner Loop Header: Depth=1
	mov	rdi, qword ptr [r14 - 40]
	mov	rbx, qword ptr [r14 - 64]
	mov	r9, qword ptr [r14 - 56]
	mov	r8, qword ptr [r14 - 48]
	mov	qword ptr [r10 + 16], r8
	mov	qword ptr [r10], rbx
	mov	qword ptr [r10 + 24], rdi
	mov	qword ptr [r10 + 8], r9
	add	rbx, r13
	adc	r9, rdx
	adc	r8, rcx
	adc	rdi, rax
	mov	qword ptr [r14], rbx
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 24], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rsi + 40]
	mov	r10, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r10, r15
	mov	rsi, rbx
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	neg	r9
	mov	r9d, 0
	sbb	r9, r8
	mov	r8d, 0
	sbb	r8, rdi
	cmovb	rsi, r11
	mov	qword ptr [rbp - 64], r12       # 8-byte Spill
	cmp	rsi, r10
	ja	.LBB6_88
.LBB6_85:                               # %OP130.MLOAD.contd
                                        #   in Loop: Header=BB6_84 Depth=1
	add	r15, qword ptr [r12 + 8]
	mov	r12, qword ptr [rbx + r15 + 16]
	mov	rsi, qword ptr [rbx + r15 + 24]
	mov	rdi, qword ptr [rbx + r15]
	mov	rbx, qword ptr [rbx + r15 + 8]
	movbe	qword ptr [r14 + 16], rbx
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	movbe	qword ptr [r14], rsi
	mov	qword ptr [rbp - 72], rdi       # 8-byte Spill
	movbe	qword ptr [r14 + 24], rdi
	movbe	qword ptr [r14 + 8], r12
	mov	rsi, qword ptr [r14 - 72]
	mov	rdi, qword ptr [r14 - 96]
	mov	r8, qword ptr [r14 - 88]
	mov	r9, qword ptr [r14 - 80]
	mov	qword ptr [r14 + 64], rdi
	add	r13, rdi
	mov	qword ptr [r14 + 80], r9
	mov	qword ptr [r14 + 88], rsi
	mov	qword ptr [r14 + 72], r8
	adc	rdx, r8
	adc	rcx, r9
	adc	rax, rsi
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r10], r13
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 24], rax
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	mov	rdi, qword ptr [r9 + 16]
	mov	r15, qword ptr [r9 + 48]
	sub	rdi, r15
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, r9
	ja	.LBB6_90
.LBB6_86:                               # %OP135.PUSH1
                                        #   in Loop: Header=BB6_84 Depth=1
	add	r15, qword ptr [rcx + 8]
	mov	qword ptr [r13 + r15 + 8], rbx
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [r13 + r15], rax
	mov	qword ptr [r13 + r15 + 16], r12
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r13, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 - 24], rdx
	mov	qword ptr [r14 - 8], rax
	mov	qword ptr [r14 - 32], r13
	mov	qword ptr [r14 - 16], rcx
	cmp	r13, qword ptr [r14 - 128]
	mov	rsi, rdx
	sbb	rsi, qword ptr [r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [r14 - 112]
	mov	rsi, rax
	sbb	rsi, qword ptr [r14 - 104]
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r13
	setae	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], 0
	jb	.LBB6_84
	jmp	.LBB6_87
.LBB6_88:                               # %resize.i7223
                                        #   in Loop: Header=BB6_84 Depth=1
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_92
# %bb.89:                               # %resize.i7223.OP130.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB6_84 Depth=1
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r13, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 64], rsi       # 8-byte Spill
	vpxor	xmm0, xmm0, xmm0
	jmp	.LBB6_85
.LBB6_90:                               # %resize.i7237
                                        #   in Loop: Header=BB6_84 Depth=1
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	mov	r12, r10
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm0, xmm0, xmm0
	mov	r10, r12
	mov	r12, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB6_86
	jmp	.LBB6_449
.LBB6_74:
	mov	r13, rdi
.LBB6_75:                               # %OP142.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rcx
	shl	r14, 5
	mov	rax, qword ptr [r13 + r14 - 160]
	lea	rbx, [rcx - 5]
	mov	rcx, qword ptr [r13 + r14 - 200]
	mov	rdi, qword ptr [r13 + r14 - 216]
	mov	rdx, qword ptr [r13 + r14 - 208]
	mov	rsi, rbx
	shl	rsi, 5
	mov	r12, qword ptr [r13 + r14 - 224]
	add	r12, rax
	adc	rdi, qword ptr [r13 + r14 - 152]
	adc	rdx, qword ptr [r13 + r14 - 144]
	adc	rcx, qword ptr [r13 + r14 - 136]
	mov	qword ptr [r13 + r14 - 224], r12
	mov	qword ptr [r13 + r14 - 208], rdx
	mov	qword ptr [r13 + r14 - 216], rdi
	mov	qword ptr [r13 + r14 - 200], rcx
	xor	r8d, r8d
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + r14 - 184], xmm0
	and	rax, 31
	mov	qword ptr [r13 + r14 - 192], rax
	mov	qword ptr [r13 + r14 - 168], 0
	sete	r8b
	mov	qword ptr [r13 + rsi], r8
	vmovdqu	xmmword ptr [r13 + rsi + 8], xmm0
	mov	qword ptr [r13 + rsi + 24], 0
	je	.LBB6_270
# %bb.76:                               # %OP159.DUP1
	mov	qword ptr [rbp - 64], rbx       # 8-byte Spill
	add	r14, r13
	sub	r12, rax
	sbb	rdi, 0
	sbb	rdx, 0
	sbb	rcx, 0
	mov	qword ptr [r14 - 160], r12
	mov	qword ptr [r14 - 152], rdi
	mov	qword ptr [r14 - 144], rdx
	mov	qword ptr [r14 - 136], rcx
	mov	qword ptr [r14 - 128], r12
	mov	qword ptr [r14 - 120], rdi
	mov	qword ptr [r14 - 112], rdx
	mov	qword ptr [r14 - 104], rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rsi + 40]
	mov	r8, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	r8, rbx
	mov	rsi, r12
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r10d, r10d
	neg	rdi
	mov	edi, 0
	sbb	rdi, rdx
	sbb	r10, rcx
	cmovb	rsi, r9
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r11, [rcx - 3]
	cmp	rsi, r8
	ja	.LBB6_93
# %bb.77:
	xor	edx, edx
	xor	esi, esi
	xor	ecx, ecx
.LBB6_78:                               # %OP163.MLOAD.contd
	add	rbx, qword ptr [r15 + 8]
	mov	rdi, qword ptr [r12 + rbx + 24]
	mov	r8, qword ptr [r12 + rbx + 16]
	mov	r9, qword ptr [r12 + rbx]
	mov	r10, qword ptr [r12 + rbx + 8]
	movbe	qword ptr [r14 - 104], r9
	movbe	qword ptr [r14 - 120], r8
	movbe	qword ptr [r14 - 128], rdi
	movbe	qword ptr [r14 - 112], r10
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [r15 - 1]
	shl	r11, 5
	mov	rdi, rbx
	shl	rdi, 5
	xor	r8d, r8d
	mov	r9d, 32
	sub	r9, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	edx, 0
	sbb	rdx, rsi
	sbb	r8, rcx
	mov	qword ptr [r13 + r11 + 24], 0
	mov	qword ptr [r13 + r11 + 8], 0
	mov	qword ptr [r13 + r11 + 16], 0
	mov	qword ptr [r13 + r11], 1
	mov	qword ptr [r14 - 56], rax
	mov	qword ptr [r14 - 40], r8
	mov	qword ptr [r14 - 64], r9
	mov	qword ptr [r14 - 48], rdx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_22] # xmm0 = [256,0,0,0]
	vmovdqu	ymmword ptr [r13 + rdi], ymm0
	lea	rsi, [r14 - 64]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edx, 17
	mov	r12, r11
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB6_287
# %bb.79:                               # %OP170.SUB
	add	r12, r13
	mov	r11, qword ptr [r14 - 64]
	mov	r10, r13
	mov	r13, qword ptr [r14 - 56]
	mov	rax, qword ptr [r14 - 48]
	mov	rcx, qword ptr [r14 - 40]
	not	rcx
	not	rax
	not	r13
	not	r11
	add	r11, qword ptr [r14 - 96]
	adc	r13, qword ptr [r14 - 88]
	adc	rax, qword ptr [r14 - 80]
	adc	rcx, qword ptr [r14 - 72]
	add	r15, -4
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	mov	rbx, r15
	shl	rbx, 5
	and	rax, qword ptr [r10 + rbx + 16]
	and	r11, qword ptr [r10 + rbx]
	and	rcx, qword ptr [r10 + rbx + 24]
	and	r13, qword ptr [r10 + rbx + 8]
	mov	qword ptr [r10 + rbx + 8], r13
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [r10 + rbx + 24], rcx
	mov	qword ptr [r10 + rbx], r11
	mov	qword ptr [rbp - 80], rax       # 8-byte Spill
	mov	qword ptr [r10 + rbx + 16], rax
	mov	rax, qword ptr [r14 - 152]
	mov	rcx, qword ptr [r14 - 136]
	mov	r15, qword ptr [r14 - 160]
	mov	rdx, qword ptr [r14 - 144]
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rax
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	r12, qword ptr [rsi + 48]
	sub	rdi, r12
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rax
	mov	eax, 0
	sbb	rax, rdx
	sbb	r9, rcx
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB6_95
.LBB6_80:                               # %OP175.PUSH1
	add	rbx, r10
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	add	r12, qword ptr [rax + 8]
	movbe	qword ptr [r15 + r12 + 24], r11
	movbe	qword ptr [r15 + r12 + 16], r13
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 8], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r12], rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r14 - 136]
	mov	rcx, qword ptr [r14 - 144]
	mov	rdx, qword ptr [r14 - 152]
	mov	rsi, qword ptr [r14 - 160]
	add	rsi, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	vmovdqa	xmm0, xmmword ptr [r14 - 224]
	vmovaps	xmm1, xmmword ptr [r14 - 208]
	mov	qword ptr [r14 - 224], rsi
	mov	qword ptr [r14 - 216], rdx
	mov	qword ptr [r14 - 208], rcx
	mov	qword ptr [r14 - 200], rax
	vmovaps	xmmword ptr [r14 - 144], xmm1
	vmovdqa	xmmword ptr [r14 - 160], xmm0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, r10
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	jmp	.LBB6_97
.LBB6_270:
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB6_97
.LBB6_93:                               # %resize.i7253
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_82
# %bb.94:                               # %resize.i7253.OP163.MLOAD.contd_crit_edge
	mov	rcx, qword ptr [r14 - 168]
	mov	rsi, qword ptr [r14 - 176]
	mov	rax, qword ptr [r14 - 192]
	mov	rdx, qword ptr [r14 - 184]
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	jmp	.LBB6_78
.LBB6_95:                               # %resize.i7268
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 112]      # 8-byte Reload
	test	al, al
	je	.LBB6_80
	jmp	.LBB6_449
.LBB6_82:
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_87:
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB6_75
.LBB6_92:
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_96:                               # %OP179.JUMPDEST.loopexit
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
.LBB6_97:                               # %OP179.JUMPDEST
	mov	qword ptr [rbp - 64], rbx       # 8-byte Spill
	shl	rbx, 5
	mov	rcx, qword ptr [r13 + rbx - 56]
	mov	r9, qword ptr [r13 + rbx - 64]
	mov	rax, qword ptr [r13 + rbx - 40]
	mov	rdx, qword ptr [r13 + rbx - 48]
	vmovaps	xmm0, xmmword ptr [r13 + rbx - 160]
	vmovaps	xmm1, xmmword ptr [r13 + rbx - 144]
	mov	qword ptr [r13 + rbx - 144], rdx
	mov	qword ptr [r13 + rbx - 136], rax
	mov	qword ptr [r13 + rbx - 160], r9
	mov	qword ptr [r13 + rbx - 152], rcx
	vmovaps	xmmword ptr [r13 + rbx - 48], xmm1
	vmovaps	xmmword ptr [r13 + rbx - 64], xmm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r13 + rbx - 128], ymm0
	lea	rsi, [r13 + rbx - 160]
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	r15, qword ptr [r14 + 40]
	mov	r8, qword ptr [r15 + 16]
	mov	rdi, r14
	mov	r14, qword ptr [r15 + 48]
	sub	r8, r14
	cmp	r8, 95
	jbe	.LBB6_100
.LBB6_98:                               # %OP186.MLOAD.contd
	add	r13, rbx
	mov	r10, qword ptr [r15 + 8]
	mov	r8, qword ptr [r10 + r14 + 88]
	mov	rsi, qword ptr [r10 + r14 + 80]
	mov	r11, qword ptr [r10 + r14 + 64]
	mov	r10, qword ptr [r10 + r14 + 72]
	mov	rbx, r11
	bswap	rbx
	mov	r14, r10
	bswap	r14
	mov	r15, rsi
	bswap	r15
	mov	r12, r8
	bswap	r12
	mov	qword ptr [r13 - 80], rdx
	mov	qword ptr [r13 - 96], r9
	mov	qword ptr [r13 - 88], rcx
	mov	qword ptr [r13 - 72], rax
	sub	r9, r12
	sbb	rcx, r15
	sbb	rdx, r14
	sbb	rax, rbx
	mov	qword ptr [r13 - 160], r9
	mov	qword ptr [r13 - 152], rcx
	mov	qword ptr [r13 - 144], rdx
	mov	qword ptr [r13 - 136], rax
	movbe	qword ptr [r13 - 112], r10
	movbe	qword ptr [r13 - 104], r11
	movbe	qword ptr [r13 - 128], r8
	movbe	qword ptr [r13 - 120], rsi
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB6_102
.LBB6_99:                               # %select.end8944
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	add	r15, -5
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_100:                              # %resize.i7284
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	mov	esi, 96
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_103
# %bb.101:                              # %resize.i7284.OP186.MLOAD.contd_crit_edge
	mov	rax, qword ptr [r12 + 24]
	mov	rdx, qword ptr [r12 + 16]
	mov	r9, qword ptr [r12]
	mov	rcx, qword ptr [r12 + 8]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB6_98
.LBB6_102:                              # %select.false8945
	mov	eax, ecx
	jmp	.LBB6_99
.LBB6_103:
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	add	r15, -3
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_104:                              # %OP192.JUMPDEST
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	mov	rcx, qword ptr [rdi + 96]
	mov	rdx, qword ptr [rdi + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [rdi + 120]
	or	rcx, qword ptr [rdi + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_107
.LBB6_105:                              # %OP197.PUSH1
	add	r13, rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + 32], ymm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB6_17
.LBB6_106:                              # %OP200.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
.LBB6_107:                              # %OP200.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rax
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_37] # xmm0 = [391,0,0,0]
	vmovups	ymmword ptr [r13 + r14], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13 + r14 + 32], ymm0
	vmovups	ymmword ptr [r13 + r14 + 64], ymm0
	add	rax, 3
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	shl	r15, 5
	vmovups	ymmword ptr [r13 + r15], ymm0
	mov	rbx, qword ptr [rdi + 72]
	mov	r12, qword ptr [rdi + 80]
	sub	rsp, 8
	lea	rdi, [rbp - 784]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r12
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 768]
	mov	rcx, qword ptr [rbp - 784]
	mov	rdx, qword ptr [rbp - 776]
	mov	qword ptr [r13 + r14 + 40], rdx
	mov	qword ptr [r13 + r14 + 48], rax
	mov	qword ptr [r13 + r14 + 32], rcx
	mov	qword ptr [r13 + r14 + 56], 0
	mov	qword ptr [r13 + r14 + 88], 0
	mov	qword ptr [r13 + r14 + 72], 0
	mov	qword ptr [r13 + r14 + 80], 0
	mov	qword ptr [r13 + r14 + 64], 4
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [r13 + r15 + 24], 0
	mov	qword ptr [r13 + r15], 36
	mov	qword ptr [r13 + r15 + 16], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_17] # xmm0 = [36,0]
	vmovups	ymmword ptr [r13 + r14 + 128], ymm0
	sub	rsp, 8
	lea	rdi, [rbp - 272]
	mov	esi, 36
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r12
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	r10, qword ptr [rbp - 144]      # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 248]
	mov	rcx, qword ptr [rbp - 272]
	mov	rdx, qword ptr [rbp - 264]
	mov	rsi, qword ptr [rbp - 256]
	mov	qword ptr [r13 + r14 + 176], 0
	mov	qword ptr [r13 + r14 + 160], 32
	mov	qword ptr [r13 + r14 + 184], 0
	mov	qword ptr [r13 + r14 + 168], 0
	mov	qword ptr [r13 + r14 + 80], rsi
	mov	qword ptr [r13 + r14 + 64], rcx
	mov	qword ptr [r13 + r14 + 88], rax
	mov	qword ptr [r13 + r14 + 72], rdx
	mov	qword ptr [r13 + r15], 4
	mov	qword ptr [r13 + r15 + 16], 0
	mov	qword ptr [r13 + r15 + 8], 0
	mov	qword ptr [r13 + r15 + 24], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_18] # xmm0 = [68,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14 + 128], ymm0
.LBB6_108:                              # %OP866.JUMPDEST
	mov	r11, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, r11
	shl	rax, 5
	lea	r14, [rax + r13]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + rax], ymm0
	lea	rdx, [r11 + 2]
	vmovups	ymm1, ymmword ptr [r13 + rax - 32]
	vmovups	ymmword ptr [r13 + rax + 32], ymm1
	lea	rcx, [r13 + rax + 32]
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	lea	rsi, [r11 + 3]
	mov	qword ptr [rbp - 176], rdx      # 8-byte Spill
	mov	rcx, rdx
	shl	rcx, 5
	vmovaps	xmm1, xmmword ptr [rip + .LCPI6_16] # xmm1 = [4,0]
	vmovups	ymmword ptr [r13 + rcx], ymm1
	lea	rbx, [rcx + r13]
	lea	rdi, [r11 + 4]
	mov	qword ptr [rbp - 160], rsi      # 8-byte Spill
	mov	rcx, rsi
	shl	rcx, 5
	mov	rdx, r13
	add	r13, rcx
	vmovdqu	ymmword ptr [rdx + rcx], ymm0
	mov	r8d, dword ptr [r10 + 164]
	movbe	r9, qword ptr [r10 + 156]
	bswap	r8
	shrd	r8, r9, 32
	movbe	r10, qword ptr [r10 + 148]
	shrd	r9, r10, 32
	shr	r10, 32
	mov	qword ptr [rbp - 168], rdi      # 8-byte Spill
	mov	rcx, rdi
	shl	rcx, 5
	lea	rsi, [rdx + rcx]
	mov	qword ptr [rdx + rcx + 8], r9
	mov	qword ptr [rdx + rcx + 16], r10
	mov	qword ptr [rdx + rcx], r8
	mov	qword ptr [rdx + rcx + 24], 0
	vmovdqu	ymmword ptr [rdx + rax + 160], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rdi + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	rcx, r11
	mov	r15, qword ptr [r12 + 48]
	sub	rax, r15
	lea	rcx, [r11 + 6]
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	cmp	rax, 31
	mov	qword ptr [rbp - 64], rsi       # 8-byte Spill
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	mov	qword ptr [rbp - 136], r10      # 8-byte Spill
	jbe	.LBB6_120
.LBB6_109:                              # %OP878.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r15 + 24], r8
	movbe	qword ptr [rax + r15 + 16], r9
	movbe	qword ptr [rax + r15 + 8], r10
	mov	qword ptr [rax + r15], 0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	rsi, qword ptr [rdi + 40]
	mov	r10, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	mov	r12, qword ptr [rsi + 48]
	sub	r10, r12
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_195
.LBB6_110:                              # %OP883.PUSH1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	add	r12, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 8], rax
	movbe	qword ptr [r15 + r12], r11
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_196
# %bb.111:                              # %OP887.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	ecx, dword ptr [r14 - 48]
	mov	rdx, qword ptr [r14 - 64]
	mov	r8, qword ptr [r14 - 56]
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsi + 8], r8
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi], rdx
	mov	qword ptr [rsi + 24], 0
	mov	qword ptr [r14 + 184], 0
	mov	qword ptr [r14 + 168], 0
	mov	qword ptr [r14 + 176], 0
	mov	qword ptr [r14 + 160], 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rdi + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	rax, r15
	cmp	rax, 31
	jbe	.LBB6_121
.LBB6_112:                              # %OP895.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r15 + 24], rdx
	movbe	qword ptr [rax + r15 + 16], r8
	movbe	qword ptr [rax + r15 + 8], rcx
	mov	qword ptr [rax + r15], 0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	rsi, qword ptr [rdi + 40]
	mov	r10, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	mov	r12, qword ptr [rsi + 48]
	sub	r10, r12
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_123
.LBB6_113:                              # %OP900.PUSH1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	add	r12, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r12 + 8], rax
	movbe	qword ptr [r15 + r12], r11
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_196
# %bb.114:                              # %OP904.DUP2
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi]
	mov	rdx, qword ptr [rsi + 8]
	mov	rsi, qword ptr [rsi + 16]
	mov	rdi, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], rdi
	mov	qword ptr [r13 + 8], r9
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB6_461
# %bb.115:                              # %OP907.POP
	mov	eax, dword ptr [r14 - 48]
	vmovaps	xmm0, xmmword ptr [r14 - 64]
	vmovaps	xmmword ptr [r14 + 32], xmm0
	mov	qword ptr [r14 + 48], rax
	mov	qword ptr [r14 + 56], 0
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbx + 16], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbx], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx + 24], 0
	movabs	rax, -3364345866241538829
	mov	qword ptr [r13 + 16], rax
	movabs	rax, 6566260114167413029
	mov	qword ptr [r13], rax
	movabs	rax, -8332818307897066149
	mov	qword ptr [r13 + 24], rax
	movabs	rax, -2521148547375421154
	mov	qword ptr [r13 + 8], rax
	mov	r11, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 16]
	mov	rbx, qword ptr [r14 - 24]
	mov	r10, qword ptr [r14 - 8]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rax + 24], r10
	mov	qword ptr [rax + 8], rbx
	mov	qword ptr [rax + 16], r9
	mov	qword ptr [rax], r11
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14 + 160], ymm0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15 + 48]
	sub	rax, r13
	mov	qword ptr [rbp - 72], r15       # 8-byte Spill
	cmp	rax, 95
	jbe	.LBB6_124
.LBB6_116:                              # %OP917.MLOAD.contd
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [rax + r13 + 88]
	mov	rsi, qword ptr [rax + r13 + 80]
	mov	r8, qword ptr [rax + r13 + 64]
	mov	rdi, qword ptr [rax + r13 + 72]
	movbe	qword ptr [r14 + 184], r8
	movbe	qword ptr [r14 + 168], rsi
	movbe	qword ptr [r14 + 160], rcx
	movbe	qword ptr [r14 + 176], rdi
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	shl	rax, 5
	mov	r12, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r12 + rax + 24], r8
	movbe	qword ptr [r12 + rax + 8], rsi
	movbe	qword ptr [r12 + rax + 16], rdi
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rdx, 7
	movbe	qword ptr [r12 + rax], rcx
	mov	qword ptr [rbp - 128], rdx      # 8-byte Spill
	shl	rdx, 5
	mov	qword ptr [r12 + rdx + 24], r10
	mov	qword ptr [r12 + rdx + 8], rbx
	mov	qword ptr [r12 + rdx + 16], r9
	mov	qword ptr [r12 + rdx], r11
	movbe	qword ptr [r14 + 280], r8
	bswap	r8
	movbe	qword ptr [r14 + 272], rdi
	bswap	rdi
	movbe	qword ptr [r14 + 264], rsi
	mov	r9, rsi
	bswap	r9
	movbe	qword ptr [r14 + 256], rcx
	mov	r15, rcx
	bswap	r15
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rsi + 16]
	mov	rbx, qword ptr [rsi + 48]
	sub	rcx, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r11d, r11d
	neg	r9
	mov	r9d, 0
	sbb	r9, rdi
	sbb	r11, r8
	cmovb	rsi, r10
	lea	r13, [r12 + rax]
	add	r12, rdx
	cmp	rsi, rcx
	ja	.LBB6_126
.LBB6_117:                              # %OP922.PUSH1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	add	rbx, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r12], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	rdx, qword ptr [r13]
	mov	rsi, qword ptr [r13 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	vmovups	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 24], rax
	vmovups	ymmword ptr [r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14 + 160], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	r8, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	r8, rbx
	cmp	r8, 95
	jbe	.LBB6_127
.LBB6_118:                              # %OP928.MLOAD.contd
	mov	r10, qword ptr [r15 + 8]
	mov	r8, qword ptr [r10 + rbx + 88]
	mov	r15, qword ptr [r10 + rbx + 80]
	mov	r9, qword ptr [r10 + rbx + 64]
	mov	r10, qword ptr [r10 + rbx + 72]
	mov	r11, r10
	bswap	r11
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 24], rax
	mov	rbx, r8
	bswap	rbx
	sub	rdx, rbx
	mov	rbx, r15
	bswap	rbx
	sbb	rsi, rbx
	sbb	rcx, r11
	mov	r11, r9
	bswap	r11
	sbb	rax, r11
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	movbe	qword ptr [r14 + 176], r10
	movbe	qword ptr [r14 + 160], r8
	movbe	qword ptr [r14 + 184], r9
	movbe	qword ptr [r14 + 168], r15
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [r15 + 1]
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB6_287
# %bb.119:                              # %OP934.PUSH1
	shl	rbx, 5
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r13 + rbx + 24], rsi
	mov	qword ptr [r13 + rbx + 8], rdx
	mov	qword ptr [r13 + rbx + 16], rax
	mov	qword ptr [r13 + rbx], rcx
	mov	rcx, qword ptr [r14 - 88]
	mov	rsi, qword ptr [r14 - 72]
	mov	rax, qword ptr [r14 - 96]
	mov	rdx, qword ptr [r14 - 80]
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [r14 - 80], xmm0
	mov	qword ptr [r14 - 96], 1
	mov	qword ptr [r14 - 88], 0
	mov	rdi, qword ptr [r14 - 40]
	mov	r8, qword ptr [r14 - 56]
	mov	r9, qword ptr [r14 - 64]
	mov	r10, qword ptr [r14 - 48]
	mov	qword ptr [r14 - 48], rdx
	mov	qword ptr [r14 - 64], rax
	mov	qword ptr [r14 - 56], rcx
	mov	qword ptr [r14 - 40], rsi
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r9
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [r14 + 24], rdi
	mov	rdi, r15
	add	rdi, -2
	jmp	.LBB6_320
.LBB6_120:                              # %resize.i7544
	mov	esi, 32
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 136]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 128]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 120]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB6_109
	jmp	.LBB6_122
.LBB6_195:                              # %resize.i7559
	mov	qword ptr [rbp - 184], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 184]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_110
	jmp	.LBB6_196
.LBB6_121:                              # %resize.i7574
	mov	esi, 32
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB6_112
	jmp	.LBB6_122
.LBB6_123:                              # %resize.i7589
	mov	qword ptr [rbp - 168], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 168]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_113
	jmp	.LBB6_196
.LBB6_124:                              # %resize.i7605
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_203
# %bb.125:                              # %resize.i7605.OP917.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r10, qword ptr [rax + 24]
	mov	r9, qword ptr [rax + 16]
	mov	r11, qword ptr [rax]
	mov	rbx, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	jmp	.LBB6_116
.LBB6_126:                              # %resize.i7620
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB6_117
	jmp	.LBB6_474
.LBB6_127:                              # %resize.i7636
	mov	esi, 96
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_203
# %bb.128:                              # %resize.i7636.OP928.MLOAD.contd_crit_edge
	mov	r12, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB6_118
.LBB6_122:
	mov	rcx, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_129:                              # %OP226.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	r9, r14
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_484
# %bb.130:                              # %OP228.MLOAD.contd
	add	r14, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [rax + 2]
	mov	qword ptr [rbp - 64], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r13 + r12 + 16], rdx
	mov	qword ptr [r13 + r12], rdi
	mov	qword ptr [r13 + r12 + 24], rcx
	mov	qword ptr [r13 + r12 + 8], rsi
	mov	rax, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	r15, r13
	mov	r13, rbx
	shl	r13, 5
	or	r9, qword ptr [r14 - 8]
	or	rax, qword ptr [r14 - 16]
	xor	r8d, r8d
	or	rax, r9
	setne	r8b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13], r8
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 112], rdx
.LBB6_131:                              # %OP228.MLOAD.contd
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r9d, r9d
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB6_287
.LBB6_132:                              # %OP237.PUSH1
	add	r12, r15
	add	r13, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r14 - 32]
	mov	qword ptr [r14 - 32], rdx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r14 - 16], rcx
	mov	qword ptr [r14 - 8], rax
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_211
# %bb.133:                              # %OP243.MLOAD.contd
	lea	rsi, [r14 - 32]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r14 - 8]
	mov	r9, qword ptr [r14 - 32]
	mov	r10, qword ptr [r14 - 24]
	mov	r11, qword ptr [r14 - 16]
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [r14 - 32], r9
	mov	qword ptr [r14 - 24], r10
	mov	qword ptr [r14 - 16], r11
	mov	qword ptr [r14 - 8], r8
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	jne	.LBB6_242
.LBB6_134:                              # %select.end8950
	dec	qword ptr [rbp - 48]            # 8-byte Folded Spill
	jmp	.LBB6_449
.LBB6_242:                              # %select.false8951
	mov	eax, ecx
	jmp	.LBB6_134
.LBB6_135:                              # %OP257.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
.LBB6_136:                              # %OP257.JUMPDEST
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rcx + 1]
	shl	rcx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_36] # xmm0 = [436,0,0,0]
	vmovdqu	ymmword ptr [r13 + rcx], ymm0
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
.LBB6_137:                              # %OP942.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, rax
	shl	rbx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + rbx], ymm0
	lea	r14, [rax + 2]
	mov	eax, dword ptr [rdi + 144]
	movbe	rcx, qword ptr [rdi + 136]
	bswap	rax
	shrd	rax, rcx, 32
	movbe	rdx, qword ptr [rdi + 128]
	shrd	rcx, rdx, 32
	shr	rdx, 32
	lea	rsi, [rbx + r13]
	add	rsi, 32
	mov	rdi, r14
	shl	rdi, 5
	mov	r8d, 4294967295
	mov	qword ptr [r13 + rdi + 16], r8
	mov	qword ptr [r13 + rdi], -1
	mov	qword ptr [r13 + rdi + 24], 0
	mov	qword ptr [r13 + rdi + 8], -1
	mov	qword ptr [r13 + rbx + 48], rdx
	mov	qword ptr [r13 + rbx + 40], rcx
	mov	qword ptr [r13 + rbx + 32], rax
	mov	qword ptr [r13 + rbx + 56], 0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_balance@PLT
	test	al, al
	jne	.LBB6_455
# %bb.138:                              # %OP948.SWAP1
	add	rbx, r13
	vmovdqa	xmm0, xmmword ptr [rbx + 32]
	vmovaps	xmm1, xmmword ptr [rbx + 48]
	vmovaps	xmm2, xmmword ptr [rbx]
	vmovaps	xmm3, xmmword ptr [rbx + 16]
	vmovaps	xmmword ptr [rbx + 48], xmm3
	vmovaps	xmmword ptr [rbx + 32], xmm2
	mov	rax, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 8]
	mov	rdx, qword ptr [rbx - 16]
	vmovaps	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx], rax
	mov	qword ptr [rbx + 8], rcx
	jmp	.LBB6_321
.LBB6_139:                              # %OP261.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	r9, r14
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_484
# %bb.140:                              # %OP263.MLOAD.contd
	add	r14, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [rax + 2]
	mov	qword ptr [rbp - 64], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r13 + r12 + 16], rdx
	mov	qword ptr [r13 + r12], rdi
	mov	qword ptr [r13 + r12 + 24], rcx
	mov	qword ptr [r13 + r12 + 8], rsi
	mov	r8, qword ptr [r14 - 32]
	mov	rax, qword ptr [r14 - 16]
	mov	r9, qword ptr [r14 - 24]
	mov	r10, qword ptr [r14 - 8]
	mov	r15, r13
	mov	r13, rbx
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 24], r10
	mov	qword ptr [r15 + r13 + 8], r9
	mov	qword ptr [r15 + r13], r8
	mov	qword ptr [r15 + r13 + 16], rax
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	je	.LBB6_132
	jmp	.LBB6_287
.LBB6_141:                              # %OP280.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_142:                              # %OP280.JUMPDEST
	mov	rcx, qword ptr [r8 + 96]
	mov	rdx, qword ptr [r8 + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [r8 + 120]
	or	rcx, qword ptr [r8 + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_144
	jmp	.LBB6_105
.LBB6_143:                              # %OP288.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_144:                              # %OP288.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, rax
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_33] # xmm0 = [553,0,0,0]
	vmovups	ymmword ptr [r13 + r14], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13 + r14 + 32], ymm0
	vmovups	ymmword ptr [r13 + r14 + 64], ymm0
	add	rax, 4
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	vmovups	ymmword ptr [r13 + r14 + 96], ymm0
	mov	rbx, qword ptr [r8 + 72]
	mov	r15, qword ptr [r8 + 80]
	sub	rsp, 8
	lea	rdi, [rbp - 848]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r15
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 832]
	mov	rcx, qword ptr [rbp - 848]
	mov	rdx, qword ptr [rbp - 840]
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	shl	r12, 5
	mov	qword ptr [r13 + r14 + 40], rdx
	mov	qword ptr [r13 + r14 + 48], rax
	mov	qword ptr [r13 + r14 + 32], rcx
	mov	qword ptr [r13 + r14 + 56], 0
	mov	qword ptr [r13 + r14 + 88], 0
	mov	qword ptr [r13 + r14 + 72], 0
	mov	qword ptr [r13 + r14 + 80], 0
	mov	qword ptr [r13 + r14 + 64], 4
	mov	qword ptr [r13 + r14 + 120], 0
	mov	qword ptr [r13 + r14 + 104], 0
	mov	qword ptr [r13 + r14 + 112], 0
	mov	qword ptr [r13 + r14 + 96], 36
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_17] # xmm0 = [36,0]
	vmovups	ymmword ptr [r13 + r12], ymm0
	sub	rsp, 8
	lea	rdi, [rbp - 816]
	mov	esi, 36
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r15
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 800]
	mov	rcx, qword ptr [rbp - 816]
	mov	rdx, qword ptr [rbp - 808]
	mov	qword ptr [r13 + r14 + 72], rdx
	mov	qword ptr [r13 + r14 + 80], rax
	mov	qword ptr [r13 + r14 + 64], rcx
	mov	qword ptr [r13 + r14 + 88], 0
	mov	qword ptr [r13 + r14 + 120], 0
	mov	qword ptr [r13 + r14 + 104], 0
	mov	qword ptr [r13 + r14 + 112], 0
	mov	qword ptr [r13 + r14 + 96], 4
	mov	qword ptr [r13 + r12 + 8], 0
	mov	qword ptr [r13 + r12 + 24], 0
	mov	qword ptr [r13 + r12], 68
	mov	qword ptr [r13 + r12 + 16], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_18] # xmm0 = [68,0,0,0]
	vmovups	ymmword ptr [r13 + r14 + 160], ymm0
	sub	rsp, 8
	lea	rdi, [rbp - 304]
	mov	esi, 68
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r15
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 280]
	mov	rcx, qword ptr [rbp - 304]
	mov	rdx, qword ptr [rbp - 296]
	mov	rsi, qword ptr [rbp - 288]
	mov	qword ptr [r13 + r14 + 208], 0
	mov	qword ptr [r13 + r14 + 192], 32
	mov	qword ptr [r13 + r14 + 216], 0
	mov	qword ptr [r13 + r14 + 200], 0
	mov	qword ptr [r13 + r14 + 112], rsi
	mov	qword ptr [r13 + r14 + 96], rcx
	mov	qword ptr [r13 + r14 + 120], rax
	mov	qword ptr [r13 + r14 + 104], rdx
	mov	qword ptr [r13 + r12], 4
	mov	qword ptr [r13 + r12 + 16], 0
	mov	qword ptr [r13 + r12 + 8], 0
	mov	qword ptr [r13 + r12 + 24], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_34] # xmm0 = [100,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14 + 160], ymm0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
.LBB6_145:                              # %OP952.JUMPDEST.loopexit
	mov	r9, r13
	mov	r13, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [r13 + 1]
	mov	rax, r13
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r9 + rax], ymm0
	mov	rcx, qword ptr [r9 + rax - 32]
	mov	rdx, qword ptr [r9 + rax - 24]
	mov	rsi, qword ptr [r9 + rax - 8]
	mov	rdi, qword ptr [r9 + rax - 16]
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	shl	r8, 5
	lea	r10, [r9 + r8]
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [r9 + r8 + 16], rdi
	mov	qword ptr [r9 + r8 + 24], rsi
	mov	qword ptr [r9 + r8], rcx
	mov	qword ptr [r9 + r8 + 8], rdx
	lea	rcx, [r13 + 3]
	lea	r12, [r9 + rax]
	add	r12, 64
	vmovaps	xmm1, xmmword ptr [rip + .LCPI6_28] # xmm1 = [3,0,0,0]
	vmovups	ymmword ptr [r9 + rax + 64], ymm1
	add	r13, 4
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	shl	rcx, 5
	lea	r15, [r9 + rcx]
	vmovdqu	ymmword ptr [r9 + rcx], ymm0
	mov	rdx, qword ptr [r9 + rax - 96]
	mov	r8, qword ptr [r9 + rax - 88]
	mov	r10d, dword ptr [r9 + rax - 80]
	mov	rcx, r13
	shl	rcx, 5
	mov	qword ptr [r9 + rcx + 16], r10
	mov	qword ptr [r9 + rcx], rdx
	mov	qword ptr [r9 + rcx + 8], r8
	mov	qword ptr [r9 + rcx + 24], 0
	vmovdqu	ymmword ptr [r9 + rax + 160], ymm0
	lea	rsi, [r9 + rcx]
	mov	rdi, r14
	mov	r14, qword ptr [r14 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rax, rbx
	cmp	rax, 31
	jbe	.LBB6_197
.LBB6_146:                              # %OP964.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + rbx + 24], rdx
	movbe	qword ptr [rax + rbx + 16], r8
	movbe	qword ptr [rax + rbx + 8], r10
	mov	qword ptr [rax + rbx], 0
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	r13, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12], r13
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 24], r11
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [rsi], r13
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	rbx, qword ptr [rdi + 40]
	mov	r10, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	r10, r14
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_199
.LBB6_147:                              # %OP969.PUSH1
	add	r14, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	qword ptr [r13 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r13 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r13 + r14 + 8], rax
	movbe	qword ptr [r13 + r14], r11
	add	qword ptr [r12], 32
	adc	qword ptr [r12 + 8], 0
	adc	qword ptr [r12 + 16], 0
	adc	qword ptr [r12 + 24], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	rsi, r12
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_92
# %bb.148:                              # %OP973.SLOAD
	mov	rdi, r14
	mov	rsi, r12
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_92
# %bb.149:                              # %OP974.LT
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rdi, qword ptr [r12 + 8]
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	cmp	rdx, qword ptr [rsi]
	sbb	rdi, qword ptr [rsi + 8]
	sbb	rcx, qword ptr [rsi + 16]
	sbb	rax, qword ptr [rsi + 24]
	setae	al
	movzx	eax, al
	mov	qword ptr [rsi], rax
	mov	qword ptr [rsi + 8], 0
	mov	qword ptr [rsi + 16], 0
	mov	qword ptr [rsi + 24], 0
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	jb	.LBB6_192
.LBB6_150:                              # %OP983.JUMPDEST
	mov	r10d, dword ptr [rax + 164]
	movbe	r11, qword ptr [rax + 156]
	bswap	r10
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rcx + 1]
	shrd	r10, r11, 32
	movbe	rdx, qword ptr [rax + 148]
	shrd	r11, rdx, 32
	shr	rdx, 32
	mov	r12, rcx
	shl	r12, 5
	lea	r9, [rcx + 2]
	mov	rbx, r8
	shl	rbx, 5
	mov	ecx, dword ptr [r13 + r12 - 112]
	mov	rax, qword ptr [r13 + r12 - 128]
	mov	rsi, qword ptr [r13 + r12 - 120]
	mov	rdi, r13
	mov	r13, r9
	shl	r13, 5
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	xor	rax, r10
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	xor	rcx, rdx
	or	rcx, rax
	mov	r15, rsi
	mov	rax, rsi
	xor	rax, r11
	xor	edx, edx
	xor	esi, esi
	or	rcx, rax
	mov	eax, 4294967295
	mov	qword ptr [rdi + r13 + 16], rax
	mov	qword ptr [rdi + r13], -1
	mov	qword ptr [rdi + r13 + 24], 0
	mov	qword ptr [rdi + r13 + 8], -1
	setne	sil
	mov	qword ptr [rdi + r12], rsi
	sete	dl
	mov	qword ptr [rdi + r12 + 24], 0
	mov	qword ptr [rdi + r12 + 8], 0
	mov	qword ptr [rdi + r12 + 16], 0
	mov	qword ptr [rdi + rbx], rdx
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdi + rbx + 8], xmm0
	mov	qword ptr [rdi + rbx + 24], 0
	je	.LBB6_159
# %bb.151:                              # %OP996.POP
	mov	qword ptr [rbp - 136], r9       # 8-byte Spill
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	add	r12, rdi
	add	rbx, rdi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 3
	add	r13, rdi
	vpcmpeqd	ymm0, ymm0, ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	shl	rax, 5
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rdi + rax + 16], rcx
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rdi + rax], rdx
	mov	rsi, r15
	mov	qword ptr [rdi + rax + 8], r15
	mov	qword ptr [rdi + rax + 24], 0
	vmovdqu	ymmword ptr [r12 + 128], ymm0
	lea	r8, [rdi + rax]
	mov	r15, qword ptr [r14 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	cmp	rax, 31
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	jbe	.LBB6_220
.LBB6_152:                              # %OP1007.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], rdx
	movbe	qword ptr [rax + r14 + 16], rsi
	movbe	qword ptr [rax + r14 + 8], rcx
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	add	r14, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r10, qword ptr [rbx + 24]
	mov	r11, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 72], rdi       # 8-byte Spill
	mov	qword ptr [r13 + 16], rdi
	mov	qword ptr [r13], r11
	mov	qword ptr [r13 + 24], r10
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r8], r14
	mov	qword ptr [r8 + 16], rcx
	mov	qword ptr [r8 + 24], rax
	mov	qword ptr [r8 + 8], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	rdi, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	r15, qword ptr [rsi + 48]
	sub	rdi, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB6_221
.LBB6_153:                              # %OP1012.PUSH1
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	movbe	qword ptr [r14 + r15 + 24], r11
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 8], rax
	movbe	qword ptr [r14 + r15], r10
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_468
# %bb.154:                              # %OP1016.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	qword ptr [r8 + 8], rsi
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [r8], rdx
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	qword ptr [r8 + 16], r9
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r12 + 152], 0
	mov	qword ptr [r12 + 136], 0
	mov	qword ptr [r12 + 144], 0
	mov	qword ptr [r12 + 128], 0
	mov	r15, qword ptr [r14 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rdi, r14
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB6_222
.LBB6_155:                              # %OP1024.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], rdx
	movbe	qword ptr [rax + r14 + 16], rsi
	movbe	qword ptr [rax + r14 + 8], r9
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	add	r14, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [rbx + 24]
	mov	rsi, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r14
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [rbp - 48], rsi       # 8-byte Spill
	mov	qword ptr [r13], rsi
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [r8], r14
	mov	qword ptr [r8 + 16], rcx
	mov	qword ptr [r8 + 24], rax
	mov	qword ptr [r8 + 8], rdx
	mov	rsi, qword ptr [rdi + 40]
	mov	r10, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	r15, qword ptr [rsi + 48]
	sub	r10, r15
	mov	rsi, r14
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_223
.LBB6_156:                              # %OP1029.PUSH1
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r14 + r15 + 8], rax
	movbe	qword ptr [r14 + r15], r11
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	rsi, rbx
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_468
# %bb.157:                              # %OP1033.SLOAD
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_468
# %bb.158:                              # %OP1034.EQ
	vmovdqu	ymm0, ymmword ptr [rbx]
	vpxor	ymm0, ymm0, ymmword ptr [r12]
	xor	eax, eax
	vptest	ymm0, ymm0
	setne	al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r12 + 8], xmm0
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 24], 0
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	jmp	.LBB6_160
.LBB6_159:
	mov	r13, rdi
.LBB6_160:                              # %OP1036.JUMPDEST
	lea	r9, [r8 - 1]
	mov	rax, r9
	mov	qword ptr [rbp - 48], r9        # 8-byte Spill
	shl	r9, 5
	mov	rax, qword ptr [r13 + r9]
	mov	rcx, qword ptr [r13 + r9 + 8]
	or	rcx, qword ptr [r13 + r9 + 24]
	or	rax, qword ptr [r13 + r9 + 16]
	xor	edx, edx
	or	rax, rcx
	sete	dl
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r13 + r9 + 8], xmm0
	mov	qword ptr [r13 + r9], rdx
	mov	qword ptr [r13 + r9 + 24], 0
	je	.LBB6_177
# %bb.161:                              # %OP1040.DUP2
	add	r9, r13
	mov	rax, r8
	shl	rax, 5
	lea	rbx, [rax + r13]
	mov	rcx, qword ptr [r13 + rax - 72]
	mov	rdx, qword ptr [r13 + rax - 96]
	mov	rsi, qword ptr [r13 + rax - 88]
	mov	rdi, qword ptr [r13 + rax - 80]
	mov	qword ptr [r9 + 16], rdi
	mov	qword ptr [r9], rdx
	mov	qword ptr [r9 + 24], rcx
	mov	qword ptr [rbp - 104], r9       # 8-byte Spill
	mov	qword ptr [r9 + 8], rsi
	lea	rcx, [r8 + 1]
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax], 4
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	add	r8, 2
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	shl	rcx, 5
	mov	rdx, r13
	add	r13, rcx
	mov	qword ptr [rdx + rcx + 16], 0
	mov	qword ptr [rdx + rcx], 0
	mov	qword ptr [rdx + rcx + 24], 0
	mov	qword ptr [rdx + rcx + 8], 0
	mov	r10, qword ptr [rdx + rax - 160]
	mov	r9d, dword ptr [rdx + rax - 144]
	mov	r12, qword ptr [rdx + rax - 152]
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	mov	rcx, r8
	shl	rcx, 5
	mov	qword ptr [rdx + rcx + 8], r12
	mov	qword ptr [rdx + rcx + 16], r9
	mov	qword ptr [rdx + rcx], r10
	mov	qword ptr [rdx + rcx + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rdx + rax + 96], ymm0
	lea	rsi, [rdx + rcx]
	mov	r15, qword ptr [r14 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rdi, r14
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	cmp	rax, 31
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	jbe	.LBB6_210
.LBB6_162:                              # %OP1050.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], r10
	movbe	qword ptr [rax + r14 + 16], r12
	movbe	qword ptr [rax + r14 + 8], r9
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	r12, qword ptr [rdi + 40]
	mov	r10, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	r10, r14
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_212
.LBB6_163:                              # %OP1055.PUSH1
	add	r14, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	movbe	qword ptr [r15 + r14], r11
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	rsi, rbx
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_215
# %bb.164:                              # %OP1059.PUSH1
	mov	rcx, r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r15d, dword ptr [rax + 164]
	movbe	rdx, qword ptr [rax + 156]
	bswap	r15
	shrd	r15, rdx, 32
	movbe	r12, qword ptr [rax + 148]
	shrd	rdx, r12, 32
	shr	r12, 32
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rsi + 8], rdx
	mov	qword ptr [rsi + 16], r12
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 24], 0
	mov	qword ptr [rbx + 120], 0
	mov	qword ptr [rbx + 104], 0
	mov	qword ptr [rbx + 112], 0
	mov	qword ptr [rbx + 96], 0
	mov	r8, qword ptr [r14 + 40]
	mov	rax, qword ptr [r8 + 16]
	mov	rdi, r14
	mov	r14, qword ptr [r8 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB6_213
.LBB6_165:                              # %OP1067.PUSH1
	mov	rax, qword ptr [r8 + 8]
	movbe	qword ptr [rax + r14 + 24], r15
	movbe	qword ptr [rax + r14 + 16], rdx
	movbe	qword ptr [rax + r14 + 8], r12
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 16]
	mov	r15, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [rbx + 24]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [r13 + 16], r10
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	mov	qword ptr [r13], r8
	mov	qword ptr [r13 + 24], r11
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	mov	qword ptr [r13 + 8], r9
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	r12, qword ptr [rdi + 40]
	mov	r10, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	r10, r14
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_214
.LBB6_166:                              # %OP1072.PUSH1
	add	r14, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	movbe	qword ptr [r15 + r14], r11
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	rsi, rbx
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_215
# %bb.167:                              # %OP1076.SLOAD
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_215
# %bb.168:                              # %OP1077.LT
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	cmp	rdx, qword ptr [rdi]
	sbb	rsi, qword ptr [rdi + 8]
	sbb	rcx, qword ptr [rdi + 16]
	sbb	rax, qword ptr [rdi + 24]
	setae	al
	movzx	eax, al
	mov	qword ptr [rdi], rax
	mov	qword ptr [rdi + 8], 0
	mov	qword ptr [rdi + 16], 0
	mov	qword ptr [rdi + 24], 0
	jb	.LBB6_194
.LBB6_169:                              # %OP1086.JUMPDEST
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	lea	rcx, [r8 + 1]
	mov	rax, r8
	shl	rax, 5
	lea	rdx, [rax + r13]
	mov	qword ptr [rbp - 128], rdx      # 8-byte Spill
	vmovups	ymm0, ymmword ptr [r13 + rax - 64]
	vmovups	ymmword ptr [r13 + rax], ymm0
	lea	rdx, [r8 + 2]
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	shl	rcx, 5
	lea	rbx, [rcx + r13]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovdqu	ymmword ptr [r13 + rcx], ymm0
	lea	rsi, [r8 + 3]
	mov	qword ptr [rbp - 136], rdx      # 8-byte Spill
	mov	rcx, rdx
	shl	rcx, 5
	lea	r10, [rcx + r13]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + rcx], ymm0
	mov	r9d, dword ptr [r13 + rax - 112]
	mov	r12, qword ptr [r13 + rax - 128]
	mov	rdx, r13
	mov	r13, qword ptr [r13 + rax - 120]
	mov	qword ptr [rbp - 176], rsi      # 8-byte Spill
	mov	rcx, rsi
	shl	rcx, 5
	lea	rsi, [rdx + rcx]
	lea	rdi, [rdx + rax]
	add	rdi, 128
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	mov	qword ptr [rdx + rcx + 8], r13
	mov	qword ptr [rdx + rcx], r12
	mov	qword ptr [rdx + rcx + 16], r9
	mov	qword ptr [rdx + rcx + 24], 0
	vmovdqu	ymmword ptr [rdx + rax + 128], ymm0
	mov	rdi, r14
	mov	r14, qword ptr [r14 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, r8
	mov	r15, qword ptr [r14 + 48]
	sub	rax, r15
	lea	rcx, [r8 + 5]
	mov	qword ptr [rbp - 160], rcx      # 8-byte Spill
	cmp	rax, 31
	mov	qword ptr [rbp - 64], rsi       # 8-byte Spill
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	jbe	.LBB6_216
.LBB6_170:                              # %OP1097.PUSH1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + r15 + 24], r12
	movbe	qword ptr [rax + r15 + 16], r13
	movbe	qword ptr [rax + r15 + 8], r9
	mov	qword ptr [rax + r15], 0
	mov	rax, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10]
	mov	rdx, qword ptr [r10 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r11, qword ptr [rbx + 8]
	mov	r14, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 120], r14      # 8-byte Spill
	mov	qword ptr [r10 + 16], r14
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	qword ptr [r10], r9
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [r10 + 24], r8
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r10 + 8], r11
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	r12, qword ptr [rdi + 40]
	mov	r11, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	r11, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r11
	mov	r14, rdi
	ja	.LBB6_217
.LBB6_171:                              # %OP1102.PUSH1
	add	r13, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 8], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r13], rax
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r10 + 16], 0
	mov	qword ptr [r10], 0
	mov	qword ptr [r10 + 24], 0
	mov	qword ptr [r10 + 8], 0
	mov	rdi, r14
	mov	rsi, rbx
	mov	r15, r10
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_468
# %bb.172:                              # %OP1106.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	mov	r10, r15
	mov	r15d, dword ptr [rax + 164]
	movbe	r13, qword ptr [rax + 156]
	bswap	r15
	shrd	r15, r13, 32
	movbe	r12, qword ptr [rax + 148]
	shrd	r13, r12, 32
	shr	r12, 32
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rsi + 8], r13
	mov	qword ptr [rsi + 16], r12
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 24], 0
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rax + 24], 0
	mov	qword ptr [rax + 8], 0
	mov	qword ptr [rax + 16], 0
	mov	qword ptr [rax], 0
	mov	rcx, qword ptr [r14 + 40]
	mov	rax, qword ptr [rcx + 16]
	mov	rdi, r14
	mov	r14, qword ptr [rcx + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB6_218
.LBB6_173:                              # %OP1114.PUSH1
	mov	rax, qword ptr [rcx + 8]
	movbe	qword ptr [rax + r14 + 24], r15
	movbe	qword ptr [rax + r14 + 16], r13
	movbe	qword ptr [rax + r14 + 8], r12
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10]
	mov	rdx, qword ptr [r10 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r8, qword ptr [rbx + 24]
	mov	r9, qword ptr [rbx]
	mov	r11, qword ptr [rbx + 8]
	mov	r14, qword ptr [rbx + 16]
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbp - 120], r14      # 8-byte Spill
	mov	qword ptr [r10 + 16], r14
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	qword ptr [r10], r9
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [r10 + 24], r8
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [r10 + 8], r11
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	r12, qword ptr [rdi + 40]
	mov	r11, qword ptr [r12 + 16]
	mov	r13, qword ptr [r12 + 48]
	sub	r11, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r11
	mov	r14, rdi
	ja	.LBB6_219
.LBB6_174:                              # %OP1119.PUSH1
	add	r13, qword ptr [r12 + 8]
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 8], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r13], rax
	add	qword ptr [rbx], 32
	adc	qword ptr [rbx + 8], 0
	adc	qword ptr [rbx + 16], 0
	adc	qword ptr [rbx + 24], 0
	mov	qword ptr [r10 + 16], 0
	mov	qword ptr [r10], 0
	mov	qword ptr [r10 + 24], 0
	mov	qword ptr [r10 + 8], 0
	mov	rdi, r14
	mov	rsi, rbx
	mov	r12, r10
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_468
# %bb.175:                              # %OP1123.PUSH1
	mov	r15, r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r12, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	mov	rsi, qword ptr [r12 + 16]
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [r14 + 16], rsi
	mov	qword ptr [r14], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	vmovdqu	ymm0, ymmword ptr [rbx]
	vmovdqu	ymmword ptr [r12 + 128], ymm0
	mov	rdi, r15
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_196
# %bb.176:                              # %OP1127.SUB
	mov	rax, qword ptr [r12 + 152]
	mov	rcx, qword ptr [r12 + 144]
	mov	rdx, qword ptr [r12 + 136]
	mov	rsi, qword ptr [r12 + 128]
	sub	rsi, qword ptr [r14]
	sbb	rdx, qword ptr [r14 + 8]
	sbb	rcx, qword ptr [r14 + 16]
	sbb	rax, qword ptr [r14 + 24]
	vmovups	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	vmovups	ymmword ptr [r14], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	mov	r14, r15
	jne	.LBB6_203
.LBB6_177:                              # %OP1135.JUMPDEST
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	lea	rcx, [r8 + 1]
	mov	rax, r8
	shl	rax, 5
	mov	rdx, r13
	add	r13, rax
	vmovups	ymm0, ymmword ptr [rdx + rax - 64]
	vmovups	ymmword ptr [rdx + rax], ymm0
	lea	rsi, [r8 + 2]
	mov	qword ptr [rbp - 128], rcx      # 8-byte Spill
	shl	rcx, 5
	lea	r12, [rdx + rcx]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_28] # xmm0 = [3,0,0,0]
	vmovdqu	ymmword ptr [rdx + rcx], ymm0
	lea	rdi, [r8 + 3]
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	mov	rcx, rsi
	shl	rcx, 5
	lea	rbx, [rdx + rcx]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rdx + rcx], ymm0
	mov	r10d, dword ptr [rdx + rax - 112]
	mov	r11, qword ptr [rdx + rax - 128]
	mov	r15, qword ptr [rdx + rax - 120]
	mov	qword ptr [rbp - 152], rdi      # 8-byte Spill
	mov	rcx, rdi
	shl	rcx, 5
	lea	r9, [rdx + rcx]
	lea	rsi, [rdx + rax]
	add	rsi, 128
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	mov	rsi, r15
	mov	qword ptr [rdx + rcx + 8], r15
	mov	qword ptr [rdx + rcx], r11
	mov	qword ptr [rdx + rcx + 16], r10
	mov	qword ptr [rdx + rcx + 24], 0
	vmovdqu	ymmword ptr [rdx + rax + 128], ymm0
	mov	rcx, r8
	mov	r15, qword ptr [r14 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rdi, r14
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	lea	rcx, [r8 + 5]
	mov	qword ptr [rbp - 120], rcx      # 8-byte Spill
	cmp	rax, 31
	mov	qword ptr [rbp - 64], r9        # 8-byte Spill
	jbe	.LBB6_200
.LBB6_178:                              # %OP1146.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], r11
	movbe	qword ptr [rax + r14 + 16], rsi
	movbe	qword ptr [rax + r14 + 8], r10
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [r12 + 24]
	mov	rsi, qword ptr [r12]
	mov	r8, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbp - 72], rsi       # 8-byte Spill
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 24], r11
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbx + 8], r8
	mov	qword ptr [r9], r15
	mov	qword ptr [r9 + 16], rcx
	mov	qword ptr [r9 + 24], rax
	mov	qword ptr [r9 + 8], rdx
	mov	rsi, qword ptr [rdi + 40]
	mov	r10, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	mov	r14, qword ptr [rsi + 48]
	sub	r10, r14
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_201
.LBB6_179:                              # %OP1151.PUSH1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	add	r14, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	movbe	qword ptr [r15 + r14], r11
	add	qword ptr [r12], 32
	adc	qword ptr [r12 + 8], 0
	adc	qword ptr [r12 + 16], 0
	adc	qword ptr [r12 + 24], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	rsi, r12
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_468
# %bb.180:                              # %OP1155.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r13 + 16]
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rdx
	vmovdqu	ymm0, ymmword ptr [r12]
	vmovdqu	ymmword ptr [r13 + 128], ymm0
	mov	rdi, r14
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_215
# %bb.181:                              # %OP1159.SUB
	mov	rax, qword ptr [r13 + 152]
	mov	rcx, qword ptr [r13 + 144]
	mov	rdx, qword ptr [r13 + 136]
	mov	rsi, qword ptr [r13 + 128]
	sub	rsi, qword ptr [r15]
	sbb	rdx, qword ptr [r15 + 8]
	sbb	rcx, qword ptr [r15 + 16]
	sbb	rax, qword ptr [r15 + 24]
	vmovups	ymm0, ymmword ptr [r13]
	mov	qword ptr [r13], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 8], rdx
	mov	qword ptr [r13 + 24], rax
	vmovups	ymmword ptr [r15], ymm0
	vmovdqu	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rsi
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rcx
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r14
	mov	rsi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB6_474
# %bb.182:                              # %OP1166.POP
	vmovups	ymm0, ymmword ptr [r13 - 64]
	vmovups	ymmword ptr [r13], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_28] # xmm0 = [3,0,0,0]
	vmovdqu	ymmword ptr [r12], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	ecx, dword ptr [r13 - 80]
	mov	rdx, qword ptr [r13 - 96]
	mov	r8, qword ptr [r13 - 88]
	mov	qword ptr [r15 + 8], r8
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15 + 24], 0
	vmovdqu	ymmword ptr [r13 + 128], ymm0
	mov	rsi, r15
	mov	r15, qword ptr [r14 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rdi, r14
	mov	r14, qword ptr [r15 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB6_202
.LBB6_183:                              # %OP1177.PUSH1
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + r14 + 24], rdx
	movbe	qword ptr [rax + r14 + 16], r8
	movbe	qword ptr [rax + r14 + 8], rcx
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	r15, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	mov	qword ptr [rbx + 16], r10
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 24], r11
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	qword ptr [rbx + 8], r9
	mov	qword ptr [rsi], r15
	mov	qword ptr [rsi + 16], rcx
	mov	qword ptr [rsi + 24], rax
	mov	qword ptr [rsi + 8], rdx
	mov	rsi, qword ptr [rdi + 40]
	mov	r10, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	mov	r14, qword ptr [rsi + 48]
	sub	r10, r14
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_204
.LBB6_184:                              # %OP1182.PUSH1
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	add	r14, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + r14 + 8], rax
	movbe	qword ptr [r15 + r14], r11
	add	qword ptr [r12], 32
	adc	qword ptr [r12 + 8], 0
	adc	qword ptr [r12 + 16], 0
	adc	qword ptr [r12 + 24], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 0
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	rsi, r12
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_468
# %bb.185:                              # %OP1186.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rsi, qword ptr [r13 + 16]
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rdx
	vmovdqu	ymm0, ymmword ptr [r12]
	vmovdqu	ymmword ptr [r13 + 128], ymm0
	mov	rdi, r14
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_215
# %bb.186:                              # %OP1190.ADD
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
	add	rdx, qword ptr [r13 + 128]
	adc	rsi, qword ptr [r13 + 136]
	adc	rcx, qword ptr [r13 + 144]
	adc	rax, qword ptr [r13 + 152]
	vmovups	ymm0, ymmword ptr [r13]
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rcx
	mov	qword ptr [r13 + 24], rax
	vmovups	ymmword ptr [r15], ymm0
	vmovdqu	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rdi, r14
	mov	rsi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB6_474
# %bb.187:                              # %OP1197.POP
	mov	eax, dword ptr [r13 - 80]
	vmovaps	xmm0, xmmword ptr [r13 - 96]
	vmovaps	xmmword ptr [r13], xmm0
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 24], 0
	mov	eax, dword ptr [r13 - 112]
	mov	rcx, qword ptr [r13 - 128]
	mov	rdx, qword ptr [r13 - 120]
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], 0
	vmovaps	ymm0, ymmword ptr [rip + .LCPI6_35] # ymm0 = [2951364421682967535,10748869590852608278,7620847484418887082,15992936130196719771]
	vmovups	ymmword ptr [rbx], ymm0
	mov	r10, qword ptr [r13 - 64]
	mov	rbx, qword ptr [r13 - 56]
	mov	r9, qword ptr [r13 - 40]
	mov	r11, qword ptr [r13 - 48]
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 24], r9
	mov	qword ptr [r15], r10
	mov	qword ptr [r15 + 8], rbx
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + 128], ymm0
	mov	r15, qword ptr [r14 + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r12, qword ptr [r15 + 48]
	sub	rax, r12
	mov	qword ptr [rbp - 72], r15       # 8-byte Spill
	cmp	rax, 95
	jbe	.LBB6_205
.LBB6_188:                              # %OP1207.MLOAD.contd
	mov	qword ptr [rbp - 128], r11      # 8-byte Spill
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	mov	qword ptr [rbp - 96], rbx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [rax + r12 + 88]
	mov	rsi, qword ptr [rax + r12 + 80]
	mov	r8, qword ptr [rax + r12 + 64]
	mov	rdi, qword ptr [rax + r12 + 72]
	movbe	qword ptr [r13 + 152], r8
	movbe	qword ptr [r13 + 136], rsi
	movbe	qword ptr [r13 + 128], rcx
	movbe	qword ptr [r13 + 144], rdi
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	shl	rax, 5
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
	movbe	qword ptr [r14 + rax + 24], r8
	movbe	qword ptr [r14 + rax + 8], rsi
	movbe	qword ptr [r14 + rax + 16], rdi
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rdx, 6
	movbe	qword ptr [r14 + rax], rcx
	mov	qword ptr [rbp - 136], rdx      # 8-byte Spill
	shl	rdx, 5
	mov	qword ptr [r14 + rdx + 24], r9
	mov	qword ptr [r14 + rdx + 8], rbx
	mov	qword ptr [r14 + rdx + 16], r11
	mov	qword ptr [r14 + rdx], r10
	movbe	qword ptr [r13 + 248], r8
	bswap	r8
	movbe	qword ptr [r13 + 240], rdi
	bswap	rdi
	movbe	qword ptr [r13 + 232], rsi
	mov	r9, rsi
	bswap	r9
	movbe	qword ptr [r13 + 224], rcx
	mov	r15, rcx
	bswap	r15
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rsi + 16]
	mov	rbx, qword ptr [rsi + 48]
	sub	rcx, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	r10, -1
	cmovb	rsi, r10
	xor	r11d, r11d
	neg	r9
	mov	r9d, 0
	sbb	r9, rdi
	sbb	r11, r8
	cmovb	rsi, r10
	lea	r12, [r14 + rax]
	add	r14, rdx
	cmp	rsi, rcx
	ja	.LBB6_207
.LBB6_189:                              # %OP1212.PUSH1
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	add	rbx, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 24], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r14], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	vmovups	ymm0, ymmword ptr [r14]
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	rdi, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	rdi, rbx
	cmp	rdi, 95
	jbe	.LBB6_208
.LBB6_190:                              # %OP1218.MLOAD.contd
	mov	r10, qword ptr [r15 + 8]
	mov	r8, qword ptr [r10 + rbx + 88]
	mov	rdi, qword ptr [r10 + rbx + 80]
	mov	r9, qword ptr [r10 + rbx + 64]
	mov	r10, qword ptr [r10 + rbx + 72]
	mov	r11, r9
	bswap	r11
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 24], rax
	mov	rbx, r8
	bswap	rbx
	sub	rdx, rbx
	mov	rbx, rdi
	bswap	rbx
	sbb	rsi, rbx
	mov	rbx, r10
	bswap	rbx
	sbb	rcx, rbx
	sbb	rax, r11
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 24], rax
	movbe	qword ptr [r13 + 144], r10
	movbe	qword ptr [r13 + 128], r8
	movbe	qword ptr [r13 + 152], r9
	movbe	qword ptr [r13 + 136], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r13
	mov	edx, 3
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB6_449
# %bb.191:                              # %OP1224.PUSH1
	vmovups	ymm0, ymmword ptr [r13 - 32]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r13 - 160]
	mov	rcx, qword ptr [r13 - 152]
	mov	rsi, qword ptr [r13 - 136]
	mov	rdx, qword ptr [r13 - 144]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_24] # xmm0 = [1,0,0,0]
	vmovups	ymmword ptr [r13 - 160], ymm0
	vmovdqa	xmm0, xmmword ptr [r13 - 128]
	vmovaps	xmm1, xmmword ptr [r13 - 112]
	mov	qword ptr [r13 - 112], rdx
	mov	qword ptr [r13 - 104], rsi
	mov	qword ptr [r13 - 128], rax
	mov	qword ptr [r13 - 120], rcx
	vmovaps	xmmword ptr [r13 - 16], xmm1
	vmovdqa	xmmword ptr [r13 - 32], xmm0
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rdi, -4
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB6_321
.LBB6_192:                              # %OP980.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi], ymm0
	vmovdqu	ymmword ptr [r12], ymm0
	jmp	.LBB6_193
.LBB6_194:                              # %OP1083.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rdi], ymm0
	vmovdqu	ymmword ptr [rbx], ymm0
	add	rbx, -32
	mov	rdi, r14
	mov	rsi, rbx
	jmp	.LBB6_18
.LBB6_196:
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_197:                              # %resize.i7651
	mov	qword ptr [rbp - 64], rsi       # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [rbp - 104], r10      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 72]        # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_146
# %bb.198:
	mov	qword ptr [rbp - 48], r13       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_199:                              # %resize.i7666
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_147
	jmp	.LBB6_92
.LBB6_200:                              # %resize.i7861
	mov	qword ptr [rbp - 96], rsi       # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	mov	qword ptr [rbp - 88], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_178
	jmp	.LBB6_203
.LBB6_201:                              # %resize.i7876
	mov	qword ptr [rbp - 160], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 160]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_179
	jmp	.LBB6_468
.LBB6_202:                              # %resize.i7891
	mov	esi, 32
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_183
.LBB6_203:
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_204:                              # %resize.i7906
	mov	qword ptr [rbp - 152], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 152]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_184
	jmp	.LBB6_468
.LBB6_205:                              # %resize.i7922
	mov	esi, 96
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_215
# %bb.206:                              # %resize.i7922.OP1207.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r9, qword ptr [rax + 24]
	mov	r11, qword ptr [rax + 16]
	mov	r10, qword ptr [rax]
	mov	rbx, qword ptr [rax + 8]
	mov	rax, qword ptr [r14 + 40]
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	jmp	.LBB6_188
.LBB6_207:                              # %resize.i7937
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB6_189
	jmp	.LBB6_468
.LBB6_208:                              # %resize.i7953
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_215
# %bb.209:                              # %resize.i7953.OP1218.MLOAD.contd_crit_edge
	mov	r14, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	jmp	.LBB6_190
.LBB6_210:                              # %resize.i7741
	mov	esi, 32
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB6_162
	jmp	.LBB6_211
.LBB6_212:                              # %resize.i7756
	mov	qword ptr [rbp - 128], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_163
	jmp	.LBB6_215
.LBB6_213:                              # %resize.i7771
	mov	esi, 32
	mov	qword ptr [rbp - 72], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	test	al, al
	je	.LBB6_165
	jmp	.LBB6_211
.LBB6_214:                              # %resize.i7786
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_166
.LBB6_215:
	mov	rcx, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_216:                              # %resize.i7801
	mov	esi, 32
	mov	qword ptr [rbp - 88], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB6_170
	jmp	.LBB6_461
.LBB6_217:                              # %resize.i7816
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB6_171
	jmp	.LBB6_468
.LBB6_218:                              # %resize.i7831
	mov	esi, 32
	mov	qword ptr [rbp - 88], rcx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB6_173
	jmp	.LBB6_461
.LBB6_219:                              # %resize.i7846
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB6_174
	jmp	.LBB6_468
.LBB6_220:                              # %resize.i7681
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	esi, 32
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 128]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	test	al, al
	je	.LBB6_152
	jmp	.LBB6_449
.LBB6_221:                              # %resize.i7696
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 152], r10      # 8-byte Spill
	mov	qword ptr [rbp - 160], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 160]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 152]      # 8-byte Reload
	test	al, al
	je	.LBB6_153
	jmp	.LBB6_468
.LBB6_222:                              # %resize.i7711
	mov	esi, 32
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r9, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	test	al, al
	je	.LBB6_155
	jmp	.LBB6_449
.LBB6_223:                              # %resize.i7726
	mov	qword ptr [rbp - 96], r11       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_156
	jmp	.LBB6_468
.LBB6_193:                              # %OP980.PUSH1
	mov	rdi, r14
	jmp	.LBB6_18
.LBB6_211:
	mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_224:                              # %OP347.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_225:                              # %OP347.JUMPDEST
	mov	rcx, qword ptr [r8 + 96]
	mov	rdx, qword ptr [r8 + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [r8 + 120]
	or	rcx, qword ptr [r8 + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	jne	.LBB6_16
	jmp	.LBB6_227
.LBB6_226:                              # %OP355.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_227:                              # %OP355.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, r14
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_32] # xmm0 = [612,0,0,0]
	vmovups	ymmword ptr [r13 + rbx], ymm0
	add	r14, 2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13 + rbx + 32], ymm0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	shl	r14, 5
	vmovups	ymmword ptr [r13 + r14], ymm0
	vmovups	ymmword ptr [r13 + rbx + 96], ymm0
	mov	r9, qword ptr [r8 + 72]
	sub	rsp, 8
	lea	rdi, [rbp - 336]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 312]
	mov	rcx, qword ptr [rbp - 336]
	mov	rdx, qword ptr [rbp - 328]
	mov	rsi, qword ptr [rbp - 320]
	mov	qword ptr [r13 + rbx + 144], 0
	mov	qword ptr [r13 + rbx + 128], 32
	mov	qword ptr [r13 + rbx + 152], 0
	mov	qword ptr [r13 + rbx + 136], 0
	mov	qword ptr [r13 + rbx + 48], rsi
	mov	qword ptr [r13 + rbx + 32], rcx
	mov	qword ptr [r13 + rbx + 56], rax
	mov	qword ptr [r13 + rbx + 40], rdx
	mov	qword ptr [r13 + r14], 4
	mov	qword ptr [r13 + r14 + 16], 0
	mov	qword ptr [r13 + r14 + 8], 0
	mov	qword ptr [r13 + r14 + 24], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_17] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [r13 + rbx + 96], ymm0
	jmp	.LBB6_432
.LBB6_228:                              # %OP373.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_229:                              # %OP373.JUMPDEST
	mov	rcx, qword ptr [r8 + 96]
	mov	rdx, qword ptr [r8 + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [r8 + 120]
	or	rcx, qword ptr [r8 + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	jne	.LBB6_16
.LBB6_230:                              # %OP381.JUMPDEST
	mov	rcx, r14
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rax, [rdx + 1]
	shl	rdx, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_30] # xmm0 = [633,0,0,0]
	vmovdqu	ymmword ptr [r13 + rdx], ymm0
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
.LBB6_231:                              # %OP1356.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [rbx + 1]
	mov	r12, rbx
	shl	r12, 5
	add	rbx, 2
	mov	rax, r15
	shl	rax, 5
	lea	r14, [rax + r13]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_31] # xmm0 = [2,0]
	vmovdqu	ymmword ptr [r13 + rax], ymm0
	mov	rdi, rcx
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_287
# %bb.232:                              # %OP1361.SWAP1
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	add	r12, r13
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 16]
	mov	rdi, qword ptr [r12 + 24]
	mov	r8, qword ptr [r12]
	mov	r9, qword ptr [r12 + 8]
	mov	r10, qword ptr [r12 + 16]
	mov	qword ptr [r12 + 16], rsi
	mov	qword ptr [r12], rcx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r14 + 16], r10
	mov	qword ptr [r14], r8
	mov	qword ptr [r14 + 24], rdi
	mov	qword ptr [r14 + 8], r9
	mov	rax, rbx
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_22] # xmm0 = [256,0,0,0]
	vmovdqu	ymmword ptr [r13 + rax], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_exp@PLT
	test	al, al
	jne	.LBB6_287
# %bb.233:                              # %OP1364.SWAP1_udiv-special-cases
	mov	rdi, qword ptr [r14 + 24]
	mov	rsi, qword ptr [r14]
	mov	rbx, qword ptr [r14 + 8]
	mov	qword ptr [rbp - 168], r14      # 8-byte Spill
	mov	r8, qword ptr [r14 + 16]
	mov	r15, qword ptr [r12 + 24]
	mov	r11, qword ptr [r12]
	mov	rax, qword ptr [r12 + 8]
	mov	qword ptr [rbp - 176], r12      # 8-byte Spill
	mov	r14, qword ptr [r12 + 16]
	mov	r12, rax
	mov	rax, rbx
	or	rax, rdi
	mov	rcx, rsi
	or	rcx, r8
	or	rcx, rax
	sete	cl
	mov	rax, r12
	or	rax, r15
	mov	rdx, r11
	or	rdx, r14
	or	rdx, rax
	sete	al
	or	al, cl
	lzcnt	rcx, rdi
	lzcnt	rdx, r8
	add	rdx, 64
	test	rdi, rdi
	cmovne	rdx, rcx
	lzcnt	rcx, rbx
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	lzcnt	r9, rsi
	add	r9, 64
	test	rbx, rbx
	cmovne	r9, rcx
	sub	r9, -128
	mov	rcx, r8
	or	rcx, rdi
	cmovne	r9, rdx
	lzcnt	rcx, r15
	lzcnt	rdx, r14
	add	rdx, 64
	test	r15, r15
	cmovne	rdx, rcx
	lzcnt	rcx, r12
	lzcnt	rsi, r11
	add	rsi, 64
	test	r12, r12
	cmovne	rsi, rcx
	sub	rsi, -128
	mov	r10, r14
	mov	rcx, r14
	or	rcx, r15
	cmovne	rsi, rdx
	xor	edx, edx
	sub	r9, rsi
	mov	rsi, r11
	mov	r11d, 0
	sbb	r11, r11
	mov	r14d, 0
	sbb	r14, r14
	mov	r13d, 0
	sbb	r13, r13
	mov	ecx, 255
	cmp	rcx, r9
	mov	ecx, 0
	sbb	rcx, r11
	mov	ecx, 0
	sbb	rcx, r14
	mov	ecx, 0
	sbb	rcx, r13
	setb	cl
	or	cl, al
	cmove	rdx, rsi
	jne	.LBB6_239
# %bb.234:                              # %OP1364.SWAP1_udiv-special-cases
	mov	rax, r9
	xor	rax, 255
	or	rax, r14
	mov	rcx, r11
	or	rcx, r13
	or	rcx, rax
	je	.LBB6_239
# %bb.235:                              # %udiv-bb18880
	mov	qword ptr [rbp - 104], r8       # 8-byte Spill
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rax, r9
	add	r9, 1
	adc	r11, 0
	adc	r14, 0
	adc	r13, 0
	mov	qword ptr [rbp - 592], rsi
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 624], ymm0
	mov	qword ptr [rbp - 584], r12
	mov	qword ptr [rbp - 576], r10
	mov	qword ptr [rbp - 568], r15
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rdx, al
	mov	rax, qword ptr [rbp + rdx - 576]
	mov	qword ptr [rbp - 120], r12      # 8-byte Spill
	mov	r12, qword ptr [rbp + rdx - 568]
	shld	r12, rax, cl
	mov	rdi, qword ptr [rbp + rdx - 592]
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	rsi, qword ptr [rbp + rdx - 584]
	mov	rdx, rsi
	shld	rdx, rdi, cl
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	r8, r11
	mov	qword ptr [rbp - 184], r13      # 8-byte Spill
	or	r8, r13
	mov	qword ptr [rbp - 64], r9        # 8-byte Spill
	mov	qword ptr [rbp - 72], r14       # 8-byte Spill
	or	r9, r14
	xor	r14d, r14d
	or	r9, r8
	shlx	r13, rdi, rcx
	je	.LBB6_238
# %bb.236:                              # %udiv-preheader8879
	shlx	rax, rax, rcx
	not	cl
	shr	rsi
	shrx	rsi, rsi, rcx
	or	rsi, rax
	vmovdqu	ymmword ptr [rbp - 528], ymm0
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 560], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [rbp - 552], rax
	mov	qword ptr [rbp - 544], r10
	mov	qword ptr [rbp - 536], r15
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	ecx, eax
	and	cl, 7
                                        # kill: def $al killed $al killed $rax
	shr	al, 3
	movzx	eax, al
	mov	r8, qword ptr [rbp + rax - 536]
	mov	r9, qword ptr [rbp + rax - 544]
	mov	r15, r9
	shrd	r15, r8, cl
	mov	rdi, qword ptr [rbp + rax - 560]
	mov	r10, qword ptr [rbp + rax - 552]
	shrx	r14, r10, rcx
	shrx	rax, r8, rcx
	mov	r8d, ecx
	not	r8b
	add	r9, r9
	mov	r11, rbx
	shlx	rbx, r9, r8
	or	rbx, r14
                                        # kill: def $cl killed $cl killed $rcx
	shrd	rdi, r10, cl
	mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload
	add	rcx, -1
	mov	qword ptr [rbp - 128], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 120], r11      # 8-byte Spill
	adc	r11, -1
	mov	qword ptr [rbp - 136], r11      # 8-byte Spill
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	adc	rcx, -1
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	rcx, r9
	adc	rcx, -1
	mov	qword ptr [rbp - 160], rcx      # 8-byte Spill
	xor	r14d, r14d
	xor	ecx, ecx
	xor	r10d, r10d
	xor	r8d, r8d
	mov	r11, qword ptr [rbp - 184]      # 8-byte Reload
	.p2align	4, 0x90
.LBB6_237:                              # %udiv-do-while8878
                                        # =>This Inner Loop Header: Depth=1
	shld	rax, r15, 1
	shld	r15, rbx, 1
	shld	rbx, rdi, 1
	shld	rdi, r12, 1
	shld	r12, rsi, 1
	or	r12, r8
	shld	rsi, rdx, 1
	or	rsi, r10
	shld	rdx, r13, 1
	or	rdx, rcx
	add	r13, r13
	or	r13, r14
	cmp	qword ptr [rbp - 128], rdi      # 8-byte Folded Reload
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	sbb	rcx, rbx
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	rcx, r15
	mov	rcx, qword ptr [rbp - 160]      # 8-byte Reload
	sbb	rcx, rax
	sar	rcx, 63
	mov	r14d, ecx
	and	r14d, 1
	mov	r8, rcx
	and	r8, r9
	mov	r10, rcx
	and	r10, qword ptr [rbp - 104]      # 8-byte Folded Reload
	mov	r9, rcx
	and	r9, qword ptr [rbp - 120]       # 8-byte Folded Reload
	and	rcx, qword ptr [rbp - 88]       # 8-byte Folded Reload
	sub	rdi, rcx
	sbb	rbx, r9
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	sbb	r15, r10
	sbb	rax, r8
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	add	r8, -1
	mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload
	adc	rcx, -1
	mov	r10, qword ptr [rbp - 72]       # 8-byte Reload
	adc	r10, -1
	adc	r11, -1
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	or	rcx, r11
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	or	r8, r10
	or	r8, rcx
	mov	ecx, 0
	mov	r10d, 0
	mov	r8d, 0
	jne	.LBB6_237
.LBB6_238:                              # %udiv-loop-exit8877
	add	r13, r13
	or	r13, r14
	mov	rdx, r13
.LBB6_239:                              # %udiv-end8876
	movzx	eax, dl
	vpxor	xmm0, xmm0, xmm0
	mov	rsi, qword ptr [rbp - 176]      # 8-byte Reload
	vmovdqu	xmmword ptr [rsi + 8], xmm0
	mov	qword ptr [rsi], rax
	mov	qword ptr [rsi + 24], 0
	mov	rdx, qword ptr [rsi - 16]
	mov	rax, qword ptr [rsi - 32]
	mov	rcx, qword ptr [rsi - 24]
	mov	rsi, qword ptr [rsi - 8]
	mov	rdi, qword ptr [rbp - 168]      # 8-byte Reload
	mov	qword ptr [rdi + 24], rsi
	mov	qword ptr [rdi + 8], rcx
	mov	qword ptr [rdi + 16], rdx
	mov	qword ptr [rdi], rax
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	.LBB6_321
.LBB6_240:                              # %OP385.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	r9, r14
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_484
# %bb.241:                              # %OP387.MLOAD.contd
	add	r14, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [rax + 2]
	mov	qword ptr [rbp - 64], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r13 + r12 + 16], rdx
	mov	qword ptr [r13 + r12], rdi
	mov	qword ptr [r13 + r12 + 24], rcx
	mov	qword ptr [r13 + r12 + 8], rsi
	movzx	r8d, byte ptr [r14 - 32]
	mov	r15, r13
	mov	r13, rbx
	shl	r13, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13], r8
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 104], rsi
	jmp	.LBB6_131
.LBB6_243:                              # %OP408.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_244:                              # %OP408.JUMPDEST
	mov	rcx, qword ptr [r8 + 96]
	mov	rdx, qword ptr [r8 + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [r8 + 120]
	or	rcx, qword ptr [r8 + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_246
	jmp	.LBB6_105
.LBB6_245:                              # %OP416.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_246:                              # %OP416.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rbx, r14
	shl	rbx, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_27] # xmm0 = [716,0,0,0]
	vmovups	ymmword ptr [r13 + rbx], ymm0
	add	r14, 2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13 + rbx + 32], ymm0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	shl	r14, 5
	vmovups	ymmword ptr [r13 + r14], ymm0
	vmovups	ymmword ptr [r13 + rbx + 96], ymm0
	mov	r9, qword ptr [r8 + 72]
	sub	rsp, 8
	mov	rax, r8
	lea	rdi, [rbp - 880]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	push	qword ptr [rax + 80]
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 864]
	mov	rcx, qword ptr [rbp - 880]
	mov	rdx, qword ptr [rbp - 872]
	mov	qword ptr [r13 + rbx + 152], 0
	mov	qword ptr [r13 + rbx + 136], 0
	mov	qword ptr [r13 + rbx + 144], 0
	mov	qword ptr [r13 + rbx + 128], 32
	mov	qword ptr [r13 + rbx + 40], rdx
	mov	qword ptr [r13 + rbx + 48], rax
	mov	qword ptr [r13 + rbx + 32], rcx
	mov	qword ptr [r13 + rbx + 56], 0
	mov	qword ptr [r13 + r14 + 8], 0
	mov	qword ptr [r13 + r14 + 24], 0
	mov	qword ptr [r13 + r14], 4
	mov	qword ptr [r13 + r14 + 16], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_17] # xmm0 = [36,0]
	vmovdqu	ymmword ptr [r13 + rbx + 96], ymm0
.LBB6_247:                              # %OP1370.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rdx, [rax + 1]
	shl	rax, 5
	lea	rbx, [rax + r13]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_28] # xmm0 = [3,0,0,0]
	vmovups	ymmword ptr [r13 + rax], ymm0
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	rax, rdx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13 + rax], ymm0
	lea	r15, [rax + r13]
	mov	r14, qword ptr [rcx + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rax, r12
	cmp	rax, 63
	jbe	.LBB6_252
.LBB6_248:                              # %OP1374.DUP1
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI6_29] # ymm0 = [0,0,0,216172782113783808]
	vmovups	ymmword ptr [rax + r12 + 32], ymm0
	lea	rax, [rbx - 32]
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	rdx, qword ptr [rbx - 16]
	mov	rdi, qword ptr [rbx - 32]
	mov	r13, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 8]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], r13
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	r12, qword ptr [rcx + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB6_253
.LBB6_249:                              # %OP1377.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r14 + 24], rdi
	movbe	qword ptr [rax + r14 + 16], r13
	movbe	qword ptr [rax + r14 + 8], rdx
	movbe	qword ptr [rax + r14], rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rcx
	mov	rdi, rcx
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_82
# %bb.250:                              # %OP1380.PUSH1
	mov	rax, qword ptr [rbx - 16]
	mov	rcx, qword ptr [rbx - 32]
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 8]
	mov	qword ptr [r15 + 24], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], rcx
	mov	rax, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 16]
	mov	qword ptr [rbx - 16], rsi
	mov	qword ptr [rbx - 8], rcx
	mov	qword ptr [rbx - 32], rdx
	mov	qword ptr [rbx - 24], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqa	xmmword ptr [rbx], xmm0
	vmovdqa	xmmword ptr [rbx + 16], xmm0
	mov	rdi, r14
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_449
# %bb.251:                              # %OP1386.DUP2
	mov	rax, qword ptr [rbx - 64]
	mov	rcx, qword ptr [rbx - 56]
	mov	rdx, qword ptr [rbx - 48]
	mov	rsi, qword ptr [rbx - 40]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [rbx], rax
	jmp	.LBB6_321
.LBB6_252:                              # %resize.i8091
	mov	esi, 64
	mov	r13, rcx
	mov	rdi, rcx
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, r13
	test	al, al
	je	.LBB6_248
	jmp	.LBB6_449
.LBB6_253:                              # %resize.i8105
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 72], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_249
	jmp	.LBB6_449
.LBB6_254:                              # %OP434.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	r9, r14
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_484
# %bb.255:                              # %OP436.MLOAD.contd
	add	r14, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [rax + 2]
	mov	qword ptr [rbp - 64], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r13 + r12 + 16], rdx
	mov	qword ptr [r13 + r12], rdi
	mov	qword ptr [r13 + r12 + 24], rcx
	mov	qword ptr [r13 + r12 + 8], rsi
	mov	r8, qword ptr [r14 - 32]
	mov	rax, qword ptr [r14 - 16]
	mov	r9, qword ptr [r14 - 24]
	mov	r10, qword ptr [r14 - 8]
	mov	r15, r13
	mov	r13, rbx
	shl	r13, 5
	mov	qword ptr [r15 + r13 + 24], r10
	mov	qword ptr [r15 + r13 + 8], r9
	mov	qword ptr [r15 + r13], r8
	mov	qword ptr [r15 + r13 + 16], rax
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 112], rdx
	mov	qword ptr [r14 + 96], rdi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB6_287
.LBB6_256:                              # %OP441.PUSH1
	add	r12, r15
	add	r13, r15
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	rdx, qword ptr [r12]
	mov	rsi, qword ptr [r12 + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r14 - 32]
	mov	qword ptr [r14 - 32], rdx
	mov	qword ptr [r14 - 24], rsi
	mov	qword ptr [r14 - 16], rcx
	mov	qword ptr [r14 - 8], rax
	vmovups	ymmword ptr [r12], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_211
# %bb.257:                              # %OP447.MLOAD.contd
	lea	rsi, [r14 - 32]
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	r8, qword ptr [r14 - 8]
	mov	r9, qword ptr [r14 - 32]
	mov	r10, qword ptr [r14 - 24]
	mov	r11, qword ptr [r14 - 16]
	mov	qword ptr [r12 + 16], r11
	mov	qword ptr [r12], r9
	mov	qword ptr [r12 + 24], r8
	mov	qword ptr [r12 + 8], r10
	sub	r9, rdx
	sbb	r10, rdi
	sbb	r11, rcx
	sbb	r8, rax
	mov	qword ptr [r14 - 32], r9
	mov	qword ptr [r14 - 24], r10
	mov	qword ptr [r14 - 16], r11
	mov	qword ptr [r14 - 8], r8
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rdi
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	edx, 2
	call	__revmc_builtin_do_return@PLT
	mov	ecx, eax
	mov	al, 2
	test	cl, cl
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	jne	.LBB6_259
.LBB6_258:                              # %select.end8976
	mov	rcx, rdx
	dec	rcx
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_259:                              # %select.false8977
	mov	eax, ecx
	jmp	.LBB6_258
.LBB6_260:                              # %OP453.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_261:                              # %OP453.JUMPDEST
	mov	rcx, qword ptr [r8 + 96]
	mov	rdx, qword ptr [r8 + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [r8 + 120]
	or	rcx, qword ptr [r8 + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_394
	jmp	.LBB6_16
.LBB6_262:                              # %OP465.JUMPDEST
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r15, [r12 + 1]
	mov	r9, r14
	mov	r14, r12
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovups	ymmword ptr [r13 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_271
# %bb.263:                              # %OP467.MLOAD.contd
	add	r14, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15], rdi
	mov	qword ptr [r13 + r15 + 24], rcx
	mov	qword ptr [r13 + r15 + 8], rsi
	lea	rbx, [r12 + 3]
	mov	r15, r12
	mov	r12, rbx
	shl	r12, 5
	mov	rax, rdi
	add	rax, 32
	mov	r8, rsi
	adc	r8, 0
	mov	r9, rdx
	adc	r9, 0
	mov	r10, rcx
	adc	r10, 0
	mov	qword ptr [r14 + 64], rax
	mov	qword ptr [r14 + 72], r8
	mov	qword ptr [r14 + 80], r9
	mov	qword ptr [r14 + 88], r10
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 136], rsi
	mov	qword ptr [r14 + 128], rdi
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsp], xmm0
	mov	r8d, 32
	xor	r9d, r9d
	vzeroupper
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB6_287
# %bb.264:                              # %OP477.DUP4
	mov	r11, r15
	add	r12, r13
	add	r15, 5
	mov	rdx, qword ptr [r14 - 16]
	mov	rdi, qword ptr [r14 - 32]
	mov	rsi, qword ptr [r14 - 24]
	mov	rcx, qword ptr [r14 - 8]
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rdx
	mov	qword ptr [r12], rdi
	mov	rax, qword ptr [r14 + 72]
	mov	r8, qword ptr [r14 + 88]
	mov	r9, qword ptr [r14 + 64]
	mov	r10, qword ptr [r14 + 80]
	mov	qword ptr [r14 + 144], r10
	mov	qword ptr [r14 + 128], r9
	mov	qword ptr [r14 + 152], r8
	mov	qword ptr [r14 + 136], rax
	lea	rax, [r11 + 6]
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	shl	r15, 5
	mov	qword ptr [r13 + r15 + 16], rdx
	mov	qword ptr [r13 + r15 + 24], rcx
	mov	qword ptr [r13 + r15], rdi
	mov	qword ptr [r13 + r15 + 8], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_211
# %bb.265:                              # %OP480.MLOAD.contd
	add	r15, r13
	mov	rax, qword ptr [rbx + 16]
	mov	r8, qword ptr [rbx]
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 24]
	mov	qword ptr [r15 + 24], r10
	mov	qword ptr [r15 + 8], r9
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r8
	mov	rsi, qword ptr [r14 + 136]
	mov	rcx, qword ptr [r14 + 152]
	mov	rdi, qword ptr [r14 + 128]
	mov	rdx, qword ptr [r14 + 144]
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	shl	rbx, 5
	mov	qword ptr [r13 + rbx + 16], rdx
	mov	qword ptr [r13 + rbx], rdi
	mov	qword ptr [r13 + rbx + 24], rcx
	mov	qword ptr [r13 + rbx + 8], rsi
	sub	rsp, 8
	push	qword ptr [rbp - 56]            # 8-byte Folded Reload
	push	r10
	push	rax
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	jne	.LBB6_82
# %bb.266:                              # %OP483.PUSH1
	mov	qword ptr [rbp - 64], rbx       # 8-byte Spill
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rax, qword ptr [r14 + 152]
	mov	rcx, qword ptr [r14 + 144]
	mov	rdx, qword ptr [r14 + 128]
	mov	rsi, qword ptr [r14 + 136]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 + 72], rsi
	mov	qword ptr [r14 + 88], rax
	mov	qword ptr [r14 + 64], rdx
	mov	qword ptr [r14 + 80], rcx
	mov	rsi, qword ptr [r12 + 8]
	mov	rcx, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 16]
	mov	qword ptr [r14 + 144], rdx
	mov	qword ptr [r14 + 128], rdi
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], rsi
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	r8, rbx
	mov	r9, qword ptr [rbp - 56]        # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_82
# %bb.267:                              # %OP488.MLOAD.contd
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 64]       # 8-byte Reload
	add	r11, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [r12 + 24]
	mov	rdi, qword ptr [r12 + 16]
	mov	rax, qword ptr [r12]
	mov	r8, qword ptr [r12 + 8]
	add	rax, 32
	adc	r8, 0
	adc	rdi, 0
	adc	rsi, 0
	mov	qword ptr [r12], rax
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 8], r8
	mov	qword ptr [r12 + 24], rsi
	mov	r9, qword ptr [rbx + 8]
	mov	r10, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 144], r10
	mov	qword ptr [r14 + 128], rdx
	mov	qword ptr [r14 + 152], rcx
	mov	qword ptr [r14 + 136], r9
	mov	qword ptr [r15 + 16], r10
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rcx
	mov	qword ptr [r15 + 8], r9
	vmovdqu	ymm0, ymmword ptr [r14 + 64]
	vmovdqu	ymmword ptr [r11], ymm0
	mov	qword ptr [r14 + 248], rsi
	mov	qword ptr [r14 + 240], rdi
	mov	qword ptr [r14 + 232], r8
	mov	qword ptr [r14 + 224], rax
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r14 + 256], ymm0
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	add	rax, 9
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	jmp	.LBB6_268
.LBB6_271:
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_268:                              # %OP497.JUMPDEST.preheader
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [r14 + 1]
	shl	r14, 5
	mov	r10, r8
	shl	r10, 5
	mov	rax, qword ptr [r13 + r14 - 8]
	mov	rcx, qword ptr [r13 + r14 - 16]
	mov	rdi, r13
	mov	r13, qword ptr [r13 + r14 - 32]
	cmp	r13, qword ptr [rdi + r14 - 128]
	mov	rdx, qword ptr [rdi + r14 - 24]
	mov	rsi, rdx
	sbb	rsi, qword ptr [rdi + r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [rdi + r14 - 112]
	mov	qword ptr [rdi + r10 + 16], rcx
	mov	qword ptr [rdi + r10], r13
	mov	rsi, rax
	sbb	rsi, qword ptr [rdi + r14 - 104]
	mov	qword ptr [rdi + r10 + 24], rax
	mov	qword ptr [rdi + r10 + 8], rdx
	setae	sil
	movzx	esi, sil
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rdi + r14 + 8], xmm0
	mov	qword ptr [rdi + r14], rsi
	mov	qword ptr [rdi + r14 + 24], 0
	jae	.LBB6_74
# %bb.272:                              # %OP504.DUP1.lr.ph
	mov	qword ptr [rbp - 96], r8        # 8-byte Spill
	add	r14, rdi
	add	r10, rdi
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_273:                              # %OP504.DUP1
                                        # =>This Inner Loop Header: Depth=1
	mov	rdi, qword ptr [r14 - 40]
	mov	rbx, qword ptr [r14 - 64]
	mov	r9, qword ptr [r14 - 56]
	mov	r8, qword ptr [r14 - 48]
	mov	qword ptr [r10 + 16], r8
	mov	qword ptr [r10], rbx
	mov	qword ptr [r10 + 24], rdi
	mov	qword ptr [r10 + 8], r9
	add	rbx, r13
	adc	r9, rdx
	adc	r8, rcx
	adc	rdi, rax
	mov	qword ptr [r14], rbx
	mov	qword ptr [r14 + 8], r9
	mov	qword ptr [r14 + 16], r8
	mov	qword ptr [r14 + 24], rdi
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rsi + 40]
	mov	r10, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r10, r15
	mov	rsi, rbx
	add	rsi, 32
	mov	r11, -1
	cmovb	rsi, r11
	neg	r9
	mov	r9d, 0
	sbb	r9, r8
	mov	r8d, 0
	sbb	r8, rdi
	cmovb	rsi, r11
	mov	qword ptr [rbp - 64], r12       # 8-byte Spill
	cmp	rsi, r10
	ja	.LBB6_277
.LBB6_274:                              # %OP507.MLOAD.contd
                                        #   in Loop: Header=BB6_273 Depth=1
	add	r15, qword ptr [r12 + 8]
	mov	r12, qword ptr [rbx + r15 + 16]
	mov	rsi, qword ptr [rbx + r15 + 24]
	mov	rdi, qword ptr [rbx + r15]
	mov	rbx, qword ptr [rbx + r15 + 8]
	movbe	qword ptr [r14 + 16], rbx
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	movbe	qword ptr [r14], rsi
	mov	qword ptr [rbp - 72], rdi       # 8-byte Spill
	movbe	qword ptr [r14 + 24], rdi
	movbe	qword ptr [r14 + 8], r12
	mov	rsi, qword ptr [r14 - 72]
	mov	rdi, qword ptr [r14 - 96]
	mov	r8, qword ptr [r14 - 88]
	mov	r9, qword ptr [r14 - 80]
	mov	qword ptr [r14 + 64], rdi
	add	r13, rdi
	mov	qword ptr [r14 + 80], r9
	mov	qword ptr [r14 + 88], rsi
	mov	qword ptr [r14 + 72], r8
	adc	rdx, r8
	adc	rcx, r9
	adc	rax, rsi
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r10], r13
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10 + 24], rax
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	mov	rdi, qword ptr [r9 + 16]
	mov	r15, qword ptr [r9 + 48]
	sub	rdi, r15
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	mov	ecx, 0
	sbb	rcx, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	mov	rcx, r9
	ja	.LBB6_279
.LBB6_275:                              # %OP512.PUSH1
                                        #   in Loop: Header=BB6_273 Depth=1
	add	r15, qword ptr [rcx + 8]
	mov	qword ptr [r13 + r15 + 8], rbx
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [r13 + r15], rax
	mov	qword ptr [r13 + r15 + 16], r12
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r13 + r15 + 24], rax
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r13, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	add	r13, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r14 - 24], rdx
	mov	qword ptr [r14 - 8], rax
	mov	qword ptr [r14 - 32], r13
	mov	qword ptr [r14 - 16], rcx
	cmp	r13, qword ptr [r14 - 128]
	mov	rsi, rdx
	sbb	rsi, qword ptr [r14 - 120]
	mov	rsi, rcx
	sbb	rsi, qword ptr [r14 - 112]
	mov	rsi, rax
	sbb	rsi, qword ptr [r14 - 104]
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [r10 + 8], rdx
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r13
	setae	sil
	movzx	esi, sil
	vmovdqu	xmmword ptr [r14 + 8], xmm0
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], 0
	jb	.LBB6_273
	jmp	.LBB6_87
.LBB6_277:                              # %resize.i7300
                                        #   in Loop: Header=BB6_273 Depth=1
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_92
# %bb.278:                              # %resize.i7300.OP507.MLOAD.contd_crit_edge
                                        #   in Loop: Header=BB6_273 Depth=1
	mov	rax, qword ptr [r14 - 8]
	mov	rcx, qword ptr [r14 - 16]
	mov	r13, qword ptr [r14 - 32]
	mov	rdx, qword ptr [r14 - 24]
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 64], rsi       # 8-byte Spill
	vpxor	xmm0, xmm0, xmm0
	jmp	.LBB6_274
.LBB6_279:                              # %resize.i7315
                                        #   in Loop: Header=BB6_273 Depth=1
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	mov	r12, r10
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	vpxor	xmm0, xmm0, xmm0
	mov	r10, r12
	mov	r12, qword ptr [rbp - 104]      # 8-byte Reload
	mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload
	test	al, al
	je	.LBB6_275
	jmp	.LBB6_449
.LBB6_280:                              # %OP569.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_281:                              # %OP569.JUMPDEST
	mov	rcx, qword ptr [r8 + 96]
	mov	rdx, qword ptr [r8 + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [r8 + 120]
	or	rcx, qword ptr [r8 + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_283
	jmp	.LBB6_105
.LBB6_282:                              # %OP577.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_283:                              # %OP577.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, r14
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_20] # xmm0 = [944,0,0,0]
	vmovups	ymmword ptr [r13 + r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13 + r15 + 32], ymm0
	vmovups	ymmword ptr [r13 + r15 + 64], ymm0
	add	r14, 3
	mov	r12, r14
	shl	r12, 5
	vmovups	ymmword ptr [r13 + r12], ymm0
	mov	rbx, qword ptr [r8 + 72]
	mov	r13, qword ptr [r8 + 80]
	sub	rsp, 8
	lea	rdi, [rbp - 912]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r13
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 896]
	mov	rcx, qword ptr [rbp - 912]
	mov	rdx, qword ptr [rbp - 904]
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rsi + r15 + 40], rdx
	mov	rdx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rdx + r15 + 48], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rcx
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], 4
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12 + 8], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12 + 24], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12], 36
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12 + 16], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_17] # xmm0 = [36,0]
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	vmovups	ymmword ptr [rax + r15 + 128], ymm0
	sub	rsp, 8
	lea	rdi, [rbp - 368]
	mov	esi, 36
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r13
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	add	rsp, 16
	mov	rax, qword ptr [rbp - 344]
	mov	rcx, qword ptr [rbp - 368]
	mov	rdx, qword ptr [rbp - 360]
	mov	rsi, qword ptr [rbp - 352]
	mov	qword ptr [r13 + r15 + 176], 0
	mov	qword ptr [r13 + r15 + 160], 32
	mov	qword ptr [r13 + r15 + 184], 0
	mov	qword ptr [r13 + r15 + 168], 0
	mov	qword ptr [r13 + r15 + 80], rsi
	mov	qword ptr [r13 + r15 + 64], rcx
	mov	qword ptr [r13 + r15 + 88], rax
	mov	qword ptr [r13 + r15 + 72], rdx
	mov	qword ptr [r13 + r12], 4
	mov	qword ptr [r13 + r12 + 16], 0
	mov	qword ptr [r13 + r12 + 8], 0
	mov	qword ptr [r13 + r12 + 24], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_18] # xmm0 = [68,0,0,0]
	vmovdqu	ymmword ptr [r13 + r15 + 128], ymm0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
.LBB6_284:                              # %OP1511.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rcx, rax
	shl	rcx, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + rcx], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_21] # xmm0 = [3035,0,0,0]
	vmovups	ymmword ptr [r13 + rcx + 32], ymm0
	mov	edx, dword ptr [rdi + 164]
	movbe	rsi, qword ptr [rdi + 156]
	bswap	rdx
	shrd	rdx, rsi, 32
	movbe	rdi, qword ptr [rdi + 148]
	shrd	rsi, rdi, 32
	shr	rdi, 32
	mov	qword ptr [r13 + rcx + 80], rdi
	mov	qword ptr [r13 + rcx + 72], rsi
	mov	qword ptr [r13 + rcx + 64], rdx
	mov	qword ptr [r13 + rcx + 88], 0
	vmovdqu	ymm0, ymmword ptr [r13 + rcx - 64]
	vmovups	ymm1, ymmword ptr [r13 + rcx - 32]
	vmovdqu	ymmword ptr [r13 + rcx + 96], ymm0
	add	rax, 5
	vmovups	ymmword ptr [r13 + rcx + 128], ymm1
	mov	qword ptr [rbp - 48], rax       # 8-byte Spill
	jmp	.LBB6_145
.LBB6_285:                              # %OP603.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r12, [rax + 1]
	mov	r9, r14
	mov	r14, rax
	shl	r14, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	mov	rbx, rsp
	add	rbx, -32
	mov	rsp, rbx
	mov	edi, 64
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	mov	r8, rbx
	vzeroupper
	call	.L__revmc_ir_builtin_mload
	test	al, al
	jne	.LBB6_484
# %bb.286:                              # %OP605.MLOAD.contd
	add	r14, r13
	mov	rcx, qword ptr [rbx + 24]
	mov	rdi, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 16]
	mov	qword ptr [r14 + 16], rdx
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14 + 8], rsi
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rbx, [rax + 2]
	mov	qword ptr [rbp - 64], r12       # 8-byte Spill
	shl	r12, 5
	mov	qword ptr [r13 + r12 + 16], rdx
	mov	qword ptr [r13 + r12], rdi
	mov	qword ptr [r13 + r12 + 24], rcx
	mov	qword ptr [r13 + r12 + 8], rsi
	mov	rax, qword ptr [r14 - 32]
	mov	r9, qword ptr [r14 - 24]
	mov	r15, r13
	mov	r13, rbx
	shl	r13, 5
	or	r9, qword ptr [r14 - 8]
	or	rax, qword ptr [r14 - 16]
	xor	r8d, r8d
	or	rax, r9
	setne	r8b
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [r15 + r13 + 8], xmm0
	mov	qword ptr [r15 + r13], r8
	mov	qword ptr [r15 + r13 + 24], 0
	mov	qword ptr [r14 + 104], rsi
	mov	qword ptr [r14 + 120], rcx
	mov	qword ptr [r14 + 96], rdi
	mov	qword ptr [r14 + 112], rdx
	sub	rsp, 32
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rsp + 16], rax
	vmovdqu	xmmword ptr [rsp], xmm0
	xor	r9d, r9d
	call	.L__revmc_ir_builtin_mstore
	add	rsp, 32
	test	al, al
	je	.LBB6_256
.LBB6_287:
	mov	qword ptr [rbp - 48], rbx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_288:                              # %OP632.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_289:                              # %OP632.JUMPDEST
	mov	rcx, qword ptr [r8 + 96]
	mov	rdx, qword ptr [r8 + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [r8 + 120]
	or	rcx, qword ptr [r8 + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_291
	jmp	.LBB6_105
.LBB6_290:                              # %OP640.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_291:                              # %OP640.JUMPDEST
	mov	r14, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r15, r14
	shl	r15, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_15] # xmm0 = [1066,0,0,0]
	vmovups	ymmword ptr [r13 + r15], ymm0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13 + r15 + 32], ymm0
	vmovups	ymmword ptr [r13 + r15 + 64], ymm0
	add	r14, 3
	mov	r12, r14
	shl	r12, 5
	vmovups	ymmword ptr [r13 + r12], ymm0
	mov	rbx, qword ptr [r8 + 72]
	mov	r13, qword ptr [r8 + 80]
	sub	rsp, 8
	lea	rdi, [rbp - 976]
	mov	esi, 4
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r13
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 960]
	mov	rcx, qword ptr [rbp - 976]
	mov	rdx, qword ptr [rbp - 968]
	mov	rsi, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rsi + r15 + 40], rdx
	mov	rdx, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rdx + r15 + 48], rax
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 32], rcx
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 56], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 88], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 72], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 80], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r15 + 64], 4
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12 + 8], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12 + 24], 0
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12], 36
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [rax + r12 + 16], 0
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_17] # xmm0 = [36,0]
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	vmovups	ymmword ptr [rax + r15 + 128], ymm0
	sub	rsp, 8
	lea	rdi, [rbp - 944]
	mov	esi, 36
	xor	edx, edx
	xor	ecx, ecx
	xor	r8d, r8d
	mov	r9, rbx
	push	r13
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	vzeroupper
	call	.L__revmc_ir_builtin_calldataload
	add	rsp, 16
	mov	eax, dword ptr [rbp - 928]
	mov	rcx, qword ptr [rbp - 944]
	mov	rdx, qword ptr [rbp - 936]
	mov	qword ptr [r13 + r15 + 184], 0
	mov	qword ptr [r13 + r15 + 168], 0
	mov	qword ptr [r13 + r15 + 176], 0
	mov	qword ptr [r13 + r15 + 160], 32
	mov	qword ptr [r13 + r15 + 72], rdx
	mov	qword ptr [r13 + r15 + 80], rax
	mov	qword ptr [r13 + r15 + 64], rcx
	mov	qword ptr [r13 + r15 + 88], 0
	mov	qword ptr [r13 + r12 + 8], 0
	mov	qword ptr [r13 + r12 + 24], 0
	mov	qword ptr [r13 + r12], 4
	mov	qword ptr [r13 + r12 + 16], 0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_18] # xmm0 = [68,0,0,0]
	vmovdqu	ymmword ptr [r13 + r15 + 128], ymm0
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
.LBB6_292:                              # %OP1527.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rax + 1]
	shl	rax, 5
	lea	rbx, [rax + r13]
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_16] # xmm0 = [4,0]
	vmovups	ymmword ptr [r13 + rax], ymm0
	mov	qword ptr [rbp - 80], rcx       # 8-byte Spill
	mov	rax, rcx
	shl	rax, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r13 + rax], ymm0
	lea	r15, [rax + r13]
	mov	rcx, r14
	mov	r14, qword ptr [r14 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rax, r12
	cmp	rax, 63
	jbe	.LBB6_301
.LBB6_293:                              # %OP1531.DUP2
	mov	rax, qword ptr [r14 + 8]
	vmovaps	ymm0, ymmword ptr [rip + .LCPI6_19] # ymm0 = [0,0,0,288230376151711744]
	vmovups	ymmword ptr [rax + r12 + 32], ymm0
	lea	rax, [rbx - 64]
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	rdx, qword ptr [rbx - 48]
	mov	rdi, qword ptr [rbx - 64]
	mov	r13, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 40]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], r13
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	r12, qword ptr [rcx + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB6_302
.LBB6_294:                              # %OP1534.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r14 + 24], rdi
	movbe	qword ptr [rax + r14 + 16], r13
	movbe	qword ptr [rax + r14 + 8], rdx
	movbe	qword ptr [rax + r14], rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rcx
	mov	rdi, rcx
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_82
# %bb.295:                              # %OP1537.PUSH1
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [r15], ymm0
	mov	rdx, qword ptr [rbx + 24]
	mov	rsi, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	rcx, r14
	mov	r14, qword ptr [r14 + 40]
	mov	rax, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rax, r12
	cmp	rax, 63
	jbe	.LBB6_303
.LBB6_296:                              # %OP1539.DUP1
	mov	rax, qword ptr [r14 + 8]
	movbe	qword ptr [rax + r12 + 56], r13
	movbe	qword ptr [rax + r12 + 48], rdi
	movbe	qword ptr [rax + r12 + 40], rsi
	movbe	qword ptr [rax + r12 + 32], rdx
	mov	rdx, qword ptr [rbx - 16]
	mov	rdi, qword ptr [rbx - 32]
	mov	r13, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 8]
	mov	qword ptr [rbx + 24], rsi
	mov	qword ptr [rbx + 8], r13
	mov	qword ptr [rbx + 16], rdx
	mov	qword ptr [rbx], rdi
	mov	qword ptr [r15 + 24], 0
	mov	qword ptr [r15 + 8], 0
	mov	qword ptr [r15 + 16], 0
	mov	qword ptr [r15], 0
	mov	r12, qword ptr [rcx + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	r14, qword ptr [r12 + 48]
	sub	rax, r14
	cmp	rax, 31
	jbe	.LBB6_304
.LBB6_297:                              # %OP1542.PUSH1
	mov	rax, qword ptr [r12 + 8]
	movbe	qword ptr [rax + r14 + 24], rdi
	movbe	qword ptr [rax + r14 + 16], r13
	movbe	qword ptr [rax + r14 + 8], rdx
	movbe	qword ptr [rax + r14], rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [rbx], ymm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r14, rcx
	mov	rdi, rcx
	mov	rsi, rbx
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_82
# %bb.298:                              # %OP1545.PUSH1
	vmovups	ymm0, ymmword ptr [rbx - 32]
	vxorps	xmm1, xmm1, xmm1
	vmovaps	xmmword ptr [rbx - 32], xmm1
	vmovaps	xmmword ptr [rbx - 16], xmm1
	vmovups	ymmword ptr [r15], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx - 64]
	vmovups	ymm1, ymmword ptr [rbx]
	vmovups	ymmword ptr [rbx - 64], ymm1
	vmovdqu	ymmword ptr [rbx], ymm0
	dec	qword ptr [rbp - 48]            # 8-byte Folded Spill
	mov	rdi, r14
	mov	rsi, qword ptr [rbp - 64]       # 8-byte Reload
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_449
# %bb.299:                              # %OP1552.DUP2
	mov	rax, qword ptr [rbx - 96]
	mov	rcx, qword ptr [rbx - 88]
	mov	rsi, qword ptr [rbx - 72]
	mov	rdx, qword ptr [rbx - 80]
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB6_300
.LBB6_301:                              # %resize.i8210
	mov	esi, 64
	mov	r13, rcx
	mov	rdi, rcx
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, r13
	test	al, al
	je	.LBB6_293
	jmp	.LBB6_449
.LBB6_302:                              # %resize.i8224
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 72], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_294
	jmp	.LBB6_449
.LBB6_303:                              # %resize.i8239
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 64
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 72], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_296
	jmp	.LBB6_449
.LBB6_304:                              # %resize.i8253
	mov	qword ptr [rbp - 88], rsi       # 8-byte Spill
	mov	esi, 32
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 72], rdx       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_297
	jmp	.LBB6_449
.LBB6_300:                              # %dynamic_jump_table.preheader
	shl	rdi, 5
	mov	qword ptr [r13 + rdi + 16], rdx
	mov	qword ptr [r13 + rdi + 24], rsi
	mov	qword ptr [r13 + rdi], rax
	mov	qword ptr [r13 + rdi + 8], rcx
	jmp	.LBB6_321
.LBB6_305:                              # %OP687.JUMPDEST.sink.split.loopexit8751
	mov	ebx, 183
	jmp	.LBB6_307
.LBB6_306:                              # %OP687.JUMPDEST.sink.split.loopexit
	mov	ebx, 978
.LBB6_307:                              # %OP687.JUMPDEST.sink.split
	xor	eax, eax
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
	jmp	.LBB6_12
.LBB6_308:                              # %OP687.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 144]       # 8-byte Reload
.LBB6_309:                              # %OP687.JUMPDEST
	mov	r10, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r11, [r10 + 1]
	mov	rdx, qword ptr [r8 + 112]
	mov	rdi, qword ptr [r8 + 96]
	mov	r9, qword ptr [r8 + 104]
	mov	rsi, qword ptr [r8 + 120]
	mov	rax, r10
	shl	rax, 5
	lea	rcx, [rax + r13]
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 160], rsi      # 8-byte Spill
	mov	qword ptr [r13 + rax + 24], rsi
	mov	qword ptr [r13 + rax + 8], r9
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	mov	qword ptr [r13 + rax + 16], rdx
	mov	qword ptr [r13 + rax], rdi
	lea	rdx, [r10 + 2]
	mov	rax, r11
	shl	rax, 5
	lea	r12, [rax + r13]
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax], 3
	mov	rcx, r10
	lea	rbx, [r10 + 3]
	mov	qword ptr [rbp - 216], rdx      # 8-byte Spill
	mov	rax, rdx
	shl	rax, 5
	lea	r10, [rax + r13]
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	mov	qword ptr [r13 + rax + 16], 0
	mov	esi, dword ptr [r8 + 164]
	movbe	rdx, qword ptr [r8 + 156]
	bswap	rsi
	mov	qword ptr [r13 + rax], 0
	shrd	rsi, rdx, 32
	movbe	r15, qword ptr [r8 + 148]
	mov	r8, rdx
	shrd	r8, r15, 32
	shr	r15, 32
	mov	qword ptr [rbp - 176], rbx      # 8-byte Spill
	mov	rax, rbx
	shl	rax, 5
	mov	qword ptr [r13 + rax + 8], r8
	mov	qword ptr [r13 + rax + 16], r15
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 24], 0
	lea	rbx, [rax + r13]
	lea	rdx, [rcx + 4]
	mov	rax, rdx
	shl	rax, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + rax], ymm0
	add	rax, r13
	mov	qword ptr [rbp - 104], rax      # 8-byte Spill
	mov	r13, qword ptr [r14 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r14, qword ptr [r13 + 48]
	sub	rax, r14
	add	rcx, 5
	cmp	rax, 31
	mov	qword ptr [rbp - 88], r10       # 8-byte Spill
	mov	qword ptr [rbp - 208], rdx      # 8-byte Spill
	mov	qword ptr [rbp - 64], rdi       # 8-byte Spill
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	mov	qword ptr [rbp - 136], rcx      # 8-byte Spill
	mov	qword ptr [rbp - 192], r11      # 8-byte Spill
	mov	qword ptr [rbp - 120], rsi      # 8-byte Spill
	mov	qword ptr [rbp - 152], r8       # 8-byte Spill
	jbe	.LBB6_460
.LBB6_310:                              # %OP698.PUSH1
	mov	rax, qword ptr [r13 + 8]
	movbe	qword ptr [rax + r14 + 24], rsi
	movbe	qword ptr [rax + r14 + 16], r8
	mov	qword ptr [rbp - 200], r15      # 8-byte Spill
	movbe	qword ptr [rax + r14 + 8], r15
	mov	qword ptr [rax + r14], 0
	mov	rax, qword ptr [r10 + 24]
	mov	rcx, qword ptr [r10 + 16]
	mov	r15, qword ptr [r10]
	mov	rdx, qword ptr [r10 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [r12 + 24]
	mov	rsi, qword ptr [r12]
	mov	rdi, qword ptr [r12 + 8]
	mov	r8, qword ptr [r12 + 16]
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbp - 184], r8       # 8-byte Spill
	mov	qword ptr [r10 + 16], r8
	mov	qword ptr [rbp - 176], rsi      # 8-byte Spill
	mov	qword ptr [r10], rsi
	mov	qword ptr [r10 + 24], r11
	mov	qword ptr [rbp - 168], rdi      # 8-byte Spill
	mov	qword ptr [r10 + 8], rdi
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rsi + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r13, qword ptr [r14 + 48]
	sub	rdi, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB6_462
.LBB6_311:                              # %OP703.PUSH1
	add	r13, qword ptr [r14 + 8]
	mov	rax, qword ptr [rbp - 176]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 168]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 184]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 8], rax
	movbe	qword ptr [r15 + r13], r11
	add	qword ptr [r12], 32
	adc	qword ptr [r12 + 8], 0
	adc	qword ptr [r12 + 16], 0
	adc	qword ptr [r12 + 24], 0
	mov	qword ptr [r10 + 16], 0
	mov	qword ptr [r10], 0
	mov	qword ptr [r10 + 24], 0
	mov	qword ptr [r10 + 8], 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, r14
	mov	rsi, r12
	mov	r15, r10
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_463
# %bb.312:                              # %OP707.PUSH1
	mov	rdi, r14
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r15], ymm0
	mov	r15, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 16]
	mov	qword ptr [rbx + 16], rsi
	mov	qword ptr [rbx], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	vmovdqu	ymm0, ymmword ptr [r12]
	mov	r14, rbx
	mov	rbx, qword ptr [rbp - 104]      # 8-byte Reload
	vmovdqu	ymmword ptr [rbx], ymm0
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_468
# %bb.313:                              # %OP711.ADD
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	add	rdx, qword ptr [rbx]
	adc	rsi, qword ptr [rbx + 8]
	adc	rcx, qword ptr [rbx + 16]
	adc	rax, qword ptr [rbx + 24]
	vmovups	ymm0, ymmword ptr [r15]
	mov	qword ptr [r15 + 16], rcx
	mov	qword ptr [r15], rdx
	mov	qword ptr [r15 + 24], rax
	mov	qword ptr [r15 + 8], rsi
	vmovups	ymmword ptr [r14], ymm0
	vmovdqu	ymm0, ymmword ptr [r12]
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12 + 16], rcx
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	vmovdqu	ymmword ptr [rax], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB6_464
# %bb.314:                              # %OP718.POP
	mov	rbx, r14
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	mov	qword ptr [r15 + 8], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r15], rax
	mov	rax, qword ptr [rbp - 200]      # 8-byte Reload
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15 + 24], 0
	movabs	rax, -2161731374917286731
	mov	qword ptr [r12 + 24], rax
	movabs	rax, 354477108082640721
	mov	qword ptr [r12 + 8], rax
	movabs	rax, 6482037324908358874
	mov	qword ptr [r12 + 16], rax
	movabs	rax, -4449507656636755812
	mov	qword ptr [r12], rax
	mov	r14, qword ptr [rbp - 160]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	qword ptr [r11 + 24], r14
	mov	r8, qword ptr [rbp - 72]        # 8-byte Reload
	mov	qword ptr [r11 + 8], r8
	mov	r10, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [r11 + 16], r10
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [r11], rax
	mov	qword ptr [rbx + 24], 0
	mov	qword ptr [rbx + 8], 0
	mov	qword ptr [rbx + 16], 0
	mov	qword ptr [rbx], 64
	mov	r9, r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	r12, qword ptr [r15 + 48]
	sub	rax, r12
	mov	qword ptr [rbp - 120], r15      # 8-byte Spill
	cmp	rax, 95
	jbe	.LBB6_465
.LBB6_315:                              # %OP725.MLOAD.contd
	mov	qword ptr [rbp - 80], r10       # 8-byte Spill
	mov	qword ptr [rbp - 72], r8        # 8-byte Spill
	mov	qword ptr [rbp - 128], rbx      # 8-byte Spill
	mov	rcx, qword ptr [r15 + 8]
	mov	rdx, qword ptr [rcx + r12 + 88]
	mov	rsi, qword ptr [rcx + r12 + 80]
	mov	rax, qword ptr [rcx + r12 + 64]
	mov	rdi, qword ptr [rcx + r12 + 72]
	movbe	qword ptr [rbx + 16], rdi
	movbe	qword ptr [rbx], rdx
	movbe	qword ptr [rbx + 24], rax
	movbe	qword ptr [rbx + 8], rsi
	mov	rbx, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [rbx + 16], rdi
	movbe	qword ptr [rbx], rdx
	movbe	qword ptr [rbx + 24], rax
	movbe	qword ptr [rbx + 8], rsi
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	shl	rcx, 5
	mov	qword ptr [r13 + rcx + 16], r10
	mov	r15, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [r13 + rcx], r15
	mov	qword ptr [r13 + rcx + 24], r14
	mov	qword ptr [r13 + rcx + 8], r8
	movbe	qword ptr [r9 + 208], rdi
	bswap	rdi
	movbe	qword ptr [r9 + 200], rsi
	mov	r8, rsi
	bswap	r8
	movbe	qword ptr [r9 + 192], rdx
	mov	r12, rdx
	movbe	qword ptr [r9 + 216], rax
	bswap	r12
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	mov	rdx, qword ptr [rsi + 16]
	mov	r15, qword ptr [rsi + 48]
	sub	rdx, r15
	mov	rsi, r12
	add	rsi, 32
	mov	r9, -1
	cmovb	rsi, r9
	xor	r10d, r10d
	neg	r8
	mov	r8d, 0
	sbb	r8, rdi
	bswap	rax
	sbb	r10, rax
	cmovb	rsi, r9
	add	rcx, r13
	cmp	rsi, rdx
	ja	.LBB6_467
.LBB6_316:                              # %OP730.PUSH1
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	add	r15, qword ptr [rax + 8]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	movbe	qword ptr [r12 + r15 + 24], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r12 + r15 + 16], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	movbe	qword ptr [r12 + r15 + 8], rax
	movbe	qword ptr [r12 + r15], r14
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovups	ymmword ptr [rcx], ymm0
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx + 16]
	mov	rdx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 8]
	add	rdx, 32
	adc	rsi, 0
	adc	rcx, 0
	adc	rax, 0
	vmovups	ymm0, ymmword ptr [r11]
	mov	qword ptr [r11], rdx
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 16], rcx
	mov	qword ptr [r11 + 24], rax
	vmovups	ymmword ptr [rbx], ymm0
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	mov	rdi, qword ptr [rbp - 128]      # 8-byte Reload
	vmovdqu	ymmword ptr [rdi], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rdi + 40]
	mov	r8, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12 + 48]
	sub	r8, r15
	cmp	r8, 95
	mov	r8, r11
	jbe	.LBB6_469
.LBB6_317:                              # %OP736.MLOAD.contd
	mov	r10, qword ptr [r12 + 8]
	mov	rdi, qword ptr [r10 + r15 + 88]
	mov	r12, qword ptr [r10 + r15 + 80]
	mov	r9, qword ptr [r10 + r15 + 64]
	mov	r10, qword ptr [r10 + r15 + 72]
	mov	r11, r9
	bswap	r11
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 24], rax
	mov	r14, rdi
	bswap	r14
	sub	rdx, r14
	mov	r14, r12
	bswap	r14
	sbb	rsi, r14
	mov	r14, r10
	bswap	r14
	sbb	rcx, r14
	sbb	rax, r11
	mov	qword ptr [r8], rdx
	mov	qword ptr [r8 + 16], rcx
	mov	qword ptr [r8 + 8], rsi
	mov	qword ptr [r8 + 24], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [rax + 16], r10
	movbe	qword ptr [rax], rdi
	movbe	qword ptr [rax + 24], r9
	movbe	qword ptr [rax + 8], r12
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 96]       # 8-byte Reload
	mov	edx, 2
	vzeroupper
	call	__revmc_builtin_log@PLT
	test	al, al
	jne	.LBB6_449
# %bb.318:                              # %OP742.JUMP
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	dec	rdi
.LBB6_319:                              # %dynamic_jump_table.preheader
	mov	rcx, rdi
	shl	rcx, 5
	mov	rsi, qword ptr [r13 + rcx + 24]
	mov	rdx, qword ptr [r13 + rcx + 16]
	mov	rax, qword ptr [r13 + rcx]
	mov	rcx, qword ptr [r13 + rcx + 8]
.LBB6_320:                              # %dynamic_jump_table.preheader
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
.LBB6_321:                              # %dynamic_jump_table.preheader
	mov	edi, 879
	mov	r8d, 1755
	mov	r9d, 2839
	mov	r10d, 2984
	mov	r11d, 29
	lea	rbx, [rip + .LJTI6_3]
.LBB6_322:                              # %dynamic_jump_table
                                        # =>This Inner Loop Header: Depth=1
	cmp	rdi, rax
	mov	r14d, 0
	sbb	r14, rcx
	mov	r14d, 0
	sbb	r14, rdx
	mov	r14d, 0
	sbb	r14, rsi
	jge	.LBB6_329
# %bb.323:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB6_322 Depth=1
	cmp	r8, rax
	mov	r14d, 0
	sbb	r14, rcx
	mov	r14d, 0
	sbb	r14, rdx
	mov	r14d, 0
	sbb	r14, rsi
	jge	.LBB6_334
# %bb.324:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB6_322 Depth=1
	cmp	r9, rax
	mov	r14d, 0
	sbb	r14, rcx
	mov	r14d, 0
	sbb	r14, rdx
	mov	r14d, 0
	sbb	r14, rsi
	jge	.LBB6_355
# %bb.325:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB6_322 Depth=1
	cmp	r10, rax
	mov	r14d, 0
	sbb	r14, rcx
	mov	r14d, 0
	sbb	r14, rdx
	mov	r14d, 0
	sbb	r14, rsi
	jge	.LBB6_360
# %bb.326:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB6_322 Depth=1
	mov	r14, rax
	add	r14, -3014
	mov	r15, rcx
	adc	r15, -1
	mov	qword ptr [rbp - 64], r15       # 8-byte Spill
	mov	r12, rdx
	adc	r12, -1
	mov	r13, rsi
	adc	r13, -1
	cmp	r11, r14
	mov	r15d, 0
	sbb	r15, qword ptr [rbp - 64]       # 8-byte Folded Reload
	mov	r15d, 0
	sbb	r15, r12
	mov	r15d, 0
	sbb	r15, r13
	jb	.LBB6_452
# %bb.327:                              # %dynamic_jump_table
                                        #   in Loop: Header=BB6_322 Depth=1
	movsxd	rax, dword ptr [rbx + 4*r14]
	add	rax, rbx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jmp	rax
.LBB6_328:                              # %OP1519.JUMPDEST
                                        #   in Loop: Header=BB6_322 Depth=1
	mov	r15, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r14, r15
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [r13 + r14 - 32]
	vmovaps	xmm1, xmmword ptr [r13 + r14 - 16]
	vmovaps	xmm2, xmmword ptr [r13 + r14 - 64]
	vmovaps	xmm3, xmmword ptr [r13 + r14 - 48]
	vmovaps	xmmword ptr [r13 + r14 - 16], xmm3
	vmovaps	xmmword ptr [r13 + r14 - 32], xmm2
	mov	rax, qword ptr [r13 + r14 - 160]
	mov	rcx, qword ptr [r13 + r14 - 152]
	mov	rsi, qword ptr [r13 + r14 - 136]
	mov	rdx, qword ptr [r13 + r14 - 144]
	vmovaps	xmmword ptr [r13 + r14 - 144], xmm1
	vmovaps	xmmword ptr [r13 + r14 - 160], xmm0
	vmovdqa	xmm0, xmmword ptr [r13 + r14 - 128]
	vmovaps	xmm1, xmmword ptr [r13 + r14 - 112]
	mov	qword ptr [r13 + r14 - 112], rdx
	mov	qword ptr [r13 + r14 - 104], rsi
	mov	qword ptr [r13 + r14 - 128], rax
	mov	qword ptr [r13 + r14 - 120], rcx
	vmovaps	xmmword ptr [r13 + r14 - 48], xmm1
	vmovdqa	xmmword ptr [r13 + r14 - 64], xmm0
	add	r15, -4
	mov	qword ptr [rbp - 48], r15       # 8-byte Spill
	jmp	.LBB6_322
.LBB6_329:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 552
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_338
# %bb.330:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 326
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jl	.LBB6_347
# %bb.331:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 240
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_377
# %bb.332:                              # %dynamic_jump_table
	add	rax, -175
	adc	rcx, -1
	adc	rdx, -1
	adc	rsi, -1
	xor	edi, edi
	mov	r8d, 29
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	ecx, 0
	sbb	rcx, rdx
	sbb	rdi, rsi
	jb	.LBB6_486
# %bb.333:                              # %dynamic_jump_table
	lea	rcx, [rip + .LJTI6_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB6_334:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1087
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_342
# %bb.335:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 943
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, rax
	jge	.LBB6_382
# %bb.336:                              # %dynamic_jump_table
	add	rdi, -944
	mov	r8, rcx
	adc	r8, -1
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 47
	cmp	rbx, rdi
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB6_485
# %bb.337:                              # %dynamic_jump_table
	lea	rax, [rip + .LJTI6_2]
	movsxd	rcx, dword ptr [rax + 4*rdi]
	add	rcx, rax
	jmp	rcx
.LBB6_338:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 671
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jl	.LBB6_351
# %bb.339:                              # %dynamic_jump_table
	mov	rdi, rax
	add	rdi, -579
	mov	r8, rcx
	adc	r8, -1
	mov	r9, rdx
	adc	r9, -1
	mov	r10, rsi
	adc	r10, -1
	xor	r11d, r11d
	mov	ebx, 54
	cmp	rbx, rdi
	mov	ebx, 0
	sbb	rbx, r8
	mov	r8d, 0
	sbb	r8, r9
	sbb	r11, r10
	jb	.LBB6_380
# %bb.340:                              # %dynamic_jump_table
	lea	rax, [rip + .LJTI6_1]
	movsxd	rcx, dword ptr [rax + 4*rdi]
	add	rcx, rax
	jmp	rcx
.LBB6_341:                              # %return.loopexit8895
	mov	al, 1
	jmp	.LBB6_449
.LBB6_342:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1394
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jl	.LBB6_363
# %bb.343:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1351
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_384
# %bb.344:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 1088
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_308
# %bb.345:                              # %dynamic_jump_table
	xor	rax, 1245
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
# %bb.346:                              # %OP743.JUMPDEST.loopexit
	mov	rcx, r14
	jmp	.LBB6_38
.LBB6_347:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 427
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_367
# %bb.348:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 390
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_389
# %bb.349:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 327
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_104
# %bb.350:                              # %dynamic_jump_table
	xor	rax, 338
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_106
	jmp	.LBB6_486
.LBB6_351:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 756
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_374
# %bb.352:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 737
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_392
# %bb.353:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 672
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_245
# %bb.354:                              # %dynamic_jump_table
	xor	rax, 716
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_254
	jmp	.LBB6_486
.LBB6_355:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2520
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_370
# %bb.356:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2115
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, rax
	jl	.LBB6_420
# %bb.357:                              # %dynamic_jump_table
	xor	rdi, 1756
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_451
# %bb.358:                              # %dynamic_jump_table
	xor	rax, 1972
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
# %bb.359:                              # %OP1036.JUMPDEST.loopexit
	mov	r8, qword ptr [rbp - 48]        # 8-byte Reload
	jmp	.LBB6_160
.LBB6_360:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 2840
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_247
# %bb.361:                              # %dynamic_jump_table
	mov	rsi, rax
	xor	rsi, 2864
	or	rsi, rdx
	or	rsi, rcx
	mov	rsi, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB6_430
# %bb.362:                              # %dynamic_jump_table
	xor	rax, 2971
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_403
	jmp	.LBB6_486
.LBB6_363:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 1644
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_387
# %bb.364:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 1395
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_428
# %bb.365:                              # %dynamic_jump_table
	xor	rax, 1403
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
# %bb.366:                              # %OP866.JUMPDEST.loopexit
	mov	r10, qword ptr [rbp - 144]      # 8-byte Reload
	jmp	.LBB6_108
.LBB6_367:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 457
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_418
# %bb.368:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 428
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_135
# %bb.369:                              # %dynamic_jump_table
	xor	rax, 436
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_139
	jmp	.LBB6_486
.LBB6_370:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 2739
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	mov	r8, qword ptr [rbp - 56]        # 8-byte Reload
	mov	rdi, rax
	jl	.LBB6_422
# %bb.371:                              # %dynamic_jump_table
	xor	rdi, 2521
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_431
# %bb.372:                              # %dynamic_jump_table
	xor	rax, 2599
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
# %bb.373:                              # %OP1263.JUMPDEST.loopexit
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	edx, dword ptr [rcx + 164]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rax + 3]
	lea	r12, [rax + 2]
	movbe	rax, qword ptr [rcx + 156]
	movbe	r11, qword ptr [rcx + 148]
	mov	rcx, r11
	shld	rcx, rax, 32
	bswap	rdx
	shrd	rdx, rax, 32
	shr	r11, 32
	xor	r9d, r9d
	jmp	.LBB6_438
.LBB6_374:                              # %dynamic_jump_table
	xor	edi, edi
	mov	r8d, 820
	cmp	r8, rax
	mov	r8d, 0
	sbb	r8, rcx
	mov	r8d, 0
	sbb	r8, rdx
	sbb	rdi, rsi
	jl	.LBB6_425
# %bb.375:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 757
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_262
# %bb.376:                              # %dynamic_jump_table
	xor	rax, 794
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_268
	jmp	.LBB6_486
.LBB6_377:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 241
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_73
# %bb.378:                              # %dynamic_jump_table
	mov	rsi, rax
	xor	rsi, 268
	or	rsi, rdx
	or	rsi, rcx
	je	.LBB6_75
# %bb.379:                              # %dynamic_jump_table
	xor	rax, 313
	jmp	.LBB6_427
.LBB6_380:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 553
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_129
# %bb.381:                              # %dynamic_jump_table
	xor	rax, 661
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_243
	jmp	.LBB6_486
.LBB6_382:                              # %dynamic_jump_table
	xor	rdi, 880
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_280
# %bb.383:                              # %dynamic_jump_table
	xor	rax, 891
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_282
	jmp	.LBB6_486
.LBB6_384:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 1352
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_46
# %bb.385:                              # %dynamic_jump_table
	xor	rax, 1366
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
# %bb.386:                              # %OP834.JUMPDEST.preheader.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	mov	rax, qword ptr [r13 + rdx - 40]
	mov	rcx, qword ptr [r13 + rdx - 48]
	mov	rsi, qword ptr [r13 + rdx - 64]
	mov	rdx, qword ptr [r13 + rdx - 56]
	jmp	.LBB6_49
.LBB6_387:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 1645
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_450
# %bb.388:                              # %dynamic_jump_table
	xor	rax, 1676
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_145
	jmp	.LBB6_486
.LBB6_389:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 391
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_129
# %bb.390:                              # %dynamic_jump_table
	xor	rax, 417
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
.LBB6_391:                              # %OP249.JUMPDEST
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	mov	rcx, qword ptr [rdi + 96]
	mov	rdx, qword ptr [rdi + 104]
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rax, 5
	or	rdx, qword ptr [rdi + 120]
	or	rcx, qword ptr [rdi + 112]
	xor	esi, esi
	or	rcx, rdx
	sete	sil
	mov	qword ptr [r13 + rax], rsi
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	je	.LBB6_136
	jmp	.LBB6_105
.LBB6_392:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 738
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_260
# %bb.393:                              # %dynamic_jump_table
	xor	rax, 749
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
.LBB6_394:                              # %OP461.JUMPDEST
	mov	rdx, r14
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rax + 1]
	shl	rax, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_23] # xmm0 = [757,0,0,0]
	vmovdqu	ymmword ptr [r13 + rax], ymm0
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
.LBB6_395:                              # %OP1388.JUMPDEST
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, rbx
	shl	r12, 5
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_24] # xmm0 = [1,0,0,0]
	vmovdqu	ymmword ptr [r13 + r12], ymm0
	lea	r14, [rbx + 2]
	lea	r15, [r12 + r13]
	add	r15, 32
	vmovdqu	ymmword ptr [r13 + r12 + 32], ymm0
	mov	rdi, rdx
	mov	rsi, r15
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_455
# %bb.396:                              # %OP1392.PUSH1
	add	r12, r13
	mov	qword ptr [rbp - 88], r12       # 8-byte Spill
	lea	rdi, [rbx + 3]
	shl	r14, 5
	lea	r11, [r14 + r13]
	lea	r8, [rbx + 4]
	mov	rsi, qword ptr [r15]
	mov	qword ptr [rbp - 96], rdi       # 8-byte Spill
	shl	rdi, 5
	lea	r10, [rdi + r13]
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	shl	r8, 5
	mov	r9d, esi
	not	r9d
	and	r9d, 1
	shl	r9d, 8
	xor	eax, eax
	add	r9, -1
	mov	ecx, 0
	adc	rcx, -1
	mov	edx, 0
	adc	rdx, -1
	adc	rax, -1
	and	r9, rsi
	and	rax, qword ptr [r15 + 24]
	and	rcx, qword ptr [r15 + 8]
	and	rdx, qword ptr [r15 + 16]
	mov	rsi, rax
	shld	rsi, rdx, 63
	shld	rdx, rcx, 63
	shld	rcx, r9, 63
	shr	rax
	mov	qword ptr [r15], rcx
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15 + 8], rdx
	mov	qword ptr [r15 + 24], rax
	add	rcx, 31
	adc	rdx, 0
	adc	rsi, 0
	adc	rax, 0
	mov	qword ptr [r13 + r8 + 16], rsi
	mov	qword ptr [r13 + r8], rcx
	mov	qword ptr [r13 + r8 + 8], rdx
	mov	qword ptr [r13 + r8 + 24], rax
	and	rcx, -32
	add	rcx, 32
	adc	rdx, 0
	adc	rsi, 0
	adc	rax, 0
	mov	qword ptr [r13 + r14], rcx
	mov	qword ptr [r13 + r14 + 16], rsi
	mov	qword ptr [r13 + r14 + 8], rdx
	mov	qword ptr [r13 + r14 + 24], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13 + rdi], ymm0
	add	r8, r13
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rbx, qword ptr [rdi + 40]
	mov	rdi, qword ptr [rbx + 16]
	mov	r14, qword ptr [rbx + 48]
	sub	rdi, r14
	mov	r9, rbx
	cmp	rdi, 95
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	jbe	.LBB6_456
.LBB6_397:                              # %OP1415.MLOAD.contd
	mov	qword ptr [rbp - 80], r15       # 8-byte Spill
	mov	rdi, qword ptr [rbx + 8]
	mov	r15, qword ptr [rdi + r14 + 88]
	mov	rbx, qword ptr [rdi + r14 + 80]
	mov	r13, qword ptr [rdi + r14 + 64]
	mov	r14, qword ptr [rdi + r14 + 72]
	movbe	qword ptr [r11], r15
	bswap	r15
	movbe	qword ptr [r11 + 16], r14
	bswap	r14
	movbe	qword ptr [r11 + 24], r13
	bswap	r13
	movbe	qword ptr [r11 + 8], rbx
	bswap	rbx
	add	r15, rcx
	adc	rbx, rdx
	adc	r14, rsi
	adc	r13, rax
	mov	qword ptr [r10], r15
	mov	qword ptr [r10 + 16], r14
	mov	qword ptr [r10 + 8], rbx
	mov	qword ptr [rbp - 72], r10       # 8-byte Spill
	mov	qword ptr [r10 + 24], r13
	mov	qword ptr [r8 + 16], 0
	mov	qword ptr [r8], 64
	mov	qword ptr [r8 + 24], 0
	mov	qword ptr [r8 + 8], 0
	mov	rax, qword ptr [r9 + 16]
	mov	r12, qword ptr [r9 + 48]
	sub	rax, r12
	cmp	rax, 95
	jbe	.LBB6_458
.LBB6_398:                              # %OP1421.DUP1
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r12 + 88], r15
	movbe	qword ptr [rax + r12 + 80], rbx
	movbe	qword ptr [rax + r12 + 72], r14
	movbe	qword ptr [rax + r12 + 64], r13
	mov	rdx, qword ptr [r11 + 16]
	mov	rcx, qword ptr [r11 + 24]
	mov	r15, qword ptr [r11]
	mov	rsi, qword ptr [r11 + 8]
	mov	rbx, r11
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rax, qword ptr [r11 + 16]
	mov	rdi, qword ptr [r11]
	mov	r8, qword ptr [r11 + 8]
	mov	r9, qword ptr [r11 + 24]
	mov	qword ptr [r11 + 8], rsi
	mov	qword ptr [r11 + 24], rcx
	mov	qword ptr [r11], r15
	mov	qword ptr [r11 + 16], rdx
	mov	r13, qword ptr [r11 + 32]
	mov	r14, qword ptr [r11 + 48]
	mov	r10, qword ptr [r11 + 40]
	mov	r12, qword ptr [r11 + 56]
	mov	qword ptr [r11 + 56], r9
	mov	qword ptr [r11 + 40], r8
	mov	qword ptr [r11 + 48], rax
	mov	qword ptr [r11 + 32], rdi
	mov	qword ptr [rbx + 24], r12
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r14
	mov	qword ptr [rbx], r13
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [rax + 24], rcx
	mov	qword ptr [rax + 8], rsi
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax], r15
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	mov	qword ptr [rax + 24], r12
	mov	qword ptr [rbp - 96], r14       # 8-byte Spill
	mov	qword ptr [rax + 16], r14
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	mov	qword ptr [rax + 8], r10
	mov	r12, r13
	mov	qword ptr [rax], r13
	mov	qword ptr [r11 + 184], rcx
	mov	qword ptr [r11 + 176], rdx
	mov	qword ptr [r11 + 168], rsi
	mov	qword ptr [r11 + 160], r15
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r14, qword ptr [rax + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	rbx, qword ptr [r14 + 48]
	sub	rdi, rbx
	mov	rax, r15
	add	rax, 32
	mov	r8, -1
	cmovb	rax, r8
	xor	r9d, r9d
	neg	rsi
	mov	esi, 0
	sbb	rsi, rdx
	sbb	r9, rcx
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	rcx, [rcx + 6]
	mov	qword ptr [rbp - 168], rcx      # 8-byte Spill
	cmovb	rax, r8
	lea	rsi, [r11 + 160]
	cmp	rax, rdi
	ja	.LBB6_459
.LBB6_399:                              # %OP1428.PUSH1
	add	rbx, qword ptr [r14 + 8]
	movbe	qword ptr [r15 + rbx + 24], r12
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 16], rax
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 104]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	add	qword ptr [rax], 32
	adc	qword ptr [rax + 8], 0
	adc	qword ptr [rax + 16], 0
	adc	qword ptr [rax + 24], 0
	mov	rdi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rax, qword ptr [rdi + 8]
	mov	rcx, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rdi + 16]
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	mov	qword ptr [r8 + 16], rdi
	mov	qword ptr [r8], rdx
	mov	qword ptr [r8 + 24], rcx
	mov	qword ptr [r8 + 8], rax
	mov	qword ptr [rsi + 16], rdi
	mov	qword ptr [rsi], rdx
	mov	qword ptr [rsi + 8], rax
	mov	qword ptr [rsi + 24], rcx
	mov	r12, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_122
# %bb.400:                              # %OP1433.PUSH1
	mov	r11, qword ptr [rbp - 168]      # 8-byte Reload
	mov	r15, r11
	shl	r15, 5
	mov	rbx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rdi, qword ptr [rbx + 160]
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 264], xmm0
	mov	qword ptr [rbx + 280], 0
	mov	eax, edi
	not	eax
	and	eax, 1
	shl	eax, 8
	vmovaps	ymm1, ymmword ptr [rip + .LCPI6_25] # ymm1 = [0,0,0,256]
	vmovups	ymmword ptr [rbx + 232], ymm1
	mov	qword ptr [rbx + 224], rax
	xor	ecx, ecx
	add	rax, -1
	mov	edx, 0
	adc	rdx, -1
	mov	esi, 0
	adc	rsi, -1
	adc	rcx, -1
	and	rax, rdi
	and	rdx, qword ptr [rbx + 168]
	and	rsi, qword ptr [rbx + 176]
	and	rcx, qword ptr [rbx + 184]
	mov	rdi, rcx
	shld	rdi, rsi, 63
	mov	r8, rsi
	shld	r8, rdx, 63
	mov	r9, rdx
	shld	r9, rax, 63
	mov	r10, rcx
	shr	r10
	mov	qword ptr [rbx + 160], r9
	mov	qword ptr [rbx + 168], r8
	mov	qword ptr [rbx + 184], r10
	mov	qword ptr [rbx + 176], rdi
	cmp	rax, 2
	mov	rdi, rdx
	sbb	rdi, 0
	mov	rdi, rsi
	sbb	rdi, 0
	mov	rdi, rcx
	sbb	rdi, 0
	setb	dil
	movzx	edi, dil
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	vmovdqu	xmmword ptr [r13 + r15 + 8], xmm0
	mov	qword ptr [r13 + r15], rdi
	mov	qword ptr [r13 + r15 + 24], 0
	jb	.LBB6_429
# %bb.401:                              # %OP1449.DUP1
	add	r15, r13
	vmovaps	xmm1, xmmword ptr [rip + .LCPI6_26] # xmm1 = [31,0,0,0]
	vmovups	ymmword ptr [rbx + 224], ymm1
	xor	edi, edi
	mov	r8d, 63
	cmp	r8, rax
	mov	eax, 0
	sbb	rax, rdx
	mov	eax, 0
	sbb	rax, rsi
	sbb	rdi, rcx
	setb	al
	movzx	eax, al
	vmovdqu	xmmword ptr [r15 + 8], xmm0
	mov	qword ptr [r15], rax
	mov	qword ptr [r15 + 24], 0
	jae	.LBB6_411
# %bb.402:
	mov	qword ptr [rbp - 48], r11       # 8-byte Spill
.LBB6_403:                              # %OP1468.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rsi
	shl	rax, 5
	lea	rbx, [rax + r13]
	mov	rdi, qword ptr [r13 + rax - 80]
	mov	rdx, qword ptr [r13 + rax - 96]
	mov	rcx, qword ptr [r13 + rax - 88]
	dec	rsi
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	shl	rsi, 5
	mov	r8, qword ptr [r13 + rsi]
	add	r8, rdx
	mov	r9, qword ptr [r13 + rsi + 8]
	adc	r9, rcx
	mov	r10, qword ptr [r13 + rsi + 16]
	adc	r10, rdi
	mov	r11, qword ptr [r13 + rsi + 24]
	mov	qword ptr [r13 + rax - 80], r10
	mov	r10, qword ptr [r13 + rax - 72]
	lea	rsi, [r13 + rsi]
	mov	qword ptr [rbp - 64], rsi       # 8-byte Spill
	adc	r11, r10
	mov	qword ptr [r13 + rax - 96], r8
	lea	rsi, [rax + r13]
	add	rsi, -32
	mov	qword ptr [r13 + rax - 72], r11
	mov	qword ptr [r13 + rax - 88], r9
	mov	r8, qword ptr [r13 + rax - 56]
	mov	r9, qword ptr [r13 + rax - 48]
	mov	qword ptr [r13 + rax - 48], rdi
	mov	r15, qword ptr [r13 + rax - 64]
	mov	qword ptr [r13 + rax - 64], rdx
	mov	rdx, qword ptr [r13 + rax - 40]
	mov	qword ptr [r13 + rax - 40], r10
	mov	qword ptr [r13 + rax - 56], rcx
	mov	qword ptr [r13 + rax - 16], r9
	mov	qword ptr [r13 + rax - 32], r15
	mov	qword ptr [r13 + rax - 8], rdx
	mov	qword ptr [r13 + rax - 24], r8
	mov	qword ptr [r13 + rax + 16], 0
	mov	qword ptr [r13 + rax], 0
	mov	qword ptr [r13 + rax + 24], 0
	mov	qword ptr [r13 + rax + 8], 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r13, qword ptr [r14 + 40]
	mov	rax, qword ptr [r13 + 16]
	mov	r12, qword ptr [r13 + 48]
	sub	rax, r12
	cmp	rax, 31
	jbe	.LBB6_471
.LBB6_404:                              # %OP1475.PUSH1
	mov	rax, qword ptr [r13 + 8]
	movbe	qword ptr [rax + r12 + 24], r15
	movbe	qword ptr [rax + r12 + 16], r8
	movbe	qword ptr [rax + r12 + 8], r9
	movbe	qword ptr [rax + r12], rdx
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	vmovups	ymmword ptr [rax], ymm0
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [rbx], ymm0
	mov	rdi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_449
# %bb.405:                              # %OP1478.SWAP1
	mov	rdx, qword ptr [rbx - 24]
	mov	rsi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 8]
	mov	rcx, qword ptr [rbx - 16]
	vmovdqa	xmm0, xmmword ptr [rbx - 64]
	vmovaps	xmm1, xmmword ptr [rbx - 48]
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 40], rax
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 56], rdx
	vmovaps	xmmword ptr [rbx - 16], xmm1
	vmovdqa	xmmword ptr [rbx - 32], xmm0
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
.LBB6_406:                              # %OP1479.JUMPDEST.preheader
	mov	rbx, qword ptr [rbp - 48]       # 8-byte Reload
	lea	r8, [rbx + 1]
	shl	rbx, 5
	add	rbx, rdi
	mov	qword ptr [rbp - 64], r8        # 8-byte Spill
	mov	r15, r8
	shl	r15, 5
	add	r15, rdi
	.p2align	4, 0x90
.LBB6_407:                              # %OP1479.JUMPDEST
                                        # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], rdx
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	rdi, r14
	mov	rsi, rbx
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_211
# %bb.408:                              # %OP1482.DUP2
                                        #   in Loop: Header=BB6_407 Depth=1
	mov	rax, qword ptr [rbx - 16]
	mov	r13, qword ptr [rbx - 32]
	mov	rcx, qword ptr [rbx - 24]
	mov	rdx, qword ptr [rbx - 8]
	mov	qword ptr [r15 + 24], rdx
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 16], rax
	mov	qword ptr [r15], r13
	mov	r9, qword ptr [rbx + 8]
	mov	r14, qword ptr [r14 + 40]
	mov	rdi, qword ptr [r14 + 16]
	mov	r12, qword ptr [r14 + 48]
	sub	rdi, r12
	mov	rsi, r13
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	neg	rcx
	mov	ecx, 0
	sbb	rcx, rax
	mov	rcx, qword ptr [rbx + 24]
	mov	eax, 0
	sbb	rax, rdx
	mov	r10, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 16]
	cmovb	rsi, r8
	cmp	rsi, rdi
	ja	.LBB6_488
.LBB6_409:                              # %OP1484.SWAP1
                                        #   in Loop: Header=BB6_407 Depth=1
	add	r12, qword ptr [r14 + 8]
	movbe	qword ptr [r13 + r12 + 24], r10
	movbe	qword ptr [r13 + r12 + 16], r9
	movbe	qword ptr [r13 + r12 + 8], rdx
	movbe	qword ptr [r13 + r12], rcx
	mov	r9, qword ptr [rbx - 8]
	mov	r13, qword ptr [rbx - 16]
	mov	r11, qword ptr [rbx - 24]
	mov	rdi, qword ptr [rbx - 32]
	mov	rax, qword ptr [rbx - 40]
	mov	rcx, qword ptr [rbx - 48]
	mov	rdx, qword ptr [rbx - 56]
	mov	rsi, qword ptr [rbx - 64]
	add	rsi, 1
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [rbx - 64], rsi
	mov	qword ptr [rbx - 48], rcx
	mov	qword ptr [rbx - 56], rdx
	mov	qword ptr [rbx - 40], rax
	mov	r10, rdi
	add	r10, 32
	adc	r11, 0
	adc	r13, 0
	adc	r9, 0
	mov	qword ptr [rbx - 32], r10
	mov	qword ptr [rbx - 16], r13
	mov	qword ptr [rbx - 24], r11
	mov	qword ptr [rbx - 8], r9
	mov	r8, qword ptr [rbx - 96]
	cmp	r10, r8
	mov	r10, qword ptr [rbx - 88]
	sbb	r11, r10
	mov	r11, qword ptr [rbx - 80]
	sbb	r13, r11
	mov	r13, qword ptr [rbx - 72]
	mov	qword ptr [r15], r8
	mov	qword ptr [r15 + 16], r11
	mov	qword ptr [r15 + 24], r13
	mov	qword ptr [r15 + 8], r10
	sbb	r9, r13
	setb	r9b
	movzx	r9d, r9b
	mov	qword ptr [rbx], r9
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rbx + 8], xmm0
	mov	qword ptr [rbx + 24], 0
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jb	.LBB6_407
	jmp	.LBB6_410
.LBB6_488:                              # %resize.i8195
                                        #   in Loop: Header=BB6_407 Depth=1
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 80], r9        # 8-byte Spill
	mov	qword ptr [rbp - 72], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 88], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	r10, qword ptr [rbp - 96]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 80]        # 8-byte Reload
	test	al, al
	je	.LBB6_409
	jmp	.LBB6_449
.LBB6_410:                              # %OP850.DUP3
	sub	edi, r8d
	and	edi, 31
	mov	qword ptr [rbx], r8
	mov	qword ptr [rbx + 8], r10
	mov	qword ptr [rbx + 16], r11
	mov	qword ptr [rbx + 24], r13
	add	rdi, r8
	mov	rax, r10
	adc	rax, 0
	mov	rcx, r11
	adc	rcx, 0
	mov	rdx, r13
	adc	rdx, 0
	mov	qword ptr [rbx - 96], rdi
	mov	qword ptr [rbx - 88], rax
	mov	qword ptr [rbx - 80], rcx
	mov	qword ptr [rbx - 72], rdx
	mov	qword ptr [rbx - 32], r8
	mov	qword ptr [rbx - 24], r10
	mov	qword ptr [rbx - 16], r11
	mov	qword ptr [rbx - 8], r13
	mov	r11, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
.LBB6_429:                              # %OP858.JUMPDEST
	lea	rdi, [r11 - 5]
	shl	r11, 5
	mov	rax, qword ptr [r13 + r11 - 224]
	mov	rcx, qword ptr [r13 + r11 - 216]
	mov	rsi, qword ptr [r13 + r11 - 200]
	mov	rdx, qword ptr [r13 + r11 - 208]
	mov	r8, rdi
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	jmp	.LBB6_300
.LBB6_411:                              # %OP1454.PUSH2
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_22] # xmm0 = [256,0,0,0]
	vmovups	ymmword ptr [r15], ymm0
	lea	rsi, [rbx + 256]
	vmovups	ymmword ptr [rbx + 224], ymm0
	vmovdqu	ymm0, ymmword ptr [rbx + 128]
	vmovdqu	ymmword ptr [rbx + 256], ymm0
	mov	rdi, r12
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_472
# %bb.412:                              # %OP1458.DIV_udiv-special-cases
	mov	r14, qword ptr [rbx + 264]
	mov	rdi, qword ptr [rbx + 280]
	mov	r11, qword ptr [rbx + 256]
	mov	r13, qword ptr [rbx + 272]
	mov	rsi, qword ptr [rbx + 248]
	mov	r8, qword ptr [rbx + 224]
	mov	r10, qword ptr [rbx + 232]
	mov	r9, qword ptr [rbx + 240]
	mov	rax, r10
	or	rax, rsi
	mov	rcx, r8
	or	rcx, r9
	or	rcx, rax
	sete	al
	mov	rcx, r14
	or	rcx, rdi
	mov	rdx, r11
	mov	rbx, r11
	or	rdx, r13
	or	rdx, rcx
	sete	cl
	or	cl, al
	lzcnt	rax, rsi
	lzcnt	rdx, r9
	add	rdx, 64
	test	rsi, rsi
	cmovne	rdx, rax
	lzcnt	rax, r10
	mov	qword ptr [rbp - 120], r8       # 8-byte Spill
	lzcnt	r11, r8
	add	r11, 64
	mov	qword ptr [rbp - 96], r10       # 8-byte Spill
	test	r10, r10
	cmovne	r11, rax
	sub	r11, -128
	mov	qword ptr [rbp - 128], r9       # 8-byte Spill
	mov	rax, r9
	mov	qword ptr [rbp - 104], rsi      # 8-byte Spill
	or	rax, rsi
	cmovne	r11, rdx
	lzcnt	rax, rdi
	lzcnt	rdx, r13
	add	rdx, 64
	test	rdi, rdi
	cmovne	rdx, rax
	lzcnt	rax, r14
	lzcnt	rsi, rbx
	add	rsi, 64
	test	r14, r14
	cmovne	rsi, rax
	sub	rsi, -128
	mov	rax, r13
	or	rax, rdi
	cmovne	rsi, rdx
	xor	r12d, r12d
	sub	r11, rsi
	mov	edx, 0
	sbb	rdx, rdx
	mov	r9d, 0
	sbb	r9, r9
	mov	r10d, 0
	sbb	r10, r10
	mov	esi, 255
	cmp	rsi, r11
	mov	esi, 0
	sbb	rsi, rdx
	mov	esi, 0
	sbb	rsi, r9
	mov	esi, 0
	sbb	rsi, r10
	setb	sil
	or	sil, cl
	mov	qword ptr [rbp - 80], rdi       # 8-byte Spill
	cmovne	rdi, r12
	mov	r8, rdi
	mov	qword ptr [rbp - 64], r13       # 8-byte Spill
	mov	rsi, r13
	mov	r13, rbx
	cmovne	rsi, r12
	mov	rbx, r14
	cmovne	r14, r12
	mov	rax, r14
	cmove	r12, r13
	jne	.LBB6_417
# %bb.413:                              # %OP1458.DIV_udiv-special-cases
	mov	rcx, r11
	xor	rcx, 255
	or	rcx, r9
	mov	rdi, rdx
	or	rdi, r10
	or	rdi, rcx
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	je	.LBB6_61
# %bb.414:                              # %udiv-bb1
	mov	qword ptr [rbp - 184], r15      # 8-byte Spill
	mov	rax, r11
	add	r11, 1
	mov	qword ptr [rbp - 48], r11       # 8-byte Spill
	adc	rdx, 0
	adc	r9, 0
	adc	r10, 0
	mov	qword ptr [rbp - 720], r13
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rbp - 752], ymm0
	mov	r12, rbx
	mov	qword ptr [rbp - 712], rbx
	mov	rbx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbp - 704], rbx
	mov	qword ptr [rbp - 136], r13      # 8-byte Spill
	mov	r13, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbp - 696], r13
	not	al
	mov	ecx, eax
	and	cl, 7
	shr	al, 3
	neg	al
	movsx	rax, al
	mov	r11, rdx
	mov	rdx, qword ptr [rbp + rax - 704]
	mov	r8, qword ptr [rbp + rax - 696]
	shld	r8, rdx, cl
	shlx	rdx, rdx, rcx
	mov	esi, ecx
	not	sil
	mov	rdi, qword ptr [rbp + rax - 720]
	mov	r14, qword ptr [rbp + rax - 712]
	mov	rax, r14
	shr	rax
	shrx	rsi, rax, rsi
	shld	r14, rdi, cl
	mov	qword ptr [rbp - 200], r14      # 8-byte Spill
	or	rsi, rdx
	mov	qword ptr [rbp - 216], r11      # 8-byte Spill
	mov	rax, r11
	mov	r11, qword ptr [rbp - 48]       # 8-byte Reload
	mov	qword ptr [rbp - 208], r10      # 8-byte Spill
	or	rax, r10
	mov	rdx, r11
	or	rdx, r9
	xor	r14d, r14d
	or	rdx, rax
	shlx	rdx, rdi, rcx
	je	.LBB6_59
# %bb.415:                              # %udiv-preheader
	mov	r15, r9
	vmovdqu	ymmword ptr [rbp - 656], ymm0
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbp - 688], rax
	mov	qword ptr [rbp - 680], r12
	mov	qword ptr [rbp - 672], rbx
	mov	qword ptr [rbp - 664], r13
	mov	ecx, r11d
	and	cl, 7
	mov	rax, rdx
	mov	edx, r11d
	shr	dl, 3
	movzx	edx, dl
	mov	rdi, qword ptr [rbp + rdx - 664]
	mov	r9, qword ptr [rbp + rdx - 672]
	mov	qword ptr [rbp - 64], r15       # 8-byte Spill
	mov	r15, r9
	shrd	r15, rdi, cl
	mov	r12, qword ptr [rbp + rdx - 688]
	mov	rdx, qword ptr [rbp + rdx - 680]
	shrx	r14, rdx, rcx
	shrx	rbx, rdi, rcx
	mov	edi, ecx
	not	dil
                                        # kill: def $cl killed $cl killed $rcx
	shrd	r12, rdx, cl
	mov	rdx, rax
	add	r9, r9
	shlx	rcx, r9, rdi
	or	rcx, r14
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	add	rax, -1
	mov	qword ptr [rbp - 136], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 152], rax      # 8-byte Spill
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	adc	rax, -1
	mov	qword ptr [rbp - 160], rax      # 8-byte Spill
	mov	rdi, qword ptr [rbp - 104]      # 8-byte Reload
	adc	rdi, -1
	mov	qword ptr [rbp - 176], rdi      # 8-byte Spill
	xor	edi, edi
	mov	qword ptr [rbp - 192], rdi      # 8-byte Spill
	xor	r14d, r14d
	xor	r13d, r13d
	xor	r9d, r9d
	xor	edi, edi
	mov	r11, qword ptr [rbp - 216]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 208]      # 8-byte Reload
	mov	rax, qword ptr [rbp - 200]      # 8-byte Reload
	.p2align	4, 0x90
.LBB6_416:                              # %udiv-do-while
                                        # =>This Inner Loop Header: Depth=1
	shld	rbx, r15, 1
	shld	r15, rcx, 1
	shld	rcx, r12, 1
	shld	r12, r8, 1
	shld	r8, rsi, 1
	or	r8, rdi
	shld	rsi, rax, 1
	or	rsi, r9
	shld	rax, rdx, 1
	or	rax, r13
	add	rdx, rdx
	or	rdx, r14
	mov	qword ptr [rbp - 80], rdx       # 8-byte Spill
	cmp	qword ptr [rbp - 136], r12      # 8-byte Folded Reload
	mov	rdi, qword ptr [rbp - 152]      # 8-byte Reload
	sbb	rdi, rcx
	mov	rdi, qword ptr [rbp - 160]      # 8-byte Reload
	sbb	rdi, r15
	mov	rdi, qword ptr [rbp - 176]      # 8-byte Reload
	sbb	rdi, rbx
	sar	rdi, 63
	mov	r14d, edi
	and	r14d, 1
	mov	r9, rdi
	and	r9, qword ptr [rbp - 104]       # 8-byte Folded Reload
	mov	r13, rdi
	and	r13, qword ptr [rbp - 128]      # 8-byte Folded Reload
	mov	rdx, rdi
	and	rdx, qword ptr [rbp - 96]       # 8-byte Folded Reload
	and	rdi, qword ptr [rbp - 120]      # 8-byte Folded Reload
	sub	r12, rdi
	sbb	rcx, rdx
	sbb	r15, r13
	sbb	rbx, r9
	mov	rdi, qword ptr [rbp - 48]       # 8-byte Reload
	add	rdi, -1
	adc	r11, -1
	mov	r9, qword ptr [rbp - 64]        # 8-byte Reload
	adc	r9, -1
	adc	r10, -1
	mov	rdx, r11
	or	rdx, r10
	mov	qword ptr [rbp - 48], rdi       # 8-byte Spill
	mov	qword ptr [rbp - 64], r9        # 8-byte Spill
	or	rdi, r9
	or	rdi, rdx
	mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r13d, 0
	mov	r9d, 0
	mov	edi, 0
	jne	.LBB6_416
	jmp	.LBB6_60
.LBB6_417:
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	jmp	.LBB6_61
.LBB6_418:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 458
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_141
# %bb.419:                              # %dynamic_jump_table
	xor	rax, 469
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_143
	jmp	.LBB6_486
.LBB6_420:                              # %dynamic_jump_table
	xor	rdi, 2116
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_169
# %bb.421:                              # %dynamic_jump_table
	xor	rax, 2255
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_177
	jmp	.LBB6_486
.LBB6_422:                              # %dynamic_jump_table
	xor	rdi, 2740
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_2
# %bb.423:                              # %dynamic_jump_table
	xor	rax, 2821
	or	rax, rdx
	or	rax, rcx
	jne	.LBB6_486
# %bb.424:                              # %OP1356.JUMPDEST.loopexit
	mov	rcx, r8
	jmp	.LBB6_231
.LBB6_425:                              # %dynamic_jump_table
	mov	rdi, rax
	xor	rdi, 821
	or	rdi, rdx
	or	rcx, rsi
	or	rdi, rcx
	je	.LBB6_75
# %bb.426:                              # %dynamic_jump_table
	xor	rax, 866
.LBB6_427:                              # %dynamic_jump_table
	or	rax, rdx
	or	rax, rcx
	je	.LBB6_96
	jmp	.LBB6_486
.LBB6_428:                              # %OP858.JUMPDEST.loopexit
	mov	r11, qword ptr [rbp - 48]       # 8-byte Reload
	jmp	.LBB6_429
.LBB6_430:                              # %OP1388.JUMPDEST.loopexit
	mov	rdx, rsi
	jmp	.LBB6_395
.LBB6_485:                              # %dynamic_jump_table
	xor	rax, 1066
	or	rax, rdx
	or	rcx, rsi
	or	rcx, rax
	je	.LBB6_254
	jmp	.LBB6_486
.LBB6_431:                              # %OP1233.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
.LBB6_432:                              # %OP1233.JUMPDEST
	mov	rax, qword ptr [rbp - 48]       # 8-byte Reload
	mov	r12, rax
	shl	r12, 5
	vmovups	ymm0, ymmword ptr [r13 + r12 - 32]
	vmovups	ymmword ptr [r13 + r12], ymm0
	lea	r14, [rax + 2]
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_28] # xmm0 = [3,0,0,0]
	vmovdqu	ymmword ptr [r13 + r12 + 32], ymm0
	mov	qword ptr [rbp - 104], r14      # 8-byte Spill
	shl	r14, 5
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r13 + r14], ymm0
	lea	rbx, [rax + 3]
	mov	ecx, dword ptr [rdi + 164]
	movbe	rdx, qword ptr [rdi + 156]
	bswap	rcx
	shrd	rcx, rdx, 32
	movbe	rsi, qword ptr [rdi + 148]
	shrd	rdx, rsi, 32
	shr	rsi, 32
	mov	qword ptr [rbp - 128], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	qword ptr [r13 + rbx + 8], rdx
	mov	qword ptr [r13 + rbx + 16], rsi
	mov	qword ptr [r13 + rbx], rcx
	mov	qword ptr [r13 + rbx + 24], 0
	vmovdqu	ymmword ptr [r13 + r12 + 128], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	rax, qword ptr [r9 + 16]
	mov	r15, qword ptr [r9 + 48]
	sub	rax, r15
	cmp	rax, 31
	mov	qword ptr [rbp - 96], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 64], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 80], rsi       # 8-byte Spill
	jbe	.LBB6_473
.LBB6_433:                              # %OP1244.PUSH1
	mov	qword ptr [rbp - 136], r12      # 8-byte Spill
	add	r12, r13
	add	r12, 32
	add	r14, r13
	add	rbx, r13
	mov	rax, qword ptr [r9 + 8]
	movbe	qword ptr [rax + r15 + 24], rcx
	movbe	qword ptr [rax + r15 + 16], rdx
	movbe	qword ptr [rax + r15 + 8], rsi
	mov	qword ptr [rax + r15], 0
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	r15, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	r11, qword ptr [r12 + 24]
	mov	rsi, qword ptr [r12]
	mov	r8, qword ptr [r12 + 8]
	mov	r9, qword ptr [r12 + 16]
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	mov	qword ptr [r14 + 16], r9
	mov	qword ptr [rbp - 72], rsi       # 8-byte Spill
	mov	qword ptr [r14], rsi
	mov	qword ptr [r14 + 24], r11
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [r14 + 8], r8
	mov	qword ptr [rbx], r15
	mov	qword ptr [rbx + 16], rcx
	mov	qword ptr [rbx + 24], rax
	mov	qword ptr [rbx + 8], rdx
	mov	rbx, qword ptr [rdi + 40]
	mov	r10, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbx + 48]
	sub	r10, r13
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_475
.LBB6_434:                              # %OP1249.PUSH1
	add	r13, qword ptr [rbx + 8]
	mov	rax, qword ptr [rbp - 72]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 24], rax
	mov	rax, qword ptr [rbp - 88]       # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 16], rax
	mov	rax, qword ptr [rbp - 120]      # 8-byte Reload
	movbe	qword ptr [r15 + r13 + 8], rax
	movbe	qword ptr [r15 + r13], r11
	add	qword ptr [r12], 32
	adc	qword ptr [r12 + 8], 0
	adc	qword ptr [r12 + 16], 0
	adc	qword ptr [r12 + 24], 0
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	rsi, r12
	mov	r14, rdi
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_479
# %bb.435:                              # %OP1253.SLOAD
	mov	rdi, r14
	mov	rsi, r12
	mov	edx, 17
	call	__revmc_builtin_sload@PLT
	test	al, al
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_479
# %bb.436:                              # %OP1254.LT
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	add	rsi, r13
	mov	rax, qword ptr [rsi + 56]
	mov	rcx, qword ptr [rsi + 32]
	mov	rdx, qword ptr [rsi + 40]
	cmp	rcx, qword ptr [rsi]
	sbb	rdx, qword ptr [rsi + 8]
	mov	rcx, qword ptr [rsi + 48]
	sbb	rcx, qword ptr [rsi + 16]
	sbb	rax, qword ptr [rsi + 24]
	setae	al
	movzx	eax, al
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	xmmword ptr [rsi + 8], xmm0
	mov	qword ptr [rsi], rax
	mov	qword ptr [rsi + 24], 0
	mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	r12, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	jb	.LBB6_447
# %bb.437:
	xor	r9d, r9d
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
.LBB6_438:                              # %OP1263.JUMPDEST
	mov	rsi, qword ptr [rbp - 48]       # 8-byte Reload
	mov	rax, rsi
	shl	rax, 5
	vmovups	ymm0, ymmword ptr [r13 + rax - 32]
	mov	qword ptr [rbp - 88], rax       # 8-byte Spill
	vmovups	ymmword ptr [r13 + rax], ymm0
	lea	r14, [rsi + 1]
	mov	qword ptr [rbp - 176], r14      # 8-byte Spill
	shl	r14, 5
	vmovaps	xmm0, xmmword ptr [rip + .LCPI6_28] # xmm0 = [3,0,0,0]
	vmovups	ymmword ptr [r13 + r14], ymm0
	mov	qword ptr [rbp - 104], r12      # 8-byte Spill
	shl	r12, 5
	vxorps	xmm0, xmm0, xmm0
	vmovups	ymmword ptr [r13 + r12], ymm0
	lea	rax, [rsi + 4]
	mov	r10, r8
	shl	r10, 5
	mov	qword ptr [rbp - 144], rax      # 8-byte Spill
	shl	rax, 5
	mov	qword ptr [r13 + r10 + 16], r11
	mov	qword ptr [r13 + r10], rdx
	mov	qword ptr [r13 + r10 + 24], r9
	mov	qword ptr [r13 + r10 + 8], rcx
	mov	qword ptr [rbp - 72], rax       # 8-byte Spill
	vmovups	ymmword ptr [r13 + rax], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rdi + 40]
	mov	rax, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	rax, rbx
	cmp	rax, 31
	mov	qword ptr [rbp - 96], rdx       # 8-byte Spill
	mov	qword ptr [rbp - 64], rcx       # 8-byte Spill
	mov	qword ptr [rbp - 80], r11       # 8-byte Spill
	mov	qword ptr [rbp - 160], r9       # 8-byte Spill
	jbe	.LBB6_476
.LBB6_439:                              # %OP1274.PUSH1
	add	r14, r13
	add	r12, r13
	add	r10, r13
	mov	rax, qword ptr [r15 + 8]
	movbe	qword ptr [rax + rbx + 24], rdx
	movbe	qword ptr [rax + rbx + 16], rcx
	movbe	qword ptr [rax + rbx + 8], r11
	movbe	qword ptr [rax + rbx], r9
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r10], ymm0
	mov	rax, qword ptr [r12 + 24]
	mov	rcx, qword ptr [r12 + 16]
	mov	r15, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
	add	r15, 32
	adc	rdx, 0
	adc	rcx, 0
	adc	rax, 0
	mov	qword ptr [r12 + 8], rdx
	mov	qword ptr [r12 + 24], rax
	mov	qword ptr [r12], r15
	mov	qword ptr [r12 + 16], rcx
	mov	r11, qword ptr [r14 + 8]
	mov	rsi, qword ptr [r14 + 24]
	mov	r9, qword ptr [r14]
	mov	r8, qword ptr [r14 + 16]
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [r14], r15
	mov	qword ptr [r14 + 24], rax
	mov	qword ptr [r14 + 8], rdx
	mov	qword ptr [rbp - 136], r8       # 8-byte Spill
	mov	qword ptr [r12 + 16], r8
	mov	qword ptr [rbp - 152], r9       # 8-byte Spill
	mov	qword ptr [r12], r9
	mov	qword ptr [rbp - 128], rsi      # 8-byte Spill
	mov	qword ptr [r12 + 24], rsi
	mov	qword ptr [r12 + 8], r11
	mov	qword ptr [r10 + 16], rcx
	mov	qword ptr [r10], r15
	mov	qword ptr [r10 + 24], rax
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	mov	qword ptr [r10 + 8], rdx
	mov	r13, qword ptr [rdi + 40]
	mov	r10, qword ptr [r13 + 16]
	mov	rbx, qword ptr [r13 + 48]
	sub	r10, rbx
	mov	rsi, r15
	add	rsi, 32
	mov	r8, -1
	cmovb	rsi, r8
	xor	r9d, r9d
	neg	rdx
	mov	edx, 0
	sbb	rdx, rcx
	sbb	r9, rax
	cmovb	rsi, r8
	cmp	rsi, r10
	ja	.LBB6_478
.LBB6_440:                              # %OP1279.PUSH1
	add	rbx, qword ptr [r13 + 8]
	mov	rax, qword ptr [rbp - 152]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 24], rax
	movbe	qword ptr [r15 + rbx + 16], r11
	mov	rax, qword ptr [rbp - 136]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx + 8], rax
	mov	rax, qword ptr [rbp - 128]      # 8-byte Reload
	movbe	qword ptr [r15 + rbx], rax
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_14] # xmm0 = [32,0]
	vmovdqu	ymmword ptr [r12], ymm0
	add	qword ptr [r14], 32
	adc	qword ptr [r14 + 8], 0
	adc	qword ptr [r14 + 16], 0
	adc	qword ptr [r14 + 24], 0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rsi, r14
	vzeroupper
	call	__revmc_builtin_keccak256@PLT
	test	al, al
	jne	.LBB6_479
# %bb.441:                              # %OP1283.PUSH1
	mov	rax, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 88]       # 8-byte Reload
	add	rbx, rax
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, 5
	mov	qword ptr [rbp - 104], rcx      # 8-byte Spill
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [r12], ymm0
	mov	r15, qword ptr [rbp - 72]       # 8-byte Reload
	add	r15, rax
	mov	rax, qword ptr [rbx + 24]
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 16]
	mov	r13, qword ptr [rbp - 120]      # 8-byte Reload
	mov	qword ptr [r13 + 16], rsi
	mov	qword ptr [r13], rcx
	mov	qword ptr [r13 + 24], rax
	mov	qword ptr [r13 + 8], rdx
	vmovdqu	ymm0, ymmword ptr [r14]
	vmovdqu	ymmword ptr [r15], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r15
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sload@PLT
	test	al, al
	jne	.LBB6_479
# %bb.442:                              # %OP1287.SUB
	mov	rcx, qword ptr [r15 + 24]
	mov	rax, qword ptr [r15 + 16]
	mov	rdx, qword ptr [r15]
	mov	qword ptr [rbp - 72], r15       # 8-byte Spill
	mov	rsi, qword ptr [r15 + 8]
	sub	rdx, qword ptr [r13]
	sbb	rsi, qword ptr [r13 + 8]
	sbb	rax, qword ptr [r13 + 16]
	sbb	rcx, qword ptr [r13 + 24]
	mov	qword ptr [r13], rdx
	mov	qword ptr [r13 + 8], rsi
	mov	qword ptr [r13 + 16], rax
	mov	qword ptr [r13 + 24], rcx
	vmovups	ymm0, ymmword ptr [rbx]
	mov	qword ptr [rbx + 24], rcx
	mov	qword ptr [rbx], rdx
	mov	qword ptr [rbx + 8], rsi
	mov	qword ptr [rbx + 16], rax
	vmovups	ymmword ptr [r13], ymm0
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12 + 8], rsi
	mov	qword ptr [r12], rdx
	vmovdqu	ymm0, ymmword ptr [r14]
	mov	qword ptr [r14 + 24], rcx
	mov	qword ptr [r14], rdx
	mov	qword ptr [r14 + 8], rsi
	mov	qword ptr [r14 + 16], rax
	vmovdqu	ymmword ptr [r12], ymm0
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, r14
	mov	edx, 17
	vzeroupper
	call	__revmc_builtin_sstore@PLT
	test	al, al
	jne	.LBB6_461
# %bb.443:                              # %OP1294.POP
	mov	rax, qword ptr [rbp - 96]       # 8-byte Reload
	mov	qword ptr [rbx], rax
	mov	rax, qword ptr [rbp - 80]       # 8-byte Reload
	mov	qword ptr [rbx + 16], rax
	mov	rax, qword ptr [rbp - 64]       # 8-byte Reload
	mov	qword ptr [rbx + 8], rax
	mov	rax, qword ptr [rbp - 160]      # 8-byte Reload
	mov	qword ptr [rbx + 24], rax
	mov	rax, qword ptr [rbx - 16]
	mov	rcx, qword ptr [rbx - 8]
	mov	rdx, qword ptr [rbx - 32]
	mov	qword ptr [rbp - 88], rbx       # 8-byte Spill
	mov	rsi, qword ptr [rbx - 24]
	mov	rdi, rsi
	or	rdi, rcx
	mov	r8, rdx
	or	r8, rax
	xor	r9d, r9d
	or	r8, rdi
	mov	edi, 2300
	cmovne	rdi, r9
	mov	qword ptr [r14], rdi
	mov	qword ptr [r14 + 16], 0
	mov	qword ptr [r14 + 24], 0
	mov	qword ptr [r14 + 8], 0
	mov	qword ptr [r12 + 16], rax
	mov	qword ptr [r12], rdx
	mov	qword ptr [r12 + 24], rcx
	mov	qword ptr [r12 + 8], rsi
	vmovdqa	xmm0, xmmword ptr [rip + .LCPI6_1] # xmm0 = [64,0,0,0]
	vmovdqu	ymmword ptr [r13], ymm0
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r12, qword ptr [rax + 40]
	mov	rax, qword ptr [r12 + 16]
	mov	rbx, qword ptr [r12 + 48]
	sub	rax, rbx
	mov	r15, r12
	cmp	rax, 95
	jbe	.LBB6_480
.LBB6_444:                              # %OP1306.MLOAD.contd
	mov	rax, qword ptr [r12 + 8]
	mov	rcx, qword ptr [rax + rbx + 88]
	mov	rdx, qword ptr [rax + rbx + 80]
	mov	rsi, qword ptr [rax + rbx + 64]
	mov	rax, qword ptr [rax + rbx + 72]
	movbe	qword ptr [r13 + 24], rsi
	movbe	qword ptr [r13 + 8], rdx
	movbe	qword ptr [r13], rcx
	movbe	qword ptr [r13 + 16], rax
	mov	r13, qword ptr [rbp - 72]       # 8-byte Reload
	mov	qword ptr [r13 + 24], 0
	mov	qword ptr [r13 + 8], 0
	mov	qword ptr [r13 + 16], 0
	mov	qword ptr [r13], 0
	mov	r12, qword ptr [rbp - 48]       # 8-byte Reload
	add	r12, 6
	mov	r13, qword ptr [rbp - 104]      # 8-byte Reload
	shl	r13, 5
	mov	r14, qword ptr [rbp - 112]      # 8-byte Reload
	mov	qword ptr [r14 + r13 + 24], 0
	mov	qword ptr [r14 + r13 + 8], 0
	mov	qword ptr [r14 + r13 + 16], 0
	mov	qword ptr [r14 + r13], 64
	mov	rax, qword ptr [r15 + 16]
	mov	rbx, qword ptr [r15 + 48]
	sub	rax, rbx
	cmp	rax, 95
	jbe	.LBB6_483
.LBB6_445:                              # %OP1309.MLOAD.contd
	add	r13, r14
	mov	rsi, qword ptr [r15 + 8]
	mov	rax, qword ptr [rsi + rbx + 88]
	mov	rcx, qword ptr [rsi + rbx + 64]
	mov	rdx, qword ptr [rsi + rbx + 72]
	mov	rdi, rcx
	bswap	rdi
	mov	r8, rdx
	bswap	r8
	mov	rbx, qword ptr [rsi + rbx + 80]
	mov	r9, rbx
	bswap	r9
	mov	r10, rax
	movbe	qword ptr [r13 + 24], rcx
	movbe	qword ptr [r13 + 8], rbx
	movbe	qword ptr [r13 + 16], rdx
	bswap	r10
	movbe	qword ptr [r13], rax
	shl	r12, 5
	mov	rsi, qword ptr [rbp - 88]       # 8-byte Reload
	mov	r11, qword ptr [rsi + 96]
	sub	r11, r10
	mov	r10, qword ptr [rsi + 104]
	sbb	r10, r9
	mov	r9, qword ptr [rsi + 112]
	sbb	r9, r8
	mov	r8, qword ptr [rsi + 120]
	sbb	r8, rdi
	mov	qword ptr [r14 + r12], r11
	mov	qword ptr [r14 + r12 + 16], r9
	mov	qword ptr [r14 + r12 + 8], r10
	mov	qword ptr [r14 + r12 + 24], r8
	movbe	qword ptr [rsi + 240], rdx
	movbe	qword ptr [rsi + 224], rax
	movbe	qword ptr [rsi + 248], rcx
	movbe	qword ptr [rsi + 232], rbx
	vmovdqu	ymm0, ymmword ptr [rsi]
	vmovups	ymm1, ymmword ptr [rsi + 32]
	vmovups	ymm2, ymmword ptr [rsi + 64]
	vmovups	ymmword ptr [rsi + 256], ymm2
	vmovdqu	ymmword ptr [rsi + 288], ymm0
	vmovups	ymmword ptr [rsi + 320], ymm1
	sub	rsi, -128
	mov	rbx, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, rbx
	mov	edx, 17
	xor	ecx, ecx
	vzeroupper
	call	__revmc_builtin_call@PLT
	test	al, al
	jne	.LBB6_482
# %bb.446:                              # %suspend
	lea	rax, [rip + .Ltmp20]
	mov	qword ptr [rbx + 32], rax
	mov	al, 32
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_447:                              # %OP1260.PUSH1
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	ymmword ptr [rsi + 32], ymm0
	vmovdqu	ymmword ptr [rsi], ymm0
	jmp	.LBB6_193
.LBB6_450:                              # %OP942.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	jmp	.LBB6_137
.LBB6_451:                              # %OP983.JUMPDEST.loopexit
	mov	rax, qword ptr [rbp - 144]      # 8-byte Reload
	jmp	.LBB6_150
.LBB6_452:                              # %dynamic_jump_table
	xor	rax, 2985
	or	rax, rdx
	or	rcx, rsi
	or	rcx, rax
	mov	r14, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rdi, qword ptr [rbp - 112]      # 8-byte Reload
	jne	.LBB6_486
# %bb.453:                              # %OP1479.JUMPDEST.preheader.loopexit
	mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload
	shl	rdx, 5
	mov	rax, qword ptr [rdi + rdx - 40]
	mov	rcx, qword ptr [rdi + rdx - 48]
	mov	rsi, qword ptr [rdi + rdx - 64]
	mov	rdx, qword ptr [rdi + rdx - 56]
	jmp	.LBB6_406
.LBB6_454:                              # %OP1511.JUMPDEST.loopexit
	mov	rdi, qword ptr [rbp - 144]      # 8-byte Reload
	jmp	.LBB6_284
.LBB6_455:
	mov	qword ptr [rbp - 48], r14       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_456:                              # %resize.i8121
	mov	r13, r11
	mov	r12, r15
	mov	r15, r10
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_474
# %bb.457:                              # %resize.i8121.OP1415.MLOAD.contd_crit_edge
	mov	r11, r13
	mov	rax, qword ptr [r13 + 24]
	mov	rsi, qword ptr [r13 + 16]
	mov	rcx, qword ptr [r13]
	mov	rdx, qword ptr [r13 + 8]
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rdi + 40]
	mov	r10, r15
	mov	r15, r12
	mov	r8, qword ptr [rbp - 64]        # 8-byte Reload
	jmp	.LBB6_397
.LBB6_458:                              # %resize.i8136
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 104], r11      # 8-byte Spill
	mov	qword ptr [rbp - 120], r9       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 120]       # 8-byte Reload
	mov	r11, qword ptr [rbp - 104]      # 8-byte Reload
	test	al, al
	je	.LBB6_398
	jmp	.LBB6_92
.LBB6_459:                              # %resize.i8151
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 136], rsi      # 8-byte Spill
	mov	rsi, rax
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rsi, qword ptr [rbp - 136]      # 8-byte Reload
	test	al, al
	je	.LBB6_399
.LBB6_474:
	mov	rcx, qword ptr [rbp - 128]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_460:                              # %resize.i7377
	mov	esi, 32
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r8, qword ptr [rbp - 152]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB6_310
.LBB6_461:
	mov	rcx, qword ptr [rbp - 176]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_462:                              # %resize.i7392
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 224], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 224]      # 8-byte Reload
	mov	r10, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB6_311
.LBB6_463:
	mov	rcx, qword ptr [rbp - 216]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_464:
	mov	rcx, qword ptr [rbp - 192]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_465:                              # %resize.i7408
	mov	r14, r11
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_487
# %bb.466:                              # %resize.i7408.OP725.MLOAD.contd_crit_edge
	mov	r11, r14
	mov	r14, qword ptr [r14 + 24]
	mov	r10, qword ptr [r11 + 16]
	mov	rax, qword ptr [r11]
	mov	qword ptr [rbp - 64], rax       # 8-byte Spill
	mov	r8, qword ptr [r11 + 8]
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 120], rax      # 8-byte Spill
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	jmp	.LBB6_315
.LBB6_467:                              # %resize.i7423
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	qword ptr [rbp - 152], rcx      # 8-byte Spill
	call	__revmc_builtin_resize_memory@PLT
	mov	rcx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 88]       # 8-byte Reload
	test	al, al
	je	.LBB6_316
.LBB6_468:
	mov	rcx, qword ptr [rbp - 136]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_469:                              # %resize.i7439
	mov	r14, r8
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_487
# %bb.470:                              # %resize.i7439.OP736.MLOAD.contd_crit_edge
	mov	r8, r14
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 16]
	mov	rdx, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	r13, qword ptr [rbp - 112]      # 8-byte Reload
	mov	rbx, qword ptr [rbp - 104]      # 8-byte Reload
	jmp	.LBB6_317
.LBB6_472:
	mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload
	add	rcx, 9
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_471:                              # %resize.i8180
	mov	qword ptr [rbp - 72], rsi       # 8-byte Spill
	mov	esi, 32
	mov	rdi, r14
	mov	qword ptr [rbp - 88], r8        # 8-byte Spill
	mov	qword ptr [rbp - 96], r9        # 8-byte Spill
	mov	qword ptr [rbp - 104], rdx      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	r9, qword ptr [rbp - 96]        # 8-byte Reload
	mov	r8, qword ptr [rbp - 88]        # 8-byte Reload
	mov	rsi, qword ptr [rbp - 72]       # 8-byte Reload
	test	al, al
	je	.LBB6_404
	jmp	.LBB6_82
.LBB6_473:                              # %resize.i7968
	mov	esi, 32
	mov	qword ptr [rbp - 72], r9        # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r9, qword ptr [rbp - 72]        # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	rsi, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload
	test	al, al
	je	.LBB6_433
	jmp	.LBB6_474
.LBB6_475:                              # %resize.i7983
	mov	qword ptr [rbp - 152], rbx      # 8-byte Spill
	mov	rbx, r11
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, rbx
	mov	rbx, qword ptr [rbp - 152]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_434
	jmp	.LBB6_479
.LBB6_476:                              # %resize.i7998
	mov	esi, 32
	mov	qword ptr [rbp - 120], r10      # 8-byte Spill
	mov	qword ptr [rbp - 128], r8       # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r9, qword ptr [rbp - 160]       # 8-byte Reload
	mov	r8, qword ptr [rbp - 128]       # 8-byte Reload
	mov	r10, qword ptr [rbp - 120]      # 8-byte Reload
	mov	r11, qword ptr [rbp - 80]       # 8-byte Reload
	mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload
	mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload
	test	al, al
	je	.LBB6_439
# %bb.477:
	mov	qword ptr [rbp - 48], r8        # 8-byte Spill
	jmp	.LBB6_449
.LBB6_478:                              # %resize.i8013
	mov	qword ptr [rbp - 168], r11      # 8-byte Spill
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	mov	r11, qword ptr [rbp - 168]      # 8-byte Reload
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	test	al, al
	je	.LBB6_440
.LBB6_479:
	mov	rcx, qword ptr [rbp - 104]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_480:                              # %resize.i8029
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	jne	.LBB6_482
# %bb.481:                              # %resize.i8029.OP1306.MLOAD.contd_crit_edge
	mov	rax, qword ptr [rbp - 56]       # 8-byte Reload
	mov	r15, qword ptr [rax + 40]
	mov	r13, qword ptr [rbp - 120]      # 8-byte Reload
	jmp	.LBB6_444
.LBB6_482:
	mov	rcx, qword ptr [rbp - 144]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_483:                              # %resize.i8045
	mov	esi, 96
	mov	rdi, qword ptr [rbp - 56]       # 8-byte Reload
	vzeroupper
	call	__revmc_builtin_resize_memory@PLT
	test	al, al
	je	.LBB6_445
.LBB6_484:
	mov	qword ptr [rbp - 48], r12       # 8-byte Spill
	jmp	.LBB6_449
.LBB6_486:                              # %return.loopexit8750
	mov	al, 89
	jmp	.LBB6_449
.LBB6_487:
	mov	rcx, qword ptr [rbp - 208]      # 8-byte Reload
	mov	qword ptr [rbp - 48], rcx       # 8-byte Spill
	jmp	.LBB6_449
.Lfunc_end6:
	.size	other, .Lfunc_end6-other
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI6_0:
	.long	.LBB6_305-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_341-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_15-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_37-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_486-.LJTI6_0
	.long	.LBB6_67-.LJTI6_0
.LJTI6_1:
	.long	.LBB6_224-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_226-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_341-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_228-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_230-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_486-.LJTI6_1
	.long	.LBB6_240-.LJTI6_1
.LJTI6_2:
	.long	.LBB6_285-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_306-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_341-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_288-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_486-.LJTI6_2
	.long	.LBB6_290-.LJTI6_2
.LJTI6_3:
	.long	.LBB6_428-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_454-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_328-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_486-.LJTI6_3
	.long	.LBB6_292-.LJTI6_3
                                        # -- End function
	.section	".note.GNU-stack","",@progbits
